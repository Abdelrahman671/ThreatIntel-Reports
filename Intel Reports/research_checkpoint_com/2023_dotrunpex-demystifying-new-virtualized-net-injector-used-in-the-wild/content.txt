<!DOCTYPE html>
<html lang="en-US">
<head>
<meta http-equiv="content-type" content="text/html" charset="UTF-8" />
<meta name="description" content="Latest Research by our Team" /><meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1">
<link rel="pingback" href="https://research.checkpoint.com/xmlrpc.php" />
<style>
/*region wordpress core*/
.alignnone {margin: 5px 20px 20px 0;}.aligncenter, div.aligncenter {display: block;margin: 5px auto 5px auto;}.alignright {float:right;margin: 5px 0 20px 20px;}.alignleft {float: left;margin: 5px 20px 20px 0;}a img.alignright {float: right;margin: 5px 0 20px 20px;}a img.alignnone {margin: 5px 20px 20px 0;}a img.alignleft {float: left;margin: 5px 20px 20px 0;}a img.aligncenter {display: block;margin-left: auto;margin-right: auto;}.wp-caption {background: #fff;border: 1px solid #f0f0f0;max-width: 96%;padding: 5px 3px 10px;text-align: center;}.wp-caption.alignnone {margin: 5px 20px 20px 0;}.wp-caption.alignleft {margin: 5px 20px 20px 0;}.wp-caption.alignright {margin: 5px 0 20px 20px;}.wp-caption img {border: 0 none;height: auto;margin: 0;max-width: 98.5%;padding: 0;width: auto;}.wp-caption p.wp-caption-text {font-size: 11px;line-height: 17px;margin: 0;padding: 0 4px 5px;}.screen-reader-text {border: 0;clip: rect(1px, 1px, 1px, 1px);clip-path: inset(50%);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute !important;width: 1px;word-wrap: normal !important;}.screen-reader-text:focus {background-color: #eee;clip: auto !important;clip-path: none;color: #444;display: block;font-size: 1em;height: auto;left: 5px;line-height: normal;padding: 15px 23px 14px;text-decoration: none;top: 5px;width: auto;z-index: 100000;}
.dmbs-container {}.dmbs-header {}.dmbs-header-img {}.dmbs-header-text {}.dmbs-top-menu {}.dmbs-content {}.dmbs-main {}.dmbs-left {}.dmbs-right {}.dmbs-footer-menu {}.dmbs-author-credits {}.dmbs-footer {}
/*endregion*/
/*region slick-slider*/
.slick-slider {position: relative;display: block;box-sizing: border-box;-webkit-user-select: none;-moz-user-select: none;-ms-user-select: none;user-select: none;-webkit-touch-callout: none;-khtml-user-select: none;-ms-touch-action: pan-y;touch-action: pan-y;-webkit-tap-highlight-color: transparent;}.slick-list {position: relative;display: block;overflow: hidden;margin: 0;padding: 0;}.slick-list:focus {outline: none;}.slick-list.dragging {cursor: pointer;cursor: hand;}.slick-slider .slick-track, .slick-slider .slick-list {-webkit-transform: translate3d(0, 0, 0);-moz-transform: translate3d(0, 0, 0);-ms-transform: translate3d(0, 0, 0);-o-transform: translate3d(0, 0, 0);transform: translate3d(0, 0, 0);}.slick-track {position: relative;top: 0;left: 0;display: block;}.slick-track:before, .slick-track:after {display: table;content: '';}.slick-track:after {clear: both;}.slick-loading .slick-track {visibility: hidden;}.slick-slide {display: none;float: left;height: 100%--;min-height: 1px;}[dir='rtl'] .slick-slide {float: right;}.slick-slide img {display: block;}.slick-slide.slick-loading img {display: none;}.slick-slide.dragging img {pointer-events: none;}.slick-initialized .slick-slide {display: block;}.slick-loading .slick-slide {visibility: hidden;}.slick-vertical .slick-slide {display: block;height: auto;border: 1px solid transparent;}.slick-arrow.slick-hidden {display: none;}
/*endregion*/
/*region AOS*/
[data-aos][data-aos][data-aos-duration="50"],body[data-aos-duration="50"] [data-aos]{transition-duration:50ms}[data-aos][data-aos][data-aos-delay="50"],body[data-aos-delay="50"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="50"].aos-animate,body[data-aos-delay="50"] [data-aos].aos-animate{transition-delay:50ms}[data-aos][data-aos][data-aos-duration="100"],body[data-aos-duration="100"] [data-aos]{transition-duration:.1s}[data-aos][data-aos][data-aos-delay="100"],body[data-aos-delay="100"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="100"].aos-animate,body[data-aos-delay="100"] [data-aos].aos-animate{transition-delay:.1s}[data-aos][data-aos][data-aos-duration="150"],body[data-aos-duration="150"] [data-aos]{transition-duration:.15s}[data-aos][data-aos][data-aos-delay="150"],body[data-aos-delay="150"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="150"].aos-animate,body[data-aos-delay="150"] [data-aos].aos-animate{transition-delay:.15s}[data-aos][data-aos][data-aos-duration="200"],body[data-aos-duration="200"] [data-aos]{transition-duration:.2s}[data-aos][data-aos][data-aos-delay="200"],body[data-aos-delay="200"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="200"].aos-animate,body[data-aos-delay="200"] [data-aos].aos-animate{transition-delay:.2s}[data-aos][data-aos][data-aos-duration="250"],body[data-aos-duration="250"] [data-aos]{transition-duration:.25s}[data-aos][data-aos][data-aos-delay="250"],body[data-aos-delay="250"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="250"].aos-animate,body[data-aos-delay="250"] [data-aos].aos-animate{transition-delay:.25s}[data-aos][data-aos][data-aos-duration="300"],body[data-aos-duration="300"] [data-aos]{transition-duration:.3s}[data-aos][data-aos][data-aos-delay="300"],body[data-aos-delay="300"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="300"].aos-animate,body[data-aos-delay="300"] [data-aos].aos-animate{transition-delay:.3s}[data-aos][data-aos][data-aos-duration="350"],body[data-aos-duration="350"] [data-aos]{transition-duration:.35s}[data-aos][data-aos][data-aos-delay="350"],body[data-aos-delay="350"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="350"].aos-animate,body[data-aos-delay="350"] [data-aos].aos-animate{transition-delay:.35s}[data-aos][data-aos][data-aos-duration="400"],body[data-aos-duration="400"] [data-aos]{transition-duration:.4s}[data-aos][data-aos][data-aos-delay="400"],body[data-aos-delay="400"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="400"].aos-animate,body[data-aos-delay="400"] [data-aos].aos-animate{transition-delay:.4s}[data-aos][data-aos][data-aos-duration="450"],body[data-aos-duration="450"] [data-aos]{transition-duration:.45s}[data-aos][data-aos][data-aos-delay="450"],body[data-aos-delay="450"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="450"].aos-animate,body[data-aos-delay="450"] [data-aos].aos-animate{transition-delay:.45s}[data-aos][data-aos][data-aos-duration="500"],body[data-aos-duration="500"] [data-aos]{transition-duration:.5s}[data-aos][data-aos][data-aos-delay="500"],body[data-aos-delay="500"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="500"].aos-animate,body[data-aos-delay="500"] [data-aos].aos-animate{transition-delay:.5s}[data-aos][data-aos][data-aos-duration="550"],body[data-aos-duration="550"] [data-aos]{transition-duration:.55s}[data-aos][data-aos][data-aos-delay="550"],body[data-aos-delay="550"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="550"].aos-animate,body[data-aos-delay="550"] [data-aos].aos-animate{transition-delay:.55s}[data-aos][data-aos][data-aos-duration="600"],body[data-aos-duration="600"] [data-aos]{transition-duration:.6s}[data-aos][data-aos][data-aos-delay="600"],body[data-aos-delay="600"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="600"].aos-animate,body[data-aos-delay="600"] [data-aos].aos-animate{transition-delay:.6s}[data-aos][data-aos][data-aos-duration="650"],body[data-aos-duration="650"] [data-aos]{transition-duration:.65s}[data-aos][data-aos][data-aos-delay="650"],body[data-aos-delay="650"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="650"].aos-animate,body[data-aos-delay="650"] [data-aos].aos-animate{transition-delay:.65s}[data-aos][data-aos][data-aos-duration="700"],body[data-aos-duration="700"] [data-aos]{transition-duration:.7s}[data-aos][data-aos][data-aos-delay="700"],body[data-aos-delay="700"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="700"].aos-animate,body[data-aos-delay="700"] [data-aos].aos-animate{transition-delay:.7s}[data-aos][data-aos][data-aos-duration="750"],body[data-aos-duration="750"] [data-aos]{transition-duration:.75s}[data-aos][data-aos][data-aos-delay="750"],body[data-aos-delay="750"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="750"].aos-animate,body[data-aos-delay="750"] [data-aos].aos-animate{transition-delay:.75s}[data-aos][data-aos][data-aos-duration="800"],body[data-aos-duration="800"] [data-aos]{transition-duration:.8s}[data-aos][data-aos][data-aos-delay="800"],body[data-aos-delay="800"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="800"].aos-animate,body[data-aos-delay="800"] [data-aos].aos-animate{transition-delay:.8s}[data-aos][data-aos][data-aos-duration="850"],body[data-aos-duration="850"] [data-aos]{transition-duration:.85s}[data-aos][data-aos][data-aos-delay="850"],body[data-aos-delay="850"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="850"].aos-animate,body[data-aos-delay="850"] [data-aos].aos-animate{transition-delay:.85s}[data-aos][data-aos][data-aos-duration="900"],body[data-aos-duration="900"] [data-aos]{transition-duration:.9s}[data-aos][data-aos][data-aos-delay="900"],body[data-aos-delay="900"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="900"].aos-animate,body[data-aos-delay="900"] [data-aos].aos-animate{transition-delay:.9s}[data-aos][data-aos][data-aos-duration="950"],body[data-aos-duration="950"] [data-aos]{transition-duration:.95s}[data-aos][data-aos][data-aos-delay="950"],body[data-aos-delay="950"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="950"].aos-animate,body[data-aos-delay="950"] [data-aos].aos-animate{transition-delay:.95s}[data-aos][data-aos][data-aos-duration="1000"],body[data-aos-duration="1000"] [data-aos]{transition-duration:1s}[data-aos][data-aos][data-aos-delay="1000"],body[data-aos-delay="1000"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1000"].aos-animate,body[data-aos-delay="1000"] [data-aos].aos-animate{transition-delay:1s}[data-aos][data-aos][data-aos-duration="1050"],body[data-aos-duration="1050"] [data-aos]{transition-duration:1.05s}[data-aos][data-aos][data-aos-delay="1050"],body[data-aos-delay="1050"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1050"].aos-animate,body[data-aos-delay="1050"] [data-aos].aos-animate{transition-delay:1.05s}[data-aos][data-aos][data-aos-duration="1100"],body[data-aos-duration="1100"] [data-aos]{transition-duration:1.1s}[data-aos][data-aos][data-aos-delay="1100"],body[data-aos-delay="1100"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1100"].aos-animate,body[data-aos-delay="1100"] [data-aos].aos-animate{transition-delay:1.1s}[data-aos][data-aos][data-aos-duration="1150"],body[data-aos-duration="1150"] [data-aos]{transition-duration:1.15s}[data-aos][data-aos][data-aos-delay="1150"],body[data-aos-delay="1150"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1150"].aos-animate,body[data-aos-delay="1150"] [data-aos].aos-animate{transition-delay:1.15s}[data-aos][data-aos][data-aos-duration="1200"],body[data-aos-duration="1200"] [data-aos]{transition-duration:1.2s}[data-aos][data-aos][data-aos-delay="1200"],body[data-aos-delay="1200"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1200"].aos-animate,body[data-aos-delay="1200"] [data-aos].aos-animate{transition-delay:1.2s}[data-aos][data-aos][data-aos-duration="1250"],body[data-aos-duration="1250"] [data-aos]{transition-duration:1.25s}[data-aos][data-aos][data-aos-delay="1250"],body[data-aos-delay="1250"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1250"].aos-animate,body[data-aos-delay="1250"] [data-aos].aos-animate{transition-delay:1.25s}[data-aos][data-aos][data-aos-duration="1300"],body[data-aos-duration="1300"] [data-aos]{transition-duration:1.3s}[data-aos][data-aos][data-aos-delay="1300"],body[data-aos-delay="1300"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1300"].aos-animate,body[data-aos-delay="1300"] [data-aos].aos-animate{transition-delay:1.3s}[data-aos][data-aos][data-aos-duration="1350"],body[data-aos-duration="1350"] [data-aos]{transition-duration:1.35s}[data-aos][data-aos][data-aos-delay="1350"],body[data-aos-delay="1350"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1350"].aos-animate,body[data-aos-delay="1350"] [data-aos].aos-animate{transition-delay:1.35s}[data-aos][data-aos][data-aos-duration="1400"],body[data-aos-duration="1400"] [data-aos]{transition-duration:1.4s}[data-aos][data-aos][data-aos-delay="1400"],body[data-aos-delay="1400"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1400"].aos-animate,body[data-aos-delay="1400"] [data-aos].aos-animate{transition-delay:1.4s}[data-aos][data-aos][data-aos-duration="1450"],body[data-aos-duration="1450"] [data-aos]{transition-duration:1.45s}[data-aos][data-aos][data-aos-delay="1450"],body[data-aos-delay="1450"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1450"].aos-animate,body[data-aos-delay="1450"] [data-aos].aos-animate{transition-delay:1.45s}[data-aos][data-aos][data-aos-duration="1500"],body[data-aos-duration="1500"] [data-aos]{transition-duration:1.5s}[data-aos][data-aos][data-aos-delay="1500"],body[data-aos-delay="1500"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1500"].aos-animate,body[data-aos-delay="1500"] [data-aos].aos-animate{transition-delay:1.5s}[data-aos][data-aos][data-aos-duration="1550"],body[data-aos-duration="1550"] [data-aos]{transition-duration:1.55s}[data-aos][data-aos][data-aos-delay="1550"],body[data-aos-delay="1550"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1550"].aos-animate,body[data-aos-delay="1550"] [data-aos].aos-animate{transition-delay:1.55s}[data-aos][data-aos][data-aos-duration="1600"],body[data-aos-duration="1600"] [data-aos]{transition-duration:1.6s}[data-aos][data-aos][data-aos-delay="1600"],body[data-aos-delay="1600"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1600"].aos-animate,body[data-aos-delay="1600"] [data-aos].aos-animate{transition-delay:1.6s}[data-aos][data-aos][data-aos-duration="1650"],body[data-aos-duration="1650"] [data-aos]{transition-duration:1.65s}[data-aos][data-aos][data-aos-delay="1650"],body[data-aos-delay="1650"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1650"].aos-animate,body[data-aos-delay="1650"] [data-aos].aos-animate{transition-delay:1.65s}[data-aos][data-aos][data-aos-duration="1700"],body[data-aos-duration="1700"] [data-aos]{transition-duration:1.7s}[data-aos][data-aos][data-aos-delay="1700"],body[data-aos-delay="1700"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1700"].aos-animate,body[data-aos-delay="1700"] [data-aos].aos-animate{transition-delay:1.7s}[data-aos][data-aos][data-aos-duration="1750"],body[data-aos-duration="1750"] [data-aos]{transition-duration:1.75s}[data-aos][data-aos][data-aos-delay="1750"],body[data-aos-delay="1750"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1750"].aos-animate,body[data-aos-delay="1750"] [data-aos].aos-animate{transition-delay:1.75s}[data-aos][data-aos][data-aos-duration="1800"],body[data-aos-duration="1800"] [data-aos]{transition-duration:1.8s}[data-aos][data-aos][data-aos-delay="1800"],body[data-aos-delay="1800"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1800"].aos-animate,body[data-aos-delay="1800"] [data-aos].aos-animate{transition-delay:1.8s}[data-aos][data-aos][data-aos-duration="1850"],body[data-aos-duration="1850"] [data-aos]{transition-duration:1.85s}[data-aos][data-aos][data-aos-delay="1850"],body[data-aos-delay="1850"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1850"].aos-animate,body[data-aos-delay="1850"] [data-aos].aos-animate{transition-delay:1.85s}[data-aos][data-aos][data-aos-duration="1900"],body[data-aos-duration="1900"] [data-aos]{transition-duration:1.9s}[data-aos][data-aos][data-aos-delay="1900"],body[data-aos-delay="1900"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1900"].aos-animate,body[data-aos-delay="1900"] [data-aos].aos-animate{transition-delay:1.9s}[data-aos][data-aos][data-aos-duration="1950"],body[data-aos-duration="1950"] [data-aos]{transition-duration:1.95s}[data-aos][data-aos][data-aos-delay="1950"],body[data-aos-delay="1950"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1950"].aos-animate,body[data-aos-delay="1950"] [data-aos].aos-animate{transition-delay:1.95s}[data-aos][data-aos][data-aos-duration="2000"],body[data-aos-duration="2000"] [data-aos]{transition-duration:2s}[data-aos][data-aos][data-aos-delay="2000"],body[data-aos-delay="2000"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2000"].aos-animate,body[data-aos-delay="2000"] [data-aos].aos-animate{transition-delay:2s}[data-aos][data-aos][data-aos-duration="2050"],body[data-aos-duration="2050"] [data-aos]{transition-duration:2.05s}[data-aos][data-aos][data-aos-delay="2050"],body[data-aos-delay="2050"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2050"].aos-animate,body[data-aos-delay="2050"] [data-aos].aos-animate{transition-delay:2.05s}[data-aos][data-aos][data-aos-duration="2100"],body[data-aos-duration="2100"] [data-aos]{transition-duration:2.1s}[data-aos][data-aos][data-aos-delay="2100"],body[data-aos-delay="2100"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2100"].aos-animate,body[data-aos-delay="2100"] [data-aos].aos-animate{transition-delay:2.1s}[data-aos][data-aos][data-aos-duration="2150"],body[data-aos-duration="2150"] [data-aos]{transition-duration:2.15s}[data-aos][data-aos][data-aos-delay="2150"],body[data-aos-delay="2150"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2150"].aos-animate,body[data-aos-delay="2150"] [data-aos].aos-animate{transition-delay:2.15s}[data-aos][data-aos][data-aos-duration="2200"],body[data-aos-duration="2200"] [data-aos]{transition-duration:2.2s}[data-aos][data-aos][data-aos-delay="2200"],body[data-aos-delay="2200"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2200"].aos-animate,body[data-aos-delay="2200"] [data-aos].aos-animate{transition-delay:2.2s}[data-aos][data-aos][data-aos-duration="2250"],body[data-aos-duration="2250"] [data-aos]{transition-duration:2.25s}[data-aos][data-aos][data-aos-delay="2250"],body[data-aos-delay="2250"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2250"].aos-animate,body[data-aos-delay="2250"] [data-aos].aos-animate{transition-delay:2.25s}[data-aos][data-aos][data-aos-duration="2300"],body[data-aos-duration="2300"] [data-aos]{transition-duration:2.3s}[data-aos][data-aos][data-aos-delay="2300"],body[data-aos-delay="2300"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2300"].aos-animate,body[data-aos-delay="2300"] [data-aos].aos-animate{transition-delay:2.3s}[data-aos][data-aos][data-aos-duration="2350"],body[data-aos-duration="2350"] [data-aos]{transition-duration:2.35s}[data-aos][data-aos][data-aos-delay="2350"],body[data-aos-delay="2350"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2350"].aos-animate,body[data-aos-delay="2350"] [data-aos].aos-animate{transition-delay:2.35s}[data-aos][data-aos][data-aos-duration="2400"],body[data-aos-duration="2400"] [data-aos]{transition-duration:2.4s}[data-aos][data-aos][data-aos-delay="2400"],body[data-aos-delay="2400"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2400"].aos-animate,body[data-aos-delay="2400"] [data-aos].aos-animate{transition-delay:2.4s}[data-aos][data-aos][data-aos-duration="2450"],body[data-aos-duration="2450"] [data-aos]{transition-duration:2.45s}[data-aos][data-aos][data-aos-delay="2450"],body[data-aos-delay="2450"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2450"].aos-animate,body[data-aos-delay="2450"] [data-aos].aos-animate{transition-delay:2.45s}[data-aos][data-aos][data-aos-duration="2500"],body[data-aos-duration="2500"] [data-aos]{transition-duration:2.5s}[data-aos][data-aos][data-aos-delay="2500"],body[data-aos-delay="2500"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2500"].aos-animate,body[data-aos-delay="2500"] [data-aos].aos-animate{transition-delay:2.5s}[data-aos][data-aos][data-aos-duration="2550"],body[data-aos-duration="2550"] [data-aos]{transition-duration:2.55s}[data-aos][data-aos][data-aos-delay="2550"],body[data-aos-delay="2550"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2550"].aos-animate,body[data-aos-delay="2550"] [data-aos].aos-animate{transition-delay:2.55s}[data-aos][data-aos][data-aos-duration="2600"],body[data-aos-duration="2600"] [data-aos]{transition-duration:2.6s}[data-aos][data-aos][data-aos-delay="2600"],body[data-aos-delay="2600"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2600"].aos-animate,body[data-aos-delay="2600"] [data-aos].aos-animate{transition-delay:2.6s}[data-aos][data-aos][data-aos-duration="2650"],body[data-aos-duration="2650"] [data-aos]{transition-duration:2.65s}[data-aos][data-aos][data-aos-delay="2650"],body[data-aos-delay="2650"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2650"].aos-animate,body[data-aos-delay="2650"] [data-aos].aos-animate{transition-delay:2.65s}[data-aos][data-aos][data-aos-duration="2700"],body[data-aos-duration="2700"] [data-aos]{transition-duration:2.7s}[data-aos][data-aos][data-aos-delay="2700"],body[data-aos-delay="2700"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2700"].aos-animate,body[data-aos-delay="2700"] [data-aos].aos-animate{transition-delay:2.7s}[data-aos][data-aos][data-aos-duration="2750"],body[data-aos-duration="2750"] [data-aos]{transition-duration:2.75s}[data-aos][data-aos][data-aos-delay="2750"],body[data-aos-delay="2750"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2750"].aos-animate,body[data-aos-delay="2750"] [data-aos].aos-animate{transition-delay:2.75s}[data-aos][data-aos][data-aos-duration="2800"],body[data-aos-duration="2800"] [data-aos]{transition-duration:2.8s}[data-aos][data-aos][data-aos-delay="2800"],body[data-aos-delay="2800"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2800"].aos-animate,body[data-aos-delay="2800"] [data-aos].aos-animate{transition-delay:2.8s}[data-aos][data-aos][data-aos-duration="2850"],body[data-aos-duration="2850"] [data-aos]{transition-duration:2.85s}[data-aos][data-aos][data-aos-delay="2850"],body[data-aos-delay="2850"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2850"].aos-animate,body[data-aos-delay="2850"] [data-aos].aos-animate{transition-delay:2.85s}[data-aos][data-aos][data-aos-duration="2900"],body[data-aos-duration="2900"] [data-aos]{transition-duration:2.9s}[data-aos][data-aos][data-aos-delay="2900"],body[data-aos-delay="2900"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2900"].aos-animate,body[data-aos-delay="2900"] [data-aos].aos-animate{transition-delay:2.9s}[data-aos][data-aos][data-aos-duration="2950"],body[data-aos-duration="2950"] [data-aos]{transition-duration:2.95s}[data-aos][data-aos][data-aos-delay="2950"],body[data-aos-delay="2950"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2950"].aos-animate,body[data-aos-delay="2950"] [data-aos].aos-animate{transition-delay:2.95s}[data-aos][data-aos][data-aos-duration="3000"],body[data-aos-duration="3000"] [data-aos]{transition-duration:3s}[data-aos][data-aos][data-aos-delay="3000"],body[data-aos-delay="3000"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="3000"].aos-animate,body[data-aos-delay="3000"] [data-aos].aos-animate{transition-delay:3s}[data-aos][data-aos][data-aos-easing=linear],body[data-aos-easing=linear] [data-aos]{transition-timing-function:cubic-bezier(.25,.25,.75,.75)}[data-aos][data-aos][data-aos-easing=ease],body[data-aos-easing=ease] [data-aos]{transition-timing-function:ease}[data-aos][data-aos][data-aos-easing=ease-in],body[data-aos-easing=ease-in] [data-aos]{transition-timing-function:ease-in}[data-aos][data-aos][data-aos-easing=ease-out],body[data-aos-easing=ease-out] [data-aos]{transition-timing-function:ease-out}[data-aos][data-aos][data-aos-easing=ease-in-out],body[data-aos-easing=ease-in-out] [data-aos]{transition-timing-function:ease-in-out}[data-aos][data-aos][data-aos-easing=ease-in-back],body[data-aos-easing=ease-in-back] [data-aos]{transition-timing-function:cubic-bezier(.6,-.28,.735,.045)}[data-aos][data-aos][data-aos-easing=ease-out-back],body[data-aos-easing=ease-out-back] [data-aos]{transition-timing-function:cubic-bezier(.175,.885,.32,1.275)}[data-aos][data-aos][data-aos-easing=ease-in-out-back],body[data-aos-easing=ease-in-out-back] [data-aos]{transition-timing-function:cubic-bezier(.68,-.55,.265,1.55)}[data-aos][data-aos][data-aos-easing=ease-in-sine],body[data-aos-easing=ease-in-sine] [data-aos]{transition-timing-function:cubic-bezier(.47,0,.745,.715)}[data-aos][data-aos][data-aos-easing=ease-out-sine],body[data-aos-easing=ease-out-sine] [data-aos]{transition-timing-function:cubic-bezier(.39,.575,.565,1)}[data-aos][data-aos][data-aos-easing=ease-in-out-sine],body[data-aos-easing=ease-in-out-sine] [data-aos]{transition-timing-function:cubic-bezier(.445,.05,.55,.95)}[data-aos][data-aos][data-aos-easing=ease-in-quad],body[data-aos-easing=ease-in-quad] [data-aos]{transition-timing-function:cubic-bezier(.55,.085,.68,.53)}[data-aos][data-aos][data-aos-easing=ease-out-quad],body[data-aos-easing=ease-out-quad] [data-aos]{transition-timing-function:cubic-bezier(.25,.46,.45,.94)}[data-aos][data-aos][data-aos-easing=ease-in-out-quad],body[data-aos-easing=ease-in-out-quad] [data-aos]{transition-timing-function:cubic-bezier(.455,.03,.515,.955)}[data-aos][data-aos][data-aos-easing=ease-in-cubic],body[data-aos-easing=ease-in-cubic] [data-aos]{transition-timing-function:cubic-bezier(.55,.085,.68,.53)}[data-aos][data-aos][data-aos-easing=ease-out-cubic],body[data-aos-easing=ease-out-cubic] [data-aos]{transition-timing-function:cubic-bezier(.25,.46,.45,.94)}[data-aos][data-aos][data-aos-easing=ease-in-out-cubic],body[data-aos-easing=ease-in-out-cubic] [data-aos]{transition-timing-function:cubic-bezier(.455,.03,.515,.955)}[data-aos][data-aos][data-aos-easing=ease-in-quart],body[data-aos-easing=ease-in-quart] [data-aos]{transition-timing-function:cubic-bezier(.55,.085,.68,.53)}[data-aos][data-aos][data-aos-easing=ease-out-quart],body[data-aos-easing=ease-out-quart] [data-aos]{transition-timing-function:cubic-bezier(.25,.46,.45,.94)}[data-aos][data-aos][data-aos-easing=ease-in-out-quart],body[data-aos-easing=ease-in-out-quart] [data-aos]{transition-timing-function:cubic-bezier(.455,.03,.515,.955)}[data-aos^=fade][data-aos^=fade]{opacity:0;transition-property:opacity,transform}[data-aos^=fade][data-aos^=fade].aos-animate{opacity:1;transform:translateZ(0)}[data-aos=fade-up]{transform:translate3d(0,100px,0)}[data-aos=fade-down]{transform:translate3d(0,-100px,0)}[data-aos=fade-right]{transform:translate3d(-100px,0,0)}[data-aos=fade-left]{transform:translate3d(100px,0,0)}[data-aos=fade-up-right]{transform:translate3d(-100px,100px,0)}[data-aos=fade-up-left]{transform:translate3d(100px,100px,0)}[data-aos=fade-down-right]{transform:translate3d(-100px,-100px,0)}[data-aos=fade-down-left]{transform:translate3d(100px,-100px,0)}[data-aos^=zoom][data-aos^=zoom]{opacity:0;transition-property:opacity,transform}[data-aos^=zoom][data-aos^=zoom].aos-animate{opacity:1;transform:translateZ(0) scale(1)}[data-aos=zoom-in]{transform:scale(.6)}[data-aos=zoom-in-up]{transform:translate3d(0,100px,0) scale(.6)}[data-aos=zoom-in-down]{transform:translate3d(0,-100px,0) scale(.6)}[data-aos=zoom-in-right]{transform:translate3d(-100px,0,0) scale(.6)}[data-aos=zoom-in-left]{transform:translate3d(100px,0,0) scale(.6)}[data-aos=zoom-out]{transform:scale(1.2)}[data-aos=zoom-out-up]{transform:translate3d(0,100px,0) scale(1.2)}[data-aos=zoom-out-down]{transform:translate3d(0,-100px,0) scale(1.2)}[data-aos=zoom-out-right]{transform:translate3d(-100px,0,0) scale(1.2)}[data-aos=zoom-out-left]{transform:translate3d(100px,0,0) scale(1.2)}[data-aos^=slide][data-aos^=slide]{transition-property:transform}[data-aos^=slide][data-aos^=slide].aos-animate{transform:translateZ(0)}[data-aos=slide-up]{transform:translate3d(0,100%,0)}[data-aos=slide-down]{transform:translate3d(0,-100%,0)}[data-aos=slide-right]{transform:translate3d(-100%,0,0)}[data-aos=slide-left]{transform:translate3d(100%,0,0)}[data-aos^=flip][data-aos^=flip]{backface-visibility:hidden;transition-property:transform}[data-aos=flip-left]{transform:perspective(2500px) rotateY(-100deg)}[data-aos=flip-left].aos-animate{transform:perspective(2500px) rotateY(0)}[data-aos=flip-right]{transform:perspective(2500px) rotateY(100deg)}[data-aos=flip-right].aos-animate{transform:perspective(2500px) rotateY(0)}[data-aos=flip-up]{transform:perspective(2500px) rotateX(-100deg)}[data-aos=flip-up].aos-animate{transform:perspective(2500px) rotateX(0)}[data-aos=flip-down]{transform:perspective(2500px) rotateX(100deg)}[data-aos=flip-down].aos-animate{transform:perspective(2500px) rotateX(0)}
/*endregion*/
</style>
<meta name='robots' content='index, follow, max-image-preview:large, max-snippet:-1, max-video-preview:-1' />

	<!-- This site is optimized with the Yoast SEO plugin v23.7 - https://yoast.com/wordpress/plugins/seo/ -->
	<title>DotRunpeX - demystifying new virtualized .NET injector used in the wild - Check Point Research</title>
	<link rel="canonical" href="https://research.checkpoint.com/2023/dotrunpex-demystifying-new-virtualized-net-injector-used-in-the-wild/" />
	<meta property="og:locale" content="en_US" />
	<meta property="og:type" content="article" />
	<meta property="og:title" content="DotRunpeX - demystifying new virtualized .NET injector used in the wild - Check Point Research" />
	<meta property="og:description" content="ImplMap2x64dbgInvoke-DotRunpeXextract" />
	<meta property="og:url" content="https://research.checkpoint.com/2023/dotrunpex-demystifying-new-virtualized-net-injector-used-in-the-wild/" />
	<meta property="og:site_name" content="Check Point Research" />
	<meta property="article:publisher" content="https://www.facebook.com/checkpointresearch/" />
	<meta property="article:published_time" content="2023-03-15T12:30:47+00:00" />
	<meta property="article:modified_time" content="2023-08-08T20:51:39+00:00" />
	<meta property="og:image" content="https://research.checkpoint.com/wp-content/uploads/2023/03/MicrosoftTeams-image-2.png" />
	<meta property="og:image:width" content="1568" />
	<meta property="og:image:height" content="896" />
	<meta property="og:image:type" content="image/png" />
	<meta name="author" content="elism@checkpoint.com" />
	<meta name="twitter:card" content="summary_large_image" />
	<meta name="twitter:creator" content="@_cpresearch_" />
	<meta name="twitter:site" content="@_cpresearch_" />
	<meta name="twitter:label1" content="Written by" />
	<meta name="twitter:data1" content="elism@checkpoint.com" />
	<meta name="twitter:label2" content="Est. reading time" />
	<meta name="twitter:data2" content="48 minutes" />
	<script type="application/ld+json" class="yoast-schema-graph">{"@context":"https://schema.org","@graph":[{"@type":"Article","@id":"https://research.checkpoint.com/2023/dotrunpex-demystifying-new-virtualized-net-injector-used-in-the-wild/#article","isPartOf":{"@id":"https://research.checkpoint.com/2023/dotrunpex-demystifying-new-virtualized-net-injector-used-in-the-wild/"},"author":{"name":"elism@checkpoint.com","@id":"https://research.checkpoint.com/#/schema/person/f6cb0504cdb643d1647d6dccd2384287"},"headline":"DotRunpeX &#8211; demystifying new virtualized .NET injector used in the wild","datePublished":"2023-03-15T12:30:47+00:00","dateModified":"2023-08-08T20:51:39+00:00","mainEntityOfPage":{"@id":"https://research.checkpoint.com/2023/dotrunpex-demystifying-new-virtualized-net-injector-used-in-the-wild/"},"wordCount":9419,"publisher":{"@id":"https://research.checkpoint.com/#organization"},"image":{"@id":"https://research.checkpoint.com/2023/dotrunpex-demystifying-new-virtualized-net-injector-used-in-the-wild/#primaryimage"},"thumbnailUrl":"https://research.checkpoint.com/wp-content/uploads/2023/03/MicrosoftTeams-image-2.png","articleSection":["Check Point Research Publications"],"inLanguage":"en-US"},{"@type":"WebPage","@id":"https://research.checkpoint.com/2023/dotrunpex-demystifying-new-virtualized-net-injector-used-in-the-wild/","url":"https://research.checkpoint.com/2023/dotrunpex-demystifying-new-virtualized-net-injector-used-in-the-wild/","name":"DotRunpeX - demystifying new virtualized .NET injector used in the wild - Check Point Research","isPartOf":{"@id":"https://research.checkpoint.com/#website"},"primaryImageOfPage":{"@id":"https://research.checkpoint.com/2023/dotrunpex-demystifying-new-virtualized-net-injector-used-in-the-wild/#primaryimage"},"image":{"@id":"https://research.checkpoint.com/2023/dotrunpex-demystifying-new-virtualized-net-injector-used-in-the-wild/#primaryimage"},"thumbnailUrl":"https://research.checkpoint.com/wp-content/uploads/2023/03/MicrosoftTeams-image-2.png","datePublished":"2023-03-15T12:30:47+00:00","dateModified":"2023-08-08T20:51:39+00:00","breadcrumb":{"@id":"https://research.checkpoint.com/2023/dotrunpex-demystifying-new-virtualized-net-injector-used-in-the-wild/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https://research.checkpoint.com/2023/dotrunpex-demystifying-new-virtualized-net-injector-used-in-the-wild/"]}]},{"@type":"ImageObject","inLanguage":"en-US","@id":"https://research.checkpoint.com/2023/dotrunpex-demystifying-new-virtualized-net-injector-used-in-the-wild/#primaryimage","url":"https://research.checkpoint.com/wp-content/uploads/2023/03/MicrosoftTeams-image-2.png","contentUrl":"https://research.checkpoint.com/wp-content/uploads/2023/03/MicrosoftTeams-image-2.png","width":1568,"height":896},{"@type":"BreadcrumbList","@id":"https://research.checkpoint.com/2023/dotrunpex-demystifying-new-virtualized-net-injector-used-in-the-wild/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https://research.checkpoint.com/"},{"@type":"ListItem","position":2,"name":"DotRunpeX &#8211; demystifying new virtualized .NET injector used in the wild"}]},{"@type":"WebSite","@id":"https://research.checkpoint.com/#website","url":"https://research.checkpoint.com/","name":"Check Point Research","description":"Latest Research by our Team","publisher":{"@id":"https://research.checkpoint.com/#organization"},"potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https://research.checkpoint.com/?s={search_term_string}"},"query-input":{"@type":"PropertyValueSpecification","valueRequired":true,"valueName":"search_term_string"}}],"inLanguage":"en-US"},{"@type":"Organization","@id":"https://research.checkpoint.com/#organization","name":"Check Point Research","url":"https://research.checkpoint.com/","logo":{"@type":"ImageObject","inLanguage":"en-US","@id":"https://research.checkpoint.com/#/schema/logo/image/","url":"https://research.checkpoint.com/wp-content/uploads/2018/07/CPR_Logo_168x77_blackbackground_proof-01.png","contentUrl":"https://research.checkpoint.com/wp-content/uploads/2018/07/CPR_Logo_168x77_blackbackground_proof-01.png","width":164,"height":77,"caption":"Check Point Research"},"image":{"@id":"https://research.checkpoint.com/#/schema/logo/image/"},"sameAs":["https://www.facebook.com/checkpointresearch/","https://x.com/_cpresearch_"]},{"@type":"Person","@id":"https://research.checkpoint.com/#/schema/person/f6cb0504cdb643d1647d6dccd2384287","name":"elism@checkpoint.com","image":{"@type":"ImageObject","inLanguage":"en-US","@id":"https://research.checkpoint.com/#/schema/person/image/","url":"https://secure.gravatar.com/avatar/02277123e00e8c7b4bf5f956b9986bd6?s=96&d=mm&r=g","contentUrl":"https://secure.gravatar.com/avatar/02277123e00e8c7b4bf5f956b9986bd6?s=96&d=mm&r=g","caption":"elism@checkpoint.com"},"url":"https://research.checkpoint.com/author/elismcheckpoint-com/"}]}</script>
	<!-- / Yoast SEO plugin. -->


<script type="text/javascript">
/* <![CDATA[ */
window._wpemojiSettings = {"baseUrl":"https:\/\/s.w.org\/images\/core\/emoji\/15.0.3\/72x72\/","ext":".png","svgUrl":"https:\/\/s.w.org\/images\/core\/emoji\/15.0.3\/svg\/","svgExt":".svg","source":{"concatemoji":"https:\/\/research.checkpoint.com\/wp-includes\/js\/wp-emoji-release.min.js?ver=6.6.1"}};
/*! This file is auto-generated */
!function(i,n){var o,s,e;function c(e){try{var t={supportTests:e,timestamp:(new Date).valueOf()};sessionStorage.setItem(o,JSON.stringify(t))}catch(e){}}function p(e,t,n){e.clearRect(0,0,e.canvas.width,e.canvas.height),e.fillText(t,0,0);var t=new Uint32Array(e.getImageData(0,0,e.canvas.width,e.canvas.height).data),r=(e.clearRect(0,0,e.canvas.width,e.canvas.height),e.fillText(n,0,0),new Uint32Array(e.getImageData(0,0,e.canvas.width,e.canvas.height).data));return t.every(function(e,t){return e===r[t]})}function u(e,t,n){switch(t){case"flag":return n(e,"\ud83c\udff3\ufe0f\u200d\u26a7\ufe0f","\ud83c\udff3\ufe0f\u200b\u26a7\ufe0f")?!1:!n(e,"\ud83c\uddfa\ud83c\uddf3","\ud83c\uddfa\u200b\ud83c\uddf3")&&!n(e,"\ud83c\udff4\udb40\udc67\udb40\udc62\udb40\udc65\udb40\udc6e\udb40\udc67\udb40\udc7f","\ud83c\udff4\u200b\udb40\udc67\u200b\udb40\udc62\u200b\udb40\udc65\u200b\udb40\udc6e\u200b\udb40\udc67\u200b\udb40\udc7f");case"emoji":return!n(e,"\ud83d\udc26\u200d\u2b1b","\ud83d\udc26\u200b\u2b1b")}return!1}function f(e,t,n){var r="undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope?new OffscreenCanvas(300,150):i.createElement("canvas"),a=r.getContext("2d",{willReadFrequently:!0}),o=(a.textBaseline="top",a.font="600 32px Arial",{});return e.forEach(function(e){o[e]=t(a,e,n)}),o}function t(e){var t=i.createElement("script");t.src=e,t.defer=!0,i.head.appendChild(t)}"undefined"!=typeof Promise&&(o="wpEmojiSettingsSupports",s=["flag","emoji"],n.supports={everything:!0,everythingExceptFlag:!0},e=new Promise(function(e){i.addEventListener("DOMContentLoaded",e,{once:!0})}),new Promise(function(t){var n=function(){try{var e=JSON.parse(sessionStorage.getItem(o));if("object"==typeof e&&"number"==typeof e.timestamp&&(new Date).valueOf()<e.timestamp+604800&&"object"==typeof e.supportTests)return e.supportTests}catch(e){}return null}();if(!n){if("undefined"!=typeof Worker&&"undefined"!=typeof OffscreenCanvas&&"undefined"!=typeof URL&&URL.createObjectURL&&"undefined"!=typeof Blob)try{var e="postMessage("+f.toString()+"("+[JSON.stringify(s),u.toString(),p.toString()].join(",")+"));",r=new Blob([e],{type:"text/javascript"}),a=new Worker(URL.createObjectURL(r),{name:"wpTestEmojiSupports"});return void(a.onmessage=function(e){c(n=e.data),a.terminate(),t(n)})}catch(e){}c(n=f(s,u,p))}t(n)}).then(function(e){for(var t in e)n.supports[t]=e[t],n.supports.everything=n.supports.everything&&n.supports[t],"flag"!==t&&(n.supports.everythingExceptFlag=n.supports.everythingExceptFlag&&n.supports[t]);n.supports.everythingExceptFlag=n.supports.everythingExceptFlag&&!n.supports.flag,n.DOMReady=!1,n.readyCallback=function(){n.DOMReady=!0}}).then(function(){return e}).then(function(){var e;n.supports.everything||(n.readyCallback(),(e=n.source||{}).concatemoji?t(e.concatemoji):e.wpemoji&&e.twemoji&&(t(e.twemoji),t(e.wpemoji)))}))}((window,document),window._wpemojiSettings);
/* ]]> */
</script>
<style id='wp-emoji-styles-inline-css' type='text/css'>

	img.wp-smiley, img.emoji {
		display: inline !important;
		border: none !important;
		box-shadow: none !important;
		height: 1em !important;
		width: 1em !important;
		margin: 0 0.07em !important;
		vertical-align: -0.1em !important;
		background: none !important;
		padding: 0 !important;
	}
</style>
<link rel='stylesheet' id='wp-block-library-css' href='https://research.checkpoint.com/wp-content/plugins/gutenberg/build/block-library/style.css?ver=19.5.0' type='text/css' media='all' />
<style id='classic-theme-styles-inline-css' type='text/css'>
/*! This file is auto-generated */
.wp-block-button__link{color:#fff;background-color:#32373c;border-radius:9999px;box-shadow:none;text-decoration:none;padding:calc(.667em + 2px) calc(1.333em + 2px);font-size:1.125em}.wp-block-file__button{background:#32373c;color:#fff;text-decoration:none}
</style>
<link rel='stylesheet' id='contact-form-7-css' href='https://research.checkpoint.com/wp-content/plugins/contact-form-7/includes/css/styles.css?ver=5.9.8' type='text/css' media='all' />
<link rel='stylesheet' id='email-subscribers-css' href='https://research.checkpoint.com/wp-content/plugins/email-subscribers/lite/public/css/email-subscribers-public.css?ver=5.7.36' type='text/css' media='all' />
<style id='global-styles-inline-css' type='text/css'>
:root{--wp--preset--aspect-ratio--square: 1;--wp--preset--aspect-ratio--4-3: 4/3;--wp--preset--aspect-ratio--3-4: 3/4;--wp--preset--aspect-ratio--3-2: 3/2;--wp--preset--aspect-ratio--2-3: 2/3;--wp--preset--aspect-ratio--16-9: 16/9;--wp--preset--aspect-ratio--9-16: 9/16;--wp--preset--color--black: #000000;--wp--preset--color--cyan-bluish-gray: #abb8c3;--wp--preset--color--white: #ffffff;--wp--preset--color--pale-pink: #f78da7;--wp--preset--color--vivid-red: #cf2e2e;--wp--preset--color--luminous-vivid-orange: #ff6900;--wp--preset--color--luminous-vivid-amber: #fcb900;--wp--preset--color--light-green-cyan: #7bdcb5;--wp--preset--color--vivid-green-cyan: #00d084;--wp--preset--color--pale-cyan-blue: #8ed1fc;--wp--preset--color--vivid-cyan-blue: #0693e3;--wp--preset--color--vivid-purple: #9b51e0;--wp--preset--gradient--vivid-cyan-blue-to-vivid-purple: linear-gradient(135deg,rgba(6,147,227,1) 0%,rgb(155,81,224) 100%);--wp--preset--gradient--light-green-cyan-to-vivid-green-cyan: linear-gradient(135deg,rgb(122,220,180) 0%,rgb(0,208,130) 100%);--wp--preset--gradient--luminous-vivid-amber-to-luminous-vivid-orange: linear-gradient(135deg,rgba(252,185,0,1) 0%,rgba(255,105,0,1) 100%);--wp--preset--gradient--luminous-vivid-orange-to-vivid-red: linear-gradient(135deg,rgba(255,105,0,1) 0%,rgb(207,46,46) 100%);--wp--preset--gradient--very-light-gray-to-cyan-bluish-gray: linear-gradient(135deg,rgb(238,238,238) 0%,rgb(169,184,195) 100%);--wp--preset--gradient--cool-to-warm-spectrum: linear-gradient(135deg,rgb(74,234,220) 0%,rgb(151,120,209) 20%,rgb(207,42,186) 40%,rgb(238,44,130) 60%,rgb(251,105,98) 80%,rgb(254,248,76) 100%);--wp--preset--gradient--blush-light-purple: linear-gradient(135deg,rgb(255,206,236) 0%,rgb(152,150,240) 100%);--wp--preset--gradient--blush-bordeaux: linear-gradient(135deg,rgb(254,205,165) 0%,rgb(254,45,45) 50%,rgb(107,0,62) 100%);--wp--preset--gradient--luminous-dusk: linear-gradient(135deg,rgb(255,203,112) 0%,rgb(199,81,192) 50%,rgb(65,88,208) 100%);--wp--preset--gradient--pale-ocean: linear-gradient(135deg,rgb(255,245,203) 0%,rgb(182,227,212) 50%,rgb(51,167,181) 100%);--wp--preset--gradient--electric-grass: linear-gradient(135deg,rgb(202,248,128) 0%,rgb(113,206,126) 100%);--wp--preset--gradient--midnight: linear-gradient(135deg,rgb(2,3,129) 0%,rgb(40,116,252) 100%);--wp--preset--font-size--small: 13px;--wp--preset--font-size--medium: 20px;--wp--preset--font-size--large: 36px;--wp--preset--font-size--x-large: 42px;--wp--preset--spacing--20: 0.44rem;--wp--preset--spacing--30: 0.67rem;--wp--preset--spacing--40: 1rem;--wp--preset--spacing--50: 1.5rem;--wp--preset--spacing--60: 2.25rem;--wp--preset--spacing--70: 3.38rem;--wp--preset--spacing--80: 5.06rem;--wp--preset--shadow--natural: 6px 6px 9px rgba(0, 0, 0, 0.2);--wp--preset--shadow--deep: 12px 12px 50px rgba(0, 0, 0, 0.4);--wp--preset--shadow--sharp: 6px 6px 0px rgba(0, 0, 0, 0.2);--wp--preset--shadow--outlined: 6px 6px 0px -3px rgba(255, 255, 255, 1), 6px 6px rgba(0, 0, 0, 1);--wp--preset--shadow--crisp: 6px 6px 0px rgba(0, 0, 0, 1);}:where(.is-layout-flex){gap: 0.5em;}:where(.is-layout-grid){gap: 0.5em;}body .is-layout-flex{display: flex;}.is-layout-flex{flex-wrap: wrap;align-items: center;}.is-layout-flex > :is(*, div){margin: 0;}body .is-layout-grid{display: grid;}.is-layout-grid > :is(*, div){margin: 0;}:where(.wp-block-columns.is-layout-flex){gap: 2em;}:where(.wp-block-columns.is-layout-grid){gap: 2em;}:where(.wp-block-post-template.is-layout-flex){gap: 1.25em;}:where(.wp-block-post-template.is-layout-grid){gap: 1.25em;}.has-black-color{color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-color{color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-color{color: var(--wp--preset--color--white) !important;}.has-pale-pink-color{color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-color{color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-color{color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-color{color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-color{color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-color{color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-color{color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-color{color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-color{color: var(--wp--preset--color--vivid-purple) !important;}.has-black-background-color{background-color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-background-color{background-color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-background-color{background-color: var(--wp--preset--color--white) !important;}.has-pale-pink-background-color{background-color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-background-color{background-color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-background-color{background-color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-background-color{background-color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-background-color{background-color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-background-color{background-color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-background-color{background-color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-background-color{background-color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-background-color{background-color: var(--wp--preset--color--vivid-purple) !important;}.has-black-border-color{border-color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-border-color{border-color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-border-color{border-color: var(--wp--preset--color--white) !important;}.has-pale-pink-border-color{border-color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-border-color{border-color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-border-color{border-color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-border-color{border-color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-border-color{border-color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-border-color{border-color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-border-color{border-color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-border-color{border-color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-border-color{border-color: var(--wp--preset--color--vivid-purple) !important;}.has-vivid-cyan-blue-to-vivid-purple-gradient-background{background: var(--wp--preset--gradient--vivid-cyan-blue-to-vivid-purple) !important;}.has-light-green-cyan-to-vivid-green-cyan-gradient-background{background: var(--wp--preset--gradient--light-green-cyan-to-vivid-green-cyan) !important;}.has-luminous-vivid-amber-to-luminous-vivid-orange-gradient-background{background: var(--wp--preset--gradient--luminous-vivid-amber-to-luminous-vivid-orange) !important;}.has-luminous-vivid-orange-to-vivid-red-gradient-background{background: var(--wp--preset--gradient--luminous-vivid-orange-to-vivid-red) !important;}.has-very-light-gray-to-cyan-bluish-gray-gradient-background{background: var(--wp--preset--gradient--very-light-gray-to-cyan-bluish-gray) !important;}.has-cool-to-warm-spectrum-gradient-background{background: var(--wp--preset--gradient--cool-to-warm-spectrum) !important;}.has-blush-light-purple-gradient-background{background: var(--wp--preset--gradient--blush-light-purple) !important;}.has-blush-bordeaux-gradient-background{background: var(--wp--preset--gradient--blush-bordeaux) !important;}.has-luminous-dusk-gradient-background{background: var(--wp--preset--gradient--luminous-dusk) !important;}.has-pale-ocean-gradient-background{background: var(--wp--preset--gradient--pale-ocean) !important;}.has-electric-grass-gradient-background{background: var(--wp--preset--gradient--electric-grass) !important;}.has-midnight-gradient-background{background: var(--wp--preset--gradient--midnight) !important;}.has-small-font-size{font-size: var(--wp--preset--font-size--small) !important;}.has-medium-font-size{font-size: var(--wp--preset--font-size--medium) !important;}.has-large-font-size{font-size: var(--wp--preset--font-size--large) !important;}.has-x-large-font-size{font-size: var(--wp--preset--font-size--x-large) !important;}
:where(.wp-block-columns.is-layout-flex){gap: 2em;}:where(.wp-block-columns.is-layout-grid){gap: 2em;}
:root :where(.wp-block-pullquote){font-size: 1.5em;line-height: 1.6;}
:where(.wp-block-post-template.is-layout-flex){gap: 1.25em;}:where(.wp-block-post-template.is-layout-grid){gap: 1.25em;}
</style>
<link rel='stylesheet' id='stylemain-css' href='https://research.checkpoint.com/wp-content/themes/research-th/css/style.css?ver=1.08' type='text/css' media='all' />
<link rel='stylesheet' id='nav-css' href='https://research.checkpoint.com/wp-content/themes/research-th/css/style-nav.css?ver=1.08' type='text/css' media='all' />
<link rel='stylesheet' id='header-css' href='https://research.checkpoint.com/wp-content/themes/research-th/css/style-header.css?ver=1.08' type='text/css' media='all' />
<link rel='stylesheet' id='footer-css' href='https://research.checkpoint.com/wp-content/themes/research-th/css/style-footer.css?ver=1.08' type='text/css' media='all' />
<link rel='stylesheet' id='bloga-css' href='https://research.checkpoint.com/wp-content/themes/research-th/css/style-blog.css?ver=1.08' type='text/css' media='all' />
<link rel='stylesheet' id='enlighterjs-css' href='https://research.checkpoint.com/wp-content/plugins/enlighter/cache/enlighterjs.min.css?ver=lB++6JpXuZRbV9F' type='text/css' media='all' />
<script type="text/javascript" src="https://research.checkpoint.com/wp-includes/js/dist/vendor/wp-polyfill.min.js?ver=3.15.0" id="wp-polyfill-js"></script>
<script type="text/javascript" src="https://research.checkpoint.com/wp-content/plugins/gutenberg/build/hooks/index.min.js?ver=84e753e2b66eb7028d38" id="wp-hooks-js"></script>
<script type="text/javascript" src="https://research.checkpoint.com/wp-content/plugins/gutenberg/build/i18n/index.min.js?ver=bd5a2533e717a1043151" id="wp-i18n-js"></script>
<script type="text/javascript" id="wp-i18n-js-after">
/* <![CDATA[ */
wp.i18n.setLocaleData( { 'text direction\u0004ltr': [ 'ltr' ] } );
/* ]]> */
</script>
<script type="text/javascript" src="https://research.checkpoint.com/wp-includes/js/jquery/jquery.min.js?ver=3.7.1" id="jquery-core-js"></script>
<script type="text/javascript" src="https://research.checkpoint.com/wp-includes/js/jquery/jquery-migrate.min.js?ver=3.4.1" id="jquery-migrate-js"></script>
<link rel="alternate" title="oEmbed (JSON)" type="application/json+oembed" href="https://research.checkpoint.com/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fresearch.checkpoint.com%2F2023%2Fdotrunpex-demystifying-new-virtualized-net-injector-used-in-the-wild%2F" />
<link rel="alternate" title="oEmbed (XML)" type="text/xml+oembed" href="https://research.checkpoint.com/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fresearch.checkpoint.com%2F2023%2Fdotrunpex-demystifying-new-virtualized-net-injector-used-in-the-wild%2F&#038;format=xml" />
<!-- Stream WordPress user activity plugin v4.0.2 -->
<script type="text/javascript">
           var ajaxurl = "https://research.checkpoint.com/wp-admin/admin-ajax.php";
           var siteurl = "https://research.checkpoint.com";
         </script><link rel="icon" href="https://research.checkpoint.com/wp-content/uploads/2022/10/cropped-pavicon_CPR-03-e1666694691376-32x32.png" sizes="32x32" />
<link rel="icon" href="https://research.checkpoint.com/wp-content/uploads/2022/10/cropped-pavicon_CPR-03-e1666694691376-192x192.png" sizes="192x192" />
<link rel="apple-touch-icon" href="https://research.checkpoint.com/wp-content/uploads/2022/10/cropped-pavicon_CPR-03-e1666694691376-180x180.png" />
<meta name="msapplication-TileImage" content="https://research.checkpoint.com/wp-content/uploads/2022/10/cropped-pavicon_CPR-03-e1666694691376-270x270.png" />
		<style type="text/css" id="wp-custom-css">
			#cookies-notice { display: none !important; }		</style>
		  <!-- Google Tag Manager --> 
  <script>(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start': 
  new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0], 
  j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src= 
  'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f); 
  })(window,document,'script','dataLayer','GTM-5JCRGP');</script> 
  <!-- End Google Tag Manager -->
</head>
<body class="post-template-default single single-post postid-27641 single-format-standard">
<nav role="navigation" class="navbar-top-wrap">
	<div class="navbar-top no-header-image">
		<div class="container container-wide">
			<div class="row desktop-view">
				<div class="nav-logo">
					<a href="https://research.checkpoint.com"><img src="https://research.checkpoint.com/wp-content/uploads/2024/06/CPR-by-Check-Point-logo.svg"  alt="" class="img-responsive" /></a>				</div>
				<div class="nav-top-right flex-row">		
					<div class="top-menu-wrap desktop-lg">
													<div class="nav-menu nav-wrap">
							<div class="navbar-nav-collapse"><ul id="menu-top-menuu" class="nav navbar-nav"><li id="menu-item-29295" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-29295"><a href="https://research.checkpoint.com/contact/">CONTACT US</a></li>
<li id="menu-item-27016" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-27016"><a href="https://research.checkpoint.com/disclosure-policy/">DISCLOSURE POLICY</a></li>
<li id="menu-item-26970" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-26970"><a target="_blank" rel="noopener" href="https://www.checkpoint.com/">CHECKPOINT.COM</a></li>
<li id="menu-item-26971" class="nav-button menu-item menu-item-type-custom menu-item-object-custom menu-item-26971"><a href="https://www.checkpoint.com/support-services/threatcloud-incident-response/">UNDER ATTACK?</a></li>
</ul></div>						</div>
											</div>
					<div class="social-media-wrapper">				
						<div class="social-icons">
																																											<a href="https://www.linkedin.com/company/check-point-software-technologies/" target="_blank"><svg  style="fill: currentColor;" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"	 viewBox="0 0 310 310" style="enable-background:new 0 0 310 310;" xml:space="preserve"><g id="XMLID_801_">	<path id="XMLID_802_" d="M72.16,99.73H9.927c-2.762,0-5,2.239-5,5v199.928c0,2.762,2.238,5,5,5H72.16c2.762,0,5-2.238,5-5V104.73		C77.16,101.969,74.922,99.73,72.16,99.73z"/>	<path id="XMLID_803_" d="M41.066,0.341C18.422,0.341,0,18.743,0,41.362C0,63.991,18.422,82.4,41.066,82.4		c22.626,0,41.033-18.41,41.033-41.038C82.1,18.743,63.692,0.341,41.066,0.341z"/>	<path id="XMLID_804_" d="M230.454,94.761c-24.995,0-43.472,10.745-54.679,22.954V104.73c0-2.761-2.238-5-5-5h-59.599		c-2.762,0-5,2.239-5,5v199.928c0,2.762,2.238,5,5,5h62.097c2.762,0,5-2.238,5-5v-98.918c0-33.333,9.054-46.319,32.29-46.319		c25.306,0,27.317,20.818,27.317,48.034v97.204c0,2.762,2.238,5,5,5H305c2.762,0,5-2.238,5-5V194.995		C310,145.43,300.549,94.761,230.454,94.761z"/></g></svg></a>
																																													<a href="https://twitter.com/_cpresearch_" target="_blank"><svg  style="fill: currentColor;" version="1.1" id="Layer_1" xmlns="https://www.w3.org/2000/svg" xmlns:xlink="https://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 310 310" style="enable-background:new 0 0 310 310;" xml:space="preserve"><g id="XMLID_826_"> <path id="XMLID_827_" d="M302.973,57.388c-4.87,2.16-9.877,3.983-14.993,5.463c6.057-6.85,10.675-14.91,13.494-23.73	c0.632-1.977-0.023-4.141-1.648-5.434c-1.623-1.294-3.878-1.449-5.665-0.39c-10.865,6.444-22.587,11.075-34.878,13.783	c-12.381-12.098-29.197-18.983-46.581-18.983c-36.695,0-66.549,29.853-66.549,66.547c0,2.89,0.183,5.764,0.545,8.598	C101.163,99.244,58.83,76.863,29.76,41.204c-1.036-1.271-2.632-1.956-4.266-1.825c-1.635,0.128-3.104,1.05-3.93,2.467	c-5.896,10.117-9.013,21.688-9.013,33.461c0,16.035,5.725,31.249,15.838,43.137c-3.075-1.065-6.059-2.396-8.907-3.977	c-1.529-0.851-3.395-0.838-4.914,0.033c-1.52,0.871-2.473,2.473-2.513,4.224c-0.007,0.295-0.007,0.59-0.007,0.889	c0,23.935,12.882,45.484,32.577,57.229c-1.692-0.169-3.383-0.414-5.063-0.735c-1.732-0.331-3.513,0.276-4.681,1.597	c-1.17,1.32-1.557,3.16-1.018,4.84c7.29,22.76,26.059,39.501,48.749,44.605c-18.819,11.787-40.34,17.961-62.932,17.961	c-4.714,0-9.455-0.277-14.095-0.826c-2.305-0.274-4.509,1.087-5.294,3.279c-0.785,2.193,0.047,4.638,2.008,5.895	c29.023,18.609,62.582,28.445,97.047,28.445c67.754,0,110.139-31.95,133.764-58.753c29.46-33.421,46.356-77.658,46.356-121.367	c0-1.826-0.028-3.67-0.084-5.508c11.623-8.757,21.63-19.355,29.773-31.536c1.237-1.85,1.103-4.295-0.33-5.998	C307.394,57.037,305.009,56.486,302.973,57.388z"/></g></svg></a>
																																													<a href="https://www.facebook.com/checkpointresearch/" target="_blank"><svg style="fill: currentColor;" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"	 viewBox="0 0 310 310" style="enable-background:new 0 0 310 310;" xml:space="preserve"><path id="XMLID_835_" d="M81.703,165.106h33.981V305c0,2.762,2.238,5,5,5h57.616c2.762,0,5-2.238,5-5V165.765h39.064		c2.54,0,4.677-1.906,4.967-4.429l5.933-51.502c0.163-1.417-0.286-2.836-1.234-3.899c-0.949-1.064-2.307-1.673-3.732-1.673h-44.996		V71.978c0-9.732,5.24-14.667,15.576-14.667c1.473,0,29.42,0,29.42,0c2.762,0,5-2.239,5-5V5.037c0-2.762-2.238-5-5-5h-40.545		C187.467,0.023,186.832,0,185.896,0c-7.035,0-31.488,1.381-50.804,19.151c-21.402,19.692-18.427,43.27-17.716,47.358v37.752H81.703		c-2.762,0-5,2.238-5,5v50.844C76.703,162.867,78.941,165.106,81.703,165.106z"/></svg></a>
																														</div>		
					</div>
				</div>
			</div>
			<div class="row bottom-menu-wrapper">
				<div class="nav-menu-wrapper">
					<div class="nav-logo mobile-view">
						<a href="https://research.checkpoint.com"><img src="https://research.checkpoint.com/wp-content/uploads/2024/06/CPR-by-Check-Point-logo.svg"  alt="" class="img-responsive" /></a>				</div>
										<button type="button" class="nav-icon navbar-toggle"><span></span><span></span><span></span><span></span></button>
					<div class="nav-menu nav-wrap">
						<div class="navbar-nav-collapse"><ul id="menu-main-menu" class="nav navbar-nav"><li id="menu-item-26652" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-26652"><a href="https://research.checkpoint.com/latest-publications/">Latest Publications</a></li>
<li id="menu-item-26651" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-26651"><a href="https://research.checkpoint.com/cpr-podcast-channel/">CPR Podcast Channel</a></li>
<li id="menu-item-29296" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-29296"><a href="https://research.checkpoint.com/category/web3/">Web 3.0 Security</a></li>
<li id="menu-item-26650" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-26650"><a href="https://research.checkpoint.com/intelligence-reports/">Intelligence Reports</a></li>
<li id="menu-item-26944" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-has-children menu-item-26944"><a>Resources</a>
<ul class="sub-menu">
	<li id="menu-item-26940" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-26940"><a href="https://www.checkpoint.com/ai/">ThreatCloud AI</a></li>
	<li id="menu-item-26879" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-26879"><a target="_blank" rel="noopener" href="https://www.checkpoint.com/solutions/threat-intelligence-research/">Threat Intelligence &#038; Research</a></li>
	<li id="menu-item-26880" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-26880"><a target="_blank" rel="noopener" href="https://www.checkpoint.com/infinity/zero-day-protection/">Zero Day Protection</a></li>
	<li id="menu-item-27006" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-27006"><a href="http://threatemulation.checkpoint.com/">Sandblast File Analysis</a></li>
</ul>
</li>
<li id="menu-item-26639" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-26639"><a href="https://research.checkpoint.com/about-us/">About Us</a></li>
<li id="menu-item-26989" class="nav-button menu-item menu-item-type-post_type menu-item-object-page menu-item-26989"><a href="https://research.checkpoint.com/subscription/">SUBSCRIBE</a></li>
</ul></div>						<div class="mobile-view">
							<div class="social-media-wrapper">				
								<div class="social-icons">
																																																					<a href="https://www.linkedin.com/company/check-point-software-technologies/" target="_blank"><svg  style="fill: currentColor;" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"	 viewBox="0 0 310 310" style="enable-background:new 0 0 310 310;" xml:space="preserve"><g id="XMLID_801_">	<path id="XMLID_802_" d="M72.16,99.73H9.927c-2.762,0-5,2.239-5,5v199.928c0,2.762,2.238,5,5,5H72.16c2.762,0,5-2.238,5-5V104.73		C77.16,101.969,74.922,99.73,72.16,99.73z"/>	<path id="XMLID_803_" d="M41.066,0.341C18.422,0.341,0,18.743,0,41.362C0,63.991,18.422,82.4,41.066,82.4		c22.626,0,41.033-18.41,41.033-41.038C82.1,18.743,63.692,0.341,41.066,0.341z"/>	<path id="XMLID_804_" d="M230.454,94.761c-24.995,0-43.472,10.745-54.679,22.954V104.73c0-2.761-2.238-5-5-5h-59.599		c-2.762,0-5,2.239-5,5v199.928c0,2.762,2.238,5,5,5h62.097c2.762,0,5-2.238,5-5v-98.918c0-33.333,9.054-46.319,32.29-46.319		c25.306,0,27.317,20.818,27.317,48.034v97.204c0,2.762,2.238,5,5,5H305c2.762,0,5-2.238,5-5V194.995		C310,145.43,300.549,94.761,230.454,94.761z"/></g></svg></a>
																																																							<a href="https://twitter.com/_cpresearch_" target="_blank"><svg  style="fill: currentColor;" version="1.1" id="Layer_1" xmlns="https://www.w3.org/2000/svg" xmlns:xlink="https://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 310 310" style="enable-background:new 0 0 310 310;" xml:space="preserve"><g id="XMLID_826_"> <path id="XMLID_827_" d="M302.973,57.388c-4.87,2.16-9.877,3.983-14.993,5.463c6.057-6.85,10.675-14.91,13.494-23.73	c0.632-1.977-0.023-4.141-1.648-5.434c-1.623-1.294-3.878-1.449-5.665-0.39c-10.865,6.444-22.587,11.075-34.878,13.783	c-12.381-12.098-29.197-18.983-46.581-18.983c-36.695,0-66.549,29.853-66.549,66.547c0,2.89,0.183,5.764,0.545,8.598	C101.163,99.244,58.83,76.863,29.76,41.204c-1.036-1.271-2.632-1.956-4.266-1.825c-1.635,0.128-3.104,1.05-3.93,2.467	c-5.896,10.117-9.013,21.688-9.013,33.461c0,16.035,5.725,31.249,15.838,43.137c-3.075-1.065-6.059-2.396-8.907-3.977	c-1.529-0.851-3.395-0.838-4.914,0.033c-1.52,0.871-2.473,2.473-2.513,4.224c-0.007,0.295-0.007,0.59-0.007,0.889	c0,23.935,12.882,45.484,32.577,57.229c-1.692-0.169-3.383-0.414-5.063-0.735c-1.732-0.331-3.513,0.276-4.681,1.597	c-1.17,1.32-1.557,3.16-1.018,4.84c7.29,22.76,26.059,39.501,48.749,44.605c-18.819,11.787-40.34,17.961-62.932,17.961	c-4.714,0-9.455-0.277-14.095-0.826c-2.305-0.274-4.509,1.087-5.294,3.279c-0.785,2.193,0.047,4.638,2.008,5.895	c29.023,18.609,62.582,28.445,97.047,28.445c67.754,0,110.139-31.95,133.764-58.753c29.46-33.421,46.356-77.658,46.356-121.367	c0-1.826-0.028-3.67-0.084-5.508c11.623-8.757,21.63-19.355,29.773-31.536c1.237-1.85,1.103-4.295-0.33-5.998	C307.394,57.037,305.009,56.486,302.973,57.388z"/></g></svg></a>
																																																							<a href="https://www.facebook.com/checkpointresearch/" target="_blank"><svg style="fill: currentColor;" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"	 viewBox="0 0 310 310" style="enable-background:new 0 0 310 310;" xml:space="preserve"><path id="XMLID_835_" d="M81.703,165.106h33.981V305c0,2.762,2.238,5,5,5h57.616c2.762,0,5-2.238,5-5V165.765h39.064		c2.54,0,4.677-1.906,4.967-4.429l5.933-51.502c0.163-1.417-0.286-2.836-1.234-3.899c-0.949-1.064-2.307-1.673-3.732-1.673h-44.996		V71.978c0-9.732,5.24-14.667,15.576-14.667c1.473,0,29.42,0,29.42,0c2.762,0,5-2.239,5-5V5.037c0-2.762-2.238-5-5-5h-40.545		C187.467,0.023,186.832,0,185.896,0c-7.035,0-31.488,1.381-50.804,19.151c-21.402,19.692-18.427,43.27-17.716,47.358v37.752H81.703		c-2.762,0-5,2.238-5,5v50.844C76.703,162.867,78.941,165.106,81.703,165.106z"/></svg></a>
																																						</div>	
								<button class="button background-skyblue font-white skyblue-border" onclick="openPopup('subscribe-us-popup')">SUBSCRIBE</button>
							</div>
						</div>
					</div>
									</div>
				
				<div class="nav-search-wrapper">
					<div role="search--" method="get--" id="searchform" class="searchform inc-search" action="">
						<input type="text" value="" name="s" id="s" placeholder="SEARCH"/>
						
						<button type="submit--" id="searchsubmit">
							<svg xmlns="http://www.w3.org/2000/svg" width="22.225" height="21.19" viewBox="0 0 22.225 21.19">
							  <path id="search_left-_1504_" data-name="search_left-[#1504]" d="M264,138.586,262.515,140l-4.455-4.242,1.485-1.415ZM251.4,134a6.007,6.007,0,1,1,6.3-6,6.162,6.162,0,0,1-6.3,6Zm0-14a8.01,8.01,0,1,0,8.4,8,8.208,8.208,0,0,0-8.4-8Z" transform="translate(-242.5 -119.5)" fill="#202020" stroke="#cbcbcb" stroke-width="1" fill-rule="evenodd"/>
							</svg>
						</button>
			
					</div>
				</div>
			</div>
		</div>
	</div>
</nav><header class="site-header">
		<!---div class="header-title-inner-page">
		<div class="container">
			<h1></h1>
		</div>
	</div--->
		
</header> 

<style type="text/css"> .blog-post-wrap h1.h3{color:white; font-size:1.4rem} .wp-block-image figcaption {text-align:center;} .wp-block-heading{color:#FFF;} strong { font-weight: bold; color:white;} .wp-block-table thead{border-bottom:4px solid #656597} p, ul li, ol li, .text, .text a {color:#ddd} .blog-post-wrapper.single-blog-wrapper .text p, .blog-post-wrapper.single-blog-wrapper .text li, .blog-post-wrapper.single-blog-wrapper .text p a {color:#ddd} .wp-block-table td, .wp-block-table th { border:2px solid #656597;} .blog-post-wrapper.single-blog-wrapper .text p a, .text a { color: #748ad8; } code {  background: #ad2963;  word-wrap: break-word; padding: 0rem 0.2rem 0rem;  border-radius: 0.2rem; } </style> 

<div class="container container-wide">
	<div class="mobile-categories-nav">
		<div class="sidebar-post-categories">
	<div class="text font-blue">
			<h2>CATEGORIES</h2>
		</div>
					<ul class="post-category">
			 
			<li> 
				<a href="https://research.checkpoint.com/category/android-malware/" onclick="location.href = 'https://research.checkpoint.com/category/android-malware/';">
					<input type="checkbox" id="10457" class="cat-filter" value="10457">
					<label for="10457"> Android Malware</label>
					<span>23</span>
				</a>	
			</li>
			 
			<li> 
				<a href="https://research.checkpoint.com/category/artificial-intelligence-2/" onclick="location.href = 'https://research.checkpoint.com/category/artificial-intelligence-2/';">
					<input type="checkbox" id="10621" class="cat-filter" value="10621">
					<label for="10621"> Artificial Intelligence</label>
					<span>4</span>
				</a>	
			</li>
			 
			<li> 
				<a href="https://research.checkpoint.com/category/chatgpt/" onclick="location.href = 'https://research.checkpoint.com/category/chatgpt/';">
					<input type="checkbox" id="10637" class="cat-filter" value="10637">
					<label for="10637"> ChatGPT</label>
					<span>3</span>
				</a>	
			</li>
			 
			<li> 
				<a href="https://research.checkpoint.com/category/threat-research/" onclick="location.href = 'https://research.checkpoint.com/category/threat-research/';">
					<input type="checkbox" id="10441" class="cat-filter" value="10441">
					<label for="10441"> Check Point Research Publications</label>
					<span>388</span>
				</a>	
			</li>
			 
			<li> 
				<a href="https://research.checkpoint.com/category/cloud-security/" onclick="location.href = 'https://research.checkpoint.com/category/cloud-security/';">
					<input type="checkbox" id="10634" class="cat-filter" value="10634">
					<label for="10634"> Cloud Security</label>
					<span>1</span>
				</a>	
			</li>
			 
			<li> 
				<a href="https://research.checkpoint.com/category/cpradio/" onclick="location.href = 'https://research.checkpoint.com/category/cpradio/';">
					<input type="checkbox" id="10539" class="cat-filter" value="10539">
					<label for="10539"> CPRadio</label>
					<span>44</span>
				</a>	
			</li>
			 
			<li> 
				<a href="https://research.checkpoint.com/category/crypto/" onclick="location.href = 'https://research.checkpoint.com/category/crypto/';">
					<input type="checkbox" id="10655" class="cat-filter" value="10655">
					<label for="10655"> Crypto</label>
					<span>2</span>
				</a>	
			</li>
			 
			<li> 
				<a href="https://research.checkpoint.com/category/data-threat-intelligence/" onclick="location.href = 'https://research.checkpoint.com/category/data-threat-intelligence/';">
					<input type="checkbox" id="10643" class="cat-filter" value="10643">
					<label for="10643"> Data &amp; Threat Intelligence</label>
					<span>1</span>
				</a>	
			</li>
			 
			<li> 
				<a href="https://research.checkpoint.com/category/data-analysis/" onclick="location.href = 'https://research.checkpoint.com/category/data-analysis/';">
					<input type="checkbox" id="10645" class="cat-filter" value="10645">
					<label for="10645"> Data Analysis</label>
					<span>0</span>
				</a>	
			</li>
			 
			<li> 
				<a href="https://research.checkpoint.com/category/demos/" onclick="location.href = 'https://research.checkpoint.com/category/demos/';">
					<input type="checkbox" id="10062" class="cat-filter" value="10062">
					<label for="10062"> Demos</label>
					<span>22</span>
				</a>	
			</li>
			 
			<li> 
				<a href="https://research.checkpoint.com/category/threat-intelligence-reports/" onclick="location.href = 'https://research.checkpoint.com/category/threat-intelligence-reports/';">
					<input type="checkbox" id="10060" class="cat-filter" value="10060">
					<label for="10060"> Global Cyber Attack Reports</label>
					<span>326</span>
				</a>	
			</li>
			 
			<li> 
				<a href="https://research.checkpoint.com/category/how-to-guides/" onclick="location.href = 'https://research.checkpoint.com/category/how-to-guides/';">
					<input type="checkbox" id="10475" class="cat-filter" value="10475">
					<label for="10475"> How To Guides</label>
					<span>12</span>
				</a>	
			</li>
			 
			<li> 
				<a href="https://research.checkpoint.com/category/ransomware/" onclick="location.href = 'https://research.checkpoint.com/category/ransomware/';">
					<input type="checkbox" id="10622" class="cat-filter" value="10622">
					<label for="10622"> Ransomware</label>
					<span>1</span>
				</a>	
			</li>
			 
			<li> 
				<a href="https://research.checkpoint.com/category/russo-ukrainian-war/" onclick="location.href = 'https://research.checkpoint.com/category/russo-ukrainian-war/';">
					<input type="checkbox" id="10624" class="cat-filter" value="10624">
					<label for="10624"> Russo-Ukrainian War</label>
					<span>1</span>
				</a>	
			</li>
			 
			<li> 
				<a href="https://research.checkpoint.com/category/security-report/" onclick="location.href = 'https://research.checkpoint.com/category/security-report/';">
					<input type="checkbox" id="10656" class="cat-filter" value="10656">
					<label for="10656"> Security Report</label>
					<span>1</span>
				</a>	
			</li>
			 
			<li> 
				<a href="https://research.checkpoint.com/category/threat-and-data-analysis/" onclick="location.href = 'https://research.checkpoint.com/category/threat-and-data-analysis/';">
					<input type="checkbox" id="10644" class="cat-filter" value="10644">
					<label for="10644"> Threat and data analysis</label>
					<span>0</span>
				</a>	
			</li>
			 
			<li> 
				<a href="https://research.checkpoint.com/category/threat-research-2/" onclick="location.href = 'https://research.checkpoint.com/category/threat-research-2/';">
					<input type="checkbox" id="10458" class="cat-filter" value="10458">
					<label for="10458"> Threat Research</label>
					<span>172</span>
				</a>	
			</li>
			 
			<li> 
				<a href="https://research.checkpoint.com/category/web3/" onclick="location.href = 'https://research.checkpoint.com/category/web3/';">
					<input type="checkbox" id="10653" class="cat-filter" value="10653">
					<label for="10653"> Web 3.0 Security</label>
					<span>9</span>
				</a>	
			</li>
			 
			<li> 
				<a href="https://research.checkpoint.com/category/wipers/" onclick="location.href = 'https://research.checkpoint.com/category/wipers/';">
					<input type="checkbox" id="10623" class="cat-filter" value="10623">
					<label for="10623"> Wipers</label>
					<span>0</span>
				</a>	
			</li>
					</ul>
		</div>

	</div>
</div>
<section id="single-post" class="blog-post-wrapper single-blog-wrapper section-padding background-blue ">
	<div class="container container-wide">
		
		<div class="flex-row align-items-start">
			<div class="flex-8 font-white">
				<div class="blog-post-wrap">
					<div class="flex-row">
						<div class="flex-12">
														<div class="image">
								<img src="https://research.checkpoint.com/wp-content/uploads/2023/03/MicrosoftTeams-image-2.png" alt=""/>
							</div>
													</div>
						<div class="flex-9">
							<div class="text">
								<h1 class="h3">DotRunpeX &#8211; demystifying new virtualized .NET injector used in the wild</h1>
								<div class="date">
									<svg xmlns="http://www.w3.org/2000/svg" width="14.012" height="14.012" viewBox="0 0 14.012 14.012"><path id="Path_149" data-name="Path 149" d="M1.752,4.379v7.882H12.261V4.379Zm9.634-2.627h1.752a.827.827,0,0,1,.876.876V13.137a.827.827,0,0,1-.876.876H.876A.827.827,0,0,1,0,13.137V2.627a.827.827,0,0,1,.876-.876H2.627V.876A.827.827,0,0,1,3.5,0a.827.827,0,0,1,.876.876v.876H9.634V.876a.876.876,0,1,1,1.752,0Zm-.876,8.758H8.758V8.758h1.752Zm-2.627,0H6.13V8.758H7.882Zm2.627-2.627H8.758V6.13h1.752Zm-2.627,0H6.13V6.13H7.882ZM5.255,10.509H3.5V8.758H5.255Z" fill="#fff" fill-rule="evenodd"/></svg>									
									March 15, 2023								</div>
							</div>
						</div>
						<div class="flex-3">
							<div class="social-button">
		<div class="icon-sharing-links">
			<a target="_blank" href="https://www.linkedin.com/shareArticle?mini=true&amp;url=https://research.checkpoint.com/2023/dotrunpex-demystifying-new-virtualized-net-injector-used-in-the-wild/ -  https://research.checkpoint.com/?p=27641;source=LinkedIn" title="Share on LinkedIn!" ><svg style="fill: currentColor;" id="Group_185773" data-name="Group 185773" xmlns="http://www.w3.org/2000/svg" width="15.863" height="15.697" viewBox="0 0 15.863 15.697"><path id="Path_28" data-name="Path 28" d="M41.342,107.835H38.107V97.622c2.039-.532,2.921-.341,3.249.629a10.413,10.413,0,0,1,2.275-1.038c2.6-.5,4.128.657,4.565,3.306a7.793,7.793,0,0,1,.128,1.212c.014,1.986.006,3.973.006,6.07H45.04c0-1.073,0-2.147,0-3.22,0-.724.016-1.449-.015-2.173-.075-1.7-.606-2.4-1.771-2.4-1.211.006-1.861.8-1.9,2.469C41.31,104.241,41.342,106,41.342,107.835Z" transform="translate(-32.47 -92.138)" fill="currentColor"/><path id="Path_29" data-name="Path 29" d="M31.482,97.555h3.156v10.359H31.482Z" transform="translate(-31.164 -92.228)" fill="currentColor"/> <path id="Path_30" data-name="Path 30" d="M32.993,94.694a1.862,1.862,0,0,1-1.907-1.862,1.891,1.891,0,0,1,1.88-1.912,1.867,1.867,0,0,1,1.889,1.885A1.816,1.816,0,0,1,32.993,94.694Z" transform="translate(-31.086 -90.92)" fill="currentColor"/></svg></a>
			
			<a target="blank" href="http://www.facebook.com/sharer.php?u=https://research.checkpoint.com/2023/dotrunpex-demystifying-new-virtualized-net-injector-used-in-the-wild/ - https://research.checkpoint.com/?p=27641 "title="Share on Facebook!"><svg style="fill: currentColor;"  id="WKND-icon" xmlns="http://www.w3.org/2000/svg" width="14.347" height="14.347" viewBox="0 0 14.347 14.347"><rect id="background" width="14.347" height="14.347" transform="translate(0 0)" fill="transparent"/><g id="Dribbble-Light-Preview" transform="translate(3.966 0.077)"><g id="icons"><path id="facebook-_176_" data-name="facebook-[#176]" d="M333.867,7253.27v-6.422h1.95l.318-2.854h-2.268V7242.6c0-.735.019-1.465,1.046-1.465h1.04V7239.1a11.584,11.584,0,0,0-1.8-.1c-1.888,0-3.07,1.183-3.07,3.354v1.641H329v2.854h2.086v6.422Z" transform="translate(-329 -7239)" fill="currentColor" fill-rule="evenodd"/> </g></g></svg></a>
			
			<a target="blank" href="http://twitter.com/home/?status=DotRunpeX &#8211; demystifying new virtualized .NET injector used in the wild - https://research.checkpoint.com/?p=27641 via @kenmata "title="Tweet this!"><svg style="fill: currentColor;"  id="WKND-icon" xmlns="http://www.w3.org/2000/svg" width="14.515" height="14.347" viewBox="0 0 14.515 14.347"><rect id="background" width="14.347" height="14.347" transform="translate(0 0)" fill="transparent"/><g id="Dribbble-Light-Preview" transform="translate(0.245 1.504)"><g id="icons"><path id="twitter-_154_" data-name="twitter-[#154]" d="M8.488,7372.416a8.206,8.206,0,0,0,8.33-8.2c0-.125,0-.25-.009-.373a5.9,5.9,0,0,0,1.461-1.492,5.926,5.926,0,0,1-1.681.453,2.9,2.9,0,0,0,1.287-1.595,5.9,5.9,0,0,1-1.859.7,2.964,2.964,0,0,0-4.143-.125,2.858,2.858,0,0,0-.847,2.754,8.364,8.364,0,0,1-6.034-3.011,2.857,2.857,0,0,0,.907,3.847,2.942,2.942,0,0,1-1.329-.36v.036a2.9,2.9,0,0,0,2.349,2.825,2.954,2.954,0,0,1-1.321.049,2.924,2.924,0,0,0,2.735,2,5.929,5.929,0,0,1-3.636,1.236,5.847,5.847,0,0,1-.7-.041,8.379,8.379,0,0,0,4.488,1.292" transform="translate(-4 -7361)" fill="currentColor" fill-rule="evenodd"/></g></g></svg></a>
		
			<a onclick="copyToClipboard('#27641')"  title="Copy this!"><svg style="fill: currentColor;"  xmlns="http://www.w3.org/2000/svg" width="18.7" height="18.7" viewBox="0 0 18.7 18.7"><g id="Group_185774" data-name="Group 185774" transform="translate(-591.15 -798.097)"><g id="copy" transform="translate(592 798.947)"><rect id="Rectangle_147602" data-name="Rectangle 147602" width="11" height="11" rx="2" transform="translate(6 6)" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.7"/><path id="Path_83125" data-name="Path 83125" d="M4.542,13.016H3.695A1.7,1.7,0,0,1,2,11.321V3.695A1.7,1.7,0,0,1,3.695,2h7.626a1.7,1.7,0,0,1,1.695,1.695v.847" transform="translate(-2 -2)" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.7"/></g></g></svg></a>
			<div id="27641"  style="display: none;"/>https://research.checkpoint.com/2023/dotrunpex-demystifying-new-virtualized-net-injector-used-in-the-wild/</div>
		
		</div>
		<div class="icon-sharing"></div>	
</div>						</div>
					</div>
										<div class="research-by-wrap">
						<div class="author-avatar">
												<img alt='' src='https://secure.gravatar.com/avatar/98ef612dff81e3b08152d8e76bf8da09?s=96&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/98ef612dff81e3b08152d8e76bf8da09?s=192&#038;d=mm&#038;r=g 2x' class='avatar avatar-96 photo' height='96' width='96' decoding='async'/>												</div>
						<div class="author-text text">
						<strong>Research by:</strong>&nbsp;Jiri&nbsp; Vinopal. 						</div>
					</div>
										
					<div class="text border-bottom">
						
<p></p>



<h1 class="wp-block-heading">Highlights:</h1>



<ul class="wp-block-list">
<li><em><strong>Check Point Research (CPR) provides an in-depth analysis of the dotRunpeX injector and its relation to the older version</strong></em></li>



<li><em><strong>DotRunpeX is protected by virtualization (a customized version of KoiVM) and obfuscation (ConfuserEx) &#8211; both were defeated</strong></em></li>



<li><em><strong>Investigation shows that dotRunpeX is used in the wild to deliver numerous known malware families</strong></em></li>



<li><em><strong>Commonly distributed via phishing emails as malicious attachments and websites masquerading as regular program utilities</strong></em></li>



<li><em><strong>We confirmed and detailed the malicious use of a vulnerable process explorer driver to disable the functionality of Anti-Malware services</strong></em></li>



<li><em><strong>CPR introduces several PoC techniques that were approved to be effective for reverse engineering protected or virtualized dotnet code</strong></em></li>
</ul>



<h1 class="wp-block-heading">Introduction</h1>



<p>During the past few months, we have been monitoring the dotRunpeX malware, its usage in the wild, and infection vectors related to dozens of campaigns. The monitoring showed that this new dotnet injector is still evolving and in high development. We uncovered several different methods of distribution where in all cases, the dotRunpeX was a part of the second-stage infection. This new threat is used to deliver numerous different malware families, primarily related to stealers, RATs, loaders, and downloaders.</p>



<p>The oldest sample related to the new version of dotRunpeX is dated&nbsp;<strong>2022-10-17</strong>. The first&nbsp;<a href="https://twitter.com/vinopaljiri/status/1585308917722009603">public information</a>&nbsp;about this threat is dated&nbsp;<strong>2022-10-26</strong>.</p>



<p>The main subject of this research is an in-depth analysis of both versions of the dotRunpeX injector, focusing on interesting techniques, similarities between them, and an introduction to the PoC technique used to analyze a new version of dotRunpeX as it is being delivered virtualized by a customized version of&nbsp;<a href="https://github.com/yck1509/KoiVM">KoiVM .NET protector</a>.</p>



<h1 class="wp-block-heading">Background &amp; Key Findings</h1>



<p>DotRunpeX is a new injector written in .NET using the Process Hollowing technique and used to infect systems with a variety of known malware families. Although this injector is new, there are some connections to its older version sharing some similarities. The name of this injector is based on its version information which is the same for both dotRunpeX versions, consistent across all samples we analyzed and containing ProductName &#8211;&nbsp;<code>RunpeX.Stub.Framework</code>.</p>



<p>While we have been monitoring this threat, we spotted a few publicly shared pieces of information, mainly by independent researchers, that were related to the functionality of dotRunpeX but misattributed to a different well-known malware family.</p>



<p>We are aware of a&nbsp;<a href="https://www.sentinelone.com/labs/malvirt-net-virtualization-thrives-in-malvertising-attacks/">publication</a>&nbsp;about one campaign delivering this threat, but our findings and conclusions based on the report below slightly differ. By monitoring this threat for a few months, we got enough information to differentiate the first-stage loaders from the second stage (<em><strong>dotRunpeX</strong></em>) with no signs of the relation between them. We revealed the connections to its older version, the distribution of numerous malware families, and several different techniques used as a vector of infection.</p>



<p>Among the variety of downloaders and cryptocurrency stealers, we spotted these known malware families delivered by dotRunpeX:</p>



<ul class="wp-block-list">
<li><a href="https://malpedia.caad.fkie.fraunhofer.de/details/win.agent_tesla">AgentTesla</a></li>



<li><a href="https://malpedia.caad.fkie.fraunhofer.de/details/win.arrowrat">ArrowRAT</a></li>



<li><a href="https://malpedia.caad.fkie.fraunhofer.de/details/win.asyncrat">AsyncRat</a></li>



<li><a href="https://malpedia.caad.fkie.fraunhofer.de/details/win.ave_maria">AveMaria/WarzoneRAT</a></li>



<li><a href="https://malpedia.caad.fkie.fraunhofer.de/details/win.bit_rat">BitRAT</a></li>



<li><a href="https://malpedia.caad.fkie.fraunhofer.de/details/win.formbook">Formbook</a></li>



<li><a href="https://malpedia.caad.fkie.fraunhofer.de/details/win.lgoogloader">LgoogLoader</a></li>



<li><a href="https://malpedia.caad.fkie.fraunhofer.de/details/win.lokipws">Lokibot</a></li>



<li><a href="https://malpedia.caad.fkie.fraunhofer.de/details/win.netwire">NetWire</a></li>



<li><a href="https://malpedia.caad.fkie.fraunhofer.de/details/win.privateloader">PrivateLoader</a></li>



<li><a href="https://malpedia.caad.fkie.fraunhofer.de/details/win.quasar_rat">QuasarRAT</a></li>



<li><a href="https://malpedia.caad.fkie.fraunhofer.de/details/win.recordbreaker">RecordBreaker &#8211; Raccoon Stealer 2.0</a></li>



<li><a href="https://malpedia.caad.fkie.fraunhofer.de/details/win.redline_stealer">Redline</a></li>



<li><a href="https://malpedia.caad.fkie.fraunhofer.de/details/win.remcos">Remcos</a></li>



<li><a href="https://malpedia.caad.fkie.fraunhofer.de/details/win.rhadamanthys">Rhadamanthys</a></li>



<li><a href="https://malpedia.caad.fkie.fraunhofer.de/details/win.404keylogger">SnakeKeylogger</a></li>



<li><a href="https://malpedia.caad.fkie.fraunhofer.de/details/win.vidar">Vidar</a></li>



<li><a href="https://malpedia.caad.fkie.fraunhofer.de/details/win.xworm">XWorm</a></li>
</ul>


<div class="wp-block-image">
<figure class="aligncenter size-full"><img fetchpriority="high" decoding="async" width="967" height="666" src="https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId44.png" alt="" class="wp-image-27642" srcset="https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId44.png 967w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId44-300x207.png 300w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId44-768x529.png 768w" sizes="(max-width: 967px) 100vw, 967px" /><figcaption class="wp-element-caption">Figure 1: Malware Families Delivered by DotRunpeX</figcaption></figure></div>


<p>From the timeline perspective, based on the compilation timestamps of dotRunpeX samples that did not appear to be altered, this new threat became popular mainly during November 2022 and January 2023. What could be just an interesting coincidence or just some kind of sign of attackers waiting under the Christmas tree is that we did not see a lot of samples compiled during December 2022.</p>


<div class="wp-block-image">
<figure class="aligncenter size-full"><img decoding="async" width="961" height="535" src="https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId47-1.png" alt="" class="wp-image-27644" srcset="https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId47-1.png 961w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId47-1-300x167.png 300w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId47-1-768x428.png 768w" sizes="(max-width: 961px) 100vw, 961px" /><figcaption class="wp-element-caption">Figure 2: DotRunpeX Timeline &#8211; Compilation Timestamps</figcaption></figure></div>


<h2 class="wp-block-heading">Vector of infection</h2>



<p>DotRunpeX injector commonly comes as a second stage of the original infection. The typical first stages are very different variants of .NET loaders/downloaders. The first-stage loaders are primarily being delivered via phishing emails as malicious attachments (usually as a part of “.iso”, “.img”, “.zip”, and “.7z”) or via websites masquerading as regular program utilities. Apart from the most common infection vectors, the customers of dotRunpeX are not ashamed to abuse Google Ads or even target other potential attackers via trojanized malware builders.</p>



<p>Example phishing email&nbsp;<code>Transaction Advice 502833272391_RPY - 29/10/2022</code>&nbsp;delivering the first stage loader as a part of malicious “.7z” attachment that results in loading of dotRunpeX (SHA256: “457cfd6222266941360fdbe36742486ee12419c95f1d7d350243e795de28200e”).</p>


<div class="wp-block-image">
<figure class="aligncenter size-large"><img loading="lazy" decoding="async" width="1024" height="379" src="https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId50-1024x379.png" alt="" class="wp-image-27645" srcset="https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId50-1024x379.png 1024w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId50-300x111.png 300w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId50-768x284.png 768w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId50-1536x569.png 1536w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId50.png 1909w" sizes="(max-width: 1024px) 100vw, 1024px" /><figcaption class="wp-element-caption">Figure 3: Phishing email “Transaction Advice 502833272391_RPY &#8211; 29/10/2022”</figcaption></figure></div>


<p>Example phishing websites &#8211; masquerading regular program utilities (Galaxy Swapper, OBS Studio, Onion Browser, Brave Wallet, LastPass, AnyDesk, MSI Afterburner) and delivering the first stage loaders that result in dotRunpeX infection in a part of the second stage.</p>



<p>Website masquerading as Galaxy Swapper:&nbsp;<code>https://www.galaxyswapper[.]ru/</code></p>


<div class="wp-block-image">
<figure class="aligncenter size-large"><img loading="lazy" decoding="async" width="1024" height="528" src="https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId53-1024x528.png" alt="" class="wp-image-27646" srcset="https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId53-1024x528.png 1024w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId53-300x155.png 300w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId53-768x396.png 768w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId53.png 1250w" sizes="(max-width: 1024px) 100vw, 1024px" /><figcaption class="wp-element-caption">Figure 4: Google search for the utility Galaxy Swapper leads to “https://www.galaxyswapper[.]ru/”</figcaption></figure></div>


<p>Download redirects to&nbsp;<code>https://gitlab[.]com/forhost1232/galaxyv19.11.14/-/raw/main/GalaxyV19.11.14.zip</code>.</p>


<div class="wp-block-image">
<figure class="aligncenter size-large"><img loading="lazy" decoding="async" width="1024" height="672" src="https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId56-1024x672.png" alt="" class="wp-image-27647" srcset="https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId56-1024x672.png 1024w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId56-300x197.png 300w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId56-768x504.png 768w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId56.png 1360w" sizes="(max-width: 1024px) 100vw, 1024px" /><figcaption class="wp-element-caption">Figure 5: Download button on “https://www.galaxyswapper[.]ru/” redirects to a trojanized program</figcaption></figure></div>


<p>Website masquerading as LastPass Password Manager:&nbsp;<code>http://lastpass[.]shop/en/</code></p>


<div class="wp-block-image">
<figure class="aligncenter size-large"><img loading="lazy" decoding="async" width="1024" height="483" src="https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId59-1024x483.png" alt="" class="wp-image-27648" srcset="https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId59-1024x483.png 1024w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId59-300x141.png 300w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId59-768x362.png 768w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId59.png 1434w" sizes="(max-width: 1024px) 100vw, 1024px" /><figcaption class="wp-element-caption">Figure 6: Website “http://lastpass[.]shop/en/” masquerading as LastPass Password Manager</figcaption></figure></div>


<p>The fake website of LastPass Password Manager was already down at the time of the investigation. Still, we can confirm that the fake software was downloaded from the “<em><strong>Final URL</strong></em>”&nbsp;<code>https://gitlab[.]com/forhost1232/lastpassinstaller/-/raw/main/LastPassInstaller.zip</code>.</p>


<div class="wp-block-image">
<figure class="aligncenter size-large"><img loading="lazy" decoding="async" width="1024" height="716" src="https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId62-1024x716.png" alt="" class="wp-image-27649" srcset="https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId62-1024x716.png 1024w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId62-300x210.png 300w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId62-768x537.png 768w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId62.png 1163w" sizes="(max-width: 1024px) 100vw, 1024px" /><figcaption class="wp-element-caption">Figure 7: Download button on “http://lastpass[.]shop/en/” redirects to a trojanized program</figcaption></figure></div>


<p>The GitLab page&nbsp;<code>https://gitlab[.]com/forhost1232</code>&nbsp;contained dozens of programs trojanized by dotRunpeX malware.</p>


<div class="wp-block-image">
<figure class="aligncenter size-large"><img loading="lazy" decoding="async" width="1024" height="624" src="https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId65-1024x624.png" alt="" class="wp-image-27650" srcset="https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId65-1024x624.png 1024w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId65-300x183.png 300w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId65-768x468.png 768w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId65.png 1464w" sizes="(max-width: 1024px) 100vw, 1024px" /><figcaption class="wp-element-caption">Figure 8: Dozens of trojanized programs on GitLab repository “https://gitlab[.]com/forhost1232”</figcaption></figure></div>


<p>All of the trojanized programs on the previously mentioned GitLab page contain the main .NET application enlarged with an overlay to avoid scanning with sandboxes very likely.</p>


<div class="wp-block-image">
<figure class="aligncenter size-large"><img loading="lazy" decoding="async" width="1024" height="521" src="https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId68-1024x521.png" alt="" class="wp-image-27651" srcset="https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId68-1024x521.png 1024w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId68-300x153.png 300w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId68-768x391.png 768w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId68-1536x781.png 1536w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId68.png 1681w" sizes="(max-width: 1024px) 100vw, 1024px" /><figcaption class="wp-element-caption">Figure 9: Examples of trojanized programs served by the GitLab repository “https://gitlab[.]com/forhost1232”</figcaption></figure></div>


<p>The mentioned .NET applications with overlay are the typical first stages, behaving as dotnet loaders with simple obfuscation. These different variants of loaders use reflection to load the dotRunpeX injector in the second stage. Some of them are very simple, and some are more advanced.</p>



<p>Simple first-stage loader (direct usage of method&nbsp;<code>System.Reflection.Assembly.Load()</code>):</p>


<div class="wp-block-image">
<figure class="aligncenter size-large"><img loading="lazy" decoding="async" width="1024" height="222" src="https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId71-1024x222.png" alt="" class="wp-image-27652" srcset="https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId71-1024x222.png 1024w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId71-300x65.png 300w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId71-768x166.png 768w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId71.png 1280w" sizes="(max-width: 1024px) 100vw, 1024px" /><figcaption class="wp-element-caption">Figure 10: Simple first-stage loader</figcaption></figure></div>


<p>An example of a more advanced first-stage loader (using AMSI Bypass and&nbsp;<code>DynamicMethod</code>&nbsp;to load and execute the second stage via reflection) can be seen below. The advantage of this kind of advanced loader is that there is no direct reference to&nbsp;<code>System.Reflection.Assembly.Load()</code>&nbsp;method so it could possibly avoid detection of engines relying on static parsing of .NET metadata.</p>


<div class="wp-block-image">
<figure class="aligncenter size-large"><img loading="lazy" decoding="async" width="1024" height="524" src="https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId74-1024x524.png" alt="" class="wp-image-27653" srcset="https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId74-1024x524.png 1024w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId74-300x153.png 300w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId74-768x393.png 768w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId74.png 1447w" sizes="(max-width: 1024px) 100vw, 1024px" /><figcaption class="wp-element-caption">Figure 11: More advanced first-stage loader using AMSI bypass and DynamicMethod</figcaption></figure></div>


<p>Deobfuscated form of the latter one could be seen in the picture below:</p>


<div class="wp-block-image">
<figure class="aligncenter size-large"><img loading="lazy" decoding="async" width="1024" height="532" src="https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId77-1024x532.png" alt="" class="wp-image-27655" srcset="https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId77-1024x532.png 1024w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId77-300x156.png 300w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId77-768x399.png 768w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId77.png 1483w" sizes="(max-width: 1024px) 100vw, 1024px" /><figcaption class="wp-element-caption">Figure 12: A deobfuscated form of a more advanced first-stage loader</figcaption></figure></div>


<p>Programmatic way of second-stage extraction (dotRunpeX stage) from these kinds of loaders could be simply implemented using&nbsp;<a href="https://github.com/Washi1337/AsmResolver">AsmResolver</a>&nbsp;and&nbsp;<a href="https://learn.microsoft.com/en-us/dotnet/framework/reflection-and-codedom/reflection">reflection</a>&nbsp;as shown below.</p>


<div class="wp-block-image">
<figure class="aligncenter size-large"><img loading="lazy" decoding="async" width="1024" height="565" src="https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId82-1024x565.png" alt="" class="wp-image-27656" srcset="https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId82-1024x565.png 1024w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId82-300x166.png 300w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId82-768x424.png 768w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId82.png 1223w" sizes="(max-width: 1024px) 100vw, 1024px" /><figcaption class="wp-element-caption">Figure 13: Extraction of dotRunpeX from first-stage loader using AsmResolver and reflection</figcaption></figure></div>


<p>Important to note that those examples of phishing websites leading to the GitLab page were related to just one campaign where the dotRunpeX injector was always responsible for injecting Redline malware with C2 &#8211;&nbsp;<code>77.73.134.2</code>.</p>



<p>In addition to the most common vectors of infection mentioned earlier, we observed quite an interesting case of infection vector, where a customer of dotRunpeX was probably bored enough to target ordinary victims and decided to target other potential attackers. Something that is supposed to be a Redline builder&nbsp;<code>Redline_20_2_crack.rar</code>&nbsp;(SHA256: “0e40e504c05c30a7987785996e2542c332100ae7ecf9f67ebe3c24ad2468527c”) was trojanized with a downloader that uses a reflection to load dotRunpeX as a hidden “<em><strong>added feature</strong></em>” of the builder.</p>


<div class="wp-block-image">
<figure class="aligncenter size-large"><img loading="lazy" decoding="async" width="1024" height="330" src="https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId85-1024x330.png" alt="" class="wp-image-27657" srcset="https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId85-1024x330.png 1024w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId85-300x97.png 300w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId85-768x247.png 768w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId85-1536x495.png 1536w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId85.png 1822w" sizes="(max-width: 1024px) 100vw, 1024px" /><figcaption class="wp-element-caption">Figure 14: Folder structure of trojanized Redline builder</figcaption></figure></div>


<p>It turned out that during the building process of the Redline, configured to your needs, one will also get another Redline sample, probably the one that you didn’t desire, as a gift embedded in the dotRunpeX.</p>


<div class="wp-block-image">
<figure class="aligncenter size-large"><img loading="lazy" decoding="async" width="1024" height="649" src="https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId88-1024x649.png" alt="" class="wp-image-27658" srcset="https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId88-1024x649.png 1024w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId88-300x190.png 300w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId88-768x487.png 768w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId88.png 1112w" sizes="(max-width: 1024px) 100vw, 1024px" /><figcaption class="wp-element-caption">Figure 15: Downloader that uses a reflection to load dotRunpeX delivering another Redline malware</figcaption></figure></div>


<h2 class="wp-block-heading"><strong>Technical Analysis: Highlights</strong></h2>



<h3 class="wp-block-heading">The old version of dotRunpeX:</h3>



<ul class="wp-block-list">
<li>Using custom obfuscation &#8211; only obfuscations of names</li>



<li>Configurable but limited (target for payload injection, elevation + UAC Bypass, XOR key for payload decryption)</li>



<li>Only one UAC Bypass technique</li>



<li>Using simple XOR to decrypt the main payload to be injected</li>



<li>Using&nbsp;<a href="https://github.com/TheWover/DInvoke">D/Invoke</a>&nbsp;similar technique to call native code (based on using&nbsp;<code>GetDelegateForFunctionPointer()</code>) &#8211; but using decoy syscall routine</li>



<li>Using D/Invoke for remapping of “<em><strong>ntdll.dll</strong></em>”</li>
</ul>



<h3 class="wp-block-heading">The new version of dotRunpeX:</h3>



<ul class="wp-block-list">
<li>Protected by a customized version of the&nbsp;<a href="https://github.com/yck1509/KoiVM">KoiVM virtualizer</a></li>



<li>Highly configurable (disabling Anti-Malware services, Anti-VM, Anti-Sandbox, persistence settings, key for payload decryption, UAC bypass methods)</li>



<li>More UAC Bypass techniques</li>



<li>Using simple XOR to decrypt the main payload to be injected (omitted in the latest developed versions)</li>



<li>Abusing procexp driver (<em><strong>Sysinternals</strong></em>) to kill protected processes (Anti-Malware services)</li>



<li>Signs of being Russian based &#8211; procexp driver name&nbsp;<code>Иисус.sys</code>&nbsp;translated as “<em><strong>jesus.sys</strong></em>”</li>
</ul>



<h3 class="wp-block-heading">Similarities between both versions:</h3>



<ul class="wp-block-list">
<li>64-bit executable files “.exe” written in .NET</li>



<li>Used to inject several different malware families</li>



<li>Using simple XOR to decrypt the main payload to be injected</li>



<li>Possible usage of the same UAC bypass technique (the new version of dotRunpeX has more techniques available)</li>
</ul>


<div class="wp-block-image">
<figure class="aligncenter size-large"><img loading="lazy" decoding="async" width="1024" height="394" src="https://research.checkpoint.com/wp-content/uploads/2023/03/X3VVKH4FB9-rId95-1-1024x394.png" alt="" class="wp-image-27756" srcset="https://research.checkpoint.com/wp-content/uploads/2023/03/X3VVKH4FB9-rId95-1-1024x394.png 1024w, https://research.checkpoint.com/wp-content/uploads/2023/03/X3VVKH4FB9-rId95-1-300x115.png 300w, https://research.checkpoint.com/wp-content/uploads/2023/03/X3VVKH4FB9-rId95-1-768x295.png 768w, https://research.checkpoint.com/wp-content/uploads/2023/03/X3VVKH4FB9-rId95-1-1536x590.png 1536w, https://research.checkpoint.com/wp-content/uploads/2023/03/X3VVKH4FB9-rId95-1.png 1540w" sizes="(max-width: 1024px) 100vw, 1024px" /><figcaption class="wp-element-caption">Figure 16: UAC bypass technique</figcaption></figure></div>


<ul class="wp-block-list">
<li>Using the same version information</li>
</ul>


<div class="wp-block-image">
<figure class="aligncenter size-full"><img loading="lazy" decoding="async" width="498" height="523" src="https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId98.png" alt="" class="wp-image-27670" srcset="https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId98.png 498w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId98-286x300.png 286w" sizes="(max-width: 498px) 100vw, 498px" /><figcaption class="wp-element-caption">Figure 17: DotRunpeX version information</figcaption></figure></div>


<ul class="wp-block-list">
<li>Using the same .NET resource name&nbsp;<code>BIDEN_HARRIS_PERFECT_ASSHOLE</code>&nbsp;to hold the encrypted payload to be injected</li>
</ul>


<div class="wp-block-image">
<figure class="aligncenter size-large"><img loading="lazy" decoding="async" width="1024" height="313" src="https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId101-1024x313.png" alt="" class="wp-image-27671" srcset="https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId101-1024x313.png 1024w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId101-300x92.png 300w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId101-768x235.png 768w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId101.png 1109w" sizes="(max-width: 1024px) 100vw, 1024px" /><figcaption class="wp-element-caption">Figure 18: Dotnet resource name of new version vs.&nbsp;old version</figcaption></figure></div>


<ul class="wp-block-list">
<li>Using the same code injection technique &#8211; Process Hollowing</li>



<li>Using the same structured class for definitions of Native delegates</li>
</ul>


<div class="wp-block-image">
<figure class="aligncenter size-large"><img loading="lazy" decoding="async" width="1024" height="395" src="https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId104-1024x395.png" alt="" class="wp-image-27672" srcset="https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId104-1024x395.png 1024w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId104-300x116.png 300w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId104-768x296.png 768w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId104-1536x593.png 1536w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId104.png 1659w" sizes="(max-width: 1024px) 100vw, 1024px" /><figcaption class="wp-element-caption">Figure 19: The same structured class for definitions of Native delegates</figcaption></figure></div>


<h1 class="wp-block-heading">Full technical analysis &#8211; old version of dotRunpeX</h1>



<p>For the analysis of the older version of dotRunpeX, sample SHA256: “65cac67ed2a084beff373d6aba6f914b8cba0caceda254a857def1df12f5154b” was used. This sample is a 64-bit executable file “.exe” written in .NET, implementing custom obfuscation &#8211; only obfuscations of names. The version information is consistent across all samples we analyzed, and we can notice the ProductName &#8211;&nbsp;<code>RunpeX.Stub.Framework</code>&nbsp;that could be some kind of first hint that we are dealing with a dotnet injector.</p>


<div class="wp-block-image">
<figure class="aligncenter size-large"><img loading="lazy" decoding="async" width="1024" height="349" src="https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId110-1024x349.png" alt="" class="wp-image-27673" srcset="https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId110-1024x349.png 1024w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId110-300x102.png 300w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId110-768x262.png 768w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId110.png 1410w" sizes="(max-width: 1024px) 100vw, 1024px" /><figcaption class="wp-element-caption">Figure 20: Consistent version information of the old dotRunpeX version</figcaption></figure></div>


<p>For simplicity, we partly deobfuscated the names of methods, their arguments, and local variables. Right in the&nbsp;<code>Main()</code>&nbsp;method, we can see simple XOR decryption of the resource&nbsp;<code>BIDEN_HARRIS_PERFECT_ASSHOLE</code>&nbsp;that contains an encrypted payload to be injected. The resource name was consistent across all samples we analyzed.</p>


<div class="wp-block-image">
<figure class="aligncenter size-large"><img loading="lazy" decoding="async" width="1024" height="191" src="https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId113-1024x191.png" alt="" class="wp-image-27674" srcset="https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId113-1024x191.png 1024w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId113-300x56.png 300w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId113-768x143.png 768w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId113-1536x286.png 1536w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId113.png 1855w" sizes="(max-width: 1024px) 100vw, 1024px" /><figcaption class="wp-element-caption">Figure 21: The main method leads to simple XOR decryption of the embedded payload</figcaption></figure></div>


<p>We can also see the namespace&nbsp;<code>UACBypass</code>&nbsp;with the class name&nbsp;<code>UAC</code>. This class implements UAC (<em><strong>User Account Control</strong></em>) bypass method, but it is not configured to use in this sample.</p>


<div class="wp-block-image">
<figure class="aligncenter size-large"><img loading="lazy" decoding="async" width="1024" height="394" src="https://research.checkpoint.com/wp-content/uploads/2023/03/X3VVKH4FB9-rId95-1024x394.png" alt="" class="wp-image-27755" srcset="https://research.checkpoint.com/wp-content/uploads/2023/03/X3VVKH4FB9-rId95-1024x394.png 1024w, https://research.checkpoint.com/wp-content/uploads/2023/03/X3VVKH4FB9-rId95-300x115.png 300w, https://research.checkpoint.com/wp-content/uploads/2023/03/X3VVKH4FB9-rId95-768x295.png 768w, https://research.checkpoint.com/wp-content/uploads/2023/03/X3VVKH4FB9-rId95-1536x590.png 1536w, https://research.checkpoint.com/wp-content/uploads/2023/03/X3VVKH4FB9-rId95.png 1540w" sizes="(max-width: 1024px) 100vw, 1024px" /><figcaption class="wp-element-caption">Figure 22: UAC bypass method</figcaption></figure></div>


<p>Method&nbsp;<code>Inject()</code>&nbsp;is implementing a code injection technique called “<em><strong>Process Hollowing</strong></em>”. We can notice spawning a process in a suspended state right in the picture below.</p>


<div class="wp-block-image">
<figure class="aligncenter size-large"><img loading="lazy" decoding="async" width="1024" height="379" src="https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId118-1024x379.png" alt="" class="wp-image-27676" srcset="https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId118-1024x379.png 1024w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId118-300x111.png 300w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId118-768x285.png 768w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId118.png 1533w" sizes="(max-width: 1024px) 100vw, 1024px" /><figcaption class="wp-element-caption">Figure 23: Creation of suspended process as a part of the Process Hollowing technique</figcaption></figure></div>


<p>This technique is nothing new in the world of malware development. Still, there is something interesting we can immediately spot once we check&nbsp;<a href="https://learn.microsoft.com/en-us/dotnet/standard/native-interop/pinvoke">P/Invoke</a>&nbsp;(technology that allows access to structs, callbacks, and functions in unmanaged libraries from managed code) defined methods of this sample. These methods can be seen in the&nbsp;<code>ImplMap</code>&nbsp;table, which is a part of .NET metadata.</p>


<div class="wp-block-image">
<figure class="aligncenter size-large"><img loading="lazy" decoding="async" width="1024" height="366" src="https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId122-1024x366.png" alt="" class="wp-image-27677" srcset="https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId122-1024x366.png 1024w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId122-300x107.png 300w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId122-768x275.png 768w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId122.png 1146w" sizes="(max-width: 1024px) 100vw, 1024px" /><figcaption class="wp-element-caption">Figure 24: The ImplMap table &#8211; the old version of the dotRunpeX</figcaption></figure></div>


<p>Certain WIN APIs or NT APIs must be used to perform the&nbsp;<strong>Process Hollowing</strong>&nbsp;technique. And as we saw in the&nbsp;<code>ImplMap</code>&nbsp;table, some of the most crucial APIs are missing. To be more specific, we cannot see any APIs related to unmapping and writing to remote process memory. The reason behind this is the usage of the&nbsp;<a href="https://github.com/TheWover/DInvoke">D/Invoke</a>&nbsp;framework to call certain NT API routines that could usually trigger attention.</p>



<p>D/Invoke contains powerful primitives that may be combined intelligently to dynamically invoke unmanaged code from disk or memory with careful precision. It relies on the usage of the dotnet method&nbsp;<code>GetDelegateForFunctionPointer()</code>&nbsp;and corresponding delegates definitions.</p>



<p>In this case, NT APIs <code>ZwOpenSection</code>, <code>ZwMapViewOfSection</code>, <code>ZwUnmapViewOfSection</code>, <code>NtClose</code>, <code>NtWriteVirtualMemory</code>, <code>NtResumeThread</code>, and <code>RtlMoveMemory </code>are implemented via D/Invoke. The corresponding definitions of delegates can be seen below.</p>


<div class="wp-block-image">
<figure class="aligncenter size-large"><img loading="lazy" decoding="async" width="1024" height="446" src="https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId125-1-1024x446.png" alt="" class="wp-image-27680" srcset="https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId125-1-1024x446.png 1024w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId125-1-300x131.png 300w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId125-1-768x334.png 768w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId125-1-1536x668.png 1536w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId125-1.png 1572w" sizes="(max-width: 1024px) 100vw, 1024px" /><figcaption class="wp-element-caption">Figure 25: The class for definitions of Native delegates</figcaption></figure></div>


<p>What is even more interesting, 4 NT APIs (<code>ZwUnmapViewOfSection</code>,&nbsp;<code>NtWriteVirtualMemory</code>,&nbsp;<code>NtResumeThread</code>,&nbsp;<code>RtlMoveMemory</code>) implemented via D/Invoke are using something that could be considered as an added PoC technique and is not a part of the original D/Invoke framework &#8211;&nbsp;<strong>syscall patching</strong>. For example, we can check how&nbsp;<code>NtWriteVirtualMemory</code>&nbsp;invocations are implemented via a method called&nbsp;<code>CallNtWriteVirtualMemory()</code>.</p>


<div class="wp-block-image">
<figure class="aligncenter size-large"><img loading="lazy" decoding="async" width="1024" height="378" src="https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId128-1-1024x378.png" alt="" class="wp-image-27681" srcset="https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId128-1-1024x378.png 1024w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId128-1-300x111.png 300w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId128-1-768x284.png 768w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId128-1-1536x568.png 1536w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId128-1.png 1618w" sizes="(max-width: 1024px) 100vw, 1024px" /><figcaption class="wp-element-caption">Figure 26: Example of D/Invoke implementation that leads to syscall patching</figcaption></figure></div>


<p>First, what we can see is an altered usage of the D/Invoke framework in the method&nbsp;<code>MapDllandGetProcAddress()</code>. Each time this method is invoked, it will remap the specified library and obtain the desired function’s address. Before returning the address of the desired function, pointer arithmetic is used to move the pointer by 4 bytes so it points to the address of the syscall number. In this case, the “<em><strong>ntdll.dll</strong></em>” module gets remapped, returning the address of the NT API routine&nbsp;<code>NtWriteVirtualMemory</code>&nbsp;altered by 4 bytes offset.</p>


<div class="wp-block-image">
<figure class="aligncenter size-large"><img loading="lazy" decoding="async" width="1024" height="255" src="https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId131-1024x255.png" alt="" class="wp-image-27682" srcset="https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId131-1024x255.png 1024w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId131-300x75.png 300w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId131-768x191.png 768w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId131-1536x382.png 1536w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId131.png 1675w" sizes="(max-width: 1024px) 100vw, 1024px" /><figcaption class="wp-element-caption">Figure 27: Altered usage of the D/Invoke that returns the address pointing to the syscall number</figcaption></figure></div>

<div class="wp-block-image">
<figure class="aligncenter size-full"><img loading="lazy" decoding="async" width="672" height="147" src="https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId134-1.png" alt="" class="wp-image-27684" srcset="https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId134-1.png 672w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId134-1-300x66.png 300w" sizes="(max-width: 672px) 100vw, 672px" /><figcaption class="wp-element-caption">Figure 28: NtWriteVirtualMemory address altered by 4 bytes offset points to its syscall number</figcaption></figure></div>


<p>The remapping of the module is used as an AV-evasion and Anti-Debug technique, as it results in unhooking and removing all set software breakpoints. The obtaining address of a certain native function is implemented via typical D/Invoke implementation &#8211;&nbsp;<code>DynGetProcAddress()</code>, which is responsible for in-memory parsing of the PE structure to find the address of the specified routine.</p>


<div class="wp-block-image">
<figure class="aligncenter size-full"><img loading="lazy" decoding="async" width="903" height="764" src="https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId137.png" alt="" class="wp-image-27685" srcset="https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId137.png 903w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId137-300x254.png 300w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId137-768x650.png 768w" sizes="(max-width: 903px) 100vw, 903px" /><figcaption class="wp-element-caption">Figure 29: Typical in-memory parsing of the PE structure implemented via D/Invoke</figcaption></figure></div>


<p>Now back to the exciting part. As we can see in this case,&nbsp;<code>DynGetProcAddress()</code>&nbsp;is also used to find the address of NT API&nbsp;<code>NtAddBootEntry</code>, and we can call it a decoy routine. The decoy routine address will be used for syscall patching.</p>


<div class="wp-block-image">
<figure class="aligncenter size-large"><img loading="lazy" decoding="async" width="1024" height="557" src="https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId140-1024x557.png" alt="" class="wp-image-27686" srcset="https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId140-1024x557.png 1024w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId140-300x163.png 300w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId140-768x417.png 768w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId140.png 1159w" sizes="(max-width: 1024px) 100vw, 1024px" /><figcaption class="wp-element-caption">Figure 30: Decoy routine NtAddBootEntry used for syscall patching</figcaption></figure></div>


<ul class="wp-block-list">
<li>Getting the address of the&nbsp;<code>NtWriteVirtualMemory</code>&nbsp;routine altered by 4 bytes offset (address of syscall number)</li>



<li>Getting the address of the decoy routine&nbsp;<code>NtAddBootEntry</code></li>



<li>Copying 2 bytes from the altered address of&nbsp;<code>NtWriteVirtualMemory</code>&nbsp;(even though the syscall number is&nbsp;<em><strong>DWORD</strong></em>, these 2 bytes are enough and represent the syscall number of&nbsp;<code>NtWriteVirtualMemory</code>) to byte field&nbsp;<code>SyscallStub</code>&nbsp;(this field contains syscall stub code)</li>



<li>Patching address of&nbsp;<code>NtAddBootEntry</code>&nbsp;with byte field&nbsp;<code>SyscallStub</code></li>
</ul>



<p>Disassembling the default value of the&nbsp;<code>SyscallStub</code>&nbsp;makes it even more apparent why exactly 2 bytes are getting replaced with bytes from the altered address of the&nbsp;<code>NtWriteVirtualMemory</code>&nbsp;routine. These 2 bytes represent the syscall number of certain real function to be called.</p>


<div class="wp-block-image">
<figure class="aligncenter size-large"><img loading="lazy" decoding="async" width="1024" height="145" src="https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId143-1024x145.png" alt="" class="wp-image-27687" srcset="https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId143-1024x145.png 1024w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId143-300x42.png 300w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId143-768x109.png 768w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId143.png 1286w" sizes="(max-width: 1024px) 100vw, 1024px" /><figcaption class="wp-element-caption">Figure 31: Disassembling the default value of the byte field SyscallStub</figcaption></figure></div>


<p>Simply said, once the&nbsp;<code>NtWriteVirtualMemory</code>&nbsp;function is called, the only thing we will see from user mode will be an invocation of&nbsp;<code>NtAddBootEntry</code>.</p>



<p>We can use&nbsp;<strong>WinDbg</strong>&nbsp;“<em><strong>kernel mode debugging</strong></em>” to verify the mentioned execution flow. We can see that NT API&nbsp;<code>NtAddBootEntry</code>&nbsp;with the original syscall number 0x6a (on our target system) is used as a patched decoy routine. In the case where&nbsp;<code>NtWriteVirtualMemory</code>&nbsp;needs to be called, the syscall number of the decoy routine is patched with syscall number 0x3a (<code>NtWriteVirtualMemory</code>&nbsp;syscall number on our target system) and gets called.</p>


<div class="wp-block-image">
<figure class="aligncenter size-large"><img loading="lazy" decoding="async" width="1024" height="463" src="https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId146-1024x463.png" alt="" class="wp-image-27688" srcset="https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId146-1024x463.png 1024w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId146-300x136.png 300w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId146-768x347.png 768w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId146-1536x694.png 1536w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId146.png 1792w" sizes="(max-width: 1024px) 100vw, 1024px" /><figcaption class="wp-element-caption">Figure 32: WinDbg “kernel mode debugging” shows the execution flow caused by syscall patching</figcaption></figure></div>


<h1 class="wp-block-heading">Full technical analysis &#8211; new version of dotRunpeX</h1>



<p>For the analysis of the new version of dotRunpeX, sample SHA256: “44a11146173db0663a23787bffbb120f3955bc33e60e73ecc798953e9b34b2f2” was used. This sample is a 64-bit executable file “.exe” written in .NET, protected by&nbsp;<a href="https://github.com/yck1509/KoiVM">KoiVM</a>. The version information is the same as in the case of an older version of dotRunpeX and is consistent across all samples we analyzed. We can notice the ProductName &#8211;&nbsp;<code>RunpeX.Stub.Framework</code>&nbsp;again.</p>


<div class="wp-block-image">
<figure class="aligncenter size-large"><img loading="lazy" decoding="async" width="1024" height="371" src="https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId150-1024x371.png" alt="" class="wp-image-27689" srcset="https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId150-1024x371.png 1024w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId150-300x109.png 300w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId150-768x278.png 768w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId150.png 1408w" sizes="(max-width: 1024px) 100vw, 1024px" /><figcaption class="wp-element-caption">Figure 33: Consistent version information of the new dotRunpeX version</figcaption></figure></div>


<p>Right after opening the sample in&nbsp;<a href="https://github.com/dnSpyEx/dnSpy">dnSpyEx</a>&nbsp;and leading to the entrypoint function &#8211;&nbsp;<code>_sb()</code>&nbsp;method, we can immediately confirm that this new version of dotRunpeX is protected by the KoiVM virtualizer. Despite the fact that most of the IL code is virtualized, we can still spot invocation of P/Invoke defined method&nbsp;<code>CreateProcess</code>&nbsp;that is used in a way to create a process in a suspended state &#8211; typically used for code injection technique “<em><strong>Process Hollowing</strong></em>”.</p>


<div class="wp-block-image">
<figure class="aligncenter size-large"><img loading="lazy" decoding="async" width="1024" height="390" src="https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId154-1024x390.png" alt="" class="wp-image-27691" srcset="https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId154-1024x390.png 1024w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId154-300x114.png 300w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId154-768x292.png 768w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId154-1536x585.png 1536w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId154.png 1852w" sizes="(max-width: 1024px) 100vw, 1024px" /><figcaption class="wp-element-caption">Figure 34: Creation of suspended process as a part of the Process Hollowing technique</figcaption></figure></div>


<p>After investigating more what was left lying around in .NET metadata, specifically in the&nbsp;<code>ImplMap</code>&nbsp;table, to find out what other methods are defined as P/Invoke and very likely used by this sample, we are getting surprisingly even more exciting findings than in the case of the older version of dotRunpeX. Apparently, the sample will perform not just code injection but also loading and communicating with the driver.</p>


<div class="wp-block-image">
<figure class="aligncenter size-full"><img loading="lazy" decoding="async" width="924" height="735" src="https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId157.png" alt="" class="wp-image-27692" srcset="https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId157.png 924w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId157-300x239.png 300w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId157-768x611.png 768w" sizes="(max-width: 924px) 100vw, 924px" /><figcaption class="wp-element-caption">Figure 35: The ImplMap table &#8211; the new version of the dotRunpeX</figcaption></figure></div>


<p>The next that we immediately noticed is the usage of the same resource name as in the case of the older version &#8211;&nbsp;<code>BIDEN_HARRIS_PERFECT_ASSHOLE</code>&nbsp;&#8211; that contains an encrypted payload to be injected. The resource name was consistent across all samples we analyzed. Obviously, the decryption routine is hidden behind the code virtualization, but an educative guess will lead us to a simple XOR decryption routine using a password expressing the secret desires of the author &#8211;&nbsp;<code>I_LOVE_HENTAIU2</code>.</p>


<div class="wp-block-image">
<figure class="aligncenter size-large"><img loading="lazy" decoding="async" width="1024" height="351" src="https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId160-1024x351.png" alt="" class="wp-image-27693" srcset="https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId160-1024x351.png 1024w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId160-300x103.png 300w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId160-768x263.png 768w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId160-1536x526.png 1536w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId160.png 1860w" sizes="(max-width: 1024px) 100vw, 1024px" /><figcaption class="wp-element-caption">Figure 36: Simple XOR decryption of the .NET resource using password “I_LOVE_HENTAIU2”</figcaption></figure></div>


<p>Unfortunately, as dotRunpeX is still in high development and adding new features, the latest samples utilizing this injector changed the decryption scheme (no more simple XOR) to omit static extraction of embedded payloads.</p>



<p>As we pointed out before, the IL code is protected by the KoiVM virtualizer, so to continue with our analysis, we needed to come up with some approach to deal with the protected code and get something meaningful from that in a reasonable time. First, what came to our mind was to use a publicly available open-source KoiVM de-virtualizer called&nbsp;<a href="https://github.com/Washi1337/OldRod">OldRod</a>. This tool is fully workable for the vanilla version of KoiVM. It is even developed in a way that defeats some simple modifications of the original version of KoiVM (such as signature modifications of the methods in&nbsp;<code>VMEntry</code>&nbsp;class or changes in the default&nbsp;<code>#Koi</code>&nbsp;stream name).</p>



<p>Unfortunately for us, we are dealing with a customized version of KoiVM that modified the protector in a way that is not so simple to defeat. The original implementation of KoiVM defines 119 constant variables that are used to virtualize the code. These constants are used to define registers, flags, opcodes, etc. Assigned values of these constants are used for the proper execution of the virtualized code and are also needed for the de-virtualization process.</p>


<div class="wp-block-image">
<figure class="aligncenter size-large"><img loading="lazy" decoding="async" width="1024" height="558" src="https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId164-1024x558.png" alt="" class="wp-image-27694" srcset="https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId164-1024x558.png 1024w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId164-300x163.png 300w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId164-768x418.png 768w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId164.png 1495w" sizes="(max-width: 1024px) 100vw, 1024px" /><figcaption class="wp-element-caption">Figure 37: The original implementation of KoiVM defines 119 constants</figcaption></figure></div>


<p>When using the vanilla version of KoiVM, the resulting constants appear in the compiled, protected sample inside the&nbsp;<code>Constants</code>&nbsp;class as fields in the exact same order with ascending values of tokens. The order of constants and their corresponding tokens inside the compiled binary is something OldRod depends on.</p>


<div class="wp-block-image">
<figure class="aligncenter size-large"><img loading="lazy" decoding="async" width="1024" height="408" src="https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId167-1024x408.png" alt="" class="wp-image-27695" srcset="https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId167-1024x408.png 1024w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId167-300x120.png 300w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId167-768x306.png 768w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId167-1536x612.png 1536w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId167.png 1716w" sizes="(max-width: 1024px) 100vw, 1024px" /><figcaption class="wp-element-caption">Figure 38: The OldRod source code &#8211; automatic detection of constants</figcaption></figure></div>


<p>Although the OldRod tool is an absolute masterpiece and can deal with a custom order of constants when providing a custom constants mapping via configuration file (<code>--config</code>&nbsp;option), finding out the correct mapping of those constants could not be as simple as it sounds. Sometimes when a constant’s order is handmade change, it could be not so hard to map them correctly by analyzing their usage in code. Unfortunately, in the case of dotRunpeX, we can immediately see that values of those constants are affected by runtime arithmetic assignments (no problem to defeat this programmatically), but even worse is that they are scrambled in a very effective way that makes the correct mapping hard enough to consider this approach as not usable for getting some results in a reasonable time.</p>


<div class="wp-block-image">
<figure class="aligncenter size-large"><img loading="lazy" decoding="async" width="1024" height="464" src="https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId170-1024x464.png" alt="" class="wp-image-27696" srcset="https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId170-1024x464.png 1024w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId170-300x136.png 300w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId170-768x348.png 768w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId170-1536x696.png 1536w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId170.png 1612w" sizes="(max-width: 1024px) 100vw, 1024px" /><figcaption class="wp-element-caption">Figure 39: Runtime arithmetic assignments of scrambled constants</figcaption></figure></div>


<p>Even though we pointed out several facts about the extreme hardness of devirtualization, with precise code analysis and some hard moments during the constants mapping via their appropriate handlers, we were able to fully devirtualize the code. Despite the fully devirtualized code, we were still left with a non-fully runnable .NET Assembly that was still obfuscated with ConfuserEx obfuscator. To continue our madness, we were able to get rid of this obfuscation too.</p>



<p>To give a little spoiler about the functionality of the dotRunpeX injector and its use of procexp driver, fully devirtualized and deobfuscated code related to driver routines can be seen below.</p>



<p>Driver loading/unloading:</p>


<div class="wp-block-image">
<figure class="aligncenter size-large"><img loading="lazy" decoding="async" width="1024" height="312" src="https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId173-1024x312.png" alt="" class="wp-image-27697" srcset="https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId173-1024x312.png 1024w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId173-300x91.png 300w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId173-768x234.png 768w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId173-1536x468.png 1536w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId173.png 1560w" sizes="(max-width: 1024px) 100vw, 1024px" /><figcaption class="wp-element-caption">Figure 40: Devirtualized and deobfuscated code responsible for loading/unloading the driver</figcaption></figure></div>


<p>Communication with procexp device:</p>


<div class="wp-block-image">
<figure class="aligncenter size-large"><img loading="lazy" decoding="async" width="1024" height="446" src="https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId176-1024x446.png" alt="" class="wp-image-27698" srcset="https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId176-1024x446.png 1024w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId176-300x131.png 300w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId176-768x335.png 768w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId176-1536x669.png 1536w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId176.png 1699w" sizes="(max-width: 1024px) 100vw, 1024px" /><figcaption class="wp-element-caption">Figure 41: Devirtualized and deobfuscated code responsible for communication with procexp device</figcaption></figure></div>


<p>The process of devirtualization and deobfuscation is a subject to consider for its own blog post and won’t be covered further.</p>



<p>Normally, when it is impossible to devirtualize the code in a reasonable time, we are still left with few other options. The first of the options, quite a common approach when dealing with virtualized code, is to go with dynamic analysis using a debugger, DBI (<em><strong>Dynamic Binary Instrumentation</strong></em>), hooking, and WIN API tracing. As we are dealing with dotnet code, another approach to come out with could be some PoC using some knowledge from the .NET internals world. As researchers who love to bring something new to the community, we decided to combine both of these approaches, which resulted in developing new tools that were approved to be very effective.</p>



<p>To get more information about the code functionality, we started with the dynamic analysis approach using&nbsp;<a href="https://x64dbg.com/">x64dbg</a>. As we pointed out before, the&nbsp;<code>ImplMap</code>&nbsp;table containing P/Invoke-defined methods seems to be a good starting point for setting breakpoints in the debugger. Automating the process of parsing out the P/Invoke defined methods and converting it to x64dbg script leads us to the first tool we developed, called “<em><strong>ImplMap2x64dbg</strong></em>”.</p>



<h3 class="wp-block-heading">ImplMap2x64dbg</h3>



<p>Python script that uses&nbsp;<a href="https://github.com/malwarefrank/dnfile">dnfile</a>&nbsp;module to properly parse .NET executable files and their metadata. This tool creates an x64dbg script for setting breakpoints on defined&nbsp;<code>ImplMap</code>&nbsp;(P/Invoke) methods of the .NET executable. This script can be downloaded in the last section of the article.</p>



<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">import dnfile, sys, os

def Main():
    if(len(sys.argv) != 2 or sys.argv[1] == '-h' or sys.argv[1] == '--help'):
        print("Description: Creates x64dbg script for setting breakpoints on defined ImplMap (PInvoke) methods of .NET executable")
        print(f"Usage: {os.path.basename(sys.argv[0])} &lt;filepath>\n")
        sys.exit()

    file_path = sys.argv[1]
    script_path = file_path + "_x64dbg.txt"
    dn_file = dnfile.dnPE(file_path)

    if(dn_file.net is None or dn_file.net.metadata is None):
        print(f"{sys.argv[1]} is NOT a .NET executable !!!\n")
        sys.exit()
    if(dn_file.net.mdtables.ImplMap is None):
        print(f".NET executable '{sys.argv[1]}' has NO ImplMap !!!\n")
        sys.exit()

    # Getting all ImplMap methods and module scope
    implmap_table = dn_file.net.mdtables.ImplMap.rows
    implmap_modules = []
    implmap_methods = []
    [implmap_modules.append(row.ImportScope.row.Name.lower().replace(".dll", "")) for row in implmap_table if (row.ImportScope.row.Name.lower().replace(".dll", "") not in implmap_modules)]
    [implmap_methods.append(row.ImportName) for row in implmap_table if (row.ImportName not in implmap_methods)]

    # Creation of x64dbg script
    x64dbg_script = "; Replace charset depending APIs - ex. CreateProcess -> CreateProcessA or CreateProcessW !!!\n"
    for module in implmap_modules:
        x64dbg_script += f"loadlib {module}\n"
    for method in implmap_methods:
        x64dbg_script += f"SetBPX {method}\n"
    with open(script_path, "wt",encoding="utf-8") as f_scr:f_scr.write(x64dbg_script)
    print(f"x64dbg script created: '{script_path}'")

if __name__ == '__main__':
    Main()</pre>



<p>Processing our dotRunpeX sample with “<em><strong>ImplMap2x64dbg</strong></em>” will result in the x64dbg script:</p>



<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">; Replace charset depending APIs - ex. CreateProcess -> CreateProcessA or CreateProcessW !!!
loadlib kernel32
loadlib ntdll
loadlib user32
loadlib advapi32
SetBPX VirtualAllocEx
SetBPX CreateProcessA
SetBPX CreateProcessW
SetBPX CreateRemoteThread
SetBPX Wow64SetThreadContext
SetBPX Wow64GetThreadContext
SetBPX NtResumeThread
SetBPX ZwUnmapViewOfSection
SetBPX NtWriteVirtualMemory
SetBPX MessageBoxA
SetBPX MessageBoxW
SetBPX GetModuleHandleA
SetBPX GetModuleHandleW
SetBPX FindWindowA
SetBPX FindWindowW
SetBPX GetProcAddress
SetBPX GetFileAttributesA
SetBPX GetFileAttributesW
SetBPX ShowWindow
SetBPX SetForegroundWindow
SetBPX Wow64DisableWow64FsRedirection
SetBPX Wow64RevertWow64FsRedirection
SetBPX CreateFileA
SetBPX CreateFileW
SetBPX RtlInitUnicodeString
SetBPX NtLoadDriver
SetBPX NtUnloadDriver
SetBPX OpenProcessToken
SetBPX LookupPrivilegeValueA
SetBPX LookupPrivilegeValueW
SetBPX AdjustTokenPrivileges
SetBPX CloseHandle
SetBPX NtQuerySystemInformation
SetBPX DeviceIoControl
SetBPX GetProcessHeap
SetBPX HeapFree
SetBPX HeapAlloc
SetBPX RtlCopyMemory</pre>



<p>We focused mainly on certain WIN/NT APIs such as <code>CreateProcessW</code>, <code>NtWriteVirtualMemory</code>,<code>CreateFileA</code>, <code>CreateFileW</code>, <code>NtLoadDriver</code>, <code>NtQuerySystemInformation</code>, and <code>DeviceIoControl </code>as they are the interesting ones related to driver and process injection routines.</p>



<p>The first interesting WIN API call we can see is&nbsp;<code>CreateFileW</code>&nbsp;which is used to create a file in path&nbsp;<code>C:\Users\XXX\AppData\Local\Temp\Иисус.sys</code>.</p>


<div class="wp-block-image">
<figure class="aligncenter size-full"><img loading="lazy" decoding="async" width="851" height="261" src="https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId181.png" alt="" class="wp-image-27699" srcset="https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId181.png 851w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId181-300x92.png 300w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId181-768x236.png 768w" sizes="(max-width: 851px) 100vw, 851px" /><figcaption class="wp-element-caption">Figure 42: CreateFileW used to create a file “Иисус.sys”</figcaption></figure></div>


<p>If we check the created file&nbsp;<code>Иисус.sys</code>&nbsp;(from the Russian language translated as “<em><strong>jesus.sys</strong></em>”), we will immediately find out it is a valid Process Explorer driver, version 16.43.</p>


<div class="wp-block-image">
<figure class="aligncenter size-large"><img loading="lazy" decoding="async" width="1024" height="718" src="https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId184-1024x718.png" alt="" class="wp-image-27700" srcset="https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId184-1024x718.png 1024w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId184-300x210.png 300w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId184-768x538.png 768w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId184.png 1043w" sizes="(max-width: 1024px) 100vw, 1024px" /><figcaption class="wp-element-caption">Figure 43: Created file “Иисус.sys” is a valid Process Explorer driver, version 16.43</figcaption></figure></div>


<p>We can see routine&nbsp;<code>NtLoadDriver</code>&nbsp;responsible for loading this driver where the argument points to&nbsp;<code>DriverServiceName</code>&nbsp;&#8211;&nbsp;<code>\Registry\Machine\System\CurrentControlSet\Services\TaskKill</code>&nbsp;that specifies a path to the driver’s registry key.</p>


<div class="wp-block-image">
<figure class="aligncenter size-full"><img loading="lazy" decoding="async" width="882" height="355" src="https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId187-1.png" alt="" class="wp-image-27705" srcset="https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId187-1.png 882w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId187-1-300x121.png 300w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId187-1-768x309.png 768w" sizes="(max-width: 882px) 100vw, 882px" /><figcaption class="wp-element-caption">Figure 44: NtLoadDriver used to load procexp driver via its associated registry key</figcaption></figure></div>

<div class="wp-block-image">
<figure class="aligncenter size-full"><img loading="lazy" decoding="async" width="980" height="186" src="https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId190-1.png" alt="" class="wp-image-27704" srcset="https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId190-1.png 980w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId190-1-300x57.png 300w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId190-1-768x146.png 768w" sizes="(max-width: 980px) 100vw, 980px" /><figcaption class="wp-element-caption">Figure 45: Content of the driver’s registry key “\Registry\Machine\System\CurrentControlSet\Services\TaskKill”</figcaption></figure></div>


<p>Connecting to the process explorer device follows.</p>


<div class="wp-block-image">
<figure class="aligncenter size-large"><img loading="lazy" decoding="async" width="1024" height="212" src="https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId193-1024x212.png" alt="" class="wp-image-27703" srcset="https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId193-1024x212.png 1024w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId193-300x62.png 300w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId193-768x159.png 768w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId193.png 1450w" sizes="(max-width: 1024px) 100vw, 1024px" /><figcaption class="wp-element-caption">Figure 46: Obtaining the handle of the process explorer device</figcaption></figure></div>


<p>One of the dotRunpeX AV-evasion techniques is killing a hardcoded list of Anti-Malware services with the help of a process explorer driver (<em><strong>procexp.sys</strong></em>). The reason behind the usage of process explorer driver is that the Anti-Malware service usually runs as a protected process, more specifically as&nbsp;<a href="https://learn.microsoft.com/en-us/windows/win32/services/protecting-anti-malware-services-">PPL</a>, to avoid disabling protection on the system caused by malicious activity. It is possible to abuse vulnerable versions of the procexp driver to close object handles of the protected process. Once enough handles are closed, the specific protected process will be killed. All samples we analyzed were abusing version 16.43 of this driver which is also the latest version vulnerable to this technique.</p>



<p>To obtain information about object handles, dotRunpeX uses NT API&nbsp;<code>NtQuerySystemInformation&nbsp;</code>with specified&nbsp;<code>SystemInformationClass</code>&nbsp;0x10 that points to the undocumented structure&nbsp;[<a href="https://www.geoffchappell.com/studies/windows/km/ntoskrnl/api/ex/sysinfo/handle.htm?tx=56)"><code>SYSTEM_HANDLE_INFORMATION</code></a>]. This way, it finds all handles that belong to the protected process.</p>


<div class="wp-block-image">
<figure class="aligncenter size-large"><img loading="lazy" decoding="async" width="1024" height="106" src="https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId197-1024x106.png" alt="" class="wp-image-27709" srcset="https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId197-1024x106.png 1024w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId197-300x31.png 300w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId197-768x80.png 768w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId197.png 1349w" sizes="(max-width: 1024px) 100vw, 1024px" /><figcaption class="wp-element-caption">Figure 47: NtQuerySystemInformation used to obtain undocumented structure SYSTEM_HANDLE_INFORMATION</figcaption></figure></div>


<p>To process object handles of protected process, dotRunpeX uses WIN API&nbsp;<code>DeviceIoControl</code>&nbsp;to send IOCTL directly to the vulnerable procexp driver. The IOCTL “<em><strong>2201288708</strong></em>” (<code>IOCTL_CLOSE_HANDLE</code>) is in&nbsp;<code>RDX</code>&nbsp;register, and procexp driver routine processing this request is responsible for closing certain object handle of the specified process, regardless of whether the specified process is protected or not. Once enough object handles are closed, the Anti-Malware service is killed.</p>


<div class="wp-block-image">
<figure class="aligncenter size-large"><img loading="lazy" decoding="async" width="1024" height="337" src="https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId200-1-1024x337.png" alt="" class="wp-image-27710" srcset="https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId200-1-1024x337.png 1024w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId200-1-300x99.png 300w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId200-1-768x253.png 768w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId200-1.png 1368w" sizes="(max-width: 1024px) 100vw, 1024px" /><figcaption class="wp-element-caption">Figure 48: DeviceIoControl used to send the IOCTL “2201288708” to close the object handle of the protected process</figcaption></figure></div>


<p>We could also see that register&nbsp;<code>R8</code>&nbsp;(<code>lpInBuffer</code>) points to data required to close the object handle. This data structure could be defined as follows:</p>



<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">typedef struct _ioControl
{
    ULONGLONG ulPID;
    PVOID lpObjectAddress;
    ULONGLONG ulSize;
    ULONGLONG ulHandle;
} PROCEXP_DATA_EXCHANGE, *PPROCEXP_DATA_EXCHANGE;</pre>



<p>Let’s compare the procexp driver version used by all samples of dotRunpeX (version 16.43 &#8211; compiled 2021-08-17) and the latest version of the procexp driver (version 17.02 &#8211; compiled 2022-11-10). We can immediately spot the added patching code that is responsible for disabling the possibility of closing object handles of protected processes.</p>


<div class="wp-block-image">
<figure class="aligncenter size-large"><img loading="lazy" decoding="async" width="1024" height="469" src="https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId203-1-1024x469.png" alt="" class="wp-image-27711" srcset="https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId203-1-1024x469.png 1024w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId203-1-300x138.png 300w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId203-1-768x352.png 768w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId203-1-1536x704.png 1536w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId203-1.png 1911w" sizes="(max-width: 1024px) 100vw, 1024px" /><figcaption class="wp-element-caption">Figure 49: Process Explorer driver version 16.43 vs.&nbsp;17.02</figcaption></figure></div>


<p>This technique of closing object handles of protected processes using the process explorer driver is well documented and part of an open-source project called&nbsp;<a href="https://github.com/Yaxser/Backstab">Backstab</a>. Process explorer drivers version 17.0+ are already patched.</p>



<p>After killing specific protected processes, Process Hollowing is what follows using WIN API&nbsp;<code>CreateProcessW</code>&nbsp;to start the process as suspended (in this case&nbsp;<code>C:\Windows\Microsoft.NET\Framework\v4.0.30319\InstallUtil.exe</code>) and direct NT API&nbsp;<code>NtWriteVirtualMemory</code>&nbsp;to write embedded payload of dotRunpeX into the newly created remote process.</p>



<p>It turned out that with an approach of dynamic analysis that focused on the native layer and certain usage of WIN/NT APIs, we got some interesting findings of this virtualized dotnet injector that could be used for automation and mass processing:</p>



<ul class="wp-block-list">
<li>Each dotRunpeX sample has an embedded payload of a certain malware family to be injected</li>



<li>Each dotRunpeX sample has an embedded procexp driver to kill protected processes</li>



<li>There is very likely some kind of config hidden behind the virtualized code that specifies the target process for Process Hollowing, a protected process list to be killed (Anti-Malware services), and probably other interesting configurable things.</li>
</ul>



<p>Encouraged by these findings, we can move forward to some automation using knowledge from the .NET internals world. When we are talking about dotnet, we can immediately think of code being managed by .NET runtime. More things are being managed, and among them is one very important for our further process, and that is so-called “<em><strong>Memory Management</strong></em>”. The types of memory in dotnet are stack and .NET heap. In the dotnet world, we do not need to bother with memory allocation/deallocation because these routines are handled by .NET runtime and garbage collector. Memory management of dotnet somehow needs to know what to allocate, where, and how; the same goes for deallocation/freeing of memory. Allocation on the .NET heap occurs once we talk about reference types inheriting from&nbsp;<code>System.Object</code>&nbsp;(<em><strong>class, object, string…</strong></em>). These objects are saved on the .NET heap, and for the purpose of their automatic management, they are accompanied by certain metadata information such as their type, references, and size. Even better, the automatic memory deallocation of no longer referenced objects does not occur immediately &#8211; the garbage collector takes care of this in some time intervals, which could be several minutes. Particular objects like “<em><strong>static objects</strong></em>” survive garbage collections and live till the application ends.</p>



<p>This means that if we could enumerate objects on the .NET heap, we could also get information related to their types and size that can serve for their appropriate reconstruction. Creating this kind of tool would be very likely time-consuming, but luckily for us, there is already created dotnet process and crash dump introspection open-source library&nbsp;<a href="https://github.com/microsoft/clrmd">ClrMD</a>&nbsp;<code>Microsoft.Diagnostics.Runtime</code>&nbsp;developed by Microsoft that could be used precisely for object reconstruction from .NET heap. Why is that so important?</p>



<p>In a certain moment of dotRunpeX execution, embedded payload, procexp driver, and some kind of config must appear in a decrypted state. Their content will likely be assigned to some object allocated on the .NET heap. For these, we could expect byte array&nbsp;<code>byte[]</code>&nbsp;or&nbsp;<code>string</code>. That also means that if we could control the execution of dotRunpeX and suspend it in a state we assume to be the right moment for those object reconstructions, we would be able to get all that we need in a decrypted state.</p>



<p>One of the right moments for suspending and introspecting the dotRunpeX process could be an invocation of WIN API&nbsp;<code>CreateProcessW</code>&nbsp;used for Process Hollowing. This was approved to be the correct assumption and led us to develop the hooking library “<em><strong>CProcessW_Hook</strong></em>” exactly for this purpose.</p>



<h2 class="wp-block-heading">CProcessW_Hook</h2>



<p>Native hooking library using&nbsp;<a href="https://github.com/TsudaKageyu/minhook">minhook</a>&nbsp;framework (The Minimalistic x86/x64 API Hooking Library for Windows). The code provided below serves the purpose of hooking the WIN API function&nbsp;<code>CreateProcessW</code>, which is used in the dotRunpeX injector for process creation that is later used as a target for code injection (<em><strong>PE Hollowing</strong></em>). Once the&nbsp;<code>CreateProcessW</code>&nbsp;function is hooked and called in the target process, the whole process gets suspended to introspect. Certain process creations are filtered (powershell, conhost) as they can be spawned for other functionalities of dotRunpeX according to config (example modification of Windows Defender settings). We need to suspend the process only in a state before performing code injection (where all required objects are already decrypted on the .NET heap).</p>



<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">#include &lt;windows.h>
#include &lt;string.h>
#include "pch.h"
#include "MinHook.h"

#pragma warning(disable : 4996)

#if defined _M_X64
#pragma comment(lib, "libMinHook.x64.lib")
#elif defined _M_IX86
#pragma comment(lib, "libMinHook.x86.lib")
#endif

typedef LONG (__stdcall* NTSUSPENDPROCESS)(HANDLE ProcessHandle);
typedef BOOL (__stdcall* CREATEPROCESSW)(LPCWSTR, LPCWSTR, LPSECURITY_ATTRIBUTES, LPSECURITY_ATTRIBUTES, BOOL, DWORD, LPVOID, LPCWSTR, LPSTARTUPINFOW, LPPROCESS_INFORMATION);

CREATEPROCESSW fpCreateProcessW = NULL;

__declspec(dllexport) void __cdecl Decoy() 
{
    Sleep(1000);
}

int __stdcall DetourCreateProcessW(LPCWSTR lpApplicationName, LPWSTR lpCommandLine, LPSECURITY_ATTRIBUTES lpProcessAttributes, LPSECURITY_ATTRIBUTES lpThreadAttributes, BOOL bInheritHandles, DWORD dwCreationFlags, LPVOID lpEnvironment, LPCWSTR lpCurrentDirectory, LPSTARTUPINFOW lpStartupInfo, LPPROCESS_INFORMATION lpProcessInformation)
{
    LPCWSTR ignoredProcess[2] = { L"powershell", L"conhost" };
    for (int i = 0; i &lt; 2; i++)
    {
        if (wcsstr(_wcslwr(lpApplicationName), ignoredProcess[i]))
        {
            return fpCreateProcessW(lpApplicationName, lpCommandLine, lpProcessAttributes, lpThreadAttributes, bInheritHandles, dwCreationFlags, lpEnvironment, lpCurrentDirectory, lpStartupInfo, lpProcessInformation);
        }
    }

    HMODULE hNtdll = GetModuleHandleA("ntdll.dll");
    if (!hNtdll)
    {
        ExitProcess(0);
    }
    NTSUSPENDPROCESS NtSuspendProcess = (NTSUSPENDPROCESS)GetProcAddress(hNtdll, "NtSuspendProcess");
    if (!NtSuspendProcess)
    {
        CloseHandle(hNtdll);
        ExitProcess(0);
    }
    HMODULE cProcess = GetCurrentProcess();
    if (!cProcess) 
    {
        CloseHandle(hNtdll);
        ExitProcess(0); 
    }
    NtSuspendProcess(cProcess);
    ExitProcess(0);
    return  1;
}

BOOL APIENTRY DllMain(HMODULE hModule, DWORD  ul_reason_for_call, LPVOID lpReserved)
{
    switch (ul_reason_for_call)
    {
        case DLL_PROCESS_ATTACH:
            if (MH_Initialize() != MH_OK)
            {
                return 1;
            }
            if (MH_CreateHook(&amp;CreateProcessW, &amp;DetourCreateProcessW, (LPVOID*)(&amp;fpCreateProcessW)) != MH_OK)
            {
                return 1;
            }
            if (MH_EnableHook(&amp;CreateProcessW) != MH_OK)
            {
                return 1;
            }
        case DLL_THREAD_ATTACH:
        case DLL_THREAD_DETACH:
        case DLL_PROCESS_DETACH:
            break;
    }
    return TRUE;
}</pre>



<p>We could see that all hooking logic is executed right upon loading this library inside the function&nbsp;<code>DllMain()</code>. Another important thing to note is that we defined the export function&nbsp;<code>Decoy()</code>, which won’t be ever executed or called but is needed later on for our preinjection technique.</p>



<p>With the hooking library “<em><strong>CProcessW_Hook.dll</strong></em>” in its place, we can move on to create an injector and extractor. This points to the main tool provided below &#8211; dotRunpeX extractor “<em><strong>Invoke-DotRunpeXextract</strong></em>”.</p>



<h2 class="wp-block-heading">Invoke-DotRunpeXextract</h2>



<p>PowerShell module that enables the extraction of payload, procexp driver, and config from dotRunpeX. The tool is written in PowerShell scripting language using preinjection of native hooking library “<em><strong>CProcessW_Hook.dll</strong></em>” (using&nbsp;<a href="https://github.com/Washi1337/AsmResolver">AsmResolver</a>) and .NET objects reconstruction from .NET heap (using&nbsp;<a href="https://github.com/microsoft/clrmd">ClrMD</a>). It uses a dynamic approach for extraction, so samples are executed in a managed way (<em><strong><mark style="background-color:rgba(0, 0, 0, 0)" class="has-inline-color has-vivid-red-color">use only in VM</mark></strong></em>). Using PowerShell 7.3+, clrMD v2.2.343001 (net6.0), AsmResolver v5.0.0 (net6.0).</p>



<p>We provide two versions of this tool that can be downloaded along with the hooking library in the last section of this article. One is created multi-threaded as a PowerShell module for the best performance and usage. The second version of this tool is a single-threaded script with the same functionality that could be used for simple debugging and troubleshooting and can more easily serve to create several snippets with similar functionality.</p>



<p>The whole code of this PowerShell module is annotated and commented on in a way to be easy to understand its core features. We will briefly describe the core functionality of this tool, like the preinjection technique of the hooking library using AsmResolver and implemented logic behind the extraction.</p>



<p>At first, this tool modifies the PE structure of dotRunpeX using AsmResolver. AsmResolver is well known for its capability to inspect dotnet executables and their related metadata, but it also allows access to low-level structures of PE to modify them. These PE structure modifications are used to implement our so-called PoC technique for the purpose of dll preinjection to a 64-bit dotnet executable. We are talking about adding a new import entry for the native hooking library into the .NET Assembly. Since dotRunpeX is a 64-bit executable, and it turned out that, unlike the 32-bit dotnet executables, the 64-bit ones don’t even have an import directory, we started building one from scratch right inside the function&nbsp;<code>PatchBinaryWithDllInjection()</code>. In this function, we can see that we are creating new data sections,&nbsp;<code>.idata</code>&nbsp;and&nbsp;<code>.data</code>, where our newly built IDT (<em><strong>Import Directory Table</strong></em>) and IAT (<em><strong>Import Address Table</strong></em>) will be placed. To get our hooking library “<em><strong>CProcessW_Hook.dll</strong></em>” preinjected right upon process start and let the windows loader do for us the hard work, we are creating an import entry with exported function&nbsp;<code>Decoy()</code>&nbsp;that was defined in the hooking library. As we are dealing with dotnet and adding native import,&nbsp;<strong>IL Only</strong>&nbsp;flag inside the .NET Directory is not true anymore and needs to be patched.</p>



<p></p>



<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">function PatchBinaryWithDllInjection($pathToSample, $patchedSample, $dllHookingName) 
{
    # Exported function name "Decoy" from hooking library will be used for Import Directory creation 
    $symbolNameToImport = [AsmResolver.PE.PEImage]::FromFile($dllHookingName).Exports.Entries[0].Name # Decoy
    # We need to work with pefile layer to expose sections - creation of Import Directory and IAT
    $pefile = [AsmResolver.PE.File.PEFile]::FromFile($pathToSample)

    # Creation of Import Directory from scratch
    $impDirBuff = [AsmResolver.PE.Imports.Builder.ImportDirectoryBuffer]::new($false)
    $impModule = [AsmResolver.PE.Imports.ImportedModule]::new($dllHookingName)
    $symbol = [AsmResolver.PE.Imports.ImportedSymbol]::new(0,$symbolNameToImport)
    $impModule.Symbols.Add($symbol)
    $impDirBuff.AddModule($impModule)

    # Creation of ".idata" section where Import Directory will be placed
    $idataSection = [AsmResolver.PE.File.PESection]::new(".idata", [AsmResolver.PE.File.Headers.SectionFlags]::MemoryRead -bor [AsmResolver.PE.File.Headers.SectionFlags]::ContentInitializedData)
    $idataSection.Contents = $impDirBuff
    $pefile.Sections.Add($idataSection)

    # Creation of ".data" section where IAT will be placed
    $dataSection = [AsmResolver.PE.File.PESection]::new(".data", [AsmResolver.PE.File.Headers.SectionFlags]::MemoryRead -bor [AsmResolver.PE.File.Headers.SectionFlags]::MemoryWrite -bor [AsmResolver.PE.File.Headers.SectionFlags]::ContentInitializedData)
    $dataSection.Contents = $impDirBuff.ImportAddressDirectory
    $pefile.Sections.Add($dataSection)

    # Remove ASLR (no reloc)
    $pefile.OptionalHeader.DllCharacteristics = $pefile.OptionalHeader.DllCharacteristics -bxor [AsmResolver.PE.File.Headers.DllCharacteristics]::DynamicBase
    # Update offsets and RVA of newly created data sections (so we can work with them later on)
    $pefile.UpdateHeaders()

    # Update info about new data directories in context of pefile - Import Directory, IAT
    $pefile.OptionalHeader.DataDirectories[[AsmResolver.PE.File.Headers.DataDirectoryIndex]::ImportDirectory] = [AsmResolver.PE.File.Headers.DataDirectory]::new($idataSection.Rva, $idataSection.GetPhysicalSize())
    $pefile.OptionalHeader.DataDirectories[[AsmResolver.PE.File.Headers.DataDirectoryIndex]::IatDirectory] = [AsmResolver.PE.File.Headers.DataDirectory]::new($dataSection.Rva, $dataSection.GetPhysicalSize())
    $pefile.Write($patchedSample)

    # We need to do some custom patching of IL only flag inside .NET Directory (it is easier than making custom writer preserving all PE sections and meta) - we are adding native imports so IL only is not true anymore
    $dotnetDirectoryRVA = $pefile.OptionalHeader.DataDirectories[[AsmResolver.PE.File.Headers.DataDirectoryIndex]::ClrDirectory].VirtualAddress
    $dotnetDirectoryFileOffset = $pefile.RvaToFileOffset($dotnetDirectoryRVA)
    $dotnetDirectoryILFlagsFileOffset = $dotnetDirectoryFileOffset + 16
    $filestream = [System.IO.FileStream]::new($patchedSample, [System.IO.FileMode]::Open, [System.IO.FileAccess]::ReadWrite)
    $filestream.Position = $dotnetDirectoryILFlagsFileOffset
    $filestream.Write([byte[]]::new(4), 0, 4) # Wipe the IL only flags
    $filestream.Close()   
}</pre>



<p></p>



<p>A comparison of the dotRunpeX sample before and after the described modification of the PE structure can be seen in the picture below.</p>


<div class="wp-block-image">
<figure class="aligncenter size-large"><img loading="lazy" decoding="async" width="1024" height="509" src="https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId211-1-1024x509.png" alt="" class="wp-image-27712" srcset="https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId211-1-1024x509.png 1024w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId211-1-300x149.png 300w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId211-1-768x382.png 768w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId211-1.png 1054w" sizes="(max-width: 1024px) 100vw, 1024px" /><figcaption class="wp-element-caption">Figure 50: PE structure of the dotRunpeX sample before and after modification used for dll preinjection</figcaption></figure></div>


<p>Now, we get to the state where our modified binary could be executed. With the hooking library in its place, the dotRunpeX process gets suspended right during the call to WIN API&nbsp;<code>CreateProcessW</code>. This exact routine is implemented in the function&nbsp;<code>StartProcessWaitSuspended()</code>.</p>



<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">function StartProcessWaitSuspended($patchedSample)
{
    $process = [System.Diagnostics.Process]::Start($patchedSample)
    while ($process.Threads.Where{$_.ThreadState -ne [System.Diagnostics.ThreadState]::Wait -and $_.WaitReason -ne [System.Diagnostics.ThreadWaitReason]::Suspended}) 
    {
        Start-Sleep -Milliseconds 500
        $process.Refresh()
    }
    return $process  
}</pre>



<p>Once the process is suspended, it is ready to be introspected. The whole logic behind the introspection of the dotRunpeX process can be seen in the function&nbsp;<code>GetPayloadAndConfig()</code>. In this function, we use the clrMD library to attach to the desired process and enumerate all&nbsp;<code>System.Byte[]</code>&nbsp;objects that are currently allocated on the .NET heap. To reconstruct the payload intended to be injected, we have implemented some dummy logic to find byte array objects larger than 1KB and starting with the “<em><strong>MZ</strong></em>” header. Despite the fact how it sounds, it has proven to be enough to fulfill our needs.</p>



<p>The logic behind finding the object corresponding to the process explorer driver and config is slightly different. First of all, the procexp driver and constants related to the config are saved in the same object. We assume that this is a result of the combination of usage KoiVM virtualizer and ConfuserEx obfuscator together as ConfuserEx usually puts defined constants to one blob of byte array and resolves them during the runtime once they are needed. After the logic finds this kind of byte blob, it separates the process explorer driver and config and pushes the config for further processing.</p>



<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">function GetPayloadAndConfig($process) 
{   # DataTarget is our suspended process
    $dataTarget = [Microsoft.Diagnostics.Runtime.DataTarget]::AttachToProcess($process.Id, $false)  
    Start-Sleep -Seconds 1 # Better to wait for ClrMD - to properly initialize DataTarget 
    $clrInfo = $dataTarget.ClrVersions[0]
    $clrRuntime = $clrInfo.CreateRuntime()
    
    # Getting all byte array objects from .NET Heap and sort them by size descending
    $objects = $clrRuntime.Heap.EnumerateObjects().ToArray().Where{$_.Type.Name -eq "System.Byte[]"} | Sort-Object -Property Size -Descending
    # Find payload to be injected - should be the largest byte array containing PE
    $payload = @()
    foreach ($object in $objects)
    {   
        # Check if byte array possible valid PE
        if($object.AsArray().Length -gt 1024)
        {
            if((Compare-Object ($object.AsArray().ReadValues[byte](0,2)) ([byte[]] 0x4d,0x5a)).Length -eq 0)
            {
                $payload = $object.AsArray().ReadValues[byte](0, $object.AsArray().Length)
                break
            }
        }
    }
    if(-not $payload){Write-Host "Payload to be injected NOT found in sample:"$process.MainModule.ModuleName"!!!" -ForegroundColor Red}
    
    # Find procexp driver + config (first 8 bytes of byte array skipped -> should be related to procexp PE size)
    $procexpAndConfig = @()
    foreach ($object in $objects)
    {   
        # Check if byte array possible procexp PE and config
        if($object.AsArray().Length -gt 1024)
        {
            if((Compare-Object ($object.AsArray().ReadValues[byte](8,2)) ([byte[]] 0x4d,0x5a)).Length -eq 0)
            {
                $procexpAndConfig = $object.AsArray().ReadValues[byte](0, $object.AsArray().Length)
                break
            }
        }
    }
    if(-not $procexpAndConfig)
    {
        Write-Host "Procexp driver + config NOT found in sample:"$process.MainModule.ModuleName"!!!" -ForegroundColor Red
        $procexp = $null
        $config = $null
        return $payload, $procexp, $config
    }   
    # Process procexp and config
    $procexpSize = [bitconverter]::ToInt32($procexpAndConfig[4..7], 0)
    $procexp = $procexpAndConfig[8..($procexpSize+7)]
    $config = $procexpAndConfig[($procexpSize +8)..$procexpAndConfig.Length]
    
    return $payload, $procexp, $config
}
</pre>



<p>The so-called config is actually a bunch of constants where some of them serve as a configuration of dotRunpeX. This config needs to be parsed in the function&nbsp;<code>ParseConfig()</code>&nbsp;as it appears to be in some kind of structure where every string is preceded with its length and if needed, padded to have length divisible by 4, as shown in the picture below.</p>


<div class="wp-block-image">
<figure class="aligncenter size-large"><img loading="lazy" decoding="async" width="1024" height="233" src="https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId214-1024x233.png" alt="" class="wp-image-27713" srcset="https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId214-1024x233.png 1024w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId214-300x68.png 300w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId214-768x175.png 768w, https://research.checkpoint.com/wp-content/uploads/2023/03/KSIHA4X3CW-rId214.png 1218w" sizes="(max-width: 1024px) 100vw, 1024px" /><figcaption class="wp-element-caption">Figure 51: Unparsed config structure</figcaption></figure></div>


<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">function ParseConfig($config)
{
    $memStream = [System.IO.MemoryStream]::new($config, $true)
    $strLength = [byte[]]::new(4)
    $parsedConfig = ""

    while ($memStream.Position -lt $memStream.Length) 
    {
        $memStream.Read($strLength, 0, 4) | Out-Null
        $length = [bitconverter]::ToInt32($strLength, 0)
        $buffer = [byte[]]::new($length)
        $memStream.Read($buffer , 0, $length) | Out-Null
        $parsedConfig += [System.Text.Encoding]::UTF8.GetString($buffer) + "`n"
        if(($memStream.Position % 4) -ne 0)
        {
            $memStream.Position += 4 - ($memStream.Position % 4)
        }
    }
    $memStream.Close()
    return $parsedConfig
}</pre>



<p>Once we have properly parsed the config, it is saved with extracted payload and process explorer driver, the suspended process gets killed, and the modified dotRunpeX sample is removed.</p>



<p>Example execution of “<em><strong>Invoke-DotRunpeXextract</strong></em>” and mass processing of samples could be seen below (2min GIF):</p>


<div class="wp-block-image">
<figure class="aligncenter size-full"><img loading="lazy" decoding="async" width="1922" height="1032" src="https://research.checkpoint.com/wp-content/uploads/2023/03/rId217.gif" alt="" class="wp-image-27714"/></figure></div>


<p>Figure 52: Execution of “<em><strong>Invoke-DotRunpeXextract</strong></em>” (2min GIF)</p>



<p>As pointed out before, “<em><strong>Invoke-DotRunpeXextract</strong></em>” will produce a payload to be injected, procexp driver, and parsed constants values where some of them could be referred to as&nbsp;<strong>config</strong>. Example config file content for our analyzed sample of the dotRunpeX:</p>



<pre class="EnlighterJSRAW" data-enlighter-language="raw" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">False
True
SOFTWARE\Microsoft\Windows\CurrentVersion\Run
C14615024653444192E5F79157E215D3
"
I_LOVE_HENTAIU2
C:\Windows\Microsoft.NET\Framework\v4.0.30319\InstallUtil.exe
Error
2345RTProtect
2345SafeCenterSvc
2345SafeSvc
2345SafeTray
kxetray
kxescore
kxemain
kwsprotect64
kscan
HipsTray
HipsDaemon
360sd
360rp
QQPCTray
QQPCRTP
360tray
360leakfixer
360Safe
ZhuDongFangYu
MultiTip
AvastSvc
sched
avp
McSvHost
avconfig
bdagent
MsMpEng
wireshark
MpCmdRun
ndd32
nod32
nod32krn
eguiProxy
ekrn
Software\Classes\ms-settings\shell\open\command
DelegateExecute
cmd.exe
/C computerdefaults.exe
Run without emulation
Select * from Win32_ComputerSystem
Manufacturer
microsoft corporation
Model
VIRTUAL
vmware
VirtualBox
This file can't run into Virtual Machines.
root\CIMV2
SELECT * FROM Win32_VideoController
Name
VMware
VBox
Run using valid operating system
SbieDll.dll
USER
SANDBOX
VIRUS
MALWARE
SCHMIDTI
CURRENTUSER
\VIRUS
SAMPLE
C:ile.exe
Afx:400000:0
HARDWARE\DEVICEMAP\Scsi\Scsi Port 0\Scsi Bus 0\Target Id 0\Logical Unit Id 0
Identifier
VBOX
HARDWARE\Description\System
SystemBiosVersion
VideoBiosVersion
VIRTUALBOX
SOFTWARE\Oracle\VirtualBox Guest Additions
noValueButYesKey
C:\WINDOWS\system32\drivers\VBoxMouse.sys
VMWARE
SOFTWARE\VMware, Inc.\VMware Tools
HARDWARE\DEVICEMAP\Scsi\Scsi Port 1\Scsi Bus 0\Target Id 0\Logical Unit Id 0
HARDWARE\DEVICEMAP\Scsi\Scsi Port 2\Scsi Bus 0\Target Id 0\Logical Unit Id 0
SYSTEM\ControlSet001\Services\Disk\Enum
0
SYSTEM\ControlSet001\Control\Class\{4D36E968-E325-11CE-BFC1-08002BE10318}\0000
DriverDesc
SYSTEM\ControlSet001\Control\Class\{4D36E968-E325-11CE-BFC1-08002BE10318}\0000\Settings
Device Description
InstallPath
C:\PROGRAM FILES\VMWARE\VMWARE TOOLS\
C:\WINDOWS\system32\drivers\vmmouse.sys
C:\WINDOWS\system32\drivers\vmhgfs.sys
kernel32.dll
wine_get_unix_file_name
QEMU
\\.\ROOT\cimv2
Description
VM Additions S3 Trio32/64
S3 Trio32/64
VirtualBox Graphics Adapter
VMware SVGA II
noKey
Fatal 'Error
C:\windows\system32\cmd.exe
/K "fodhelper.exe"
C:\windows\temp
\
.inf
REPLACE_COMMAND_LINE
/au 
cmstp
{ENTER}
[version]
Signature=$chicago$
AdvancedINF=2.5
[DefaultInstall]
CustomDestination=CustInstDestSectionAllUsers
RunPreSetupCommands=RunPreSetupCommandsSection
[RunPreSetupCommandsSection]
; Commands Here will be run Before Setup Begins to install
REPLACE_COMMAND_LINE
taskkill /IM cmstp.exe /F
[CustInstDestSectionAllUsers]
49000,49001=AllUSer_LDIDSection, 7
[AllUSer_LDIDSection]
"HKLM", "SOFTWARE\Microsoft\Windows\CurrentVersion\App Paths\CMMGR32.EXE", "ProfileInstallPath", "%UnexpectedError%", ""
[Strings]
ServiceName="CorpVPN"
ShortSvcName="CorpVPN"
c:\windows\system32\cmstp.exe
Windows 1
Windows 8
Windows 7
fodhelper
Software\Classes\exefile\shell\open\command
slui
Software\Classes\mscfile\shell\open\command
eventvwr
HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion
ProductName
HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Notifications\Settings\Windows.SystemToast.SecurityAndMaintenance
Enabled
HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System
EnableLUA
powershell
Software\Classes\Folder\shell\open\command
SOFTWARE\Microsoft\Windows Defender\Exclusions\Paths
Add-MpPreference -ExclusionPath "
" -Force
Иисус.sys
\Registry\Machine\System\CurrentControlSet\Services\TaskKill
System\CurrentControlSet\Services\TaskKill
\??\
Type
ErrorControl
Start
ImagePath
\\.\
SeDebugPrivilege
SeLoadDriverPrivilege
\KnownDlls\
ntdll.dll
ZwOpenSection
ZwMapViewOfSection
NtClose
ZwUnmapViewOfSection
MZ
_4
BIDEN_HARRIS_PERFECT_ASSHOLE
</pre>



<p>We can easily spot configuration strings related to persistence settings, resource name and its decryption key (where .NET resource contains payload to be injected), target binary for the payload to be injected in, Anti-Malware service names to be killed, UAC bypass, Anti-VM, Anti-Sandbox, procexp driver installation path and its name, etc.</p>



<p>We provide two versions of this tool that can process just one sample or mass-process the directory of samples. For the best performance, the multi-threaded PowerShell module is recommended use. Still, for troubleshooting, simple modification, and easy debugging, we are also providing a single-threaded script with the same functionality as we expect soon some modification in dotRunpeX code where appropriate changes in the code of the tool or hooking library would be needed.</p>



<h1 class="wp-block-heading">Conclusion</h1>



<p>By monitoring this new threat for several months, we got deep insight into its evolution, delivery methods, and how it was abused to deliver a wide scale of different malware families.</p>



<p>Over time, we consider dotRunpeX to be in high development adding new features on regular bases and getting more popularity and attention every day. Because of the rising usage of this injector, we developed and provided several tools to automate the analysis of this virtualized dotnet code.</p>



<p>Some of the developed tools described in this report introduced PoC methods and can serve for developing other tools with similar functionality. We showed how open-source libraries such as AsmResolver and clrMD could be used in a real-world example to support the research and to help with the reverse engineering of protected code.</p>



<p>In this report, we provided an in-depth analysis of both versions of the dotRunpeX injector, the similarities between them, and described the main interesting techniques they use, such as abuse of the vulnerable process explorer driver, code virtualization caused by the usage of KoiVM protector, modification of D/Invoke framework with decoy syscall patching.</p>



<p>Our analysis and conclusions are based on dozens of campaigns we spotted in the wild and hundreds of samples that were mass processed.</p>



<p>Because of the high development of dotRunpeX, we believe that provided tools would need some modification soon as a reaction to changes in dotRunpeX. Still, with provided source codes, it should be relatively easy to work around these changes for other researchers.</p>



<p><strong>Check Point customers remain protected from the threats described in this blog</strong>, including all its variants.&nbsp;<em>Check Point’s&nbsp;<a href="https://www.checkpoint.com/infinity/zero-day-protection/">Threat Emulation</a></em>&nbsp;<em>protects networks against unknown threats in web downloads and e-mail attachments. The Threat Emulation engine picks up malware at the initial phase before it enters the network. The engine quickly quarantines and runs the files in a virtual sandbox environment, which imitates a standard operating system, to discover malicious behavior at the exploit phase.</em></p>



<p><em><a href="https://www.checkpoint.com/harmony/anti-phishing/">Harmony Email &amp; Office</a>&nbsp;deploys between the inbox and its native security. The solution secures inbound, outbound, and internal email from phishing attacks that evade platform-provided solutions and email gateways. It works with these other solutions and doesn’t require any MX record changes that broadcast security protocols to hackers.</em></p>



<h1 class="wp-block-heading">IOCs</h1>



<figure class="wp-block-table"><table><thead><tr><th>SHA256 Hash</th><th>Version</th><th>Malware family of embedded payload</th></tr></thead><tbody><tr><td>1e7614f757d40a2f5e2f4bd5597d04878768a9c01aa5f9f23d6c87660f7f0fbc</td><td>OLD</td><td>Lokibot</td></tr><tr><td>68ae2ee5ed7e793c1a49cbf1b0dd7f5a3de9cb783b51b0953880994a79037326</td><td>OLD</td><td>Lokibot</td></tr><tr><td>317e6817bba0f54e1547dd9acf24ee17a4cda1b97328cc69dc1ec16e11c258fc</td><td>OLD</td><td>Redline</td></tr><tr><td>65cac67ed2a084beff373d6aba6f914b8cba0caceda254a857def1df12f5154b</td><td>OLD</td><td>SnakeKeylogger</td></tr><tr><td>81763d8e3b42d07d76b0a74eda4e759981971635d62072c8da91251fc849b91e</td><td>OLD</td><td>SnakeKeylogger</td></tr><tr><td>0e11704fcc3c36832ba98b80ea44a3013660d1ed3fb48158b982fed9f9050391</td><td>NEW</td><td>AgentTesla</td></tr><tr><td>0f9e27ec1ed021fd7375ca46f233c06b354d12d57aed44132208cd9308bfee11</td><td>NEW</td><td>AgentTesla</td></tr><tr><td>881a337aa85a4b01c08706ab941573c5dc9b76ea0e4e1c2693a9b4aa4453ec8c</td><td>NEW</td><td>AgentTesla</td></tr><tr><td>feae44d8927dd41feaed997b3dbf7b41933496d6285b79554b83e72ae8a045c4</td><td>NEW</td><td>AgentTesla</td></tr><tr><td>1c1fcc4133af77f07d0c0299d0320aa9f447748ebead74b429f73c44d950e38b</td><td>NEW</td><td>AgentTesla</td></tr><tr><td>35c11f7315d2e5d04d783de4314d8cde2def382f1e3fc49ccc555337c54d63cc</td><td>NEW</td><td>AgentTesla</td></tr><tr><td>4068637c121888476533a3bbb16bec6bc3b4f81f7b9de635ef3576d56dc54c75</td><td>NEW</td><td>AgentTesla</td></tr><tr><td>40df5a6e6dcadbe576ce4a8b01cfb82bf3f56a87bae674200e60814eab666c6d</td><td>NEW</td><td>AgentTesla</td></tr><tr><td>8a0d6e40e545d40956194230f03608859f2a47420a9b11b199142641bc6419ee</td><td>NEW</td><td>AgentTesla</td></tr><tr><td>7c3803c09a0370aa6484d8ad2f5690b96212d98e45fc8f9cb6022f87dff637fc</td><td>NEW</td><td>AgentTesla</td></tr><tr><td>93e2ea6f021951369028b73637d9558c8baf3c99d9de1a2a60c1461cb9d571bf</td><td>NEW</td><td>AgentTesla</td></tr><tr><td>d95298befdde567b31571d16f327840fa0f0dd9c54bf876531820910418a52b6</td><td>NEW</td><td>AgentTesla</td></tr><tr><td>149af913afd7eb2773386d14e88a46449cbc9096e0748cfbaa2e061b59525bf0</td><td>NEW</td><td>AgentTesla</td></tr><tr><td>a73f134ab62a5c23a8c8bafabbfbd5e0408c826ba5418488639724708ec5ef28</td><td>NEW</td><td>AgentTesla</td></tr><tr><td>aca4d6278f31f374262e0388d16ee6fdcdbbad8257374f1feaabf75b0ec23157</td><td>NEW</td><td>AgentTesla</td></tr><tr><td>50451fda27fd8569c7b32bfe82197b82a8637cac928164e1b091a389060e957e</td><td>NEW</td><td>AgentTesla</td></tr><tr><td>9ed8eeb1db8909c96a958d91213093d2488dc172a8d22ba62657b9bfeb044fec</td><td>NEW</td><td>AgentTesla</td></tr><tr><td>6c08c0654726c2f793b5191d5e7c74fdf3a2461118a45aa8527a0a30e3f256fd</td><td>NEW</td><td>AgentTesla</td></tr><tr><td>283cd48dc1368b6852c2f3168bf7a78ad593df010d9a67ed1c938508da5de783</td><td>NEW</td><td>AgentTesla</td></tr><tr><td>b019a0535ca7466d7884825542ac6910fe037913118e1136dcac7e9ef3dc0dc9</td><td>NEW</td><td>AgentTesla</td></tr><tr><td>b1c9b356c50230629c4697b0527fd7a0fa8d6f0e8342a1eb5b5a4f90d8f0eb86</td><td>NEW</td><td>AgentTesla</td></tr><tr><td>5bbd9513f0872d23ca43dd553a63a12882be274fef983fab427721257d60eaec</td><td>NEW</td><td>AgentTesla</td></tr><tr><td>9d9940b60809e3c10cd4540f8e589626a293244a999bea16c259f9712969a742</td><td>NEW</td><td>AgentTesla</td></tr><tr><td>cd4c821e329ec1f7bfe7ecd39a6020867348b722e8c84a05c7eb32f8d5a2f4db</td><td>NEW</td><td>AgentTesla</td></tr><tr><td>cddf8b8da972cb2e560c70d01366f582445441864fcff884b8194eb6c21a768c</td><td>NEW</td><td>AgentTesla</td></tr><tr><td>6c367333c677c2268df9deaff6ad4e711e73e53504aa1aa845bebfbfe635f1d2</td><td>NEW</td><td>ArrowRAT</td></tr><tr><td>5e3588e8ddebd61c2bd6dab4b87f601bd6a4857b33eb281cb5059c29cfe62b80</td><td>NEW</td><td>AsyncRat</td></tr><tr><td>244f2d4f3c34d00babef5f1765e91c0abda9dbd1d131fc93ecb48c91ecc801a8</td><td>NEW</td><td>AsyncRat</td></tr><tr><td>95793df9284fe35c0491e5cfa36bc8f49fd426ccdf35f5fe2f098e07d160a4dc</td><td>NEW</td><td>AveMaria/WarzoneRAT</td></tr><tr><td>55ee7efcb3d1d2e0eac0ecadd651d6a299de82d94347ef9862bc981ae619532b</td><td>NEW</td><td>BitRAT</td></tr><tr><td>13081992c0ef5c52c2b6224f3ff1ab38160bca9424e7c0470e0c175c920bdc9d</td><td>NEW</td><td>Cryptocurrency Stealer</td></tr><tr><td>0daef2c2bf086312037ebc91beec0302a7e4d1750f260d02bf815bd13c611559</td><td>NEW</td><td>Downloader</td></tr><tr><td>331ad58c524100da7e459e5c3943e970414617f60b3ed0f1a74f3bf189aafea7</td><td>NEW</td><td>Downloader</td></tr><tr><td>44a11146173db0663a23787bffbb120f3955bc33e60e73ecc798953e9b34b2f2</td><td>NEW</td><td>Downloader</td></tr><tr><td>03fcbab82603df2858f7d6fefdb6ae3cc8e17393af6d44f24634d28fccf3f181</td><td>NEW</td><td>Formbook</td></tr><tr><td>373a86e36f7e808a1db263b4b49d2428df4a13686da7d77edba7a6dd63790232</td><td>NEW</td><td>Formbook</td></tr><tr><td>50ec8a9e59e1bcb0a41477e20f5bb809a80329d56e20cf99e93d756b9e0ceefc</td><td>NEW</td><td>Formbook</td></tr><tr><td>41ea8f9a9f2a7aeb086dedf8e5855b0409f31e7793cbba615ca0498e47a72636</td><td>NEW</td><td>Formbook</td></tr><tr><td>76e129552a30fa5c914d9f946f40b2ec2bbbbeb4e5e2f324e70455725030e157</td><td>NEW</td><td>Formbook</td></tr><tr><td>8fa81f6341b342afa40b7dc76dd6e0a1874583d12ea04acf839251cb5ca61591</td><td>NEW</td><td>Formbook</td></tr><tr><td>ae4f3b6c43d5ea8ee68d862362d4e8d7b317889eb9abead948a9b791ad9d7071</td><td>NEW</td><td>Formbook</td></tr><tr><td>b4c876d1797efbef614b44e52482c835c32e8ee020975a30fa2d25ed9cf8aa2b</td><td>NEW</td><td>Formbook</td></tr><tr><td>d5eda02ff2f05d1e0d06a69018de463ab36497048a1ef2b69af93aa76ccfc07d</td><td>NEW</td><td>Formbook</td></tr><tr><td>fa3a9fc2adf9d1ca812e0951e21bf72ba3ec9ceb1c0cf0bfc0171b6d4adadf83</td><td>NEW</td><td>Formbook</td></tr><tr><td>1f2ffabb3b89e6083ca5de70f5d718295c7a633c2d957da7c4469de059efde2c</td><td>NEW</td><td>Formbook</td></tr><tr><td>bd133efea4b865f42eb05e0c92e3ab3b58ac087c0682ea9112b96596a7111ff6</td><td>NEW</td><td>Formbook</td></tr><tr><td>e6da2d860bd2d0e8b56737b4c8c47cdeea78a404cd0d6fa5a26cbb5ac7682d1d</td><td>NEW</td><td>Formbook</td></tr><tr><td>d87a200a26d07a64272e93fb3ae8f8d9e4d34bdfedb0cf7c685a6c97912e967f</td><td>NEW</td><td>LgoogLoader</td></tr><tr><td>7120cf1ad3fdcae7ba6956749a8988e8181837a05948b432cec6ae11229b1d12</td><td>NEW</td><td>LgoogLoader</td></tr><tr><td>304847c69875ec59995fbb453f8d1106f80c5eb380ae6b8676e76f5372290194</td><td>NEW</td><td>NetWire</td></tr><tr><td>25fbe0ff3274b4bc981fa6ec0459e9b95cec6397194e10ea6287bf4b899a9b07</td><td>NEW</td><td>PrivateLoader</td></tr><tr><td>1bc7fc0a4796f7780223b4f0bf8d6816b3721f0b52eedc0df9a32dc4ea4829e8</td><td>NEW</td><td>PrivateLoader</td></tr><tr><td>75236a06aadafc69cc5aa8032468869fb868a9a100b687f19c66be03410c2487</td><td>NEW</td><td>PrivateLoader</td></tr><tr><td>ee0d55b9a2d03c5bea9f69f98b042ab7b3064366f335a8a53096387876bf48d7</td><td>NEW</td><td>PrivateLoader</td></tr><tr><td>8de23e90bac05911cbfb6b036c6808ce7c244e4e875cb7edcdb90f75e89e5476</td><td>NEW</td><td>PrivateLoader</td></tr><tr><td>10bbfa36ddd8ea6038e2071320ee84f7a9208a5be3a4dda448e83393cdf39a4d</td><td>NEW</td><td>PrivateLoader</td></tr><tr><td>ff72f619907a25f3d99f0c3aa84710c6ff6cb4c3fd8ebad14f85f96c6da49222</td><td>NEW</td><td>PrivateLoader</td></tr><tr><td>242e1c82269725c01108e52376be8ddad39ab29da49356d10e527af6d78058f5</td><td>NEW</td><td>PrivateLoader</td></tr><tr><td>ae4d2054a6e1f9ba2c269eace61aac7259adb0645d18da82779717d83174837d</td><td>NEW</td><td>PrivateLoader</td></tr><tr><td>bf7b127b1bb81b68439851386cd3d1600bb8b9ec56135e668a88062d913410dd</td><td>NEW</td><td>PrivateLoader</td></tr><tr><td>b8bb071899ae7bd16a328c0998b3cd40261d61e564ac77f9bf3e495fab0ad267</td><td>NEW</td><td>QuasarRAT</td></tr><tr><td>17af8118607b9fc1f7b6aa82fd72f4fc115320d293e103dfe356706bb7c581b7</td><td>NEW</td><td>RecordBreaker &#8211; Raccoon Stealer 2.0</td></tr><tr><td>366284c1a0577937c86744349ac47e6e578da500ada3deb857ff233d9851ee6b</td><td>NEW</td><td>RecordBreaker &#8211; Raccoon Stealer 2.0</td></tr><tr><td>3e50f0eaf02d12653d5f757372240adcb5c16a5ab647a667637ba4c50d37aaad</td><td>NEW</td><td>RecordBreaker &#8211; Raccoon Stealer 2.0</td></tr><tr><td>47849f610a30d72660b1725a0b18d78c5204257b3740641727bdcbfd1ebd466a</td><td>NEW</td><td>RecordBreaker &#8211; Raccoon Stealer 2.0</td></tr><tr><td>507f413ac42df115988df498a90fc1ae610cafb66cb30a3a7de53e71ec90e7cd</td><td>NEW</td><td>RecordBreaker &#8211; Raccoon Stealer 2.0</td></tr><tr><td>57f261cc442dd9a4f1cd4ffd281c9855f4f9a736abffaf539d9df2a6ea0dd409</td><td>NEW</td><td>RecordBreaker &#8211; Raccoon Stealer 2.0</td></tr><tr><td>76eed1849d0a0474f9e0a58afcda2cc1ea7af316535b4b4b27ff810a162d4f8f</td><td>NEW</td><td>RecordBreaker &#8211; Raccoon Stealer 2.0</td></tr><tr><td>855b2e04c323a269d3731c093f0bc80ab3497a69ab8d2967847451a87f04fb0a</td><td>NEW</td><td>RecordBreaker &#8211; Raccoon Stealer 2.0</td></tr><tr><td>87134629723b2c6f4d0a74c35fdce89653471d9880b23f4faea6664ae151db0e</td><td>NEW</td><td>RecordBreaker &#8211; Raccoon Stealer 2.0</td></tr><tr><td>8bcc23ec881d61839fc57e8ec7425ac5ed625425fbf265fcb53ad73a73825b18</td><td>NEW</td><td>RecordBreaker &#8211; Raccoon Stealer 2.0</td></tr><tr><td>9177ba0c649f08fa6367d04091a7672fedb82215b26e08346645544f0631ebfd</td><td>NEW</td><td>RecordBreaker &#8211; Raccoon Stealer 2.0</td></tr><tr><td>9246ed27032429f234888b2713529001344850c608cab9f5ab7274195d330bec</td><td>NEW</td><td>RecordBreaker &#8211; Raccoon Stealer 2.0</td></tr><tr><td>a487e959e59bc9500c43ac270eaf345eaf28173b07ed7dd82b2495aa19cdab88</td><td>NEW</td><td>RecordBreaker &#8211; Raccoon Stealer 2.0</td></tr><tr><td>ada1679a193c9b17b206b3d9ff2a19d64c6c8c5f882a321381c9d5347a8b4b3e</td><td>NEW</td><td>RecordBreaker &#8211; Raccoon Stealer 2.0</td></tr><tr><td>c1be6f792bd51d23d848e54cd217bdf9edcbb2b89df741190929f6fa327a10cb</td><td>NEW</td><td>RecordBreaker &#8211; Raccoon Stealer 2.0</td></tr><tr><td>db8ed3e6dd7e6818046e7ee1e9c6c91f98aa5ce3113b14fb1c85a50a45569b18</td><td>NEW</td><td>RecordBreaker &#8211; Raccoon Stealer 2.0</td></tr><tr><td>ddae8737d7cc35a87274a26b886e6b48ae947aa849c3d7ecb84de6f6d553aa96</td><td>NEW</td><td>RecordBreaker &#8211; Raccoon Stealer 2.0</td></tr><tr><td>efa9a303af112ffb6737846755e3a995510fd65b6ced9032dc68cd7bbe4c307d</td><td>NEW</td><td>RecordBreaker &#8211; Raccoon Stealer 2.0</td></tr><tr><td>20b5c7f210320cf23a63ac7f76086a6e257dd0c248d77deff444cb3dcf624799</td><td>NEW</td><td>RecordBreaker &#8211; Raccoon Stealer 2.0</td></tr><tr><td>f0ee1ddb789207c2000f728f6adabbe344ded7cba0804926a7cfc53bdbbc54eb</td><td>NEW</td><td>RecordBreaker &#8211; Raccoon Stealer 2.0</td></tr><tr><td>f440309e372551fb6ee00ecca71a70a1b8b7e077fe61b0687411147b582ab415</td><td>NEW</td><td>RecordBreaker &#8211; Raccoon Stealer 2.0</td></tr><tr><td>21a570237cdacdb8c69679e59c4dba6aa05f123f9db7470ec34e2f4024c3646b</td><td>NEW</td><td>RecordBreaker &#8211; Raccoon Stealer 2.0</td></tr><tr><td>4e8bf8c770727a3b0f551adcff2716c941234708e679c868ce42532714a29d27</td><td>NEW</td><td>RecordBreaker &#8211; Raccoon Stealer 2.0</td></tr><tr><td>3c0c55b4ce2d90448949980fbca1fa447832f67fb864472551513b6e4eff5304</td><td>NEW</td><td>RecordBreaker &#8211; Raccoon Stealer 2.0</td></tr><tr><td>61b5b6a513be380d50282c1c8391a5362d746bd70506343d04bda3751c3b25de</td><td>NEW</td><td>RecordBreaker &#8211; Raccoon Stealer 2.0</td></tr><tr><td>a4d455f65bb4d2dde03a0686433b6d515c71b5655fa78b86a4f9bdae503c1295</td><td>NEW</td><td>RecordBreaker &#8211; Raccoon Stealer 2.0</td></tr><tr><td>c9d36fcce70893aa16a846b48009bbd8b46fc11c6821b750083a9c89669038cc</td><td>NEW</td><td>RecordBreaker &#8211; Raccoon Stealer 2.0</td></tr><tr><td>04a1021d0880a4f13ed8693dfe65889a5f827fe5ee9369abbc00b58efc40e69b</td><td>NEW</td><td>Redline</td></tr><tr><td>13eb08dda92356f21888d95a6611a46728dfcefcdf769e7edad1a70e958e5367</td><td>NEW</td><td>Redline</td></tr><tr><td>20330ec79f6c6edce8c3d87e3340aebc60f528d3751339e57437b178b9cb914d</td><td>NEW</td><td>Redline</td></tr><tr><td>22962d59a066795696464868700fa7d3f735bfdb494a7a879fb54668a0ca3d46</td><td>NEW</td><td>Redline</td></tr><tr><td>2b1be3ea73921adde804b85e93817869556fa9919bf7a528639a796e27351755</td><td>NEW</td><td>Redline</td></tr><tr><td>301be47a8fefa749d904425b43ae459249e2b44ff62051f3a5529d6222259f42</td><td>NEW</td><td>Redline</td></tr><tr><td>410b032a8635fba6cc30f0c2049a53f93b98128388a4a7ce2c3a0bfb33591f9f</td><td>NEW</td><td>Redline</td></tr><tr><td>43d49812cc723b3c24ca7048faa859800c7e303e074243e4348f65d34127367b</td><td>NEW</td><td>Redline</td></tr><tr><td>47c765ad0baae96498e05e3f0984002cbce6b3f1bacd1cf238681a677c2f8036</td><td>NEW</td><td>Redline</td></tr><tr><td>482765b55aecbf24eb102f531afb6c8905ab7a058a447d217be70984f15b4573</td><td>NEW</td><td>Redline</td></tr><tr><td>50b7e742eea52e18cf908cd676b87c0f145ecc3ff9692b01c90c47750fe989a7</td><td>NEW</td><td>Redline</td></tr><tr><td>70a6d43a56d267aa4fdac5a96722a2ff05e2ac1cc9ba996d173f0b3252e09898</td><td>NEW</td><td>Redline</td></tr><tr><td>7263336f1ec49f936501c508a9edf072a81002e64e52a1ed0cafb1378bb07a2a</td><td>NEW</td><td>Redline</td></tr><tr><td>770e7d287fe352f12757ebfbb4502b10f61001630d70ddf414157b12e1f5e9a3</td><td>NEW</td><td>Redline</td></tr><tr><td>87f5b4385a2a87229b6c448a3b4b19a7e75fe6bc607dffc0e1f860e9e4499eca</td><td>NEW</td><td>Redline</td></tr><tr><td>adc5669dd1153111f4cc07714599145a775d8c260c1acae9c142280147d1793a</td><td>NEW</td><td>Redline</td></tr><tr><td>b80b3dae21d54eb9ccde40b9ba728ba3d45a73e0fc91adae3d7c375208631527</td><td>NEW</td><td>Redline</td></tr><tr><td>e35547cfb6ae3fe18df6d887334952e7a38cc51a230f02c7f62a5fef083de7cf</td><td>NEW</td><td>Redline</td></tr><tr><td>f570b6c46a5bb5a8757b1125c7d4b5d4aca2c7e9354ed1d34b78fd4f08280e30</td><td>NEW</td><td>Redline</td></tr><tr><td>f6aba045ca29ba39bbdcb2f8bde63efc971d138f88bf03aea2d13ddec88a0483</td><td>NEW</td><td>Redline</td></tr><tr><td>fefb4288cb41fcca85cd50653093d7b27c9c51769b03f72adf951c5a1f111ddf</td><td>NEW</td><td>Redline</td></tr><tr><td>f79273a1efb664d81f68e808b9ec963bfeb79d63bd277108863d6ae3c4801a9e</td><td>NEW</td><td>Redline</td></tr><tr><td>24c870202b3aedfcd28a8afb93b5212b791c265abd872ef94e44401d1ca309ad</td><td>NEW</td><td>Redline</td></tr><tr><td>417c3f327c2d8b54ec72a5a89280fecb589a3e0b89c281bbc077d7de445cc76b</td><td>NEW</td><td>Redline</td></tr><tr><td>948416d3aeae6f31df3341118a25a4231a7eed23b3db73a022e9da70734163c9</td><td>NEW</td><td>Redline</td></tr><tr><td>71cc196ad2103a1facd81f2b8bd985273f682019b2a88841d2f34ecc373d1d69</td><td>NEW</td><td>Redline</td></tr><tr><td>7bdb945f2dab863a299e26ab4c6dfb1e4f7321c38fe101224252d993495bc157</td><td>NEW</td><td>Redline</td></tr><tr><td>0bb4d022d6007fcaf1d0707b646063b4b66cf5177da6a1fc6c5d0fc217501d6f</td><td>NEW</td><td>Redline</td></tr><tr><td>0e918ad3e7ad983ecf6c3238991c13a230acc897193e0ad360d2eeaab42bf078</td><td>NEW</td><td>Redline</td></tr><tr><td>f413dbf6764bc73ab94428831e0ce3fc0369856aa50c4f9c0f5948eac85d2d08</td><td>NEW</td><td>Redline</td></tr><tr><td>670a96324222e6bb02bd36c7e5b100fb5d52d2d59891bd9599b1a47438ac9578</td><td>NEW</td><td>Redline</td></tr><tr><td>9049d536e6da46b63c562197ab92f511d5f5e2883eb8bf29f72217282ae25772</td><td>NEW</td><td>Redline</td></tr><tr><td>116d81561faa8c8a9cf4fbc947e9eee11185f3960daead8179a968dea143bfd0</td><td>NEW</td><td>Redline</td></tr><tr><td>9984a21c06fea77e96ba410cffb99de530201ef0c74f3e8b38b3afd4fdf0b333</td><td>NEW</td><td>Redline</td></tr><tr><td>bcc80eabe068cbbe38fa37b58e67fee54af75fa9e8a1fc30d93b7d30886d05da</td><td>NEW</td><td>Redline</td></tr><tr><td>202570439b32480e6df232977d5435be9be94822c75f89b09f571e5b03f8c9ab</td><td>NEW</td><td>Redline</td></tr><tr><td>96b5ea21a2556486cebbed76711a8bbae42de1e97e3311213833c6567a4fbbdc</td><td>NEW</td><td>Redline</td></tr><tr><td>35c53663294e5476315853228b4ae642f552c6c6b1253412a7f981c7ddf3d0b7</td><td>NEW</td><td>Remcos</td></tr><tr><td>8c451b84d9579b625a7821ad7ddcb87bdd665a9e6619eaecf6ab93cd190cf504</td><td>NEW</td><td>Remcos</td></tr><tr><td>7d8c18056e86a3b8c32b524f9de009ced61caf463abe1bca285fa305d4b5616a</td><td>NEW</td><td>Rhadamanthys</td></tr><tr><td>a2e9a2389faf04b67fbbd6fc71134860a145db7643d88ba312390493d5619302</td><td>NEW</td><td>Rhadamanthys</td></tr><tr><td>9f96e5bc9ffc9742cb10384566dc7fb232e0f0d633e643bd487b747b6e88f369</td><td>NEW</td><td>Rhadamanthys</td></tr><tr><td>71ecfddc7fe52a10bdf79c39cf9a1d911257ed0deee1bfef21386053bfe88110</td><td>NEW</td><td>Rhadamanthys</td></tr><tr><td>96e49a5ac188d49003b2fe77ad8a4c8866a94cc828dc6172d9a13a8c26e49b9b</td><td>NEW</td><td>Rhadamanthys</td></tr><tr><td>5474d15059ca4213ab1c13fba25ab8ba38559cac7ec2ab336d2411b90eab1217</td><td>NEW</td><td>SnakeKeylogger</td></tr><tr><td>eb2e2ac0f5f51d90fe90b63c3c385af155b2fee30bc3dc6309776b90c21320f5</td><td>NEW</td><td>SnakeKeylogger</td></tr><tr><td>02355d3fee5e217b25f9210ad0f6bacc3807b6ef1a59aa4d428c01017dcbcf28</td><td>NEW</td><td>Vidar</td></tr><tr><td>05f9553616bb5fdbf37bd4036c210929e08d7181de898c1bea1bdae7afb0766f</td><td>NEW</td><td>Vidar</td></tr><tr><td>0c857501e3851072db666386136929c06bcf4c8d3160b41b7d82a3ce9afca1be</td><td>NEW</td><td>Vidar</td></tr><tr><td>3418a369486e9bf2b57023dc0b02cb00f12a5214fca8bae20ff93586cc8c678a</td><td>NEW</td><td>Vidar</td></tr><tr><td>363c46dfb252d7c40d9c3bb63bdc40c2eff0ce16c0c1b77f507d73058104c6e1</td><td>NEW</td><td>Vidar</td></tr><tr><td>4c17f7ee55f9bf6fa9acaeeb9574feab39ba4a3cccd4426dfa85aaf58b90ae73</td><td>NEW</td><td>Vidar</td></tr><tr><td>4d4f97f1621334e4075e0229265ac6c5da14754eff1378a7d77ea6d3821e8a33</td><td>NEW</td><td>Vidar</td></tr><tr><td>87b92fcd04f69f9c132c9f350dbb3686888a5e388b1f787f6a658f09582c0da6</td><td>NEW</td><td>Vidar</td></tr><tr><td>99e733391ac499e78e535a98551c4d27408abfad4e56fe4c46956636655df29c</td><td>NEW</td><td>Vidar</td></tr><tr><td>b67bc78347918209973d633287c4e1f514a0917b8678c2cf2066ba80b2004f78</td><td>NEW</td><td>Vidar</td></tr><tr><td>c6e0a5e947e9f23cd0af6fa8bd44411a12212ab1de5007036926089800ac8692</td><td>NEW</td><td>Vidar</td></tr><tr><td>cb014704f53d5da64964c2b0bfc7e13bbdf389555294c6f6c98c2527f6406d6d</td><td>NEW</td><td>Vidar</td></tr><tr><td>d55f6b273254d2be71991cdbdb288cc94a7bc715c4be7ad97c0e1625bc0f2696</td><td>NEW</td><td>Vidar</td></tr><tr><td>d6fd4a75e32f78817f84de3dcb9e3fd767f602b7da1edecd06391ff62a481571</td><td>NEW</td><td>Vidar</td></tr><tr><td>e56c525248b1f9201cddcf1802377a7157029e8935696d1a9d9169e1d0501fa4</td><td>NEW</td><td>Vidar</td></tr><tr><td>e6a2575c893868e3d8ea5982699c9c2b75a07b8ec092b0cb26d7b5c3c2640f33</td><td>NEW</td><td>Vidar</td></tr><tr><td>ec875c5901e28a04b199f577b16a8ba6ac8c9ab7e90bc51a5809f668882ba54f</td><td>NEW</td><td>Vidar</td></tr><tr><td>b4a57b62569ee1ccb1c2dae148488dc9e37d738f0fed4f0a6e144caeb910f546</td><td>NEW</td><td>Vidar</td></tr><tr><td>f9c25b4755ab54ff3f8d827b6422d43ed14dbd03fd4faa266348eee177f7957f</td><td>NEW</td><td>Vidar</td></tr><tr><td>fa258b12d3f4ca1503379a4f6a800bdb1d589ef15ab8bfc20d452f70c8a0745c</td><td>NEW</td><td>Vidar</td></tr><tr><td>fcc4c20c07fdf816b7cc6dfba34d42af827ecf01e9972f266ac395e54db028af</td><td>NEW</td><td>Vidar</td></tr><tr><td>a19cabf8ce0a8012dedbf65855981db1efa3b9773365554401a74bfb7a45490f</td><td>NEW</td><td>Vidar</td></tr><tr><td>7f801c77fb61cc8d5c03e9fa3068163b595f5bf8c176628398bbbea5aa0a1b74</td><td>NEW</td><td>Vidar</td></tr><tr><td>63de4552312345e055236c82ecdc55c2bc8b3c37f363cb081f8f788b5203d759</td><td>NEW</td><td>Vidar</td></tr><tr><td>2478cd52847146b34cae6b768c794210838a3002a622ce61c2f90d075f6e0e65</td><td>NEW</td><td>Vidar</td></tr><tr><td>c5646cc9fe486f0644067fc294f83eb6a39ce6f28eea3708c9bf49e244acc0f9</td><td>NEW</td><td>Vidar</td></tr><tr><td>fc99e6083b1dcbe72fb818dbd53903f30c312731f2cfc8607f9d2bf2586be1ee</td><td>NEW</td><td>XWorm</td></tr></tbody></table></figure>



<h1 class="wp-block-heading">Yara</h1>



<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">rule injector_ZZ_dotRunpeX {
    meta:
        description = "Detects new version of dotRunpeX - configurable .NET injector"
    author = "Jiri Vinopal (jiriv)"
    date = "2022-10-30"
    hash1 = "373a86e36f7e808a1db263b4b49d2428df4a13686da7d77edba7a6dd63790232" // injects Formbook
        hash2 = "41ea8f9a9f2a7aeb086dedf8e5855b0409f31e7793cbba615ca0498e47a72636" // injects Formbook
        hash3 = "5e3588e8ddebd61c2bd6dab4b87f601bd6a4857b33eb281cb5059c29cfe62b80" // injects AsyncRat
        hash4 = "8c451b84d9579b625a7821ad7ddcb87bdd665a9e6619eaecf6ab93cd190cf504" // injects Remcos
        hash5 = "8fa81f6341b342afa40b7dc76dd6e0a1874583d12ea04acf839251cb5ca61591" // injects Formbook
        hash6 = "cd4c821e329ec1f7bfe7ecd39a6020867348b722e8c84a05c7eb32f8d5a2f4db" // injects AgentTesla
        hash7 = "fa8a67642514b69731c2ce6d9e980e2a9c9e409b3947f2c9909d81f6eac81452" // injects AsyncRat
        hash8 = "eb2e2ac0f5f51d90fe90b63c3c385af155b2fee30bc3dc6309776b90c21320f5" // injects SnakeKeylogger
    strings:
    // Used ImplMap imports (PInvoke) 
        $implmap1 = "VirtualAllocEx"
        $implmap2 = "CreateProcess"
        $implmap3 = "CreateRemoteThread"
        $implmap4 = "Wow64SetThreadContext"
        $implmap5 = "Wow64GetThreadContext"
        $implmap6 = "NtResumeThread"
        $implmap7 = "ZwUnmapViewOfSection"
        $implmap8 = "NtWriteVirtualMemory"
        $implmap9 = "MessageBox" // ImplMap not presented in all samples - maybe different versions?
        $implmap10 = "Wow64DisableWow64FsRedirection"
        $implmap11 = "Wow64RevertWow64FsRedirection"
        $implmap12 = "CreateFile"
        $implmap13 = "RtlInitUnicodeString"
        $implmap14 = "NtLoadDriver"
        $implmap15 = "NtUnloadDriver"
        $implmap16 = "OpenProcessToken"
        $implmap17 = "LookupPrivilegeValue"
        $implmap18 = "AdjustTokenPrivileges"
        $implmap19 = "CloseHandle"
        $implmap20 = "NtQuerySystemInformation"
        $implmap21 = "DeviceIoControl"
        $implmap22 = "GetProcessHeap"
        $implmap23 = "HeapFree"
        $implmap24 = "HeapAlloc"
        $implmap25 = "GetProcAddress"
        $implmap26 = "CopyMemory" // ImplMap added by KoiVM Protector used by this injector
        $modulerefKernel1 = "Kernel32"
        $modulerefKernel2 = "kernel32"
        $modulerefNtdll1 = "Ntdll"
        $modulerefNtdll2 = "ntdll"
        $modulerefAdvapi1 = "Advapi32"
        $modulerefAdvapi2 = "advapi32"

        $regPath = "\\Registry\\Machine\\System\\CurrentControlSet\\Services\\TaskKill" wide // Registry path for installing Sysinternals Procexp driver
        $rsrcName = "BIDEN_HARRIS_PERFECT_ASSHOLE" wide
        $koiVM1 = "KoiVM"
        $koiVM2 = "#Koi"
    condition:
        uint16(0) == 0x5a4d and uint16(uint32(0x3c)) == 0x4550 and ($regPath or $rsrcName or 1 of ($koiVM*)) and
        24 of ($implmap*) and 1 of ($modulerefKernel*) and 1 of ($modulerefNtdll*) and 1 of ($modulerefAdvapi*) 

}</pre>



<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">rule injector_ZZ_dotRunpeX_oldnew {
	meta:
		description = "Detects new and old version of dotRunpeX - configurable .NET injector"
    author = "Jiri Vinopal (jiriv)"
    date = "2022-10-30"
    hash1_New = "373a86e36f7e808a1db263b4b49d2428df4a13686da7d77edba7a6dd63790232" // injects Formbook
		hash2_New = "41ea8f9a9f2a7aeb086dedf8e5855b0409f31e7793cbba615ca0498e47a72636" // injects Formbook
		hash3_New = "5e3588e8ddebd61c2bd6dab4b87f601bd6a4857b33eb281cb5059c29cfe62b80" // injects AsyncRat
		hash4_New = "8c451b84d9579b625a7821ad7ddcb87bdd665a9e6619eaecf6ab93cd190cf504" // injects Remcos
		hash5_New = "8fa81f6341b342afa40b7dc76dd6e0a1874583d12ea04acf839251cb5ca61591" // injects Formbook
		hash6_New = "cd4c821e329ec1f7bfe7ecd39a6020867348b722e8c84a05c7eb32f8d5a2f4db" // injects AgentTesla
		hash7_New = "fa8a67642514b69731c2ce6d9e980e2a9c9e409b3947f2c9909d81f6eac81452" // injects AsyncRat
		hash8_New = "eb2e2ac0f5f51d90fe90b63c3c385af155b2fee30bc3dc6309776b90c21320f5" // injects SnakeKeylogger
		hash1_Old = "1e7614f757d40a2f5e2f4bd5597d04878768a9c01aa5f9f23d6c87660f7f0fbc" // injects Lokibot
		hash2_Old = "317e6817bba0f54e1547dd9acf24ee17a4cda1b97328cc69dc1ec16e11c258fc" // injects Redline
		hash3_Old = "65cac67ed2a084beff373d6aba6f914b8cba0caceda254a857def1df12f5154b" // injects SnakeKeylogger
		hash4_Old = "68ae2ee5ed7e793c1a49cbf1b0dd7f5a3de9cb783b51b0953880994a79037326" // injects Lokibot
		hash5_Old = "81763d8e3b42d07d76b0a74eda4e759981971635d62072c8da91251fc849b91e" // injects SnakeKeylogger
	strings:
	// Used ImplMap imports (PInvoke) 
		$implmap1 = "VirtualAllocEx"
		$implmap2 = "CreateProcess"
		$implmap3 = "CreateRemoteThread"
		$implmap4 = "Wow64SetThreadContext"
		$implmap5 = "Wow64GetThreadContext"
		$implmap6 = "RtlInitUnicodeString"
		$implmap7 = "NtLoadDriver"
		$implmap8 = "LoadLibrary"
		$implmap9 = "VirtualProtect"
		$implmap10 = "AdjustTokenPrivileges"
		$implmap11 = "GetProcAddress"
		$modulerefKernel1 = "Kernel32"
		$modulerefKernel2 = "kernel32"
		$modulerefNtdll1 = "Ntdll"
		$modulerefNtdll2 = "ntdll"

		$regPath = "\\Registry\\Machine\\System\\CurrentControlSet\\Services\\TaskKill" wide // Registry path for installing Sysinternals Procexp driver
		$rsrcName = "BIDEN_HARRIS_PERFECT_ASSHOLE" wide
		$koiVM1 = "KoiVM"
		$koiVM2 = "#Koi"
	condition:
		uint16(0) == 0x5a4d and uint16(uint32(0x3c)) == 0x4550 and ($regPath or $rsrcName or 1 of ($koiVM*)) and
		9 of ($implmap*) and 1 of ($modulerefKernel*) and 1 of ($modulerefNtdll*) 
}
</pre>



<h1 class="wp-block-heading">References</h1>



<ol class="wp-block-list" type="1">
<li>KoiVM protector:&nbsp;<a href="https://github.com/yck1509/KoiVM">https://github.com/yck1509/KoiVM</a></li>



<li>Reflection in .NET:&nbsp;<a href="https://learn.microsoft.com/en-us/dotnet/framework/reflection-and-codedom/reflection">https://learn.microsoft.com/en-us/dotnet/framework/reflection-and-codedom/reflection</a></li>



<li>P/Invoke:&nbsp;<a href="https://learn.microsoft.com/en-us/dotnet/standard/native-interop/pinvoke">https://learn.microsoft.com/en-us/dotnet/standard/native-interop/pinvoke</a></li>



<li>D/Invoke:&nbsp;<a href="https://github.com/TheWover/DInvoke">https://github.com/TheWover/DInvoke</a></li>



<li>Backstab:&nbsp;<a href="https://github.com/Yaxser/Backstab">https://github.com/Yaxser/Backstab</a></li>



<li>MinHook:&nbsp;<a href="https://github.com/TsudaKageyu/minhook">https://github.com/TsudaKageyu/minhook</a></li>



<li>ClrMD:&nbsp;<a href="https://github.com/microsoft/clrmd">https://github.com/microsoft/clrmd</a></li>



<li>AsmResolver:&nbsp;<a href="https://github.com/Washi1337/AsmResolver">https://github.com/Washi1337/AsmResolver</a></li>



<li>OldRod:&nbsp;<a href="https://github.com/Washi1337/OldRod">https://github.com/Washi1337/OldRod</a></li>
</ol>



<h1 class="wp-block-heading">Tools to Download</h1>



<ul class="wp-block-list">
<li><strong>ImplMap2x64dbg</strong> (Password: “<strong>CPR</strong>”):
<ul class="wp-block-list">
<li><a href="https://research.checkpoint.com/wp-content/uploads/2023/03/ImplMap2x64dbg.7z"> ImplMap2x64dbg.7z</a></li>
</ul>
</li>



<li><strong>Invoke-DotRunpeXextract</strong> (Password: “<strong>CPR</strong>”):
<ul class="wp-block-list">
<li> <a href="https://research.checkpoint.com/wp-content/uploads/2023/03/Invoke-DotRunpeXextract.7z">Invoke-DotRunpeXextract.7z</a></li>
</ul>
</li>
</ul>


<style type="text/css"> .blog-post-wrap h1.h3{color:white; font-size:1.4rem} .wp-block-image figcaption {text-align:center;} .wp-block-heading{color:#FFF;} strong { font-weight: bold; color:white;} .wp-block-table thead{border-bottom:4px solid #656597} p, ul li, ol li, .text, .text a {color:#ddd} .blog-post-wrapper.single-blog-wrapper .text p, .blog-post-wrapper.single-blog-wrapper .text li, .blog-post-wrapper.single-blog-wrapper .text p a {color:#ddd} .wp-block-table td, .wp-block-table th { border:2px solid #656597;} .blog-post-wrapper.single-blog-wrapper .text p a, .text a { color: #748ad8; } code {  background: #ad2963; word-wrap: break-word; padding: 0rem 0.2rem 0rem;  border-radius: 0.2rem; } </style>					</div>			
				</div>
				 
				<div class="back-to-top">
					<a  href="#single-post">
										<div class="image center">
						<img src="https://research.checkpoint.com/wp-content/uploads/2022/10/back_arrow.svg" alt="" />
					</div>
										
											GO UP							
					</a>
				</div>
										<div class="button-wrap center">
						<a class="button background-skyblue font-white skyblue-border" href="/latest-publications/">BACK TO ALL POSTS</a>
					</div>
						

			</div>
			 
				<div class="flex-4">
					
<div class="sidebar-post-wrapper">
		<div class="sidebar-post-inner"></div>
				<div class="sidebar-post-categories popular">
				<div class="aside-box">
					<h2>POPULAR POSTS</h2>
				<div class="blog-most-popular font-white">
									<div class="blog-most-popular-row relative">
										<a class="background-image"  href="https://research.checkpoint.com/2023/opwnai-cybercriminals-starting-to-use-chatgpt/">
						<img src="https://research.checkpoint.com/wp-content/uploads/2023/01/AI-1059x529-copy.jpg" alt=""/>						</a>
								<div class="title">
					<ul class="top-content category-wraper">
													<li>Artificial Intelligence</li>													<li>ChatGPT</li>													<li>Check Point Research Publications</li>											</ul>
					<a href="https://research.checkpoint.com/2023/opwnai-cybercriminals-starting-to-use-chatgpt/">OPWNAI : Cybercriminals Starting to Use ChatGPT</a>
				</div>
			</div>
									<div class="blog-most-popular-row relative">
										<a class="background-image"  href="https://research.checkpoint.com/2019/hacking-fortnite/">
						<img src="https://research.checkpoint.com/wp-content/uploads/2019/01/Fortnite_1021x580.jpg" alt=""/>						</a>
								<div class="title">
					<ul class="top-content category-wraper">
													<li>Check Point Research Publications</li>													<li>Threat Research</li>											</ul>
					<a href="https://research.checkpoint.com/2019/hacking-fortnite/">Hacking Fortnite Accounts</a>
				</div>
			</div>
									<div class="blog-most-popular-row relative">
										<a class="background-image"  href="https://research.checkpoint.com/2022/opwnai-ai-that-can-save-the-day-or-hack-it-away/">
						<img src="https://research.checkpoint.com/wp-content/uploads/2022/12/OpenAIchatGPT_header.jpg" alt=""/>						</a>
								<div class="title">
					<ul class="top-content category-wraper">
													<li>Artificial Intelligence</li>													<li>ChatGPT</li>													<li>Check Point Research Publications</li>											</ul>
					<a href="https://research.checkpoint.com/2022/opwnai-ai-that-can-save-the-day-or-hack-it-away/">OpwnAI: AI That Can Save the Day or HACK it Away</a>
				</div>
			</div>
					</div>
	</div>
		</div>
		</div>  
				</div>
						
		</div>
	</div>
		
		 

<div class="aside-box">
	<div class="container container-wide">
	<div class="text font-blue-- section-title">
		<h3>BLOGS AND PUBLICATIONS</h3>
	</div>
	</div>
					<div class="blog-most-recent font-white">
														<div class="blog-slide">
						<div class="box relative">
														<a class="image background-image--" href="https://research.checkpoint.com/2020/the-turkish-rat-distributes-evolved-adwind-in-a-massive-ongoing-phishing-campaign/" style="background-image: url('https://research.checkpoint.com/wp-content/uploads/2020/02/CheckPointResearchTurkishRat_blog_header.jpg')">
								<img src="https://research.checkpoint.com/wp-content/uploads/2020/02/CheckPointResearchTurkishRat_blog_header.jpg" alt=""/>
							</a>
							<ul class="top-content category-wraper">
																	<li>Check Point Research Publications</li>																	<li>Global Cyber Attack Reports</li>																	<li>Threat Research</li>															</ul>
							<div class="text" onclick="location.href = 'https://research.checkpoint.com/2020/the-turkish-rat-distributes-evolved-adwind-in-a-massive-ongoing-phishing-campaign/';" >
								<span class="date small-font">February 17, 2020</span>
								<h3>“The Turkish Rat” Evolved Adwind in a Massive Ongoing Phishing Campaign</h3>
							</div>
						</div>
					</div>
														<div class="blog-slide">
						<div class="box relative">
														<a class="image background-image--" href="https://research.checkpoint.com/2017/the-next-wannacry-vulnerability-is-here/" style="background-image: url('https://research.checkpoint.com/wp-content/uploads/2017/08/WannaCry-Post-No-Image-1021x450.jpg')">
								<img src="https://research.checkpoint.com/wp-content/uploads/2017/08/WannaCry-Post-No-Image-1021x450.jpg" alt=""/>
							</a>
							<ul class="top-content category-wraper">
																	<li>Check Point Research Publications</li>															</ul>
							<div class="text" onclick="location.href = 'https://research.checkpoint.com/2017/the-next-wannacry-vulnerability-is-here/';" >
								<span class="date small-font">August 11, 2017</span>
								<h3>“The Next WannaCry” Vulnerability is Here</h3>
							</div>
						</div>
					</div>
														<div class="blog-slide">
						<div class="box relative">
														<a class="image background-image--" href="https://research.checkpoint.com/2018/rubyminer-cryptominer-affects-30-ww-networks/" style="background-image: url('https://research.checkpoint.com/wp-content/uploads/2018/01/rubyminer.jpg')">
								<img src="https://research.checkpoint.com/wp-content/uploads/2018/01/rubyminer.jpg" alt=""/>
							</a>
							<ul class="top-content category-wraper">
																	<li>Check Point Research Publications</li>															</ul>
							<div class="text" onclick="location.href = 'https://research.checkpoint.com/2018/rubyminer-cryptominer-affects-30-ww-networks/';" >
								<span class="date small-font">January 11, 2018</span>
								<h3>‘RubyMiner’ Cryptominer Affects 30% of WW Networks</h3>
							</div>
						</div>
					</div>
								
			</div>
			<div class="progress blog-most-recent-bar" role="progressbar" aria-valuemin="0" aria-valuemax="100">
				<span class="slider__label sr-only blog-recent-bar"> </span>
			</div>
		</div>	
</section>

<footer class="footer section-padding background-skyblue">
	<div class="footer-top margin-bottom">
		<div class="container container-wide">
			<div class="flex-row footer-content">
				<div class="flex-2 box left">
					<a href="https://research.checkpoint.com"><img src="https://research.checkpoint.com/wp-content/uploads/2022/12/CheckPointResearchLogo_white-1-e1671590634727.png"  alt="" class="img-responsive" /></a>					<div class="social-media-wrapper">				
						<div class="social-icons">
																																											<a href="https://www.linkedin.com/company/check-point-software-technologies/" target="_blank"><svg  style="fill: currentColor;" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"	 viewBox="0 0 310 310" style="enable-background:new 0 0 310 310;" xml:space="preserve"><g id="XMLID_801_">	<path id="XMLID_802_" d="M72.16,99.73H9.927c-2.762,0-5,2.239-5,5v199.928c0,2.762,2.238,5,5,5H72.16c2.762,0,5-2.238,5-5V104.73		C77.16,101.969,74.922,99.73,72.16,99.73z"/>	<path id="XMLID_803_" d="M41.066,0.341C18.422,0.341,0,18.743,0,41.362C0,63.991,18.422,82.4,41.066,82.4		c22.626,0,41.033-18.41,41.033-41.038C82.1,18.743,63.692,0.341,41.066,0.341z"/>	<path id="XMLID_804_" d="M230.454,94.761c-24.995,0-43.472,10.745-54.679,22.954V104.73c0-2.761-2.238-5-5-5h-59.599		c-2.762,0-5,2.239-5,5v199.928c0,2.762,2.238,5,5,5h62.097c2.762,0,5-2.238,5-5v-98.918c0-33.333,9.054-46.319,32.29-46.319		c25.306,0,27.317,20.818,27.317,48.034v97.204c0,2.762,2.238,5,5,5H305c2.762,0,5-2.238,5-5V194.995		C310,145.43,300.549,94.761,230.454,94.761z"/></g></svg></a>
																																													<a href="https://twitter.com/_cpresearch_" target="_blank"><svg  style="fill: currentColor;" version="1.1" id="Layer_1" xmlns="https://www.w3.org/2000/svg" xmlns:xlink="https://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 310 310" style="enable-background:new 0 0 310 310;" xml:space="preserve"><g id="XMLID_826_"> <path id="XMLID_827_" d="M302.973,57.388c-4.87,2.16-9.877,3.983-14.993,5.463c6.057-6.85,10.675-14.91,13.494-23.73	c0.632-1.977-0.023-4.141-1.648-5.434c-1.623-1.294-3.878-1.449-5.665-0.39c-10.865,6.444-22.587,11.075-34.878,13.783	c-12.381-12.098-29.197-18.983-46.581-18.983c-36.695,0-66.549,29.853-66.549,66.547c0,2.89,0.183,5.764,0.545,8.598	C101.163,99.244,58.83,76.863,29.76,41.204c-1.036-1.271-2.632-1.956-4.266-1.825c-1.635,0.128-3.104,1.05-3.93,2.467	c-5.896,10.117-9.013,21.688-9.013,33.461c0,16.035,5.725,31.249,15.838,43.137c-3.075-1.065-6.059-2.396-8.907-3.977	c-1.529-0.851-3.395-0.838-4.914,0.033c-1.52,0.871-2.473,2.473-2.513,4.224c-0.007,0.295-0.007,0.59-0.007,0.889	c0,23.935,12.882,45.484,32.577,57.229c-1.692-0.169-3.383-0.414-5.063-0.735c-1.732-0.331-3.513,0.276-4.681,1.597	c-1.17,1.32-1.557,3.16-1.018,4.84c7.29,22.76,26.059,39.501,48.749,44.605c-18.819,11.787-40.34,17.961-62.932,17.961	c-4.714,0-9.455-0.277-14.095-0.826c-2.305-0.274-4.509,1.087-5.294,3.279c-0.785,2.193,0.047,4.638,2.008,5.895	c29.023,18.609,62.582,28.445,97.047,28.445c67.754,0,110.139-31.95,133.764-58.753c29.46-33.421,46.356-77.658,46.356-121.367	c0-1.826-0.028-3.67-0.084-5.508c11.623-8.757,21.63-19.355,29.773-31.536c1.237-1.85,1.103-4.295-0.33-5.998	C307.394,57.037,305.009,56.486,302.973,57.388z"/></g></svg></a>
																																													<a href="https://www.facebook.com/checkpointresearch/" target="_blank"><svg style="fill: currentColor;" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"	 viewBox="0 0 310 310" style="enable-background:new 0 0 310 310;" xml:space="preserve"><path id="XMLID_835_" d="M81.703,165.106h33.981V305c0,2.762,2.238,5,5,5h57.616c2.762,0,5-2.238,5-5V165.765h39.064		c2.54,0,4.677-1.906,4.967-4.429l5.933-51.502c0.163-1.417-0.286-2.836-1.234-3.899c-0.949-1.064-2.307-1.673-3.732-1.673h-44.996		V71.978c0-9.732,5.24-14.667,15.576-14.667c1.473,0,29.42,0,29.42,0c2.762,0,5-2.239,5-5V5.037c0-2.762-2.238-5-5-5h-40.545		C187.467,0.023,186.832,0,185.896,0c-7.035,0-31.488,1.381-50.804,19.151c-21.402,19.692-18.427,43.27-17.716,47.358v37.752H81.703		c-2.762,0-5,2.238-5,5v50.844C76.703,162.867,78.941,165.106,81.703,165.106z"/></svg></a>
																														</div>		
					</div>

					
				</div>
				<div class="flex-6 desktop-view">
					<div class="footer-menu-wrapper menu-wrap">
												<div class="nav-menu">
						<div class="nav-footer-wrap"><ul id="menu-footer-menus" class="nav-footer"><li id="menu-item-26658" class="blod menu-item menu-item-type-custom menu-item-object-custom menu-item-has-children menu-item-26658"><a href="#">Publications</a>
<ul class="sub-menu">
	<li id="menu-item-26659" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-26659"><a href="/category/threat-intelligence-reports/">Global cyber attack reports</a></li>
	<li id="menu-item-26660" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-26660"><a href="/category/threat-research/">Research publications</a></li>
	<li id="menu-item-26661" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-26661"><a href="https://advisories.checkpoint.com/advisories/">IPS advisories</a></li>
	<li id="menu-item-26662" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-26662"><a href="https://blog.checkpoint.com/">Check point blog</a></li>
	<li id="menu-item-26663" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-26663"><a href="/category/demos/">Demos</a></li>
</ul>
</li>
<li id="menu-item-26664" class="blod menu-item menu-item-type-custom menu-item-object-custom menu-item-has-children menu-item-26664"><a href="#">Tools</a>
<ul class="sub-menu">
	<li id="menu-item-26665" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-26665"><a href="http://threatemulation.checkpoint.com/">Sandblast file analysis</a></li>
	<li id="menu-item-26667" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-26667"><a href="https://www.checkpoint.com/infinity/threatcloud/">ThreatCloud</a></li>
	<li id="menu-item-27018" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-27018"><a href="https://www.checkpoint.com/solutions/threat-intelligence-research/">Threat Intelligence</a></li>
	<li id="menu-item-27019" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-27019"><a href="https://www.checkpoint.com/infinity/zero-day-protection/">Zero day protection</a></li>
	<li id="menu-item-26668" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-26668"><a href="https://threatmap.checkpoint.com/">Live threat map</a></li>
</ul>
</li>
<li id="menu-item-26669" class="blod menu-item menu-item-type-post_type menu-item-object-page menu-item-has-children menu-item-26669"><a href="https://research.checkpoint.com/about-us/">About Us</a>
<ul class="sub-menu">
	<li id="menu-item-26670" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-26670"><a href="https://research.checkpoint.com/contact/">Contact Us</a></li>
</ul>
</li>
</ul></div>						</div>
											</div>
				</div>	
				<div class="flex-4 box right">
					<div class="text font-blue text-black">
						 <h3>Let’s get in touch</h3>
<p>Subscribe for cpr blogs, news and more</p>
<p><a href="/subscription/" style="color:#fff; font-weight: bold; text-decoration: underline;">Subscribe Now</a></p>
					</div>
				</div>
			</div>
		</div>
	</div>
	<div class="footer-bottom font-white">
		<div class="container container-wide">
			<div class="flex-row footer-content">
				<div class="flex-6 box-left"><div class="display-flex align-items-center"><p>© 1994-2024 Check Point Software Technologies LTD. All rights reserved.</p>
 </div></div>
				<div class="flex-6">
					<div class="footer-bottom-right">
						<div class="box padding-right"><p>Property of <a href="https://www.checkpoint.com/">CheckPoint.com</a></p>
</div>
						<div class="box"><p><a href="/privacy-policy/">Privacy Policy</a></p>
</div>
					</div>
				</div>
			</div>
		</div>
	</div>
</footer><script>
/* slick slider */
!function(b){"function"==typeof define&&define.amd?define(["jquery"],b):"undefined"!=typeof exports?module.exports=b(require("jquery")):b(jQuery)}(function(d){var c=window.Slick||{};c=function(){function e(i,h){var b,g=this;g.defaults={accessibility:!0,adaptiveHeight:!1,appendArrows:d(i),appendDots:d(i),arrows:!0,asNavFor:null,prevArrow:'<button type="button" data-role="none" class="slick-prev" aria-label="Previous" tabindex="0" role="button">Previous</button>',nextArrow:'<button type="button" data-role="none" class="slick-next" aria-label="Next" tabindex="0" role="button">Next</button>',autoplay:!1,autoplaySpeed:3000,centerMode:!1,centerPadding:"50px",cssEase:"ease",customPaging:function(f,j){return d('<button type="button" data-role="none" role="button" tabindex="0" />').text(j+1)},dots:!1,dotsClass:"slick-dots",draggable:!0,easing:"linear",edgeFriction:0.35,fade:!1,focusOnSelect:!1,infinite:!0,initialSlide:0,lazyLoad:"ondemand",mobileFirst:!1,pauseOnHover:!0,pauseOnFocus:!0,pauseOnDotsHover:!1,respondTo:"window",responsive:null,rows:1,rtl:!1,slide:"",slidesPerRow:1,slidesToShow:1,slidesToScroll:1,speed:500,swipe:!0,swipeToSlide:!1,touchMove:!0,touchThreshold:5,useCSS:!0,useTransform:!0,variableWidth:!1,vertical:!1,verticalSwiping:!1,waitForAnimate:!0,zIndex:1000},g.initials={animating:!1,dragging:!1,autoPlayTimer:null,currentDirection:0,currentLeft:null,currentSlide:0,direction:1,$dots:null,listWidth:null,listHeight:null,loadIndex:0,$nextArrow:null,$prevArrow:null,slideCount:null,slideWidth:null,$slideTrack:null,$slides:null,sliding:!1,slideOffset:0,swipeLeft:null,$list:null,touchObject:{},transformsEnabled:!1,unslicked:!1},d.extend(g,g.initials),g.activeBreakpoint=null,g.animType=null,g.animProp=null,g.breakpoints=[],g.breakpointSettings=[],g.cssTransitions=!1,g.focussed=!1,g.interrupted=!1,g.hidden="hidden",g.paused=!0,g.positionProp=null,g.respondTo=null,g.rowCount=1,g.shouldClick=!0,g.$slider=d(i),g.$slidesCache=null,g.transformType=null,g.transitionType=null,g.visibilityChange="visibilitychange",g.windowWidth=0,g.windowTimer=null,b=d(i).data("slick")||{},g.options=d.extend({},g.defaults,h,b),g.currentSlide=g.options.initialSlide,g.originalSettings=g.options,"undefined"!=typeof document.mozHidden?(g.hidden="mozHidden",g.visibilityChange="mozvisibilitychange"):"undefined"!=typeof document.webkitHidden&&(g.hidden="webkitHidden",g.visibilityChange="webkitvisibilitychange"),g.autoPlay=d.proxy(g.autoPlay,g),g.autoPlayClear=d.proxy(g.autoPlayClear,g),g.autoPlayIterator=d.proxy(g.autoPlayIterator,g),g.changeSlide=d.proxy(g.changeSlide,g),g.clickHandler=d.proxy(g.clickHandler,g),g.selectHandler=d.proxy(g.selectHandler,g),g.setPosition=d.proxy(g.setPosition,g),g.swipeHandler=d.proxy(g.swipeHandler,g),g.dragHandler=d.proxy(g.dragHandler,g),g.keyHandler=d.proxy(g.keyHandler,g),g.instanceUid=a++,g.htmlExpr=/^(?:\s*(<[\w\W]+>)[^>]*)$/,g.registerBreakpoints(),g.init(!0)}var a=0;return e}(),c.prototype.activateADA=function(){var b=this;b.$slideTrack.find(".slick-active").attr({"aria-hidden":"false"}).find("a, input, button, select").attr({tabindex:"0"})},c.prototype.addSlide=c.prototype.slickAdd=function(a,h,g){var f=this;if("boolean"==typeof h){g=h,h=null}else{if(0>h||h>=f.slideCount){return !1}}f.unload(),"number"==typeof h?0===h&&0===f.$slides.length?d(a).appendTo(f.$slideTrack):g?d(a).insertBefore(f.$slides.eq(h)):d(a).insertAfter(f.$slides.eq(h)):g===!0?d(a).prependTo(f.$slideTrack):d(a).appendTo(f.$slideTrack),f.$slides=f.$slideTrack.children(this.options.slide),f.$slideTrack.children(this.options.slide).detach(),f.$slideTrack.append(f.$slides),f.$slides.each(function(e,i){d(i).attr("data-slick-index",e)}),f.$slidesCache=f.$slides,f.reinit()},c.prototype.animateHeight=function(){var f=this;if(1===f.options.slidesToShow&&f.options.adaptiveHeight===!0&&f.options.vertical===!1){var e=f.$slides.eq(f.currentSlide).outerHeight(!0);f.$list.animate({height:e},f.options.speed)}},c.prototype.animateSlide=function(a,h){var g={},f=this;f.animateHeight(),f.options.rtl===!0&&f.options.vertical===!1&&(a=-a),f.transformsEnabled===!1?f.options.vertical===!1?f.$slideTrack.animate({left:a},f.options.speed,f.options.easing,h):f.$slideTrack.animate({top:a},f.options.speed,f.options.easing,h):f.cssTransitions===!1?(f.options.rtl===!0&&(f.currentLeft=-f.currentLeft),d({animStart:f.currentLeft}).animate({animStart:a},{duration:f.options.speed,easing:f.options.easing,step:function(b){b=Math.ceil(b),f.options.vertical===!1?(g[f.animType]="translate("+b+"px, 0px)",f.$slideTrack.css(g)):(g[f.animType]="translate(0px,"+b+"px)",f.$slideTrack.css(g))},complete:function(){h&&h.call()}})):(f.applyTransition(),a=Math.ceil(a),f.options.vertical===!1?g[f.animType]="translate3d("+a+"px, 0px, 0px)":g[f.animType]="translate3d(0px,"+a+"px, 0px)",f.$slideTrack.css(g),h&&setTimeout(function(){f.disableTransition(),h.call()},f.options.speed))},c.prototype.getNavTarget=function(){var a=this,e=a.options.asNavFor;return e&&null!==e&&(e=d(e).not(a.$slider)),e},c.prototype.asNavFor=function(a){var f=this,e=f.getNavTarget();null!==e&&"object"==typeof e&&e.each(function(){var b=d(this).slick("getSlick");b.unslicked||b.slideHandler(a,!0)})},c.prototype.applyTransition=function(f){var e=this,g={};e.options.fade===!1?g[e.transitionType]=e.transformType+" "+e.options.speed+"ms "+e.options.cssEase:g[e.transitionType]="opacity "+e.options.speed+"ms "+e.options.cssEase,e.options.fade===!1?e.$slideTrack.css(g):e.$slides.eq(f).css(g)},c.prototype.autoPlay=function(){var b=this;b.autoPlayClear(),b.slideCount>b.options.slidesToShow&&(b.autoPlayTimer=setInterval(b.autoPlayIterator,b.options.autoplaySpeed))},c.prototype.autoPlayClear=function(){var b=this;b.autoPlayTimer&&clearInterval(b.autoPlayTimer)},c.prototype.autoPlayIterator=function(){var f=this,e=f.currentSlide+f.options.slidesToScroll;f.paused||f.interrupted||f.focussed||(f.options.infinite===!1&&(1===f.direction&&f.currentSlide+1===f.slideCount-1?f.direction=0:0===f.direction&&(e=f.currentSlide-f.options.slidesToScroll,f.currentSlide-1===0&&(f.direction=1))),f.slideHandler(e))},c.prototype.buildArrows=function(){var a=this;a.options.arrows===!0&&(a.$prevArrow=d(a.options.prevArrow).addClass("slick-arrow"),a.$nextArrow=d(a.options.nextArrow).addClass("slick-arrow"),a.slideCount>a.options.slidesToShow?(a.$prevArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"),a.$nextArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"),a.htmlExpr.test(a.options.prevArrow)&&a.$prevArrow.prependTo(a.options.appendArrows),a.htmlExpr.test(a.options.nextArrow)&&a.$nextArrow.appendTo(a.options.appendArrows),a.options.infinite!==!0&&a.$prevArrow.addClass("slick-disabled").attr("aria-disabled","true")):a.$prevArrow.add(a.$nextArrow).addClass("slick-hidden").attr({"aria-disabled":"true",tabindex:"-1"}))},c.prototype.buildDots=function(){var f,e,a=this;if(a.options.dots===!0&&a.slideCount>a.options.slidesToShow){for(a.$slider.addClass("slick-dotted"),e=d("<ul />").addClass(a.options.dotsClass),f=0;f<=a.getDotCount();f+=1){e.append(d("<li />").append(a.options.customPaging.call(this,a,f)))}a.$dots=e.appendTo(a.options.appendDots),a.$dots.find("li").first().addClass("slick-active").attr("aria-hidden","false")}},c.prototype.buildOut=function(){var a=this;a.$slides=a.$slider.children(a.options.slide+":not(.slick-cloned)").addClass("slick-slide"),a.slideCount=a.$slides.length,a.$slides.each(function(e,f){d(f).attr("data-slick-index",e).data("originalStyling",d(f).attr("style")||"")}),a.$slider.addClass("slick-slider"),a.$slideTrack=0===a.slideCount?d('<div class="slick-track"/>').appendTo(a.$slider):a.$slides.wrapAll('<div class="slick-track"/>').parent(),a.$list=a.$slideTrack.wrap('<div aria-live="polite" class="slick-list"/>').parent(),a.$slideTrack.css("opacity",0),(a.options.centerMode===!0||a.options.swipeToSlide===!0)&&(a.options.slidesToScroll=1),d("img[data-lazy]",a.$slider).not("[src]").addClass("slick-loading"),a.setupInfinite(),a.buildArrows(),a.buildDots(),a.updateDots(),a.setSlideClasses("number"==typeof a.currentSlide?a.currentSlide:0),a.options.draggable===!0&&a.$list.addClass("draggable")},c.prototype.buildRows=function(){var u,t,s,r,q,p,o,v=this;if(r=document.createDocumentFragment(),p=v.$slider.children(),v.options.rows>1){for(o=v.options.slidesPerRow*v.options.rows,q=Math.ceil(p.length/o),u=0;q>u;u++){var n=document.createElement("div");for(t=0;t<v.options.rows;t++){var m=document.createElement("div");for(s=0;s<v.options.slidesPerRow;s++){var l=u*o+(t*v.options.slidesPerRow+s);p.get(l)&&m.appendChild(p.get(l))}n.appendChild(m)}r.appendChild(n)}v.$slider.empty().append(r),v.$slider.children().children().children().css({width:100/v.options.slidesPerRow+"%",display:"inline-block"})}},c.prototype.checkResponsive=function(r,q){var o,n,m,p=this,l=!1,k=p.$slider.width(),a=window.innerWidth||d(window).width();if("window"===p.respondTo?m=a:"slider"===p.respondTo?m=k:"min"===p.respondTo&&(m=Math.min(a,k)),p.options.responsive&&p.options.responsive.length&&null!==p.options.responsive){n=null;for(o in p.breakpoints){p.breakpoints.hasOwnProperty(o)&&(p.originalSettings.mobileFirst===!1?m<p.breakpoints[o]&&(n=p.breakpoints[o]):m>p.breakpoints[o]&&(n=p.breakpoints[o]))}null!==n?null!==p.activeBreakpoint?(n!==p.activeBreakpoint||q)&&(p.activeBreakpoint=n,"unslick"===p.breakpointSettings[n]?p.unslick(n):(p.options=d.extend({},p.originalSettings,p.breakpointSettings[n]),r===!0&&(p.currentSlide=p.options.initialSlide),p.refresh(r)),l=n):(p.activeBreakpoint=n,"unslick"===p.breakpointSettings[n]?p.unslick(n):(p.options=d.extend({},p.originalSettings,p.breakpointSettings[n]),r===!0&&(p.currentSlide=p.options.initialSlide),p.refresh(r)),l=n):null!==p.activeBreakpoint&&(p.activeBreakpoint=null,p.options=p.originalSettings,r===!0&&(p.currentSlide=p.options.initialSlide),p.refresh(r),l=n),r||l===!1||p.$slider.trigger("breakpoint",[p,l])}},c.prototype.changeSlide=function(a,p){var m,l,k,o=this,n=d(a.currentTarget);switch(n.is("a")&&a.preventDefault(),n.is("li")||(n=n.closest("li")),k=o.slideCount%o.options.slidesToScroll!==0,m=k?0:(o.slideCount-o.currentSlide)%o.options.slidesToScroll,a.data.message){case"previous":l=0===m?o.options.slidesToScroll:o.options.slidesToShow-m,o.slideCount>o.options.slidesToShow&&o.slideHandler(o.currentSlide-l,!1,p);break;case"next":l=0===m?o.options.slidesToScroll:m,o.slideCount>o.options.slidesToShow&&o.slideHandler(o.currentSlide+l,!1,p);break;case"index":var j=0===a.data.index?0:a.data.index||n.index()*o.options.slidesToScroll;o.slideHandler(o.checkNavigable(j),!1,p),n.children().trigger("focus");break;default:return}},c.prototype.checkNavigable=function(g){var j,i,f=this;if(j=f.getNavigableIndexes(),i=0,g>j[j.length-1]){g=j[j.length-1]}else{for(var h in j){if(g<j[h]){g=i;break}i=j[h]}}return g},c.prototype.cleanUpEvents=function(){var a=this;a.options.dots&&null!==a.$dots&&d("li",a.$dots).off("click.slick",a.changeSlide).off("mouseenter.slick",d.proxy(a.interrupt,a,!0)).off("mouseleave.slick",d.proxy(a.interrupt,a,!1)),a.$slider.off("focus.slick blur.slick"),a.options.arrows===!0&&a.slideCount>a.options.slidesToShow&&(a.$prevArrow&&a.$prevArrow.off("click.slick",a.changeSlide),a.$nextArrow&&a.$nextArrow.off("click.slick",a.changeSlide)),a.$list.off("touchstart.slick mousedown.slick",a.swipeHandler),a.$list.off("touchmove.slick mousemove.slick",a.swipeHandler),a.$list.off("touchend.slick mouseup.slick",a.swipeHandler),a.$list.off("touchcancel.slick mouseleave.slick",a.swipeHandler),a.$list.off("click.slick",a.clickHandler),d(document).off(a.visibilityChange,a.visibility),a.cleanUpSlideEvents(),a.options.accessibility===!0&&a.$list.off("keydown.slick",a.keyHandler),a.options.focusOnSelect===!0&&d(a.$slideTrack).children().off("click.slick",a.selectHandler),d(window).off("orientationchange.slick.slick-"+a.instanceUid,a.orientationChange),d(window).off("resize.slick.slick-"+a.instanceUid,a.resize),d("[draggable!=true]",a.$slideTrack).off("dragstart",a.preventDefault),d(window).off("load.slick.slick-"+a.instanceUid,a.setPosition),d(document).off("ready.slick.slick-"+a.instanceUid,a.setPosition)},c.prototype.cleanUpSlideEvents=function(){var a=this;a.$list.off("mouseenter.slick",d.proxy(a.interrupt,a,!0)),a.$list.off("mouseleave.slick",d.proxy(a.interrupt,a,!1))},c.prototype.cleanUpRows=function(){var e,f=this;f.options.rows>1&&(e=f.$slides.children().children(),e.removeAttr("style"),f.$slider.empty().append(e))},c.prototype.clickHandler=function(f){var e=this;e.shouldClick===!1&&(f.stopImmediatePropagation(),f.stopPropagation(),f.preventDefault())},c.prototype.destroy=function(a){var e=this;e.autoPlayClear(),e.touchObject={},e.cleanUpEvents(),d(".slick-cloned",e.$slider).detach(),e.$dots&&e.$dots.remove(),e.$prevArrow&&e.$prevArrow.length&&(e.$prevArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display",""),e.htmlExpr.test(e.options.prevArrow)&&e.$prevArrow.remove()),e.$nextArrow&&e.$nextArrow.length&&(e.$nextArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display",""),e.htmlExpr.test(e.options.nextArrow)&&e.$nextArrow.remove()),e.$slides&&(e.$slides.removeClass("slick-slide slick-active slick-center slick-visible slick-current").removeAttr("aria-hidden").removeAttr("data-slick-index").each(function(){d(this).attr("style",d(this).data("originalStyling"))}),e.$slideTrack.children(this.options.slide).detach(),e.$slideTrack.detach(),e.$list.detach(),e.$slider.append(e.$slides)),e.cleanUpRows(),e.$slider.removeClass("slick-slider"),e.$slider.removeClass("slick-initialized"),e.$slider.removeClass("slick-dotted"),e.unslicked=!0,a||e.$slider.trigger("destroy",[e])},c.prototype.disableTransition=function(f){var e=this,g={};g[e.transitionType]="",e.options.fade===!1?e.$slideTrack.css(g):e.$slides.eq(f).css(g)},c.prototype.fadeSlide=function(f,e){var g=this;g.cssTransitions===!1?(g.$slides.eq(f).css({zIndex:g.options.zIndex}),g.$slides.eq(f).animate({opacity:1},g.options.speed,g.options.easing,e)):(g.applyTransition(f),g.$slides.eq(f).css({opacity:1,zIndex:g.options.zIndex}),e&&setTimeout(function(){g.disableTransition(f),e.call()},g.options.speed))},c.prototype.fadeSlideOut=function(f){var e=this;e.cssTransitions===!1?e.$slides.eq(f).animate({opacity:0,zIndex:e.options.zIndex-2},e.options.speed,e.options.easing):(e.applyTransition(f),e.$slides.eq(f).css({opacity:0,zIndex:e.options.zIndex-2}))},c.prototype.filterSlides=c.prototype.slickFilter=function(f){var e=this;null!==f&&(e.$slidesCache=e.$slides,e.unload(),e.$slideTrack.children(this.options.slide).detach(),e.$slidesCache.filter(f).appendTo(e.$slideTrack),e.reinit())},c.prototype.focusHandler=function(){var a=this;a.$slider.off("focus.slick blur.slick").on("focus.slick blur.slick","*:not(.slick-arrow)",function(e){e.stopImmediatePropagation();var b=d(this);setTimeout(function(){a.options.pauseOnFocus&&(a.focussed=b.is(":focus"),a.autoPlay())},0)})},c.prototype.getCurrent=c.prototype.slickCurrentSlide=function(){var b=this;return b.currentSlide},c.prototype.getDotCount=function(){var f=this,e=0,h=0,g=0;if(f.options.infinite===!0){for(;e<f.slideCount;){++g,e=h+f.options.slidesToScroll,h+=f.options.slidesToScroll<=f.options.slidesToShow?f.options.slidesToScroll:f.options.slidesToShow}}else{if(f.options.centerMode===!0){g=f.slideCount}else{if(f.options.asNavFor){for(;e<f.slideCount;){++g,e=h+f.options.slidesToScroll,h+=f.options.slidesToScroll<=f.options.slidesToShow?f.options.slidesToScroll:f.options.slidesToShow}}else{g=1+Math.ceil((f.slideCount-f.options.slidesToShow)/f.options.slidesToScroll)}}}return g-1},c.prototype.getLeft=function(h){var l,k,i,g=this,j=0;return g.slideOffset=0,k=g.$slides.first().outerHeight(!0),g.options.infinite===!0?(g.slideCount>g.options.slidesToShow&&(g.slideOffset=g.slideWidth*g.options.slidesToShow*-1,j=k*g.options.slidesToShow*-1),g.slideCount%g.options.slidesToScroll!==0&&h+g.options.slidesToScroll>g.slideCount&&g.slideCount>g.options.slidesToShow&&(h>g.slideCount?(g.slideOffset=(g.options.slidesToShow-(h-g.slideCount))*g.slideWidth*-1,j=(g.options.slidesToShow-(h-g.slideCount))*k*-1):(g.slideOffset=g.slideCount%g.options.slidesToScroll*g.slideWidth*-1,j=g.slideCount%g.options.slidesToScroll*k*-1))):h+g.options.slidesToShow>g.slideCount&&(g.slideOffset=(h+g.options.slidesToShow-g.slideCount)*g.slideWidth,j=(h+g.options.slidesToShow-g.slideCount)*k),g.slideCount<=g.options.slidesToShow&&(g.slideOffset=0,j=0),g.options.centerMode===!0&&g.options.infinite===!0?g.slideOffset+=g.slideWidth*Math.floor(g.options.slidesToShow/2)-g.slideWidth:g.options.centerMode===!0&&(g.slideOffset=0,g.slideOffset+=g.slideWidth*Math.floor(g.options.slidesToShow/2)),l=g.options.vertical===!1?h*g.slideWidth*-1+g.slideOffset:h*k*-1+j,g.options.variableWidth===!0&&(i=g.slideCount<=g.options.slidesToShow||g.options.infinite===!1?g.$slideTrack.children(".slick-slide").eq(h):g.$slideTrack.children(".slick-slide").eq(h+g.options.slidesToShow),l=g.options.rtl===!0?i[0]?-1*(g.$slideTrack.width()-i[0].offsetLeft-i.width()):0:i[0]?-1*i[0].offsetLeft:0,g.options.centerMode===!0&&(i=g.slideCount<=g.options.slidesToShow||g.options.infinite===!1?g.$slideTrack.children(".slick-slide").eq(h):g.$slideTrack.children(".slick-slide").eq(h+g.options.slidesToShow+1),l=g.options.rtl===!0?i[0]?-1*(g.$slideTrack.width()-i[0].offsetLeft-i.width()):0:i[0]?-1*i[0].offsetLeft:0,l+=(g.$list.width()-i.outerWidth())/2)),l},c.prototype.getOption=c.prototype.slickGetOption=function(f){var e=this;return e.options[f]},c.prototype.getNavigableIndexes=function(){var h,g=this,f=0,j=0,i=[];for(g.options.infinite===!1?h=g.slideCount:(f=-1*g.options.slidesToScroll,j=-1*g.options.slidesToScroll,h=2*g.slideCount);h>f;){i.push(f),f=j+g.options.slidesToScroll,j+=g.options.slidesToScroll<=g.options.slidesToShow?g.options.slidesToScroll:g.options.slidesToShow}return i},c.prototype.getSlick=function(){return this},c.prototype.getSlideCount=function(){var h,g,f,a=this;return f=a.options.centerMode===!0?a.slideWidth*Math.floor(a.options.slidesToShow/2):0,a.options.swipeToSlide===!0?(a.$slideTrack.find(".slick-slide").each(function(e,b){return b.offsetLeft-f+d(b).outerWidth()/2>-1*a.swipeLeft?(g=b,!1):void 0}),h=Math.abs(d(g).attr("data-slick-index")-a.currentSlide)||1):a.options.slidesToScroll},c.prototype.goTo=c.prototype.slickGoTo=function(f,e){var g=this;g.changeSlide({data:{message:"index",index:parseInt(f)}},e)},c.prototype.init=function(a){var e=this;d(e.$slider).hasClass("slick-initialized")||(d(e.$slider).addClass("slick-initialized"),e.buildRows(),e.buildOut(),e.setProps(),e.startLoad(),e.loadSlider(),e.initializeEvents(),e.updateArrows(),e.updateDots(),e.checkResponsive(!0),e.focusHandler()),a&&e.$slider.trigger("init",[e]),e.options.accessibility===!0&&e.initADA(),e.options.autoplay&&(e.paused=!1,e.autoPlay())},c.prototype.initADA=function(){var a=this;a.$slides.add(a.$slideTrack.find(".slick-cloned")).attr({"aria-hidden":"true",tabindex:"-1"}).find("a, input, button, select").attr({tabindex:"-1"}),a.$slideTrack.attr("role","listbox"),a.$slides.not(a.$slideTrack.find(".slick-cloned")).each(function(b){d(this).attr({role:"option","aria-describedby":"slick-slide"+a.instanceUid+b})}),null!==a.$dots&&a.$dots.attr("role","tablist").find("li").each(function(b){d(this).attr({role:"presentation","aria-selected":"false","aria-controls":"navigation"+a.instanceUid+b,id:"slick-slide"+a.instanceUid+b})}).first().attr("aria-selected","true").end().find("button").attr("role","button").end().closest("div").attr("role","toolbar"),a.activateADA()},c.prototype.initArrowEvents=function(){var b=this;b.options.arrows===!0&&b.slideCount>b.options.slidesToShow&&(b.$prevArrow.off("click.slick").on("click.slick",{message:"previous"},b.changeSlide),b.$nextArrow.off("click.slick").on("click.slick",{message:"next"},b.changeSlide))},c.prototype.initDotEvents=function(){var a=this;a.options.dots===!0&&a.slideCount>a.options.slidesToShow&&d("li",a.$dots).on("click.slick",{message:"index"},a.changeSlide),a.options.dots===!0&&a.options.pauseOnDotsHover===!0&&d("li",a.$dots).on("mouseenter.slick",d.proxy(a.interrupt,a,!0)).on("mouseleave.slick",d.proxy(a.interrupt,a,!1))},c.prototype.initSlideEvents=function(){var a=this;a.options.pauseOnHover&&(a.$list.on("mouseenter.slick",d.proxy(a.interrupt,a,!0)),a.$list.on("mouseleave.slick",d.proxy(a.interrupt,a,!1)))},c.prototype.initializeEvents=function(){var a=this;a.initArrowEvents(),a.initDotEvents(),a.initSlideEvents(),a.$list.on("touchstart.slick mousedown.slick",{action:"start"},a.swipeHandler),a.$list.on("touchmove.slick mousemove.slick",{action:"move"},a.swipeHandler),a.$list.on("touchend.slick mouseup.slick",{action:"end"},a.swipeHandler),a.$list.on("touchcancel.slick mouseleave.slick",{action:"end"},a.swipeHandler),a.$list.on("click.slick",a.clickHandler),d(document).on(a.visibilityChange,d.proxy(a.visibility,a)),a.options.accessibility===!0&&a.$list.on("keydown.slick",a.keyHandler),a.options.focusOnSelect===!0&&d(a.$slideTrack).children().on("click.slick",a.selectHandler),d(window).on("orientationchange.slick.slick-"+a.instanceUid,d.proxy(a.orientationChange,a)),d(window).on("resize.slick.slick-"+a.instanceUid,d.proxy(a.resize,a)),d("[draggable!=true]",a.$slideTrack).on("dragstart",a.preventDefault),d(window).on("load.slick.slick-"+a.instanceUid,a.setPosition),d(document).on("ready.slick.slick-"+a.instanceUid,a.setPosition)},c.prototype.initUI=function(){var b=this;b.options.arrows===!0&&b.slideCount>b.options.slidesToShow&&(b.$prevArrow.show(),b.$nextArrow.show()),b.options.dots===!0&&b.slideCount>b.options.slidesToShow&&b.$dots.show()},c.prototype.keyHandler=function(f){var e=this;f.target.tagName.match("TEXTAREA|INPUT|SELECT")||(37===f.keyCode&&e.options.accessibility===!0?e.changeSlide({data:{message:e.options.rtl===!0?"next":"previous"}}):39===f.keyCode&&e.options.accessibility===!0&&e.changeSlide({data:{message:e.options.rtl===!0?"previous":"next"}}))},c.prototype.lazyLoad=function(){function h(b){d("img[data-lazy]",b).each(function(){var m=d(this),g=d(this).attr("data-lazy"),f=document.createElement("img");f.onload=function(){m.animate({opacity:0},100,function(){m.attr("src",g).animate({opacity:1},200,function(){m.removeAttr("data-lazy").removeClass("slick-loading")}),a.$slider.trigger("lazyLoaded",[a,m,g])})},f.onerror=function(){m.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"),a.$slider.trigger("lazyLoadError",[a,m,g])},f.src=g})}var l,k,j,i,a=this;a.options.centerMode===!0?a.options.infinite===!0?(j=a.currentSlide+(a.options.slidesToShow/2+1),i=j+a.options.slidesToShow+2):(j=Math.max(0,a.currentSlide-(a.options.slidesToShow/2+1)),i=2+(a.options.slidesToShow/2+1)+a.currentSlide):(j=a.options.infinite?a.options.slidesToShow+a.currentSlide:a.currentSlide,i=Math.ceil(j+a.options.slidesToShow),a.options.fade===!0&&(j>0&&j--,i<=a.slideCount&&i++)),l=a.$slider.find(".slick-slide").slice(j,i),h(l),a.slideCount<=a.options.slidesToShow?(k=a.$slider.find(".slick-slide"),h(k)):a.currentSlide>=a.slideCount-a.options.slidesToShow?(k=a.$slider.find(".slick-cloned").slice(0,a.options.slidesToShow),h(k)):0===a.currentSlide&&(k=a.$slider.find(".slick-cloned").slice(-1*a.options.slidesToShow),h(k))},c.prototype.loadSlider=function(){var b=this;b.setPosition(),b.$slideTrack.css({opacity:1}),b.$slider.removeClass("slick-loading"),b.initUI(),"progressive"===b.options.lazyLoad&&b.progressiveLazyLoad()},c.prototype.next=c.prototype.slickNext=function(){var b=this;b.changeSlide({data:{message:"next"}})},c.prototype.orientationChange=function(){var b=this;b.checkResponsive(),b.setPosition()},c.prototype.pause=c.prototype.slickPause=function(){var b=this;b.autoPlayClear(),b.paused=!0},c.prototype.play=c.prototype.slickPlay=function(){var b=this;b.autoPlay(),b.options.autoplay=!0,b.paused=!1,b.focussed=!1,b.interrupted=!1},c.prototype.postSlide=function(f){var e=this;e.unslicked||(e.$slider.trigger("afterChange",[e,f]),e.animating=!1,e.setPosition(),e.swipeLeft=null,e.options.autoplay&&e.autoPlay(),e.options.accessibility===!0&&e.initADA())},c.prototype.prev=c.prototype.slickPrev=function(){var b=this;b.changeSlide({data:{message:"previous"}})},c.prototype.preventDefault=function(b){b.preventDefault()},c.prototype.progressiveLazyLoad=function(a){a=a||1;var j,i,h,l=this,k=d("img[data-lazy]",l.$slider);k.length?(j=k.first(),i=j.attr("data-lazy"),h=document.createElement("img"),h.onload=function(){j.attr("src",i).removeAttr("data-lazy").removeClass("slick-loading"),l.options.adaptiveHeight===!0&&l.setPosition(),l.$slider.trigger("lazyLoaded",[l,j,i]),l.progressiveLazyLoad()},h.onerror=function(){3>a?setTimeout(function(){l.progressiveLazyLoad(a+1)},500):(j.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"),l.$slider.trigger("lazyLoadError",[l,j,i]),l.progressiveLazyLoad())},h.src=i):l.$slider.trigger("allImagesLoaded",[l])},c.prototype.refresh=function(a){var g,f,h=this;f=h.slideCount-h.options.slidesToShow,!h.options.infinite&&h.currentSlide>f&&(h.currentSlide=f),h.slideCount<=h.options.slidesToShow&&(h.currentSlide=0),g=h.currentSlide,h.destroy(!0),d.extend(h,h.initials,{currentSlide:g}),h.init(),a||h.changeSlide({data:{message:"index",index:g}},!1)},c.prototype.registerBreakpoints=function(){var j,i,h,a=this,g=a.options.responsive||null;if("array"===d.type(g)&&g.length){a.respondTo=a.options.respondTo||"window";for(j in g){if(h=a.breakpoints.length-1,i=g[j].breakpoint,g.hasOwnProperty(j)){for(;h>=0;){a.breakpoints[h]&&a.breakpoints[h]===i&&a.breakpoints.splice(h,1),h--}a.breakpoints.push(i),a.breakpointSettings[i]=g[j].settings}}a.breakpoints.sort(function(b,e){return a.options.mobileFirst?b-e:e-b})}},c.prototype.reinit=function(){var a=this;a.$slides=a.$slideTrack.children(a.options.slide).addClass("slick-slide"),a.slideCount=a.$slides.length,a.currentSlide>=a.slideCount&&0!==a.currentSlide&&(a.currentSlide=a.currentSlide-a.options.slidesToScroll),a.slideCount<=a.options.slidesToShow&&(a.currentSlide=0),a.registerBreakpoints(),a.setProps(),a.setupInfinite(),a.buildArrows(),a.updateArrows(),a.initArrowEvents(),a.buildDots(),a.updateDots(),a.initDotEvents(),a.cleanUpSlideEvents(),a.initSlideEvents(),a.checkResponsive(!1,!0),a.options.focusOnSelect===!0&&d(a.$slideTrack).children().on("click.slick",a.selectHandler),a.setSlideClasses("number"==typeof a.currentSlide?a.currentSlide:0),a.setPosition(),a.focusHandler(),a.paused=!a.options.autoplay,a.autoPlay(),a.$slider.trigger("reInit",[a])},c.prototype.resize=function(){var a=this;d(window).width()!==a.windowWidth&&(clearTimeout(a.windowDelay),a.windowDelay=window.setTimeout(function(){a.windowWidth=d(window).width(),a.checkResponsive(),a.unslicked||a.setPosition()},50))},c.prototype.removeSlide=c.prototype.slickRemove=function(f,e,h){var g=this;return"boolean"==typeof f?(e=f,f=e===!0?0:g.slideCount-1):f=e===!0?--f:f,g.slideCount<1||0>f||f>g.slideCount-1?!1:(g.unload(),h===!0?g.$slideTrack.children().remove():g.$slideTrack.children(this.options.slide).eq(f).remove(),g.$slides=g.$slideTrack.children(this.options.slide),g.$slideTrack.children(this.options.slide).detach(),g.$slideTrack.append(g.$slides),g.$slidesCache=g.$slides,void g.reinit())},c.prototype.setCSS=function(g){var i,h,f=this,j={};f.options.rtl===!0&&(g=-g),i="left"==f.positionProp?Math.ceil(g)+"px":"0px",h="top"==f.positionProp?Math.ceil(g)+"px":"0px",j[f.positionProp]=g,f.transformsEnabled===!1?f.$slideTrack.css(j):(j={},f.cssTransitions===!1?(j[f.animType]="translate("+i+", "+h+")",f.$slideTrack.css(j)):(j[f.animType]="translate3d("+i+", "+h+", 0px)",f.$slideTrack.css(j)))},c.prototype.setDimensions=function(){var f=this;f.options.vertical===!1?f.options.centerMode===!0&&f.$list.css({padding:"0px "+f.options.centerPadding}):(f.$list.height(f.$slides.first().outerHeight(!0)*f.options.slidesToShow),f.options.centerMode===!0&&f.$list.css({padding:f.options.centerPadding+" 0px"})),f.listWidth=f.$list.width(),f.listHeight=f.$list.height(),f.options.vertical===!1&&f.options.variableWidth===!1?(f.slideWidth=Math.ceil(f.listWidth/f.options.slidesToShow),f.$slideTrack.width(Math.ceil(f.slideWidth*f.$slideTrack.children(".slick-slide").length))):f.options.variableWidth===!0?f.$slideTrack.width(5000*f.slideCount):(f.slideWidth=Math.ceil(f.listWidth),f.$slideTrack.height(Math.ceil(f.$slides.first().outerHeight(!0)*f.$slideTrack.children(".slick-slide").length)));var e=f.$slides.first().outerWidth(!0)-f.$slides.first().width();f.options.variableWidth===!1&&f.$slideTrack.children(".slick-slide").width(f.slideWidth-e)},c.prototype.setFade=function(){var e,a=this;a.$slides.each(function(f,b){e=a.slideWidth*f*-1,a.options.rtl===!0?d(b).css({position:"relative",right:e,top:0,zIndex:a.options.zIndex-2,opacity:0}):d(b).css({position:"relative",left:e,top:0,zIndex:a.options.zIndex-2,opacity:0})}),a.$slides.eq(a.currentSlide).css({zIndex:a.options.zIndex-1,opacity:1})},c.prototype.setHeight=function(){var f=this;if(1===f.options.slidesToShow&&f.options.adaptiveHeight===!0&&f.options.vertical===!1){var e=f.$slides.eq(f.currentSlide).outerHeight(!0);f.$list.css("height",e)}},c.prototype.setOption=c.prototype.slickSetOption=function(){var n,m,l,k,i,a=this,j=!1;if("object"===d.type(arguments[0])?(l=arguments[0],j=arguments[1],i="multiple"):"string"===d.type(arguments[0])&&(l=arguments[0],k=arguments[1],j=arguments[2],"responsive"===arguments[0]&&"array"===d.type(arguments[1])?i="responsive":"undefined"!=typeof arguments[1]&&(i="single")),"single"===i){a.options[l]=k}else{if("multiple"===i){d.each(l,function(b,e){a.options[b]=e})}else{if("responsive"===i){for(m in k){if("array"!==d.type(a.options.responsive)){a.options.responsive=[k[m]]}else{for(n=a.options.responsive.length-1;n>=0;){a.options.responsive[n].breakpoint===k[m].breakpoint&&a.options.responsive.splice(n,1),n--}a.options.responsive.push(k[m])}}}}}j&&(a.unload(),a.reinit())},c.prototype.setPosition=function(){var b=this;b.setDimensions(),b.setHeight(),b.options.fade===!1?b.setCSS(b.getLeft(b.currentSlide)):b.setFade(),b.$slider.trigger("setPosition",[b])},c.prototype.setProps=function(){var f=this,e=document.body.style;f.positionProp=f.options.vertical===!0?"top":"left","top"===f.positionProp?f.$slider.addClass("slick-vertical"):f.$slider.removeClass("slick-vertical"),(void 0!==e.WebkitTransition||void 0!==e.MozTransition||void 0!==e.msTransition)&&f.options.useCSS===!0&&(f.cssTransitions=!0),f.options.fade&&("number"==typeof f.options.zIndex?f.options.zIndex<3&&(f.options.zIndex=3):f.options.zIndex=f.defaults.zIndex),void 0!==e.OTransform&&(f.animType="OTransform",f.transformType="-o-transform",f.transitionType="OTransition",void 0===e.perspectiveProperty&&void 0===e.webkitPerspective&&(f.animType=!1)),void 0!==e.MozTransform&&(f.animType="MozTransform",f.transformType="-moz-transform",f.transitionType="MozTransition",void 0===e.perspectiveProperty&&void 0===e.MozPerspective&&(f.animType=!1)),void 0!==e.webkitTransform&&(f.animType="webkitTransform",f.transformType="-webkit-transform",f.transitionType="webkitTransition",void 0===e.perspectiveProperty&&void 0===e.webkitPerspective&&(f.animType=!1)),void 0!==e.msTransform&&(f.animType="msTransform",f.transformType="-ms-transform",f.transitionType="msTransition",void 0===e.msTransform&&(f.animType=!1)),void 0!==e.transform&&f.animType!==!1&&(f.animType="transform",f.transformType="transform",f.transitionType="transition"),f.transformsEnabled=f.options.useTransform&&null!==f.animType&&f.animType!==!1},c.prototype.setSlideClasses=function(h){var l,k,j,i,g=this;k=g.$slider.find(".slick-slide").removeClass("slick-active slick-center slick-current").attr("aria-hidden","true"),g.$slides.eq(h).addClass("slick-current"),g.options.centerMode===!0?(l=Math.floor(g.options.slidesToShow/2),g.options.infinite===!0&&(h>=l&&h<=g.slideCount-1-l?g.$slides.slice(h-l,h+l+1).addClass("slick-active").attr("aria-hidden","false"):(j=g.options.slidesToShow+h,k.slice(j-l+1,j+l+2).addClass("slick-active").attr("aria-hidden","false")),0===h?k.eq(k.length-1-g.options.slidesToShow).addClass("slick-center"):h===g.slideCount-1&&k.eq(g.options.slidesToShow).addClass("slick-center")),g.$slides.eq(h).addClass("slick-center")):h>=0&&h<=g.slideCount-g.options.slidesToShow?g.$slides.slice(h,h+g.options.slidesToShow).addClass("slick-active").attr("aria-hidden","false"):k.length<=g.options.slidesToShow?k.addClass("slick-active").attr("aria-hidden","false"):(i=g.slideCount%g.options.slidesToShow,j=g.options.infinite===!0?g.options.slidesToShow+h:h,g.options.slidesToShow==g.options.slidesToScroll&&g.slideCount-h<g.options.slidesToShow?k.slice(j-(g.options.slidesToShow-i),j+i).addClass("slick-active").attr("aria-hidden","false"):k.slice(j,j+g.options.slidesToShow).addClass("slick-active").attr("aria-hidden","false")),"ondemand"===g.options.lazyLoad&&g.lazyLoad()},c.prototype.setupInfinite=function(){var h,g,f,a=this;if(a.options.fade===!0&&(a.options.centerMode=!1),a.options.infinite===!0&&a.options.fade===!1&&(g=null,a.slideCount>a.options.slidesToShow)){for(f=a.options.centerMode===!0?a.options.slidesToShow+1:a.options.slidesToShow,h=a.slideCount;h>a.slideCount-f;h-=1){g=h-1,d(a.$slides[g]).clone(!0).attr("id","").attr("data-slick-index",g-a.slideCount).prependTo(a.$slideTrack).addClass("slick-cloned")}for(h=0;f>h;h+=1){g=h,d(a.$slides[g]).clone(!0).attr("id","").attr("data-slick-index",g+a.slideCount).appendTo(a.$slideTrack).addClass("slick-cloned")}a.$slideTrack.find(".slick-cloned").find("[id]").each(function(){d(this).attr("id","")})}},c.prototype.interrupt=function(f){var e=this;f||e.autoPlay(),e.interrupted=f},c.prototype.selectHandler=function(a){var h=this,g=d(a.target).is(".slick-slide")?d(a.target):d(a.target).parents(".slick-slide"),f=parseInt(g.attr("data-slick-index"));return f||(f=0),h.slideCount<=h.options.slidesToShow?(h.setSlideClasses(f),void h.asNavFor(f)):void h.slideHandler(f)},c.prototype.slideHandler=function(t,s,r){var q,p,o,n,k,m=null,l=this;return s=s||!1,l.animating===!0&&l.options.waitForAnimate===!0||l.options.fade===!0&&l.currentSlide===t||l.slideCount<=l.options.slidesToShow?void 0:(s===!1&&l.asNavFor(t),q=t,m=l.getLeft(q),n=l.getLeft(l.currentSlide),l.currentLeft=null===l.swipeLeft?n:l.swipeLeft,l.options.infinite===!1&&l.options.centerMode===!1&&(0>t||t>l.getDotCount()*l.options.slidesToScroll)?void (l.options.fade===!1&&(q=l.currentSlide,r!==!0?l.animateSlide(n,function(){l.postSlide(q)}):l.postSlide(q))):l.options.infinite===!1&&l.options.centerMode===!0&&(0>t||t>l.slideCount-l.options.slidesToScroll)?void (l.options.fade===!1&&(q=l.currentSlide,r!==!0?l.animateSlide(n,function(){l.postSlide(q)}):l.postSlide(q))):(l.options.autoplay&&clearInterval(l.autoPlayTimer),p=0>q?l.slideCount%l.options.slidesToScroll!==0?l.slideCount-l.slideCount%l.options.slidesToScroll:l.slideCount+q:q>=l.slideCount?l.slideCount%l.options.slidesToScroll!==0?0:q-l.slideCount:q,l.animating=!0,l.$slider.trigger("beforeChange",[l,l.currentSlide,p]),o=l.currentSlide,l.currentSlide=p,l.setSlideClasses(l.currentSlide),l.options.asNavFor&&(k=l.getNavTarget(),k=k.slick("getSlick"),k.slideCount<=k.options.slidesToShow&&k.setSlideClasses(l.currentSlide)),l.updateDots(),l.updateArrows(),l.options.fade===!0?(r!==!0?(l.fadeSlideOut(o),l.fadeSlide(p,function(){l.postSlide(p)})):l.postSlide(p),void l.animateHeight()):void (r!==!0?l.animateSlide(m,function(){l.postSlide(p)}):l.postSlide(p))))},c.prototype.startLoad=function(){var b=this;b.options.arrows===!0&&b.slideCount>b.options.slidesToShow&&(b.$prevArrow.hide(),b.$nextArrow.hide()),b.options.dots===!0&&b.slideCount>b.options.slidesToShow&&b.$dots.hide(),b.$slider.addClass("slick-loading")},c.prototype.swipeDirection=function(){var g,f,j,i,h=this;return g=h.touchObject.startX-h.touchObject.curX,f=h.touchObject.startY-h.touchObject.curY,j=Math.atan2(f,g),i=Math.round(180*j/Math.PI),0>i&&(i=360-Math.abs(i)),45>=i&&i>=0?h.options.rtl===!1?"left":"right":360>=i&&i>=315?h.options.rtl===!1?"left":"right":i>=135&&225>=i?h.options.rtl===!1?"right":"left":h.options.verticalSwiping===!0?i>=35&&135>=i?"down":"up":"vertical"},c.prototype.swipeEnd=function(f){var h,g,e=this;if(e.dragging=!1,e.interrupted=!1,e.shouldClick=e.touchObject.swipeLength>10?!1:!0,void 0===e.touchObject.curX){return !1}if(e.touchObject.edgeHit===!0&&e.$slider.trigger("edge",[e,e.swipeDirection()]),e.touchObject.swipeLength>=e.touchObject.minSwipe){switch(g=e.swipeDirection()){case"left":case"down":h=e.options.swipeToSlide?e.checkNavigable(e.currentSlide+e.getSlideCount()):e.currentSlide+e.getSlideCount(),e.currentDirection=0;break;case"right":case"up":h=e.options.swipeToSlide?e.checkNavigable(e.currentSlide-e.getSlideCount()):e.currentSlide-e.getSlideCount(),e.currentDirection=1}"vertical"!=g&&(e.slideHandler(h),e.touchObject={},e.$slider.trigger("swipe",[e,g]))}else{e.touchObject.startX!==e.touchObject.curX&&(e.slideHandler(e.currentSlide),e.touchObject={})}},c.prototype.swipeHandler=function(f){var e=this;if(!(e.options.swipe===!1||"ontouchend" in document&&e.options.swipe===!1||e.options.draggable===!1&&-1!==f.type.indexOf("mouse"))){switch(e.touchObject.fingerCount=f.originalEvent&&void 0!==f.originalEvent.touches?f.originalEvent.touches.length:1,e.touchObject.minSwipe=e.listWidth/e.options.touchThreshold,e.options.verticalSwiping===!0&&(e.touchObject.minSwipe=e.listHeight/e.options.touchThreshold),f.data.action){case"start":e.swipeStart(f);break;case"move":e.swipeMove(f);break;case"end":e.swipeEnd(f)}}},c.prototype.swipeMove=function(j){var o,n,m,l,k,i=this;return k=void 0!==j.originalEvent?j.originalEvent.touches:null,!i.dragging||k&&1!==k.length?!1:(o=i.getLeft(i.currentSlide),i.touchObject.curX=void 0!==k?k[0].pageX:j.clientX,i.touchObject.curY=void 0!==k?k[0].pageY:j.clientY,i.touchObject.swipeLength=Math.round(Math.sqrt(Math.pow(i.touchObject.curX-i.touchObject.startX,2))),i.options.verticalSwiping===!0&&(i.touchObject.swipeLength=Math.round(Math.sqrt(Math.pow(i.touchObject.curY-i.touchObject.startY,2)))),n=i.swipeDirection(),"vertical"!==n?(void 0!==j.originalEvent&&i.touchObject.swipeLength>4&&j.preventDefault(),l=(i.options.rtl===!1?1:-1)*(i.touchObject.curX>i.touchObject.startX?1:-1),i.options.verticalSwiping===!0&&(l=i.touchObject.curY>i.touchObject.startY?1:-1),m=i.touchObject.swipeLength,i.touchObject.edgeHit=!1,i.options.infinite===!1&&(0===i.currentSlide&&"right"===n||i.currentSlide>=i.getDotCount()&&"left"===n)&&(m=i.touchObject.swipeLength*i.options.edgeFriction,i.touchObject.edgeHit=!0),i.options.vertical===!1?i.swipeLeft=o+m*l:i.swipeLeft=o+m*(i.$list.height()/i.listWidth)*l,i.options.verticalSwiping===!0&&(i.swipeLeft=o+m*l),i.options.fade===!0||i.options.touchMove===!1?!1:i.animating===!0?(i.swipeLeft=null,!1):void i.setCSS(i.swipeLeft)):void 0)},c.prototype.swipeStart=function(f){var g,e=this;return e.interrupted=!0,1!==e.touchObject.fingerCount||e.slideCount<=e.options.slidesToShow?(e.touchObject={},!1):(void 0!==f.originalEvent&&void 0!==f.originalEvent.touches&&(g=f.originalEvent.touches[0]),e.touchObject.startX=e.touchObject.curX=void 0!==g?g.pageX:f.clientX,e.touchObject.startY=e.touchObject.curY=void 0!==g?g.pageY:f.clientY,void (e.dragging=!0))},c.prototype.unfilterSlides=c.prototype.slickUnfilter=function(){var b=this;null!==b.$slidesCache&&(b.unload(),b.$slideTrack.children(this.options.slide).detach(),b.$slidesCache.appendTo(b.$slideTrack),b.reinit())},c.prototype.unload=function(){var a=this;d(".slick-cloned",a.$slider).remove(),a.$dots&&a.$dots.remove(),a.$prevArrow&&a.htmlExpr.test(a.options.prevArrow)&&a.$prevArrow.remove(),a.$nextArrow&&a.htmlExpr.test(a.options.nextArrow)&&a.$nextArrow.remove(),a.$slides.removeClass("slick-slide slick-active slick-visible slick-current").attr("aria-hidden","true").css("width","")},c.prototype.unslick=function(f){var e=this;e.$slider.trigger("unslick",[e,f]),e.destroy()},c.prototype.updateArrows=function(){var e,f=this;e=Math.floor(f.options.slidesToShow/2),f.options.arrows===!0&&f.slideCount>f.options.slidesToShow&&!f.options.infinite&&(f.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false"),f.$nextArrow.removeClass("slick-disabled").attr("aria-disabled","false"),0===f.currentSlide?(f.$prevArrow.addClass("slick-disabled").attr("aria-disabled","true"),f.$nextArrow.removeClass("slick-disabled").attr("aria-disabled","false")):f.currentSlide>=f.slideCount-f.options.slidesToShow&&f.options.centerMode===!1?(f.$nextArrow.addClass("slick-disabled").attr("aria-disabled","true"),f.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false")):f.currentSlide>=f.slideCount-1&&f.options.centerMode===!0&&(f.$nextArrow.addClass("slick-disabled").attr("aria-disabled","true"),f.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false")))},c.prototype.updateDots=function(){var b=this;null!==b.$dots&&(b.$dots.find("li").removeClass("slick-active").attr("aria-hidden","true"),b.$dots.find("li").eq(Math.floor(b.currentSlide/b.options.slidesToScroll)).addClass("slick-active").attr("aria-hidden","false"))},c.prototype.visibility=function(){var b=this;b.options.autoplay&&(document[b.hidden]?b.interrupted=!0:b.interrupted=!1)},d.fn.slick=function(){var i,h,b=this,l=arguments[0],k=Array.prototype.slice.call(arguments,1),j=b.length;for(i=0;j>i;i++){if("object"==typeof l||"undefined"==typeof l?b[i].slick=new c(b[i],l):h=b[i].slick[l].apply(b[i].slick,k),"undefined"!=typeof h){return h}}return b}});

/*! lazysizes - v4.1.7 https://github.com/aFarkas/lazysizes  */ 
!function(e,d){var f=d(e,e.document);e.lazySizes=f,"object"==typeof module&&module.exports&&(module.exports=f)}(window,function(al,ak){if(ak.getElementsByClassName){var aj,ai,ah=ak.documentElement,ag=al.Date,af=al.HTMLPictureElement,ae="addEventListener",ad="getAttribute",ac=al[ae],ab=al.setTimeout,aa=al.requestAnimationFrame||ab,Z=al.requestIdleCallback,Y=/^picture$/i,X=["load","error","lazyincluded","_lazyloaded"],W={},U=Array.prototype.forEach,S=function(d,c){return W[c]||(W[c]=new RegExp("(\\s|^)"+c+"(\\s|$)")),W[c].test(d[ad]("class")||"")&&W[c]},Q=function(d,c){S(d,c)||d.setAttribute("class",(d[ad]("class")||"").trim()+" "+c)},O=function(e,d){var f;(f=S(e,d))&&e.setAttribute("class",(e[ad]("class")||"").replace(f," "))},M=function(f,e,h){var g=h?ae:"removeEventListener";h&&M(f,e),X.forEach(function(a){f[g](a,e)})},K=function(b,l,k,j,i){var c=ak.createEvent("Event");return k||(k={}),k.instance=aj,c.initEvent(l,!j,!i),c.detail=k,b.dispatchEvent(c),c},J=function(a,f){var d;!af&&(d=al.picturefill||ai.pf)?(f&&f.src&&!a[ad]("srcset")&&a.setAttribute("srcset",f.src),d({reevaluate:!0,elements:[a]})):f&&f.src&&(a.src=f.src)},I=function(d,c){return(getComputedStyle(d,null)||{})[c]},H=function(e,d,f){for(f=f||e.offsetWidth;f<ai.minSize&&d&&!e._lazysizesWidth;){f=d.offsetWidth,d=d.parentNode}return f},G=function(){var b,n,m=[],l=[],k=m,j=function(){var a=k;for(k=m.length?l:m,b=!0,n=!1;a.length;){a.shift()()}b=!1},i=function(c,a){b&&!a?c.apply(this,arguments):(k.push(c),n||(n=!0,(ak.hidden?ab:aa)(j)))};return i._lsFlush=j,i}(),V=function(d,c){return c?function(){G(d)}:function(){var a=this,e=arguments;G(function(){d.apply(a,e)})}},T=function(f){var d,n=0,m=ai.throttleDelay,l=ai.ricTimeout,k=function(){d=!1,n=ag.now(),f()},j=Z&&l>49?function(){Z(k,{timeout:l}),l!==ai.ricTimeout&&(l=ai.ricTimeout)}:V(function(){ab(k)},!0);return function(b){var c;(b=!0===b)&&(l=33),d||(d=!0,c=m-(ag.now()-n),c<0&&(c=0),b||c<9?j():ab(j,c))}},R=function(h){var f,l,k=99,j=function(){f=null,h()},i=function(){var b=ag.now()-l;b<k?ab(i,k-b):(Z||j)(j)};return function(){l=ag.now(),f||(f=ab(i,k))}};!function(){var a,d={lazyClass:"lazyload",loadedClass:"lazyloaded",loadingClass:"lazyloading",preloadClass:"lazypreload",errorClass:"lazyerror",autosizesClass:"lazyautosizes",srcAttr:"data-src",srcsetAttr:"data-srcset",sizesAttr:"data-sizes",minSize:40,customMedia:{},init:!0,expFactor:1.5,hFac:0.8,loadMode:2,loadHidden:!0,ricTimeout:0,throttleDelay:125};ai=al.lazySizesConfig||al.lazysizesConfig||{};for(a in d){a in ai||(ai[a]=d[a])}al.lazySizesConfig=ai,ab(function(){ai.init&&L()})}();var P=function(){var ar,aq,ap,ao,an,z,am,E,C,B,A,x,w=/^img$/i,v=/^iframe$/i,u="onscroll" in al&&!/(gle|ing)bot/.test(navigator.userAgent),t=0,s=0,r=0,n=-1,k=function(g){r--,(!g||r<0||!g.target)&&(r=0)},j=function(g){return null==x&&(x="hidden"==I(ak.body,"visibility")),x||"hidden"!=I(g.parentNode,"visibility")&&"hidden"!=I(g,"visibility")},h=function(l,y){var p,o=l,m=j(l);for(E-=y,A+=y,C-=y,B+=y;m&&(o=o.offsetParent)&&o!=ak.body&&o!=ah;){(m=(I(o,"opacity")||1)>0)&&"visible"!=I(o,"overflow")&&(p=o.getBoundingClientRect(),m=B>p.left&&C<p.right&&A>p.top-1&&E<p.bottom+1)}return m},f=function(){var ay,ax,aw,av,F,D,y,o,l,g,aB,aA,az=aj.elements;if((ao=ai.loadMode)&&r<8&&(ay=az.length)){for(ax=0,n++,g=!ai.expand||ai.expand<1?ah.clientHeight>500&&ah.clientWidth>500?500:370:ai.expand,aj._defEx=g,aB=g*ai.expFactor,aA=ai.hFac,x=null,s<aB&&r<1&&n>2&&ao>2&&!ak.hidden?(s=aB,n=0):s=ao>1&&n>1&&r<6?g:t;ax<ay;ax++){if(az[ax]&&!az[ax]._lazyRace){if(u){if((o=az[ax][ad]("data-expand"))&&(D=1*o)||(D=s),l!==D&&(z=innerWidth+D*aA,am=innerHeight+D,y=-1*D,l=D),aw=az[ax].getBoundingClientRect(),(A=aw.bottom)>=y&&(E=aw.top)<=am&&(B=aw.right)>=y*aA&&(C=aw.left)<=z&&(A||B||C||E)&&(ai.loadHidden||j(az[ax]))&&(aq&&r<3&&!o&&(ao<3||n<4)||h(az[ax],D))){if(at(az[ax]),F=!0,r>9){break}}else{!F&&aq&&!av&&r<4&&n<4&&ao>2&&(ar[0]||ai.preloadAfterLoad)&&(ar[0]||!o&&(A||B||C||E||"auto"!=az[ax][ad](ai.sizesAttr)))&&(av=ar[0]||az[ax])}}else{at(az[ax])}}}av&&!F&&at(av)}},e=T(f),d=function(l){var g=l.target;if(g._lazyCache){return void delete g._lazyCache}k(l),Q(g,ai.loadedClass),O(g,ai.loadingClass),M(g,b),K(g,"lazyloaded")},c=V(d),b=function(g){c({target:g.target})},a=function(l,g){try{l.contentWindow.location.replace(g)}catch(m){l.src=g}},i=function(l){var g,m=l[ad](ai.srcsetAttr);(g=ai.customMedia[l[ad]("data-media")||l[ad]("media")])&&l.setAttribute("media",g),m&&l.setAttribute("srcset",m)},au=V(function(aB,aA,az,ay,ax){var aw,av,F,D,y,m;(y=K(aB,"lazybeforeunveil",aA)).defaultPrevented||(ay&&(az?Q(aB,ai.autosizesClass):aB.setAttribute("sizes",ay)),av=aB[ad](ai.srcsetAttr),aw=aB[ad](ai.srcAttr),ax&&(F=aB.parentNode,D=F&&Y.test(F.nodeName||"")),m=aA.firesLoad||"src" in aB&&(av||aw||D),y={target:aB},Q(aB,ai.loadingClass),m&&(clearTimeout(ap),ap=ab(k,2500),M(aB,b,!0)),D&&U.call(F.getElementsByTagName("source"),i),av?aB.setAttribute("srcset",av):aw&&!D&&(v.test(aB.nodeName)?a(aB,aw):aB.src=aw),ax&&(av||D)&&J(aB,{src:aw})),aB._lazyRace&&delete aB._lazyRace,O(aB,ai.lazyClass),G(function(){(!m||aB.complete&&aB.naturalWidth>1)&&(d(y),aB._lazyCache=!0,ab(function(){"_lazyCache" in aB&&delete aB._lazyCache},9))},!0)}),at=function(l){var g,p=w.test(l.nodeName),o=p&&(l[ad](ai.sizesAttr)||l[ad]("sizes")),m="auto"==o;(!m&&aq||!p||!l[ad]("src")&&!l.srcset||l.complete||S(l,ai.errorClass)||!S(l,ai.lazyClass))&&(g=K(l,"lazyunveilread").detail,m&&N.updateElem(l,!0,l.offsetWidth),l._lazyRace=!0,r++,au(l,g,m,o,p))},q=function(){if(!aq){if(ag.now()-an<999){return void ab(q,999)}var g=R(function(){ai.loadMode=3,e()});aq=!0,ai.loadMode=3,e(),ac("scroll",function(){3==ai.loadMode&&(ai.loadMode=2),g()},!0)}};return{_:function(){an=ag.now(),aj.elements=ak.getElementsByClassName(ai.lazyClass),ar=ak.getElementsByClassName(ai.lazyClass+" "+ai.preloadClass),ac("scroll",e,!0),ac("resize",e,!0),al.MutationObserver?new MutationObserver(e).observe(ah,{childList:!0,subtree:!0,attributes:!0}):(ah[ae]("DOMNodeInserted",e,!0),ah[ae]("DOMAttrModified",e,!0),setInterval(e,999)),ac("hashchange",e,!0),["focus","mouseover","click","load","transitionend","animationend","webkitAnimationEnd"].forEach(function(g){ak[ae](g,e,!0)}),/d$|^c/.test(ak.readyState)?q():(ac("load",q),ak[ae]("DOMContentLoaded",e),ab(q,20000)),aj.elements.length?(f(),G._lsFlush()):e()},checkElems:e,unveil:at}}(),N=function(){var b,j=V(function(l,k,q,p){var o,n,m;if(l._lazysizesWidth=p,p+="px",l.setAttribute("sizes",p),Y.test(k.nodeName||"")){for(o=k.getElementsByTagName("source"),n=0,m=o.length;n<m;n++){o[n].setAttribute("sizes",p)}}q.detail.dataAttr||J(l,q.detail)}),i=function(g,c,m){var l,k=g.parentNode;k&&(m=H(g,k,m),l=K(g,"lazybeforesizes",{width:m,dataAttr:!!c}),l.defaultPrevented||(m=l.detail.width)&&m!==g._lazysizesWidth&&j(g,k,l,m))},h=function(){var a,e=b.length;if(e){for(a=0;a<e;a++){i(b[a])}}},d=R(h);return{_:function(){b=ak.getElementsByClassName(ai.autosizesClass),ac("resize",d)},checkElems:d,updateElem:i}}(),L=function(){L.i||(L.i=!0,N._(),P._())};return aj={cfg:ai,autoSizer:N,loader:P,init:L,uP:J,aC:Q,rC:O,hC:S,fire:K,gW:H,rAF:G}}});

function closePopup(id){
	var elements = document.getElementById(id);
	console.log(elements);
	elements.classList.remove("active");	
}
function openPopup(id){
	var elements = document.getElementById(id);
	console.log(elements);
	addClass(elements,"active");	
}
function addClass(element, classname){
    var currentClassList = (element.className || '').split(/\s+/);
    currentClassList
     .push(currentClassList.indexOf(classname) > -1 ? '' : classname);
    element.className = currentClassList.join(' ').trim();
}


/* load new background-image */

/* support for background images: */
document.addEventListener('lazybeforeunveil', function (e) {
	var bg = e.target.getAttribute('data-bg');
	if (bg) e.target.style.backgroundImage = 'url(' + bg + ')';
});

function loadImg(element){
    var bg = '';
	switch (screenW) {
		case  'mobile':
			bg = element.getAttribute('data-bg-mobile');
			if(bg)
				break; 
		case 'tablet':
			bg = element.getAttribute('data-bg-tablet');
			if(bg)
				break; 
		case 'laptop':
			bg = element.getAttribute('data-bg-laptop');
			if(bg)
				break; 
		default: 
			bg = element.getAttribute('data-bg');
	}
	if(bg)
		element.style.backgroundImage = 'url(' + bg + ')';	
}
/* calc screen wide */
var screenW;
var first = true;
jQuery(window).on('resize', function(){
	calcScreenW();
});
function calcScreenW(){
	var screenC = false;
	curentW= jQuery(window).width();	
	if ( curentW > 1450 ) { 
		if (screenW != 'desktop'){
			screenW = 'desktop';	
			screenC = true;
		}
	} else if (curentW > 973){
		if (screenW != 'laptop'){
			screenW = 'laptop';	
			screenC = true;
		}		
	} else if (curentW >767){
		if (screenW != 'tablet'){
			screenW = 'tablet';	
			screenC = true;
		}		
	} else {
		if (screenW != 'mobile'){
			screenW = 'mobile';	
			screenC = true;
		}		
	}
	if (screenC) {
		jQuery('.bg-change-done').removeClass('bg-change-done');
		screenC = false;
		animate_elems();
	}
}
/* lazyLoad on scroll after  screen width change */
var $elems = jQuery('.responsive-bg');
var winheight = jQuery(window).height();
jQuery(window).scroll(function(){
	animate_elems();
});
function animate_elems() {
	wintop = jQuery(window).scrollTop(); // calculate distance from top of window
	// loop through each item to check when it animates
	$elems.each(function(){
		$elm = jQuery(this);
		if($elm.hasClass('lazyload')|| $elm.hasClass('bg-change-done')) { return true; } // if already animated skip to the next item

		topcoords = $elm.offset().top; // element's distance from top of page in pixels

		if(wintop > (topcoords - (winheight))) {			
			$elm.addClass('bg-change-done');		
			loadImg($elm[0]);
		} 
	});	
}
</script>

<div class="popup" id="subscribe-us-popup" >
	<div class="bg-for-close-popup" onclick="closePopup('subscribe-us-popup')"></div>
	<div class="inner">
		<div class="box">
			<div class="content">
				<div class="content-row">
					<div class="flex-6 col-image">
												<div class="image">
							<img src="https://research.checkpoint.com/wp-content/uploads/2022/10/popup-side-image.jpg" alt="" />
						</div>
											</div>
					<div class="flex-6 col-form text-black">
						<div class="popup-form-outer">
							<h2 style="text-align: center;">SUBSCRIBE TO CYBER INTELLIGENCE REPORTS</h2>

<div class="wpcf7 no-js" id="wpcf7-f26727-o1" lang="en-US" dir="ltr">
<div class="screen-reader-response"><p role="status" aria-live="polite" aria-atomic="true"></p> <ul></ul></div>
<form action="/2023/dotrunpex-demystifying-new-virtualized-net-injector-used-in-the-wild/#wpcf7-f26727-o1" method="post" class="wpcf7-form init demo" aria-label="Contact form" novalidate="novalidate" data-status="init">
<div style="display: none;">
<input type="hidden" name="_wpcf7" value="26727" />
<input type="hidden" name="_wpcf7_version" value="5.9.8" />
<input type="hidden" name="_wpcf7_locale" value="en_US" />
<input type="hidden" name="_wpcf7_unit_tag" value="wpcf7-f26727-o1" />
<input type="hidden" name="_wpcf7_container_post" value="0" />
<input type="hidden" name="_wpcf7_posted_data_hash" value="" />
</div>
<div class="contact-form-outer">
	<div class="flex-row">
		<div class="flex-12">
			<div class="col-margin">
				<p><label>First Name<span class="wpcf7-form-control-wrap" data-name="your-first-name"><input size="40" maxlength="400" class="wpcf7-form-control wpcf7-text wpcf7-validates-as-required form-control" aria-required="true" aria-invalid="false" value="" type="text" name="your-first-name" /></span></label>
				</p>
			</div>
		</div>
		<div class="flex-12">
			<div class="col-margin">
				<p><label>Last Name<span class="wpcf7-form-control-wrap" data-name="your-last-name"><input size="40" maxlength="400" class="wpcf7-form-control wpcf7-text wpcf7-validates-as-required form-control" aria-required="true" aria-invalid="false" value="" type="text" name="your-last-name" /></span></label>
				</p>
			</div>
		</div>
		<div class="flex-12">
			<div class="col-margin">
				<p><label>Country<span class="wpcf7-form-control-wrap" data-name="country"><select class="wpcf7-form-control wpcf7-select classform-control" aria-invalid="false" name="country"><option value="">&#8212;Please choose an option&#8212;</option><option value="China">China</option><option value="India">India</option><option value="United States">United States</option><option value="Indonesia">Indonesia</option><option value="Brazil">Brazil</option><option value="Pakistan">Pakistan</option><option value="Nigeria">Nigeria</option><option value="Bangladesh">Bangladesh</option><option value="Russia">Russia</option><option value="Japan">Japan</option><option value="Mexico">Mexico</option><option value="Philippines">Philippines</option><option value="Vietnam">Vietnam</option><option value="Ethiopia">Ethiopia</option><option value="Egypt">Egypt</option><option value="Germany">Germany</option><option value="Iran">Iran</option><option value="Turkey">Turkey</option><option value="Democratic Republic of the Congo">Democratic Republic of the Congo</option><option value="Thailand">Thailand</option><option value="France">France</option><option value="United Kingdom">United Kingdom</option><option value="Italy">Italy</option><option value="Burma">Burma</option><option value="South Africa">South Africa</option><option value="South Korea">South Korea</option><option value="Colombia">Colombia</option><option value="Spain">Spain</option><option value="Ukraine">Ukraine</option><option value="Tanzania">Tanzania</option><option value="Kenya">Kenya</option><option value="Argentina">Argentina</option><option value="Algeria">Algeria</option><option value="Poland">Poland</option><option value="Sudan">Sudan</option><option value="Uganda">Uganda</option><option value="Canada">Canada</option><option value="Iraq">Iraq</option><option value="Morocco">Morocco</option><option value="Peru">Peru</option><option value="Uzbekistan">Uzbekistan</option><option value="Saudi Arabia">Saudi Arabia</option><option value="Malaysia">Malaysia</option><option value="Venezuela">Venezuela</option><option value="Nepal">Nepal</option><option value="Afghanistan">Afghanistan</option><option value="Yemen">Yemen</option><option value="North Korea">North Korea</option><option value="Ghana">Ghana</option><option value="Mozambique">Mozambique</option><option value="Taiwan">Taiwan</option><option value="Australia">Australia</option><option value="Ivory Coast">Ivory Coast</option><option value="Syria">Syria</option><option value="Madagascar">Madagascar</option><option value="Angola">Angola</option><option value="Cameroon">Cameroon</option><option value="Sri Lanka">Sri Lanka</option><option value="Romania">Romania</option><option value="Burkina Faso">Burkina Faso</option><option value="Niger">Niger</option><option value="Kazakhstan">Kazakhstan</option><option value="Netherlands">Netherlands</option><option value="Chile">Chile</option><option value="Malawi">Malawi</option><option value="Ecuador">Ecuador</option><option value="Guatemala">Guatemala</option><option value="Mali">Mali</option><option value="Cambodia">Cambodia</option><option value="Senegal">Senegal</option><option value="Zambia">Zambia</option><option value="Zimbabwe">Zimbabwe</option><option value="Chad">Chad</option><option value="South Sudan">South Sudan</option><option value="Belgium">Belgium</option><option value="Cuba">Cuba</option><option value="Tunisia">Tunisia</option><option value="Guinea">Guinea</option><option value="Greece">Greece</option><option value="Portugal">Portugal</option><option value="Rwanda">Rwanda</option><option value="Czech Republic">Czech Republic</option><option value="Somalia">Somalia</option><option value="Haiti">Haiti</option><option value="Benin">Benin</option><option value="Burundi">Burundi</option><option value="Bolivia">Bolivia</option><option value="Hungary">Hungary</option><option value="Sweden">Sweden</option><option value="Belarus">Belarus</option><option value="Dominican Republic">Dominican Republic</option><option value="Azerbaijan">Azerbaijan</option><option value="Honduras">Honduras</option><option value="Austria">Austria</option><option value="United Arab Emirates">United Arab Emirates</option><option value="Israel">Israel</option><option value="Switzerland">Switzerland</option><option value="Tajikistan">Tajikistan</option><option value="Bulgaria">Bulgaria</option><option value="Hong Kong (China)">Hong Kong (China)</option><option value="Serbia">Serbia</option><option value="Papua New Guinea">Papua New Guinea</option><option value="Paraguay">Paraguay</option><option value="Laos">Laos</option><option value="Jordan">Jordan</option><option value="El Salvador">El Salvador</option><option value="Eritrea">Eritrea</option><option value="Libya">Libya</option><option value="Togo">Togo</option><option value="Sierra Leone">Sierra Leone</option><option value="Nicaragua">Nicaragua</option><option value="Kyrgyzstan">Kyrgyzstan</option><option value="Denmark">Denmark</option><option value="Finland">Finland</option><option value="Slovakia">Slovakia</option><option value="Singapore">Singapore</option><option value="Turkmenistan">Turkmenistan</option><option value="Norway">Norway</option><option value="Lebanon">Lebanon</option><option value="Costa Rica">Costa Rica</option><option value="Central African Republic">Central African Republic</option><option value="Ireland">Ireland</option><option value="Georgia">Georgia</option><option value="New Zealand">New Zealand</option><option value="Republic of the Congo">Republic of the Congo</option><option value="Palestine">Palestine</option><option value="Liberia">Liberia</option><option value="Croatia">Croatia</option><option value="Oman">Oman</option><option value="Bosnia and Herzegovina">Bosnia and Herzegovina</option><option value="Puerto Rico">Puerto Rico</option><option value="Kuwait">Kuwait</option><option value="Moldov">Moldov</option><option value="Mauritania">Mauritania</option><option value="Panama">Panama</option><option value="Uruguay">Uruguay</option><option value="Armenia">Armenia</option><option value="Lithuania">Lithuania</option><option value="Albania">Albania</option><option value="Mongolia">Mongolia</option><option value="Jamaica">Jamaica</option><option value="Namibia">Namibia</option><option value="Lesotho">Lesotho</option><option value="Qatar">Qatar</option><option value="Macedonia">Macedonia</option><option value="Slovenia">Slovenia</option><option value="Botswana">Botswana</option><option value="Latvia">Latvia</option><option value="Gambia">Gambia</option><option value="Kosovo">Kosovo</option><option value="Guinea-Bissau">Guinea-Bissau</option><option value="Gabon">Gabon</option><option value="Equatorial Guinea">Equatorial Guinea</option><option value="Trinidad and Tobago">Trinidad and Tobago</option><option value="Estonia">Estonia</option><option value="Mauritius">Mauritius</option><option value="Swaziland">Swaziland</option><option value="Bahrain">Bahrain</option><option value="Timor-Leste">Timor-Leste</option><option value="Djibouti">Djibouti</option><option value="Cyprus">Cyprus</option><option value="Fiji">Fiji</option><option value="Reunion (France)">Reunion (France)</option><option value="Guyana">Guyana</option><option value="Comoros">Comoros</option><option value="Bhutan">Bhutan</option><option value="Montenegro">Montenegro</option><option value="Macau (China)">Macau (China)</option><option value="Solomon Islands">Solomon Islands</option><option value="Western Sahara">Western Sahara</option><option value="Luxembourg">Luxembourg</option><option value="Suriname">Suriname</option><option value="Cape Verde">Cape Verde</option><option value="Malta">Malta</option><option value="Guadeloupe (France)">Guadeloupe (France)</option><option value="Martinique (France)">Martinique (France)</option><option value="Brunei">Brunei</option><option value="Bahamas">Bahamas</option><option value="Iceland">Iceland</option><option value="Maldives">Maldives</option><option value="Belize">Belize</option><option value="Barbados">Barbados</option><option value="French Polynesia (France)">French Polynesia (France)</option><option value="Vanuatu">Vanuatu</option><option value="New Caledonia (France)">New Caledonia (France)</option><option value="French Guiana (France)">French Guiana (France)</option><option value="Mayotte (France)">Mayotte (France)</option><option value="Samoa">Samoa</option><option value="Sao Tom and Principe">Sao Tom and Principe</option><option value="Saint Lucia">Saint Lucia</option><option value="Guam (USA)">Guam (USA)</option><option value="Curacao (Netherlands)">Curacao (Netherlands)</option><option value="Saint Vincent and the Grenadines">Saint Vincent and the Grenadines</option><option value="Kiribati">Kiribati</option><option value="United States Virgin Islands (USA)">United States Virgin Islands (USA)</option><option value="Grenada">Grenada</option><option value="Tonga">Tonga</option><option value="Aruba (Netherlands)">Aruba (Netherlands)</option><option value="Federated States of Micronesia">Federated States of Micronesia</option><option value="Jersey (UK)">Jersey (UK)</option><option value="Seychelles">Seychelles</option><option value="Antigua and Barbuda">Antigua and Barbuda</option><option value="Isle of Man (UK)">Isle of Man (UK)</option><option value="Andorra">Andorra</option><option value="Dominica">Dominica</option><option value="Bermuda (UK)">Bermuda (UK)</option><option value="Guernsey (UK)">Guernsey (UK)</option><option value="Greenland (Denmark)">Greenland (Denmark)</option><option value="Marshall Islands">Marshall Islands</option><option value="American Samoa (USA)">American Samoa (USA)</option><option value="Cayman Islands (UK)">Cayman Islands (UK)</option><option value="Saint Kitts and Nevis">Saint Kitts and Nevis</option><option value="Northern Mariana Islands (USA)">Northern Mariana Islands (USA)</option><option value="Faroe Islands (Denmark)">Faroe Islands (Denmark)</option><option value="Sint Maarten (Netherlands)">Sint Maarten (Netherlands)</option><option value="Saint Martin (France)">Saint Martin (France)</option><option value="Liechtenstein">Liechtenstein</option><option value="Monaco">Monaco</option><option value="San Marino">San Marino</option><option value="Turks and Caicos Islands (UK)">Turks and Caicos Islands (UK)</option><option value="Gibraltar (UK)">Gibraltar (UK)</option><option value="British Virgin Islands (UK)">British Virgin Islands (UK)</option><option value="Aland Islands (Finland)">Aland Islands (Finland)</option><option value="Caribbean Netherlands (Netherlands)">Caribbean Netherlands (Netherlands)</option><option value="Palau">Palau</option><option value="Cook Islands (NZ)">Cook Islands (NZ)</option><option value="Anguilla (UK)">Anguilla (UK)</option><option value="Wallis and Futuna (France)">Wallis and Futuna (France)</option><option value="Tuvalu">Tuvalu</option><option value="Nauru">Nauru</option><option value="Saint Barthelemy (France)">Saint Barthelemy (France)</option><option value="Saint Pierre and Miquelon (France)">Saint Pierre and Miquelon (France)</option><option value="Montserrat (UK)">Montserrat (UK)</option><option value="Saint Helena, Ascension and Tristan da Cunha (UK)">Saint Helena, Ascension and Tristan da Cunha (UK)</option><option value="Svalbard and Jan Mayen (Norway)">Svalbard and Jan Mayen (Norway)</option><option value="Falkland Islands (UK)">Falkland Islands (UK)</option><option value="Norfolk Island (Australia)">Norfolk Island (Australia)</option><option value="Christmas Island (Australia)">Christmas Island (Australia)</option><option value="Niue (NZ)">Niue (NZ)</option><option value="Tokelau (NZ)">Tokelau (NZ)</option><option value="Vatican City">Vatican City</option><option value="Cocos (Keeling) Islands (Australia)">Cocos (Keeling) Islands (Australia)</option><option value="Pitcairn Islands (UK)">Pitcairn Islands (UK)</option></select></span></label>
				</p>
			</div>
		</div>
		<div class="flex-12">
			<div class="col-margin">
				<p><label>Email<span class="wpcf7-form-control-wrap" data-name="your-email"><input size="40" maxlength="400" class="wpcf7-form-control wpcf7-email wpcf7-validates-as-required wpcf7-text wpcf7-validates-as-email form-control" aria-required="true" aria-invalid="false" value="" type="email" name="your-email" /></span></label>
				</p>
			</div>
		</div>
		<div class="flex-12">
			<div class="col-margin">
				<div class="button-wrap center relative">
					<p><input class="wpcf7-form-control wpcf7-submit has-spinner button font-white" type="submit" value="SUBMIT" />
					</p>
				</div>
			</div>
		</div>
	</div>
</div><div class="wpcf7-response-output" aria-hidden="true"></div>
</form>
</div>

						</div>
					</div>
				</div>
			</div>
			<div class="close-button" onclick="closePopup('subscribe-us-popup')">
				<svg style="fill: currentColor;" xmlns="https://www.w3.org/2000/svg" width="11.547" height="11.547" viewBox="0 0 11.547 11.547">
				<path id="close" d="M10.557.6l-.6-.6L5.278,4.675.6,0,0,.6,4.675,5.278,0,9.953l.6.6L5.278,5.882l4.675,4.675.6-.6L5.882,5.278Z" transform="translate(0.495 0.495)" fill="#fff" stroke="#fff" stroke-width="0.7"/>
				</svg>
			</div>
		</div>
	</div>
</div>


<div id="cookies-notice" class="cookies-notice background-white" style="display:none;">
	<div class="container container-wide">
		<div class="flex-row">
			<div class="flex-8">
				<div class="text text-black"><h2>We value your privacy!</h2>
<p>BFSI uses cookies on this site. We use cookies to enable faster and easier experience for you. By continuing to visit this website you agree to our use of cookies.</p>
				</div>
			</div>
			<div class="flex-4">
				<div class="button-wrap justify-content-end">
					<div id="cn-accept-cookies" class="button font-white background-skyblue skyblue-border margin-right">ACCEPT</div>
					<div  class="button transparent cookie-close font-white skyblue-border skyblue-font">REJECT</div>
				</div>
			</div>
			<div class="close-button cookie-close svg">
				<svg xmlns="http://www.w3.org/2000/svg" width="16.828" height="16.828" viewBox="0 0 16.828 16.828">
					<g id="Group_163304" data-name="Group 163304" transform="translate(1.414 1.414)"><line id="Line_323" data-name="Line 323" x2="14" y2="14" fill="none" stroke="#fff" stroke-linecap="round" stroke-width="2"/><line id="Line_324" data-name="Line 324" x1="14" y2="14" fill="none" stroke="#fff" stroke-linecap="round" stroke-width="2"/></g></svg>
				</div>
			</div>
		</div>
	</div>
</div>
<script>
/*remove cooki msg*/
jQuery(document).ready(function(){

	user=getCookie("username2");
	if (user == "") {
		jQuery('#cookies-notice').show();
	} 
	
	function setCookie(cname,cvalue,exdays) {
		var d = new Date();
		d.setTime(d.getTime() + (exdays*24*60*60*1000));
		var expires = "expires=" + d.toGMTString();
		document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
	}

	function getCookie(cname) {
	  var name = cname + "=";
	  var decodedCookie = decodeURIComponent(document.cookie);
	  var ca = decodedCookie.split(';');
	  for(var i = 0; i < ca.length; i++) {
		var c = ca[i];
		while (c.charAt(0) == ' ') {
		  c = c.substring(1);
		}
		if (c.indexOf(name) == 0) {
		  return c.substring(name.length, c.length);
		}
	  }
	  return "";
	}

	jQuery('#cn-accept-cookies').click(function(){
		
		user=getCookie("username2");
		user = "second visit";
		if (user != "" && user != null) {
			setCookie("username2", user, 30);
		}
		jQuery('#cookies-notice').remove();
		
	});

	jQuery('.cookie-close').click(function(){
		jQuery('#cookies-notice').remove();
	});

});
</script><script src="https://cdn.jsdelivr.net/npm/sharer.js@latest/sharer.min.js"></script>
<script type="text/javascript" src="https://research.checkpoint.com/wp-content/plugins/contact-form-7/includes/swv/js/index.js?ver=5.9.8" id="swv-js"></script>
<script type="text/javascript" id="contact-form-7-js-extra">
/* <![CDATA[ */
var wpcf7 = {"api":{"root":"https:\/\/research.checkpoint.com\/wp-json\/","namespace":"contact-form-7\/v1"},"cached":"1"};
/* ]]> */
</script>
<script type="text/javascript" src="https://research.checkpoint.com/wp-content/plugins/contact-form-7/includes/js/index.js?ver=5.9.8" id="contact-form-7-js"></script>
<script type="text/javascript" id="email-subscribers-js-extra">
/* <![CDATA[ */
var es_data = {"messages":{"es_empty_email_notice":"Please enter email address","es_rate_limit_notice":"You need to wait for some time before subscribing again","es_single_optin_success_message":"Successfully Subscribed.","es_email_exists_notice":"Email Address already exists!","es_unexpected_error_notice":"Oops.. Unexpected error occurred.","es_invalid_email_notice":"Invalid email address","es_try_later_notice":"Please try after some time"},"es_ajax_url":"https:\/\/research.checkpoint.com\/wp-admin\/admin-ajax.php"};
/* ]]> */
</script>
<script type="text/javascript" src="https://research.checkpoint.com/wp-content/plugins/email-subscribers/lite/public/js/email-subscribers-public.js?ver=5.7.36" id="email-subscribers-js"></script>
<script type="text/javascript" src="https://research.checkpoint.com/wp-content/themes/research-th/js/main.js?ver=1.08" id="main-js-js"></script>
<script type="text/javascript" src="https://research.checkpoint.com/wp-content/plugins/enlighter/cache/enlighterjs.min.js?ver=lB++6JpXuZRbV9F" id="enlighterjs-js"></script>
<script type="text/javascript" id="enlighterjs-js-after">
/* <![CDATA[ */
!function(e,n){if("undefined"!=typeof EnlighterJS){var o={"selectors":{"block":"pre.EnlighterJSRAW","inline":"code.EnlighterJSRAW"},"options":{"indent":4,"ampersandCleanup":true,"linehover":true,"rawcodeDbclick":false,"textOverflow":"break","linenumbers":true,"theme":"dracula","language":"enlighter","retainCssClasses":false,"collapse":false,"toolbarOuter":"","toolbarTop":"{BTN_RAW}{BTN_COPY}{BTN_WINDOW}{BTN_WEBSITE}","toolbarBottom":""}};(e.EnlighterJSINIT=function(){EnlighterJS.init(o.selectors.block,o.selectors.inline,o.options)})()}else{(n&&(n.error||n.log)||function(){})("Error: EnlighterJS resources not loaded yet!")}}(window,console);
/* ]]> */
</script>
<style>
.text label {
    color: #fff;
}
.mktoButtonWrap.mktoCleanGray {
	margin-left: 120px!important;
}
.mktoButtonWrap.mktoCleanGray .mktoButton:hover,
.mktoButtonWrap.mktoCleanGray .mktoButton:active,
.mktoButtonWrap.mktoCleanGray .mktoButton:focus,
.mktoButtonWrap.mktoCleanGray .mktoButton {
	border: 0!important;
	border-radius: 7px!important;
	background: #6C6CFF!important;
    color: #fff!important;
	font-weight: 400!important;
}
</style>
</body>
</html>