<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <title>Malware.lu - Xtreme RAT analysis</title>
    <meta name="description" content="">
    
    <meta name="generator" content="nanoc 3.7.5">
    <link href="/assets/css/bootstrap.min.css" rel="stylesheet">
    <link href="//netdna.bootstrapcdn.com/font-awesome/4.0.3/css/font-awesome.css" rel="stylesheet">
    <link href="/assets/css/local.css" rel="stylesheet">
    <script type="text/javascript" src="/assets/js/jquery-2.0.3.min.js"></script>
    <script type="text/javascript" src="/assets/js/bootstrap.min.js"></script>
</head>
<body>
  <nav id="nav_main" class="navbar navbar-inverse" role="navigation">
    <div class="container">
      <!-- Brand and toggle get grouped for better mobile display -->
      <div class="navbar-header">
        <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-ex1-collapse">
          <span class="sr-only">Toggle navigation</span>
          <span class="icon-bar"></span>
          <span class="icon-bar"></span>
          <span class="icon-bar"></span>
        </button>
        <a href="/"><img class="brand" src="/assets/images/logo.png" style="width: 50px;"></a>
      </div>

      <!-- Collect the nav links, forms, and other content for toggling -->
      <div class="collapse navbar-collapse">
        <ul class="nav navbar-nav navbar-right" >
            <li><a href="/articles/">Articles</a></li>
            <li><a href="https://avcaesar.malware.lu/">Malware repository</a></li>
            <li><a href="/about/cert.html">CERT</a></li>
            <li><a href="/services/">Services</a></li>
            <li><a href="/about/">About</a></li>
        </ul>
      </div><!-- /.navbar-collapse -->
    </div>
  </nav>

<div style="background-color:#dbdbdb;" >
    <div class="container" style="padding-bottom:10px;" >
        <h1>Xtreme RAT analysis</h1>
        Published on 2012-07-22 14:00:00.
    </div>
</div>
<div class="container" style="margin-top:10px;" >
    
<p>We received an email with an invoice from Apple (in french).</p>

<p>Of course we never bought something from Apple!!!!</p>

<p>The link of the invoice seems to be : http://www.apple.com/clients/download/facture50522231823v.zip</p>

<p>But when we put our mouse on the link we can see the real link: http://editionslabonte.com/plugins/Facture147778.zip</p>

<p>We think that the Website âeditionslabonte.comâ was compromised and the attacker puts the malware on it. We sent an email to the administrator and we do not have a feedback for the moment.
<img src="/assets/files/articles/0010-xtreme_rat/img/email.png" alt="image" /></p>

<h2 id="tools">Tools</h2>

<ul>
  <li>A debugger for dynamic analysis (in our case <a href="http://www.ollydbg.de/">OllyDbg</a>)</li>
  <li><a href="http://www.woodmann.com/collaborative/tools/index.php/LordPE">LordPE</a> in order to dump a memory page</li>
  <li><a href="https://www.volatilesystems.com/default/volatility.html">Volatility</a> in order to analyse memory dump</li>
</ul>

<h2 id="zip-archive">Zip archive</h2>

<p>The md5 of the archive is e0aa33dc57aa3eee43cb61933eb3241c.</p>

<p>Virustotal score : <a href="https://www.virustotal.com/file/d897f2b82615af1173a97ba21f90a6be1d19d13643afecc29bcd0d7999e3d6ea/analysis/1342816045/">5/42</a></p>

<p>So we downloaded the .zip file.</p>

<pre><code>rootbsd@alien:~/Samples$ unzip -l Facture147778.zip 
Archive:  Facture147778.zip
  Length      Date    Time    Name
---------  ---------- -----   ----
   176128  2012-07-14 03:05   Facture147778.pdf            .scr
---------                     -------
   176128                     1 file
</code></pre>

<p>The .zip contains one file. To trick the user, the attacker adds several space before the extension .scr, some users may thought that the file is really a .pdf.</p>

<h2 id="first-binary">First binary</h2>

<pre><code>rootbsd@alien:~/Samples$ yara -r packer.yara Facture147778.pdf\ \ \ \ \ \ \ \ \ \ \ \ .scr 
java Facture147778.pdf            .scr
NETexecutableMicrosoft Facture147778.pdf            .scr
</code></pre>

<p>The file is a .NET binary.</p>

<p>With the strings command, we find somethink that looks like a base64.</p>

<p>We extract the base64 :</p>

<pre><code>rootbsd@alien:~/Samples$ cat base64.dmp 
TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAA4AAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAACZtmjHqtcGlN3XBpTd1waUpssKlNzXBpReywiU3NcGlDXIDJTW1waUNcgC
lNnXBpQe2FuU1NcGlN3XB5Tg1waUNcgNlNzXBpRl0QCU3NcGlFJpY2jd1waUAAAAAAAAAABQRQAA
TAEEAKYPc0oAAAAAAAAAAOAADwELAQYAAEIAAACUAAAAAAAAdE8AAAAQAAAAYAAAAABAAAAQAAAA
AgAABAAAAAAAAAAEAAAAAAAAAAAQAQAABAAAAAAAAAIAAAAAABAAABAAAAAAEAAAEAAAAAAAABAA
[...]
W1EPulAAAAIAAQAgAEAAAQABADQBAAAFAAAAAQAEACAgEAABAAQA6AIAAAEAEBAQAAEABAAoAQAA
AgAgIAAAAQAgAKgQAAADABAQAAABACAAaAQAAAMAUEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAA=
</code></pre>

<p>We decode this file.</p>

<pre><code>rootbsd@alien:~/Samples$ cat base64.dmp | base64 -d &gt; base64.out
rootbsd@alien:~/Samples$ file base64.out
base64.out: PE32 executable for MS Windows (GUI) Intel 80386 32-bit
</code></pre>

<p>This base64 is a PE32 executable.</p>

<h2 id="second-binary">Second binary</h2>

<p>We use yara to identify the binary:</p>

<pre><code>rootbsd@alien:~/Samples$ yara -r packer.yara base64.out 
rootbsd@alien:~/Samples$
</code></pre>

<p>This binary doesnât use a well-known packer. So we decided to unpack it manually.</p>

<p>To unpack it, we use OllyDBG.</p>

<p>We are suprised by a lot of exception when we tried to debug the sample.</p>

<p>In fact this malware volontary uses and traps exceptions to be unpacked.</p>

<p>So as usual, we add breakpoint on VirtualAlloc &amp; VirtualAllocEx calls:</p>

<ul>
  <li>
    <p>View</p>
  </li>
  <li>
    <p>Executable modules</p>
  </li>
  <li>
    <p>right click on kernel32.dll -&gt; View names</p>
  </li>
  <li>
    <p>F2 on VirtualAlloc &amp; VirtualAllocEx</p>
  </li>
</ul>

<p>Now we run the malware with F9</p>

<p>A lot of exception must be pass. Use shift+F9 to pass it.</p>

<p><img src="/assets/files/articles/0010-xtreme_rat/img/exception.png" alt="image" /></p>

<p>Now the application is break at kernel32.VirtualAllocEx :</p>

<p><img src="/assets/files/articles/0010-xtreme_rat/img/break.png" alt="image" /></p>

<p>Execute the binary until the next RET with Ctrl+F9.</p>

<p>Now we can see the allocated address of the memory in the EAX register: 0x40B61B.</p>

<p><img src="/assets/files/articles/0010-xtreme_rat/img/40B61B.png" alt="image" /></p>

<p>Right click on the EAX value, and click on âFollow in dumpâ.</p>

<p>We can see a PE value in the bottom left. If we scroll we can see the complete MZ :</p>

<p><img src="/assets/files/articles/0010-xtreme_rat/img/mz.png" alt="image" /></p>

<p>Now we can use lordPE to make a partial dump: - launch LordPE</p>

<ul>
  <li>
    <p>right click on the process</p>
  </li>
  <li>
    <p>Dump partial</p>
  </li>
  <li>
    <p>set the start address to 40B51B</p>
  </li>
  <li>
    <p>set the size to 411000 - 40B51B = 5AE5</p>
  </li>
</ul>

<p>Now we have a binary with the md5: 18e5ff1d0610341257f33e6fefe4f9a7</p>

<h2 id="third-binary">Third binary</h2>

<p>We used yara to identify the binary:</p>

<pre><code>rootbsd@alien:~/Samples$ yara -r packer.yara base64.stage2.dmp 
UPXv20MarkusLaszloReiser base64.stage2.dmp
UPXV200V290MarkusOberhumerLaszloMolnarJohnReiser base64.stage2.dmp
UPX20030XMarkusOberhumerLaszloMolnarJohnReiser base64.stage2.dmp
</code></pre>

<p>The binary is simply pack with UPX.</p>

<pre><code>rootbsd@alien:~/Samples$ upx -o base64.stage2.exe -d base64.stage2.dmp 
                       Ultimate Packer for eXecutables
                          Copyright (C) 1996 - 2010
UPX 3.07        Markus Oberhumer, Laszlo Molnar &amp; John Reiser   Sep 08th 2010

        File size         Ratio      Format      Name
   --------------------   ------   -----------   -----------
     46821 &lt;-     23269   49.70%    win32/pe     base64.stage2.exe

Unpacked 1 file.
rootbsd@alien:~/Samples$ file base64.stage2.exe
base64.stage2.exe: PE32 executable for MS Windows (GUI) Intel 80386 32-bit
</code></pre>

<p>We have got the final binary.</p>

<h2 id="fourth-binary">Fourth binary</h2>

<p>We easily identify a well-known RAT:</p>

<pre><code>rootbsd@alien:~/Samples$ strings -el base64.stage2.exe  | grep RAT
Xtreme RAT SOFTWARE\XtremeRAT
</code></pre>

<p>After a quick search on Google, we discovered that the RAT could be buy here: https://sites.google.com/site/nxtremerat/.</p>

<p>The second interesting think is that fact that the RAT is used in Syria : https://www.eff.org/deeplinks/2012/03/how-find-syrian-government-malware-your-computer-and-remove-it/</p>

<p>We can use 3 methods to analyse the binary: the simple, the semi talented method and the full talented method.</p>

<h3 id="simple">Simple</h3>

<p>We execute it, and launch netstat.exe on Windows. The IP of the C&amp;C is 41.103.186.12 and port 2013.</p>

<p>Itâs an IP from Alger:</p>

<pre><code>rootbsd@alien:~/Samples$ whois 41.103.186.12

% This is the AfriNIC Whois server.

% Note: this output has been filtered.

%Information related to '41.103.0.0 - 41.103.255.255'

inetnum:        41.103.0.0 - 41.103.255.255
netname:        RegAlg1
descr:          Region Alger 1
country:        DZ
admin-c:        SD6-AFRINIC
tech-c:         SD6-AFRINIC
status:         ASSIGNED PA
mnt-by:         DJAWEB-MNT
source:         AFRINIC # Filtered
parent:         41.96.0.0 - 41.111.255.255

person:         Security Departement
address:        Alger
phone:          +21321922004
fax-no:         +21321922004
e-mail:         security@djaweb.dz
nic-hdl:        SD6-AFRINIC
source:         AFRINIC # Filtered
</code></pre>

<p>To be persitent, the malware adds a value (antivirus) in the registry: Software\Microsoft\Windows\CurrentVersion\Run</p>

<p>The malware is stored in the directory: C:\Windows\Browser\Web.exe</p>

<p>A configuration file is available here: C:\Documents and Settings\rootbsd\Application Data\Microsoft\Windows\S5tVn.cfg</p>

<h3 id="semi-talented">Semi talented</h3>

<p>We can use a memory dump to analyse the binary. We use volatility to analyse the binary:</p>

<pre><code>rootbsd@alien:~/Samples$ volatility/vol.py -f output pslist
Volatile Systems Volatility Framework 2.0
 Offset(V)  Name                 PID    PPID   Thds   Hnds   Time 
---------- -------------------- ------ ------ ------ ------ ------------------- 
0x812ed020 System                    4      0     54    247 1970-01-01 00:00:00       
0xffbaeb10 smss.exe                368      4      3     19 2012-05-21 15:20:54       
0x811248e0 csrss.exe               584    368     10    379 2012-05-21 15:20:54       
0x81197248 winlogon.exe            608    368     21    514 2012-05-21 15:20:54       
0x811275a8 services.exe            652    608     16    253 2012-05-21 15:20:54       
0x8112d7e0 lsass.exe               664    608     23    338 2012-05-21 15:20:54       
0xffbd7a78 VBoxService.exe         820    652      8    106 2012-05-21 15:20:54       
0x81180c30 svchost.exe             864    652     19    197 2012-05-21 06:20:56       
0x811a6b28 svchost.exe             952    652      9    237 2012-05-21 06:20:56       
0xffac4218 svchost.exe            1044    652     79   1367 2012-05-21 06:20:56       
0xffabbd08 svchost.exe            1092    652      6     76 2012-05-21 06:20:56       
0x8116cda0 svchost.exe            1132    652     13    172 2012-05-21 06:20:56       
0x8112eca8 spoolsv.exe            1544    652     14    111 2012-05-21 06:20:57       
0xffa93b00 explorer.exe           1556   1504     17    477 2012-05-21 06:20:57       
0x8112fda0 VBoxTray.exe           1700   1556      6     58 2012-05-21 06:20:57       
0xffb95da0 svchost.exe            1904    652      4    106 2012-05-21 06:21:05       
0xffa01a98 alg.exe                1076    652      6    107 2012-05-21 06:21:09       
0x81178278 wscntfy.exe            1188   1044      1     31 2012-05-21 06:21:11       
0x81188da0 wuauclt.exe            1956   1044      8    180 2012-05-21 06:21:51       
0x811323c0 wuauclt.exe             248   1044      4    133 2012-05-21 06:22:05       
0x8119ada0 svchost.exe            2000   1488      2     41 2012-07-20 19:15:47       
0x8118b888 svchost.exe            1404   1488      8    188 2012-07-20 19:15:47
</code></pre>

<p>The 2 last svchost.exe are stange. The date is not logic.</p>

<p>When you list the dll you can see that the malware change his name to svchost.exe:</p>

<pre><code>rootbsd@alien:~/Samples$ ../Pentest/volatility/vol.py -f output -p 2000 dlllist
Volatile Systems Volatility Framework 2.0
************************************************************************
svchost.exe pid:   2000
Command line : svchost.exe
Service Pack 3

Base         Size         Path
0x00400000   0x038000     E:\essai\svchost.exe
0x7c900000   0x0b2000     C:\WINXP\system32\ntdll.dll
0x7c800000   0x0f6000     C:\WINXP\system32\kernel32.dll
0x7e410000   0x091000     C:\WINXP\system32\user32.dll
0x77f10000   0x049000     C:\WINXP\system32\GDI32.dll
0x76390000   0x01d000     C:\WINXP\system32\IMM32.DLL
0x77dd0000   0x09b000     C:\WINXP\system32\ADVAPI32.dll
0x77e70000   0x093000     C:\WINXP\system32\RPCRT4.dll
0x77fe0000   0x011000     C:\WINXP\system32\Secur32.dll
0x7c9c0000   0x818000     C:\WINXP\system32\shell32.dll
0x77c10000   0x058000     C:\WINXP\system32\msvcrt.dll
0x77f60000   0x076000     C:\WINXP\system32\SHLWAPI.dll
0x773d0000   0x103000     C:\WINXP\WinSxS\x86_Microsoft.Windows.Common-Controls_6595b64144ccf1df_6.0.2600.6028_x-ww_61e65202\comctl32.dll
0x5d090000   0x09a000     C:\WINXP\system32\comctl32.dll
</code></pre>

<p>We make a memory dump of the process 1404 :</p>

<pre><code>rootbsd@alien:~/Samples$ volatility/vol.py -f output -p 1404 memdump -D .
Volatile Systems Volatility Framework 2.0
************************************************************************
Writing svchost.exe [  1404] to 1404.dmp
</code></pre>

<p>In the .dmp we have got all necessary information:</p>

<pre><code>rootbsd@alien:~/Samples$ strings -a  1404.dmp | grep http://
[...]
http://baloobadjamel.hopto.org:2013/1234567890.functions
[...]
rootbsd@alien:~/Samples$ nslookup baloobadjamel.hopto.org
Server:         192.168.0.254
Address:        192.168.0.254#53

Non-authoritative answer:
Name:   baloobadjamel.hopto.org
Address: 41.103.186.12
</code></pre>

<p>And we find the IP.</p>

<p>We hope that Djamel Baloodad is not the real name of the owner of the C&amp;C ;)</p>

<h3 id="talented">Talented</h3>

<p>We open the final binary on IDA.</p>

<p>To help us you can find the .idb <a href="/assets/files/articles/0010-xtreme_rat/idb/xtreme.idb">here</a></p>

<p>At loc_C889C9, we find two functions sub_C93B1C (loadConfigResource) and sub_C82914 (decondeConfig).</p>

<p><img src="/assets/files/articles/0010-xtreme_rat/img/ida01.png" alt="image" /></p>

<p>The fisrt function extracts a resource. This resource is the config file (in this case S5tVn.cfg).</p>

<p>The second function decode the configuration file. Two interesting arguments are passed ton the function: the offset of the config file &amp; the word âCONFIGâ (in unicode).</p>

<p>This function is composed of 3 loops. This kind of layout looks like RC4 (<a href="http://en.wikipedia.org/wiki/RC4">RC4</a>) :</p>

<ul>
  <li>
    <p>2 loops KSA (<a href="http://en.wikipedia.org/wiki/RC4#The_key-scheduling_algorithm">KSA</a>)</p>
  </li>
  <li>
    <p>1 loop for PRGA (<a href="http://en.wikipedia.org/wiki/RC4#The_pseudo-random_generation_algorithm">PRGA</a>).</p>
  </li>
</ul>

<p>The first loop:</p>

<p><img src="/assets/files/articles/0010-xtreme_rat/img/ida02.png" alt="image" /></p>

<p>The second loop:</p>

<p><img src="/assets/files/articles/0010-xtreme_rat/img/ida03.png" alt="image" /></p>

<p>And the final loop:</p>

<p><img src="/assets/files/articles/0010-xtreme_rat/img/ida04.png" alt="image" /></p>

<p>So the config file is crypted with RC4 with the key âCONFIGâ.</p>

<p>To perform a RC4 encryption we need the length of the key. To have this size the developer mades his own function sub_C81AF8 (StringLen) but this function does not support unicode, it returns 6 and not 12. So we must implemente this bug in our tool to decrypt the config file.</p>

<p>A script to decode the config file is available <a href="/assets/files/articles/0010-xtreme_rat/code/xtremerat_config.py">here</a></p>

<pre><code>rootbsd@alien:~/Samples$ ./xtremerat_config.py xtreme.exe | strings -el
baloobadjamel.hopto.org
Spam2013
teSpam2013
Web.exe
Browser
svchost.exe
Antivirus
Antivirus
 P8CWY65J-GY7I-CD3S-7K6Q-BD3A60R037L3
Server
3.5 Private
S5tVn
S5tVnEXIT
S5tVnPERSIST
ftp.ftpserver.com
pData\Local
ftpuser
ftppass
Error
ivateAn unexpected error occurred when starting the program.
Please try again later.
</code></pre>

<p>We can already see the C&amp;C, the port, etcâ¦</p>

<p>We are working on the format on the configuration file, for the moment we identify this format:</p>

<pre><code>rootbsd@alien:~/Samples$ ./xtremerat_config.py -d xtreme.exe 
name10: 3.5 PrivateS5tV
name11: stï¿½S5tVnEXI
name6: Antivirus
name7: Antivirus
host: baloobadjamel.hopto.org
num: 101
name2: teSpam2013
name3: Web.exe
port: 2013
name8:  P8CWY65J-GY7I-CD3S-7K6Q-BD3A60R037L3
name9: Server
name: Spam2013
name4: Browser
name5: svchost.exe
</code></pre>

</div>
  <footer class="footer bs-footer">
    <div class="container">
        <div class="row">
            <a href="/about/">About</a> -
            <a href="/about/contact.html">Contact</a> -
            <a href="irc://chat.freenode.net/#malware.lu">IRC</a> -
            <a href="https://twitter.com/malwarelu"><i class="fa fa-twitter"></i> Twitter </a> -
            <a href="https://github.com/malwarelu"><i class="fa fa-github"></i> GitHub</a>
        </div>
        <div class="row" style="border-top-style:solid; border-top-color:#FFF; border-top-width:2px; margin-top: 10px; padding-top:10px;">
            Malware.lu CERT is the first private CERT/CSIRT (Computer Emergency Response Team/Computer Security Incident Response Team) in Luxembourg.<br>
            Malware.lu CERT is part of <a href="http://www.itrust.lu">itrust consulting</a>. It is currently operated with support of the H2020 project ATENA financed by the EU.
        </div>
    </div>
  </footer>
</body>
</html>

