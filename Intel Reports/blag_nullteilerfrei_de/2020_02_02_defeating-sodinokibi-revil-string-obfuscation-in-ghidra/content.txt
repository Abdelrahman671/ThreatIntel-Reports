<!DOCTYPE html>
<html lang="en-US" >
<head>
		<meta charset="UTF-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=edge" />
	<meta name="viewport" content="width=device-width, initial-scale=1" />
	<link rel="profile" href="http://gmpg.org/xfn/11" />
			<link rel="pingback" href="https://blag.nullteilerfrei.de/xmlrpc.php">
		<title>Defeating Sodinokibi/REvil String-Obfuscation in Ghidra &#8211; nullteilerfrei</title>
<meta name='robots' content='max-image-preview:large' />
	<style>img:is([sizes="auto" i], [sizes^="auto," i]) { contain-intrinsic-size: 3000px 1500px }</style>
	<link rel='dns-prefetch' href='//fonts.googleapis.com' />
<link rel="alternate" type="application/rss+xml" title="nullteilerfrei &raquo; Feed" href="https://blag.nullteilerfrei.de/feed/" />
<link rel="alternate" type="application/rss+xml" title="nullteilerfrei &raquo; Comments Feed" href="https://blag.nullteilerfrei.de/comments/feed/" />
<link rel="alternate" type="application/rss+xml" title="nullteilerfrei &raquo; Defeating Sodinokibi/REvil String-Obfuscation in Ghidra Comments Feed" href="https://blag.nullteilerfrei.de/2020/02/02/defeating-sodinokibi-revil-string-obfuscation-in-ghidra/feed/" />
<script type="text/javascript">
/* <![CDATA[ */
window._wpemojiSettings = {"baseUrl":"https:\/\/s.w.org\/images\/core\/emoji\/15.0.3\/72x72\/","ext":".png","svgUrl":"https:\/\/s.w.org\/images\/core\/emoji\/15.0.3\/svg\/","svgExt":".svg","source":{"concatemoji":"https:\/\/blag.nullteilerfrei.de\/wp-includes\/js\/wp-emoji-release.min.js?ver=6.7.1"}};
/*! This file is auto-generated */
!function(i,n){var o,s,e;function c(e){try{var t={supportTests:e,timestamp:(new Date).valueOf()};sessionStorage.setItem(o,JSON.stringify(t))}catch(e){}}function p(e,t,n){e.clearRect(0,0,e.canvas.width,e.canvas.height),e.fillText(t,0,0);var t=new Uint32Array(e.getImageData(0,0,e.canvas.width,e.canvas.height).data),r=(e.clearRect(0,0,e.canvas.width,e.canvas.height),e.fillText(n,0,0),new Uint32Array(e.getImageData(0,0,e.canvas.width,e.canvas.height).data));return t.every(function(e,t){return e===r[t]})}function u(e,t,n){switch(t){case"flag":return n(e,"\ud83c\udff3\ufe0f\u200d\u26a7\ufe0f","\ud83c\udff3\ufe0f\u200b\u26a7\ufe0f")?!1:!n(e,"\ud83c\uddfa\ud83c\uddf3","\ud83c\uddfa\u200b\ud83c\uddf3")&&!n(e,"\ud83c\udff4\udb40\udc67\udb40\udc62\udb40\udc65\udb40\udc6e\udb40\udc67\udb40\udc7f","\ud83c\udff4\u200b\udb40\udc67\u200b\udb40\udc62\u200b\udb40\udc65\u200b\udb40\udc6e\u200b\udb40\udc67\u200b\udb40\udc7f");case"emoji":return!n(e,"\ud83d\udc26\u200d\u2b1b","\ud83d\udc26\u200b\u2b1b")}return!1}function f(e,t,n){var r="undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope?new OffscreenCanvas(300,150):i.createElement("canvas"),a=r.getContext("2d",{willReadFrequently:!0}),o=(a.textBaseline="top",a.font="600 32px Arial",{});return e.forEach(function(e){o[e]=t(a,e,n)}),o}function t(e){var t=i.createElement("script");t.src=e,t.defer=!0,i.head.appendChild(t)}"undefined"!=typeof Promise&&(o="wpEmojiSettingsSupports",s=["flag","emoji"],n.supports={everything:!0,everythingExceptFlag:!0},e=new Promise(function(e){i.addEventListener("DOMContentLoaded",e,{once:!0})}),new Promise(function(t){var n=function(){try{var e=JSON.parse(sessionStorage.getItem(o));if("object"==typeof e&&"number"==typeof e.timestamp&&(new Date).valueOf()<e.timestamp+604800&&"object"==typeof e.supportTests)return e.supportTests}catch(e){}return null}();if(!n){if("undefined"!=typeof Worker&&"undefined"!=typeof OffscreenCanvas&&"undefined"!=typeof URL&&URL.createObjectURL&&"undefined"!=typeof Blob)try{var e="postMessage("+f.toString()+"("+[JSON.stringify(s),u.toString(),p.toString()].join(",")+"));",r=new Blob([e],{type:"text/javascript"}),a=new Worker(URL.createObjectURL(r),{name:"wpTestEmojiSupports"});return void(a.onmessage=function(e){c(n=e.data),a.terminate(),t(n)})}catch(e){}c(n=f(s,u,p))}t(n)}).then(function(e){for(var t in e)n.supports[t]=e[t],n.supports.everything=n.supports.everything&&n.supports[t],"flag"!==t&&(n.supports.everythingExceptFlag=n.supports.everythingExceptFlag&&n.supports[t]);n.supports.everythingExceptFlag=n.supports.everythingExceptFlag&&!n.supports.flag,n.DOMReady=!1,n.readyCallback=function(){n.DOMReady=!0}}).then(function(){return e}).then(function(){var e;n.supports.everything||(n.readyCallback(),(e=n.source||{}).concatemoji?t(e.concatemoji):e.wpemoji&&e.twemoji&&(t(e.twemoji),t(e.wpemoji)))}))}((window,document),window._wpemojiSettings);
/* ]]> */
</script>
<style id='wp-emoji-styles-inline-css' type='text/css'>

	img.wp-smiley, img.emoji {
		display: inline !important;
		border: none !important;
		box-shadow: none !important;
		height: 1em !important;
		width: 1em !important;
		margin: 0 0.07em !important;
		vertical-align: -0.1em !important;
		background: none !important;
		padding: 0 !important;
	}
</style>
<link rel='stylesheet' id='wp-block-library-css' href='https://blag.nullteilerfrei.de/wp-includes/css/dist/block-library/style.min.css?ver=6.7.1' type='text/css' media='all' />
<style id='classic-theme-styles-inline-css' type='text/css'>
/*! This file is auto-generated */
.wp-block-button__link{color:#fff;background-color:#32373c;border-radius:9999px;box-shadow:none;text-decoration:none;padding:calc(.667em + 2px) calc(1.333em + 2px);font-size:1.125em}.wp-block-file__button{background:#32373c;color:#fff;text-decoration:none}
</style>
<style id='global-styles-inline-css' type='text/css'>
:root{--wp--preset--aspect-ratio--square: 1;--wp--preset--aspect-ratio--4-3: 4/3;--wp--preset--aspect-ratio--3-4: 3/4;--wp--preset--aspect-ratio--3-2: 3/2;--wp--preset--aspect-ratio--2-3: 2/3;--wp--preset--aspect-ratio--16-9: 16/9;--wp--preset--aspect-ratio--9-16: 9/16;--wp--preset--color--black: #000000;--wp--preset--color--cyan-bluish-gray: #abb8c3;--wp--preset--color--white: #ffffff;--wp--preset--color--pale-pink: #f78da7;--wp--preset--color--vivid-red: #cf2e2e;--wp--preset--color--luminous-vivid-orange: #ff6900;--wp--preset--color--luminous-vivid-amber: #fcb900;--wp--preset--color--light-green-cyan: #7bdcb5;--wp--preset--color--vivid-green-cyan: #00d084;--wp--preset--color--pale-cyan-blue: #8ed1fc;--wp--preset--color--vivid-cyan-blue: #0693e3;--wp--preset--color--vivid-purple: #9b51e0;--wp--preset--gradient--vivid-cyan-blue-to-vivid-purple: linear-gradient(135deg,rgba(6,147,227,1) 0%,rgb(155,81,224) 100%);--wp--preset--gradient--light-green-cyan-to-vivid-green-cyan: linear-gradient(135deg,rgb(122,220,180) 0%,rgb(0,208,130) 100%);--wp--preset--gradient--luminous-vivid-amber-to-luminous-vivid-orange: linear-gradient(135deg,rgba(252,185,0,1) 0%,rgba(255,105,0,1) 100%);--wp--preset--gradient--luminous-vivid-orange-to-vivid-red: linear-gradient(135deg,rgba(255,105,0,1) 0%,rgb(207,46,46) 100%);--wp--preset--gradient--very-light-gray-to-cyan-bluish-gray: linear-gradient(135deg,rgb(238,238,238) 0%,rgb(169,184,195) 100%);--wp--preset--gradient--cool-to-warm-spectrum: linear-gradient(135deg,rgb(74,234,220) 0%,rgb(151,120,209) 20%,rgb(207,42,186) 40%,rgb(238,44,130) 60%,rgb(251,105,98) 80%,rgb(254,248,76) 100%);--wp--preset--gradient--blush-light-purple: linear-gradient(135deg,rgb(255,206,236) 0%,rgb(152,150,240) 100%);--wp--preset--gradient--blush-bordeaux: linear-gradient(135deg,rgb(254,205,165) 0%,rgb(254,45,45) 50%,rgb(107,0,62) 100%);--wp--preset--gradient--luminous-dusk: linear-gradient(135deg,rgb(255,203,112) 0%,rgb(199,81,192) 50%,rgb(65,88,208) 100%);--wp--preset--gradient--pale-ocean: linear-gradient(135deg,rgb(255,245,203) 0%,rgb(182,227,212) 50%,rgb(51,167,181) 100%);--wp--preset--gradient--electric-grass: linear-gradient(135deg,rgb(202,248,128) 0%,rgb(113,206,126) 100%);--wp--preset--gradient--midnight: linear-gradient(135deg,rgb(2,3,129) 0%,rgb(40,116,252) 100%);--wp--preset--font-size--small: 13px;--wp--preset--font-size--medium: 20px;--wp--preset--font-size--large: 36px;--wp--preset--font-size--x-large: 42px;--wp--preset--spacing--20: 0.44rem;--wp--preset--spacing--30: 0.67rem;--wp--preset--spacing--40: 1rem;--wp--preset--spacing--50: 1.5rem;--wp--preset--spacing--60: 2.25rem;--wp--preset--spacing--70: 3.38rem;--wp--preset--spacing--80: 5.06rem;--wp--preset--shadow--natural: 6px 6px 9px rgba(0, 0, 0, 0.2);--wp--preset--shadow--deep: 12px 12px 50px rgba(0, 0, 0, 0.4);--wp--preset--shadow--sharp: 6px 6px 0px rgba(0, 0, 0, 0.2);--wp--preset--shadow--outlined: 6px 6px 0px -3px rgba(255, 255, 255, 1), 6px 6px rgba(0, 0, 0, 1);--wp--preset--shadow--crisp: 6px 6px 0px rgba(0, 0, 0, 1);}:where(.is-layout-flex){gap: 0.5em;}:where(.is-layout-grid){gap: 0.5em;}body .is-layout-flex{display: flex;}.is-layout-flex{flex-wrap: wrap;align-items: center;}.is-layout-flex > :is(*, div){margin: 0;}body .is-layout-grid{display: grid;}.is-layout-grid > :is(*, div){margin: 0;}:where(.wp-block-columns.is-layout-flex){gap: 2em;}:where(.wp-block-columns.is-layout-grid){gap: 2em;}:where(.wp-block-post-template.is-layout-flex){gap: 1.25em;}:where(.wp-block-post-template.is-layout-grid){gap: 1.25em;}.has-black-color{color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-color{color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-color{color: var(--wp--preset--color--white) !important;}.has-pale-pink-color{color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-color{color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-color{color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-color{color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-color{color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-color{color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-color{color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-color{color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-color{color: var(--wp--preset--color--vivid-purple) !important;}.has-black-background-color{background-color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-background-color{background-color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-background-color{background-color: var(--wp--preset--color--white) !important;}.has-pale-pink-background-color{background-color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-background-color{background-color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-background-color{background-color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-background-color{background-color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-background-color{background-color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-background-color{background-color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-background-color{background-color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-background-color{background-color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-background-color{background-color: var(--wp--preset--color--vivid-purple) !important;}.has-black-border-color{border-color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-border-color{border-color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-border-color{border-color: var(--wp--preset--color--white) !important;}.has-pale-pink-border-color{border-color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-border-color{border-color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-border-color{border-color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-border-color{border-color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-border-color{border-color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-border-color{border-color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-border-color{border-color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-border-color{border-color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-border-color{border-color: var(--wp--preset--color--vivid-purple) !important;}.has-vivid-cyan-blue-to-vivid-purple-gradient-background{background: var(--wp--preset--gradient--vivid-cyan-blue-to-vivid-purple) !important;}.has-light-green-cyan-to-vivid-green-cyan-gradient-background{background: var(--wp--preset--gradient--light-green-cyan-to-vivid-green-cyan) !important;}.has-luminous-vivid-amber-to-luminous-vivid-orange-gradient-background{background: var(--wp--preset--gradient--luminous-vivid-amber-to-luminous-vivid-orange) !important;}.has-luminous-vivid-orange-to-vivid-red-gradient-background{background: var(--wp--preset--gradient--luminous-vivid-orange-to-vivid-red) !important;}.has-very-light-gray-to-cyan-bluish-gray-gradient-background{background: var(--wp--preset--gradient--very-light-gray-to-cyan-bluish-gray) !important;}.has-cool-to-warm-spectrum-gradient-background{background: var(--wp--preset--gradient--cool-to-warm-spectrum) !important;}.has-blush-light-purple-gradient-background{background: var(--wp--preset--gradient--blush-light-purple) !important;}.has-blush-bordeaux-gradient-background{background: var(--wp--preset--gradient--blush-bordeaux) !important;}.has-luminous-dusk-gradient-background{background: var(--wp--preset--gradient--luminous-dusk) !important;}.has-pale-ocean-gradient-background{background: var(--wp--preset--gradient--pale-ocean) !important;}.has-electric-grass-gradient-background{background: var(--wp--preset--gradient--electric-grass) !important;}.has-midnight-gradient-background{background: var(--wp--preset--gradient--midnight) !important;}.has-small-font-size{font-size: var(--wp--preset--font-size--small) !important;}.has-medium-font-size{font-size: var(--wp--preset--font-size--medium) !important;}.has-large-font-size{font-size: var(--wp--preset--font-size--large) !important;}.has-x-large-font-size{font-size: var(--wp--preset--font-size--x-large) !important;}
:where(.wp-block-post-template.is-layout-flex){gap: 1.25em;}:where(.wp-block-post-template.is-layout-grid){gap: 1.25em;}
:where(.wp-block-columns.is-layout-flex){gap: 2em;}:where(.wp-block-columns.is-layout-grid){gap: 2em;}
:root :where(.wp-block-pullquote){font-size: 1.5em;line-height: 1.6;}
</style>
<link rel='stylesheet' id='parent-style-css' href='https://blag.nullteilerfrei.de/wp-content/themes/switty/style.css?ver=6.7.1' type='text/css' media='all' />
<link rel='stylesheet' id='katex-style-css' href='https://blag.nullteilerfrei.de/wp-content/themes/ntf_new/katex/katex.min.css?ver=6.7.1' type='text/css' media='all' />
<link rel='stylesheet' id='bootstrap-css' href='https://blag.nullteilerfrei.de/wp-content/themes/switty/css/bootstrap.css?ver=3.3.7' type='text/css' media='all' />
<link rel='stylesheet' id='font-awesome-css' href='https://blag.nullteilerfrei.de/wp-content/themes/switty/css/font-awesome.css?ver=4.6.3' type='text/css' media='all' />
<link rel='stylesheet' id='switty-style-default-css' href='https://blag.nullteilerfrei.de/wp-content/themes/ntf_new/style.css?ver=1.1.5' type='text/css' media='all' />
<link rel='stylesheet' id='switty-style-core-css' href='https://blag.nullteilerfrei.de/wp-content/themes/switty/css/style.css?ver=1.1.5' type='text/css' media='all' />
<style id='switty-style-core-inline-css' type='text/css'>

			.gridpostloop {
			  width: 100%;
			}
		
			@media (min-width: 768px) {
				.woocommerce ul.products li.product, .woocommerce-page ul.products li.product {
					width: 22%;
				}
			}
			
</style>
<link rel='stylesheet' id='switty-style-woo-css' href='https://blag.nullteilerfrei.de/wp-content/themes/switty/css/style-woo.css?ver=1.1.5' type='text/css' media='all' />
<link rel='stylesheet' id='kirki_google_fonts-css' href='https://fonts.googleapis.com/css?family=Libre+Baskerville%3Aregular%7CArvo%3Aregular%7CRajdhani%3A500%7CRoboto%3Aregular&#038;subset' type='text/css' media='all' />
<link rel='stylesheet' id='kirki-styles-switty_config-css' href='https://blag.nullteilerfrei.de/wp-content/themes/switty/inc/frameworks/kirki/assets/css/kirki-styles.css' type='text/css' media='all' />
<style id='kirki-styles-switty_config-inline-css' type='text/css'>
body{font-family:"Libre Baskerville", Georgia, serif;font-weight:400;font-style:normal;text-align:inherit;color:#ffffff;}body h1, .h1{font-family:Arvo, Georgia, serif;font-size:22px;font-weight:400;font-style:normal;line-height:1.1;text-align:inherit;text-transform:uppercase;color:#ffffff;}body h2, .h2{font-family:Arvo, Georgia, serif;font-size:22px;font-weight:400;font-style:normal;line-height:1.1;text-align:inherit;text-transform:uppercase;color:#ffffff;}body h3, .h3{font-family:Arvo, Georgia, serif;font-size:22px;font-weight:400;font-style:normal;line-height:1.1;text-align:inherit;text-transform:uppercase;color:#ffffff;}body h4, .h4{font-family:Arvo, Georgia, serif;font-size:20px;font-weight:400;font-style:normal;line-height:1.1;text-align:inherit;text-transform:inherit;color:#ffffff;}body h5, .h5{font-family:Arvo, Georgia, serif;font-size:20px;font-weight:400;font-style:normal;line-height:1.1;text-align:inherit;text-transform:inherit;color:#ffffff;}body h6, .h6{font-family:Arvo, Georgia, serif;font-size:20px;font-weight:400;font-style:normal;line-height:1.1;text-align:inherit;text-transform:inherit;color:#ffffff;}#maincontainer p{font-family:"Libre Baskerville", Georgia, serif;font-size:16px;font-weight:400;font-style:normal;letter-spacing:0.1px;line-height:25px;text-align:inherit;text-transform:inherit;color:#ffffff;}#navbar ul.navbar-nav li a{font-family:Rajdhani, Helvetica, Arial, sans-serif;font-size:18px;font-weight:500;font-style:normal;text-align:inherit;color:#ffffff;}.side-menu-menu-wrap ul li a{font-family:Rajdhani, Helvetica, Arial, sans-serif;font-size:18px;font-weight:500;font-style:normal;letter-spacing:0.1px;line-height:25px;text-align:inherit;text-transform:inherit;color:#ffffff;}.widget_sidebar_main ul li, .widget_sidebar_main ol li{font-family:Roboto, Helvetica, Arial, sans-serif;font-size:15px;font-weight:400;font-style:normal;letter-spacing:0.1px;line-height:1.7;text-align:inherit;text-transform:inherit;color:#ffffff;}.footer{font-family:Roboto, Helvetica, Arial, sans-serif;font-size:15px;font-weight:400;font-style:normal;line-height:1.7;text-align:inherit;text-transform:inherit;color:#ffffff;}.footer-copyright{font-family:Roboto, Helvetica, Arial, sans-serif;font-size:15px;font-weight:400;font-style:normal;line-height:1.7;text-align:inherit;text-transform:inherit;color:#BCBCBC;background-color:#111111;}body a, .woocommerce .star-rating span{color:#358247;}.widget_sidebar_main .right-widget-title-spn{border-bottom-color:#358247;}.navigation.pagination .nav-links .page-numbers, .navigation.pagination .nav-links .page-numbers:last-child{border-color:#358247;}.woocommerce .widget_price_filter .ui-slider .ui-slider-handle, .woocommerce .widget_price_filter .ui-slider .ui-slider-range{background-color:#358247;}body a:hover{color:#000000;}.spclbtn, #back-to-top{color:#ffffff;background-color:#358247;}.woocommerce #respond input#submit, .woocommerce a.button, .woocommerce button.button, .woocommerce input.button{color:#ffffff;background-color:#358247;}.woocommerce #respond input#submit:hover, .woocommerce a.button:hover, .woocommerce button.button:hover, .woocommerce input.button:hover{color:#ffffff;background-color:#000000;}.woocommerce #respond input#submit.alt, .woocommerce a.button.alt, .woocommerce button.button.alt, .woocommerce input.button.alt{color:#ffffff;background-color:#358247;}.woocommerce #respond input#submit.alt:hover, .woocommerce a.button.alt:hover, .woocommerce button.button.alt:hover, .woocommerce input.button.alt:hover{color:#ffffff;background-color:#000000;}.woocommerce-product-search input[type="submit"]{color:#ffffff;background-color:#358247;}.wpcf7-form .wpcf7-form-control.wpcf7-submit{color:#ffffff;background-color:#358247;}.spclbtn:hover, #back-to-top:hover{background-color:#000000;}.woocommerce-product-search input[type="submit"]:hover{background-color:#000000;}.wpcf7-form .wpcf7-form-control.wpcf7-submit:hover{background-color:#000000;}#navbar .navbar-brand{color:#E2E2E2;}.navbar-default .navbar-nav > li > a{color:#E2E2E2;}.navbar-default .navbar-nav > li > a:hover, .navbar-default .navbar-nav > li > a:focus{color:#ffffff;}.navbar-default .navbar-nav > .active > a, .navbar-default .navbar-nav > .active > a:hover, .navbar-default .navbar-nav > .active > a:focus{color:#ffffff;}.navbar-default .navbar-nav > li.current-menu-parent > a{color:#ffffff;}#navbar{background-color:rgba(1, 9, 3, 0.50);}.afterscroolnav{background-color:rgba(1, 9, 3, 0.30)!important;}#navbar .dropdown-menu a{color:#6b6b6b;background-color:#f4f4f4;}#navbar .dropdown-menu > .active > a, #navbar .dropdown-menu > .active > a:hover, #navbar .dropdown-menu > .active > a:focus{color:#000000;}#navbar .dropdown-menu a:hover{color:#000000;}#navbar .dropdown-menu > .active > a, #navbar .dropdown-menu a:hover, #navbar .dropdown-menu > a:focus{background-color:#358247;}.postsloop{background-color:#ffffff;}.sticky{background-color:#d3d3d3;}#comments .comment.even{color:#000000;background-color:#f8f8f8;}#comments .pingback.even{color:#000000;background-color:#f8f8f8;}#comments .comment.odd{color:#000000;background-color:#eeeeee;}#comments .pingback.odd{color:#000000;background-color:#eeeeee;}.footer-copyright a{color:#395132;}.footer-copyright a:hover{color:#44C47E;}#logoasimg .custom-logo{width:200px;}
</style>
<script type="text/javascript" src="https://blag.nullteilerfrei.de/wp-content/plugins/en-spam/en-spam.js?ver=6.7.1" id="en-spam-js"></script>
<script type="text/javascript" src="https://blag.nullteilerfrei.de/wp-content/themes/ntf_new/showdown.min.js?ver=6.7.1" id="showdown-js"></script>
<script type="text/javascript" src="https://blag.nullteilerfrei.de/wp-includes/js/jquery/jquery.min.js?ver=3.7.1" id="jquery-core-js"></script>
<script type="text/javascript" src="https://blag.nullteilerfrei.de/wp-includes/js/jquery/jquery-migrate.min.js?ver=3.4.1" id="jquery-migrate-js"></script>
<!--[if lt IE 9]>
<script type="text/javascript" src="https://blag.nullteilerfrei.de/wp-content/themes/switty/js/html5shiv.js?ver=3.7.3" id="html5shiv-js"></script>
<![endif]-->
<!--[if lt IE 9]>
<script type="text/javascript" src="https://blag.nullteilerfrei.de/wp-content/themes/switty/js/respond.js?ver=1.1.5" id="respond-js"></script>
<![endif]-->
<link rel="https://api.w.org/" href="https://blag.nullteilerfrei.de/wp-json/" /><link rel="alternate" title="JSON" type="application/json" href="https://blag.nullteilerfrei.de/wp-json/wp/v2/posts/5073" /><link rel="EditURI" type="application/rsd+xml" title="RSD" href="https://blag.nullteilerfrei.de/xmlrpc.php?rsd" />
<meta name="generator" content="WordPress 6.7.1" />
<link rel="canonical" href="https://blag.nullteilerfrei.de/2020/02/02/defeating-sodinokibi-revil-string-obfuscation-in-ghidra/" />
<link rel='shortlink' href='https://blag.nullteilerfrei.de/?p=5073' />
<link rel="alternate" title="oEmbed (JSON)" type="application/json+oembed" href="https://blag.nullteilerfrei.de/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fblag.nullteilerfrei.de%2F2020%2F02%2F02%2Fdefeating-sodinokibi-revil-string-obfuscation-in-ghidra%2F" />
<link rel="alternate" title="oEmbed (XML)" type="text/xml+oembed" href="https://blag.nullteilerfrei.de/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fblag.nullteilerfrei.de%2F2020%2F02%2F02%2Fdefeating-sodinokibi-revil-string-obfuscation-in-ghidra%2F&#038;format=xml" />
<style type="text/css" id="custom-background-css">
body.custom-background { background-image: url("https://blag.nullteilerfrei.de/wp-content/uploads/2017/06/bg_bw.jpg"); background-position: center center; background-size: cover; background-repeat: no-repeat; background-attachment: fixed; }
</style>
	</head>

<body class="post-template-default single single-post postid-5073 single-format-standard custom-background" >

<nav id="navbar" class="navbar navbar-default navbar-fixed-top" >
<div class="container">
	<div class="navbar-header">
		<button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
			<span class="sr-only">Toggle navigation</span>
			<span class="icon-bar"></span>
			<span class="icon-bar"></span>
			<span class="icon-bar"></span>
		</button>
					<a class="navbar-brand" href="https://blag.nullteilerfrei.de/"> nullteilerfrei</a>
				
	</div>
						
	<div id="bs-example-navbar-collapse-1" class="collapse navbar-collapse"><ul id="primary-menu" class="nav navbar-nav navbar-right"><li id="menu-item-3880" class="bop-nav-search menu-item menu-item-type-search menu-item-object- menu-item-3880">			<form  class="bop-nav-search menu-item menu-item-type-search menu-item-object- menu-item-3880" role="search" method="get" action="https://blag.nullteilerfrei.de/">
								<div>
					<label class="screen-reader-text" for="s">Search</label>					<input type="text" value="" name="s" id="s" />
											<input type="submit" id="searchsubmit" value="search" />
									</div>
			</form>
		</li>
<li id="menu-item-272" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-272"><a title="about" href="https://blag.nullteilerfrei.de/about/"><span class="glyphicon The who, the what, the why."></span>&nbsp;about</a></li>
<li id="menu-item-3858" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-3858"><a title="admin" href="https://blag.nullteilerfrei.de/wp-admin/">admin</a></li>
</ul></div></div>
</nav>




<div id="maincontainer" class="container-fluid mrt50 mrb35">
	<div class="container">
		<div class="row">

<div class="col-md-12">
	<div id="post-5073" class="clearfix postsloop mrt50 post-5073 post type-post status-publish format-standard hentry category-malware category-tech tag-reverse-engineering">
	<div class="content-first pdb20" itemscope itemtype="http://schema.org/CreativeWork">

					
		<div class="content-second pdl20 pdr20">
			<h1 class="the-title entry-title" itemprop="headline">Defeating Sodinokibi/REvil String-Obfuscation in Ghidra</h1>
		</div>
					
		<div class="content-third pdl20 pdr20">
			
			
	<hr class="mrt10 mrb10" />
	
	<span class="switty-entry-meta">
		
		<span class="vcard author" itemprop="author" itemscope itemtype="http://schema.org/Person"><span class="fn"> <a class="url authorurl" rel="author" itemprop="url" href="https://blag.nullteilerfrei.de/author/born/" ><span itemprop="name">born</span></a></span></span>
						
					<span class="categoryurl"><a href="https://blag.nullteilerfrei.de/category/tech/malware/" rel="category tag">malware-analysis</a>, <a href="https://blag.nullteilerfrei.de/category/tech/" rel="category tag">technology</a></span>
								
		<a href="https://blag.nullteilerfrei.de/2020/02/02/defeating-sodinokibi-revil-string-obfuscation-in-ghidra/" ><span class="post-date updated" itemprop="dateModified">2020-02-02</span></a>
						
	</span>
			
	<hr class="mrt10 mrb10" />

				
			<div class="entry-content" itemprop="text">
					
				<div class='showdown'>This post describes the memory layout as well as the method used by the Sodinokibi (or REvil) ransomware to protect its strings. It will then list a few Java snippets to interact with the Ghidra scripting API and finally explain a working script to deobfuscate all strings within a REvil sample. If you don't care about the explaination, you can find the <a href="https://github.com/nullteilerfrei/reversing-class/blob/master/scripts/java/SodinokibiREvilStrings.java">most recent version of the script you can simply import into Ghidra on github</a>.

<span id="more-5073"></span>

**Note:** All code in this blog post was written by Lars Wallenborn and Jesko Hüttenhain. It is published under the [3-Clause BSD License](https://opensource.org/license/bsd-3-clause/).

## Some Thank-You Notes

I'd like to thank the lovely people at OALabs to bring this sample to my attention once again! If you haven't notice, definitly take a look at the <a href="https://www.unpac.me/">automated unpacking service UnpacMe</a>. They just relaesed it into Beta and it is working perfectly for me so far. You can find a <a href="https://www.youtube.com/watch?v=l2P5CMH9TE0&t=1m19s">very expensive commercial for their unpacking service</a> in the references of this blag post. Oh and that video also contains a full analysis of the string obfuscation in REvil including the same things I'm doing in this blog post but for IDA.

A tip to the hat towards Thomas Roth, who almost certainly doesn't know me but published a lot of details about the Ghidra scripting API. And, last but not least, thanks to my buddy <a href="https://twitter.com/huettenhain">Jesko</a> for figuring out Pcode traversal with me.

## Memory Layout

The Sodinokibi (or REvil) ransomware leverages string obfuscation to hinder analysis ((more precisely: to slow down a bottom-up approach starting with interesting strings)). Like <a href="https://www.youtube.com/watch?v=l2P5CMH9TE0">all the other coolkids</a>, we will use the sample with SHA256 hash

<pre><code>5f56d5748940e4039053f85978074bde16d64bd5ba97f6f0026ba8172cb29e93</code></pre>
as an example. In uses calls like the following to deobfuscated strings before usage:

<pre><code class="c">FUN_00404e03(&amp;DAT_0041c040, 0x256, 6, 8, local_14);</code></pre>
The call involves five arguments: The first argument <code>DAT_0041c040</code> is the same for all calls and references a global buffer containing data that doesn't look like anything. 
 The next argument <code>0x256</code> is an offset into that buffer and the next two arguments <code>6</code> and <code>8</code> are length values. The fifth and last parameter <code>local_14</code> is a variable that will contain a deobfuscated string after the function returns. 

The two length values specified lengths of a key buffer and of buffer containing encrypted data respectively. These two buffers are located consecutively directly after the specified offset in the referenced global buffer. 

## Decryption Algorithm

The malware uses the RC4 algorithm to decrypt the obfuscated string with the above-described key. As always, this algorithm can easily be identified by three consecutive loops where the first loop initializes the cells of an array of length 256 by their indices, the second references to key and the third references the encrypted data. The following is a slightly annotated version Ghidra's decompiled output for the RC4 algorithm:

<pre><code class="c">do {
    sbox[k] = (byte)k;
    k = k + 1;
} while (k &lt; 0x100);

k = 0
do {
    Tmp = sbox[k];
    i = Tmp + Key[k % KeyLength] + i &amp; 0xff;
    sbox[k] = sbox[i];
    k = k + 1;
    sbox[i] = Tmp;
} while (k &lt; 0x100);</code></pre>
As always, I don't recommend reverse engineering the algorithm but instead guess that it is RC4 and then use <a href="https://cyberchef.nullteilerfrei.de/">Cyberchef</a>, Python or <a href="https://github.com/binref/refinery">Binary Refinery</a> to confirm your guess. For completeness, here is a BinRef pipeline for one of the calls:

<pre><code class="bash">&gt; emit &quot;36423605a96002d7e5af770baecc2d2ec1a69b7e6b1e47a95f1fbb840b96ebb5d69fe1053e7f7266bb29215d5f8ec74406561b881b2509a1b2369796e8787ca96070f1b78e13bffef6db4fd6efbb8a6142c227535a0e&quot; | hex | rc4 &quot;H:485a8eeef3041ae753246740a753ff&quot; | recode utf-16 | peek

43 Bytes, 50.29% entropy, ASCII text, with no line terminators
------------------------------------------------------[PEEK]--
Global\206D87E0-0E60-DF25-DD8F-8E4E7D1E3BF0
--------------------------------------------------------------</code></pre>
## Scripting Snippets

In this section, I will share a few useful snippets when using Java to write scripts for Ghidra for malware reverse engineering. The first one is a helper function that accepts a function name, assumes there is only one function with that name and returns a list of addresses where this function is called. We will also use the <code>getOriginalBytes</code> function from a <a href="/2020/02/02/ghidra-scripts-in-java-a-snippet-to-getoriginalbytes/">previous blag post</a>.

<pre><code class="java">	private List&lt;Address&gt; getCallAddresses(Function deobfuscator) {
		List&lt;Address&gt; addresses = new ArrayList&lt;Address&gt;();
		for (Reference ref : getReferencesTo(deobfuscator.getEntryPoint())) {
			if (ref.getReferenceType() != RefType.UNCONDITIONAL_CALL)
				continue;
			addresses.add(ref.getFromAddress());
		}

		return addresses;
	}</code></pre>
The function <code>setComment</code> will set a comment in both the disassembly view and the decompiled view:

<pre><code class="java">private void setComment(Address address, String comment) {
	setPlateComentToDisassembly(address, comment);
	setCommentToDecompiledCode(address, comment);
}

private void setPlateComentToDisassembly(Address address, String comment) {
	currentProgram.getListing().getCodeUnitAt(address).setComment(CodeUnit.PLATE_COMMENT, comment);
}

private void setCommentToDecompiledCode(Address address, String comment) {
	currentProgram.getListing().getCodeUnitAt(address).setComment(CodeUnit.PRE_COMMENT, comment);
}</code></pre>
Finally, the following function is my Q&D approach to convert a byte array to an ASCII string (even if it is a wide string). A more experienced Java developer may be able to implement it in a more beautiful way, but that's simply not me.

<pre><code class="java">private String AsciiDammit(byte[] data, int len) {
	boolean isWide = true;
	byte[] nonWide = new byte[len / 2];
	for (int i = 0; i &lt; len / 2; i++) {
		if (data[i * 2 + 1] != &#039;\0&#039;) {
			isWide = false;
			break;
		}
		nonWide[i] = data[i * 2];
	}
	return new String(isWide ? nonWide : data);
}</code></pre>
## Function Arguments

As described in the "Layout" section above, we will need to get the values passed to a function call. This is a bit more involved: the <code>getConstantCallArgument</code> function below accepts a memory address of a function call and a list of integers in the variable <code>argumentIndices</code>. These integers should specify the indices of function arguments the caller wants the value of (starting with 1). The function will return an array of optional longs: it has the same length as <code>argumentIndices</code> and contains the determined value if possible.

To determine the value, <code>getConstantCallArgument</code> decompiles the function that contains the call (<code>caller</code> in the Java code), retrieves a so-called "high-level function structure" via <code>getHighFunction</code> and then uses the function <code>traceVarnodeValue</code> to retrieve the values of the requested parameters. This <code>traceVarnodeValue</code> function is an incomplete implementation of a Pcode traversal. In at least two samples, it worked though, so I still think it is worth sharing.

<pre><code class="java">class UnknownVariableCopy extends Exception {
	public UnknownVariableCopy(PcodeOp unknownCode, Address addr) {
		super(String.format(&quot;unknown opcode %s for variable copy at %08X&quot;, unknownCode.getMnemonic(), addr.getOffset()));
	}
}

private OptionalLong[] getConstantCallArgument(Address addr, int[] argumentIndices) throws IllegalStateException, UnknownVariableCopy {
	int argumentPos = 0;
	OptionalLong argumentValues[] = new OptionalLong[argumentIndices.length];
	Function caller = getFunctionBefore(addr);
	if (caller == null)
		throw new IllegalStateException();
	DecompInterface decompInterface = new DecompInterface();
	decompInterface.openProgram(currentProgram);
	DecompileResults decompileResults = decompInterface.decompileFunction(caller, 120, monitor);
	if (!decompileResults.decompileCompleted())
		throw new IllegalStateException();
	HighFunction highFunction = decompileResults.getHighFunction();
	Iterator&lt;PcodeOpAST&gt; pCodes = highFunction.getPcodeOps(addr);
	while (pCodes.hasNext()) {
		PcodeOpAST instruction = pCodes.next();
		if (instruction.getOpcode() == PcodeOp.CALL) {
			for (int index : argumentIndices) {
				argumentValues[argumentPos] = traceVarnodeValue(instruction.getInput(index));
				argumentPos++;
			}
		}
	}
	return argumentValues;
}

private OptionalLong traceVarnodeValue(Varnode argument) throws UnknownVariableCopy {
	while (!argument.isConstant()) {
		PcodeOp ins = argument.getDef();
		if (ins == null)
			break;
		switch (ins.getOpcode()) {
		case PcodeOp.CAST:
		case PcodeOp.COPY:
			argument = ins.getInput(0);
			break;
		case PcodeOp.PTRSUB:
		case PcodeOp.PTRADD:
			argument = ins.getInput(1);
			break;
		case PcodeOp.INT_MULT:
		case PcodeOp.MULTIEQUAL:
			// known cases where an array is indexed
			return OptionalLong.empty();
		default:
			// don&#039;t know how to handle this yet.
			throw new UnknownVariableCopy(ins, argument.getAddress());
		}
	}
	return OptionalLong.of(argument.getOffset());
}</code></pre>
## Automated Deobfuscation

Equipped with ways to retrieve all calls to a specific function, get values of parameters to this calls and also be able to add annotations to Ghidra, we are only missing the actual deobfuscation function. As described above in the "Decryption" section, it is RC4. Instead of doing it the enterprise way ((by calling <code>Cipher.getInstance(&quot;RC4&quot;);</code> I guess)), we will use a <a href="https://gist.github.com/vbevans94/8182647">random implementation by some guy on github</a>. I even found myself an excuse for this: If one, at some point in the future, encounters a modified version of RC4, it is easily possible to do similar modifications in the code.

So putting all the pieces together, we end up with the following <code>run</code> method, which I will explain a bit below:

<pre><code class="java">public void run() throws Exception {
	String deobfuscatorName;
	try {
		deobfuscatorName = askString(&quot;Enter Name&quot;, &quot;Enter the name of the deobfuscation function below:&quot;, getFunctionBefore(currentAddress.next()).getName());
	} catch (CancelledException X) {
		return;
	}
        Function deobfuscator = getGlobalFunctions(deobfuscatorName).get(0);
	OUTER_LOOP: for (Address callAddr : getCallAddresses(deobfuscator)) {
		monitor.setMessage(String.format(&quot;parsing call at %08X&quot;, callAddr.getOffset()));

		int arguments[] = { 1, 2, 3, 4 };
		OptionalLong options[] = getConstantCallArgument(callAddr, arguments);
		for (OptionalLong option : options) {
			if (option.isEmpty()) {
				println(String.format(&quot;Argument to call at %08X is not a constant string.&quot;, callAddr.getOffset()));
				continue OUTER_LOOP;
			}
		}

		long blobAddress = options[0].getAsLong();
		int keyOffset = (int) options[1].getAsLong();
		int keyLength = (int) options[2].getAsLong();
		int dataLength = (int) options[3].getAsLong();
		if (dataLength == 0 || keyLength == 0)
			continue;

		byte[] key = getOriginalBytes(toAddr(blobAddress + keyOffset), keyLength);
		byte[] data = getOriginalBytes(toAddr(blobAddress + keyOffset + keyLength), dataLength);
		byte[] decrypted = new RC4(key).encrypt(data);

		String deobfuscated = AsciiDammit(decrypted, dataLength);
		println(String.format(&quot;%08X : %s&quot;, callAddr.getOffset(), deobfuscated));
		setComment(callAddr, String.format(&quot;Deobfuscated: %s&quot;, deobfuscated));
		createBookmark(callAddr, &quot;DeobfuscatedString&quot;, deobfuscated);
	}
}</code></pre>
The function first asks the user for a function name. It pre-populates the field with the currently selected function or, if the script was called before, with the previous input. Even though simple, this feels surprisingly good from a user experience (UX) perspective.

The function then iterates over all calls to this deobfuscation function and retrieves values for arguments 1-4. If all of them are set, they are assigned to the following variables:

* <code>blobAddress</code> reference to the address of the blob of encrypted data in the malware
* <code>keyOffset</code> offset into that blob
* <code>keyLength</code> length of the key buffer starting at the offset into the blob
* <code>dataLength</code> length of the data buffer starting directly after the key buffer

The function then retrieves the key and the encrypted data and uses the <code>RC4</code> class to deobfuscate it. The result is then passed to the <code>AsciiDammit</code> function, which will also take care of decoding wide-strings. It then prints the address of the call and the deobfuscated string to the console, sets a comment in the disassembly and the decompile views and, creates a bookmark to the call, so we can easily look at a list of all deobfuscated strings enabling buttom-up analysis.

The <a href="https://github.com/nullteilerfrei/reversing-class/blob/master/scripts/java/SodinokibiREvilStrings.java">full script without explanation can be found on github</a>.

## Decrypted strings

For google-ability, here is a list of all deobfuscated strings in the analysed sample:

| Address      | Deobfuscated String
|---           |---
| <code>0x00401B2F</code> | <code>exp</code>
| <code>0x0040151E</code> | <code>pk</code>
| <code>0x00401538</code> | <code>pid</code>
| <code>0x00401552</code> | <code>sub</code>
| <code>0x0040156C</code> | <code>dbg</code>
| <code>0x00401589</code> | <code>wht</code>
| <code>0x004015A4</code> | <code>wfld</code>
| <code>0x004015BF</code> | <code>wipe</code>
| <code>0x004015D9</code> | <code>prc</code>
| <code>0x004015F6</code> | <code>dmn</code>
| <code>0x00401610</code> | <code>net</code>
| <code>0x0040162B</code> | <code>nbody</code>
| <code>0x00401646</code> | <code>nname</code>
| <code>0x00401664</code> | <code>img</code>
| <code>0x0040167B</code> | <code>fast</code>
| <code>0x00401838</code> | <code>none</code>
| <code>0x00401851</code> | <code>true</code>
| <code>0x0040186D</code> | <code>false</code>
| <code>0x004019BE</code> | <code>-nolan</code>
| <code>0x00401B9C</code> | <code>SOFTWARE\recfg</code>
| <code>0x00401BB5</code> | <code>rnd_ext</code>
| <code>0x00401EA7</code> | <code>{UID}</code>
| <code>0x00401EC0</code> | <code>{KEY}</code>
| <code>0x00401ED9</code> | <code>{EXT}</code>
| <code>0x00401EF5</code> | <code>{USERNAME}</code>
| <code>0x00401F14</code> | <code>{NOTENAME}</code>
| <code>0x00401F30</code> | <code>SYSTEM</code>
| <code>0x00401F46</code> | <code>USER</code>
| <code>0x00401CCF</code> | <code>SOFTWARE\recfg</code>
| <code>0x00401CE8</code> | <code>stat</code>
| <code>0x00401D71</code> | <code>{&quot;ver&quot;:%d,&quot;pid&quot;:&quot;%s&quot;,&quot;sub&quot;:&quot;%s&quot;,&quot;pk&quot;:&quot;%s&quot;,&quot;uid&quot;:&quot;%s&quot;,&quot;sk&quot;:&quot;%s&quot;,&quot;unm&quot;:&quot;%s&quot;,&quot;net&quot;:&quot;%s&quot;,&quot;grp&quot;:&quot;%s&quot;,&quot;lng&quot;:&quot;%s&quot;,&quot;bro&quot;:%s,&quot;os&quot;:&quot;%s&quot;,&quot;bit&quot;:%d,</code> <code>&quot;dsk&quot;:&quot;%s&quot;,&quot;ext&quot;:&quot;%s&quot;}</code>
| <code>0x00401FF4</code> | <code>.lock</code>
| <code>0x004020D1</code> | <code>{UID}</code>
| <code>0x004020EA</code> | <code>{KEY}</code>
| <code>0x00402103</code> | <code>{EXT}</code>
| <code>0x00402184</code> | <code>{EXT}</code>
| <code>0x00402216</code> | <code>SOFTWARE\recfg</code>
| <code>0x00402232</code> | <code>sub_key</code>
| <code>0x0040224B</code> | <code>pk_key</code>
| <code>0x00402264</code> | <code>sk_key</code>
| <code>0x00402280</code> | <code>0_key</code>
| <code>0x00403933</code> | <code>.bmp</code>
| <code>0x00403E5F</code> | <code>cmd.exe</code>
| <code>0x00403E7E</code> | <code>/c vssadmin.exe Delete Shadows /All /Quiet &amp; bcdedit /set {default} recoveryenabled No &amp; bcdedit /set {default} bootstatuspolicy ignoreallfailures</code>
| <code>0x00404085</code> | <code>SYSTEM\CurrentControlSet\services\Tcpip\Parameters</code>
| <code>0x0040409E</code> | <code>Domain</code>
| <code>0x004040FA</code> | <code>WORKGROUP</code>
| <code>0x00404199</code> | <code>Control Panel\International</code>
| <code>0x004041B2</code> | <code>LocaleName</code>
| <code>0x004042A6</code> | <code>%08X%08X</code>
| <code>0x0040432F</code> | <code>SOFTWARE\Microsoft\Windows NT\CurrentVersion</code>
| <code>0x00404348</code> | <code>productName</code>
| <code>0x004043E0</code> | <code>explorer.exe</code>
| <code>0x004048B5</code> | <code>Global\206D87E0-0E60-DF25-DD8F-8E4E7D1E3BF0</code>
| <code>0x00404BF9</code> | <code>runas</code>
| <code>0x004058B3</code> | <code>qJiQmi65SC9GfVbj</code>
| <code>0x0040660D</code> | <code>\\?\A:\</code>
| <code>0x00406547</code> | <code>\\?\UNC</code>
| <code>0x00405C02</code> | <code>CreateStreamOnHGlobal</code>
| <code>0x00405D3B</code> | <code>ole32.dll</code>
| <code>0x00406B6A</code> | <code>win32kfull.sys</code>
| <code>0x00406B83</code> | <code>win32k.sys</code>
| <code>0x004012A0</code> | <code>fld</code>
| <code>0x004012B7</code> | <code>fls</code>
| <code>0x004012CE</code> | <code>ext</code>
| <code>0x004030B7</code> | <code>https://</code>
| <code>0x004030F7</code> | <code>wp-content</code>
| <code>0x0040311B</code> | <code>static</code>
| <code>0x00403140</code> | <code>content</code>
| <code>0x00403162</code> | <code>include</code>
| <code>0x00403185</code> | <code>uploads</code>
| <code>0x004031A4</code> | <code>news</code>
| <code>0x004031C0</code> | <code>data</code>
| <code>0x004031DF</code> | <code>admin</code>
| <code>0x00403264</code> | <code>images</code>
| <code>0x00403287</code> | <code>pictures</code>
| <code>0x004032AA</code> | <code>image</code>
| <code>0x004032CC</code> | <code>temp</code>
| <code>0x004032E8</code> | <code>tmp</code>
| <code>0x00403308</code> | <code>graphic</code>
| <code>0x00403327</code> | <code>assets</code>
| <code>0x00403345</code> | <code>pics</code>
| <code>0x00403360</code> | <code>game</code>
| <code>0x00403441</code> | <code>jpg</code>
| <code>0x00403457</code> | <code>png</code>
| <code>0x00403470</code> | <code>gif</code>
| <code>0x00406849</code> | <code>Mozilla/5.0 (Windows NT 6.1; WOW64; rv:64.0) Gecko/20100101 Firefox/64.0</code>
| <code>0x00406919</code> | <code>POST</code>
| <code>0x0040697E</code> | <code>Content-Type: application/octet-stream\nConnection: close</code>
| <code>0x004027BC</code> | <code>program files</code>
| <code>0x004027D5</code> | <code>program files (x86)</code>
| <code>0x0040281F</code> | <code>sql</code>
| <code>0x00405C40</code> | <code>advapi32.dll</code>
| <code>0x00405C79</code> | <code>crypt32.dll</code>
| <code>0x00405CB2</code> | <code>gdi32.dll</code>
| <code>0x00405CF6</code> | <code>mpr.dll</code>
| <code>0x00405F20</code> | <code>shell32.dll</code>
| <code>0x00405F59</code> | <code>shlwapi.dll</code>
| <code>0x00405F92</code> | <code>user32.dll</code>
| <code>0x00405FCB</code> | <code>winhttp.dll</code>
| <code>0x00406004</code> | <code>winmm.dll</code>

## References

* <a href="https://www.youtube.com/watch?v=l2P5CMH9TE0">OALabs - IDA Pro Automated String Decryption For REvil Ransomware</a>
* <a href="https://github.com/ghidraninja/ghidra_scripts/wiki/Python-Scripting-Cheat-Sheet">Python Scripting Cheat Sheet by Thomas Roth</a>

</div>						
				<div class="clearfix pdt20"></div>
						
										
									<div class="singletags">
						<p>
							<span class="fa fa-tag"></span>
							Tags: 							<a href="https://blag.nullteilerfrei.de/tag/reverse-engineering/" rel="tag">reverse engineering</a>						</p>
					</div>
										
			</div>

			
<div id="comments" class="comments-area">

	
	
		<div id="respond" class="comment-respond">
		<h2 id="reply-title" class="comment-reply-title">Leave a Reply <small><a rel="nofollow" id="cancel-comment-reply-link" href="/2020/02/02/defeating-sodinokibi-revil-string-obfuscation-in-ghidra/#respond" style="display:none;">Cancel reply</a></small></h2><form action="https://blag.nullteilerfrei.de/wp-comments-post.php" method="post" id="commentform" class="comment-form"><p class="comment-notes"><span id="email-notes">Your email address will not be published.</span> <span class="required-field-message">Required fields are marked <span class="required">*</span></span></p><div class="form-group comment-form-comment">
		<label for="comment">Comment<span class="required"> *</span></label> 
		<textarea class="form-control" placeholder="Your comment" id="comment" name="comment" cols="45" rows="8" aria-required="true"></textarea>
		</div><div class="form-group comment-form-author"><label for="author">Name <span class="required">*</span></label> <input class="form-control" placeholder="Your name" id="author" name="author" type="text" value="" size="30" aria-required='true' /></div>
<div class="form-group comment-form-email"><label for="email">Email <span class="required">*</span></label> <input class="form-control" placeholder="Your email" id="email" name="email" type="text" value="" size="30" aria-required='true' /></div>
<div class="form-group comment-form-url"><label for="url">Website</label> <input class="form-control" placeholder="Your website" id="url" name="url" type="text" value="" size="30" /></div>
<p class="form-submit"><input name="submit" type="submit" id="submit" class="spclbtn" value="Post Comment" /> <input type='hidden' name='comment_post_ID' value='5073' id='comment_post_ID' />
<input type='hidden' name='comment_parent' id='comment_parent' value='0' />
</p></form>	</div><!-- #respond -->
	
</div><!-- .comments-area -->
				
		</div>
			
	</div>
</div>

	<nav class="navigation post-navigation" aria-label="Posts">
		<h2 class="screen-reader-text">Post navigation</h2>
		<div class="nav-links"><div class="nav-previous"><a href="https://blag.nullteilerfrei.de/2020/02/02/ghidra-scripts-in-java-a-snippet-to-getoriginalbytes/" rel="prev">&larr; Ghidra Scripts in Java &#038; A Snippet to GetOriginalBytes</a></div><div class="nav-next"><a href="https://blag.nullteilerfrei.de/2020/02/13/whack-that-slack/" rel="next">How to loot immortal Tokens from Slack mobile &rarr;</a></div></div>
	</nav></div>
		</div>
	</div>
</div>


<div class="container-fluid footer-copyright">
	<div class="container">
		<div class="row">

			<div class="col-md-6">
				<div class="cprtlft_ctmzr">
					Authors have copyrights. People say these things in footers.				</div>
			</div>

			<div class="col-md-6">
				<div class="cprtrgt_ctmzr fr spclfl">
					All Hail the Great Yawgmoth, Father of Machines.				</div>
			</div>

		</div>
	</div>
</div>


<link rel='stylesheet' id='hljstheme-css' href='https://blag.nullteilerfrei.de/wp-content/plugins/wp-code-highlightjs/styles/default.css?ver=0.6.2' type='text/css' media='all' />
<script type="text/javascript" src="https://blag.nullteilerfrei.de/wp-content/themes/ntf_new/katex/katex.min.js?ver=6.7.1" id="katex-main-js"></script>
<script type="text/javascript" src="https://blag.nullteilerfrei.de/wp-content/themes/ntf_new/auto-render.min.js?ver=6.7.1" id="katex-auto-js"></script>
<script type="text/javascript" src="https://blag.nullteilerfrei.de/wp-content/themes/ntf_new/default.js?ver=6.7.1" id="configure-js"></script>
<script type="text/javascript" src="https://blag.nullteilerfrei.de/wp-content/themes/switty/js/bootstrap.js?ver=3.3.7" id="bootstrap-js"></script>
<script type="text/javascript" src="https://blag.nullteilerfrei.de/wp-includes/js/imagesloaded.min.js?ver=5.0.0" id="imagesloaded-js"></script>
<script type="text/javascript" src="https://blag.nullteilerfrei.de/wp-includes/js/masonry.min.js?ver=4.2.2" id="masonry-js"></script>
<script type="text/javascript" src="https://blag.nullteilerfrei.de/wp-content/themes/switty/js/script.js?ver=1.1.5" id="switty-script-js"></script>
<script type="text/javascript" src="https://blag.nullteilerfrei.de/wp-includes/js/comment-reply.min.js?ver=6.7.1" id="comment-reply-js" async="async" data-wp-strategy="async"></script>
<script type="text/javascript" src="https://blag.nullteilerfrei.de/wp-content/plugins/wp-code-highlightjs/highlight.common.pack.js?ver=0.6.2" id="hljs_preload-js"></script>
<script type="text/javascript" src="https://blag.nullteilerfrei.de/wp-content/plugins/wp-code-highlightjs/highlight.custom.pack.js?ver=0.6.2" id="hljs-js"></script>
    <style>pre.hljs {padding: 5px;}
pre.hljs code {}</style>
    <script type="text/javascript">
    (function($, window) {
        var init_fn_flag = false;
        var init_fn = (function() {
            if (init_fn_flag)
                return;
            init_fn_flag = true;
             hljs.configure({"tabReplace":"    "});
            $('pre code').each(function(i, block) {
                hljs.highlightBlock(block);
            });
        });
        $(document).ready(init_fn);
        $(window).on("load", init_fn);
    })(jQuery, window);
    </script>
<img src="https://vg09.met.vgwort.de/na/5edcad4ff2074f01b6fa134fa9de773a" width="1" height="1" alt="" class="wpvgw-marker-image" loading="eager" data-no-lazy="1" referrerpolicy="no-referrer-when-downgrade" style="display:none;" /></body>
</html>
