<!DOCTYPE html><html lang="en"><head><meta charSet="utf-8"/><meta name="viewport" content="width=device-width"/><title>Initial research exposing JOKERSPY — Elastic Security Labs</title><meta name="description" content="Explore JOKERSPY, a recently discovered campaign that targets financial institutions with Python backdoors. This article covers reconnaissance, attack patterns, and methods of identifying JOKERSPY in your network."/><meta property="og:title" content="Initial research exposing JOKERSPY — Elastic Security Labs"/><meta property="og:description" content="Explore JOKERSPY, a recently discovered campaign that targets financial institutions with Python backdoors. This article covers reconnaissance, attack patterns, and methods of identifying JOKERSPY in your network."/><meta property="og:image" content="https://www.elastic.co/security-labs/assets/images/inital-research-of-jokerspy/photo-edited-04@2x.jpg?2fb7a9196a0978c136088f766be986f5"/><meta property="og:image:alt" content="Explore JOKERSPY, a recently discovered campaign that targets financial institutions with Python backdoors. This article covers reconnaissance, attack patterns, and methods of identifying JOKERSPY in your network."/><meta property="og:site_name"/><meta property="og:url" content="https://www.elastic.co/security-labs/inital-research-of-jokerspy"/><meta property="og:type" content="website"/><meta name="twitter:card" content="summary_large_image"/><meta name="twitter:title" content="Initial research exposing JOKERSPY — Elastic Security Labs"/><meta name="twitter:description" content="Explore JOKERSPY, a recently discovered campaign that targets financial institutions with Python backdoors. This article covers reconnaissance, attack patterns, and methods of identifying JOKERSPY in your network."/><meta name="twitter:image" content="https://www.elastic.co/security-labs/assets/images/inital-research-of-jokerspy/photo-edited-04@2x.jpg?2fb7a9196a0978c136088f766be986f5"/><meta name="twitter:image:alt" content="Explore JOKERSPY, a recently discovered campaign that targets financial institutions with Python backdoors. This article covers reconnaissance, attack patterns, and methods of identifying JOKERSPY in your network."/><link rel="canonical" href="https://www.elastic.co/security-labs/inital-research-of-jokerspy"/><link rel="preload" href="/security-labs/logo.svg" as="image" fetchpriority="high"/><link rel="preload" as="image" imageSrcSet="/security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Finital-research-of-jokerspy%2Fphoto-edited-04%402x.jpg&amp;w=640&amp;q=75 640w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Finital-research-of-jokerspy%2Fphoto-edited-04%402x.jpg&amp;w=750&amp;q=75 750w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Finital-research-of-jokerspy%2Fphoto-edited-04%402x.jpg&amp;w=828&amp;q=75 828w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Finital-research-of-jokerspy%2Fphoto-edited-04%402x.jpg&amp;w=1080&amp;q=75 1080w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Finital-research-of-jokerspy%2Fphoto-edited-04%402x.jpg&amp;w=1200&amp;q=75 1200w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Finital-research-of-jokerspy%2Fphoto-edited-04%402x.jpg&amp;w=1920&amp;q=75 1920w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Finital-research-of-jokerspy%2Fphoto-edited-04%402x.jpg&amp;w=2048&amp;q=75 2048w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Finital-research-of-jokerspy%2Fphoto-edited-04%402x.jpg&amp;w=3840&amp;q=75 3840w" imageSizes="100vw" fetchpriority="high"/><meta name="next-head-count" content="19"/><script src="https://play.vidyard.com/embed/v4.js" type="text/javascript" async=""></script><link rel="icon" href="/security-labs/favicon.svg"/><link rel="mask-icon" href="/security-labs/favicon.svg" color="#1C1E23"/><link rel="apple-touch-icon" href="/security-labs/favicon.svg"/><meta name="theme-color" content="#1C1E23"/><link rel="preload" href="/security-labs/_next/static/media/6d93bde91c0c2823-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/a34f9d1faa5f3315-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/369c6e283c5acc6e-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/92f44bb82993d879-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/ee71530a747ff30b-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/9fac010bc1f02be0-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/cbf5fbad4d73afac-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><script id="google-tag-manager" data-nscript="beforeInteractive">
          (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
          new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
          j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
          'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
          })(window,document,'script','dataLayer','GTM-KNJMG2M');
          </script><link rel="preload" href="/security-labs/_next/static/css/265ed7605fd03477.css" as="style"/><link rel="stylesheet" href="/security-labs/_next/static/css/265ed7605fd03477.css" data-n-g=""/><link rel="preload" href="/security-labs/_next/static/css/1007ff9e696f6f88.css" as="style"/><link rel="stylesheet" href="/security-labs/_next/static/css/1007ff9e696f6f88.css" data-n-p=""/><noscript data-n-css=""></noscript><script defer="" nomodule="" src="/security-labs/_next/static/chunks/polyfills-78c92fac7aa8fdd8.js"></script><script src="/security-labs/_next/static/chunks/webpack-7987c6fda769d510.js" defer=""></script><script src="/security-labs/_next/static/chunks/framework-7a7e500878b44665.js" defer=""></script><script src="/security-labs/_next/static/chunks/main-ebd33a9f1cae5951.js" defer=""></script><script src="/security-labs/_next/static/chunks/pages/_app-cb8664d1d3df2511.js" defer=""></script><script src="/security-labs/_next/static/chunks/fec483df-43ee602fabdfe3a4.js" defer=""></script><script src="/security-labs/_next/static/chunks/877-34f408271ef44c22.js" defer=""></script><script src="/security-labs/_next/static/chunks/511-d08fe0fdd6f8a984.js" defer=""></script><script src="/security-labs/_next/static/chunks/683-a5053c37fe5bd0c9.js" defer=""></script><script src="/security-labs/_next/static/chunks/402-791da5e634930df4.js" defer=""></script><script src="/security-labs/_next/static/chunks/616-0b017b9cfa597392.js" defer=""></script><script src="/security-labs/_next/static/chunks/pages/%5Bslug%5D-3d74e9a05863bcfd.js" defer=""></script><script src="/security-labs/_next/static/dGrrQfBbQkqaleQ_11aBK/_buildManifest.js" defer=""></script><script src="/security-labs/_next/static/dGrrQfBbQkqaleQ_11aBK/_ssgManifest.js" defer=""></script></head><body><noscript><iframe src="https://www.googletagmanager.com/ns.html?id=GTM-KNJMG2M" height="0" width="0" style="display:none;visibility:hidden"></iframe></noscript><div id="__next"><main class="__variable_0351a5 __variable_1f211e __variable_a5b5f5 flex flex-col min-h-screen"><div class="scroll-percentage-container"><div class="scroll-percentage-bar" style="width:0%"></div></div><nav class="fixed w-full z-40" data-headlessui-state=""><div class="bg-gradient-to-b from-zinc-900 from-20% h-[200%] to-transparent absolute inset-0 z-0 pointer-events-none"></div><div class="container relative z-10"><div class="flex h-16 items-center justify-between"><div class="flex items-center justify-start w-full"><div><a class="hover:opacity-50 transition" href="/security-labs"><img alt="elastic security labs logo" fetchpriority="high" width="200" height="30" decoding="async" data-nimg="1" style="color:transparent" src="/security-labs/logo.svg"/></a></div><div class="hidden lg:ml-6 lg:block"><div class="flex space-x-4"><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/about"><span>About</span></a><div class="relative" data-headlessui-state=""><div><button class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" id="headlessui-menu-button-:R2kpm:" type="button" aria-haspopup="menu" aria-expanded="false" data-headlessui-state="">Topics<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" class="ml-1 -mr-1 h-4 w-4 text-zinc-400 relative top-[1px]"><path fill-rule="evenodd" d="M5.23 7.21a.75.75 0 011.06.02L10 11.168l3.71-3.938a.75.75 0 111.08 1.04l-4.25 4.5a.75.75 0 01-1.08 0l-4.25-4.5a.75.75 0 01.02-1.06z" clip-rule="evenodd"></path></svg></button></div></div><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/category/vulnerability-updates"><span>Vulnerability updates</span></a><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/category/reports"><span>Reports</span></a><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/category/tools"><span>Tools</span></a></div></div><div class="hidden lg:ml-auto lg:block"><div class="flex items-center space-x-4"><a class="rounded flex items-center p-4 text-white focus:outline-none focus:ring-0 focus:ring-offset-1 focus:ring-offset-zinc-600 group" href="https://search.elastic.co/?location%5B0%5D=Security%20Labs&amp;referrer=https://www.elastic.co/security-labs/inital-research-of-jokerspy"><div class="flex items-center relative font-display"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-6 w-6"><path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z"></path></svg></div></a><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="https://www.elastic.co/security-labs/rss/feed.xml"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" class="h-4 w-4 mr-1"><path d="M3.75 3a.75.75 0 00-.75.75v.5c0 .414.336.75.75.75H4c6.075 0 11 4.925 11 11v.25c0 .414.336.75.75.75h.5a.75.75 0 00.75-.75V16C17 8.82 11.18 3 4 3h-.25z"></path><path d="M3 8.75A.75.75 0 013.75 8H4a8 8 0 018 8v.25a.75.75 0 01-.75.75h-.5a.75.75 0 01-.75-.75V16a6 6 0 00-6-6h-.25A.75.75 0 013 9.25v-.5zM7 15a2 2 0 11-4 0 2 2 0 014 0z"></path></svg><span class="hidden xl:block">Subscribe</span></a><a class="font-display inline-flex items-center justify-center rounded font-semibold disabled:!select-none disabled:!bg-gray-400 bg-blue-600 text-white hover:bg-blue-500 enabled:hover:text-white/80 transition-colors px-4 py-2 text-sm flex-1 lg:flex-auto" href="https://cloud.elastic.co/registration?cta=cloud-registration&amp;tech=trial&amp;plcmt=navigation&amp;pg=security-labs">Start free trial</a><a class="font-display inline-flex items-center justify-center rounded font-semibold text-white disabled:!select-none disabled:!bg-gray-400 button px-4 py-2 text-sm flex-1 lg:flex-auto" href="https://www.elastic.co/contact">Contact sales</a></div></div></div><div class="-mr-2 flex lg:hidden"><a class="rounded flex items-center p-4 text-white focus:outline-none focus:ring-0 focus:ring-offset-1 focus:ring-offset-zinc-600 group" href="https://search.elastic.co/?location%5B0%5D=Security%20Labs&amp;referrer=https://www.elastic.co/security-labs/inital-research-of-jokerspy"><div class="flex items-center relative font-display"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-6 w-6"><path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z"></path></svg></div></a><button class="inline-flex items-center justify-center rounded-md p-2 text-gray-400 hover:bg-gray-700 hover:text-white focus:outline-none focus:ring-2 focus:ring-inset focus:ring-white" id="headlessui-disclosure-button-:R59m:" type="button" aria-expanded="false" data-headlessui-state=""><span class="sr-only">Open navigation menu</span><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="block h-6 w-6"><path stroke-linecap="round" stroke-linejoin="round" d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5"></path></svg></button></div></div></div></nav><main class="mb-20 flex-1 flex flex-col"><div class="h-48 md:h-64"><div class="after:absolute after:block after:bg-blue-400 after:blur-3xl after:content-[&#x27; &#x27;] after:h-96 after:opacity-5 after:right-0 after:rounded-full after:top-20 after:w-1/2 after:z-0 before:absolute before:block before:blur-3xl before:bg-orange-400 before:content-[&#x27; &#x27;] before:h-96 before:left-0 before:opacity-5 before:rounded-full before:w-1/2 before:z-0 w-full h-full relative"><div class="relative z-10 w-full h-[125%] -top-[25%] bg-no-repeat bg-cover bg-bottom flex items-center justify-center" style="background-image:url(/security-labs/grid.svg)"></div></div></div><article class="px-4"><div class="max-w-7xl mx-auto relative z-10 flex flex-col space-y-4"><div class="eyebrow break-words"><time class="block mb-2 md:mb-0 md:inline-block article-published-date" dateTime="2023-06-21T00:00:00.000Z">21 June 2023</time><span class="hidden md:inline-block md:mx-2">•</span><a class="hover:text-blue-400 text-xs md:text-sm whitespace-nowrap author-name" href="/security-labs/author/colson-wilhoit">Colson Wilhoit</a><span class="mx-2">•</span><a class="hover:text-blue-400 text-xs md:text-sm whitespace-nowrap author-name" href="/security-labs/author/salim-bitam">Salim Bitam</a><span class="mx-2">•</span><a class="hover:text-blue-400 text-xs md:text-sm whitespace-nowrap author-name" href="/security-labs/author/seth-goodwin">Seth Goodwin</a><span class="mx-2">•</span><a class="hover:text-blue-400 text-xs md:text-sm whitespace-nowrap author-name" href="/security-labs/author/andrew-pease">Andrew Pease</a><span class="mx-2">•</span><a class="hover:text-blue-400 text-xs md:text-sm whitespace-nowrap author-name" href="/security-labs/author/ricardo-ungureanu">Ricardo Ungureanu</a></div><h1 class="font-bold leading-tighter text-3xl md:text-5xl"><span>Initial research exposing&nbsp;JOKERSPY</span></h1><p class="text-zinc-200 text-base md:text-xl">An overview of JOKERSPY, discovered in June 2023, which deployed custom and open source macOS tools to exploit a cryptocurrency exchange located in Japan.</p><div class="flex items-center mt-4 text-zinc-200 text-sm space-x-4 border-t border-white/25 pt-4"><span class="flex items-center space-x-1"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-4 w-4 text-zinc-400"><path stroke-linecap="round" stroke-linejoin="round" d="M12 6v6h4.5m4.5 0a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg><span>15 min read</span></span><span class="flex items-center space-x-1"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-4 w-4 text-zinc-400"><path stroke-linecap="round" stroke-linejoin="round" d="M9.568 3H5.25A2.25 2.25 0 003 5.25v4.318c0 .597.237 1.17.659 1.591l9.581 9.581c.699.699 1.78.872 2.607.33a18.095 18.095 0 005.223-5.223c.542-.827.369-1.908-.33-2.607L11.16 3.66A2.25 2.25 0 009.568 3z"></path><path stroke-linecap="round" stroke-linejoin="round" d="M6 6h.008v.008H6V6z"></path></svg><span><a class="hover:text-blue-400 whitespace-nowrap" href="/security-labs/category/attack-pattern">Attack pattern</a>, </span><span><a class="hover:text-blue-400 whitespace-nowrap" href="/security-labs/category/campaigns">Campaigns</a></span></span></div></div><div class="max-w-7xl mx-auto"><div class="bg-zinc-900 border border-zinc-800 drop-shadow-lg p-5 sm:p-8 md:p-10 rounded-3xl mt-5 md:mt-10"><div class="relative w-full rounded-lg overflow-hidden aspect-video"><img alt="Initial research exposing JOKERSPY" fetchpriority="high" decoding="async" data-nimg="fill" class="object-cover absolute h-full w-full" style="position:absolute;height:100%;width:100%;left:0;top:0;right:0;bottom:0;color:transparent" sizes="100vw" srcSet="/security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Finital-research-of-jokerspy%2Fphoto-edited-04%402x.jpg&amp;w=640&amp;q=75 640w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Finital-research-of-jokerspy%2Fphoto-edited-04%402x.jpg&amp;w=750&amp;q=75 750w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Finital-research-of-jokerspy%2Fphoto-edited-04%402x.jpg&amp;w=828&amp;q=75 828w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Finital-research-of-jokerspy%2Fphoto-edited-04%402x.jpg&amp;w=1080&amp;q=75 1080w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Finital-research-of-jokerspy%2Fphoto-edited-04%402x.jpg&amp;w=1200&amp;q=75 1200w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Finital-research-of-jokerspy%2Fphoto-edited-04%402x.jpg&amp;w=1920&amp;q=75 1920w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Finital-research-of-jokerspy%2Fphoto-edited-04%402x.jpg&amp;w=2048&amp;q=75 2048w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Finital-research-of-jokerspy%2Fphoto-edited-04%402x.jpg&amp;w=3840&amp;q=75 3840w" src="/security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Finital-research-of-jokerspy%2Fphoto-edited-04%402x.jpg&amp;w=3840&amp;q=75"/><div class="absolute border border-white/50 inset-0 mix-blend-overlay rounded-lg z-10"></div></div></div></div><div class="lg:max-w-7xl mx-auto relative mt-12 lg:grid lg:grid-cols-4 lg:gap-8 items-start"><div class="flex justify-center lg:col-span-3"><div class="prose lg:prose-lg prose-invert w-full article-content"><div><h2 class="font-bold text-2xl md:text-4xl relative"><span id="key-takeaways" class="absolute -top-32"></span>Key takeaways</h2>
<ul>
<li>This is an initial notification of an active intrusion with additional details to follow</li>
<li>REF9134 leverages custom and open source tools for reconnaissance and command and control</li>
<li>Targets of this activity include a cryptocurrency exchange in Japan</li>
</ul>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="preamble" class="absolute -top-32"></span>Preamble</h2>
<p>This research article explores a recently discovered intrusion we’re calling REF9134, which involves using the <strong>sh.py</strong> backdoor to deploy the macOS Swiftbelt enumeration tool. <strong>sh.py</strong> and <strong>xcc</strong> have recently been dubbed <a href="https://www.bitdefender.com/blog/labs/fragments-of-cross-platform-backdoor-hint-at-larger-mac-os-attack/">JOKERSPY</a> by Bitdefender.</p>
<p>Specifically, this research covers:</p>
<ul>
<li>How Elastic Security Labs identified reconnaissance from the adversary group</li>
<li>The adversary’s steps to evade detection using <strong>xcc</strong> , installing the <strong>sh.py</strong> backdoor, and deploying enumeration tools</li>
</ul>
<p>A deeper look at this attack may be published at a later date.</p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="overview" class="absolute -top-32"></span>Overview</h2>
<p>In late May of 2023, an adversary with existing access in a prominent Japanese cryptocurrency exchange tripped one of our diagnostic endpoint alerts that detected the execution of a binary ( <strong>xcc</strong> ). <strong>xcc</strong> is not trusted by Apple, and the adversary self-signed using the native macOS tool <strong>codesign</strong>. While this detection in itself was not necessarily innocuous, the industry vertical and additional activity we observed following these initial alerts caught our eye and caused us to pay closer attention.</p>
<p>Following the execution of <strong>xcc</strong> , we observed the threat actor attempting to bypass TCC permissions by creating their own TCC database and trying to replace the existing one. On June 1st a new Python-based tool was seen executing from the same directory as <strong>xcc</strong> and was utilized to execute an open-source macOS post-exploitation enumeration tool known as Swiftbelt.</p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="analysis" class="absolute -top-32"></span>Analysis</h2>
<p>REF9134 is an intrusion into a large Japan-based cryptocurrency service provider focusing on asset exchange for trading Bitcoin, Ethereum, and other common cryptocurrencies.</p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="the-xcc-binary" class="absolute -top-32"></span>The xcc binary</h3>
<p><strong>xcc</strong> ( <strong>d895075057e491b34b0f8c0392b44e43ade425d19eaaacea6ef8c5c9bd3487d8</strong> ) is a self-signed multi-architecture binary written in Swift which is used to evaluate current system permissions. The version observed by Elastic Security Labs is signed as <strong>XProtectCheck-55554944f74096a836b73310bd55d97d1dff5cd4</strong> , and has a code signature resembling <a href="https://objective-see.org/blog/blog_0x73.html">publicly known</a> and untrusted payloads.</p>
<p></p>
<p>To identify other binaries signed with the same identifier, we converted <strong>XProtectCheck-55554944f74096a836b73310bd55d97d1dff5cd4</strong> to hexadecimal and searched VirusTotal to identify 3 additional samples ( <strong>content:{5850726f74656374436865636b2d35353535343934346637343039366138333662373333313062643535643937643164666635636434}</strong> ).</p>
<p>Each contained the same core functionality with structural differences. These discrepancies may indicate that these variants of <strong>xcc</strong> were developed to bypass endpoint capabilities that interfered with execution.</p>
<p>Shortly after the creation of <strong>xcc</strong> , researchers observed the threat actor copying <strong>/Users/Shared/tcc.db</strong> over the existing TCC database, <strong>/Library/Application Support/com.apple.TCC/TCC.db</strong>. This may enable the threat to avoid TCC prompts visible to system users while simultaneously abusing a directory with broad file write permissions.</p>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="xcode-artifacts" class="absolute -top-32"></span>XCode artifacts</h4>
<p>During analysis of this binary, researchers identified two unique paths, <strong>/Users/joker/Developer/Xcode/DerivedData/</strong> and <strong>/Users/joker/Downloads/Spy/XProtectCheck/XProtectCheck/</strong> , which stood out as anomalous. The default path for compiling code with Xcode is <strong>/Users/[username]/Developer/Xcode/DerivedData</strong>.</p>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="abusing-tcc" class="absolute -top-32"></span>Abusing TCC</h4>
<p>These introspection permissions are managed by the native Transparency, Consent, and Control (TCC) feature. Researchers determined that <strong>xcc</strong> checks FullDiskAccess and ScreenRecording permissions, as well as checking if the screen is currently locked and if the current process is a trusted accessibility client.</p>
<p></p>
<p>Upon successfully executing in our <a href="https://www.elastic.co/security-labs/click-click-boom-automating-protections-testing-with-detonate">Detonate</a> environment, the following results were displayed:</p>
<p></p>
<p>Once the custom TCC database was placed in the expected location, the threat actor executed the <strong>xcc</strong> binary.</p>
<p></p>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="initial-access" class="absolute -top-32"></span>Initial access</h4>
<p>The <strong>xcc</strong> binary was executed via bash by three separate processes</p>
<ul>
<li><strong>/Applications/IntelliJ IDEA.app/Contents/MacOS/idea</strong></li>
<li><strong>/Applications/iTerm.app/Contents/MacOS/iTerm2</strong></li>
<li><strong>/Applications/Visual Studio Code.app/Contents/MacOS/Electron.</strong></li>
</ul>
<p>While we are still investigating and continuing to gather information, we strongly believe that the initial access for this malware was a malicious or backdoored plugin or 3rd party dependency that provided the threat actor access. This aligns with the connection that was made by the researchers at <a href="https://www.bitdefender.com/blog/labs/fragments-of-cross-platform-backdoor-hint-at-larger-mac-os-attack/">Bitdefender</a> who correlated the hardcoded domain found in a version of the <strong>sh.py</strong> backdoor to a Tweet about an infected macOS QR code reader which was found to have a malicious dependency.</p>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="deployed-cryptographic-libraries" class="absolute -top-32"></span>Deployed cryptographic libraries</h4>
<p>On May 31st, researchers observed three non-native <a href="https://developer.apple.com/library/archive/documentation/DeveloperTools/Conceptual/DynamicLibraries/100-Articles/UsingDynamicLibraries.html">DyLibs</a> deployed to <strong>/Users/shared/keybag/</strong> called <strong>libcrypto.1.0.0.dylib</strong> , <strong>libncursesw.5.dylib</strong> , and <strong>libssl.1.0.0.dylib</strong>. On MacOS, keys for file and keychain Data Protection are stored in <a href="https://support.apple.com/en-au/guide/security/sec6483d5760/web">keybags</a>, and pertain to iOS, iPadOS, watchOS, and tvOS. At this time, researchers propose that this staging serves a defense evasion purpose and speculate that they may contain useful vulnerabilities. The threat actor may plan to introduce these vulnerabilities to otherwise patched systems or applications.</p>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="the-shpy-backdoor" class="absolute -top-32"></span>The sh.py backdoor</h4>
<p><strong>sh.py</strong> is a Python backdoor used to deploy and execute other post-exploitation capabilities like Swiftbelt <strong>.</strong></p>
<p>The malware loads its configuration from <strong>~/Public/Safari/sar.dat</strong>. The configuration file contains crucial elements such as command-and-control (C2) URLs, a sleep timer for beaconing purposes (the default value is 5 seconds), and a unique nine-digit identifier assigned to each agent.</p>
<p></p>
<p>As part of its periodic beaconing, the malware gathers and transmits various system information. The information sent includes:</p>
<ul>
<li>Hostname</li>
<li>Username</li>
<li>Domain name</li>
<li>Current directory</li>
<li>The absolute path of the executable binary</li>
<li>OS version</li>
<li>Is 64-bit OS</li>
<li>Is 64-bit process</li>
<li>Python version</li>
</ul>
<p>Below is a table outlining the various commands that can be handled by the backdoor:</p>
<div class="table-container"><table style="width:100%;table-layout:fixed;word-wrap:break-word"><thead><tr><th>Command</th><th>Description</th></tr></thead><tbody><tr><td>sk</td><td>Stop the backdoor&#x27;s execution</td></tr><tr><td>l</td><td>List the files of the path provided as parameter</td></tr><tr><td>c</td><td>Execute and return the output of a shell command</td></tr><tr><td>cd</td><td>Change directory and return the new path</td></tr><tr><td>xs</td><td>Execute a Python code given as a parameter in the current context</td></tr><tr><td>xsi</td><td>Decode a Base64-encoded Python code given as a parameter, compile it, then execute it</td></tr><tr><td>r</td><td>Remove a file or directory from the system</td></tr><tr><td>e</td><td>Execute a file from the system with or without parameter</td></tr><tr><td>u</td><td>Upload a file to the infected system</td></tr><tr><td>d</td><td>Download a file from the infected system</td></tr><tr><td>g</td><td>Get the current malware&#x27;s configuration stored in the configuration file</td></tr><tr><td>w</td><td>Override the malware&#x27;s configuration file with new values</td></tr></tbody></table></div>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="swiftbelt" class="absolute -top-32"></span>Swiftbelt</h3>
<p>On June 1st, the compromised system registered a signature alert for <a href="https://github.com/elastic/protections-artifacts/blob/main/yara/rules/MacOS_Hacktool_Swiftbelt.yar">MacOS.Hacktool.Swiftbelt</a>, a MacOS enumeration capability inspired by <a href="https://github.com/GhostPack/Seatbelt">SeatBelt</a> and created by the red-teamer Cedric Owens. Unlike other enumeration methods, Swiftbelt invokes Swift code to avoid creating command line artifacts. Notably, <strong>xcc</strong> variants are also written using Swift.</p>
<p>The signature alert indicated that Swiftbelt was written to <strong>/Users/shared/sb</strong> and executed using the bash shell interpreter, <strong>sh</strong>. The full command line observed by researchers was <strong>Users/Shared/sb /bin/sh -c /users/shared/sb \&gt; /users/shared/sb.log 2\&gt;&amp;1</strong> , demonstrating that the threat actor captured results in <strong>sb.log</strong> while errors were directed to STDOUT.</p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="diamond-model" class="absolute -top-32"></span>Diamond Model</h2>
<p>Elastic Security utilizes the <a href="https://www.activeresponse.org/wp-content/uploads/2013/07/diamond.pdf">Diamond Model</a> to describe high-level relationships between the adversaries, capabilities, infrastructure, and victims of intrusions. While the Diamond Model is most commonly used with single intrusions, and leveraging Activity Threading (section 8) as a way to create relationships between incidents, an adversary-centered (section 7.1.4) approach allows for a, although cluttered, single diamond.</p>
<p></p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="observed-tactics-and-techniques" class="absolute -top-32"></span>Observed tactics and techniques</h2>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="mitre-attck-tactics" class="absolute -top-32"></span>MITRE ATT&amp;CK Tactics</h3>
<p>Tactics represent the why of a technique or sub-technique. It is the adversary’s tactical goal: the reason for performing an action. These are the tactics observed by Elastic Security Labs in this campaign:</p>
<ul>
<li><a href="https://attack.mitre.org/tactics/TA0002">Execution</a></li>
<li><a href="https://attack.mitre.org/tactics/TA0003">Persistence</a></li>
<li><a href="https://attack.mitre.org/tactics/TA0004">Privilege Escalation</a></li>
<li><a href="https://attack.mitre.org/tactics/TA0005">Defense Evasion</a></li>
<li><a href="https://attack.mitre.org/tactics/TA0007">Discovery</a></li>
</ul>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="mitre-attck-techniques--sub-techniques" class="absolute -top-32"></span>MITRE ATT&amp;CK Techniques / Sub techniques</h3>
<p>Techniques and Sub techniques represent how an adversary achieves a tactical goal by performing an action. These are the techniques observed by Elastic Security Labs in this campaign:</p>
<ul>
<li><a href="https://attack.mitre.org/techniques/T1059">Command and Scripting Interpreter</a></li>
<li><a href="https://attack.mitre.org/techniques/T1574/004">Dylib Hijacking</a></li>
<li><a href="https://attack.mitre.org/techniques/T1068">Potential Exploitation for Privilege Execution</a></li>
<li><a href="https://attack.mitre.org/techniques/T1548">Potential Abuse Elevation Control Mechanism</a></li>
<li><a href="https://attack.mitre.org/techniques/T1564">Hide Artifacts</a></li>
<li><a href="https://attack.mitre.org/techniques/T1036">Masquerading</a></li>
<li><a href="https://attack.mitre.org/techniques/T1027">Obfuscating Files or Information</a></li>
<li><a href="https://attack.mitre.org/techniques/T1553">Subvert Trust Controls</a></li>
<li><a href="https://attack.mitre.org/techniques/T1010">Application Window Discovery</a></li>
<li><a href="https://attack.mitre.org/techniques/T1113">Screen Capture</a></li>
<li><a href="https://attack.mitre.org/software/S0498">Crytpoistic Software</a></li>
<li><a href="https://attack.mitre.org/techniques/T1005">Data from Local System</a></li>
</ul>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="detection-logic" class="absolute -top-32"></span>Detection logic</h2>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="yara" class="absolute -top-32"></span>YARA</h3>
<p>Elastic Security has created YARA rules to identify this activity. Below are YARA rules to identify the JOKERSPY backdoor and SwiftBelt tool.</p>
<pre><code>rule Macos_Hacktool_JokerSpy {
    meta:
        author = &quot;Elastic Security&quot;
        creation_date = &quot;2023-06-19&quot;
        last_modified = &quot;2023-06-19&quot;
        os = &quot;MacOS&quot;
        arch = &quot;x86&quot;
        category_type = &quot;Hacktool&quot;
        family = &quot;JokerSpy&quot;
        threat_name = &quot;Macos.Hacktool.JokerSpy&quot;
        reference_sample = &quot;d895075057e491b34b0f8c0392b44e43ade425d19eaaacea6ef8c5c9bd3487d8&quot;
        license = &quot;Elastic License v2&quot;

    strings:
        $str1 = &quot;ScreenRecording: NO&quot; fullword
        $str2 = &quot;Accessibility: NO&quot; fullword
        $str3 = &quot;Accessibility: YES&quot; fullword
        $str4 = &quot;eck13XProtectCheck&quot;
        $str5 = &quot;Accessibility: NO&quot; fullword
        $str6 = &quot;kMDItemDisplayName = *TCC.db&quot; fullword
    condition:
        5 of them
}</code></pre>
<pre><code>rule MacOS_Hacktool_Swiftbelt {
    meta:
        author = &quot;Elastic Security&quot;
        creation_date = &quot;2021-10-12&quot;
        last_modified = &quot;2021-10-25&quot;
        threat_name = &quot;MacOS.Hacktool.Swiftbelt&quot;
        reference_sample = &quot;452c832a17436f61ad5f32ee1c97db05575160105ed1dcd0d3c6db9fb5a9aea1&quot;
        os = &quot;macos&quot;
        arch_context = &quot;x86&quot;
        license = &quot;Elastic License v2&quot;

    strings:
        $dbg1 = &quot;SwiftBelt/Sources/SwiftBelt&quot;
        $dbg2 = &quot;[-] Firefox places.sqlite database not found for user&quot;
        $dbg3 = &quot;[-] No security products found&quot;
        $dbg4 = &quot;SSH/AWS/gcloud Credentials Search:&quot;
        $dbg5 = &quot;[-] Could not open the Slack Cookies database&quot;
        $sec1 = &quot;[+] Malwarebytes A/V found on this host&quot;
        $sec2 = &quot;[+] Cisco AMP for endpoints found&quot;
        $sec3 = &quot;[+] SentinelOne agent running&quot;
        $sec4 = &quot;[+] Crowdstrike Falcon agent found&quot;
        $sec5 = &quot;[+] FireEye HX agent installed&quot;
        $sec6 = &quot;[+] Little snitch firewall found&quot;
        $sec7 = &quot;[+] ESET A/V installed&quot;
        $sec8 = &quot;[+] Carbon Black OSX Sensor installed&quot;
        $sec9 = &quot;/Library/Little Snitch&quot;
        $sec10 = &quot;/Library/FireEye/xagt&quot;
        $sec11 = &quot;/Library/CS/falcond&quot;
        $sec12 = &quot;/Library/Logs/PaloAltoNetworks/GlobalProtect&quot;
        $sec13 = &quot;/Library/Application Support/Malwarebytes&quot;
        $sec14 = &quot;/usr/local/bin/osqueryi&quot;
        $sec15 = &quot;/Library/Sophos Anti-Virus&quot;
        $sec16 = &quot;/Library/Objective-See/Lulu&quot;
        $sec17 = &quot;com.eset.remoteadministrator.agent&quot;
        $sec18 = &quot;/Applications/CarbonBlack/CbOsxSensorService&quot;
        $sec19 = &quot;/Applications/BlockBlock Helper.app&quot;
        $sec20 = &quot;/Applications/KextViewr.app&quot;
    condition:
        6 of them
}</code></pre>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="references" class="absolute -top-32"></span>References</h2>
<p>The following were referenced throughout the above research:</p>
<ul>
<li><a href="https://www.bitdefender.com/blog/labs/fragments-of-cross-platform-backdoor-hint-at-larger-mac-os-attack/">https://www.bitdefender.com/blog/labs/fragments-of-cross-platform-backdoor-hint-at-larger-mac-os-attack</a></li>
</ul>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="observations" class="absolute -top-32"></span>Observations</h2>
<p>The following observables were discussed in this research.</p>
<div class="table-container"><table style="width:100%;table-layout:fixed;word-wrap:break-word"><thead><tr><th>Observable</th><th>Type</th><th>Name</th><th>Reference</th></tr></thead><tbody><tr><td>app.influmarket[.]org</td><td>Domain</td><td>n/a</td><td>sh.py domain</td></tr><tr><td>d895075057e491b34b0f8c0392b44e43ade425d19eaaacea6ef8c5c9bd3487d8</td><td>SHA-256</td><td>/Users/Shared/xcc</td><td>Macos.Hacktool.JokerSpy</td></tr><tr><td>8ca86f78f0c73a46f31be366538423ea0ec58089f3880e041543d08ce11fa626</td><td>SHA-256</td><td>/Users/Shared/sb</td><td>MacOS.Hacktool.Swiftbelt</td></tr><tr><td>aa951c053baf011d08f3a60a10c1d09bbac32f332413db5b38b8737558a08dc1</td><td>SHA-256</td><td>/Users/Shared/sh.py</td><td>sh.py script</td></tr></tbody></table></div></div></div></div><div class="hidden lg:flex lg:col-span-1 text-sm lg:flex-col lg:space-y-6"><div class="toc"><h4 class="font-bold leading-tight text-lg md:text-2xl mb-3">Jump to section</h4><ul class="flex flex-col space-y-2"><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/inital-research-of-jokerspy#key-takeaways"><span>Key&nbsp;takeaways</span></a></li><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/inital-research-of-jokerspy#preamble"><span>Preamble</span></a></li><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/inital-research-of-jokerspy#overview"><span>Overview</span></a></li><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/inital-research-of-jokerspy#analysis"><span>Analysis</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-4" href="/security-labs/inital-research-of-jokerspy#the-xcc-binary"><span>The xcc&nbsp;binary</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-8" href="/security-labs/inital-research-of-jokerspy#xcode-artifacts"><span>XCode&nbsp;artifacts</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-8" href="/security-labs/inital-research-of-jokerspy#abusing-tcc"><span>Abusing&nbsp;TCC</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-8" href="/security-labs/inital-research-of-jokerspy#initial-access"><span>Initial&nbsp;access</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-8" href="/security-labs/inital-research-of-jokerspy#deployed-cryptographic-libraries"><span>Deployed cryptographic&nbsp;libraries</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-8" href="/security-labs/inital-research-of-jokerspy#the-shpy-backdoor"><span>The sh.py&nbsp;backdoor</span></a></li></ul><button class="border-t border-white/20 w-full mt-3 py-2 flex items-center space-x-1 text-xs font-medium uppercase tracking-wide hover:text-white"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" class="w-3 h-3"><path d="M10.75 4.75a.75.75 0 00-1.5 0v4.5h-4.5a.75.75 0 000 1.5h4.5v4.5a.75.75 0 001.5 0v-4.5h4.5a.75.75 0 000-1.5h-4.5v-4.5z"></path></svg><span>Show more</span></button></div><div class="bg-zinc-900 border border-zinc-800 drop-shadow-lg p-5 md:p-2 sm:p-4 md:px-6 md:py-4 rounded-xl"><h4 class="font-bold leading-tight text-lg md:text-2xl mb-3">Elastic Security Labs Newsletter</h4><div><a target="_blank" class="button inline-flex" href="https://www.elastic.co/security-labs/newsletter?utm_source=security-labs">Sign Up</a></div></div></div></div><div class="bg-zinc-900 border border-zinc-800 drop-shadow-lg p-5 md:p-2 sm:p-4 md:px-6 md:py-4 rounded-xl my-5 md:my-10 max-w-3xl mx-auto flex flex-col items-center shadow-2xl"><h4 class="font-bold leading-tight text-lg md:text-2xl">Share this article</h4><div class="flex flex-wrap items-center justify-center mt-4 space-x-4"><a class="flex items-center space-x-2 button" href="https://twitter.com/intent/tweet?text=Initial research exposing JOKERSPY&amp;url=https://www.elastic.co/security-labs/inital-research-of-jokerspy" target="_blank" rel="noopener noreferrer" aria-label="Share this article on Twitter" title="Share this article on Twitter"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill="currentColor" d="M23.954 4.569c-.885.389-1.83.653-2.825.772a4.98 4.98 0 002.187-2.746 9.955 9.955 0 01-3.157 1.204 4.98 4.98 0 00-8.49 4.54A14.128 14.128 0 011.69 3.05a4.98 4.98 0 001.54 6.638A4.94 4.94 0 011.2 8.62v.06a4.98 4.98 0 004 4.87 4.94 4.94 0 01-2.24.086 4.98 4.98 0 004.64 3.45A9.97 9.97 0 010 20.35a14.075 14.075 0 007.59 2.22c9.16 0 14.17-7.583 14.17-14.17 0-.217-.005-.434-.015-.65a10.128 10.128 0 002.485-2.58l-.001-.001z"></path></svg><span>Twitter</span></a><a class="flex items-center space-x-2 button" href="https://www.facebook.com/sharer/sharer.php?u=https://www.elastic.co/security-labs/inital-research-of-jokerspy" target="_blank" rel="noopener noreferrer" aria-label="Share this article on Facebook" title="Share this article on Facebook"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill="currentColor" d="M22.5 12c0-5.799-4.701-10.5-10.5-10.5S1.5 6.201 1.5 12c0 5.301 3.901 9.699 9 10.401V14.4h-2.7v-2.7h2.7v-2.1c0-2.7 1.8-4.2 4.2-4.2 1.2 0 2.1.1 2.4.2v2.4h-1.5c-1.2 0-1.5.6-1.5 1.5v1.8h3l-.3 2.7h-2.7V22C18.599 21.3 22.5 17.301 22.5 12z"></path></svg><span>Facebook</span></a><a class="flex items-center space-x-2 button" href="https://www.linkedin.com/shareArticle?mini=true&amp;url=https://www.elastic.co/security-labs/inital-research-of-jokerspy&amp;title=Initial research exposing JOKERSPY" target="_blank" rel="noopener noreferrer" aria-label="Share this article on LinkedIn" title="Share this article on LinkedIn"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill="currentColor" d="M19 0h-14c-2.761 0-5 2.239-5 5v14c0 2.761 2.239 5 5 5h14c2.762 0 5-2.239 5-5v-14c0-2.761-2.238-5-5-5zm-11 19h-3v-11h3v11zm-1.5-12.268c-.966 0-1.75-.79-1.75-1.764s.784-1.764 1.75-1.764 1.75.79 1.75 1.764-.783 1.764-1.75 1.764zm13.5 12.268h-3v-5.604c0-3.368-4-3.113-4 0v5.604h-3v-11h3v1.765c1.396-2.586 7-2.777 7 2.476v6.759z"></path></svg><span>LinkedIn</span></a><a class="flex items-center space-x-2 button" href="https://reddit.com/submit?url=https://www.elastic.co/security-labs/inital-research-of-jokerspy&amp;title=Initial research exposing JOKERSPY" target="_blank" rel="noopener noreferrer" aria-label="Share this article on Reddit" title="Share this article on Reddit"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill-rule="evenodd" clip-rule="evenodd" d="M24 12C24 18.6274 18.6274 24 12 24C5.37258 24 0 18.6274 0 12C0 5.37258 5.37258 0 12 0C18.6274 0 24 5.37258 24 12ZM19.6879 11.0584C19.8819 11.3352 19.9916 11.6622 20.004 12C20.0091 12.3306 19.9205 12.656 19.7485 12.9384C19.5765 13.2208 19.3281 13.4488 19.032 13.596C19.0455 13.7717 19.0455 13.9483 19.032 14.124C19.032 16.812 15.9 18.996 12.036 18.996C8.172 18.996 5.04 16.812 5.04 14.124C5.02649 13.9483 5.02649 13.7717 5.04 13.596C4.80919 13.49 4.6042 13.335 4.43923 13.1419C4.27427 12.9487 4.15327 12.722 4.08462 12.4775C4.01598 12.2329 4.00133 11.9764 4.04169 11.7256C4.08205 11.4748 4.17646 11.2358 4.31837 11.0251C4.46028 10.8145 4.6463 10.6372 4.86354 10.5056C5.08078 10.3739 5.32404 10.2911 5.57646 10.2629C5.82889 10.2346 6.08444 10.2616 6.32541 10.3419C6.56638 10.4222 6.78701 10.5539 6.972 10.728C8.35473 9.79023 9.98146 9.27718 11.652 9.252L12.54 5.088C12.55 5.03979 12.5694 4.99405 12.5972 4.95341C12.625 4.91277 12.6605 4.87805 12.7018 4.85127C12.7431 4.82448 12.7894 4.80615 12.8378 4.79735C12.8862 4.78855 12.9359 4.78945 12.984 4.8L15.924 5.388C16.0676 5.14132 16.2944 4.9539 16.5637 4.85937C16.833 4.76484 17.1272 4.7694 17.3934 4.87222C17.6597 4.97505 17.8806 5.1694 18.0164 5.42041C18.1523 5.67141 18.1942 5.96262 18.1348 6.24177C18.0753 6.52092 17.9182 6.76972 17.6918 6.94352C17.4654 7.11732 17.1845 7.20473 16.8995 7.19006C16.6144 7.1754 16.3439 7.05962 16.1366 6.8635C15.9292 6.66738 15.7985 6.40378 15.768 6.12L13.2 5.58L12.42 9.324C14.0702 9.3594 15.6749 9.87206 17.04 10.8C17.2839 10.566 17.5902 10.4074 17.9221 10.3436C18.254 10.2797 18.5973 10.3132 18.9106 10.4401C19.2239 10.5669 19.4939 10.7817 19.6879 11.0584ZM8.20624 12.5333C8.07438 12.7307 8.004 12.9627 8.004 13.2C8.004 13.5183 8.13043 13.8235 8.35547 14.0485C8.58051 14.2736 8.88574 14.4 9.204 14.4C9.44134 14.4 9.67335 14.3296 9.87068 14.1978C10.068 14.0659 10.2218 13.8785 10.3127 13.6592C10.4035 13.4399 10.4272 13.1987 10.3809 12.9659C10.3346 12.7331 10.2204 12.5193 10.0525 12.3515C9.8847 12.1836 9.67089 12.0694 9.43811 12.0231C9.20533 11.9768 8.96405 12.0005 8.74478 12.0913C8.52551 12.1822 8.33809 12.336 8.20624 12.5333ZM12.012 17.424C13.0771 17.4681 14.1246 17.1416 14.976 16.5V16.548C15.0075 16.5173 15.0327 16.4806 15.05 16.4402C15.0674 16.3997 15.0766 16.3563 15.0772 16.3122C15.0777 16.2682 15.0696 16.2245 15.0533 16.1837C15.0369 16.1428 15.0127 16.1055 14.982 16.074C14.9513 16.0425 14.9146 16.0173 14.8742 16C14.8337 15.9826 14.7903 15.9734 14.7462 15.9728C14.7022 15.9723 14.6585 15.9804 14.6177 15.9967C14.5768 16.0131 14.5395 16.0373 14.508 16.068C13.7797 16.5904 12.895 16.8487 12 16.8C11.1061 16.8399 10.2255 16.5732 9.504 16.044C9.44182 15.993 9.36289 15.9669 9.28256 15.9708C9.20222 15.9748 9.12622 16.0085 9.06935 16.0653C9.01247 16.1222 8.97879 16.1982 8.97484 16.2786C8.97089 16.3589 8.99697 16.4378 9.048 16.5C9.89937 17.1416 10.9469 17.4681 12.012 17.424ZM14.0933 14.2458C14.2907 14.3776 14.5227 14.448 14.76 14.448L14.748 14.496C14.9107 14.4978 15.0721 14.4664 15.2223 14.4038C15.3725 14.3413 15.5084 14.2488 15.6218 14.1321C15.7352 14.0154 15.8236 13.8768 15.8818 13.7248C15.9399 13.5728 15.9665 13.4106 15.96 13.248C15.96 13.0107 15.8896 12.7787 15.7578 12.5813C15.6259 12.384 15.4385 12.2302 15.2192 12.1393C14.9999 12.0485 14.7587 12.0248 14.5259 12.0711C14.2931 12.1174 14.0793 12.2316 13.9115 12.3995C13.7436 12.5673 13.6294 12.7811 13.5831 13.0139C13.5368 13.2467 13.5605 13.4879 13.6513 13.7072C13.7422 13.9265 13.896 14.1139 14.0933 14.2458Z" fill="currentColor"></path></svg><span>Reddit</span></a></div></div></article></main><footer class="mt-auto text-xs md:text-sm"><div class="container py-6 flex flex-col md:flex-row gap-2 md:gap-0 justify-between items-center"><div class="text-zinc-300"><nav><ul class="flex space-x-4"><li><a class="hover:text-white font-medium" href="/security-labs/sitemap.xml">Sitemap</a></li><li><a class="hover:text-white font-medium flex items-center space-x-1" href="https://elastic.co?utm_source=elastic-search-labs&amp;utm_medium=referral&amp;utm_campaign=search-labs&amp;utm_content=footer"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="inline-block w-3 h-3"><path stroke-linecap="round" stroke-linejoin="round" d="M13.5 6H5.25A2.25 2.25 0 003 8.25v10.5A2.25 2.25 0 005.25 21h10.5A2.25 2.25 0 0018 18.75V10.5m-10.5 6L21 3m0 0h-5.25M21 3v5.25"></path></svg><span>Elastic.co</span></a></li><li><a class="hover:text-white font-medium flex items-center space-x-1" href="https://twitter.com/elasticseclabs"><svg class="w-4 h-4 inline-block w-3 h-3" viewBox="0 0 24 24"><path fill="currentColor" d="M23.954 4.569c-.885.389-1.83.653-2.825.772a4.98 4.98 0 002.187-2.746 9.955 9.955 0 01-3.157 1.204 4.98 4.98 0 00-8.49 4.54A14.128 14.128 0 011.69 3.05a4.98 4.98 0 001.54 6.638A4.94 4.94 0 011.2 8.62v.06a4.98 4.98 0 004 4.87 4.94 4.94 0 01-2.24.086 4.98 4.98 0 004.64 3.45A9.97 9.97 0 010 20.35a14.075 14.075 0 007.59 2.22c9.16 0 14.17-7.583 14.17-14.17 0-.217-.005-.434-.015-.65a10.128 10.128 0 002.485-2.58l-.001-.001z"></path></svg><span>@elasticseclabs</span></a></li></ul></nav></div><div class="flex flex-col space-y-1 text-zinc-300"><p>© <!-- -->2024<!-- -->. Elasticsearch B.V. All Rights Reserved.</p></div></div></footer></main></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"article":{"title":"Initial research exposing JOKERSPY","slug":"inital-research-of-jokerspy","date":"2023-06-21","description":"Explore JOKERSPY, a recently discovered campaign that targets financial institutions with Python backdoors. This article covers reconnaissance, attack patterns, and methods of identifying JOKERSPY in your network.","image":"photo-edited-04@2x.jpg","subtitle":"An overview of JOKERSPY, discovered in June 2023, which deployed custom and open source macOS tools to exploit a cryptocurrency exchange located in Japan.","tags":["ref9134","jokerspy","cryptocurrency","defi","swiftbelt"],"body":{"raw":"\n## Key takeaways\n\n- This is an initial notification of an active intrusion with additional details to follow\n- REF9134 leverages custom and open source tools for reconnaissance and command and control\n- Targets of this activity include a cryptocurrency exchange in Japan\n\n## Preamble\n\nThis research article explores a recently discovered intrusion we’re calling REF9134, which involves using the **sh.py** backdoor to deploy the macOS Swiftbelt enumeration tool. **sh.py** and **xcc** have recently been dubbed [JOKERSPY](https://www.bitdefender.com/blog/labs/fragments-of-cross-platform-backdoor-hint-at-larger-mac-os-attack/) by Bitdefender.\n\nSpecifically, this research covers:\n\n- How Elastic Security Labs identified reconnaissance from the adversary group\n- The adversary’s steps to evade detection using **xcc** , installing the **sh.py** backdoor, and deploying enumeration tools\n\nA deeper look at this attack may be published at a later date.\n\n## Overview\n\nIn late May of 2023, an adversary with existing access in a prominent Japanese cryptocurrency exchange tripped one of our diagnostic endpoint alerts that detected the execution of a binary ( **xcc** ). **xcc** is not trusted by Apple, and the adversary self-signed using the native macOS tool **codesign**. While this detection in itself was not necessarily innocuous, the industry vertical and additional activity we observed following these initial alerts caught our eye and caused us to pay closer attention.\n\nFollowing the execution of **xcc** , we observed the threat actor attempting to bypass TCC permissions by creating their own TCC database and trying to replace the existing one. On June 1st a new Python-based tool was seen executing from the same directory as **xcc** and was utilized to execute an open-source macOS post-exploitation enumeration tool known as Swiftbelt.\n\n## Analysis\n\nREF9134 is an intrusion into a large Japan-based cryptocurrency service provider focusing on asset exchange for trading Bitcoin, Ethereum, and other common cryptocurrencies.\n\n### The xcc binary\n\n**xcc** ( **d895075057e491b34b0f8c0392b44e43ade425d19eaaacea6ef8c5c9bd3487d8** ) is a self-signed multi-architecture binary written in Swift which is used to evaluate current system permissions. The version observed by Elastic Security Labs is signed as **XProtectCheck-55554944f74096a836b73310bd55d97d1dff5cd4** , and has a code signature resembling [publicly known](https://objective-see.org/blog/blog_0x73.html) and untrusted payloads.\n\n![Initial detection of the xcc binary](/assets/images/inital-research-of-jokerspy/image8.png)\n\nTo identify other binaries signed with the same identifier, we converted **XProtectCheck-55554944f74096a836b73310bd55d97d1dff5cd4** to hexadecimal and searched VirusTotal to identify 3 additional samples ( **content:\\{5850726f74656374436865636b2d35353535343934346637343039366138333662373333313062643535643937643164666635636434\\}** ).\n\nEach contained the same core functionality with structural differences. These discrepancies may indicate that these variants of **xcc** were developed to bypass endpoint capabilities that interfered with execution.\n\nShortly after the creation of **xcc** , researchers observed the threat actor copying **/Users/Shared/tcc.db** over the existing TCC database, **/Library/Application Support/com.apple.TCC/TCC.db**. This may enable the threat to avoid TCC prompts visible to system users while simultaneously abusing a directory with broad file write permissions.\n\n#### XCode artifacts\n\nDuring analysis of this binary, researchers identified two unique paths, **/Users/joker/Developer/Xcode/DerivedData/** and **/Users/joker/Downloads/Spy/XProtectCheck/XProtectCheck/** , which stood out as anomalous. The default path for compiling code with Xcode is **/Users/[username]/Developer/Xcode/DerivedData**.\n\n#### Abusing TCC\n\nThese introspection permissions are managed by the native Transparency, Consent, and Control (TCC) feature. Researchers determined that **xcc** checks FullDiskAccess and ScreenRecording permissions, as well as checking if the screen is currently locked and if the current process is a trusted accessibility client.\n\n![xcc queries current system permissions](/assets/images/inital-research-of-jokerspy/image2.jpg)\n\nUpon successfully executing in our [Detonate](https://www.elastic.co/security-labs/click-click-boom-automating-protections-testing-with-detonate) environment, the following results were displayed:\n\n![TCC permissions queried by xcc](/assets/images/inital-research-of-jokerspy/image3.jpg)\n\nOnce the custom TCC database was placed in the expected location, the threat actor executed the **xcc** binary.\n\n![Threat actor creating/modifying, moving a TCC database, and then executing xcc](/assets/images/inital-research-of-jokerspy/image4.jpg)\n\n#### Initial access\n\nThe **xcc** binary was executed via bash by three separate processes\n\n- **/Applications/IntelliJ IDEA.app/Contents/MacOS/idea**\n- **/Applications/iTerm.app/Contents/MacOS/iTerm2**\n- **/Applications/Visual Studio Code.app/Contents/MacOS/Electron.**\n\nWhile we are still investigating and continuing to gather information, we strongly believe that the initial access for this malware was a malicious or backdoored plugin or 3rd party dependency that provided the threat actor access. This aligns with the connection that was made by the researchers at [Bitdefender](https://www.bitdefender.com/blog/labs/fragments-of-cross-platform-backdoor-hint-at-larger-mac-os-attack/) who correlated the hardcoded domain found in a version of the **sh.py** backdoor to a Tweet about an infected macOS QR code reader which was found to have a malicious dependency.\n\n#### Deployed cryptographic libraries\n\nOn May 31st, researchers observed three non-native [DyLibs](https://developer.apple.com/library/archive/documentation/DeveloperTools/Conceptual/DynamicLibraries/100-Articles/UsingDynamicLibraries.html) deployed to **/Users/shared/keybag/** called **libcrypto.1.0.0.dylib** , **libncursesw.5.dylib** , and **libssl.1.0.0.dylib**. On MacOS, keys for file and keychain Data Protection are stored in [keybags](https://support.apple.com/en-au/guide/security/sec6483d5760/web), and pertain to iOS, iPadOS, watchOS, and tvOS. At this time, researchers propose that this staging serves a defense evasion purpose and speculate that they may contain useful vulnerabilities. The threat actor may plan to introduce these vulnerabilities to otherwise patched systems or applications.\n\n#### The sh.py backdoor\n\n**sh.py** is a Python backdoor used to deploy and execute other post-exploitation capabilities like Swiftbelt **.**\n\nThe malware loads its configuration from **~/Public/Safari/sar.dat**. The configuration file contains crucial elements such as command-and-control (C2) URLs, a sleep timer for beaconing purposes (the default value is 5 seconds), and a unique nine-digit identifier assigned to each agent.\n\n![Execution of sh.py with the C2 URL provided as a parameter](/assets/images/inital-research-of-jokerspy/image5.jpg)\n\nAs part of its periodic beaconing, the malware gathers and transmits various system information. The information sent includes:\n\n- Hostname\n- Username\n- Domain name\n- Current directory\n- The absolute path of the executable binary\n- OS version\n- Is 64-bit OS\n- Is 64-bit process\n- Python version\n\nBelow is a table outlining the various commands that can be handled by the backdoor:\n\n| Command | Description                                                                           |\n| ------- | ------------------------------------------------------------------------------------- |\n| sk      | Stop the backdoor's execution                                                         |\n| l       | List the files of the path provided as parameter                                      |\n| c       | Execute and return the output of a shell command                                      |\n| cd      | Change directory and return the new path                                              |\n| xs      | Execute a Python code given as a parameter in the current context                     |\n| xsi     | Decode a Base64-encoded Python code given as a parameter, compile it, then execute it |\n| r       | Remove a file or directory from the system                                            |\n| e       | Execute a file from the system with or without parameter                              |\n| u       | Upload a file to the infected system                                                  |\n| d       | Download a file from the infected system                                              |\n| g       | Get the current malware's configuration stored in the configuration file              |\n| w       | Override the malware's configuration file with new values                             |\n\n### Swiftbelt\n\nOn June 1st, the compromised system registered a signature alert for [MacOS.Hacktool.Swiftbelt](https://github.com/elastic/protections-artifacts/blob/main/yara/rules/MacOS_Hacktool_Swiftbelt.yar), a MacOS enumeration capability inspired by [SeatBelt](https://github.com/GhostPack/Seatbelt) and created by the red-teamer Cedric Owens. Unlike other enumeration methods, Swiftbelt invokes Swift code to avoid creating command line artifacts. Notably, **xcc** variants are also written using Swift.\n\nThe signature alert indicated that Swiftbelt was written to **/Users/shared/sb** and executed using the bash shell interpreter, **sh**. The full command line observed by researchers was **Users/Shared/sb /bin/sh -c /users/shared/sb \\\\\u003e /users/shared/sb.log 2\\\\\u003e\u00261** , demonstrating that the threat actor captured results in **sb.log** while errors were directed to STDOUT.\n\n## Diamond Model\n\nElastic Security utilizes the [Diamond Model](https://www.activeresponse.org/wp-content/uploads/2013/07/diamond.pdf) to describe high-level relationships between the adversaries, capabilities, infrastructure, and victims of intrusions. While the Diamond Model is most commonly used with single intrusions, and leveraging Activity Threading (section 8) as a way to create relationships between incidents, an adversary-centered (section 7.1.4) approach allows for a, although cluttered, single diamond.\n\n![REF9134 Diamond Model](/assets/images/inital-research-of-jokerspy/image1.png)\n\n## Observed tactics and techniques\n\n### MITRE ATT\u0026CK Tactics\n\nTactics represent the why of a technique or sub-technique. It is the adversary’s tactical goal: the reason for performing an action. These are the tactics observed by Elastic Security Labs in this campaign:\n\n- [Execution](https://attack.mitre.org/tactics/TA0002)\n- [Persistence](https://attack.mitre.org/tactics/TA0003)\n- [Privilege Escalation](https://attack.mitre.org/tactics/TA0004)\n- [Defense Evasion](https://attack.mitre.org/tactics/TA0005)\n- [Discovery](https://attack.mitre.org/tactics/TA0007)\n\n### MITRE ATT\u0026CK Techniques / Sub techniques\n\nTechniques and Sub techniques represent how an adversary achieves a tactical goal by performing an action. These are the techniques observed by Elastic Security Labs in this campaign:\n\n- [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059)\n- [Dylib Hijacking](https://attack.mitre.org/techniques/T1574/004)\n- [Potential Exploitation for Privilege Execution](https://attack.mitre.org/techniques/T1068)\n- [Potential Abuse Elevation Control Mechanism](https://attack.mitre.org/techniques/T1548)\n- [Hide Artifacts](https://attack.mitre.org/techniques/T1564)\n- [Masquerading](https://attack.mitre.org/techniques/T1036)\n- [Obfuscating Files or Information](https://attack.mitre.org/techniques/T1027)\n- [Subvert Trust Controls](https://attack.mitre.org/techniques/T1553)\n- [Application Window Discovery](https://attack.mitre.org/techniques/T1010)\n- [Screen Capture](https://attack.mitre.org/techniques/T1113)\n- [Crytpoistic Software](https://attack.mitre.org/software/S0498)\n- [Data from Local System](https://attack.mitre.org/techniques/T1005)\n\n## Detection logic\n\n### YARA\n\nElastic Security has created YARA rules to identify this activity. Below are YARA rules to identify the JOKERSPY backdoor and SwiftBelt tool.\n\n```\nrule Macos_Hacktool_JokerSpy {\n    meta:\n        author = \"Elastic Security\"\n        creation_date = \"2023-06-19\"\n        last_modified = \"2023-06-19\"\n        os = \"MacOS\"\n        arch = \"x86\"\n        category_type = \"Hacktool\"\n        family = \"JokerSpy\"\n        threat_name = \"Macos.Hacktool.JokerSpy\"\n        reference_sample = \"d895075057e491b34b0f8c0392b44e43ade425d19eaaacea6ef8c5c9bd3487d8\"\n        license = \"Elastic License v2\"\n\n    strings:\n        $str1 = \"ScreenRecording: NO\" fullword\n        $str2 = \"Accessibility: NO\" fullword\n        $str3 = \"Accessibility: YES\" fullword\n        $str4 = \"eck13XProtectCheck\"\n        $str5 = \"Accessibility: NO\" fullword\n        $str6 = \"kMDItemDisplayName = *TCC.db\" fullword\n    condition:\n        5 of them\n}\n```\n\n```\nrule MacOS_Hacktool_Swiftbelt {\n    meta:\n        author = \"Elastic Security\"\n        creation_date = \"2021-10-12\"\n        last_modified = \"2021-10-25\"\n        threat_name = \"MacOS.Hacktool.Swiftbelt\"\n        reference_sample = \"452c832a17436f61ad5f32ee1c97db05575160105ed1dcd0d3c6db9fb5a9aea1\"\n        os = \"macos\"\n        arch_context = \"x86\"\n        license = \"Elastic License v2\"\n\n    strings:\n        $dbg1 = \"SwiftBelt/Sources/SwiftBelt\"\n        $dbg2 = \"[-] Firefox places.sqlite database not found for user\"\n        $dbg3 = \"[-] No security products found\"\n        $dbg4 = \"SSH/AWS/gcloud Credentials Search:\"\n        $dbg5 = \"[-] Could not open the Slack Cookies database\"\n        $sec1 = \"[+] Malwarebytes A/V found on this host\"\n        $sec2 = \"[+] Cisco AMP for endpoints found\"\n        $sec3 = \"[+] SentinelOne agent running\"\n        $sec4 = \"[+] Crowdstrike Falcon agent found\"\n        $sec5 = \"[+] FireEye HX agent installed\"\n        $sec6 = \"[+] Little snitch firewall found\"\n        $sec7 = \"[+] ESET A/V installed\"\n        $sec8 = \"[+] Carbon Black OSX Sensor installed\"\n        $sec9 = \"/Library/Little Snitch\"\n        $sec10 = \"/Library/FireEye/xagt\"\n        $sec11 = \"/Library/CS/falcond\"\n        $sec12 = \"/Library/Logs/PaloAltoNetworks/GlobalProtect\"\n        $sec13 = \"/Library/Application Support/Malwarebytes\"\n        $sec14 = \"/usr/local/bin/osqueryi\"\n        $sec15 = \"/Library/Sophos Anti-Virus\"\n        $sec16 = \"/Library/Objective-See/Lulu\"\n        $sec17 = \"com.eset.remoteadministrator.agent\"\n        $sec18 = \"/Applications/CarbonBlack/CbOsxSensorService\"\n        $sec19 = \"/Applications/BlockBlock Helper.app\"\n        $sec20 = \"/Applications/KextViewr.app\"\n    condition:\n        6 of them\n}\n```\n\n## References\n\nThe following were referenced throughout the above research:\n\n- [https://www.bitdefender.com/blog/labs/fragments-of-cross-platform-backdoor-hint-at-larger-mac-os-attack](https://www.bitdefender.com/blog/labs/fragments-of-cross-platform-backdoor-hint-at-larger-mac-os-attack/)\n\n## Observations\n\nThe following observables were discussed in this research.\n\n| Observable                                                       | Type    | Name                | Reference                |\n| ---------------------------------------------------------------- | ------- | ------------------- | ------------------------ |\n| app.influmarket[.]org                                            | Domain  | n/a                 | sh.py domain             |\n| d895075057e491b34b0f8c0392b44e43ade425d19eaaacea6ef8c5c9bd3487d8 | SHA-256 | /Users/Shared/xcc   | Macos.Hacktool.JokerSpy  |\n| 8ca86f78f0c73a46f31be366538423ea0ec58089f3880e041543d08ce11fa626 | SHA-256 | /Users/Shared/sb    | MacOS.Hacktool.Swiftbelt |\n| aa951c053baf011d08f3a60a10c1d09bbac32f332413db5b38b8737558a08dc1 | SHA-256 | /Users/Shared/sh.py | sh.py script             |\n","code":"var Component=(()=\u003e{var h=Object.create;var a=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var f=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var b=(n,e)=\u003e()=\u003e(e||n((e={exports:{}}).exports,e),e.exports),m=(n,e)=\u003e{for(var i in e)a(n,i,{get:e[i],enumerable:!0})},o=(n,e,i,c)=\u003e{if(e\u0026\u0026typeof e==\"object\"||typeof e==\"function\")for(let r of u(e))!g.call(n,r)\u0026\u0026r!==i\u0026\u0026a(n,r,{get:()=\u003ee[r],enumerable:!(c=p(e,r))||c.enumerable});return n};var y=(n,e,i)=\u003e(i=n!=null?h(f(n)):{},o(e||!n||!n.__esModule?a(i,\"default\",{value:n,enumerable:!0}):i,n)),w=n=\u003eo(a({},\"__esModule\",{value:!0}),n);var l=b((C,s)=\u003e{s.exports=_jsx_runtime});var x={};m(x,{default:()=\u003eS,frontmatter:()=\u003ev});var t=y(l()),v={title:\"Initial research exposing JOKERSPY\",slug:\"inital-research-of-jokerspy\",date:\"2023-06-21\",subtitle:\"An overview of JOKERSPY, discovered in June 2023, which deployed custom and open source macOS tools to exploit a cryptocurrency exchange located in Japan.\",description:\"Explore JOKERSPY, a recently discovered campaign that targets financial institutions with Python backdoors. This article covers reconnaissance, attack patterns, and methods of identifying JOKERSPY in your network.\",author:[{slug:\"colson-wilhoit\"},{slug:\"salim-bitam\"},{slug:\"seth-goodwin\"},{slug:\"andrew-pease\"},{slug:\"ricardo-ungureanu\"}],image:\"photo-edited-04@2x.jpg\",category:[{slug:\"attack-pattern\"},{slug:\"campaigns\"}],tags:[\"ref9134\",\"jokerspy\",\"cryptocurrency\",\"defi\",\"swiftbelt\"]};function d(n){let e=Object.assign({h2:\"h2\",ul:\"ul\",li:\"li\",p:\"p\",strong:\"strong\",a:\"a\",h3:\"h3\",img:\"img\",h4:\"h4\",div:\"div\",table:\"table\",thead:\"thead\",tr:\"tr\",th:\"th\",tbody:\"tbody\",td:\"td\",pre:\"pre\",code:\"code\"},n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{id:\"key-takeaways\",children:\"Key takeaways\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:\"This is an initial notification of an active intrusion with additional details to follow\"}),`\n`,(0,t.jsx)(e.li,{children:\"REF9134 leverages custom and open source tools for reconnaissance and command and control\"}),`\n`,(0,t.jsx)(e.li,{children:\"Targets of this activity include a cryptocurrency exchange in Japan\"}),`\n`]}),`\n`,(0,t.jsx)(e.h2,{id:\"preamble\",children:\"Preamble\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"This research article explores a recently discovered intrusion we\\u2019re calling REF9134, which involves using the \",(0,t.jsx)(e.strong,{children:\"sh.py\"}),\" backdoor to deploy the macOS Swiftbelt enumeration tool. \",(0,t.jsx)(e.strong,{children:\"sh.py\"}),\" and \",(0,t.jsx)(e.strong,{children:\"xcc\"}),\" have recently been dubbed \",(0,t.jsx)(e.a,{href:\"https://www.bitdefender.com/blog/labs/fragments-of-cross-platform-backdoor-hint-at-larger-mac-os-attack/\",rel:\"nofollow\",children:\"JOKERSPY\"}),\" by Bitdefender.\"]}),`\n`,(0,t.jsx)(e.p,{children:\"Specifically, this research covers:\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:\"How Elastic Security Labs identified reconnaissance from the adversary group\"}),`\n`,(0,t.jsxs)(e.li,{children:[\"The adversary\\u2019s steps to evade detection using \",(0,t.jsx)(e.strong,{children:\"xcc\"}),\" , installing the \",(0,t.jsx)(e.strong,{children:\"sh.py\"}),\" backdoor, and deploying enumeration tools\"]}),`\n`]}),`\n`,(0,t.jsx)(e.p,{children:\"A deeper look at this attack may be published at a later date.\"}),`\n`,(0,t.jsx)(e.h2,{id:\"overview\",children:\"Overview\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"In late May of 2023, an adversary with existing access in a prominent Japanese cryptocurrency exchange tripped one of our diagnostic endpoint alerts that detected the execution of a binary ( \",(0,t.jsx)(e.strong,{children:\"xcc\"}),\" ). \",(0,t.jsx)(e.strong,{children:\"xcc\"}),\" is not trusted by Apple, and the adversary self-signed using the native macOS tool \",(0,t.jsx)(e.strong,{children:\"codesign\"}),\". While this detection in itself was not necessarily innocuous, the industry vertical and additional activity we observed following these initial alerts caught our eye and caused us to pay closer attention.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Following the execution of \",(0,t.jsx)(e.strong,{children:\"xcc\"}),\" , we observed the threat actor attempting to bypass TCC permissions by creating their own TCC database and trying to replace the existing one. On June 1st a new Python-based tool was seen executing from the same directory as \",(0,t.jsx)(e.strong,{children:\"xcc\"}),\" and was utilized to execute an open-source macOS post-exploitation enumeration tool known as Swiftbelt.\"]}),`\n`,(0,t.jsx)(e.h2,{id:\"analysis\",children:\"Analysis\"}),`\n`,(0,t.jsx)(e.p,{children:\"REF9134 is an intrusion into a large Japan-based cryptocurrency service provider focusing on asset exchange for trading Bitcoin, Ethereum, and other common cryptocurrencies.\"}),`\n`,(0,t.jsx)(e.h3,{id:\"the-xcc-binary\",children:\"The xcc binary\"}),`\n`,(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:\"xcc\"}),\" ( \",(0,t.jsx)(e.strong,{children:\"d895075057e491b34b0f8c0392b44e43ade425d19eaaacea6ef8c5c9bd3487d8\"}),\" ) is a self-signed multi-architecture binary written in Swift which is used to evaluate current system permissions. The version observed by Elastic Security Labs is signed as \",(0,t.jsx)(e.strong,{children:\"XProtectCheck-55554944f74096a836b73310bd55d97d1dff5cd4\"}),\" , and has a code signature resembling \",(0,t.jsx)(e.a,{href:\"https://objective-see.org/blog/blog_0x73.html\",rel:\"nofollow\",children:\"publicly known\"}),\" and untrusted payloads.\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/inital-research-of-jokerspy/image8.png\",alt:\"Initial detection of the xcc binary\",width:\"1440\",height:\"165\"})}),`\n`,(0,t.jsxs)(e.p,{children:[\"To identify other binaries signed with the same identifier, we converted \",(0,t.jsx)(e.strong,{children:\"XProtectCheck-55554944f74096a836b73310bd55d97d1dff5cd4\"}),\" to hexadecimal and searched VirusTotal to identify 3 additional samples ( \",(0,t.jsx)(e.strong,{children:\"content:{5850726f74656374436865636b2d35353535343934346637343039366138333662373333313062643535643937643164666635636434}\"}),\" ).\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Each contained the same core functionality with structural differences. These discrepancies may indicate that these variants of \",(0,t.jsx)(e.strong,{children:\"xcc\"}),\" were developed to bypass endpoint capabilities that interfered with execution.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Shortly after the creation of \",(0,t.jsx)(e.strong,{children:\"xcc\"}),\" , researchers observed the threat actor copying \",(0,t.jsx)(e.strong,{children:\"/Users/Shared/tcc.db\"}),\" over the existing TCC database, \",(0,t.jsx)(e.strong,{children:\"/Library/Application Support/com.apple.TCC/TCC.db\"}),\". This may enable the threat to avoid TCC prompts visible to system users while simultaneously abusing a directory with broad file write permissions.\"]}),`\n`,(0,t.jsx)(e.h4,{id:\"xcode-artifacts\",children:\"XCode artifacts\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"During analysis of this binary, researchers identified two unique paths, \",(0,t.jsx)(e.strong,{children:\"/Users/joker/Developer/Xcode/DerivedData/\"}),\" and \",(0,t.jsx)(e.strong,{children:\"/Users/joker/Downloads/Spy/XProtectCheck/XProtectCheck/\"}),\" , which stood out as anomalous. The default path for compiling code with Xcode is \",(0,t.jsx)(e.strong,{children:\"/Users/[username]/Developer/Xcode/DerivedData\"}),\".\"]}),`\n`,(0,t.jsx)(e.h4,{id:\"abusing-tcc\",children:\"Abusing TCC\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"These introspection permissions are managed by the native Transparency, Consent, and Control (TCC) feature. Researchers determined that \",(0,t.jsx)(e.strong,{children:\"xcc\"}),\" checks FullDiskAccess and ScreenRecording permissions, as well as checking if the screen is currently locked and if the current process is a trusted accessibility client.\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/inital-research-of-jokerspy/image2.jpg\",alt:\"xcc queries current system permissions\",width:\"621\",height:\"163\"})}),`\n`,(0,t.jsxs)(e.p,{children:[\"Upon successfully executing in our \",(0,t.jsx)(e.a,{href:\"https://www.elastic.co/security-labs/click-click-boom-automating-protections-testing-with-detonate\",rel:\"nofollow\",children:\"Detonate\"}),\" environment, the following results were displayed:\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/inital-research-of-jokerspy/image3.jpg\",alt:\"TCC permissions queried by xcc\",width:\"473\",height:\"206\"})}),`\n`,(0,t.jsxs)(e.p,{children:[\"Once the custom TCC database was placed in the expected location, the threat actor executed the \",(0,t.jsx)(e.strong,{children:\"xcc\"}),\" binary.\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/inital-research-of-jokerspy/image4.jpg\",alt:\"Threat actor creating/modifying, moving a TCC database, and then executing xcc\",width:\"1440\",height:\"291\"})}),`\n`,(0,t.jsx)(e.h4,{id:\"initial-access\",children:\"Initial access\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"The \",(0,t.jsx)(e.strong,{children:\"xcc\"}),\" binary was executed via bash by three separate processes\"]}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.strong,{children:\"/Applications/IntelliJ IDEA.app/Contents/MacOS/idea\"})}),`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.strong,{children:\"/Applications/iTerm.app/Contents/MacOS/iTerm2\"})}),`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.strong,{children:\"/Applications/Visual Studio Code.app/Contents/MacOS/Electron.\"})}),`\n`]}),`\n`,(0,t.jsxs)(e.p,{children:[\"While we are still investigating and continuing to gather information, we strongly believe that the initial access for this malware was a malicious or backdoored plugin or 3rd party dependency that provided the threat actor access. This aligns with the connection that was made by the researchers at \",(0,t.jsx)(e.a,{href:\"https://www.bitdefender.com/blog/labs/fragments-of-cross-platform-backdoor-hint-at-larger-mac-os-attack/\",rel:\"nofollow\",children:\"Bitdefender\"}),\" who correlated the hardcoded domain found in a version of the \",(0,t.jsx)(e.strong,{children:\"sh.py\"}),\" backdoor to a Tweet about an infected macOS QR code reader which was found to have a malicious dependency.\"]}),`\n`,(0,t.jsx)(e.h4,{id:\"deployed-cryptographic-libraries\",children:\"Deployed cryptographic libraries\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"On May 31st, researchers observed three non-native \",(0,t.jsx)(e.a,{href:\"https://developer.apple.com/library/archive/documentation/DeveloperTools/Conceptual/DynamicLibraries/100-Articles/UsingDynamicLibraries.html\",rel:\"nofollow\",children:\"DyLibs\"}),\" deployed to \",(0,t.jsx)(e.strong,{children:\"/Users/shared/keybag/\"}),\" called \",(0,t.jsx)(e.strong,{children:\"libcrypto.1.0.0.dylib\"}),\" , \",(0,t.jsx)(e.strong,{children:\"libncursesw.5.dylib\"}),\" , and \",(0,t.jsx)(e.strong,{children:\"libssl.1.0.0.dylib\"}),\". On MacOS, keys for file and keychain Data Protection are stored in \",(0,t.jsx)(e.a,{href:\"https://support.apple.com/en-au/guide/security/sec6483d5760/web\",rel:\"nofollow\",children:\"keybags\"}),\", and pertain to iOS, iPadOS, watchOS, and tvOS. At this time, researchers propose that this staging serves a defense evasion purpose and speculate that they may contain useful vulnerabilities. The threat actor may plan to introduce these vulnerabilities to otherwise patched systems or applications.\"]}),`\n`,(0,t.jsx)(e.h4,{id:\"the-shpy-backdoor\",children:\"The sh.py backdoor\"}),`\n`,(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:\"sh.py\"}),\" is a Python backdoor used to deploy and execute other post-exploitation capabilities like Swiftbelt \",(0,t.jsx)(e.strong,{children:\".\"})]}),`\n`,(0,t.jsxs)(e.p,{children:[\"The malware loads its configuration from \",(0,t.jsx)(e.strong,{children:\"~/Public/Safari/sar.dat\"}),\". The configuration file contains crucial elements such as command-and-control (C2) URLs, a sleep timer for beaconing purposes (the default value is 5 seconds), and a unique nine-digit identifier assigned to each agent.\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/inital-research-of-jokerspy/image5.jpg\",alt:\"Execution of sh.py with the C2 URL provided as a parameter\",width:\"1326\",height:\"204\"})}),`\n`,(0,t.jsx)(e.p,{children:\"As part of its periodic beaconing, the malware gathers and transmits various system information. The information sent includes:\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:\"Hostname\"}),`\n`,(0,t.jsx)(e.li,{children:\"Username\"}),`\n`,(0,t.jsx)(e.li,{children:\"Domain name\"}),`\n`,(0,t.jsx)(e.li,{children:\"Current directory\"}),`\n`,(0,t.jsx)(e.li,{children:\"The absolute path of the executable binary\"}),`\n`,(0,t.jsx)(e.li,{children:\"OS version\"}),`\n`,(0,t.jsx)(e.li,{children:\"Is 64-bit OS\"}),`\n`,(0,t.jsx)(e.li,{children:\"Is 64-bit process\"}),`\n`,(0,t.jsx)(e.li,{children:\"Python version\"}),`\n`]}),`\n`,(0,t.jsx)(e.p,{children:\"Below is a table outlining the various commands that can be handled by the backdoor:\"}),`\n`,(0,t.jsx)(e.div,{className:\"table-container\",children:(0,t.jsxs)(e.table,{children:[(0,t.jsx)(e.thead,{children:(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.th,{children:\"Command\"}),(0,t.jsx)(e.th,{children:\"Description\"})]})}),(0,t.jsxs)(e.tbody,{children:[(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"sk\"}),(0,t.jsx)(e.td,{children:\"Stop the backdoor's execution\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"l\"}),(0,t.jsx)(e.td,{children:\"List the files of the path provided as parameter\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"c\"}),(0,t.jsx)(e.td,{children:\"Execute and return the output of a shell command\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"cd\"}),(0,t.jsx)(e.td,{children:\"Change directory and return the new path\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"xs\"}),(0,t.jsx)(e.td,{children:\"Execute a Python code given as a parameter in the current context\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"xsi\"}),(0,t.jsx)(e.td,{children:\"Decode a Base64-encoded Python code given as a parameter, compile it, then execute it\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"r\"}),(0,t.jsx)(e.td,{children:\"Remove a file or directory from the system\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"e\"}),(0,t.jsx)(e.td,{children:\"Execute a file from the system with or without parameter\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"u\"}),(0,t.jsx)(e.td,{children:\"Upload a file to the infected system\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"d\"}),(0,t.jsx)(e.td,{children:\"Download a file from the infected system\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"g\"}),(0,t.jsx)(e.td,{children:\"Get the current malware's configuration stored in the configuration file\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"w\"}),(0,t.jsx)(e.td,{children:\"Override the malware's configuration file with new values\"})]})]})]})}),`\n`,(0,t.jsx)(e.h3,{id:\"swiftbelt\",children:\"Swiftbelt\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"On June 1st, the compromised system registered a signature alert for \",(0,t.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/main/yara/rules/MacOS_Hacktool_Swiftbelt.yar\",rel:\"nofollow\",children:\"MacOS.Hacktool.Swiftbelt\"}),\", a MacOS enumeration capability inspired by \",(0,t.jsx)(e.a,{href:\"https://github.com/GhostPack/Seatbelt\",rel:\"nofollow\",children:\"SeatBelt\"}),\" and created by the red-teamer Cedric Owens. Unlike other enumeration methods, Swiftbelt invokes Swift code to avoid creating command line artifacts. Notably, \",(0,t.jsx)(e.strong,{children:\"xcc\"}),\" variants are also written using Swift.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"The signature alert indicated that Swiftbelt was written to \",(0,t.jsx)(e.strong,{children:\"/Users/shared/sb\"}),\" and executed using the bash shell interpreter, \",(0,t.jsx)(e.strong,{children:\"sh\"}),\". The full command line observed by researchers was \",(0,t.jsx)(e.strong,{children:\"Users/Shared/sb /bin/sh -c /users/shared/sb \\\\\u003e /users/shared/sb.log 2\\\\\u003e\u00261\"}),\" , demonstrating that the threat actor captured results in \",(0,t.jsx)(e.strong,{children:\"sb.log\"}),\" while errors were directed to STDOUT.\"]}),`\n`,(0,t.jsx)(e.h2,{id:\"diamond-model\",children:\"Diamond Model\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"Elastic Security utilizes the \",(0,t.jsx)(e.a,{href:\"https://www.activeresponse.org/wp-content/uploads/2013/07/diamond.pdf\",rel:\"nofollow\",children:\"Diamond Model\"}),\" to describe high-level relationships between the adversaries, capabilities, infrastructure, and victims of intrusions. While the Diamond Model is most commonly used with single intrusions, and leveraging Activity Threading (section 8) as a way to create relationships between incidents, an adversary-centered (section 7.1.4) approach allows for a, although cluttered, single diamond.\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/inital-research-of-jokerspy/image1.png\",alt:\"REF9134 Diamond Model\",width:\"1440\",height:\"928\"})}),`\n`,(0,t.jsx)(e.h2,{id:\"observed-tactics-and-techniques\",children:\"Observed tactics and techniques\"}),`\n`,(0,t.jsx)(e.h3,{id:\"mitre-attck-tactics\",children:\"MITRE ATT\u0026CK Tactics\"}),`\n`,(0,t.jsx)(e.p,{children:\"Tactics represent the why of a technique or sub-technique. It is the adversary\\u2019s tactical goal: the reason for performing an action. These are the tactics observed by Elastic Security Labs in this campaign:\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://attack.mitre.org/tactics/TA0002\",rel:\"nofollow\",children:\"Execution\"})}),`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://attack.mitre.org/tactics/TA0003\",rel:\"nofollow\",children:\"Persistence\"})}),`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://attack.mitre.org/tactics/TA0004\",rel:\"nofollow\",children:\"Privilege Escalation\"})}),`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://attack.mitre.org/tactics/TA0005\",rel:\"nofollow\",children:\"Defense Evasion\"})}),`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://attack.mitre.org/tactics/TA0007\",rel:\"nofollow\",children:\"Discovery\"})}),`\n`]}),`\n`,(0,t.jsx)(e.h3,{id:\"mitre-attck-techniques--sub-techniques\",children:\"MITRE ATT\u0026CK Techniques / Sub techniques\"}),`\n`,(0,t.jsx)(e.p,{children:\"Techniques and Sub techniques represent how an adversary achieves a tactical goal by performing an action. These are the techniques observed by Elastic Security Labs in this campaign:\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1059\",rel:\"nofollow\",children:\"Command and Scripting Interpreter\"})}),`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1574/004\",rel:\"nofollow\",children:\"Dylib Hijacking\"})}),`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1068\",rel:\"nofollow\",children:\"Potential Exploitation for Privilege Execution\"})}),`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1548\",rel:\"nofollow\",children:\"Potential Abuse Elevation Control Mechanism\"})}),`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1564\",rel:\"nofollow\",children:\"Hide Artifacts\"})}),`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1036\",rel:\"nofollow\",children:\"Masquerading\"})}),`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1027\",rel:\"nofollow\",children:\"Obfuscating Files or Information\"})}),`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1553\",rel:\"nofollow\",children:\"Subvert Trust Controls\"})}),`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1010\",rel:\"nofollow\",children:\"Application Window Discovery\"})}),`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1113\",rel:\"nofollow\",children:\"Screen Capture\"})}),`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://attack.mitre.org/software/S0498\",rel:\"nofollow\",children:\"Crytpoistic Software\"})}),`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1005\",rel:\"nofollow\",children:\"Data from Local System\"})}),`\n`]}),`\n`,(0,t.jsx)(e.h2,{id:\"detection-logic\",children:\"Detection logic\"}),`\n`,(0,t.jsx)(e.h3,{id:\"yara\",children:\"YARA\"}),`\n`,(0,t.jsx)(e.p,{children:\"Elastic Security has created YARA rules to identify this activity. Below are YARA rules to identify the JOKERSPY backdoor and SwiftBelt tool.\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:`rule Macos_Hacktool_JokerSpy {\n    meta:\n        author = \"Elastic Security\"\n        creation_date = \"2023-06-19\"\n        last_modified = \"2023-06-19\"\n        os = \"MacOS\"\n        arch = \"x86\"\n        category_type = \"Hacktool\"\n        family = \"JokerSpy\"\n        threat_name = \"Macos.Hacktool.JokerSpy\"\n        reference_sample = \"d895075057e491b34b0f8c0392b44e43ade425d19eaaacea6ef8c5c9bd3487d8\"\n        license = \"Elastic License v2\"\n\n    strings:\n        $str1 = \"ScreenRecording: NO\" fullword\n        $str2 = \"Accessibility: NO\" fullword\n        $str3 = \"Accessibility: YES\" fullword\n        $str4 = \"eck13XProtectCheck\"\n        $str5 = \"Accessibility: NO\" fullword\n        $str6 = \"kMDItemDisplayName = *TCC.db\" fullword\n    condition:\n        5 of them\n}\n`})}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:`rule MacOS_Hacktool_Swiftbelt {\n    meta:\n        author = \"Elastic Security\"\n        creation_date = \"2021-10-12\"\n        last_modified = \"2021-10-25\"\n        threat_name = \"MacOS.Hacktool.Swiftbelt\"\n        reference_sample = \"452c832a17436f61ad5f32ee1c97db05575160105ed1dcd0d3c6db9fb5a9aea1\"\n        os = \"macos\"\n        arch_context = \"x86\"\n        license = \"Elastic License v2\"\n\n    strings:\n        $dbg1 = \"SwiftBelt/Sources/SwiftBelt\"\n        $dbg2 = \"[-] Firefox places.sqlite database not found for user\"\n        $dbg3 = \"[-] No security products found\"\n        $dbg4 = \"SSH/AWS/gcloud Credentials Search:\"\n        $dbg5 = \"[-] Could not open the Slack Cookies database\"\n        $sec1 = \"[+] Malwarebytes A/V found on this host\"\n        $sec2 = \"[+] Cisco AMP for endpoints found\"\n        $sec3 = \"[+] SentinelOne agent running\"\n        $sec4 = \"[+] Crowdstrike Falcon agent found\"\n        $sec5 = \"[+] FireEye HX agent installed\"\n        $sec6 = \"[+] Little snitch firewall found\"\n        $sec7 = \"[+] ESET A/V installed\"\n        $sec8 = \"[+] Carbon Black OSX Sensor installed\"\n        $sec9 = \"/Library/Little Snitch\"\n        $sec10 = \"/Library/FireEye/xagt\"\n        $sec11 = \"/Library/CS/falcond\"\n        $sec12 = \"/Library/Logs/PaloAltoNetworks/GlobalProtect\"\n        $sec13 = \"/Library/Application Support/Malwarebytes\"\n        $sec14 = \"/usr/local/bin/osqueryi\"\n        $sec15 = \"/Library/Sophos Anti-Virus\"\n        $sec16 = \"/Library/Objective-See/Lulu\"\n        $sec17 = \"com.eset.remoteadministrator.agent\"\n        $sec18 = \"/Applications/CarbonBlack/CbOsxSensorService\"\n        $sec19 = \"/Applications/BlockBlock Helper.app\"\n        $sec20 = \"/Applications/KextViewr.app\"\n    condition:\n        6 of them\n}\n`})}),`\n`,(0,t.jsx)(e.h2,{id:\"references\",children:\"References\"}),`\n`,(0,t.jsx)(e.p,{children:\"The following were referenced throughout the above research:\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://www.bitdefender.com/blog/labs/fragments-of-cross-platform-backdoor-hint-at-larger-mac-os-attack/\",rel:\"nofollow\",children:\"https://www.bitdefender.com/blog/labs/fragments-of-cross-platform-backdoor-hint-at-larger-mac-os-attack\"})}),`\n`]}),`\n`,(0,t.jsx)(e.h2,{id:\"observations\",children:\"Observations\"}),`\n`,(0,t.jsx)(e.p,{children:\"The following observables were discussed in this research.\"}),`\n`,(0,t.jsx)(e.div,{className:\"table-container\",children:(0,t.jsxs)(e.table,{children:[(0,t.jsx)(e.thead,{children:(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.th,{children:\"Observable\"}),(0,t.jsx)(e.th,{children:\"Type\"}),(0,t.jsx)(e.th,{children:\"Name\"}),(0,t.jsx)(e.th,{children:\"Reference\"})]})}),(0,t.jsxs)(e.tbody,{children:[(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"app.influmarket[.]org\"}),(0,t.jsx)(e.td,{children:\"Domain\"}),(0,t.jsx)(e.td,{children:\"n/a\"}),(0,t.jsx)(e.td,{children:\"sh.py domain\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"d895075057e491b34b0f8c0392b44e43ade425d19eaaacea6ef8c5c9bd3487d8\"}),(0,t.jsx)(e.td,{children:\"SHA-256\"}),(0,t.jsx)(e.td,{children:\"/Users/Shared/xcc\"}),(0,t.jsx)(e.td,{children:\"Macos.Hacktool.JokerSpy\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"8ca86f78f0c73a46f31be366538423ea0ec58089f3880e041543d08ce11fa626\"}),(0,t.jsx)(e.td,{children:\"SHA-256\"}),(0,t.jsx)(e.td,{children:\"/Users/Shared/sb\"}),(0,t.jsx)(e.td,{children:\"MacOS.Hacktool.Swiftbelt\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"aa951c053baf011d08f3a60a10c1d09bbac32f332413db5b38b8737558a08dc1\"}),(0,t.jsx)(e.td,{children:\"SHA-256\"}),(0,t.jsx)(e.td,{children:\"/Users/Shared/sh.py\"}),(0,t.jsx)(e.td,{children:\"sh.py script\"})]})]})]})})]})}function k(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(d,n)})):d(n)}var S=k;return w(x);})();\n;return Component;"},"_id":"articles/inital-research-of-jokerspy.mdx","_raw":{"sourceFilePath":"articles/inital-research-of-jokerspy.mdx","sourceFileName":"inital-research-of-jokerspy.mdx","sourceFileDir":"articles","contentType":"mdx","flattenedPath":"articles/inital-research-of-jokerspy"},"type":"Article","imageUrl":"/assets/images/inital-research-of-jokerspy/photo-edited-04@2x.jpg","readingTime":"15 min read","series":"","url":"/inital-research-of-jokerspy","headings":[{"level":2,"title":"Key takeaways","href":"#key-takeaways"},{"level":2,"title":"Preamble","href":"#preamble"},{"level":2,"title":"Overview","href":"#overview"},{"level":2,"title":"Analysis","href":"#analysis"},{"level":3,"title":"The xcc binary","href":"#the-xcc-binary"},{"level":4,"title":"XCode artifacts","href":"#xcode-artifacts"},{"level":4,"title":"Abusing TCC","href":"#abusing-tcc"},{"level":4,"title":"Initial access","href":"#initial-access"},{"level":4,"title":"Deployed cryptographic libraries","href":"#deployed-cryptographic-libraries"},{"level":4,"title":"The sh.py backdoor","href":"#the-shpy-backdoor"},{"level":3,"title":"Swiftbelt","href":"#swiftbelt"},{"level":2,"title":"Diamond Model","href":"#diamond-model"},{"level":2,"title":"Observed tactics and techniques","href":"#observed-tactics-and-techniques"},{"level":3,"title":"MITRE ATT\u0026CK Tactics","href":"#mitre-attck-tactics"},{"level":3,"title":"MITRE ATT\u0026CK Techniques / Sub techniques","href":"#mitre-attck-techniques--sub-techniques"},{"level":2,"title":"Detection logic","href":"#detection-logic"},{"level":3,"title":"YARA","href":"#yara"},{"level":2,"title":"References","href":"#references"},{"level":2,"title":"Observations","href":"#observations"}],"author":[{"title":"Colson Wilhoit","slug":"colson-wilhoit","description":"Elastic","body":{"raw":"","code":"var Component=(()=\u003e{var m=Object.create;var i=Object.defineProperty;var x=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var _=Object.getPrototypeOf,d=Object.prototype.hasOwnProperty;var g=(t,n)=\u003e()=\u003e(n||t((n={exports:{}}).exports,n),n.exports),j=(t,n)=\u003e{for(var e in n)i(t,e,{get:n[e],enumerable:!0})},a=(t,n,e,s)=\u003e{if(n\u0026\u0026typeof n==\"object\"||typeof n==\"function\")for(let r of f(n))!d.call(t,r)\u0026\u0026r!==e\u0026\u0026i(t,r,{get:()=\u003en[r],enumerable:!(s=x(n,r))||s.enumerable});return t};var p=(t,n,e)=\u003e(e=t!=null?m(_(t)):{},a(n||!t||!t.__esModule?i(e,\"default\",{value:t,enumerable:!0}):e,t)),h=t=\u003ea(i({},\"__esModule\",{value:!0}),t);var l=g((X,c)=\u003e{c.exports=_jsx_runtime});var D={};j(D,{default:()=\u003ew,frontmatter:()=\u003eC});var o=p(l()),C={title:\"Colson Wilhoit\",description:\"Elastic\",slug:\"colson-wilhoit\"};function u(t){return(0,o.jsx)(o.Fragment,{})}function M(t={}){let{wrapper:n}=t.components||{};return n?(0,o.jsx)(n,Object.assign({},t,{children:(0,o.jsx)(u,t)})):u(t)}var w=M;return h(D);})();\n;return Component;"},"_id":"authors/colson-wilhoit.mdx","_raw":{"sourceFilePath":"authors/colson-wilhoit.mdx","sourceFileName":"colson-wilhoit.mdx","sourceFileDir":"authors","contentType":"mdx","flattenedPath":"authors/colson-wilhoit"},"type":"Author","imageUrl":"","url":"/authors/colson-wilhoit"},{"title":"Salim Bitam","slug":"salim-bitam","description":"Elastic","body":{"raw":"","code":"var Component=(()=\u003e{var l=Object.create;var i=Object.defineProperty;var x=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var _=Object.getPrototypeOf,d=Object.prototype.hasOwnProperty;var g=(t,n)=\u003e()=\u003e(n||t((n={exports:{}}).exports,n),n.exports),j=(t,n)=\u003e{for(var e in n)i(t,e,{get:n[e],enumerable:!0})},s=(t,n,e,o)=\u003e{if(n\u0026\u0026typeof n==\"object\"||typeof n==\"function\")for(let a of f(n))!d.call(t,a)\u0026\u0026a!==e\u0026\u0026i(t,a,{get:()=\u003en[a],enumerable:!(o=x(n,a))||o.enumerable});return t};var p=(t,n,e)=\u003e(e=t!=null?l(_(t)):{},s(n||!t||!t.__esModule?i(e,\"default\",{value:t,enumerable:!0}):e,t)),M=t=\u003es(i({},\"__esModule\",{value:!0}),t);var c=g((h,m)=\u003e{m.exports=_jsx_runtime});var F={};j(F,{default:()=\u003eD,frontmatter:()=\u003eb});var r=p(c()),b={title:\"Salim Bitam\",description:\"Elastic\",slug:\"salim-bitam\"};function u(t){return(0,r.jsx)(r.Fragment,{})}function C(t={}){let{wrapper:n}=t.components||{};return n?(0,r.jsx)(n,Object.assign({},t,{children:(0,r.jsx)(u,t)})):u(t)}var D=C;return M(F);})();\n;return Component;"},"_id":"authors/salim-bitam.mdx","_raw":{"sourceFilePath":"authors/salim-bitam.mdx","sourceFileName":"salim-bitam.mdx","sourceFileDir":"authors","contentType":"mdx","flattenedPath":"authors/salim-bitam"},"type":"Author","imageUrl":"","url":"/authors/salim-bitam"},{"title":"Seth Goodwin","slug":"seth-goodwin","description":"Elastic","body":{"raw":"","code":"var Component=(()=\u003e{var x=Object.create;var s=Object.defineProperty;var d=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,l=Object.prototype.hasOwnProperty;var _=(t,n)=\u003e()=\u003e(n||t((n={exports:{}}).exports,n),n.exports),j=(t,n)=\u003e{for(var e in n)s(t,e,{get:n[e],enumerable:!0})},a=(t,n,e,i)=\u003e{if(n\u0026\u0026typeof n==\"object\"||typeof n==\"function\")for(let r of f(n))!l.call(t,r)\u0026\u0026r!==e\u0026\u0026s(t,r,{get:()=\u003en[r],enumerable:!(i=d(n,r))||i.enumerable});return t};var p=(t,n,e)=\u003e(e=t!=null?x(g(t)):{},a(n||!t||!t.__esModule?s(e,\"default\",{value:t,enumerable:!0}):e,t)),h=t=\u003ea(s({},\"__esModule\",{value:!0}),t);var u=_((X,c)=\u003e{c.exports=_jsx_runtime});var D={};j(D,{default:()=\u003eC,frontmatter:()=\u003ew});var o=p(u()),w={title:\"Seth Goodwin\",description:\"Elastic\",slug:\"seth-goodwin\"};function m(t){return(0,o.jsx)(o.Fragment,{})}function M(t={}){let{wrapper:n}=t.components||{};return n?(0,o.jsx)(n,Object.assign({},t,{children:(0,o.jsx)(m,t)})):m(t)}var C=M;return h(D);})();\n;return Component;"},"_id":"authors/seth-goodwin.mdx","_raw":{"sourceFilePath":"authors/seth-goodwin.mdx","sourceFileName":"seth-goodwin.mdx","sourceFileDir":"authors","contentType":"mdx","flattenedPath":"authors/seth-goodwin"},"type":"Author","imageUrl":"","url":"/authors/seth-goodwin"},{"title":"Andrew Pease","slug":"andrew-pease","description":"Elastic Security Labs Technical Lead, Elastic","image":"andrew-pease.jpg","body":{"raw":"","code":"var Component=(()=\u003e{var m=Object.create;var s=Object.defineProperty;var l=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var x=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var f=(e,t)=\u003e()=\u003e(t||e((t={exports:{}}).exports,t),t.exports),j=(e,t)=\u003e{for(var n in t)s(e,n,{get:t[n],enumerable:!0})},i=(e,t,n,c)=\u003e{if(t\u0026\u0026typeof t==\"object\"||typeof t==\"function\")for(let r of p(t))!g.call(e,r)\u0026\u0026r!==n\u0026\u0026s(e,r,{get:()=\u003et[r],enumerable:!(c=l(t,r))||c.enumerable});return e};var _=(e,t,n)=\u003e(n=e!=null?m(x(e)):{},i(t||!e||!e.__esModule?s(n,\"default\",{value:e,enumerable:!0}):n,e)),w=e=\u003ei(s({},\"__esModule\",{value:!0}),e);var u=f((C,o)=\u003e{o.exports=_jsx_runtime});var h={};j(h,{default:()=\u003eb,frontmatter:()=\u003eL});var a=_(u()),L={title:\"Andrew Pease\",description:\"Elastic Security Labs Technical Lead, Elastic\",slug:\"andrew-pease\",image:\"andrew-pease.jpg\"};function d(e){return(0,a.jsx)(a.Fragment,{})}function M(e={}){let{wrapper:t}=e.components||{};return t?(0,a.jsx)(t,Object.assign({},e,{children:(0,a.jsx)(d,e)})):d(e)}var b=M;return w(h);})();\n;return Component;"},"_id":"authors/andrew-pease.mdx","_raw":{"sourceFilePath":"authors/andrew-pease.mdx","sourceFileName":"andrew-pease.mdx","sourceFileDir":"authors","contentType":"mdx","flattenedPath":"authors/andrew-pease"},"type":"Author","imageUrl":"/assets/images/authors/andrew-pease.jpg","url":"/authors/andrew-pease"},{"title":"Ricardo Ungureanu","slug":"ricardo-ungureanu","description":"Principal Security Engineer, Elastic","image":"ricardo-ungureanu.jpg","body":{"raw":"","code":"var Component=(()=\u003e{var m=Object.create;var i=Object.defineProperty;var d=Object.getOwnPropertyDescriptor;var x=Object.getOwnPropertyNames;var l=Object.getPrototypeOf,p=Object.prototype.hasOwnProperty;var f=(n,t)=\u003e()=\u003e(t||n((t={exports:{}}).exports,t),t.exports),j=(n,t)=\u003e{for(var r in t)i(n,r,{get:t[r],enumerable:!0})},u=(n,t,r,o)=\u003e{if(t\u0026\u0026typeof t==\"object\"||typeof t==\"function\")for(let a of x(t))!p.call(n,a)\u0026\u0026a!==r\u0026\u0026i(n,a,{get:()=\u003et[a],enumerable:!(o=d(t,a))||o.enumerable});return n};var _=(n,t,r)=\u003e(r=n!=null?m(l(n)):{},u(t||!n||!n.__esModule?i(r,\"default\",{value:n,enumerable:!0}):r,n)),M=n=\u003eu(i({},\"__esModule\",{value:!0}),n);var s=f((X,c)=\u003e{c.exports=_jsx_runtime});var E={};j(E,{default:()=\u003eD,frontmatter:()=\u003ey});var e=_(s()),y={title:\"Ricardo Ungureanu\",description:\"Principal Security Engineer, Elastic\",slug:\"ricardo-ungureanu\",image:\"ricardo-ungureanu.jpg\"};function g(n){return(0,e.jsx)(e.Fragment,{})}function C(n={}){let{wrapper:t}=n.components||{};return t?(0,e.jsx)(t,Object.assign({},n,{children:(0,e.jsx)(g,n)})):g(n)}var D=C;return M(E);})();\n;return Component;"},"_id":"authors/ricardo-ungureanu.mdx","_raw":{"sourceFilePath":"authors/ricardo-ungureanu.mdx","sourceFileName":"ricardo-ungureanu.mdx","sourceFileDir":"authors","contentType":"mdx","flattenedPath":"authors/ricardo-ungureanu"},"type":"Author","imageUrl":"/assets/images/authors/ricardo-ungureanu.jpg","url":"/authors/ricardo-ungureanu"}],"category":[{"title":"Attack pattern","slug":"attack-pattern","body":{"raw":"","code":"var Component=(()=\u003e{var x=Object.create;var o=Object.defineProperty;var f=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var _=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var j=(t,n)=\u003e()=\u003e(n||t((n={exports:{}}).exports,n),n.exports),l=(t,n)=\u003e{for(var e in n)o(t,e,{get:n[e],enumerable:!0})},s=(t,n,e,c)=\u003e{if(n\u0026\u0026typeof n==\"object\"||typeof n==\"function\")for(let a of p(n))!g.call(t,a)\u0026\u0026a!==e\u0026\u0026o(t,a,{get:()=\u003en[a],enumerable:!(c=f(n,a))||c.enumerable});return t};var d=(t,n,e)=\u003e(e=t!=null?x(_(t)):{},s(n||!t||!t.__esModule?o(e,\"default\",{value:t,enumerable:!0}):e,t)),M=t=\u003es(o({},\"__esModule\",{value:!0}),t);var i=j((b,u)=\u003e{u.exports=_jsx_runtime});var F={};l(F,{default:()=\u003eD,frontmatter:()=\u003ek});var r=d(i()),k={title:\"Attack pattern\",slug:\"attack-pattern\"};function m(t){return(0,r.jsx)(r.Fragment,{})}function C(t={}){let{wrapper:n}=t.components||{};return n?(0,r.jsx)(n,Object.assign({},t,{children:(0,r.jsx)(m,t)})):m(t)}var D=C;return M(F);})();\n;return Component;"},"_id":"categories/attack-pattern.mdx","_raw":{"sourceFilePath":"categories/attack-pattern.mdx","sourceFileName":"attack-pattern.mdx","sourceFileDir":"categories","contentType":"mdx","flattenedPath":"categories/attack-pattern"},"type":"Category","url":"/categories/attack-pattern"},{"title":"Campaigns","slug":"campaigns","body":{"raw":"","code":"var Component=(()=\u003e{var x=Object.create;var o=Object.defineProperty;var g=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,_=Object.prototype.hasOwnProperty;var j=(t,n)=\u003e()=\u003e(n||t((n={exports:{}}).exports,n),n.exports),l=(t,n)=\u003e{for(var e in n)o(t,e,{get:n[e],enumerable:!0})},c=(t,n,e,s)=\u003e{if(n\u0026\u0026typeof n==\"object\"||typeof n==\"function\")for(let a of f(n))!_.call(t,a)\u0026\u0026a!==e\u0026\u0026o(t,a,{get:()=\u003en[a],enumerable:!(s=g(n,a))||s.enumerable});return t};var d=(t,n,e)=\u003e(e=t!=null?x(p(t)):{},c(n||!t||!t.__esModule?o(e,\"default\",{value:t,enumerable:!0}):e,t)),C=t=\u003ec(o({},\"__esModule\",{value:!0}),t);var m=j((h,i)=\u003e{i.exports=_jsx_runtime});var X={};l(X,{default:()=\u003eF,frontmatter:()=\u003eM});var r=d(m()),M={title:\"Campaigns\",slug:\"campaigns\"};function u(t){return(0,r.jsx)(r.Fragment,{})}function D(t={}){let{wrapper:n}=t.components||{};return n?(0,r.jsx)(n,Object.assign({},t,{children:(0,r.jsx)(u,t)})):u(t)}var F=D;return C(X);})();\n;return Component;"},"_id":"categories/campaigns.mdx","_raw":{"sourceFilePath":"categories/campaigns.mdx","sourceFileName":"campaigns.mdx","sourceFileDir":"categories","contentType":"mdx","flattenedPath":"categories/campaigns"},"type":"Category","url":"/categories/campaigns"}]},"seriesArticles":null},"__N_SSG":true},"page":"/[slug]","query":{"slug":"inital-research-of-jokerspy"},"buildId":"dGrrQfBbQkqaleQ_11aBK","assetPrefix":"/security-labs","isFallback":false,"gsp":true,"scriptLoader":[]}</script></body></html>