<!DOCTYPE html>
<html lang="en-US">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<link rel="profile" href="http://gmpg.org/xfn/11">
<link rel="pingback" href="https://norfolkinfosec.com/xmlrpc.php">


<title>Fuel Pumps II &#8211; PoSlurp.B &#8211; One Night in Norfolk</title>
<meta name='robots' content='max-image-preview:large' />
	<style>img:is([sizes="auto" i], [sizes^="auto," i]) { contain-intrinsic-size: 3000px 1500px }</style>
	<link rel="alternate" type="application/rss+xml" title="One Night in Norfolk &raquo; Feed" href="https://norfolkinfosec.com/feed/" />
<link rel="alternate" type="application/rss+xml" title="One Night in Norfolk &raquo; Comments Feed" href="https://norfolkinfosec.com/comments/feed/" />
<link rel="alternate" type="application/rss+xml" title="One Night in Norfolk &raquo; Fuel Pumps II &#8211; PoSlurp.B Comments Feed" href="https://norfolkinfosec.com/fuel-pumps-ii-poslurp-b/feed/" />
<script type="text/javascript">
/* <![CDATA[ */
window._wpemojiSettings = {"baseUrl":"https:\/\/s.w.org\/images\/core\/emoji\/15.0.3\/72x72\/","ext":".png","svgUrl":"https:\/\/s.w.org\/images\/core\/emoji\/15.0.3\/svg\/","svgExt":".svg","source":{"concatemoji":"https:\/\/norfolkinfosec.com\/wp-includes\/js\/wp-emoji-release.min.js?ver=6.7.1"}};
/*! This file is auto-generated */
!function(i,n){var o,s,e;function c(e){try{var t={supportTests:e,timestamp:(new Date).valueOf()};sessionStorage.setItem(o,JSON.stringify(t))}catch(e){}}function p(e,t,n){e.clearRect(0,0,e.canvas.width,e.canvas.height),e.fillText(t,0,0);var t=new Uint32Array(e.getImageData(0,0,e.canvas.width,e.canvas.height).data),r=(e.clearRect(0,0,e.canvas.width,e.canvas.height),e.fillText(n,0,0),new Uint32Array(e.getImageData(0,0,e.canvas.width,e.canvas.height).data));return t.every(function(e,t){return e===r[t]})}function u(e,t,n){switch(t){case"flag":return n(e,"\ud83c\udff3\ufe0f\u200d\u26a7\ufe0f","\ud83c\udff3\ufe0f\u200b\u26a7\ufe0f")?!1:!n(e,"\ud83c\uddfa\ud83c\uddf3","\ud83c\uddfa\u200b\ud83c\uddf3")&&!n(e,"\ud83c\udff4\udb40\udc67\udb40\udc62\udb40\udc65\udb40\udc6e\udb40\udc67\udb40\udc7f","\ud83c\udff4\u200b\udb40\udc67\u200b\udb40\udc62\u200b\udb40\udc65\u200b\udb40\udc6e\u200b\udb40\udc67\u200b\udb40\udc7f");case"emoji":return!n(e,"\ud83d\udc26\u200d\u2b1b","\ud83d\udc26\u200b\u2b1b")}return!1}function f(e,t,n){var r="undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope?new OffscreenCanvas(300,150):i.createElement("canvas"),a=r.getContext("2d",{willReadFrequently:!0}),o=(a.textBaseline="top",a.font="600 32px Arial",{});return e.forEach(function(e){o[e]=t(a,e,n)}),o}function t(e){var t=i.createElement("script");t.src=e,t.defer=!0,i.head.appendChild(t)}"undefined"!=typeof Promise&&(o="wpEmojiSettingsSupports",s=["flag","emoji"],n.supports={everything:!0,everythingExceptFlag:!0},e=new Promise(function(e){i.addEventListener("DOMContentLoaded",e,{once:!0})}),new Promise(function(t){var n=function(){try{var e=JSON.parse(sessionStorage.getItem(o));if("object"==typeof e&&"number"==typeof e.timestamp&&(new Date).valueOf()<e.timestamp+604800&&"object"==typeof e.supportTests)return e.supportTests}catch(e){}return null}();if(!n){if("undefined"!=typeof Worker&&"undefined"!=typeof OffscreenCanvas&&"undefined"!=typeof URL&&URL.createObjectURL&&"undefined"!=typeof Blob)try{var e="postMessage("+f.toString()+"("+[JSON.stringify(s),u.toString(),p.toString()].join(",")+"));",r=new Blob([e],{type:"text/javascript"}),a=new Worker(URL.createObjectURL(r),{name:"wpTestEmojiSupports"});return void(a.onmessage=function(e){c(n=e.data),a.terminate(),t(n)})}catch(e){}c(n=f(s,u,p))}t(n)}).then(function(e){for(var t in e)n.supports[t]=e[t],n.supports.everything=n.supports.everything&&n.supports[t],"flag"!==t&&(n.supports.everythingExceptFlag=n.supports.everythingExceptFlag&&n.supports[t]);n.supports.everythingExceptFlag=n.supports.everythingExceptFlag&&!n.supports.flag,n.DOMReady=!1,n.readyCallback=function(){n.DOMReady=!0}}).then(function(){return e}).then(function(){var e;n.supports.everything||(n.readyCallback(),(e=n.source||{}).concatemoji?t(e.concatemoji):e.wpemoji&&e.twemoji&&(t(e.twemoji),t(e.wpemoji)))}))}((window,document),window._wpemojiSettings);
/* ]]> */
</script>
<style id='wp-emoji-styles-inline-css' type='text/css'>

	img.wp-smiley, img.emoji {
		display: inline !important;
		border: none !important;
		box-shadow: none !important;
		height: 1em !important;
		width: 1em !important;
		margin: 0 0.07em !important;
		vertical-align: -0.1em !important;
		background: none !important;
		padding: 0 !important;
	}
</style>
<link rel='stylesheet' id='wp-block-library-css' href='https://norfolkinfosec.com/wp-includes/css/dist/block-library/style.min.css?ver=6.7.1' type='text/css' media='all' />
<style id='classic-theme-styles-inline-css' type='text/css'>
/*! This file is auto-generated */
.wp-block-button__link{color:#fff;background-color:#32373c;border-radius:9999px;box-shadow:none;text-decoration:none;padding:calc(.667em + 2px) calc(1.333em + 2px);font-size:1.125em}.wp-block-file__button{background:#32373c;color:#fff;text-decoration:none}
</style>
<style id='global-styles-inline-css' type='text/css'>
:root{--wp--preset--aspect-ratio--square: 1;--wp--preset--aspect-ratio--4-3: 4/3;--wp--preset--aspect-ratio--3-4: 3/4;--wp--preset--aspect-ratio--3-2: 3/2;--wp--preset--aspect-ratio--2-3: 2/3;--wp--preset--aspect-ratio--16-9: 16/9;--wp--preset--aspect-ratio--9-16: 9/16;--wp--preset--color--black: #000000;--wp--preset--color--cyan-bluish-gray: #abb8c3;--wp--preset--color--white: #ffffff;--wp--preset--color--pale-pink: #f78da7;--wp--preset--color--vivid-red: #cf2e2e;--wp--preset--color--luminous-vivid-orange: #ff6900;--wp--preset--color--luminous-vivid-amber: #fcb900;--wp--preset--color--light-green-cyan: #7bdcb5;--wp--preset--color--vivid-green-cyan: #00d084;--wp--preset--color--pale-cyan-blue: #8ed1fc;--wp--preset--color--vivid-cyan-blue: #0693e3;--wp--preset--color--vivid-purple: #9b51e0;--wp--preset--gradient--vivid-cyan-blue-to-vivid-purple: linear-gradient(135deg,rgba(6,147,227,1) 0%,rgb(155,81,224) 100%);--wp--preset--gradient--light-green-cyan-to-vivid-green-cyan: linear-gradient(135deg,rgb(122,220,180) 0%,rgb(0,208,130) 100%);--wp--preset--gradient--luminous-vivid-amber-to-luminous-vivid-orange: linear-gradient(135deg,rgba(252,185,0,1) 0%,rgba(255,105,0,1) 100%);--wp--preset--gradient--luminous-vivid-orange-to-vivid-red: linear-gradient(135deg,rgba(255,105,0,1) 0%,rgb(207,46,46) 100%);--wp--preset--gradient--very-light-gray-to-cyan-bluish-gray: linear-gradient(135deg,rgb(238,238,238) 0%,rgb(169,184,195) 100%);--wp--preset--gradient--cool-to-warm-spectrum: linear-gradient(135deg,rgb(74,234,220) 0%,rgb(151,120,209) 20%,rgb(207,42,186) 40%,rgb(238,44,130) 60%,rgb(251,105,98) 80%,rgb(254,248,76) 100%);--wp--preset--gradient--blush-light-purple: linear-gradient(135deg,rgb(255,206,236) 0%,rgb(152,150,240) 100%);--wp--preset--gradient--blush-bordeaux: linear-gradient(135deg,rgb(254,205,165) 0%,rgb(254,45,45) 50%,rgb(107,0,62) 100%);--wp--preset--gradient--luminous-dusk: linear-gradient(135deg,rgb(255,203,112) 0%,rgb(199,81,192) 50%,rgb(65,88,208) 100%);--wp--preset--gradient--pale-ocean: linear-gradient(135deg,rgb(255,245,203) 0%,rgb(182,227,212) 50%,rgb(51,167,181) 100%);--wp--preset--gradient--electric-grass: linear-gradient(135deg,rgb(202,248,128) 0%,rgb(113,206,126) 100%);--wp--preset--gradient--midnight: linear-gradient(135deg,rgb(2,3,129) 0%,rgb(40,116,252) 100%);--wp--preset--font-size--small: 13px;--wp--preset--font-size--medium: 20px;--wp--preset--font-size--large: 36px;--wp--preset--font-size--x-large: 42px;--wp--preset--spacing--20: 0.44rem;--wp--preset--spacing--30: 0.67rem;--wp--preset--spacing--40: 1rem;--wp--preset--spacing--50: 1.5rem;--wp--preset--spacing--60: 2.25rem;--wp--preset--spacing--70: 3.38rem;--wp--preset--spacing--80: 5.06rem;--wp--preset--shadow--natural: 6px 6px 9px rgba(0, 0, 0, 0.2);--wp--preset--shadow--deep: 12px 12px 50px rgba(0, 0, 0, 0.4);--wp--preset--shadow--sharp: 6px 6px 0px rgba(0, 0, 0, 0.2);--wp--preset--shadow--outlined: 6px 6px 0px -3px rgba(255, 255, 255, 1), 6px 6px rgba(0, 0, 0, 1);--wp--preset--shadow--crisp: 6px 6px 0px rgba(0, 0, 0, 1);}:where(.is-layout-flex){gap: 0.5em;}:where(.is-layout-grid){gap: 0.5em;}body .is-layout-flex{display: flex;}.is-layout-flex{flex-wrap: wrap;align-items: center;}.is-layout-flex > :is(*, div){margin: 0;}body .is-layout-grid{display: grid;}.is-layout-grid > :is(*, div){margin: 0;}:where(.wp-block-columns.is-layout-flex){gap: 2em;}:where(.wp-block-columns.is-layout-grid){gap: 2em;}:where(.wp-block-post-template.is-layout-flex){gap: 1.25em;}:where(.wp-block-post-template.is-layout-grid){gap: 1.25em;}.has-black-color{color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-color{color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-color{color: var(--wp--preset--color--white) !important;}.has-pale-pink-color{color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-color{color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-color{color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-color{color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-color{color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-color{color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-color{color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-color{color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-color{color: var(--wp--preset--color--vivid-purple) !important;}.has-black-background-color{background-color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-background-color{background-color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-background-color{background-color: var(--wp--preset--color--white) !important;}.has-pale-pink-background-color{background-color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-background-color{background-color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-background-color{background-color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-background-color{background-color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-background-color{background-color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-background-color{background-color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-background-color{background-color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-background-color{background-color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-background-color{background-color: var(--wp--preset--color--vivid-purple) !important;}.has-black-border-color{border-color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-border-color{border-color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-border-color{border-color: var(--wp--preset--color--white) !important;}.has-pale-pink-border-color{border-color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-border-color{border-color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-border-color{border-color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-border-color{border-color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-border-color{border-color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-border-color{border-color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-border-color{border-color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-border-color{border-color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-border-color{border-color: var(--wp--preset--color--vivid-purple) !important;}.has-vivid-cyan-blue-to-vivid-purple-gradient-background{background: var(--wp--preset--gradient--vivid-cyan-blue-to-vivid-purple) !important;}.has-light-green-cyan-to-vivid-green-cyan-gradient-background{background: var(--wp--preset--gradient--light-green-cyan-to-vivid-green-cyan) !important;}.has-luminous-vivid-amber-to-luminous-vivid-orange-gradient-background{background: var(--wp--preset--gradient--luminous-vivid-amber-to-luminous-vivid-orange) !important;}.has-luminous-vivid-orange-to-vivid-red-gradient-background{background: var(--wp--preset--gradient--luminous-vivid-orange-to-vivid-red) !important;}.has-very-light-gray-to-cyan-bluish-gray-gradient-background{background: var(--wp--preset--gradient--very-light-gray-to-cyan-bluish-gray) !important;}.has-cool-to-warm-spectrum-gradient-background{background: var(--wp--preset--gradient--cool-to-warm-spectrum) !important;}.has-blush-light-purple-gradient-background{background: var(--wp--preset--gradient--blush-light-purple) !important;}.has-blush-bordeaux-gradient-background{background: var(--wp--preset--gradient--blush-bordeaux) !important;}.has-luminous-dusk-gradient-background{background: var(--wp--preset--gradient--luminous-dusk) !important;}.has-pale-ocean-gradient-background{background: var(--wp--preset--gradient--pale-ocean) !important;}.has-electric-grass-gradient-background{background: var(--wp--preset--gradient--electric-grass) !important;}.has-midnight-gradient-background{background: var(--wp--preset--gradient--midnight) !important;}.has-small-font-size{font-size: var(--wp--preset--font-size--small) !important;}.has-medium-font-size{font-size: var(--wp--preset--font-size--medium) !important;}.has-large-font-size{font-size: var(--wp--preset--font-size--large) !important;}.has-x-large-font-size{font-size: var(--wp--preset--font-size--x-large) !important;}
:where(.wp-block-post-template.is-layout-flex){gap: 1.25em;}:where(.wp-block-post-template.is-layout-grid){gap: 1.25em;}
:where(.wp-block-columns.is-layout-flex){gap: 2em;}:where(.wp-block-columns.is-layout-grid){gap: 2em;}
:root :where(.wp-block-pullquote){font-size: 1.5em;line-height: 1.6;}
</style>
<link rel='stylesheet' id='coral-dark-style-css' href='https://norfolkinfosec.com/wp-content/themes/coral-dark/style.css?ver=6.7.1' type='text/css' media='all' />
<style id='coral-dark-style-inline-css' type='text/css'>
h1.site-title, h3.site-title { font-family: Arial, Helvetica, sans-serif;}
		
		body, button, input, select, textarea {	font-size: 12px;}
		h1.site-title, h3.site-title {
			margin-top: 25px; 
			font-size: 30px; 
		}
		h1.site-title a,
		h1.site-title a:visited,
		h1.site-title a:hover,
		h1.site-title a:active,
		h1.site-title a:focus,
		h3.site-title a,
		h3.site-title a:visited,
		h3.site-title a:hover,
		h3.site-title a:active,
		h3.site-title a:focus {
			color: #eeeeee !important;
		}
		
		h2.site-description, h4.site-description {
			margin-top: 5px;
			font-size: 14px;
			color: #999999;
		}
		.custom-logo {max-height: 100px;}
		@media screen and (min-width: 768px) {
			.main-navigation {margin-top: 15px;}
			#search1 {margin-top: 42px;}
			#social1 {margin-top: 47px;}
		}
	
</style>
<script type="text/javascript" src="https://norfolkinfosec.com/wp-includes/js/jquery/jquery.min.js?ver=3.7.1" id="jquery-core-js"></script>
<script type="text/javascript" src="https://norfolkinfosec.com/wp-includes/js/jquery/jquery-migrate.min.js?ver=3.4.1" id="jquery-migrate-js"></script>
<script type="text/javascript" src="https://norfolkinfosec.com/wp-content/themes/coral-dark/js/jquery.nivo.slider.pack.js?ver=3.2" id="nivo-slider-js"></script>
<link rel="https://api.w.org/" href="https://norfolkinfosec.com/wp-json/" /><link rel="alternate" title="JSON" type="application/json" href="https://norfolkinfosec.com/wp-json/wp/v2/posts/314" /><link rel="EditURI" type="application/rsd+xml" title="RSD" href="https://norfolkinfosec.com/xmlrpc.php?rsd" />
<meta name="generator" content="WordPress 6.7.1" />
<link rel="canonical" href="https://norfolkinfosec.com/fuel-pumps-ii-poslurp-b/" />
<link rel='shortlink' href='https://norfolkinfosec.com/?p=314' />
<link rel="alternate" title="oEmbed (JSON)" type="application/json+oembed" href="https://norfolkinfosec.com/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fnorfolkinfosec.com%2Ffuel-pumps-ii-poslurp-b%2F" />
<link rel="alternate" title="oEmbed (XML)" type="text/xml+oembed" href="https://norfolkinfosec.com/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fnorfolkinfosec.com%2Ffuel-pumps-ii-poslurp-b%2F&#038;format=xml" />
		<style type="text/css" id="wp-custom-css">
			.wp-block-table td { font-size: 12pt; }		</style>
		</head>

<body class="post-template-default single single-post postid-314 single-format-standard wp-embed-responsive">
<div id="page" class="hfeed site">
	<a class="skip-link screen-reader-text" href="#content">Skip to content</a>

	<header id="masthead" class="site-header grid-container" role="banner">
		<div class="site-branding egrid  grid-35 tablet-grid-35 mobile-grid-100">
												<h3 class="site-title"><a href="https://norfolkinfosec.com/" rel="home">One Night in Norfolk</a></h3>
					<h4 class="site-description">Reverse Engineering and Malware Analysis</h4>
					
							
		</div><!-- .site-branding -->
		<div id="headerright" class="grid-parent egrid  grid-65 tablet-grid-65 mobile-grid-100">
			
			<div id="social1" class="egrid  grid-60 tablet-grid-60 mobile-grid-100">
							</div>
			
			<div id="search1" class="search  grid-40 tablet-grid-40 mobile-grid-100">
				<div class="search-container">
<form role="search" method="get" class="search-form" action="https://norfolkinfosec.com/">
	<fieldset>
		<input type="search" class="search-field" placeholder="Search..." value="" name="s" title="Search for:" />
		<input type="submit" class="search-submit" value="" />
	</fieldset>
</form>
</div>			</div>
		</div>

		<nav id="site-navigation" class="main-navigation egrid grid-100 tablet-grid-100 mobile-grid-100" role="navigation">
			<i id="menu-button" class="fa fa-bars collapsed"><span>  Menu</span></i>
			<div class="menu-primary-menu-container"><ul id="main-menu" class="sm sm-clean collapsed"><li id="menu-item-15" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-15"><a href="https://norfolkinfosec.com">Home</a></li>
<li id="menu-item-69" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-69"><a href="https://norfolkinfosec.com/contact/">Contact Me</a></li>
<li id="menu-item-266" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-266"><a href="https://norfolkinfosec.com/pretzels/">Pretzels</a></li>
<li id="menu-item-373" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-373"><a href="https://norfolkinfosec.com/presentations/">Presentations</a></li>
</ul></div>		</nav><!-- #site-navigation -->
	</header><!-- #masthead -->

		
<!-- breadcrumbs from Yoast or NavXT plugins -->
		
	<div id="content" class="site-content grid-container">

	<div id="primary" class="content-area egrid  grid-85 tablet-grid-85 mobile-grid-100 push-15 tablet-push-15">
		<main id="main" class="site-main" role="main">

		
			
<article id="post-314" class="post-314 post type-post status-publish format-standard hentry category-uncategorized tag-fin8 tag-poslurp tag-poslurp-b">
	<header class="entry-header">
		<h1 class="entry-title">Fuel Pumps II &#8211; PoSlurp.B</h1>
		<div class="entry-meta">
			<span class="posted-on"><a href="https://norfolkinfosec.com/fuel-pumps-ii-poslurp-b/" rel="bookmark"><time class="entry-date published" datetime="2019-12-31T06:51:02+00:00">December 31, 2019</time><time class="updated" datetime="2019-12-31T17:40:35+00:00">December 31, 2019</time></a></span><span class="byline"> <span class="author vcard"><a class="url fn n" href="https://norfolkinfosec.com/author/norfolkadmin/">norfolk</a></span></span>		</div><!-- .entry-meta -->
	</header><!-- .entry-header -->

	<div class="entry-content">
		
		
<p style="font-size:12px" class="has-text-align-left"><a href="https://norfolkinfosec.com/pos-malware-used-at-fuel-pumps/">In a previous post</a>, this blog examined malware used in a financially-motivated incident at a fuel dispensing company, as disclosed in a <a href="https://usa.visa.com/dam/VCOM/global/support-legal/documents/cybercrime-groups-targeting-fuel-dispenser-merchants.pdf">security bulletin by VISA</a>. The bulletin detailed a second incident that is likely attributable to an additional threat actor. Specifically, VISA identified C2 infrastructure, a filename, and additional TTPs that allegedly align with FIN8 activity, as described in public <a href="https://atr-blog.gigamon.com/2019/07/23/abadbabe-8badf00d-discovering-badhatch-and-a-detailed-look-at-fin8s-tooling/">Gigamon</a> and <a href="https://www.root9b.com/content/uploads/2018/10/PoS-Malware-ShellTea-PoSlurp_YARA.pdf">Root9b</a> reporting. These TTPs suggest that the threat actors used a memory scraper referred to as <strong><span style="text-decoration: underline;"><em>PoSlurp.B</em></span></strong> in public reporting to scrape customer credit card data from a targeted device. <br><br>This post examines a PoSlurp.B file identified (through its shellcode loader) by Twitter user <a href="https://twitter.com/just_windex/status/1162118585805758464">@just_windex</a> to provide additional details regarding the malware&#8217;s functionality that were not previously disclosed in open source. This analysis focuses on the final payload of the shellcode loader, although additional information and advice for bringing this file into a debuggable state is available at the end of the post.<br><br>Unlike the previously analyzed file (FrameworkPoS/GratefulPOS), which indiscriminately scraped all processes on a device, PoSlurp.B is designed to scrape the memory of an attacker-specified process. </p>



<span id="more-314"></span>



<p><strong>Analysis</strong></p>



<p style="font-size:12px" class="has-text-align-left">Shellcode Hash:<br>MD5: b54283d17b7c13329943168b898ff07e<br>SHA1: 67a06663b0c8a885d444b8bedb8261b28f050a39<br>SHA256: e78d9a6cd94bd8ec3095a0ecbbc9c4add78d3281d2bf46497164d0406c346395<br><br>Dumped PoSlurp.B Payload (Uploaded to VT for this blog, not from ITW)<br>MD5: 3d5ae56c6746e0b3ed5b15124264a0d2<br>SHA1: f92c886f85928041148d0dcd7c4fb9623b157f94<br>SHA256: d9e442cd69d1f656a3e8cfd0792333a8f0108193e052a4ee2d7f9138a4b253b2<br><br><br><span style="text-decoration: underline;">Initial Checks and Exit Conditions</span><br><br>PoSlurp.B is a 64-bit executable that is expected to be run in memory. When executed, the malware performs two conditional checks:<br><br>   &#8211; The malware must have been loaded into memory <br>         &#8211; In this analysis, the check appears to be conducted by examining the the entry point<br>   &#8211; The malware <em>must</em> identify an environment variable &#8211; &#8220;PRMS&#8221; &#8211; that contains data to direct the workflow<br>         &#8211; Setting this in the system settings did not appear to work. Setting this in a PowerShell injector script did.<br><br><a href="https://atr-blog.gigamon.com/2019/07/23/abadbabe-8badf00d-discovering-badhatch-and-a-detailed-look-at-fin8s-tooling/">A Gigamon report</a> previously described the need for this environment variable and its presence in a PowerShell loader. While this loader is not currently available on VirusTotal, information regarding reconstructing one is available at the end of this blog. The malware uses a stack string to assemble this environment variable name, likely to limit static detection of the string. These first two checks can be seen below. Following these checks, the malware moves to a validation and parsing function (boxed in red in the bottom right of this image) to extract information from this environment variable.</p>



<div class="wp-block-image"><figure class="aligncenter size-large is-resized"><img fetchpriority="high" decoding="async" src="https://norfolkinfosec.com/wp-content/uploads/2019/12/entry_environ-670x1024.png" alt="" class="wp-image-315" width="493" height="753" srcset="https://norfolkinfosec.com/wp-content/uploads/2019/12/entry_environ-670x1024.png 670w, https://norfolkinfosec.com/wp-content/uploads/2019/12/entry_environ-196x300.png 196w, https://norfolkinfosec.com/wp-content/uploads/2019/12/entry_environ-138x210.png 138w, https://norfolkinfosec.com/wp-content/uploads/2019/12/entry_environ.png 679w" sizes="(max-width: 493px) 100vw, 493px" /><figcaption><strong>PRMS Environment Variable Check</strong></figcaption></figure></div>



<p style="font-size:12px" class="has-text-align-left">The parsing function is designed to extract the contents of the environment variable. The function contains nine different references to the ExitProcess Windows API call. Combined with the previous function, the following exit conditions for the malware have been identified:<br><br>&#8211; The malware determines it wasn&#8217;t injected or started properly<br>&#8211; The malware can&#8217;t locate the &#8220;PRMS&#8221; environment variable<br>&#8211; The environment variable doesn&#8217;t contain &#8220;t&#8221; as the first letter of a value in a workflow-specific position<br>&#8211; When run in injection mode, the malware is unable to identify a process specified for injection<br>&#8211; An invalid value is in the workflow parameter location (i.e. not &#8220;i&#8221; &#8220;s&#8221; or &#8220;p&#8221;) <br>&#8211; An incorrect number of arguments have been specified<br>&#8211; The malware runs successfully<br><br>While some of these appear to be anti-analysis checks, this blog assesses that others <em>may</em> be for workflow validation and to prevent errors, crashing, or unexpected events. In particular, there are multiple checks regarding the correct number of parameters being passed to the malware that eventually become redundant, as a final check requires a larger number of parameters than an initial check. There are additional exit conditions that are not yet fully understood.</p>



<div class="wp-block-image"><figure class="aligncenter size-large"><img decoding="async" width="824" height="1024" src="https://norfolkinfosec.com/wp-content/uploads/2019/12/validate_args-824x1024.png" alt="" class="wp-image-316" srcset="https://norfolkinfosec.com/wp-content/uploads/2019/12/validate_args-824x1024.png 824w, https://norfolkinfosec.com/wp-content/uploads/2019/12/validate_args-242x300.png 242w, https://norfolkinfosec.com/wp-content/uploads/2019/12/validate_args-768x954.png 768w, https://norfolkinfosec.com/wp-content/uploads/2019/12/validate_args-169x210.png 169w, https://norfolkinfosec.com/wp-content/uploads/2019/12/validate_args.png 950w" sizes="(max-width: 824px) 100vw, 824px" /><figcaption><strong>Validation and Parsing Function</strong></figcaption></figure></div>



<p style="font-size:12px" class="has-text-align-left"><span style="text-decoration: underline;">Environment Variable and Three Workflows</span><br><br>The environment variable is expected to contain multiple values, delimited by a &#8220;|&#8221; character. The first character specifies which workflow to take, and can be the letter p, s, or i. <br><br>   &#8211; &#8220;p&#8221; scrapes a specified process for credit card data<br>   &#8211; &#8220;i&#8221; injects the malware into a process and creates a thread at the scraping function used by p<br>   &#8211; &#8220;s&#8221; injects the malware into a suspended svchost process and creates a thread at the same scraping function<br><br>The malware ultimately <em>appears</em> to expect more arguments than are necessary in certain cases. For example, if the environment variable were set to:<br><br><em>p|notepad.exe|t|[value]|[value]</em> <br><br>The first three values would be sufficient to validate many of the checks and scrape the &#8220;notepad.exe&#8221; process, although <em>something</em> would need to fill the remaining values to successfully run. It is possible that these additional values may perform further validation checks, which were bypassed for the purpose of this analysis (and which would need to be bypassed if using the environment variables exactly as written in this blog).  <br><br>The malware also treats these arguments differently depending on the mode selected. For example, in &#8220;p&#8221; and &#8220;s&#8221; mode the first argument specified after &#8220;p&#8221; is the process to be scraped. In &#8220;i&#8221; mode, the first argument after &#8220;i&#8221; is the process to be injected, whereas the next argument is the process to be scraped. Thus, using &#8220;i&#8221; mode would require a value such as:<br><br>i|injection_target.exe|process_to_be_scraped.exe|t|[unknown]|[unknown]<br></p>



<div class="wp-block-image"><figure class="aligncenter size-large is-resized"><img decoding="async" src="https://norfolkinfosec.com/wp-content/uploads/2019/12/workflows.png" alt="" class="wp-image-317" width="637" height="633" srcset="https://norfolkinfosec.com/wp-content/uploads/2019/12/workflows.png 850w, https://norfolkinfosec.com/wp-content/uploads/2019/12/workflows-150x150.png 150w, https://norfolkinfosec.com/wp-content/uploads/2019/12/workflows-768x764.png 768w, https://norfolkinfosec.com/wp-content/uploads/2019/12/workflows-210x210.png 210w" sizes="(max-width: 637px) 100vw, 637px" /><figcaption><strong>Malware Workflow Options</strong></figcaption></figure></div>



<p style="font-size:12px" class="has-text-align-left"><span style="text-decoration: underline;">Injection Workflow (&#8220;i&#8221;)</span><br><br>The injection workflow contains two relatively simple functions. <br><br><em>Function One</em><br>&#8211; The malware uses the CreateToolhelp32Snapshot and Process32First/Next APIs to list running processes<br>&#8211; The malware compares each process name to the first process argument in the environment variable<br>&#8211; If no match is found, the malware returns and exits<br><br> <em>Function Two</em><br>&#8211; The malware opens a handle to the targeted process<br>&#8211; The malware uses the VirtualAllocEx and WriteProcessMemory to write itself to the targeted process<br>&#8211; The malware creates a thread at the location of the main scraping loop within this injected process </p>



<div class="wp-block-image"><figure class="aligncenter size-large"><img loading="lazy" decoding="async" width="724" height="1014" src="https://norfolkinfosec.com/wp-content/uploads/2019/12/injection_1.png" alt="" class="wp-image-318" srcset="https://norfolkinfosec.com/wp-content/uploads/2019/12/injection_1.png 724w, https://norfolkinfosec.com/wp-content/uploads/2019/12/injection_1-214x300.png 214w, https://norfolkinfosec.com/wp-content/uploads/2019/12/injection_1-150x210.png 150w" sizes="auto, (max-width: 724px) 100vw, 724px" /><figcaption><strong>First Function (Process Identification) in Injection Workflow</strong></figcaption></figure></div>



<p style="font-size:12px" class="has-text-align-left"><span style="text-decoration: underline;">Svchost Workflow (s)</span><br><br>The svchost workflow also contains two functions.<br><br>First, the malware uses stack strings to assemble &#8220;svchost.exe&#8221; (similar to the &#8220;PRMS&#8221; string creation), likely to avoid static detection of this value. The malware then identifies the system directory via API call and concatenates the svchost.exe process name to this string and spawns this process in a suspended state.<br><br>Second, the malware uses a form of process injection similar to a method described in <a href="https://securityintelligence.com/diving-into-zberps-unconventional-process-injection-technique/">open source reporting as the &#8220;Zberp&#8221; method</a>. The malware uses CreateFileMappingA, MapViewOfFile, and NtMapViewOfSection to inject itself into the suspended svchost process. Finally, the malware uses NtQueApcThread and ResumeThread to run the main scraping loop.<br><br><span style="text-decoration: underline;">Main Scraping Loop</span><br><br>The main scraping loop, which is either called directly through the &#8220;p&#8221; workflow or invoked through the other workflows as a created thread, represents the core of the malware&#8217;s functionality. Similar to the &#8220;i&#8221; routine, the main scraping loop calls a function that enumerates running processes (via CreateToolhelp32Snapshot, Process32First, and Process32Next) to identify a match with a specified target process (right click on the images below and open in a new tab to expand). </p>



<div class="wp-block-image"><figure class="aligncenter size-large"><img loading="lazy" decoding="async" width="484" height="730" src="https://norfolkinfosec.com/wp-content/uploads/2019/12/scrape_tree_1.png" alt="" class="wp-image-320" srcset="https://norfolkinfosec.com/wp-content/uploads/2019/12/scrape_tree_1.png 484w, https://norfolkinfosec.com/wp-content/uploads/2019/12/scrape_tree_1-199x300.png 199w, https://norfolkinfosec.com/wp-content/uploads/2019/12/scrape_tree_1-139x210.png 139w" sizes="auto, (max-width: 484px) 100vw, 484px" /></figure></div>



<div class="wp-block-image"><figure class="aligncenter size-large"><img loading="lazy" decoding="async" width="1024" height="860" src="https://norfolkinfosec.com/wp-content/uploads/2019/12/scrape_tree_2-1-1024x860.png" alt="" class="wp-image-322" srcset="https://norfolkinfosec.com/wp-content/uploads/2019/12/scrape_tree_2-1-1024x860.png 1024w, https://norfolkinfosec.com/wp-content/uploads/2019/12/scrape_tree_2-1-300x252.png 300w, https://norfolkinfosec.com/wp-content/uploads/2019/12/scrape_tree_2-1-768x645.png 768w, https://norfolkinfosec.com/wp-content/uploads/2019/12/scrape_tree_2-1-210x176.png 210w, https://norfolkinfosec.com/wp-content/uploads/2019/12/scrape_tree_2-1.png 1360w" sizes="auto, (max-width: 980px) 100vw, 980px" /></figure></div>



<p style="font-size:12px" class="has-text-align-left">If a process name is found that matches the target name, the malware calls the function boxed in red in the image above. The malware uses the VirtualQueryEx and ReadProcessMemory APIs to read the process, and then subsequently calls the actual data parsing routine. The malware looks for data formatted similarly to magnetic strip information. If found, the malware calls an additional function (referenced in five locations) to encode and write this data to a file located at &#8220;c:\users\public\music\wmsetup.tmp&#8221; and then repeats the loop.<br><br>Once the scraping is completed (or if the scraping fails), the malware can perform two additional cleanup functions before exiting. First, the malware deletes a registry entry located at Software\Microsoft\CurrentVersion\Run named PSMon. The malware can also delete a key named ODBC2 under Software\*. <br><br>The purpose of these two keys is currently unknown. This blog speculates that both may be used as components of persistence mechanisms (perhaps with the former pointing to a script and the latter pointing to second-stage data stored in the registry). If this is the case, they may be named to mimic legitimate processes expected on these devices, such as the Unix Process Monitor tool and a SQL Database component (ODBC). It is also possible &#8211; but less likely &#8211; that this activity is designed to terminate these legitimate processes. <br><br><span style="text-decoration: underline;">Additional Thoughts</span><br><br>While there are still some information gaps (particularly regarding the installer for this malware), this point of sale scraper represents a very different approach from the previously examined incident. Whereas that file scraped the memory of every process on a system, PoSlurp.B is designed for a more targeted approach. This suggests that the attackers conducted sufficient reconnaissance within the environment to determine where credit card data was likely to be held (or knew this information prior to the intrusion).  </p>



<p><strong>Analysis Tips</strong></p>



<p style="font-size:12px" class="has-text-align-left">Analyzing this file proved particularly challenging, given the high number of conditional exits and the need for the malware to successfully parse an environment variable. Ultimately, I can recommend the following approach:<br><br>The hash 82953a819daff3a81e678c75ce7736b3 contains a PowerShell byte array loader that I found during a search for other FIN8 malware (whether or not it is actually affiliated with this group, I have not checked). <br><br> &#8211; Take the shellcode, open it in a hex editor (e.g. HxD), and copy the hex into a text editor (Notepad++)<br> &#8211; Replace the spaces from the hex bytes with a &#8220;,0x&#8221;<br> &#8211; Add a leading &#8220;0x&#8221; to the first bytes<br> &#8211; Add an additional two bytes, 0xEB and 0xFE, to the start of the file. This is an infinite loop. <br> &#8211; Replace the payload bytes in the hash above with these bytes<br> &#8211; Add the environment variable <br> &#8211; Run the PowerShell file<br> &#8211; In x64dbg, attach to the PowerShell file<br> &#8211; Resume the program<br> &#8211; Look in the memory map for the executable section of memory<br> &#8211; Set a breakpoint at this section<br> &#8211; NOP the infinite jump instruction<br> &#8211; Begin debugging<br><br>The idea here is to get PowerShell to load the shellcode, but to do so in a way in which is doesn&#8217;t execute. EB FE is a shorthand for an infinite loop in which the malware jumps to the jumping instruction. The malware will run this indefinitely, until you manually place a breakpoint there. Programs such as jmp2it will do this automatically, but I ran into issues attaching to it in a 64-bit debugger. A few other creative approaches (side-loading in place of Chinese APT shellcode, injecting it into other processes) came up short. They also didn&#8217;t allow the malware to recognize an environment variable. <br><br>For simply statically analyzing the shellcode and its subsequent payload, I&#8217;d recommend <a href="http://www.hexacorn.com/blog/2015/12/10/converting-shellcode-to-portable-executable-32-and-64-bit/">Adam&#8217;s approach.</a> It looks like a lot of steps, but it only takes a few minutes, and you can build a 64-bit executable that&#8217;s pretty easy to directly debug (and subsequently dump a payload from). </p>



<p></p>



<p></p>
			</div><!-- .entry-content -->

	<footer class="entry-footer">
		<span class="update">Updated: <a href="https://norfolkinfosec.com/fuel-pumps-ii-poslurp-b/" rel="bookmark"><time class="published updated" datetime="2019-12-31T17:40:35+00:00">December 31, 2019</time></a></span><br><span class="tags-links">Tags: <a href="https://norfolkinfosec.com/tag/fin8/" rel="tag">FIN8</a>, <a href="https://norfolkinfosec.com/tag/poslurp/" rel="tag">PoSlurp</a>, <a href="https://norfolkinfosec.com/tag/poslurp-b/" rel="tag">PoSlurp.B</a></span>	</footer><!-- .entry-footer -->
</article><!-- #post-## -->
						
	<nav class="navigation post-navigation" aria-label="Post navigation">
		<h2 class="screen-reader-text">Post navigation</h2>
		<div class="nav-links"><div class="nav-previous"><a href="https://norfolkinfosec.com/pos-malware-used-at-fuel-pumps/" rel="prev">Previous post</a></div><div class="nav-next"><a href="https://norfolkinfosec.com/a-new-look-at-old-dragonfly-malware-goodor/" rel="next">Next post</a></div></div>
	</nav>
			
		
		</main><!-- #main -->
	</div><!-- #primary -->


<div id="secondary" class="widget-area egrid  grid-15 tablet-grid-15 mobile-grid-100 pull-85 tablet-pull-85" role="complementary">
</div><!-- #secondary -->

	</div><!-- #content -->

	<footer id="colophon" class="site-footer grid-container" role="contentinfo">
		<div class="grid-100 tablet-grid-100 mobile-grid-100"><div class="sepline2"></div></div>
		<div class="egrid  grid-70 tablet-grid-70 mobile-grid-100" id="footer-widget-copyright">
					</div>
		<div class=" grid-30 tablet-grid-30 mobile-grid-100">
			<a id="designer" class="alignright" href="https://www.coralthemes.com/product/coral-dark-wordpress-theme/">Free dark wordpress theme</a>
		</div>
		
	</footer><!-- #colophon -->
</div><!-- #page -->

<script type="text/javascript" src="https://norfolkinfosec.com/wp-content/themes/coral-dark/js/jquery.smartmenus.min.js?ver=0.9.7" id="smartmenus-js"></script>
<script type="text/javascript" src="https://norfolkinfosec.com/wp-content/themes/coral-dark/js/skip-link-focus-fix.js?ver=20130115" id="coral-dark-skip-link-focus-fix-js"></script>
<script type="text/javascript" id="coral-dark-script-js-extra">
/* <![CDATA[ */
var nivoSliderParams = {"effect":"fade","animspeed":"500","pausetime":"5000"};
/* ]]> */
</script>
<script type="text/javascript" src="https://norfolkinfosec.com/wp-content/themes/coral-dark/js/functions.js?ver=20160427" id="coral-dark-script-js"></script>

</body>
</html>
