<!DOCTYPE html>
<html lang="en-US" class="no-js no-svg">

	<head>
	    <meta charset="UTF-8">
	    <meta name="viewport" content="width=device-width, initial-scale=1">
	    <link rel="profile" href="https://gmpg.org/xfn/11" />
	    <meta name='robots' content='index, follow, max-image-preview:large, max-snippet:-1, max-video-preview:-1' />

	<!-- This site is optimized with the Yoast SEO plugin v23.6 - https://yoast.com/wordpress/plugins/seo/ -->
	<title>GuptiMiner: Hijacking Antivirus Updates for Distributing Backdoors and Casual Mining - Avast Threat Labs</title>
	<link rel="canonical" href="https://decoded.avast.io/janrubin/guptiminer-hijacking-antivirus-updates-for-distributing-backdoors-and-casual-mining/" />
	<meta property="og:locale" content="en_US" />
	<meta property="og:type" content="article" />
	<meta property="og:title" content="GuptiMiner: Hijacking Antivirus Updates for Distributing Backdoors and Casual Mining - Avast Threat Labs" />
	<meta property="og:description" content="Avast discovered and analyzed GuptiMiner, a malware campaign hijacking an eScan antivirus update mechanism to distribute backdoors and coinminers." />
	<meta property="og:url" content="https://decoded.avast.io/janrubin/guptiminer-hijacking-antivirus-updates-for-distributing-backdoors-and-casual-mining/" />
	<meta property="og:site_name" content="Avast Threat Labs" />
	<meta property="article:published_time" content="2024-04-23T09:00:00+00:00" />
	<meta property="article:modified_time" content="2024-04-23T08:54:25+00:00" />
	<meta property="og:image" content="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/AdobeStock_679731378-scaled.jpeg" />
	<meta property="og:image:width" content="2560" />
	<meta property="og:image:height" content="1435" />
	<meta property="og:image:type" content="image/jpeg" />
	<meta name="author" content="Jan Rubín" />
	<meta name="twitter:card" content="summary_large_image" />
	<meta name="twitter:creator" content="@AvastThreatLabs" />
	<meta name="twitter:site" content="@AvastThreatLabs" />
	<meta name="twitter:label1" content="Written by" />
	<meta name="twitter:data1" content="Jan Rubín and Milánek" />
	<meta name="twitter:label2" content="Est. reading time" />
	<meta name="twitter:data2" content="47 minutes" />
	<script type="application/ld+json" class="yoast-schema-graph">{"@context":"https://schema.org","@graph":[{"@type":"Article","@id":"https://decoded.avast.io/janrubin/guptiminer-hijacking-antivirus-updates-for-distributing-backdoors-and-casual-mining/#article","isPartOf":{"@id":"https://decoded.avast.io/janrubin/guptiminer-hijacking-antivirus-updates-for-distributing-backdoors-and-casual-mining/"},"author":{"name":"Jan Rubín","@id":"https://decoded.avast.io/#/schema/person/0db014fc228d034af77efb88d96d50ab"},"headline":"GuptiMiner: Hijacking Antivirus Updates for Distributing Backdoors and Casual Mining","datePublished":"2024-04-23T09:00:00+00:00","dateModified":"2024-04-23T08:54:25+00:00","mainEntityOfPage":{"@id":"https://decoded.avast.io/janrubin/guptiminer-hijacking-antivirus-updates-for-distributing-backdoors-and-casual-mining/"},"wordCount":9894,"publisher":{"@id":"https://decoded.avast.io/#organization"},"image":{"@id":"https://decoded.avast.io/janrubin/guptiminer-hijacking-antivirus-updates-for-distributing-backdoors-and-casual-mining/#primaryimage"},"thumbnailUrl":"https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/AdobeStock_679731378-scaled.jpeg","keywords":["antivirus","backdoor","cryptomining","Kimsuky","malware","mitm","xmrig"],"articleSection":["PC"],"inLanguage":"en-US"},{"@type":"WebPage","@id":"https://decoded.avast.io/janrubin/guptiminer-hijacking-antivirus-updates-for-distributing-backdoors-and-casual-mining/","url":"https://decoded.avast.io/janrubin/guptiminer-hijacking-antivirus-updates-for-distributing-backdoors-and-casual-mining/","name":"GuptiMiner: Hijacking Antivirus Updates for Distributing Backdoors and Casual Mining - Avast Threat Labs","isPartOf":{"@id":"https://decoded.avast.io/#website"},"primaryImageOfPage":{"@id":"https://decoded.avast.io/janrubin/guptiminer-hijacking-antivirus-updates-for-distributing-backdoors-and-casual-mining/#primaryimage"},"image":{"@id":"https://decoded.avast.io/janrubin/guptiminer-hijacking-antivirus-updates-for-distributing-backdoors-and-casual-mining/#primaryimage"},"thumbnailUrl":"https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/AdobeStock_679731378-scaled.jpeg","datePublished":"2024-04-23T09:00:00+00:00","dateModified":"2024-04-23T08:54:25+00:00","breadcrumb":{"@id":"https://decoded.avast.io/janrubin/guptiminer-hijacking-antivirus-updates-for-distributing-backdoors-and-casual-mining/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https://decoded.avast.io/janrubin/guptiminer-hijacking-antivirus-updates-for-distributing-backdoors-and-casual-mining/"]}]},{"@type":"ImageObject","inLanguage":"en-US","@id":"https://decoded.avast.io/janrubin/guptiminer-hijacking-antivirus-updates-for-distributing-backdoors-and-casual-mining/#primaryimage","url":"https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/AdobeStock_679731378-scaled.jpeg","contentUrl":"https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/AdobeStock_679731378-scaled.jpeg","width":2560,"height":1435,"caption":"the surreal world of the \"Enigmatic Marionette,\" where a puppet master, both captivating and terrifying, controls the delicate strings of a mesmerizing doll. This image explores the duality of control and vulnerability, creating an atmosphere of mystery and unease."},{"@type":"BreadcrumbList","@id":"https://decoded.avast.io/janrubin/guptiminer-hijacking-antivirus-updates-for-distributing-backdoors-and-casual-mining/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https://decoded.avast.io/"},{"@type":"ListItem","position":2,"name":"GuptiMiner: Hijacking Antivirus Updates for Distributing Backdoors and Casual Mining"}]},{"@type":"WebSite","@id":"https://decoded.avast.io/#website","url":"https://decoded.avast.io/","name":"Avast Threat Labs","description":"Uncovering Tactics, Techniques and Procedures of malicious actors","publisher":{"@id":"https://decoded.avast.io/#organization"},"potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https://decoded.avast.io/?s={search_term_string}"},"query-input":{"@type":"PropertyValueSpecification","valueRequired":true,"valueName":"search_term_string"}}],"inLanguage":"en-US"},{"@type":"Organization","@id":"https://decoded.avast.io/#organization","name":"Avast","url":"https://decoded.avast.io/","logo":{"@type":"ImageObject","inLanguage":"en-US","@id":"https://decoded.avast.io/#/schema/logo/image/","url":"","contentUrl":"","caption":"Avast"},"image":{"@id":"https://decoded.avast.io/#/schema/logo/image/"},"sameAs":["https://x.com/AvastThreatLabs"]},{"@type":"Person","@id":"https://decoded.avast.io/#/schema/person/0db014fc228d034af77efb88d96d50ab","name":"Jan Rubín","image":{"@type":"ImageObject","inLanguage":"en-US","@id":"https://decoded.avast.io/#/schema/person/image/","url":"https://secure.gravatar.com/avatar/5f5c4a76a73eb4a87cd168c4cb824f9e?s=96&d=mm&r=g","contentUrl":"https://secure.gravatar.com/avatar/5f5c4a76a73eb4a87cd168c4cb824f9e?s=96&d=mm&r=g","caption":"Jan Rubín"},"url":""}]}</script>
	<!-- / Yoast SEO plugin. -->


<link rel='dns-prefetch' href='//decoded.avast.io' />
<link rel='dns-prefetch' href='//kit.fontawesome.com' />
<link rel='dns-prefetch' href='//fonts.googleapis.com' />
<link rel="alternate" type="application/rss+xml" title="Avast Threat Labs &raquo; Feed" href="https://decoded.avast.io/feed/" />
<link rel="alternate" type="application/rss+xml" title="Avast Threat Labs &raquo; Comments Feed" href="https://decoded.avast.io/comments/feed/" />
		<!-- This site uses the Google Analytics by MonsterInsights plugin v9.1.1 - Using Analytics tracking - https://www.monsterinsights.com/ -->
							<script src="//www.googletagmanager.com/gtag/js?id=G-GSVBRGE9D6"  data-cfasync="false" data-wpfc-render="false" type="text/javascript" async></script>
			<script data-cfasync="false" data-wpfc-render="false" type="text/javascript">
				var mi_version = '9.1.1';
				var mi_track_user = true;
				var mi_no_track_reason = '';
								var MonsterInsightsDefaultLocations = {"page_location":"https:\/\/decoded.avast.io\/janrubin\/guptiminer-hijacking-antivirus-updates-for-distributing-backdoors-and-casual-mining\/"};
				if ( typeof MonsterInsightsPrivacyGuardFilter === 'function' ) {
					var MonsterInsightsLocations = (typeof MonsterInsightsExcludeQuery === 'object') ? MonsterInsightsPrivacyGuardFilter( MonsterInsightsExcludeQuery ) : MonsterInsightsPrivacyGuardFilter( MonsterInsightsDefaultLocations );
				} else {
					var MonsterInsightsLocations = (typeof MonsterInsightsExcludeQuery === 'object') ? MonsterInsightsExcludeQuery : MonsterInsightsDefaultLocations;
				}

								var disableStrs = [
										'ga-disable-G-GSVBRGE9D6',
									];

				/* Function to detect opted out users */
				function __gtagTrackerIsOptedOut() {
					for (var index = 0; index < disableStrs.length; index++) {
						if (document.cookie.indexOf(disableStrs[index] + '=true') > -1) {
							return true;
						}
					}

					return false;
				}

				/* Disable tracking if the opt-out cookie exists. */
				if (__gtagTrackerIsOptedOut()) {
					for (var index = 0; index < disableStrs.length; index++) {
						window[disableStrs[index]] = true;
					}
				}

				/* Opt-out function */
				function __gtagTrackerOptout() {
					for (var index = 0; index < disableStrs.length; index++) {
						document.cookie = disableStrs[index] + '=true; expires=Thu, 31 Dec 2099 23:59:59 UTC; path=/';
						window[disableStrs[index]] = true;
					}
				}

				if ('undefined' === typeof gaOptout) {
					function gaOptout() {
						__gtagTrackerOptout();
					}
				}
								window.dataLayer = window.dataLayer || [];

				window.MonsterInsightsDualTracker = {
					helpers: {},
					trackers: {},
				};
				if (mi_track_user) {
					function __gtagDataLayer() {
						dataLayer.push(arguments);
					}

					function __gtagTracker(type, name, parameters) {
						if (!parameters) {
							parameters = {};
						}

						if (parameters.send_to) {
							__gtagDataLayer.apply(null, arguments);
							return;
						}

						if (type === 'event') {
														parameters.send_to = monsterinsights_frontend.v4_id;
							var hookName = name;
							if (typeof parameters['event_category'] !== 'undefined') {
								hookName = parameters['event_category'] + ':' + name;
							}

							if (typeof MonsterInsightsDualTracker.trackers[hookName] !== 'undefined') {
								MonsterInsightsDualTracker.trackers[hookName](parameters);
							} else {
								__gtagDataLayer('event', name, parameters);
							}
							
						} else {
							__gtagDataLayer.apply(null, arguments);
						}
					}

					__gtagTracker('js', new Date());
					__gtagTracker('set', {
						'developer_id.dZGIzZG': true,
											});
					if ( MonsterInsightsLocations.page_location ) {
						__gtagTracker('set', MonsterInsightsLocations);
					}
										__gtagTracker('config', 'G-GSVBRGE9D6', {"forceSSL":"true","link_attribution":"true"} );
															window.gtag = __gtagTracker;										(function () {
						/* https://developers.google.com/analytics/devguides/collection/analyticsjs/ */
						/* ga and __gaTracker compatibility shim. */
						var noopfn = function () {
							return null;
						};
						var newtracker = function () {
							return new Tracker();
						};
						var Tracker = function () {
							return null;
						};
						var p = Tracker.prototype;
						p.get = noopfn;
						p.set = noopfn;
						p.send = function () {
							var args = Array.prototype.slice.call(arguments);
							args.unshift('send');
							__gaTracker.apply(null, args);
						};
						var __gaTracker = function () {
							var len = arguments.length;
							if (len === 0) {
								return;
							}
							var f = arguments[len - 1];
							if (typeof f !== 'object' || f === null || typeof f.hitCallback !== 'function') {
								if ('send' === arguments[0]) {
									var hitConverted, hitObject = false, action;
									if ('event' === arguments[1]) {
										if ('undefined' !== typeof arguments[3]) {
											hitObject = {
												'eventAction': arguments[3],
												'eventCategory': arguments[2],
												'eventLabel': arguments[4],
												'value': arguments[5] ? arguments[5] : 1,
											}
										}
									}
									if ('pageview' === arguments[1]) {
										if ('undefined' !== typeof arguments[2]) {
											hitObject = {
												'eventAction': 'page_view',
												'page_path': arguments[2],
											}
										}
									}
									if (typeof arguments[2] === 'object') {
										hitObject = arguments[2];
									}
									if (typeof arguments[5] === 'object') {
										Object.assign(hitObject, arguments[5]);
									}
									if ('undefined' !== typeof arguments[1].hitType) {
										hitObject = arguments[1];
										if ('pageview' === hitObject.hitType) {
											hitObject.eventAction = 'page_view';
										}
									}
									if (hitObject) {
										action = 'timing' === arguments[1].hitType ? 'timing_complete' : hitObject.eventAction;
										hitConverted = mapArgs(hitObject);
										__gtagTracker('event', action, hitConverted);
									}
								}
								return;
							}

							function mapArgs(args) {
								var arg, hit = {};
								var gaMap = {
									'eventCategory': 'event_category',
									'eventAction': 'event_action',
									'eventLabel': 'event_label',
									'eventValue': 'event_value',
									'nonInteraction': 'non_interaction',
									'timingCategory': 'event_category',
									'timingVar': 'name',
									'timingValue': 'value',
									'timingLabel': 'event_label',
									'page': 'page_path',
									'location': 'page_location',
									'title': 'page_title',
									'referrer' : 'page_referrer',
								};
								for (arg in args) {
																		if (!(!args.hasOwnProperty(arg) || !gaMap.hasOwnProperty(arg))) {
										hit[gaMap[arg]] = args[arg];
									} else {
										hit[arg] = args[arg];
									}
								}
								return hit;
							}

							try {
								f.hitCallback();
							} catch (ex) {
							}
						};
						__gaTracker.create = newtracker;
						__gaTracker.getByName = newtracker;
						__gaTracker.getAll = function () {
							return [];
						};
						__gaTracker.remove = noopfn;
						__gaTracker.loaded = true;
						window['__gaTracker'] = __gaTracker;
					})();
									} else {
										console.log("");
					(function () {
						function __gtagTracker() {
							return null;
						}

						window['__gtagTracker'] = __gtagTracker;
						window['gtag'] = __gtagTracker;
					})();
									}
			</script>
				<!-- / Google Analytics by MonsterInsights -->
		<script type="text/javascript">
/* <![CDATA[ */
window._wpemojiSettings = {"baseUrl":"https:\/\/s.w.org\/images\/core\/emoji\/15.0.3\/72x72\/","ext":".png","svgUrl":"https:\/\/s.w.org\/images\/core\/emoji\/15.0.3\/svg\/","svgExt":".svg","source":{"concatemoji":"https:\/\/decoded.avast.io\/wp-includes\/js\/wp-emoji-release.min.js?ver=6.6.2"}};
/*! This file is auto-generated */
!function(i,n){var o,s,e;function c(e){try{var t={supportTests:e,timestamp:(new Date).valueOf()};sessionStorage.setItem(o,JSON.stringify(t))}catch(e){}}function p(e,t,n){e.clearRect(0,0,e.canvas.width,e.canvas.height),e.fillText(t,0,0);var t=new Uint32Array(e.getImageData(0,0,e.canvas.width,e.canvas.height).data),r=(e.clearRect(0,0,e.canvas.width,e.canvas.height),e.fillText(n,0,0),new Uint32Array(e.getImageData(0,0,e.canvas.width,e.canvas.height).data));return t.every(function(e,t){return e===r[t]})}function u(e,t,n){switch(t){case"flag":return n(e,"\ud83c\udff3\ufe0f\u200d\u26a7\ufe0f","\ud83c\udff3\ufe0f\u200b\u26a7\ufe0f")?!1:!n(e,"\ud83c\uddfa\ud83c\uddf3","\ud83c\uddfa\u200b\ud83c\uddf3")&&!n(e,"\ud83c\udff4\udb40\udc67\udb40\udc62\udb40\udc65\udb40\udc6e\udb40\udc67\udb40\udc7f","\ud83c\udff4\u200b\udb40\udc67\u200b\udb40\udc62\u200b\udb40\udc65\u200b\udb40\udc6e\u200b\udb40\udc67\u200b\udb40\udc7f");case"emoji":return!n(e,"\ud83d\udc26\u200d\u2b1b","\ud83d\udc26\u200b\u2b1b")}return!1}function f(e,t,n){var r="undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope?new OffscreenCanvas(300,150):i.createElement("canvas"),a=r.getContext("2d",{willReadFrequently:!0}),o=(a.textBaseline="top",a.font="600 32px Arial",{});return e.forEach(function(e){o[e]=t(a,e,n)}),o}function t(e){var t=i.createElement("script");t.src=e,t.defer=!0,i.head.appendChild(t)}"undefined"!=typeof Promise&&(o="wpEmojiSettingsSupports",s=["flag","emoji"],n.supports={everything:!0,everythingExceptFlag:!0},e=new Promise(function(e){i.addEventListener("DOMContentLoaded",e,{once:!0})}),new Promise(function(t){var n=function(){try{var e=JSON.parse(sessionStorage.getItem(o));if("object"==typeof e&&"number"==typeof e.timestamp&&(new Date).valueOf()<e.timestamp+604800&&"object"==typeof e.supportTests)return e.supportTests}catch(e){}return null}();if(!n){if("undefined"!=typeof Worker&&"undefined"!=typeof OffscreenCanvas&&"undefined"!=typeof URL&&URL.createObjectURL&&"undefined"!=typeof Blob)try{var e="postMessage("+f.toString()+"("+[JSON.stringify(s),u.toString(),p.toString()].join(",")+"));",r=new Blob([e],{type:"text/javascript"}),a=new Worker(URL.createObjectURL(r),{name:"wpTestEmojiSupports"});return void(a.onmessage=function(e){c(n=e.data),a.terminate(),t(n)})}catch(e){}c(n=f(s,u,p))}t(n)}).then(function(e){for(var t in e)n.supports[t]=e[t],n.supports.everything=n.supports.everything&&n.supports[t],"flag"!==t&&(n.supports.everythingExceptFlag=n.supports.everythingExceptFlag&&n.supports[t]);n.supports.everythingExceptFlag=n.supports.everythingExceptFlag&&!n.supports.flag,n.DOMReady=!1,n.readyCallback=function(){n.DOMReady=!0}}).then(function(){return e}).then(function(){var e;n.supports.everything||(n.readyCallback(),(e=n.source||{}).concatemoji?t(e.concatemoji):e.wpemoji&&e.twemoji&&(t(e.twemoji),t(e.wpemoji)))}))}((window,document),window._wpemojiSettings);
/* ]]> */
</script>
<style id='wp-emoji-styles-inline-css' type='text/css'>

	img.wp-smiley, img.emoji {
		display: inline !important;
		border: none !important;
		box-shadow: none !important;
		height: 1em !important;
		width: 1em !important;
		margin: 0 0.07em !important;
		vertical-align: -0.1em !important;
		background: none !important;
		padding: 0 !important;
	}
</style>
<link rel='stylesheet' id='wp-block-library-css' href='https://decoded.avast.io/wp-includes/css/dist/block-library/style.min.css?ver=6.6.2' type='text/css' media='all' />
<link rel='stylesheet' id='syntax-highlighting-code-block-theme-css' href='https://decoded.avast.io/wp-content/plugins/syntax-highlighting-code-block/vendor/scrivo/highlight-php/styles/default.css?ver=1.5.0' type='text/css' media='all' />
<style id='syntax-highlighting-code-block-inline-css' type='text/css'>
.wp-block-code {
	border: 0;
	padding: 0;
	-webkit-text-size-adjust: 100%;
	text-size-adjust: 100%;
}

.wp-block-code > span {
	display: block;
	overflow: auto;
}

.shcb-language {
	border: 0;
	clip: rect(1px, 1px, 1px, 1px);
	-webkit-clip-path: inset(50%);
	clip-path: inset(50%);
	height: 1px;
	margin: -1px;
	overflow: hidden;
	padding: 0;
	position: absolute;
	width: 1px;
	word-wrap: normal;
	word-break: normal;
}

.hljs {
	box-sizing: border-box;
}

.hljs.shcb-code-table {
	display: table;
	width: 100%;
}

.hljs.shcb-code-table > .shcb-loc {
	color: inherit;
	display: table-row;
	width: 100%;
}

.hljs.shcb-code-table .shcb-loc > span {
	display: table-cell;
}

.wp-block-code code.hljs:not(.shcb-wrap-lines) {
	white-space: pre;
}

.wp-block-code code.hljs.shcb-wrap-lines {
	white-space: pre-wrap;
}

.hljs.shcb-line-numbers {
	border-spacing: 0;
	counter-reset: line;
}

.hljs.shcb-line-numbers > .shcb-loc {
	counter-increment: line;
}

.hljs.shcb-line-numbers .shcb-loc > span {
	padding-left: 0.75em;
}

.hljs.shcb-line-numbers .shcb-loc::before {
	border-right: 1px solid #ddd;
	content: counter(line);
	display: table-cell;
	padding: 0 0.75em;
	text-align: right;
	-webkit-user-select: none;
	-moz-user-select: none;
	-ms-user-select: none;
	user-select: none;
	white-space: nowrap;
	width: 1%;
}

.hljs > mark.shcb-loc { background-color: #ddf6ff; }
</style>
<style id='classic-theme-styles-inline-css' type='text/css'>
/*! This file is auto-generated */
.wp-block-button__link{color:#fff;background-color:#32373c;border-radius:9999px;box-shadow:none;text-decoration:none;padding:calc(.667em + 2px) calc(1.333em + 2px);font-size:1.125em}.wp-block-file__button{background:#32373c;color:#fff;text-decoration:none}
</style>
<style id='global-styles-inline-css' type='text/css'>
:root{--wp--preset--aspect-ratio--square: 1;--wp--preset--aspect-ratio--4-3: 4/3;--wp--preset--aspect-ratio--3-4: 3/4;--wp--preset--aspect-ratio--3-2: 3/2;--wp--preset--aspect-ratio--2-3: 2/3;--wp--preset--aspect-ratio--16-9: 16/9;--wp--preset--aspect-ratio--9-16: 9/16;--wp--preset--color--black: #000000;--wp--preset--color--cyan-bluish-gray: #abb8c3;--wp--preset--color--white: #ffffff;--wp--preset--color--pale-pink: #f78da7;--wp--preset--color--vivid-red: #cf2e2e;--wp--preset--color--luminous-vivid-orange: #ff6900;--wp--preset--color--luminous-vivid-amber: #fcb900;--wp--preset--color--light-green-cyan: #7bdcb5;--wp--preset--color--vivid-green-cyan: #00d084;--wp--preset--color--pale-cyan-blue: #8ed1fc;--wp--preset--color--vivid-cyan-blue: #0693e3;--wp--preset--color--vivid-purple: #9b51e0;--wp--preset--color--johannes-acc: #ff7900;--wp--preset--color--johannes-meta: #ffffff;--wp--preset--color--johannes-bg: #1c1c1c;--wp--preset--color--johannes-bg-alt-1: #252525;--wp--preset--color--johannes-bg-alt-2: #333333;--wp--preset--gradient--vivid-cyan-blue-to-vivid-purple: linear-gradient(135deg,rgba(6,147,227,1) 0%,rgb(155,81,224) 100%);--wp--preset--gradient--light-green-cyan-to-vivid-green-cyan: linear-gradient(135deg,rgb(122,220,180) 0%,rgb(0,208,130) 100%);--wp--preset--gradient--luminous-vivid-amber-to-luminous-vivid-orange: linear-gradient(135deg,rgba(252,185,0,1) 0%,rgba(255,105,0,1) 100%);--wp--preset--gradient--luminous-vivid-orange-to-vivid-red: linear-gradient(135deg,rgba(255,105,0,1) 0%,rgb(207,46,46) 100%);--wp--preset--gradient--very-light-gray-to-cyan-bluish-gray: linear-gradient(135deg,rgb(238,238,238) 0%,rgb(169,184,195) 100%);--wp--preset--gradient--cool-to-warm-spectrum: linear-gradient(135deg,rgb(74,234,220) 0%,rgb(151,120,209) 20%,rgb(207,42,186) 40%,rgb(238,44,130) 60%,rgb(251,105,98) 80%,rgb(254,248,76) 100%);--wp--preset--gradient--blush-light-purple: linear-gradient(135deg,rgb(255,206,236) 0%,rgb(152,150,240) 100%);--wp--preset--gradient--blush-bordeaux: linear-gradient(135deg,rgb(254,205,165) 0%,rgb(254,45,45) 50%,rgb(107,0,62) 100%);--wp--preset--gradient--luminous-dusk: linear-gradient(135deg,rgb(255,203,112) 0%,rgb(199,81,192) 50%,rgb(65,88,208) 100%);--wp--preset--gradient--pale-ocean: linear-gradient(135deg,rgb(255,245,203) 0%,rgb(182,227,212) 50%,rgb(51,167,181) 100%);--wp--preset--gradient--electric-grass: linear-gradient(135deg,rgb(202,248,128) 0%,rgb(113,206,126) 100%);--wp--preset--gradient--midnight: linear-gradient(135deg,rgb(2,3,129) 0%,rgb(40,116,252) 100%);--wp--preset--font-size--small: 12.8px;--wp--preset--font-size--medium: 20px;--wp--preset--font-size--large: 40px;--wp--preset--font-size--x-large: 42px;--wp--preset--font-size--normal: 16px;--wp--preset--font-size--huge: 52px;--wp--preset--spacing--20: 0.44rem;--wp--preset--spacing--30: 0.67rem;--wp--preset--spacing--40: 1rem;--wp--preset--spacing--50: 1.5rem;--wp--preset--spacing--60: 2.25rem;--wp--preset--spacing--70: 3.38rem;--wp--preset--spacing--80: 5.06rem;--wp--preset--shadow--natural: 6px 6px 9px rgba(0, 0, 0, 0.2);--wp--preset--shadow--deep: 12px 12px 50px rgba(0, 0, 0, 0.4);--wp--preset--shadow--sharp: 6px 6px 0px rgba(0, 0, 0, 0.2);--wp--preset--shadow--outlined: 6px 6px 0px -3px rgba(255, 255, 255, 1), 6px 6px rgba(0, 0, 0, 1);--wp--preset--shadow--crisp: 6px 6px 0px rgba(0, 0, 0, 1);}:where(.is-layout-flex){gap: 0.5em;}:where(.is-layout-grid){gap: 0.5em;}body .is-layout-flex{display: flex;}.is-layout-flex{flex-wrap: wrap;align-items: center;}.is-layout-flex > :is(*, div){margin: 0;}body .is-layout-grid{display: grid;}.is-layout-grid > :is(*, div){margin: 0;}:where(.wp-block-columns.is-layout-flex){gap: 2em;}:where(.wp-block-columns.is-layout-grid){gap: 2em;}:where(.wp-block-post-template.is-layout-flex){gap: 1.25em;}:where(.wp-block-post-template.is-layout-grid){gap: 1.25em;}.has-black-color{color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-color{color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-color{color: var(--wp--preset--color--white) !important;}.has-pale-pink-color{color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-color{color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-color{color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-color{color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-color{color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-color{color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-color{color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-color{color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-color{color: var(--wp--preset--color--vivid-purple) !important;}.has-black-background-color{background-color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-background-color{background-color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-background-color{background-color: var(--wp--preset--color--white) !important;}.has-pale-pink-background-color{background-color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-background-color{background-color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-background-color{background-color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-background-color{background-color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-background-color{background-color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-background-color{background-color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-background-color{background-color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-background-color{background-color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-background-color{background-color: var(--wp--preset--color--vivid-purple) !important;}.has-black-border-color{border-color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-border-color{border-color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-border-color{border-color: var(--wp--preset--color--white) !important;}.has-pale-pink-border-color{border-color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-border-color{border-color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-border-color{border-color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-border-color{border-color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-border-color{border-color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-border-color{border-color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-border-color{border-color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-border-color{border-color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-border-color{border-color: var(--wp--preset--color--vivid-purple) !important;}.has-vivid-cyan-blue-to-vivid-purple-gradient-background{background: var(--wp--preset--gradient--vivid-cyan-blue-to-vivid-purple) !important;}.has-light-green-cyan-to-vivid-green-cyan-gradient-background{background: var(--wp--preset--gradient--light-green-cyan-to-vivid-green-cyan) !important;}.has-luminous-vivid-amber-to-luminous-vivid-orange-gradient-background{background: var(--wp--preset--gradient--luminous-vivid-amber-to-luminous-vivid-orange) !important;}.has-luminous-vivid-orange-to-vivid-red-gradient-background{background: var(--wp--preset--gradient--luminous-vivid-orange-to-vivid-red) !important;}.has-very-light-gray-to-cyan-bluish-gray-gradient-background{background: var(--wp--preset--gradient--very-light-gray-to-cyan-bluish-gray) !important;}.has-cool-to-warm-spectrum-gradient-background{background: var(--wp--preset--gradient--cool-to-warm-spectrum) !important;}.has-blush-light-purple-gradient-background{background: var(--wp--preset--gradient--blush-light-purple) !important;}.has-blush-bordeaux-gradient-background{background: var(--wp--preset--gradient--blush-bordeaux) !important;}.has-luminous-dusk-gradient-background{background: var(--wp--preset--gradient--luminous-dusk) !important;}.has-pale-ocean-gradient-background{background: var(--wp--preset--gradient--pale-ocean) !important;}.has-electric-grass-gradient-background{background: var(--wp--preset--gradient--electric-grass) !important;}.has-midnight-gradient-background{background: var(--wp--preset--gradient--midnight) !important;}.has-small-font-size{font-size: var(--wp--preset--font-size--small) !important;}.has-medium-font-size{font-size: var(--wp--preset--font-size--medium) !important;}.has-large-font-size{font-size: var(--wp--preset--font-size--large) !important;}.has-x-large-font-size{font-size: var(--wp--preset--font-size--x-large) !important;}
:where(.wp-block-post-template.is-layout-flex){gap: 1.25em;}:where(.wp-block-post-template.is-layout-grid){gap: 1.25em;}
:where(.wp-block-columns.is-layout-flex){gap: 2em;}:where(.wp-block-columns.is-layout-grid){gap: 2em;}
:root :where(.wp-block-pullquote){font-size: 1.5em;line-height: 1.6;}
</style>
<link rel='stylesheet' id='johannes-main-css' href='https://decoded.avast.io/wp-content/themes/johannes/assets/css/min.css?ver=1.1.3' type='text/css' media='all' />
<style id='johannes-main-inline-css' type='text/css'>
:root {--color_header_top_bg: #424851;--color_header_top_txt: #989da2;--color_header_top_acc: #ffffff;--color_header_middle_bg: #2d364c;--color_header_middle_txt: #ffffff;--color_header_middle_acc: #ff8000;--color_header_middle_bg_multi: #424851;--color_header_bottom_bg: #ffffff;--color_header_bottom_txt: #424851;--color_header_bottom_acc: #f13b3b;--color_header_sticky_bg: ;--color_header_sticky_txt: ;--color_header_sticky_acc: ;--color_bg: #1c1c1c;--color_bg_dark: #1b1b1b;--color_h: #ffffff;--color_txt: #ffffff;--color_acc: #ff7900;--color_meta: #ffffff;--color_bg_alt_1: #252525;--color_bg_alt_2: #333333;--color_footer_bg: #ffffff;--color_footer_txt: #424851;--color_footer_acc: #f13b3b;--color_footer_meta: #989da2;--color_dark_txt: #1c1c1c;--color_button_txt: #fff;--color_button_hover: #1c1c1c;--color_border: #444;--color_border_light: #7d7d7d;--color_category_events: #ffffff;--color_category_events_dark: #b3b3b3;--color_category_events_light: #ffffff;--color_category_iot: #37eb34;--color_category_iot_dark: #27a525;--color_category_iot_light: #73f171;--color_category_mobile: #066dce;--color_category_mobile_dark: #054d91;--color_category_mobile_light: #5199dd;--color_category_network: #d32b47;--color_category_network_dark: #941f32;--color_category_network_light: #e16b7f;--color_category_other-research: #e5eb34;--color_category_other-research_dark: #a1a525;--color_category_other-research_light: #edf171;--color_category_pc: #f87934;--color_category_pc_dark: #ae5525;--color_category_pc_light: #fba271;--color_category_reports: #858585;--color_category_reports_dark: #5e5e5e;--color_category_reports_light: #aaaaaa;--color_category_uncategorized: #ffffff;--color_category_uncategorized_dark: #b3b3b3;--color_category_uncategorized_light: #ffffff;}.category-pill.johannes-layout-g .entry-category a.category-events {background: linear-gradient(-45deg, var(--color_category_events), var(--color_category_events_dark));border-bottom: solid 2px var(--color_category_events_light);border-top: solid 2px var(--color_category_events_light);border-radius: 10px 0px 10px 0px;font-size: 1.25rem;box-shadow: 0px 0px 6px 0px rgb(0 0 0 / 30%);}.category-pill.johannes-layout-g.category-events .entry-title a {border-left: 3px solid var(--color_category_events);padding: 15px;font-weight:bolder;font-size: 2.5rem;}article.category-pill.johannes-layout-g.category-events:hover .entry-title a,.widget_categories li.category-events a {color: var(--color_category_events_light);}.header-layout-11 .slot-r>div>nav>ul>li.category-events,.header-layout-11 .slot-r>nav>ul>li.category-events,.header-layout-11 .slot-r-top .johannes-hamburger li.category-events,.widget_categories li.category-events a {border: 2px solid var(--color_category_events_light);background: linear-gradient(-45deg, var(--color_category_events), var(--color_category_events_dark));}.header-layout-11 .slot-r>div>nav>ul>li.category-events:hover,.header-layout-11 .slot-r>nav>ul>li.category-events:hover,.header-layout-11 .slot-r-top .johannes-hamburger li.category-events:hover,.widget_categories li.category-events a:hover {background: var(--color_bg_alt_1);color: var(--color_txt) !important;border: 2px solid var(--color_category_events_light);}.category-pill.johannes-layout-g .entry-category a.category-iot {background: linear-gradient(-45deg, var(--color_category_iot), var(--color_category_iot_dark));border-bottom: solid 2px var(--color_category_iot_light);border-top: solid 2px var(--color_category_iot_light);border-radius: 10px 0px 10px 0px;font-size: 1.25rem;box-shadow: 0px 0px 6px 0px rgb(0 0 0 / 30%);}.category-pill.johannes-layout-g.category-iot .entry-title a {border-left: 3px solid var(--color_category_iot);padding: 15px;font-weight:bolder;font-size: 2.5rem;}article.category-pill.johannes-layout-g.category-iot:hover .entry-title a,.widget_categories li.category-iot a {color: var(--color_category_iot_light);}.header-layout-11 .slot-r>div>nav>ul>li.category-iot,.header-layout-11 .slot-r>nav>ul>li.category-iot,.header-layout-11 .slot-r-top .johannes-hamburger li.category-iot,.widget_categories li.category-iot a {border: 2px solid var(--color_category_iot_light);background: linear-gradient(-45deg, var(--color_category_iot), var(--color_category_iot_dark));}.header-layout-11 .slot-r>div>nav>ul>li.category-iot:hover,.header-layout-11 .slot-r>nav>ul>li.category-iot:hover,.header-layout-11 .slot-r-top .johannes-hamburger li.category-iot:hover,.widget_categories li.category-iot a:hover {background: var(--color_bg_alt_1);color: var(--color_txt) !important;border: 2px solid var(--color_category_iot_light);}.category-pill.johannes-layout-g .entry-category a.category-mobile {background: linear-gradient(-45deg, var(--color_category_mobile), var(--color_category_mobile_dark));border-bottom: solid 2px var(--color_category_mobile_light);border-top: solid 2px var(--color_category_mobile_light);border-radius: 10px 0px 10px 0px;font-size: 1.25rem;box-shadow: 0px 0px 6px 0px rgb(0 0 0 / 30%);}.category-pill.johannes-layout-g.category-mobile .entry-title a {border-left: 3px solid var(--color_category_mobile);padding: 15px;font-weight:bolder;font-size: 2.5rem;}article.category-pill.johannes-layout-g.category-mobile:hover .entry-title a,.widget_categories li.category-mobile a {color: var(--color_category_mobile_light);}.header-layout-11 .slot-r>div>nav>ul>li.category-mobile,.header-layout-11 .slot-r>nav>ul>li.category-mobile,.header-layout-11 .slot-r-top .johannes-hamburger li.category-mobile,.widget_categories li.category-mobile a {border: 2px solid var(--color_category_mobile_light);background: linear-gradient(-45deg, var(--color_category_mobile), var(--color_category_mobile_dark));}.header-layout-11 .slot-r>div>nav>ul>li.category-mobile:hover,.header-layout-11 .slot-r>nav>ul>li.category-mobile:hover,.header-layout-11 .slot-r-top .johannes-hamburger li.category-mobile:hover,.widget_categories li.category-mobile a:hover {background: var(--color_bg_alt_1);color: var(--color_txt) !important;border: 2px solid var(--color_category_mobile_light);}.category-pill.johannes-layout-g .entry-category a.category-network {background: linear-gradient(-45deg, var(--color_category_network), var(--color_category_network_dark));border-bottom: solid 2px var(--color_category_network_light);border-top: solid 2px var(--color_category_network_light);border-radius: 10px 0px 10px 0px;font-size: 1.25rem;box-shadow: 0px 0px 6px 0px rgb(0 0 0 / 30%);}.category-pill.johannes-layout-g.category-network .entry-title a {border-left: 3px solid var(--color_category_network);padding: 15px;font-weight:bolder;font-size: 2.5rem;}article.category-pill.johannes-layout-g.category-network:hover .entry-title a,.widget_categories li.category-network a {color: var(--color_category_network_light);}.header-layout-11 .slot-r>div>nav>ul>li.category-network,.header-layout-11 .slot-r>nav>ul>li.category-network,.header-layout-11 .slot-r-top .johannes-hamburger li.category-network,.widget_categories li.category-network a {border: 2px solid var(--color_category_network_light);background: linear-gradient(-45deg, var(--color_category_network), var(--color_category_network_dark));}.header-layout-11 .slot-r>div>nav>ul>li.category-network:hover,.header-layout-11 .slot-r>nav>ul>li.category-network:hover,.header-layout-11 .slot-r-top .johannes-hamburger li.category-network:hover,.widget_categories li.category-network a:hover {background: var(--color_bg_alt_1);color: var(--color_txt) !important;border: 2px solid var(--color_category_network_light);}.category-pill.johannes-layout-g .entry-category a.category-other-research {background: linear-gradient(-45deg, var(--color_category_other-research), var(--color_category_other-research_dark));border-bottom: solid 2px var(--color_category_other-research_light);border-top: solid 2px var(--color_category_other-research_light);border-radius: 10px 0px 10px 0px;font-size: 1.25rem;box-shadow: 0px 0px 6px 0px rgb(0 0 0 / 30%);}.category-pill.johannes-layout-g.category-other-research .entry-title a {border-left: 3px solid var(--color_category_other-research);padding: 15px;font-weight:bolder;font-size: 2.5rem;}article.category-pill.johannes-layout-g.category-other-research:hover .entry-title a,.widget_categories li.category-other-research a {color: var(--color_category_other-research_light);}.header-layout-11 .slot-r>div>nav>ul>li.category-other-research,.header-layout-11 .slot-r>nav>ul>li.category-other-research,.header-layout-11 .slot-r-top .johannes-hamburger li.category-other-research,.widget_categories li.category-other-research a {border: 2px solid var(--color_category_other-research_light);background: linear-gradient(-45deg, var(--color_category_other-research), var(--color_category_other-research_dark));}.header-layout-11 .slot-r>div>nav>ul>li.category-other-research:hover,.header-layout-11 .slot-r>nav>ul>li.category-other-research:hover,.header-layout-11 .slot-r-top .johannes-hamburger li.category-other-research:hover,.widget_categories li.category-other-research a:hover {background: var(--color_bg_alt_1);color: var(--color_txt) !important;border: 2px solid var(--color_category_other-research_light);}.category-pill.johannes-layout-g .entry-category a.category-pc {background: linear-gradient(-45deg, var(--color_category_pc), var(--color_category_pc_dark));border-bottom: solid 2px var(--color_category_pc_light);border-top: solid 2px var(--color_category_pc_light);border-radius: 10px 0px 10px 0px;font-size: 1.25rem;box-shadow: 0px 0px 6px 0px rgb(0 0 0 / 30%);}.category-pill.johannes-layout-g.category-pc .entry-title a {border-left: 3px solid var(--color_category_pc);padding: 15px;font-weight:bolder;font-size: 2.5rem;}article.category-pill.johannes-layout-g.category-pc:hover .entry-title a,.widget_categories li.category-pc a {color: var(--color_category_pc_light);}.header-layout-11 .slot-r>div>nav>ul>li.category-pc,.header-layout-11 .slot-r>nav>ul>li.category-pc,.header-layout-11 .slot-r-top .johannes-hamburger li.category-pc,.widget_categories li.category-pc a {border: 2px solid var(--color_category_pc_light);background: linear-gradient(-45deg, var(--color_category_pc), var(--color_category_pc_dark));}.header-layout-11 .slot-r>div>nav>ul>li.category-pc:hover,.header-layout-11 .slot-r>nav>ul>li.category-pc:hover,.header-layout-11 .slot-r-top .johannes-hamburger li.category-pc:hover,.widget_categories li.category-pc a:hover {background: var(--color_bg_alt_1);color: var(--color_txt) !important;border: 2px solid var(--color_category_pc_light);}.category-pill.johannes-layout-g .entry-category a.category-reports {background: linear-gradient(-45deg, var(--color_category_reports), var(--color_category_reports_dark));border-bottom: solid 2px var(--color_category_reports_light);border-top: solid 2px var(--color_category_reports_light);border-radius: 10px 0px 10px 0px;font-size: 1.25rem;box-shadow: 0px 0px 6px 0px rgb(0 0 0 / 30%);}.category-pill.johannes-layout-g.category-reports .entry-title a {border-left: 3px solid var(--color_category_reports);padding: 15px;font-weight:bolder;font-size: 2.5rem;}article.category-pill.johannes-layout-g.category-reports:hover .entry-title a,.widget_categories li.category-reports a {color: var(--color_category_reports_light);}.header-layout-11 .slot-r>div>nav>ul>li.category-reports,.header-layout-11 .slot-r>nav>ul>li.category-reports,.header-layout-11 .slot-r-top .johannes-hamburger li.category-reports,.widget_categories li.category-reports a {border: 2px solid var(--color_category_reports_light);background: linear-gradient(-45deg, var(--color_category_reports), var(--color_category_reports_dark));}.header-layout-11 .slot-r>div>nav>ul>li.category-reports:hover,.header-layout-11 .slot-r>nav>ul>li.category-reports:hover,.header-layout-11 .slot-r-top .johannes-hamburger li.category-reports:hover,.widget_categories li.category-reports a:hover {background: var(--color_bg_alt_1);color: var(--color_txt) !important;border: 2px solid var(--color_category_reports_light);}.category-pill.johannes-layout-g .entry-category a.category-uncategorized {background: linear-gradient(-45deg, var(--color_category_uncategorized), var(--color_category_uncategorized_dark));border-bottom: solid 2px var(--color_category_uncategorized_light);border-top: solid 2px var(--color_category_uncategorized_light);border-radius: 10px 0px 10px 0px;font-size: 1.25rem;box-shadow: 0px 0px 6px 0px rgb(0 0 0 / 30%);}.category-pill.johannes-layout-g.category-uncategorized .entry-title a {border-left: 3px solid var(--color_category_uncategorized);padding: 15px;font-weight:bolder;font-size: 2.5rem;}article.category-pill.johannes-layout-g.category-uncategorized:hover .entry-title a,.widget_categories li.category-uncategorized a {color: var(--color_category_uncategorized_light);}.header-layout-11 .slot-r>div>nav>ul>li.category-uncategorized,.header-layout-11 .slot-r>nav>ul>li.category-uncategorized,.header-layout-11 .slot-r-top .johannes-hamburger li.category-uncategorized,.widget_categories li.category-uncategorized a {border: 2px solid var(--color_category_uncategorized_light);background: linear-gradient(-45deg, var(--color_category_uncategorized), var(--color_category_uncategorized_dark));}.header-layout-11 .slot-r>div>nav>ul>li.category-uncategorized:hover,.header-layout-11 .slot-r>nav>ul>li.category-uncategorized:hover,.header-layout-11 .slot-r-top .johannes-hamburger li.category-uncategorized:hover,.widget_categories li.category-uncategorized a:hover {background: var(--color_bg_alt_1);color: var(--color_txt) !important;border: 2px solid var(--color_category_uncategorized_light);}body{font-family: 'Muli', Arial, sans-serif;font-weight: 400;font-style: normal;color: var( --color_txt );background: var( --color_bg );}.johannes-header{font-family: 'Muli', Arial, sans-serif;font-weight: 700;font-style: normal;}h1,h2,h3,h4,h5,h6,.h1,.h2,.h3,.h4,.h5,.h6,.h0,.display-1,.wp-block-cover .wp-block-cover-image-text, .wp-block-cover .wp-block-cover-text, .wp-block-cover h2, .wp-block-cover-image .wp-block-cover-image-text, .wp-block-cover-image .wp-block-cover-text, .wp-block-cover-image h2,.entry-category a,.single-md-content .entry-summary,p.has-drop-cap:not(:focus)::first-letter,.johannes_posts_widget .entry-header > a {font-family: 'Muli', Arial, sans-serif;font-weight: 900;font-style: normal;}b,strong,.entry-tags a,.entry-category a,.entry-meta a,.wp-block-tag-cloud a{font-weight: 900; }.entry-content strong{font-weight: bold;}.header-top{background: var( --color_header_top_bg );color: var( --color_header_top_txt );}.header-top nav > ul > li > a,.header-top .johannes-menu-social a{color: var( --color_header_top_txt );}.header-top nav > ul > li:hover > a,.header-top nav > ul > li.current-menu-item > a,.header-top .johannes-menu-social li:hover a{color: var( --color_header_top_acc );}.header-middle,.header-mobile{color: var( --color_header_middle_txt );background: var( --color_header_middle_bg );}.header-middle > .container {height: 130px;}.header-middle a,.johannes-mega-menu .sub-menu li:hover a,.header-mobile a{color: var( --color_header_middle_txt );}.header-middle li:hover > a,.header-middle .current-menu-item > a,.header-middle .johannes-mega-menu .sub-menu li a:hover,.header-middle .johannes-site-branding .site-title a:hover,.header-mobile .site-title a,.header-mobile a:hover{color: var( --color_header_middle_acc );}.header-middle .johannes-site-branding .site-title a{color: var( --color_header_middle_txt );}.header-middle .sub-menu{background: var( --color_header_middle_bg );}.johannes-cover-indent .header-middle .johannes-menu>li>a:hover,.johannes-cover-indent .header-middle .johannes-menu-action a:hover{color: var( --color_header_middle_acc );}.header-sticky-main{color: var( --color_header_middle_txt );background: var( --color_header_middle_bg );}.header-sticky-main a,.header-sticky-main .johannes-mega-menu .sub-menu li:hover a,.header-sticky-main .johannes-mega-menu .has-arrows .owl-nav > div{color: var( --color_header_middle_txt );}.header-sticky-main li:hover > a,.header-sticky-main .current-menu-item > a,.header-sticky-main .johannes-mega-menu .sub-menu li a:hover,.header-sticky-main .johannes-site-branding .site-title a:hover{color: var( --color_header_middle_acc );}.header-sticky-main .johannes-site-branding .site-title a{color: var( --color_header_middle_txt );}.header-sticky-main .sub-menu{background: var( --color_header_middle_bg );}.header-sticky-contextual{color: var( --color_header_middle_bg );background: var( --color_header_middle_txt );}.header-sticky-contextual,.header-sticky-contextual a{font-family: 'Muli', Arial, sans-serif;font-weight: 400;font-style: normal;}.header-sticky-contextual a{color: var( --color_header_middle_bg );}.header-sticky-contextual .meta-comments:after{background: var( --color_header_middle_bg );}.header-sticky-contextual .meks_ess a:hover{color: var( --color_header_middle_acc );background: transparent;}.header-bottom{color: var( --color_header_bottom_txt );background: var( --color_header_bottom_bg );border-top: 1px solid rgba(66,72,81,0.1);border-bottom: 1px solid rgba(66,72,81,0.1);}.johannes-header-bottom-boxed .header-bottom{background: transparent;border: none;}.johannes-header-bottom-boxed .header-bottom-slots{background: var( --color_header_bottom_bg );border-top: 1px solid rgba(66,72,81,0.1);border-bottom: 1px solid rgba(66,72,81,0.1);}.header-bottom-slots{height: 70px;}.header-bottom a,.johannes-mega-menu .sub-menu li:hover a,.johannes-mega-menu .has-arrows .owl-nav > div{color: var( --color_header_bottom_txt );}.header-bottom li:hover > a,.header-bottom .current-menu-item > a,.header-bottom .johannes-mega-menu .sub-menu li a:hover,.header-bottom .johannes-site-branding .site-title a:hover{color: var( --color_header_bottom_acc );}.header-bottom .johannes-site-branding .site-title a{color: var( --color_header_bottom_txt );}.header-bottom .sub-menu{background: var( --color_header_bottom_bg );}.johannes-menu-action .search-form input[type=text]{background: var( --color_bg );}.johannes-header-multicolor .header-middle .slot-l,.johannes-header-multicolor .header-sticky .header-sticky-main .container > .slot-l,.johannes-header-multicolor .header-mobile .slot-l,.johannes-header-multicolor .slot-l .johannes-site-branding:after{background: var( --color_header_middle_bg_multi );}.johannes-cover-indent .johannes-cover{min-height: 450px;}.page.johannes-cover-indent .johannes-cover{min-height: 250px;}.single.johannes-cover-indent .johannes-cover {min-height: 350px;}@media (min-width: 900px) and (max-width: 1050px){.header-middle > .container {height: 100px;}.header-bottom > .container,.header-bottom-slots {height: 50px;}}.johannes-modal{background: var( --color_bg );}.johannes-modal .johannes-menu-social li a:hover,.meks_ess a:hover{background: var( --color_txt );}.johannes-modal .johannes-menu-social li:hover a{color: var( --color_button_hover );}.johannes-modal .johannes-modal-close{color: var( --color_txt );}.johannes-modal .johannes-modal-close:hover{color: var( --color_acc );}.meks_ess a:hover{color: var( --color_bg );}h1,h2,h3,h4,h5,h6,.h1,.h2,.h3,.h4,.h5,.h6,.h0,.display-1,.has-large-font-size {color: var( --color_h );}.entry-title a,a{color: var( --color_txt );}.johannes-post .entry-title a{color: var( --color_h );}.entry-content a:not([class*=button]),.comment-content a:not([class*=button]){color: var( --color_acc );}.entry-content a:not([class*=button]):hover,.comment-content a:not([class*=button]):hover{color: var( --color_txt );}.entry-title a:hover,a:hover,.entry-meta a,.written-by a,.johannes-overlay .entry-meta a:hover,body .johannes-cover .section-bg+.container .johannes-breadcrumbs a:hover,.johannes-cover .section-bg+.container .section-head a:not(.johannes-button):not(.cat-item):hover,.entry-content .wp-block-tag-cloud a:hover{color: var( --color_acc );}.entry-meta,.entry-content .entry-tags a,.entry-content .fn a,.comment-metadata,.entry-content .comment-metadata a,.written-by > span,.johannes-breadcrumbs{color: var( --color_meta );}.entry-meta a:hover,.written-by a:hover,.entry-content .wp-block-tag-cloud a{color: var( --color_txt );}.entry-meta .meta-item + .meta-item:before{background:var( --color_txt );}.entry-format i{color: var( --color_bg );background:var( --color_txt );}.category-pill .entry-category a{background-color: var( --color_acc );color: var( --color_button_txt );}.category-pill .entry-category a:hover{background-color: var( --color_txt );color: var( --color_button_hover );}.johannes-overlay.category-pill .entry-category a:hover,.johannes-cover.category-pill .entry-category a:hover {background-color: #ffffff;color: var( --color_dark_txt );}.white-bg-alt-2 .johannes-bg-alt-2 .category-pill .entry-category a:hover,.white-bg-alt-2 .johannes-bg-alt-2 .entry-format i{background-color: #ffffff;color: var( --color_dark_txt );}.media-shadow:after{background: rgba(255,255,255,0.1);}.entry-content .entry-tags a:hover,.entry-content .fn a:hover{color: var( --color_acc );}.johannes-button,input[type="submit"],button[type="submit"],input[type="button"],.wp-block-button .wp-block-button__link,.comment-reply-link,#cancel-comment-reply-link,.johannes-pagination a,.johannes-pagination,.meks-instagram-follow-link .meks-widget-cta,.mks_autor_link_wrap a,.mks_read_more a,.category-pill .entry-category a{font-family: 'Muli', Arial, sans-serif;font-weight: 900;font-style: normal;}.johannes-bg-alt-1,.has-arrows .owl-nav,.has-arrows .owl-stage-outer:after,.media-shadow:after {background-color: #252525}.johannes-bg-alt-2 {background-color: #333333}.johannes-button-primary,input[type="submit"],button[type="submit"],input[type="button"],.johannes-pagination a{box-shadow: 0 10px 15px 0 rgba(255,121,0,0.2);background: var( --color_acc );color: var( --color_button_txt );}.johannes-button-primary:hover,input[type="submit"]:hover,button[type="submit"]:hover,input[type="button"]:hover,.johannes-pagination a:hover{box-shadow: 0 0 0 0 rgba(255,121,0,0);color: var( --color_button_txt );}.johannes-button.disabled{background: var( --color_bg_alt_1 );color: var( --color_txt ); box-shadow: none;}.johannes-button-secondary,.comment-reply-link,#cancel-comment-reply-link,.meks-instagram-follow-link .meks-widget-cta,.mks_autor_link_wrap a,.mks_read_more a{box-shadow: inset 0 0px 0px 1px var( --color_txt );color: var( --color_txt );opacity: .5;}.johannes-button-secondary:hover,.comment-reply-link:hover,#cancel-comment-reply-link:hover,.meks-instagram-follow-link .meks-widget-cta:hover,.mks_autor_link_wrap a:hover,.mks_read_more a:hover{box-shadow: inset 0 0px 0px 1px var( --color_acc ); opacity: 1;color: var( --color_acc );}.johannes-breadcrumbs a,.johannes-action-close:hover,.single-md-content .entry-summary span,form label .required{color: var( --color_acc );}.johannes-breadcrumbs a:hover{color: var( --color_txt );}.section-title:after{background-color: var( --color_acc );}hr{background: rgba(255,255,255,0.2);}.wp-block-preformatted,.wp-block-verse,pre,code, kbd, pre, samp, address{background:var( --color_bg_alt_1 );}.entry-content ul li:before,.wp-block-quote:before,.comment-content ul li:before{color: var( --color_txt );}.wp-block-quote.is-large:before{color: var( --color_acc );}.wp-block-table.is-style-stripes tr:nth-child(odd){background:var( --color_bg_alt_1 );}.wp-block-table.is-style-regular tbody tr,.entry-content table tr,.comment-content table tr{border-bottom: 1px solid rgba(255,255,255,0.1);}.wp-block-pullquote:not(.is-style-solid-color){color: var( --color_txt );border-color: var( --color_acc );}.wp-block-pullquote{background: var( --color_acc );color: var( --color_bg );}.johannes-sidebar-none .wp-block-pullquote.alignfull.is-style-solid-color{box-shadow: -526px 0 0 #ff7900, -1052px 0 0 #ff7900,526px 0 0 #ff7900, 1052px 0 0 var( --color_acc );}.wp-block-button .wp-block-button__link{background: var( --color_acc );color: var( --color_button_txt );box-shadow: 0 10px 15px 0 rgba(255,121,0,0.2);}.wp-block-button .wp-block-button__link:hover{box-shadow: 0 0 0 0 rgba(255,121,0,0);}.is-style-outline .wp-block-button__link {background: 0 0;color:var( --color_acc );border: 2px solid currentcolor;}.entry-content .is-style-solid-color a:not([class*=button]){color:var( --color_bg );}.entry-content .is-style-solid-color a:not([class*=button]):hover{color:var( --color_txt );}input[type=color], input[type=date], input[type=datetime-local], input[type=datetime], input[type=email], input[type=month], input[type=number], input[type=password], input[type=range], input[type=search], input[type=tel], input[type=text], input[type=time], input[type=url], input[type=week], select, textarea{border: 1px solid rgba(255,255,255,0.3);}body .johannes-wrapper .meks_ess{border-color: rgba(255,255,255,0.1); }.widget_eu_cookie_law_widget #eu-cookie-law input, .widget_eu_cookie_law_widget #eu-cookie-law input:focus, .widget_eu_cookie_law_widget #eu-cookie-law input:hover{background: var( --color_acc );color: var( --color_button_txt );}.double-bounce1, .double-bounce2{background-color: var( --color_acc );}.johannes-pagination .page-numbers.current,.paginated-post-wrapper span{background: var( --color_bg_alt_1 );color: var( --color_txt );}.widget li{color: rgba(255,255,255,0.8);}.widget_calendar #today a{color: #fff;}.widget_calendar #today a{background: var( --color_acc );}.tagcloud a{border-color: rgba(255,255,255,0.5);color: rgba(255,255,255,0.8);}.tagcloud a:hover{color: var( --color_acc );border-color: var( --color_acc );}.rssSummary,.widget p{color: var( --color_txt );}.johannes-bg-alt-1 .count,.johannes-bg-alt-1 li a,.johannes-bg-alt-1 .johannes-accordion-nav{background-color: var( --color_bg_alt_1 );}.johannes-bg-alt-2 .count,.johannes-bg-alt-2 li a,.johannes-bg-alt-2 .johannes-accordion-nav,.johannes-bg-alt-2 .cat-item .count, .johannes-bg-alt-2 .rss-date, .widget .johannes-bg-alt-2 .post-date, .widget .johannes-bg-alt-2 cite{background-color: var( --color_bg_alt_2 );color: #FFF;}.white-bg-alt-1 .widget .johannes-bg-alt-1 select option,.white-bg-alt-2 .widget .johannes-bg-alt-2 select option{background: var( --color_bg_alt_2 );}.widget .johannes-bg-alt-2 li a:hover{color: var( --color_acc );}.widget_categories .johannes-bg-alt-1 ul li .dots:before,.widget_archive .johannes-bg-alt-1 ul li .dots:before{color: var( --color_txt );}.widget_categories .johannes-bg-alt-2 ul li .dots:before,.widget_archive .johannes-bg-alt-2 ul li .dots:before{color: #FFF;}.search-alt input[type=search], .search-alt input[type=text], .widget_search input[type=search], .widget_search input[type=text],.mc-field-group input[type=email], .mc-field-group input[type=text]{border-bottom: 1px solid rgba(255,255,255,0.2);}.johannes-sidebar-hidden{background: var( --color_bg );}.johannes-footer{background: var( --color_footer_bg );color: var( --color_footer_txt );}.johannes-footer a,.johannes-footer .widget-title{color: var( --color_footer_txt );}.johannes-footer a:hover{color: var( --color_footer_acc );}.johannes-footer-widgets + .johannes-copyright{border-top: 1px solid rgba(66,72,81,0.1);}.johannes-footer .widget .count,.johannes-footer .widget_categories li a,.johannes-footer .widget_archive li a,.johannes-footer .widget .johannes-accordion-nav{background-color: var( --color_footer_bg );}.footer-divider{border-top: 1px solid rgba(66,72,81,0.1);}.johannes-footer .rssSummary,.johannes-footer .widget p{color: var( --color_footer_txt );}.johannes-empty-message{background: var( --color_bg_alt_1 );}.error404 .h0{color: var( --color_acc );}.johannes-goto-top,.johannes-goto-top:hover{background: var( --color_txt );color: var( --color_bg );}.johannes-ellipsis div{background: var( --color_acc );}.white-bg-alt-2 .johannes-bg-alt-2 .section-subnav .johannes-button-secondary:hover{color: var( --color_acc );}.section-subnav a{color: var( --color_txt );}.johannes-cover .section-subnav a{color: var( --color_button_txt );}.section-subnav a:hover{color: var( --color_acc );}@media(min-width: 600px){.size-johannes-fa-a{ height: 450px !important;}.size-johannes-single-3{ height: 450px !important;}.size-johannes-single-4{ height: 540px !important;}.size-johannes-page-3{ height: 360px !important;}.size-johannes-page-4{ height: 405px !important;}.size-johannes-wa-3{ height: 405px !important;}.size-johannes-wa-4{ height: 567px !important;}.size-johannes-archive-2{ height: 405px !important;}.size-johannes-archive-3{ height: 405px !important;}}@media(min-width: 900px){.size-johannes-a{ height: 484px !important;}.size-johannes-b{ height: 491px !important;}.size-johannes-c{ height: 304px !important;}.size-johannes-d{ height: 194px !important;}.size-johannes-e{ height: 304px !important;}.size-johannes-f{ height: 214px !important;}.size-johannes-fa-a{ height: 500px !important;}.size-johannes-fa-b{ height: 635px !important;}.size-johannes-fa-c{ height: 540px !important;}.size-johannes-fa-d{ height: 344px !important;}.size-johannes-fa-e{ height: 442px !important;}.size-johannes-single-1{ height: 484px !important;}.size-johannes-single-2{ height: 484px !important;}.size-johannes-single-3{ height: 500px !important;}.size-johannes-single-4{ height: 600px !important;}.size-johannes-single-5{ height: 442px !important;}.size-johannes-page-1{ height: 484px !important;}.size-johannes-page-2{ height: 484px !important;}.size-johannes-page-3{ height: 400px !important;}.size-johannes-page-4{ height: 450px !important;}.size-johannes-wa-1{ height: 442px !important;}.size-johannes-wa-2{ height: 304px !important;}.size-johannes-wa-3{ height: 450px !important;}.size-johannes-wa-4{ height: 630px !important;}.size-johannes-archive-2{ height: 450px !important;}.size-johannes-archive-3{ height: 450px !important;}}@media(min-width: 900px){.has-small-font-size{ font-size: 1.3rem;}.has-normal-font-size{ font-size: 1.6rem;}.has-large-font-size{ font-size: 4.0rem;}.has-huge-font-size{ font-size: 5.2rem;}}.has-johannes-acc-background-color{ background-color: #ff7900;}.has-johannes-acc-color{ color: #ff7900;}.has-johannes-meta-background-color{ background-color: #ffffff;}.has-johannes-meta-color{ color: #ffffff;}.has-johannes-bg-background-color{ background-color: #1c1c1c;}.has-johannes-bg-color{ color: #1c1c1c;}.has-johannes-bg-alt-1-background-color{ background-color: #252525;}.has-johannes-bg-alt-1-color{ color: #252525;}.has-johannes-bg-alt-2-background-color{ background-color: #333333;}.has-johannes-bg-alt-2-color{ color: #333333;}body{font-size:1.6rem;}.johannes-header{font-size:1.4rem;}.display-1{font-size:3rem;}h1, .h1{font-size:2.6rem;}h2, .h2{font-size:2.4rem;}h3, .h3{font-size:2.2rem;}h4, .h4,.wp-block-cover .wp-block-cover-image-text,.wp-block-cover .wp-block-cover-text,.wp-block-cover h2,.wp-block-cover-image .wp-block-cover-image-text,.wp-block-cover-image .wp-block-cover-text,.wp-block-cover-image h2{font-size:2rem;}h5, .h5{font-size:1.8rem;}h6, .h6{font-size:1.6rem;}.entry-meta{font-size:1.2rem;}.section-title {font-size:2.4rem;}.widget-title{font-size:2.0rem;}.mks_author_widget h3{font-size:2.2rem;}.widget,.johannes-breadcrumbs{font-size:1.4rem;}.wp-block-quote.is-large p, .wp-block-quote.is-style-large p{font-size:2.2rem;}.johannes-site-branding .site-title.logo-img-none{font-size: 2.6rem;}.johannes-cover-indent .johannes-cover{margin-top: -70px;}.johannes-menu-social li a:after, .menu-social-container li a:after{font-size:1.6rem;}.johannes-modal .johannes-menu-social li>a:after,.johannes-menu-action .jf{font-size:2.4rem;}.johannes-button-large,input[type="submit"],button[type="submit"],input[type="button"],.johannes-pagination a,.page-numbers.current,.johannes-button-medium,.meks-instagram-follow-link .meks-widget-cta,.mks_autor_link_wrap a,.mks_read_more a,.wp-block-button .wp-block-button__link{font-size:1.3rem;}.johannes-button-small,.comment-reply-link,#cancel-comment-reply-link{font-size:1.2rem;}.category-pill .entry-category a,.category-pill-small .entry-category a{font-size:1.1rem;}@media (min-width: 600px){ .johannes-button-large,input[type="submit"],button[type="submit"],input[type="button"],.johannes-pagination a,.page-numbers.current,.wp-block-button .wp-block-button__link{font-size:1.4rem;}.category-pill .entry-category a{font-size:1.4rem;}.category-pill-small .entry-category a{font-size:1.1rem;}}@media (max-width: 374px){.johannes-overlay .h1,.johannes-overlay .h2,.johannes-overlay .h3,.johannes-overlay .h4,.johannes-overlay .h5{font-size: 2.2rem;}}@media (max-width: 600px){ .johannes-layout-fa-d .h5{font-size: 2.4rem;}.johannes-layout-f.category-pill .entry-category a{background-color: transparent;color: var( --color_acc );}.johannes-layout-c .h3,.johannes-layout-d .h5{font-size: 2.4rem;}.johannes-layout-f .h3{font-size: 1.8rem;}}@media (min-width: 600px) and (max-width: 1050px){ .johannes-layout-fa-c .h2{font-size:3.6rem;}.johannes-layout-fa-d .h5{font-size:2.4rem;}.johannes-layout-fa-e .display-1,.section-head-alt .display-1{font-size:5.2rem;}}@media (max-width: 1050px){ body.single-post .single-md-content{max-width: 766px;width: 100%;}body.page .single-md-content.col-lg-6,body.page .single-md-content.col-lg-6{flex: 0 0 100%}body.page .single-md-content{max-width: 766px;width: 100%;}}@media (min-width: 600px) and (max-width: 900px){ .display-1{font-size:4.6rem;}h1, .h1{font-size:4rem;}h2, .h2,.johannes-layout-fa-e .display-1,.section-head-alt .display-1{font-size:3.2rem;}h3, .h3,.johannes-layout-fa-c .h2,.johannes-layout-fa-d .h5,.johannes-layout-d .h5,.johannes-layout-e .h2{font-size:2.8rem;}h4, .h4,.wp-block-cover .wp-block-cover-image-text,.wp-block-cover .wp-block-cover-text,.wp-block-cover h2,.wp-block-cover-image .wp-block-cover-image-text,.wp-block-cover-image .wp-block-cover-text,.wp-block-cover-image h2{font-size:2.4rem;}h5, .h5{font-size:2rem;}h6, .h6{font-size:1.8rem;}.section-title {font-size:3.2rem;}.johannes-section.wa-layout .display-1{font-size: 3rem;}.johannes-layout-f .h3{font-size: 3.2rem}.johannes-site-branding .site-title.logo-img-none{font-size: 3rem;}}@media (min-width: 900px){ body{font-size:1.6rem;}.johannes-header{font-size:1.4rem;}.display-1{font-size:5.2rem;}h1, .h1 {font-size:5.2rem;}h2, .h2 {font-size:4.0rem;}h3, .h3 {font-size:3.6rem;}h4, .h4,.wp-block-cover .wp-block-cover-image-text,.wp-block-cover .wp-block-cover-text,.wp-block-cover h2,.wp-block-cover-image .wp-block-cover-image-text,.wp-block-cover-image .wp-block-cover-text,.wp-block-cover-image h2 {font-size:3.2rem;}h5, .h5 {font-size:2.8rem;}h6, .h6 {font-size:2.4rem;}.widget-title{font-size:2.0rem;}.section-title{font-size:4.0rem;}.wp-block-quote.is-large p, .wp-block-quote.is-style-large p{font-size:2.6rem;}.johannes-section-instagram .h2{font-size: 3rem;}.johannes-site-branding .site-title.logo-img-none{font-size: 4rem;}.entry-meta{font-size:1.4rem;}.johannes-cover-indent .johannes-cover {margin-top: -130px;}.johannes-cover-indent .johannes-cover .section-head{top: 32.5px;}}.section-description .search-alt input[type=text],.search-alt input[type=text]{color: var( --color_txt );}::-webkit-input-placeholder {color: rgba(255,255,255,0.5);}::-moz-placeholder {color: rgba(255,255,255,0.5);}:-ms-input-placeholder {color: rgba(255,255,255,0.5);}:-moz-placeholder{color: rgba(255,255,255,0.5);}.section-description .search-alt input[type=text]::-webkit-input-placeholder {color: var( --color_txt );}.section-description .search-alt input[type=text]::-moz-placeholder {color: var( --color_txt );}.section-description .search-alt input[type=text]:-ms-input-placeholder {color: var( --color_txt );}.section-description .search-alt input[type=text]:-moz-placeholder{color: var( --color_txt );}.section-description .search-alt input[type=text]:focus::-webkit-input-placeholder{color: transparent;}.section-description .search-alt input[type=text]:focus::-moz-placeholder {color: transparent;}.section-description .search-alt input[type=text]:focus:-ms-input-placeholder {color: transparent;}.section-description .search-alt input[type=text]:focus:-moz-placeholder{color: transparent;}
</style>
<link rel='stylesheet' id='avast-common-css' href='https://decoded.avast.io/wp-content/themes/johannes-avast/css/common.css?ver=1.0.2' type='text/css' media='all' />
<link rel='stylesheet' id='avast-theme-css' href='https://decoded.avast.io/wp-content/themes/johannes-avast/css/dark.css?ver=1.0.2' type='text/css' media='all' />
<link rel='stylesheet' id='font_awesome-css' href='https://kit.fontawesome.com/a2abe1aedb.js?ver=6.6.2' type='text/css' media='all' />
<link rel='stylesheet' id='johannes-fonts-css' href='https://fonts.googleapis.com/css?family=Muli%3Aregular%2C900%2C700&#038;ver=1.1.3' type='text/css' media='all' />
<link rel='stylesheet' id='meks_ess-main-css' href='https://decoded.avast.io/wp-content/plugins/meks-easy-social-share/assets/css/main.css?ver=1.3' type='text/css' media='all' />
<script type="text/javascript">
            window._nslDOMReady = function (callback) {
                if ( document.readyState === "complete" || document.readyState === "interactive" ) {
                    callback();
                } else {
                    document.addEventListener( "DOMContentLoaded", callback );
                }
            };
            </script><script type="text/javascript" src="https://decoded.avast.io/wp-content/plugins/google-analytics-for-wordpress/assets/js/frontend-gtag.min.js?ver=9.1.1" id="monsterinsights-frontend-script-js" async="async" data-wp-strategy="async"></script>
<script data-cfasync="false" data-wpfc-render="false" type="text/javascript" id='monsterinsights-frontend-script-js-extra'>/* <![CDATA[ */
var monsterinsights_frontend = {"js_events_tracking":"true","download_extensions":"doc,pdf,ppt,zip,xls,docx,pptx,xlsx","inbound_paths":"[{\"path\":\"\\\/go\\\/\",\"label\":\"affiliate\"},{\"path\":\"\\\/recommend\\\/\",\"label\":\"affiliate\"}]","home_url":"https:\/\/decoded.avast.io","hash_tracking":"false","v4_id":"G-GSVBRGE9D6"};/* ]]> */
</script>
<script type="text/javascript" src="https://decoded.avast.io/wp-includes/js/jquery/jquery.min.js?ver=3.7.1" id="jquery-core-js"></script>
<script type="text/javascript" src="https://decoded.avast.io/wp-includes/js/jquery/jquery-migrate.min.js?ver=3.4.1" id="jquery-migrate-js"></script>
<link rel="https://api.w.org/" href="https://decoded.avast.io/wp-json/" /><link rel="alternate" title="JSON" type="application/json" href="https://decoded.avast.io/wp-json/wp/v2/posts/8115" /><link rel="EditURI" type="application/rsd+xml" title="RSD" href="https://decoded.avast.io/xmlrpc.php?rsd" />
<meta name="generator" content="WordPress 6.6.2" />
<link rel='shortlink' href='https://decoded.avast.io/?p=8115' />
<link rel="alternate" title="oEmbed (JSON)" type="application/json+oembed" href="https://decoded.avast.io/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fdecoded.avast.io%2Fjanrubin%2Fguptiminer-hijacking-antivirus-updates-for-distributing-backdoors-and-casual-mining%2F" />
<link rel="alternate" title="oEmbed (XML)" type="text/xml+oembed" href="https://decoded.avast.io/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fdecoded.avast.io%2Fjanrubin%2Fguptiminer-hijacking-antivirus-updates-for-distributing-backdoors-and-casual-mining%2F&#038;format=xml" />
        <script type="text/javascript" id="avast-theme-switch">
			function getCookie(cname) {
			  var name = cname + "=";
			  var decodedCookie = decodeURIComponent(document.cookie);
			  var ca = decodedCookie.split(';');
			  for(var i = 0; i <ca.length; i++) {
				var c = ca[i];
				while (c.charAt(0) == ' ') {
				  c = c.substring(1);
				}
				if (c.indexOf(name) == 0) {
				  return c.substring(name.length, c.length);
				}
			  }
			  return "";
			}
			
			function setCookie(cname, cvalue, exdays) {
			  var d = new Date();
			  d.setTime(d.getTime() + (exdays*24*60*60*1000));
			  var expires = "expires="+ d.toUTCString();
			  document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
			}
			
			function toggleTheme()
			{
				theme_cookie = getCookie("avast_theme");
				if (!theme_cookie) {console.log("theme cookie is null");theme_cookie = "dark";}
				theme_cookie = (theme_cookie != "dark" ? 'dark' : 'light');
				setTheme(theme_cookie);
			}
			
			function setTheme(theme)
			{
				console.log("settin theme to " + theme);
				const theme_element = document.querySelector('#avast-theme-css');
				theme_cookie = (theme_cookie == "dark" ? 'dark' : 'light');
				theme_element.setAttribute('href', "https://decoded.avast.io/wp-content/themes/johannes-avast/css/" + theme_cookie + ".css");
				setCookie("avast_theme", theme_cookie, 10*365);
			}
			
			theme_cookie = getCookie("avast_theme");
			if (!theme_cookie) {theme_cookie = "dark";}
			setTheme(theme_cookie);
		</script>
    <link rel="icon" href="https://decoded.avast.io/wp-content/uploads/sites/2/2019/07/cropped-Asset-25ldpi-32x32.png" sizes="32x32" />
<link rel="icon" href="https://decoded.avast.io/wp-content/uploads/sites/2/2019/07/cropped-Asset-25ldpi-192x192.png" sizes="192x192" />
<link rel="apple-touch-icon" href="https://decoded.avast.io/wp-content/uploads/sites/2/2019/07/cropped-Asset-25ldpi-180x180.png" />
<meta name="msapplication-TileImage" content="https://decoded.avast.io/wp-content/uploads/sites/2/2019/07/cropped-Asset-25ldpi-270x270.png" />
<style type="text/css">div.nsl-container[data-align="left"] {
    text-align: left;
}

div.nsl-container[data-align="center"] {
    text-align: center;
}

div.nsl-container[data-align="right"] {
    text-align: right;
}


div.nsl-container div.nsl-container-buttons a[data-plugin="nsl"] {
    text-decoration: none;
    box-shadow: none;
    border: 0;
}

div.nsl-container .nsl-container-buttons {
    display: flex;
    padding: 5px 0;
}

div.nsl-container.nsl-container-block .nsl-container-buttons {
    display: inline-grid;
    grid-template-columns: minmax(145px, auto);
}

div.nsl-container-block-fullwidth .nsl-container-buttons {
    flex-flow: column;
    align-items: center;
}

div.nsl-container-block-fullwidth .nsl-container-buttons a,
div.nsl-container-block .nsl-container-buttons a {
    flex: 1 1 auto;
    display: block;
    margin: 5px 0;
    width: 100%;
}

div.nsl-container-inline {
    margin: -5px;
    text-align: left;
}

div.nsl-container-inline .nsl-container-buttons {
    justify-content: center;
    flex-wrap: wrap;
}

div.nsl-container-inline .nsl-container-buttons a {
    margin: 5px;
    display: inline-block;
}

div.nsl-container-grid .nsl-container-buttons {
    flex-flow: row;
    align-items: center;
    flex-wrap: wrap;
}

div.nsl-container-grid .nsl-container-buttons a {
    flex: 1 1 auto;
    display: block;
    margin: 5px;
    max-width: 280px;
    width: 100%;
}

@media only screen and (min-width: 650px) {
    div.nsl-container-grid .nsl-container-buttons a {
        width: auto;
    }
}

div.nsl-container .nsl-button {
    cursor: pointer;
    vertical-align: top;
    border-radius: 4px;
}

div.nsl-container .nsl-button-default {
    color: #fff;
    display: flex;
}

div.nsl-container .nsl-button-icon {
    display: inline-block;
}

div.nsl-container .nsl-button-svg-container {
    flex: 0 0 auto;
    padding: 8px;
    display: flex;
    align-items: center;
}

div.nsl-container svg {
    height: 24px;
    width: 24px;
    vertical-align: top;
}

div.nsl-container .nsl-button-default div.nsl-button-label-container {
    margin: 0 24px 0 12px;
    padding: 10px 0;
    font-family: Helvetica, Arial, sans-serif;
    font-size: 16px;
    line-height: 20px;
    letter-spacing: .25px;
    overflow: hidden;
    text-align: center;
    text-overflow: clip;
    white-space: nowrap;
    flex: 1 1 auto;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    text-transform: none;
    display: inline-block;
}

div.nsl-container .nsl-button-google[data-skin="dark"] .nsl-button-svg-container {
    margin: 1px;
    padding: 7px;
    border-radius: 3px;
    background: #fff;
}

div.nsl-container .nsl-button-google[data-skin="light"] {
    border-radius: 1px;
    box-shadow: 0 1px 5px 0 rgba(0, 0, 0, .25);
    color: RGBA(0, 0, 0, 0.54);
}

div.nsl-container .nsl-button-apple .nsl-button-svg-container {
    padding: 0 6px;
}

div.nsl-container .nsl-button-apple .nsl-button-svg-container svg {
    height: 40px;
    width: auto;
}

div.nsl-container .nsl-button-apple[data-skin="light"] {
    color: #000;
    box-shadow: 0 0 0 1px #000;
}

div.nsl-container .nsl-button-facebook[data-skin="white"] {
    color: #000;
    box-shadow: inset 0 0 0 1px #000;
}

div.nsl-container .nsl-button-facebook[data-skin="light"] {
    color: #1877F2;
    box-shadow: inset 0 0 0 1px #1877F2;
}

div.nsl-container .nsl-button-spotify[data-skin="white"] {
    color: #191414;
    box-shadow: inset 0 0 0 1px #191414;
}

div.nsl-container .nsl-button-apple div.nsl-button-label-container {
    font-size: 17px;
    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
}

div.nsl-container .nsl-button-slack div.nsl-button-label-container {
    font-size: 17px;
    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
}

div.nsl-container .nsl-button-slack[data-skin="light"] {
    color: #000000;
    box-shadow: inset 0 0 0 1px #DDDDDD;
}

div.nsl-container .nsl-button-tiktok[data-skin="light"] {
    color: #161823;
    box-shadow: 0 0 0 1px rgba(22, 24, 35, 0.12);
}


div.nsl-container .nsl-button-kakao {
    color: rgba(0, 0, 0, 0.85);
}

.nsl-clear {
    clear: both;
}

.nsl-container {
    clear: both;
}

.nsl-disabled-provider .nsl-button {
    filter: grayscale(1);
    opacity: 0.8;
}

/*Button align start*/

div.nsl-container-inline[data-align="left"] .nsl-container-buttons {
    justify-content: flex-start;
}

div.nsl-container-inline[data-align="center"] .nsl-container-buttons {
    justify-content: center;
}

div.nsl-container-inline[data-align="right"] .nsl-container-buttons {
    justify-content: flex-end;
}


div.nsl-container-grid[data-align="left"] .nsl-container-buttons {
    justify-content: flex-start;
}

div.nsl-container-grid[data-align="center"] .nsl-container-buttons {
    justify-content: center;
}

div.nsl-container-grid[data-align="right"] .nsl-container-buttons {
    justify-content: flex-end;
}

div.nsl-container-grid[data-align="space-around"] .nsl-container-buttons {
    justify-content: space-around;
}

div.nsl-container-grid[data-align="space-between"] .nsl-container-buttons {
    justify-content: space-between;
}

/* Button align end*/

/* Redirect */

#nsl-redirect-overlay {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    position: fixed;
    z-index: 1000000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    backdrop-filter: blur(1px);
    background-color: RGBA(0, 0, 0, .32);;
}

#nsl-redirect-overlay-container {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    background-color: white;
    padding: 30px;
    border-radius: 10px;
}

#nsl-redirect-overlay-spinner {
    content: '';
    display: block;
    margin: 20px;
    border: 9px solid RGBA(0, 0, 0, .6);
    border-top: 9px solid #fff;
    border-radius: 50%;
    box-shadow: inset 0 0 0 1px RGBA(0, 0, 0, .6), 0 0 0 1px RGBA(0, 0, 0, .6);
    width: 40px;
    height: 40px;
    animation: nsl-loader-spin 2s linear infinite;
}

@keyframes nsl-loader-spin {
    0% {
        transform: rotate(0deg)
    }
    to {
        transform: rotate(360deg)
    }
}

#nsl-redirect-overlay-title {
    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen-Sans, Ubuntu, Cantarell, "Helvetica Neue", sans-serif;
    font-size: 18px;
    font-weight: bold;
    color: #3C434A;
}

#nsl-redirect-overlay-text {
    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen-Sans, Ubuntu, Cantarell, "Helvetica Neue", sans-serif;
    text-align: center;
    font-size: 14px;
    color: #3C434A;
}

/* Redirect END*/</style><style type="text/css">/* Notice fallback */
#nsl-notices-fallback {
    position: fixed;
    right: 10px;
    top: 10px;
    z-index: 10000;
}

.admin-bar #nsl-notices-fallback {
    top: 42px;
}

#nsl-notices-fallback > div {
    position: relative;
    background: #fff;
    border-left: 4px solid #fff;
    box-shadow: 0 1px 1px 0 rgba(0, 0, 0, .1);
    margin: 5px 15px 2px;
    padding: 1px 20px;
}

#nsl-notices-fallback > div.error {
    display: block;
    border-left-color: #dc3232;
}

#nsl-notices-fallback > div.updated {
    display: block;
    border-left-color: #46b450;
}

#nsl-notices-fallback p {
    margin: .5em 0;
    padding: 2px;
}

#nsl-notices-fallback > div:after {
    position: absolute;
    right: 5px;
    top: 5px;
    content: '\00d7';
    display: block;
    height: 16px;
    width: 16px;
    line-height: 16px;
    text-align: center;
    font-size: 20px;
    cursor: pointer;
}</style>		<style type="text/css" id="wp-custom-css">
			.wp-block-image.has-custom-border img, .wp-block-image img {
    box-sizing: border-box;
    border: 0px solid var(--color_border) !important;
}

.hljs, .hljs-subst {
	color: lightgray;
}		</style>
		<style id="kirki-inline-styles"></style>	</head>

	<body class="post-template-default single single-post postid-8115 single-format-standard wp-embed-responsive sfly_guest-author-post johannes-cover-indent johannes-sidebar-none white-bg-alt-1 white-bg-alt-2 johannes-header-labels-hidden johannes-footer-margin johannes-v_1_1_3 johannes-child">

	<div class="johannes-wrapper">

	    		    
		    <header class="johannes-header johannes-header-main d-none d-lg-block">
		    	
		        <div class="header-middle header-layout-11">
    <div class="container d-flex justify-content-between align-items-center">
        <div class="slot-l">
            <div class="johannes-site-branding">
    <span class="site-title h1 "><a href="https://decoded.avast.io/" rel="home"><picture class="johannes-logo"><source media="(min-width: 1050px)" srcset="https://wordpress-salat-test.storage.googleapis.com/sites/2/2019/06/Asset-22ldpi.png, https://storage.googleapis.com/wordpress-salat-test/sites/2/2019/06/Asset-22ldpi-1.png 2x"><source srcset="https://wordpress-salat-test.storage.googleapis.com/sites/2/2019/06/Asset-22ldpi.png"><img src="https://wordpress-salat-test.storage.googleapis.com/sites/2/2019/06/Asset-22ldpi.png" alt="Avast Threat Labs"></picture></a></span></div>        </div>
		<div class="slot-r">
			<div class="slot-r-top">
									    <nav class="menu-main-menu-container"><ul id="menu-main-menu" class="johannes-menu johannes-menu-primary"><li id="menu-item-367" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-367 category-mobile"><a href="https://decoded.avast.io/category/mobile/">Mobile</a></li>
<li id="menu-item-368" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-368 category-network"><a href="https://decoded.avast.io/category/network/">Network</a></li>
<li id="menu-item-369" class="menu-item menu-item-type-taxonomy menu-item-object-category current-post-ancestor current-menu-parent current-post-parent menu-item-369 category-pc"><a href="https://decoded.avast.io/category/pc/">PC</a></li>
<li id="menu-item-370" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-370 category-iot"><a href="https://decoded.avast.io/category/iot/">IoT</a></li>
<li id="menu-item-371" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-371"><a href="https://www.avast.com/en-us/careers">Careers</a></li>
</ul></nav>																			<ul class="johannes-menu-action johannes-hamburger">
	<li><a href="javascript:void(0);"><span class="header-el-label">Menu</span><i class="jf jf-menu"></i></a></li>
</ul>
												</div>
			<div class="slot-r-bottom">
															<ul class="johannes-menu-action johannes-search">
	<li><form class="search-form" action="https://decoded.avast.io/" method="get">
	<input name="s" type="text" value="" placeholder="Type here to search..." />
		<button type="submit">Search</button>
</form>
</li>
</ul>												</div>
		</div>
    </div>
</div>		    	
		    </header>

		    <div class="johannes-header header-mobile d-lg-none">
    <div class="container d-flex justify-content-between align-items-center">
        <div class="slot-l">
            <div class="johannes-site-branding">
    <span class="site-title h1 "><a href="https://decoded.avast.io/" rel="home"><picture class="johannes-logo"><source media="(min-width: 1050px)" srcset="https://wordpress-salat-test.storage.googleapis.com/sites/2/2019/06/Asset-22ldpi.png"><source srcset="https://wordpress-salat-test.storage.googleapis.com/sites/2/2019/06/Asset-22ldpi.png"><img src="https://wordpress-salat-test.storage.googleapis.com/sites/2/2019/06/Asset-22ldpi.png" alt="Avast Threat Labs"></picture></a></span></div>        </div>
        <div class="slot-r">
            <ul class="johannes-menu-action johannes-hamburger">
	<li><a href="javascript:void(0);"><span class="header-el-label">Menu</span><i class="jf jf-menu"></i></a></li>
</ul>
        </div>
    </div>
</div>
		    
	    

            <div class="johannes-section category-pill johannes-cover johannes-bg-alt-2 johannes-section-margin-alt size-johannes-single-3">
    
                <div class="section-bg">
            <img width="1920" height="500" src="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/AdobeStock_679731378-1920x500.jpeg" class="attachment-johannes-single-3 size-johannes-single-3 wp-post-image" alt="" />                        </div>
        
    <div class="container">
        <div class="section-head johannes-content-alt section-head-alt">
                        <h1 class="entry-title">GuptiMiner: Hijacking Antivirus Updates for Distributing Backdoors and Casual Mining</h1>                            <div class="entry-meta">
                    <span class="meta-item meta-author"><span class="vcard author">by <a href="">Jan Rubín and Milánek</a></span></span><span class="meta-item meta-date"><span class="updated">April 23, 2024</span></span><span class="meta-item meta-rtime">50 min read</span>                </div>
                        
        </div>
    </div>
</div>


<div class="johannes-section">
    <div class="container">
        <div class="section-content row justify-content-center">
            
            
            <div class="col-12 col-lg-8 single-md-content col-md-special johannes-order-1 ">
                 
                <article id="post-8115" class="post-8115 post type-post status-publish format-standard has-post-thumbnail hentry tag-antivirus tag-backdoor tag-cryptomining tag-kimsuky tag-malware tag-mitm tag-xmrig category-pc">

                    
                    
                    
                    <div class="entry-content entry-single clearfix">
                        
<h2 class="wp-block-heading">Key Points</h2>



<ul class="wp-block-list">
<li>Avast discovered and analyzed a malware campaign hijacking an eScan antivirus update mechanism to distribute backdoors and coinminers</li>



<li>Avast disclosed the vulnerability to both eScan antivirus and India CERT. On 2023-07-31, eScan confirmed that the issue was fixed and successfully resolved</li>



<li>The campaign was orchestrated by a threat actor with possible ties to Kimsuky</li>



<li>Two different types of backdoors have been discovered, targeting large corporate networks</li>



<li>The final payload distributed by GuptiMiner was also XMRig</li>
</ul>



<h2 class="wp-block-heading">Introduction</h2>



<p>We’ve been tracking a curious one here. Firstly, GuptiMiner is a highly sophisticated threat that uses an interesting infection chain along with a couple of techniques that include performing DNS requests to the attacker’s DNS servers, performing sideloading, extracting payloads from innocent-looking images, signing its payloads with a custom trusted root anchor certification authority, among others.</p>



<p>The main objective of GuptiMiner is to distribute backdoors within big corporate networks. We’ve encountered two different variants of these backdoors: The first is an enhanced build of PuTTY Link, providing SMB scanning of the local network and enabling lateral movement over the network to potentially vulnerable Windows 7 and Windows Server 2008 systems on the network. The second backdoor is multi-modular, accepting commands from the attacker to install more modules as well as focusing on scanning for stored private keys and cryptowallets on the local system.</p>



<p>Interestingly, GuptiMiner also distributes XMRig on the infected devices, which is a bit unexpected for such a thought-through operation.</p>



<p>The actors behind GuptiMiner have been capitalizing on an insecurity within an update mechanism of Indian antivirus vendor eScan to distribute the malware by performing a man-in-the-middle attack. We disclosed this security vulnerability to both eScan and the India CERT and received confirmation on 2023-07-31 from eScan that the issue was fixed and successfully resolved.</p>



<p>GuptiMiner is a long-standing malware, with traces of it dating back to 2018 though it is likely that it is even older. We have also found that GuptiMiner has possible ties to Kimsuky, a notorious North Korean APT group, by observing similarities between Kimsuky keylogger and parts of the GuptiMiner operation.<br>In this analysis, we will cover the GuptiMiner’s features and its evolution over time. We will also denote in which samples the particular features are contained or introduced to support the overall comprehension in the vast range of IoCs.</p>



<p>It is also important to note that since the users rarely install more than one AV on their machine, we may have limited visibility into GuptiMiner’s activity and its overall scope. Because of this, we might be looking only at the tip of the iceberg and the true scope of the entire operation may still be subject to discovery.</p>



<h2 class="wp-block-heading">Infection Chain</h2>



<p>To illustrate the complexity of the whole infection, we’ve provided a flow chart containing all parts of the chain. Note that some of the used filenames and/or workflows can slightly vary depending on the specific version of GuptiMiner, but the flowchart below illustrates the overall process.</p>



<p>The whole process starts with eScan requesting an update from the update server where an unknown MitM intercepts the download and swaps the update package with a malicious one. Then, eScan unpacks and loads the package and a DLL is sideloaded by eScan clean binaries. This DLL enables the rest of the chain, following with multiple shellcodes and intermediary PE loaders.</p>



<p>Resulted GuptiMiner consists of using XMRig on the infected machine as well as introducing backdoors which are activated when deployed in large corporate networks.</p>


<div class="wp-block-image">
<figure class="aligncenter size-large"><a href="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-58.png"><img decoding="async" width="579" height="1024" src="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-58-579x1024.png" alt="" class="wp-image-8511" srcset="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-58-579x1024.png 579w, https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-58-170x300.png 170w, https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-58-768x1358.png 768w, https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-58-868x1536.png 868w, https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-58-1158x2048.png 1158w, https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-58.png 2024w" sizes="(max-width: 579px) 100vw, 579px" /></a><figcaption class="wp-element-caption"><em>GuptiMiner’s infection chain</em></figcaption></figure></div>


<h2 class="wp-block-heading">Evolution and Timelines</h2>



<p>GuptiMiner has been active since at least 2018. Over the years, the developers behind it have improved the malware significantly, bringing new features to the table. We will describe the specific features in detail in respective subsections.</p>



<p>With that said, we also wanted to illustrate the significant IoCs in a timeline representation, how they changed over time – focusing on mutexes, PDBs, and used domains. These timelines were created based on scanning for the IoCs over a large sample dataset, taking the first and last compilation timestamps of the samples, then forming the intervals. Note that the scanned dataset is larger than listed IoCs in the <a href="#ioc">IoC section</a>. For more detailed list of IoCs, please visit our <a href="https://github.com/avast/ioc/tree/master/GuptiMiner" target="_blank" rel="noreferrer noopener">GitHub</a>.</p>



<h3 class="wp-block-heading" id="domains-in-time">Domains in Time</h3>



<p>In general, GuptiMiner uses the following types of domains during its operations:&nbsp;</p>



<ul class="wp-block-list">
<li><code>Malicious DNS</code> – GuptiMiner hosts their own DNS servers for serving true destination domain addresses of C&amp;C servers via DNS TXT responses&nbsp;</li>



<li><code>Requested domains</code> – Domains for which the malware queries the DNS servers for&nbsp;</li>



<li><code>PNG download</code> – Servers for downloading payloads in the form of PNG files. These PNG files are valid images (a logo of T-Mobile) that contain appended shellcodes at their end&nbsp;</li>



<li><code>Config mining pool</code> – GuptiMiner contains two different configurations of mining pools. One is hardcoded directly in the XMRig config which is denoted in this group&nbsp;</li>



<li><code>Modified mining pool</code> – GuptiMiner has the ability to modify the pre-defined mining pools which is denoted in this group&nbsp;</li>



<li><code>Final C&amp;C</code> – Domains that are used in the last backdoor stage of GuptiMiner, providing additional malware capabilities in the backdoored systems&nbsp;</li>



<li><code>Other</code> – Domains serving different purposes, e.g., used in scripts&nbsp;</li>
</ul>



<p>Note that as the malware connects to the malicious DNS servers directly, the DNS protocol is completely separated from the DNS network. Thus, no legitimate DNS server will ever see the traffic from this malware. The DNS protocol is used here as a functional equivalent of telnet. Because of this, this technique is not a DNS spoofing since spoofing traditionally happens on the DNS network.&nbsp;</p>



<p>Furthermore, the fact that the servers for which GuptiMiner asks for in the <code>Requested domain</code> category actually exist is purely a coincidence, or rather a network obfuscation to confuse network monitoring tools and analysts.</p>


<div class="wp-block-image">
<figure class="aligncenter size-large"><a href="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-2.png"><img decoding="async" width="750" height="1024" src="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-2-750x1024.png" alt="" class="wp-image-8395" srcset="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-2-750x1024.png 750w, https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-2-220x300.png 220w, https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-2-768x1049.png 768w, https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-2-1125x1536.png 1125w, https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-2.png 1262w" sizes="(max-width: 750px) 100vw, 750px" /></a><figcaption class="wp-element-caption"><em>Timeline illustrating GuptiMiner’s usage of domains in time</em></figcaption></figure></div>


<p>From this timeline, it is apparent that authors behind GuptiMiner realize the correct setup of their DNS servers is crucial for the whole chain to work properly. Because of this, we can observe the biggest rotation and shorter timeframes are present in the <code>Malicious DNS</code> group.&nbsp;</p>



<p>Furthermore, since domains in the <code>Requested domain</code> group are irrelevant (at least from the technical viewpoint), we can notice that the authors are reusing the same domain names for longer periods of time.&nbsp;</p>



<h3 class="wp-block-heading" id="mutexes-in-time">Mutexes in Time&nbsp;</h3>



<p>Mutexes help ensure correct execution flow of a software and malware authors often use these named objects for the same purpose. Since 2018, GuptiMiner has changed its mutexes multiple times. Most significantly, we can notice a change since 2021 where the authors changed the mutexes to reflect the compilation/distribution dates of their new versions.&nbsp;</p>


<div class="wp-block-image">
<figure class="aligncenter size-large"><a href="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-3.png"><img loading="lazy" decoding="async" width="975" height="1024" src="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-3-975x1024.png" alt="" class="wp-image-8398" srcset="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-3-975x1024.png 975w, https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-3-286x300.png 286w, https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-3-768x807.png 768w, https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-3.png 1270w" sizes="(max-width: 975px) 100vw, 975px" /></a><figcaption class="wp-element-caption"><em>Timeline illustrating GuptiMiner’s usage of mutexes in time</em></figcaption></figure></div>


<p>An attentive reader can likely observe two takeaways: The first is the apparent outliers in usage of <code>MIVOD_6</code>, <code>SLDV15</code>, <code>SLDV13</code>, and <code>Global\Wed Jun&nbsp; 2 09:43:03 2021</code>. According to our data, these mutexes were truly reused multiple times in different builds, creating larger timeframes than expected.&nbsp;</p>



<p>Another point is the re-introduction of <code>PROCESS_</code> mutex near the end of last year. At this time, the authors reintroduced the mutex with the string in UTF-16 encoding, which we noted separately.</p>



<h3 class="wp-block-heading">PDBs in Time&nbsp;</h3>



<p>With regard to debugging symbols, the authors of GuptiMiner left multiple PDB paths in their binaries. Most of the time, they contain strings like <code>MainWork</code>, <code>Projects</code>, etc.&nbsp;</p>


<div class="wp-block-image">
<figure class="aligncenter size-large"><a href="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-4.png"><img loading="lazy" decoding="async" width="1024" height="340" src="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-4-1024x340.png" alt="" class="wp-image-8400" srcset="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-4-1024x340.png 1024w, https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-4-300x100.png 300w, https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-4-768x255.png 768w, https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-4-1536x510.png 1536w, https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-4-2048x680.png 2048w" sizes="(max-width: 1024px) 100vw, 1024px" /></a><figcaption class="wp-element-caption"><em>Timeline illustrating PDBs contained in GuptiMiner in time</em></figcaption></figure></div>


<h2 class="wp-block-heading" id="installation-process">Stage 0 – Installation Process&nbsp;</h2>



<h3 class="wp-block-heading">Intercepting the Updates</h3>



<p>Everyone should update their software, right? Usually, the individual either downloads the new version manually from the official vendor’s site, or – preferably – the software itself performs the update automatically without much thought or action from the user. But what happens when someone is able to hijack this automatic process?&nbsp;</p>



<p>Our investigation started as we began to observe some of our users were receiving unusual responses from otherwise legitimate requests, for example on:&nbsp;</p>



<p><code>http://update3[.]mwti[.]net/pub/update/updll3.dlz</code></p>



<p>This is truly a legitimate URL to download the <code>updll3.dlz</code> file which is, under normal circumstances, a legitimate archive containing the update of the eScan antivirus. However, we started seeing suspicious behavior on some of our clients, originating exactly from URLs like this.&nbsp;</p>



<p>What we uncovered was that the actors behind GuptiMiner were performing man-in-the-middle (MitM) to download an infected installer on the victim’s PC, instead of the update. Unfortunately, we currently don’t have information on how the MitM was performed. We assume that some kind of pre-infection had to be present on the victim’s device or their network, causing the MitM.&nbsp;</p>



<h3 class="wp-block-heading">Update Package</h3>



<p><code><em>c3122448ae3b21ac2431d8fd523451ff25de7f6e399ff013d6fa6953a7998fa3</em><br><em>(version.dll, 2018-04-19 09:47:41 UTC)</em></code></p>



<p>Throughout the analysis, we will try to describe not just the flow of the infection chain, malware techniques, and functionalities of the stages, but we will also focus on different versions, describing how the malware authors developed and changed GuptiMiner over time.</p>



<p>The first GuptiMiner sample that we were able to find was compiled on Tuesday, 2018-04-19 09:47:41 and it was uploaded to VirusTotal the day after from India, followed by an upload from Germany:<br><code>c3122448ae3b21ac2431d8fd523451ff25de7f6e399ff013d6fa6953a7998fa3</code></p>


<div class="wp-block-image">
<figure class="aligncenter size-full"><a href="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-5.png"><img loading="lazy" decoding="async" width="561" height="226" src="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-5.png" alt="" class="wp-image-8403" srcset="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-5.png 561w, https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-5-300x121.png 300w" sizes="(max-width: 561px) 100vw, 561px" /></a></figure></div>


<p>This file was named <code>C:\Program Files\eScan\VERSION.DLL</code> which points out the target audience is truly eScan users and it comes from an update package downloaded by the AV.&nbsp;</p>



<p>Even though this version lacked several features present in the newer samples, the installation process is still the same, as follows:&nbsp;</p>



<ol class="wp-block-list" start="1">
<li>The eScan updater triggers the update&nbsp;</li>



<li>The downloaded package file is replaced with a malicious one on the wire because of a missing HTTPS encryption (MitM is performed)&nbsp;</li>



<li>A malicious package <code>updll62.dlz</code> is downloaded and unpacked by eScan updater&nbsp;</li>



<li>The contents of the package contain a malicious DLL (usually called <code>version.dll</code>) that is sideloaded by eScan. Because of the sideloading, the DLL runs with the same privileges as the source process – eScan – and it is loaded next time eScan runs, usually after a system restart&nbsp;</li>



<li>If a mutex is not present in the system (depends on the version, e.g. <code>Mutex_ONLY_ME_V1</code>), the malware searches for <code>services.exe</code> process and injects its next stage into the first one it can find&nbsp;</li>



<li>Cleanup is performed, removing the update package&nbsp;</li>
</ol>



<p>The malicious DLL contains additional functions which are not present in the clean one. Thankfully the names are very verbose, so no analysis was required for most of them. The list of the functions can be seen below.</p>


<div class="wp-block-image">
<figure class="aligncenter size-full"><a href="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-6.png"><img loading="lazy" decoding="async" width="519" height="510" src="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-6.png" alt="" class="wp-image-8405" srcset="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-6.png 519w, https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-6-300x295.png 300w" sizes="(max-width: 519px) 100vw, 519px" /></a><figcaption class="wp-element-caption"><em>Additional exported functions</em></figcaption></figure></div>


<p>Some functions, however, are unique. For example, the function <code>X64Call</code> provides Heaven’s gate, i.e., it is a helper function for running x64 code inside a 32-bit process on a 64-bit system. The malware needs this to be able to run the injected shellcode depending on the OS version and thus the bitness of the <code>services.exe</code> process.&nbsp;</p>


<div class="wp-block-image">
<figure class="aligncenter size-full"><a href="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-14.png"><img loading="lazy" decoding="async" width="668" height="1192" src="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-14.png" alt="" class="wp-image-8419" srcset="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-14.png 668w, https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-14-168x300.png 168w, https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-14-574x1024.png 574w" sizes="(max-width: 668px) 100vw, 668px" /></a><figcaption class="wp-element-caption"><em>Heaven’s gate to run the shellcode in x64 environment when required</em></figcaption></figure></div>


<p>To keep the original eScan functionality intact, the malicious <code>version.dll</code> also needs to handle the original legacy <code>version.dll</code> functionality. This is done by forwarding all the exported functions from the original DLL. When a call of the legacy DLL function is identified, GuptiMiner resolves the original function and calls it afterwards.&nbsp;</p>


<div class="wp-block-image">
<figure class="aligncenter size-full"><a href="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-8.png"><img loading="lazy" decoding="async" width="518" height="228" src="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-8.png" alt="" class="wp-image-8408" srcset="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-8.png 518w, https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-8-300x132.png 300w" sizes="(max-width: 518px) 100vw, 518px" /></a><figcaption class="wp-element-caption"><em>Resolving function that ensures all the original <code>version.dll</code> exports are available</em></figcaption></figure></div>


<h3 class="wp-block-heading">Injected Shellcode in services.exe&nbsp;</h3>



<p>After the shellcode is injected into <code>services.exe</code>, it serves as a loader of the next stage. This is done by reading an embedded PE file in a plaintext form.&nbsp;</p>


<div class="wp-block-image">
<figure class="aligncenter size-full"><a href="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-9.png"><img loading="lazy" decoding="async" width="550" height="287" src="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-9.png" alt="" class="wp-image-8409" srcset="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-9.png 550w, https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-9-300x157.png 300w" sizes="(max-width: 550px) 100vw, 550px" /></a><figcaption class="wp-element-caption"><em>Embedded PE file loaded by the shellcode</em></figcaption></figure></div>


<p>This PE file is loaded by standard means, but additionally, the shellcode also destroys the PE’s DOS header and runs it by calling its entry point, as well as it removes the embedded PE from the original location memory altogether.&nbsp;</p>



<h4 class="wp-block-heading">Command Line Manipulation&nbsp;</h4>



<p>Across the entire GuptiMiner infection chain, every shellcode which is loading and injecting PE files also manipulates the command line of the current process. This is done by manipulating the result of <code>GetCommandLineA/W</code> which changes the resulted command line displayed for example in Task Manager.&nbsp;</p>


<div class="wp-block-image">
<figure class="aligncenter size-full"><a href="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-11.png"><img loading="lazy" decoding="async" width="1127" height="581" src="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-11.png" alt="" class="wp-image-8412" srcset="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-11.png 1127w, https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-11-300x155.png 300w, https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-11-1024x528.png 1024w, https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-11-768x396.png 768w" sizes="(max-width: 1127px) 100vw, 1127px" /></a><figcaption class="wp-element-caption"><em>Command line manipulation function</em></figcaption></figure></div>


<p>After inspecting this functionality, we believe it either doesn’t work as the authors intended or we don’t understand its usage. Long story short, the command line is changed in such a way that everything before the first <code>--parameter</code> is skipped, and this parameter is then appended to the process name.&nbsp;</p>



<p>To illustrate this, we could take a command:<br><code>notepad.exe param1 --XX param2</code><br>which will be transformed into:<br><code>notepad.exeXX param2</code>&nbsp;</p>



<p>However, we <strong>have not seen</strong> a usage like <code>power --shell.exe param1 param2</code> that would result into:<br><code>powershell.exe param1 param2</code><br>nor have we seen any concealment of parameters (like usernames and passwords for XMRig), a type of behavior we would anticipate when encountering something like this. In either case, this functionality is obfuscating the command line appearance, which is worth mentioning. An interested reader can play around with the functionality at the awesome godbolt.org <a href="https://godbolt.org/#z:OYLghAFBqd5QCxAYwPYBMCmBRdBLAF1QCcAaPECAMzwBtMA7AQwFtMQByARg9KtQYEAysib0QXACx8BBAKoBnTAAUAHpwAMvAFYTStJg1DIApACYAQuYukl9ZATwDKjdAGFUtAK4sGIM6SuADJ4DJgAcj4ARpjEIJIAzKQADqgKhE4MHt6%2B/ilpGQIhYZEsMXGJtpj2jgJCBEzEBNk%2BfgF2mA6Z9Y0ExRHRsfFJCg1NLbntY32hA2VDiQCUtqhexMjsHOYJocjeWADUJgluo8ShwAB0CMfYJhoAgtu7%2B5hHJ2wsJACe17f3TzMOwYey8h2OpwI%2BFQfwSd0eANCBAOBxYhjwyS8BgImAA%2BoZ0nhcWgWGiGOhcbRZhBkAhGgcAFQkskUqlhRYAkwAdisjxRSIOeGOFgOAHpRUcAKwWYgKZLWMwaG6SgAiUplUWSAFozAAOZUqgH8wQHGiygi4uVMDb4qg44i45LEVAbBQKXHMNjCsUSkzS2XyyxmSQG9XETU6kN%2Bw18wUms2jXHoJgKG4JEXisNyhX66NhiOKg1Go4I2PFhMW5Op95qjTC8t4c2W5LWvFMO2xR3O13uz1vY61%2Bux/jEA4QQU1g519MHZmGVmzP0WIWq73Wax4A4css84sozNarV7wVUMcHMBgCtJlMII5mABs5nvs9QpPnlMX0pXaoHA/PHC1MAODvR8HxfN9yQ/MIl03awDi4PNfwSNUgMA4DtweFEsNNRtEyrW8/yFdNjzwU9xwvK8rRtdt7S7F1MDdD1WH7B8n3AlkoMwGDEOQv8gP/EC2KZV8OLZN4Lz4rYzDMIDjxRbk3AU89L1wi0qLbDsHSdejGL7QSwLnSCxO41Ua0kgSnzYwyF2gr8Di1eCeMNZD/3MGTgMssDhIgmz%2B14lzZOk/iMOw7leUw7CcKbdTbVo7SeyYthJyI8LQq5GMIu5DL%2BTI5Sr3wo4uUUoq8tU5tW1izt4oY3tmK3Y9iEwAg1gYeCgiCIcIs%2BL4ADdMAgY8n2szil0oltqM0uiEr7aNSEGh9huM6V8pvO8RTMWaSPsqLEximiqu7GrEreBz7w5YjY0a5riFarh2s6rLOUeAU0VCCAkVIWc6WIBkGQwsLj1pelkBYdAlycu8zAYVAcRbdBLkwVQ3hbYhWAULh7K1AANLGDhRtGNslNwGDczrsKdJEqAG6TzElBQ3M%2BkH0HO1KsLJDEsSYHF8QYQliRE98xJpUGWePCnBCptzD1uO86b9YmGdnEWHtLJ50o4ZZaE4SVeD8DgtFIVBOEUyw4IUVZ1hYhIeFIAhNA15YAGsQASBJLldj3Pa9%2B99E4SRdftw3OF4BQQA0W37eWOBYCQElkjoWJyEoOOE7iYAuASAIaFoe1Q4gKJA6iUJGm%2BTgbaL5hiG%2BAB5KJtE6O3uF4ZlGAIauGFoUv9d4LAoi8YA3DEWhQ6b0gsDJYBxG7sfGwbvA%2BpHg3Ec6LwcUDpFqkDqkolRquPCwQOCHOFgy41vgDGABQADU8EwAB3avkkYU%2BZEEEQxHYKRX/kJQ1ED3QuD6EMMYdclh9B4CiKHSAyxUDJFqLzTgWpq5mF4KgPqxBzhYCgRAZYHQujOAgK4CYfhAHBFmKUcoehUjpHgcQqhBR4H9AoUMQBeD4E9HGJ4Voeg2HdGmEwwYcRWHTDocI3oAj5hCNwRbDYEhNbawDtPI2wFVC6nvFqe8kgDjAGQMgeCbszBjlwIQEgd5raLF4I3LQiwnYuzdl7BxHsfZaw4P7UgesDbKJDmHCO3co4wEQCAVYBBMQECTjSV88d6DEHCMxTgqj1GaO0bo/RlwUGBHwEQTBeh%2BBv1EOIL%2BuSf4qHUNPABpA76o2SKfeRHAdbuMDso6uq9QkHFQKeBJGitE6L0RnNJY4PAsCibEMxXALG%2BOsbY127tHEON9q4xRnjg62B8VYh28z0keNQcstZNjSDoPSM4SQQA%3D" target="_blank" rel="noreferrer noopener">here</a>.&nbsp;</p>



<h3 class="wp-block-heading" id="code-virtualization">Code Virtualization&nbsp;</h3>



<p><code><em>7a1554fe1c504786402d97edecc10c3aa12bd6b7b7b101cfc7a009ae88dd99c6</em><br><em>(version.dll, 2018-06-12 03:30:01)</em>&nbsp;</code></p>



<p>Another version with a mutex <code>ONLY_ME_V3</code> introduced a code virtualization. This can be observed by an additional section in the PE file called <code>.v_lizer</code>. This section was also renamed a few times in later builds.</p>


<div class="wp-block-image">
<figure class="aligncenter size-full"><a href="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-16.png"><img loading="lazy" decoding="async" width="1232" height="322" src="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-16.png" alt="" class="wp-image-8423" srcset="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-16.png 1232w, https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-16-300x78.png 300w, https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-16-1024x268.png 1024w, https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-16-768x201.png 768w" sizes="(max-width: 1232px) 100vw, 1232px" /></a><figcaption class="wp-element-caption"><em>A new section with the virtualized code is called <code>.v_lizer</code></em></figcaption></figure></div>


<p>Thankfully the obfuscation is rather weak, provided the shellcode as well as the embedded PE file are still in the plaintext form.&nbsp;</p>



<p>Furthermore, the authors started to distinguish between the <code>version.dll</code> stage and the PE file loaded by the shellcode by additional mutex. Previously, both stages used the shared mutex <code>ONLY_ME_Vx</code>, now the sideloading uses <code>MTX_V101</code> as a mutex.</p>



<h2 class="wp-block-heading" id="installation-improvements">Stage 0.9 – Installation Improvements</h2>



<p><code><em>3515113e7127dc41fb34c447f35c143f1b33fd70913034742e44ee7a9dc5cc4c</em><br><em>(2021-03-28 14:41:07 UTC)</em>&nbsp;</code></p>



<p>The installation process has undergone multiple improvements over time, and, since it is rather different compared to older variants, we decided to describe it separately as an intermediary Stage 0.9. With these improvements, the authors introduced a usage of scheduled tasks, WMI events, two differently loaded next stages (<a href="#png-loader">Stage 1 – PNG loader</a>), turning off Windows Defender, and installing crafted certificates to Windows.&nbsp;</p>



<p>There are also multiple files dropped at this stage, enabling further sideloading by the malware. These files are clean and serve exclusively for sideloading purposes. The malicious DLLs that are being sideloaded, are two PNG loaders (Stage 1):&nbsp;</p>



<ul class="wp-block-list">
<li><code>de48abe380bd84b5dc940743ad6727d0372f602a8871a4a0ae2a53b15e1b1739 *atiadlxx.dll</code>&nbsp;</li>



<li><code>e0dd8af1b70f47374b0714e3b368e20dbcfa45c6fe8f4a2e72314f4cd3ef16ee *BrLogAPI.dll</code>&nbsp;</li>
</ul>



<h3 class="wp-block-heading">WMI Events&nbsp;</h3>



<p><code><em>de48abe380bd84b5dc940743ad6727d0372f602a8871a4a0ae2a53b15e1b1739</em><br><em>(atiadlxx.dll, 2021-03-28 14:30:11 UTC)</em>&nbsp;</code></p>



<p>At this stage, WMI events are used for loading the first of the PNG loaders. This loader is extracted to a path:<br><code>C:\PROGRAMDATA\AMD\CNext\atiadlxx.dll</code>&nbsp;</p>



<p>Along with it, additional clean files are dropped, and they are used for sideloading, in either of these locations (can be both):&nbsp;<br><code>C:\ProgramData\AMD\CNext\slsnotif.exe&nbsp;<br>C:\ProgramData\AMD\CNext\msvcr120.dll</code><br>or<br><code>C:\Program Files (x86)\AMD\CNext\CCCSlim\slsnotify.exe<br>C:\Program Files (x86)\AMD\CNext\CCCSlim\msvcr120.dll&nbsp;</code></p>



<p>The clean file <code>slsnotify.exe</code> is then registered via WMI event in such a way that it is executed when these conditions are met:</p>


<div class="wp-block-image">
<figure class="aligncenter size-full"><a href="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-17.png"><img loading="lazy" decoding="async" width="850" height="192" src="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-17.png" alt="" class="wp-image-8424" srcset="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-17.png 850w, https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-17-300x68.png 300w, https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-17-768x173.png 768w" sizes="(max-width: 850px) 100vw, 850px" /></a><figcaption class="wp-element-caption"><em>WMI conditions to trigger sideloading</em></figcaption></figure></div>


<p>In other words, the sideloading is performed on a workday in either January, July, or November. The numbers represented by <code>%d</code> are randomly selected values. The two possibilities for the hour are exactly two hours apart and fall within the range of 11–16 or 13–18 (inclusive). This conditioning further underlines the longevity of GuptiMiner operations.</p>



<h3 class="wp-block-heading">Scheduled Tasks</h3>



<p><code><em>e0dd8af1b70f47374b0714e3b368e20dbcfa45c6fe8f4a2e72314f4cd3ef16ee</em><br><em>(BrLogAPI.dll, 2021-03-28 14:10:27 UTC)</em></code></p>



<p>Similarly to the WMI events, GuptiMiner also drops a clean binary for sideloading at this location:<br><code>C:\ProgramData\Brother\Brmfl14c\BrRemPnP.exe</code>&nbsp;</p>



<p>The malicious PNG loader is then placed in one (or both) of these locations:<br><code>C:\Program Files (x86)\Brother\Brmfl14c\BrLogAPI.dll<br>C:\Program Files\Brother\Brmfl14c\BrLogAPI.dll&nbsp;</code></p>



<p>The scheduled task is created by invoking a Task Scheduler. The scheduled task has these characteristics:&nbsp;</p>



<ul class="wp-block-list">
<li>It is created and named as <code>C:\Windows\System32\Tasks\Microsoft\Windows\Brother\Brmfl14c</code>&nbsp;</li>



<li>Executes: <code>C:\ProgramData\Brother\Brmfl14c\BrRemPnP.exe</code>&nbsp;</li>



<li>The execution is done under a folder containing the to-be-sideloaded DLL, e.g.: <code>C:\Program Files (x86)\Brother\Brmfl14c\</code>&nbsp;</li>



<li>The execution is performed with every boot (<code>TASK_TRIGGER_BOOT</code>) with <code>SYSTEM</code> privileges&nbsp;</li>
</ul>



<h3 class="wp-block-heading">Deploy During Shutdown</h3>



<p><em><code>3515113e7127dc41fb34c447f35c143f1b33fd70913034742e44ee7a9dc5cc4c<br>(2021-03-28 14:41:07 UTC)</code></em></p>



<p>Let’s now look at how all these files, clean and malicious, are being deployed. One of GuptiMiner’s tricks is that it drops the final payload, containing PNG loader stage, only during the system shutdown process. Thus, this happens at the time other applications are shutting down and potentially not protecting the user anymore.</p>


<div class="wp-block-image">
<figure class="aligncenter size-full"><a href="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-19.png"><img loading="lazy" decoding="async" width="754" height="732" src="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-19.png" alt="" class="wp-image-8426" srcset="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-19.png 754w, https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-19-300x291.png 300w" sizes="(max-width: 754px) 100vw, 754px" /></a><figcaption class="wp-element-caption"><em>The main flow of the Stage 0.9 variant – drops final payload during system shutdown</em></figcaption></figure></div>


<p>From the code above, we can observe that only when the <code>SM_SHUTTINGDOWN</code> metric is non-zero, meaning the current session is shutting down, as well as all the supporting clean files were dropped successfully, the final payload DLL is dropped as well.&nbsp;</p>



<p>An engaged reader could also notice in the code above that the first function that is being called disables Windows Defender. This is done by standard means of modifying registry keys. Only if the Defender is disabled can the malware proceed with the malicious actions.&nbsp;</p>



<h3 class="wp-block-heading">Adding Certificates to Windows</h3>



<p>Most of the time, GuptiMiner uses self-signed binaries for their malicious activities. However, this time around, the attackers went a step further. In this case, both of the dropped PNG loader DLLs are signed with a custom trusted root anchor certification authority. This means that the signature is inherently untrusted since the attackers’ certification authority cannot be trusted by common verification processes in Windows.&nbsp;</p>



<p>However, during the malware installation, GuptiMiner also adds a root certificate to Windows’ certificate store making this certification authority trusted. Thus, when such a signed file is executed, it is understood as correctly signed. This is done by using <code>CertCreateCertificateContext</code>, <code>CertOpenStore</code>, and <code>CertAddCertificateContextToStore</code> API functions.</p>


<div class="wp-block-image">
<figure class="aligncenter size-full"><a href="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-21.png"><img loading="lazy" decoding="async" width="920" height="501" src="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-21.png" alt="" class="wp-image-8428" srcset="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-21.png 920w, https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-21-300x163.png 300w, https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-21-768x418.png 768w" sizes="(max-width: 920px) 100vw, 920px" /></a><figcaption class="wp-element-caption"><em>Function which adds GuptiMiner’s root certificate to Windows</em></figcaption></figure></div>


<p>The certificate is present in a plaintext form directly in the GuptiMiner binary file.</p>


<div class="wp-block-image">
<figure class="aligncenter size-full"><a href="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-22.png"><img loading="lazy" decoding="async" width="806" height="331" src="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-22.png" alt="" class="wp-image-8429" srcset="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-22.png 806w, https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-22-300x123.png 300w, https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-22-768x315.png 768w" sizes="(max-width: 806px) 100vw, 806px" /></a><figcaption class="wp-element-caption"><em>A certificate in the plaintext form which is added as root to Windows by the malware</em></figcaption></figure></div>


<p>During our research, we found three different certificate issuers used during the GuptiMiner operations:&nbsp;</p>



<ul class="wp-block-list">
<li><code>GTE Class 3 Certificate Authority&nbsp;</code></li>



<li><code>VeriSign Class 3 Code Signing 2010</code>&nbsp;</li>



<li><code>DigiCert Assured ID Code Signing CA&nbsp;</code></li>
</ul>



<p>Note that these names are artificial and any resemblance to legitimate certification authorities shall be considered coincidental.&nbsp;</p>



<h3 class="wp-block-heading" id="storing-payloads-in-registry">Storing Payloads in Registry&nbsp;</h3>



<p><code><em>8e96d15864ec0cc6d3976d87e9e76e6eeccc23c551b22dcfacb60232773ec049</em><br><em>(upgradeshow.dll, 2023-11-23 16:41:34 UTC)</em>&nbsp;</code></p>



<p>At later development stages, authors behind GuptiMiner started to integrate even better persistence of their payloads by storing the payloads in registry keys. Furthermore, the payloads were also encrypted by XOR using a fixed key. This ensures that the payloads look meaningless to the naked eye.&nbsp;</p>



<p>We’ve discovered these registry key locations to be utilized for storing the payloads so far:&nbsp;</p>



<ul class="wp-block-list">
<li><code>SYSTEM\CurrentControlSet\Control\Nls\Sorting\Ids\en-US</code>&nbsp;</li>



<li><code>SYSTEM\CurrentControlSet\Control\PnP\Pci\CardList</code>&nbsp;</li>



<li><code>SYSTEM\CurrentControlSet\Control\Wdf\DMCF</code>&nbsp;</li>



<li><code>SYSTEM\CurrentControlSet\Control\StorVSP\Parsers</code>&nbsp;</li>
</ul>



<h2 class="wp-block-heading" id="png-loader">Stage 1 – PNG Loader&nbsp;</h2>



<p><code><em>ff884d4c01fccf08a916f1e7168080a2d740a62a774f18e64f377d23923b0297</em><br><em>(2018-04-19 09:45:25 UTC)</em>&nbsp;</code></p>



<p>When the entry point of the PE file is executed by the shellcode from <a href="#installation-process">Stage 0</a>, the malware first creates a scheduled task to attempt to perform cleanup of the initial infection by removing <code>updll62.dlz</code> archive and <code>version.dll</code> library from the system.&nbsp;</p>



<p>Furthermore, the PE serves as a dropper for additional stages by contacting an attacker’s malicious DNS server. This is done by sending a DNS request to the attacker’s DNS server, obtaining the TXT record with the response. The TXT response holds an encrypted URL domain of a real C&amp;C server that should be requested for an additional payload. This payload is a valid PNG image file (a T-Mobile logo) which also holds a shellcode appended to its end. The shellcode is afterwards executed by the malware in a separate thread, providing further malware functionality as a next stage.</p>



<p>Note that since the DNS server itself is malicious, the requested domain name doesn’t really matter – or, in a more abstract way of thinking about this functionality, it can be rather viewed as a “password” which is passed to the server, deciding whether the DNS server should or shouldn’t provide the desired TXT answer carrying the instructions.&nbsp;</p>



<p>As we already mentioned in the <a href="#domains-in-time">Domains timeline section</a>, there are multiple of such “Requested domains” used. In the version referenced here, we can see these two being used:&nbsp;</p>



<ul class="wp-block-list">
<li><code>ext.peepzo[.]com</code>&nbsp;</li>



<li><code>crl.peepzo[.]com</code>&nbsp;</li>
</ul>



<p>and the malicious DNS server address is in this case:&nbsp;</p>



<ul class="wp-block-list">
<li><code>ns1.peepzo[.]com</code>&nbsp;</li>
</ul>



<p>Here we can see a captured DNS TXT response using Wireshark. Note that <code>Transaction ID = 0x034b</code> was left unchanged during all the years of GuptiMiner operations. We find this interesting because we would expect this could get easily flagged by firewalls or EDRs in the affected network.</p>


<div class="wp-block-image">
<figure class="aligncenter size-full"><a href="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-24.png"><img loading="lazy" decoding="async" width="1550" height="732" src="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-24.png" alt="" class="wp-image-8433" srcset="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-24.png 1550w, https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-24-300x142.png 300w, https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-24-1024x484.png 1024w, https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-24-768x363.png 768w, https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-24-1536x725.png 1536w" sizes="(max-width: 1550px) 100vw, 1550px" /></a><figcaption class="wp-element-caption"><em>DNS TXT response captured by Wireshark</em></figcaption></figure></div>


<p>The requests when the malware is performing the queries is done in random intervals. The initial request for the DNS TXT record is performed in the first 20 minutes after the PNG loader is executed. The consecutive requests, which are done for the malware’s update routine, wait up to 69 hours between attempts.&nbsp;</p>



<p>This update mechanism is reflected by creating separate mutexes with the shellcode version number which is denoted by the first two bytes of the decrypted DNS TXT response (see below for the decryption process). This ensures that no shellcode with the same version is run twice on the system.&nbsp;</p>


<div class="wp-block-image">
<figure class="aligncenter size-full"><a href="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-25.png"><img loading="lazy" decoding="async" width="770" height="356" src="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-25.png" alt="" class="wp-image-8435" srcset="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-25.png 770w, https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-25-300x139.png 300w, https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-25-768x355.png 768w" sizes="(max-width: 770px) 100vw, 770px" /></a><figcaption class="wp-element-caption"><em>Mutex is numbered by the shellcode’s version information</em></figcaption></figure></div>


<h3 class="wp-block-heading" id="dns-txt-decryption">DNS TXT Record Decryption</h3>



<p>After the DNS TXT record is received, GuptiMiner decodes the content using base64 and decrypts it with a combination of MD5 used as a key derivation function and the RC2 cipher for the decryption. Note that in the later versions of this malware, the authors improved the decryption process by also using checksums and additional decryption keys.&nbsp;</p>



<p>For the key derivation function and the decryption process, the authors decided to use standard Windows CryptoAPI functions.</p>


<div class="wp-block-image">
<figure class="aligncenter size-full"><a href="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-27.png"><img loading="lazy" decoding="async" width="963" height="318" src="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-27.png" alt="" class="wp-image-8438" srcset="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-27.png 963w, https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-27-300x99.png 300w, https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-27-768x254.png 768w" sizes="(max-width: 963px) 100vw, 963px" /></a><figcaption class="wp-element-caption"><em>Typical use of standard Windows CryptoAPI functions</em></figcaption></figure></div>


<p>Interestingly, a keen eye can observe an oversight in this initialization process shown above, particularly in the <code>CryptHashData</code> function. The prototype of the <a href="https://learn.microsoft.com/en-us/windows/win32/api/wincrypt/nf-wincrypt-crypthashdata" target="_blank" rel="noreferrer noopener">CryptHashData API function</a> is:</p>



<p><code>BOOL CryptHashData(<br>&nbsp; [in] HCRYPTHASH hHash,<br>&nbsp; [in] const BYTE *pbData,<br>&nbsp; [in] DWORD&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dwDataLen,<br>&nbsp; [in] DWORD&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dwFlags<br>);&nbsp;</code></p>



<p>The second argument of this function is a pointer to an array of bytes of a length of <code>dwDataLen</code>. However, this malware provides the string <code>L"POVO@1"</code> in a Unicode (UTF-16) format, represented by the array of bytes <code>*pbData</code>.</p>


<div class="wp-block-image">
<figure class="aligncenter size-full"><a href="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-28.png"><img loading="lazy" decoding="async" width="541" height="45" src="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-28.png" alt="" class="wp-image-8441" srcset="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-28.png 541w, https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-28-300x25.png 300w" sizes="(max-width: 541px) 100vw, 541px" /></a></figure></div>


<p>Thus, the first six bytes from this array are only <code>db 'P', 0, 'O', 0, 'V', 0</code> which effectively cuts the key in half and padding it with zeroes. Even though the malware authors changed the decryption key throughout the years, they never fixed this oversight, and it is still present in the latest version of GuptiMiner.&nbsp;</p>



<h3 class="wp-block-heading">DNS TXT Record Parsing&nbsp;</h3>



<p>At this point, we would like to demonstrate the decrypted TXT record and how to parse it. In this example, while accessing the attacker’s malicious DNS server <code>ns.srnmicro[.]net</code> and the requested domain <code>spf.microsoft[.]com</code>, the server returned this DNS TXT response:&nbsp;</p>



<p><code>VUBw2mOgagCILdD3qWwVMQFPUd0dPHO3MS/CwpL2bVESh9OnF/Pgs6mHPLktvph2</code></p>



<p>After fully decoding and decrypting this string, we get:&nbsp;</p>



<figure class="wp-block-image size-full"><a href="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-29.png"><img loading="lazy" decoding="async" width="850" height="72" src="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-29.png" alt="" class="wp-image-8443" srcset="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-29.png 850w, https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-29-300x25.png 300w, https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-29-768x65.png 768w" sizes="(max-width: 850px) 100vw, 850px" /></a></figure>



<p>This result contains multiple fields and can be interpreted as:&nbsp;</p>



<figure class="wp-block-table"><table><tbody><tr><td><strong>Name&nbsp;</strong></td><td><strong>Value&nbsp;</strong></td></tr><tr><td>Version 1&nbsp;</td><td>1&nbsp;</td></tr><tr><td>Version 2&nbsp;</td><td>5&nbsp;</td></tr><tr><td>Key size&nbsp;</td><td><code>\r</code> (= <code>0xD</code>)&nbsp;</td></tr><tr><td>Key&nbsp;</td><td>Microsoft.com&nbsp;</td></tr><tr><td>C&amp;C URL&nbsp;</td><td>http://www.deanmiller[.]net/m/&nbsp;</td></tr><tr><td>Checksum&nbsp;</td><td><code>\xde</code></td></tr></tbody></table></figure>



<p>The first two bytes, Version 1 and Version 2, form the PNG shellcode version. It is not clear why there are two such versions since Version 2 is actually never used in the program. Only Version 1 is considered whether to perform the update – i.e., whether to download and load the PNG shellcode or not. In either case, we could look at these numbers as a major version and a minor version, and only the major releases serve as a trigger for the update process.</p>



<p>The third byte is a key size that denotes how many bytes should be read afterwards, forming the key. Furthermore, no additional delimiter is needed between the key and the URL since the key size is known and the URL follows. Finally, the two-byte checksum can be verified by calculating a sum of all the bytes (modulo <code>0xFF</code>).&nbsp;</p>



<p>After the DNS TXT record is decoded and decrypted, the malware downloads the next stage, from the provided URL, in the form of a PNG file. This is done by using standard <code>WinINet</code> Windows API, where the <code>User-Agent</code> is set to contain the bitness of the currently running process.</p>


<div class="wp-block-image">
<figure class="aligncenter size-full"><a href="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-30.png"><img loading="lazy" decoding="async" width="869" height="333" src="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-30.png" alt="" class="wp-image-8446" srcset="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-30.png 869w, https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-30-300x115.png 300w, https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-30-768x294.png 768w" sizes="(max-width: 869px) 100vw, 869px" /></a><figcaption class="wp-element-caption"><em>The malware communicates the bitness of the running process to the C&amp;C</em></figcaption></figure></div>


<p>The C&amp;C server uses the <code>User-Agent</code> information for two things:&nbsp;</p>



<ul class="wp-block-list">
<li>Provides the next stage (a shellcode) in the correct bitness&nbsp;</li>



<li>Filters any HTTP request that doesn’t contain this information as a protection mechanism&nbsp;</li>
</ul>



<h3 class="wp-block-heading" id="parsing-the-png-file">Parsing the PNG File&nbsp;</h3>



<p>After the downloaded file is a valid PNG file which also contains a shellcode appended at the end. The image is a T-Mobile logo and has exactly <code>805</code> bytes. These bytes are skipped by the malware and the rest of the file, starting at an offset <code>0x325</code>, is decrypted by RC2 using the key provided in the TXT response (derived using MD5). The reason of using an image as this “prefix” is to further obfuscate the network communication where the payload looks like a legitimate image, likely overlooking the appended malware code.&nbsp;</p>


<div class="wp-block-image">
<figure class="aligncenter size-full"><a href="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-31.png"><img loading="lazy" decoding="async" width="549" height="625" src="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-31.png" alt="" class="wp-image-8447" srcset="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-31.png 549w, https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-31-264x300.png 264w" sizes="(max-width: 549px) 100vw, 549px" /></a><figcaption class="wp-element-caption"><em>PNG file containing the shellcode starting at <code>0x325</code></em></figcaption></figure></div>


<p>After the shellcode is loaded from the position <code>0x325</code>, it proceeds with loading additional PE loader from memory to unpack next stages using Gzip.&nbsp;</p>



<h3 class="wp-block-heading">IP Address Masking</h3>



<p><code><em>294b73d38b89ce66cfdefa04b1678edf1b74a9b7f50343d9036a5d549ade509a</em><br><em>(2023-11-09 14:19:45 UTC)</em>&nbsp;</code></p>



<p>In late 2023, the authors decided to ditch the years-long approach of using DNS TXT records for distributing payloads and they switched to IP address masking instead.&nbsp;</p>



<p>This new approach consists of a few steps:&nbsp;</p>



<ol class="wp-block-list" start="1">
<li>Obtain an IP address of a hardcoded server name registered to the attacker by standard means of using <code>gethostbyname</code> API function&nbsp;</li>



<li>For that server, two IP addresses are returned – the first is an IP address which is a masked address, and the second one denotes an available payload version and starts with <code>23.195.</code> as the first two octets&nbsp;</li>



<li>If the version is newer than the current one, the masked IP address is de-masked and results in a real C&amp;C IP address&nbsp;</li>



<li>The real C&amp;C IP address is used along with a hardcoded constant string (used in a URL path) to download the PNG file containing the shellcode&nbsp;</li>
</ol>



<p>The de-masking process is done by XORing each octet of the IP address by <code>0xA</code>, <code>0xB</code>, <code>0xC</code>, <code>0xD</code>, respectively. The result is then taken, and a hardcoded constant string is added to the URL path.&nbsp;</p>



<p>As an example, one such server we observed was <code>www.elimpacific[.]net</code>. It was, at the time, returning:&nbsp;</p>


<div class="wp-block-image">
<figure class="aligncenter size-full is-resized"><a href="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-32.png"><img loading="lazy" decoding="async" width="487" height="197" src="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-32.png" alt="" class="wp-image-8452" style="width:487px;height:auto" srcset="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-32.png 487w, https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-32-300x121.png 300w" sizes="(max-width: 487px) 100vw, 487px" /></a></figure></div>


<p>The address <code>23.195.101[.]1</code> denotes a version and if it is greater than the current version, it performs the update by downloading the PNG file with the shellcode. This update is downloaded by requesting a PNG file from the real C&amp;C server whose address is calculated by de-masking the <code>179.38.204[.]38</code> address:&nbsp;</p>


<div class="wp-block-image">
<figure class="aligncenter size-full"><a href="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-33.png"><img loading="lazy" decoding="async" width="850" height="72" src="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-33.png" alt="" class="wp-image-8453" srcset="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-33.png 850w, https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-33-300x25.png 300w, https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-33-768x65.png 768w" sizes="(max-width: 850px) 100vw, 850px" /></a></figure></div>


<p>The request is then made, along with the calculated IP address <code>185.45.192[.]43</code> and a hardcoded constant <code>elimp</code>. Using a constant like this serves as an additional password, in a sense:<br><code>185.45.192[.]43/elimp/</code>&nbsp;</p>


<div class="wp-block-image">
<figure class="aligncenter size-large"><a href="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-34.png"><img loading="lazy" decoding="async" width="1024" height="235" src="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-34-1024x235.png" alt="" class="wp-image-8454" srcset="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-34-1024x235.png 1024w, https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-34-300x69.png 300w, https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-34-768x176.png 768w, https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-34.png 1263w" sizes="(max-width: 1024px) 100vw, 1024px" /></a><figcaption class="wp-element-caption"><em>GuptiMiner is requesting the payload from a real IP address</em></figcaption></figure></div>


<p>When the PNG file is downloaded, the rest of the process is the same as usual.&nbsp;</p>



<p>We’ve discovered two servers for this functionality so far:&nbsp;</p>



<figure class="wp-block-table"><table><tbody><tr><td><strong>Queried server</strong>&nbsp;</td><td><strong>URL path constant</strong>&nbsp;</td></tr><tr><td><code>www.elimpacific[.]net&nbsp;</code></td><td><code>elimp&nbsp;</code></td></tr><tr><td><code>www.espcomp[.]net&nbsp;</code></td><td><code>OpenSans&nbsp;</code></td></tr></tbody></table></figure>



<h3 class="wp-block-heading">Anti-VM and Anti-debug Tricks&nbsp;</h3>



<p><code><em>294b73d38b89ce66cfdefa04b1678edf1b74a9b7f50343d9036a5d549ade509a</em><br><em>(2023-11-09 14:19:45 UTC)</em>&nbsp;</code></p>



<p>Along with other updates described above, we also observed an evolution in using anti-VM and anti-debugging tricks. These are done by checking well known disk drivers, registry keys, and running processes.&nbsp;</p>



<p>GuptiMiner checks for these disk drivers by enumerating<br><code>HKEY_LOCAL_MACHINE\SYSTEM\ControlSet001\services\Disk\Enum</code>:&nbsp;</p>



<ul class="wp-block-list">
<li><code>vmware&nbsp;</code></li>



<li><code>qemu&nbsp;</code></li>



<li><code>vbox&nbsp;</code></li>



<li><code>virtualhd&nbsp;</code></li>
</ul>



<p>Specifically, the malware also checks the registry key <code>HKEY_LOCAL_MACHINE\SOFTWARE\Cylance</code> for the presence of Cylance AV.&nbsp;</p>



<p>As other anti-VM measures, the malware also checks whether the system has more than 4GB available RAM and at least 4 CPU cores.&nbsp;</p>



<p>Last but not least, the malware also checks the presence of these processes by their prefixes:&nbsp;</p>



<figure class="wp-block-table"><table><tbody><tr><td><strong>Process name prefix</strong>&nbsp;</td><td><strong>Tool name</strong>&nbsp;</td></tr><tr><td><code>wireshar&nbsp;</code></td><td>Wireshark&nbsp;</td></tr><tr><td><code>windbg.&nbsp;</code></td><td>WinDbg&nbsp;</td></tr><tr><td><code>tcpview&nbsp;</code></td><td>TCPView&nbsp;</td></tr><tr><td><code>360&nbsp;</code></td><td>360 Total Security&nbsp;</td></tr><tr><td><code>hips&nbsp;</code></td><td>Huorong Internet Security (<code>hipsdaemon.exe</code>)&nbsp;</td></tr><tr><td><code>proce&nbsp;</code></td><td>Process Explorer&nbsp;</td></tr><tr><td><code>procm&nbsp;</code></td><td>Process Monitor&nbsp;</td></tr><tr><td><code>ollydbg&nbsp;</code></td><td>OllyDbg&nbsp;</td></tr></tbody></table></figure>



<h3 class="wp-block-heading">Storing Images in Registry</h3>



<p><code><em>6305d66aac77098107e3aa6d85af1c2e3fc2bb1f639e4a9da619c8409104c414</em><br><em>(2023-02-22 14:03:04 UTC)</em>&nbsp;</code></p>



<p>Similarly to <a href="#storing-payloads-in-registry">Storing Payloads in Registry</a>, in later stages of GuptiMiner, the authors also started to save the downloaded PNG images (containing the shellcodes) into registry as well. Contrary to storing the payloads, the images are not additionally XORed since the shellcodes in them are already encrypted using RC2 (see <a href="#dns-txt-decryption">DNS TXT Record Decryption</a> section for details).&nbsp;</p>



<p>We’ve discovered these registry key locations to be utilized for storing the encrypted images containing the shellcodes so far:&nbsp;</p>



<ul class="wp-block-list">
<li><code>SYSTEM\CurrentControlSet\Control\Arbiters\Class&nbsp;</code></li>



<li><code>SYSTEM\CurrentControlSet\Control\CMF\Class&nbsp;</code></li>



<li><code>SYSTEM\CurrentControlSet\Control\CMF\CORE&nbsp;</code></li>



<li><code>SYSTEM\CurrentControlSet\Control\CMF\DEF&nbsp;</code></li>



<li><code>SYSTEM\CurrentControlSet\Control\CMF\Els&nbsp;</code></li>



<li><code>SYSTEM\CurrentControlSet\Control\CMF\ASN&nbsp;</code></li>



<li><code>SYSTEM\CurrentControlSet\Control\MSDTC\BSR&nbsp;</code></li>
</ul>



<h2 class="wp-block-heading">Stage 2 – Gzip Loader&nbsp;</h2>



<p><code><em>357009a70daacfc3379560286a134b89e1874ab930d84edb2d3ba418f7ad6a0b</em><br><em>(2019-04-02 07:30:21 UTC)</em>&nbsp;</code></p>



<p>This stage is the shortest, the Gzip loader, which is extracted and executed by the shellcode from the PNG file, is a simple PE that decompresses another shellcode using Gzip and executes it in a separate thread.&nbsp;</p>



<p>This thread additionally loads Stage 3, which we call Puppeteer, that orchestrates the core functionality of the malware – the cryptocurrency mining as well as, when applicable, deploying backdoors on the infected systems.&nbsp;</p>



<p>Throughout the GuptiMiner operations, Gzip loader has not been changed with later versions.&nbsp;</p>



<h2 class="wp-block-heading">Stage 3 – Puppeteer</h2>



<p><code><em>364984e8d62eb42fd880755a296bd4a93cc071b9705c1f1b43e4c19dd84adc65</em><br><em>(2019-03-15 10:07:36 UTC)</em>&nbsp;</code></p>



<p>Let’s now look at the biggest Stage 3, the Puppeteer. It pulls its strings everywhere across the infected system, manipulating the GuptiMiner components to do its bidding, hence the name we’ve chosen. It orchestrates further actions and deploys two core components of the malware – an XMRig coinminer and two types of backdoors that target devices present in large corporate networks. Of course, Puppeteer also introduces additional tricks to the arsenal of the whole GuptiMiner operation.&nbsp;</p>



<p>This stage also uses one of the many <code>Global\SLDV</code> mutexes which we described in the <a href="#mutexes-in-time">Mutex timeline</a>. For example, this particular sample uses <code>SLDV01</code> as its mutex.</p>



<h3 class="wp-block-heading">Puppeteer Setup</h3>



<p>Puppeteer performs several steps for a proper setup. Firstly, it adds a new power scheme in Windows so the PC does not go to sleep. If the CPU has only one core (anti-VM) or the mutex already exists, the malware ceases to function by going to infinite sleep.&nbsp;</p>



<p>In the next phase, the malware kills all the processes with a name <code>msiexec.exe</code>, <code>cmstp.exe</code>, or <code>credwiz.exe</code>. After that, it creates a separate thread that injects XMRig into a credwiz.exe process freshly created by the malware. The malware also disables Windows Defender by setting its service start status to disabled.&nbsp;</p>



<p>For the persistence, Puppeteer chose an interesting approach. Firstly, it creates a scheduled task with the following configuration:&nbsp;</p>



<ul class="wp-block-list">
<li>A legitimate <code>rundll32.exe</code> file is copied and renamed into <code>C:\ProgramData\Microsoft\Crypto\Escan\dss.exe</code> and this file is executed from the scheduled task&nbsp;</li>



<li>The malicious DLL is placed to <code>C:\ProgramData\Microsoft\Crypto\Escan\updll3.dll3</code> and this file is loaded by <code>dss.exe</code> (exported function <code>ValidateFile</code>)&nbsp;</li>



<li>The task is executed with every boot (<code>TASK_TRIGGER_BOOT</code>) and <code>TASK_RUNLEVEL_HIGHEST</code> priority&nbsp;</li>



<li>The task is named and located at <code>C:\Windows\system32\tasks\Microsoft\windows\autochk\ESUpgrade</code>&nbsp;</li>
</ul>



<p>With that, the malware copies the content of <code>updll3.dll3</code> into memory and deletes the original file from disk. Puppeteer then waits for a system shutdown (similarly to <a href="#installation-improvements">Stage 0.9</a>) by waiting for <code>SM_SHUTTINGDOWN</code> metric to be set to non-zero value, indicating the shutdown. This is checked every 100 milliseconds. Only when the shutdown of the system is initiated, the malware reintroduces the <code>updll3.dll3</code> file back onto disk.&nbsp;</p>



<p>Putting the malicious DLL back just before the system restart is really sneaky but also has potentially negative consequences. If the victim’s device encounters a crash, power outage, or any other kind of unexpected shutdown, the file won’t be restored from memory and Puppeteer will stop working from this point. Perhaps this is the reason why authors actually removed this trick in later versions, trading the sophistication for malware’s stability.</p>


<div class="wp-block-image">
<figure class="aligncenter size-full"><a href="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-36.png"><img loading="lazy" decoding="async" width="1126" height="1270" src="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-36.png" alt="" class="wp-image-8456" srcset="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-36.png 1126w, https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-36-266x300.png 266w, https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-36-908x1024.png 908w, https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-36-768x866.png 768w" sizes="(max-width: 1126px) 100vw, 1126px" /></a><figcaption class="wp-element-caption"><em>A code ensuring the correct after-reboot execution</em></figcaption></figure></div>


<p>The repetitive loading of <code>updll3.dll3</code>, as seen in the code above, is in fact Puppeteer’s update process. The DLL will ultimately perform steps of requesting a new <a href="#parsing-the-png-file">PNG shellcode</a> from the C&amp;C servers and if it is a new version, the chain will be updated.&nbsp;</p>



<h3 class="wp-block-heading">XMRig Deployment&nbsp;</h3>



<p>During the setup, Puppeteer created a separate thread for injecting an XMRig coinminer into <code>credwiz.exe</code> process. Before the injection takes place, however, a few preparation steps are performed.&nbsp;</p>



<p>The XMRig configuration is present directly in the XMRig binary (standard JSON config) stored in the Puppeteer binary. This configuration can be, however, modified to different values on the fly. In the example below, we can see a dynamic allocation of mining threads depending on the robustness of the infected system’s hardware.&nbsp;</p>


<div class="wp-block-image">
<figure class="aligncenter size-full"><a href="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-37.png"><img loading="lazy" decoding="async" width="393" height="141" src="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-37.png" alt="" class="wp-image-8457" srcset="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-37.png 393w, https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-37-300x108.png 300w" sizes="(max-width: 393px) 100vw, 393px" /></a><figcaption class="wp-element-caption"><em>Patching the XMRig configuration on the fly, dynamically assigning mining threads</em></figcaption></figure></div>


<p>The injection is standard: the malware creates a new suspended process of <code>credwiz.exe</code> and, if successful, the coinmining is injected and executed by <code>WriteProcessMemory</code> and <code>CreateRemoteThread</code> combo.&nbsp;</p>



<p>Puppeteer continuously monitors the system for running process, by default every 5 seconds. If it encounters any of the monitoring tools below, the malware kills any existing mining by taking down the whole <code>credwiz.exe</code> process as well as it applies a progressive sleep, postponing another re-injection attempt by additional 5 hours.&nbsp;</p>



<ul class="wp-block-list">
<li><code>taskmgr.exe</code>&nbsp;</li>



<li><code>autoruns.exe</code>&nbsp;</li>



<li><code>wireshark.exe</code>&nbsp;</li>



<li><code>wireshark-gtk.exe</code>&nbsp;</li>



<li><code>tcpview.exe</code>&nbsp;</li>
</ul>



<p>Furthermore, the malware needs to locate the current <code>updll3.dll3</code> on the system so its latest version can be stored in memory, removed from disk, and dropped just before another system restart. Two approaches are used to achieve this:&nbsp;</p>



<ul class="wp-block-list">
<li>Reading eScan folder location from <code>HKEY_LOCAL_MACHINE\SOFTWARE\AVC3</code>&nbsp;</li>



<li>If one of the checked processes is called <code>download.exe</code>, which is a legitimate eScan binary, it obtains the file location to discover the folder. The output can look like this:&nbsp;
<ul class="wp-block-list">
<li><code>\Device\HarddiskVolume1\Program Files (x86)\eScan\download.exe</code>&nbsp;</li>
</ul>
</li>
</ul>



<p>The check for <code>download.exe</code> serves as an alternative for locating eScan installation folder and the code seems heavily inspired by the example code of <a href="https://learn.microsoft.com/en-us/windows/win32/memory/obtaining-a-file-name-from-a-file-handle" target="_blank" rel="noreferrer noopener">Obtaining a File Name From a File handle</a> on MSDN.&nbsp;</p>



<p>Finally, Puppeteer also continuously monitors the CPU usage on the system and tweaks the core allocation in such a way it is not <em>that much</em> resource heavy and stays under the radar.&nbsp;</p>



<h3 class="wp-block-heading" id="backdoor-setup">Backdoor Setup</h3>



<p><code><em>4dfd082eee771b7801b2ddcea9680457f76d4888c64bb0b45d4ea616f0a47f21</em><br><em>(2019-06-29 03:38:24 UTC)</em>&nbsp;</code></p>



<p>The backdoor is set up by the previous stage, Puppeteer, by first discovering whether the machine is operating on a Windows Server or not. This is done by checking a DNS Server registry key (DNS Server service is typically running on a Windows Server edition):<br><code>SOFTWARE\Microsoft\Windows NT\CurrentVersion\DNS Server&nbsp;</code></p>



<p>After that, the malware runs a command to check and get a number of computers joined in a domain:<br><code>net group “domain computers” /domain</code></p>



<p>The data printed by the <code>net group</code> command typically uses 25 characters per domain joined computer plus a newline (<code>CR+LF</code>) per every three computers, which can be illustrated by the example below:&nbsp;</p>


<div class="wp-block-image">
<figure class="aligncenter size-full"><a href="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-39.png"><img loading="lazy" decoding="async" width="502" height="80" src="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-39.png" alt="" class="wp-image-8460" srcset="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-39.png 502w, https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-39-300x48.png 300w" sizes="(max-width: 502px) 100vw, 502px" /></a><figcaption class="wp-element-caption"><em>Example output of net group command</em></figcaption></figure></div>


<p>In this version of the backdoor setup, Puppeteer checks whether the number of returned bytes is more than 100. If so, Puppeteer assumes it runs in a network shared with at least five computers and downloads additional payloads from a hardcoded C&amp;C (<code>https://m.airequipment[.]net/gpse/</code>) and executes it using PowerShell command.&nbsp;</p>



<p>Note that the threshold for the number of returned bytes was different and significantly higher in later versions of GuptiMiner, as can be seen in a dedicated section discussing <a href="#modular-backdoor">Modular Backdoor</a>, resulting in compromising only those networks which had more than 7000 computers joined in the same domain!&nbsp;</p>



<p>If the checks above pass, Puppeteer uses a PowerShell command for downloading and executing the payload and, interestingly, it is run both in the current process as well as injected in <code>explorer.exe</code>.&nbsp;</p>



<figure class="wp-block-image size-full"><a href="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-40.png"><img loading="lazy" decoding="async" width="850" height="72" src="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-40.png" alt="" class="wp-image-8461" srcset="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-40.png 850w, https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-40-300x25.png 300w, https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-40-768x65.png 768w" sizes="(max-width: 850px) 100vw, 850px" /></a></figure>



<p>Furthermore, regardless of whether the infected computer is present in a network of a certain size or not, it tries to download additional payload from <code>dl.sneakerhost[.]com/u</code> as well. This payload is yet another PNG file with the appended shellcode. We know this because the code uses the exact same parsing from the specific offset <code>0x325</code> of the PNG file as described in <a href="#png-loader">Stage 1</a>. However, during our analysis, this domain was already taken down and we couldn’t verify what kind of payload was being distributed here.&nbsp;</p>



<p>The Puppeteer’s backdoor setup process was improved and tweaked multiple times during its long development. In the upcoming subsections, we will focus on more important changes, mostly those which influence other parts of the malware or present a whole new functionality.&nbsp;</p>



<h3 class="wp-block-heading">Later Puppeteer Versions&nbsp;</h3>



<p>In later versions, the attackers switched to the datetime mutex paradigm (as illustrated in <a href="#mutexes-in-time">Mutexes in Time</a> section) and also introduced additional process monitoring of more Sysinternals tools like Process explorer, Process monitor, as well as other tools like OllyDbg, WinDbg, and TeamViewer.&nbsp;</p>



<h4 class="wp-block-heading">Pool Configuration</h4>



<p><code><em>487624b44b43dacb45fd93d03e25c9f6d919eaa6f01e365bb71897a385919ddd</em><br><em>(2023-11-21 18:05:43 UTC)</em>&nbsp;</code></p>



<p>Additionally, the GuptiMiner authors also started to modify pool addresses in XMRig configurations with a new approach. They started using subdomains by “<code>r</code>” and “<code>m</code>” depending on the available physical memory on the infected system. If there is at least 3 GB of RAM available, the malware uses:<br><code>m.domain.tld</code> with <code>auto</code> mode and enabled huge pages.</p>



<p>If the available RAM is lesser than 3 GB, it uses:<br><code>r.domain.tld</code> with <code>light</code> mode and disabled huge pages.</p>



<p>In order to <strong>not</strong> keep things simple, the authors later also started to use “<code>p</code>” as a subdomain in some versions, without any specific reason for the naming convention (perhaps just to say it is a “pool”).&nbsp;</p>



<p>The usage of all such domains in time can be seen in the <a href="#domains-in-time">Domains timeline</a>.&nbsp;</p>



<h4 class="wp-block-heading">Variety in Used DLLs&nbsp;</h4>



<p>Puppeteer used many different names and locations of DLLs over the years for sideloading or directly loading using scheduled tasks. For example, these might be:&nbsp;</p>



<ul class="wp-block-list">
<li><code>C:\Program Files (x86)\eScan\updll3.dll3&nbsp;</code></li>



<li><code>C:\Program Files\Common Files\SYSTEM\SysResetErr\SysResetErr.DLL&nbsp;</code></li>



<li><code>C:\Program Files\Microsoft SQL Server\SpellChecking\MsSpellChecking.DLL&nbsp;</code></li>



<li><code>C:\Program Files\Microsoft SQL Server\SpellChecking\MsSpellCheckingHost.DLL&nbsp;</code></li>



<li><code>C:\ProgramData\AMD\CNext\atiadlxx.dll&nbsp;</code></li>



<li><code>C:\ProgramData\Microsoft\Assistance\LunarG\vulkan-1.dll&nbsp;</code></li>



<li><code>C:\ProgramData\Microsoft\Crypto\Escan\updll3.dll&nbsp;</code></li>



<li><code>C:\ProgramData\Microsoft\Crypto\Escan\updll3.dll3&nbsp;</code></li>



<li><code>C:\ProgramData\Microsoft\Network\Escan\AutoWake.dll&nbsp;</code></li>
</ul>



<h4 class="wp-block-heading">Puppeteer Cleanup&nbsp;</h4>



<p><code><em>1c31d06cbdf961867ec788288b74bee0db7f07a75ae06d45d30355c0bc7b09fe</em><br><em>(2020-03-09 00:57:11 UTC)</em></code></p>



<p>We’ve also seen “cleaner” Puppeteers, meaning they didn’t contain the setup process for backdoors, but they were able to delete the malicious DLLs from the system when a running monitoring tool was detected.&nbsp;</p>



<h4 class="wp-block-heading" id="deploy-per-quarter">Deploy Per-Quarter&nbsp;</h4>



<p><code><em>1fbc562b08637a111464ba182cd22b1286a185f7cfba143505b99b07313c97a4</em><br><em>(2021-03-01 10:43:27 UTC)</em>&nbsp;</code></p>



<p>In this particular version, the deployment of the backdoor was performed once every 3 months, indicating a per-quarter deployment.</p>


<div class="wp-block-image">
<figure class="aligncenter size-full"><a href="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-41.png"><img loading="lazy" decoding="async" width="603" height="93" src="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-41.png" alt="" class="wp-image-8462" srcset="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-41.png 603w, https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-41-300x46.png 300w" sizes="(max-width: 603px) 100vw, 603px" /></a><figcaption class="wp-element-caption"><em>The deployment happens at March, June, September, and December</em></figcaption></figure></div>


<h2 class="wp-block-heading">Stage 4 – Backdoor&nbsp;</h2>



<p>Since <strong>no one</strong> who puts such an effort into a malware campaign deploys <em>just</em> coinminers on the infected devices, let’s dig deeper into additional sets of GuptiMiner’s functionalities – deploying two types of backdoors on the infected devices.</p>



<h3 class="wp-block-heading">PuTTY Backdoor&nbsp;</h3>



<p><code><em>07beca60c0a50520b8dbc0b8cc2d56614dd48fef0466f846a0a03afbfc42349d</em><br><em>(2021-03-01 10:31:33 UTC)</em></code><br><em><code>E:\Projects\putty-src\windows\VS2012\x64\Release\plink.pdb</code></em></p>



<p>One of the backdoors deployed by GuptiMiner is based on a custom build of PuTTY Link (<code>plink</code>). This build contains an enhancement for local SMB network scanning, and it ultimately enables lateral movement over the network to potentially exploit <code>Windows 7</code> and <code>Windows Server 2008</code> machines by tunneling SMB traffic through the victim’s infected device.&nbsp;</p>



<h4 class="wp-block-heading">Local SMB Scanning&nbsp;</h4>



<p>First, the plink binary is injected into netsh.exe process by Puppeteer with the <a href="#deploy-per-quarter">Deploy per-quarter</a> approach. After a successful injection, the malware discovers local IP ranges by reading the IP tables from the victim’s device, adding those into local and global IP range lists.&nbsp;</p>



<p>With that, the malware continues with the local SMB scanning over the obtained IP ranges: <code>xx.yy.zz.1-254</code>. When a device supporting SMB is discovered, it is saved in a dedicated list. The same goes with IPs that don’t support SMB, effectively deny listing them from future actions. This deny list is saved in specific registry subkeys named <code>Sem</code> and <code>Init</code>, in this location:<br><code>HKEY_LOCAL_MACHINE \SYSTEM\CurrentControlSet\Control\CMF\Class</code><br>where <code>Init</code> contains the found IP addresses and <code>Sem</code> contains their total count.&nbsp;</p>



<p>There are conditions taking place when such a scan is performed. For example, the scan can happen only when it is a day in the week <code>(!)</code>, per-quarter deployment, and only at times between 12 PM and 18 PM. Here, we denoted by <code>(!)</code> a <em>unique</em> coding artefact in the condition, since checking the day of the week is not necessary (always true).&nbsp;</p>


<div class="wp-block-image">
<figure class="aligncenter size-full"><a href="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-42.png"><img loading="lazy" decoding="async" width="1477" height="217" src="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-42.png" alt="" class="wp-image-8463" srcset="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-42.png 1477w, https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-42-300x44.png 300w, https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-42-1024x150.png 1024w, https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-42-768x113.png 768w" sizes="(max-width: 1477px) 100vw, 1477px" /></a><figcaption class="wp-element-caption"><em>Questionable conditioning for SMB scanning</em></figcaption></figure></div>


<p>Finally, the malware also creates a new registry key <code>HKEY_LOCAL_MACHINE\SYSTEM\RNG\FFFF</code> three hours after a successful scan. This serves as a flag that the scanning should be finished, and no more scanning is needed.&nbsp;</p>



<p>An even more interesting datetime-related bug can be seen in a conditioning of <code>RNG\FFFF</code> registry removal. The removal is done to indicate that the malware can perform another SMB scan after a certain period of time.&nbsp;</p>



<p>As we can see in the figure below, the malware obtains the write time of the registry key and the current system time by <code>SystemTimeToVariantTime</code> API function and subtracts those. The subtraction result is a floating-point number where the integral part means number of days.&nbsp;</p>



<p>Furthermore, the malware uses a constant <code>60*60*60*24=5184000</code> seconds (60 days) in the condition for the registry key removal. However, the condition is comparing <code>VariantTime</code> (days) with seconds. Thus, the backdoor can activate every <code>51.84</code> days instead of the (intended?) 60 days. A true blessing in disguise.&nbsp;</p>


<div class="wp-block-image">
<figure class="aligncenter size-full"><a href="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-43.png"><img loading="lazy" decoding="async" width="779" height="416" src="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-43.png" alt="" class="wp-image-8464" srcset="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-43.png 779w, https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-43-300x160.png 300w, https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-43-768x410.png 768w" sizes="(max-width: 779px) 100vw, 779px" /></a><figcaption class="wp-element-caption"><em>Removal of <code>RNG\FFFF</code> key, deploying the backdoor after <code>51.84</code> days</em></figcaption></figure></div>


<h4 class="wp-block-heading">Lateral Movement Over SMB Traffic&nbsp;</h4>



<p>After the local SMB scan is finished, the malware checks from the received SMB packet results whether any of the IP addresses that responded are running <code>Windows 7</code> or <code>Windows Server 2008</code>. If any such a system is found on the local network, the malware adds these IP addresses to a list of potential targets.&nbsp;</p>



<p>Furthermore, GuptiMiner executes the <code>main()</code> legacy function from plink with artificial parameters. This will create a tunnel on the port <code>445</code> between the attacker’s server <code>gesucht[.]net</code> and the victim’s device.&nbsp;</p>


<div class="wp-block-image">
<figure class="aligncenter size-full"><a href="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-45.png"><img loading="lazy" decoding="async" width="612" height="545" src="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-45.png" alt="" class="wp-image-8466" srcset="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-45.png 612w, https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-45-300x267.png 300w" sizes="(max-width: 612px) 100vw, 612px" /></a><figcaption class="wp-element-caption"><em>Parameters used for <code>plink main()</code> function</em></figcaption></figure></div>


<p>This tunnel is used for sending SMB traffic through the victim’s device to the IP addresses from the target list, enabling lateral movement over the local network.&nbsp;</p>



<p>Note that this version of Puppeteer, deploying this backdoor, is from 2021. We also mentioned that only <code>Windows 7</code> and <code>Windows Server 2008</code> are targeted, which are rather old. We think this might be because the attackers try to deploy an exploit for possible vulnerabilities on these old systems.&nbsp;</p>



<p>To orchestrate the SMB communication, the backdoor hand-crafts SMB packets on the fly by modifying <code>TID</code> and <code>UID</code> fields to reflect previous SMB communication. As shown in the decompiled code below, the SMB <code>packet 4</code>, which is crafted and sent by the malware, contains both <code>TID</code> and <code>UID</code> from the responses of the local network device.&nbsp;</p>


<div class="wp-block-image">
<figure class="aligncenter size-full"><a href="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-46.png"><img loading="lazy" decoding="async" width="1065" height="572" src="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-46.png" alt="" class="wp-image-8467" srcset="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-46.png 1065w, https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-46-300x161.png 300w, https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-46-1024x550.png 1024w, https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-46-768x412.png 768w" sizes="(max-width: 1065px) 100vw, 1065px" /></a><figcaption class="wp-element-caption"><em>The backdoor hand-crafts SMB packets on the fly</em></figcaption></figure></div>


<p>Here we provide an example how the SMB packets look like in Wireshark when sent by the malware. After the connection is established, the malware tries to login as anonymous and makes requests for <code>\IPC$</code> and a named pipe.</p>


<div class="wp-block-image">
<figure class="aligncenter size-full"><a href="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-47.png"><img loading="lazy" decoding="async" width="1007" height="88" src="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-47.png" alt="" class="wp-image-8468" srcset="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-47.png 1007w, https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-47-300x26.png 300w, https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-47-768x67.png 768w" sizes="(max-width: 1007px) 100vw, 1007px" /></a><figcaption class="wp-element-caption"><em>SMB traffic captured by Wireshark</em></figcaption></figure></div>


<p>Interested reader can find the captured PCAP on our <a href="https://github.com/avast/ioc/blob/master/GuptiMiner/extras/PCAP/smb_backdoor_networking.pcap" target="_blank" rel="noreferrer noopener">GitHub</a>.</p>



<h3 class="wp-block-heading" id="modular-backdoor">Modular Backdoor&nbsp;</h3>



<p><code><em>f0ccfcb5d49d08e9e66b67bb3fedc476fdf5476a432306e78ddaaba4f8e3bbc4</em><br><em>(2023-10-10 15:08:36 UTC)</em>&nbsp;</code></p>



<p>Another backdoor that we’ve found during our research being distributed by Puppeteer is a modular backdoor which targets huge corporate networks. It consists of two phases – the malware scans the devices for the existence of locally stored private keys and cryptocurrency wallets, and the second part is an injected modular backdoor, in the form of a shellcode.&nbsp;</p>



<h4 class="wp-block-heading">Checks on Private Keys, Wallets, and Corporate Network</h4>



<p>This part of the backdoor focuses on scanning for private keys and wallet files on the system. This is done by searching for <code>.pvk</code> and <code>.wallet</code> files in these locations:&nbsp;</p>



<ul class="wp-block-list">
<li><code>C:\Users\*&nbsp;</code></li>



<li><code>D:\*&nbsp;</code></li>



<li><code>E:\*&nbsp;</code></li>



<li><code>F:\*&nbsp;</code></li>



<li><code>G:\*&nbsp;</code></li>
</ul>



<p>If there is such a file found in the system, its path is logged in a newly created file <code>C:\Users\Public\Ca.txt</code>. Interestingly, this file is not processed on its own by the code we have available. We suppose the data will be stolen later when further modules are downloaded by the backdoor.&nbsp;</p>



<p>The fact that the scan was performed is marked by creating a registry key:<br><code>HKEY_LOCAL_MACHINE\SYSTEM\Software\Microsoft\DECLAG&nbsp;</code></p>



<p>If some private keys or wallets were found on the system or the malware is running in a huge corporate environment, the malware proceeds with injecting the backdoor, in a form of a shellcode, into the <code>mmc.exe</code> process.&nbsp;</p>



<p>The size of the corporate environment is guessed by the same approach as Puppeteer’s <a href="#backdoor-setup">backdoor setup</a> with the difference in the scale. Here, the malware compares the returned list of computers in the domain with 200,000 characters. To recapitulate, the data printed by the <code>net group</code> command uses 25 characters per domain joined computer plus a newline (<code>CR+LF</code>) per every three computers.&nbsp;</p>


<div class="wp-block-image">
<figure class="aligncenter size-full"><a href="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-39.png"><img loading="lazy" decoding="async" width="502" height="80" src="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-39.png" alt="" class="wp-image-8460" srcset="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-39.png 502w, https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-39-300x48.png 300w" sizes="(max-width: 502px) 100vw, 502px" /></a><figcaption class="wp-element-caption"><em>Example output of <code>net group</code> command</em></figcaption></figure></div>


<p>This effectively means that the network in which the malware operates must have at least 7781 computers joined in the domain, which is quite a large number.</p>



<h4 class="wp-block-heading">Backdoor</h4>



<p><code><em>8446d4fc1310b31238f9a610cd25ea832925a25e758b9a41eea66f998163bb34</em>&nbsp;</code></p>



<p>This shellcode is a completely different piece of code than what we’ve seen so far across GuptiMiner campaign. It is designed to be multi-modular with the capability of adding more modules into the execution flow. Only a networking communication module, however, is hardcoded and available by default, and its hash is <code>74d7f1af69fb706e87ff0116b8e4fa3a9b87275505e2ee7a32a8628a2d066549 (<em>2022-12-19 07:31:39 UTC</em>)</code>.&nbsp;</p>



<p>After the injection, the backdoor decrypts a hardcoded configuration and a hardcoded networking module using RC4. The RC4 key is also hardcoded and available directly in the shellcode.&nbsp;</p>



<p>The configuration contains details about which server to contact, what ports to use, the length of&nbsp;delays that should be set between commands/requests, among others. The domain for communication in this configuration is <code>www.righttrak[.]net:443</code> and an IP address <code>185.248.160[.]141</code>.</p>


<div class="wp-block-image">
<figure class="aligncenter size-full"><a href="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-50.png"><img loading="lazy" decoding="async" width="642" height="235" src="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-50.png" alt="" class="wp-image-8471" srcset="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-50.png 642w, https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-50-300x110.png 300w" sizes="(max-width: 642px) 100vw, 642px" /></a><figcaption class="wp-element-caption"><em>Decrypted network module configuration</em></figcaption></figure></div>


<p>The network module contains seven different commands that the attacker can use for instructing the backdoor about what to do. A complete list of commands accepted by the network module can be found in the table below. Note that each module that can be used by the backdoor contains such a command handler on its own.&nbsp;</p>



<figure class="wp-block-table"><table><tbody><tr><td><strong>Command</strong>&nbsp;</td><td><strong>Description</strong>&nbsp;</td></tr><tr><td>3.0&nbsp;</td><td>Connect&nbsp;</td></tr><tr><td>3.1&nbsp;</td><td>Read socket&nbsp;</td></tr><tr><td>3.2&nbsp;</td><td>Write socket&nbsp;</td></tr><tr><td>3.3&nbsp;</td><td>Close socket&nbsp;</td></tr><tr><td>4&nbsp;</td><td>Close everything&nbsp;</td></tr><tr><td>6&nbsp;</td><td>Return 1&nbsp;</td></tr><tr><td>12&nbsp;</td><td>Load configuration&nbsp;</td></tr></tbody></table></figure>



<p>The modules are stored in an encrypted form in the registry, ensuring their persistence:<br><code>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\PCB</code></p>



<p>The backdoor also uses an import by hash obfuscation for resolving API functions. The hashing function is a simple algorithm that takes each byte of the exported function name, adds 1 to it, and then multiplies the previously calculated number (<code>calculated_hash</code>, starts with 0) by 131 and adds it to the byte:</p>



<figure class="wp-block-image size-full"><img loading="lazy" decoding="async" width="850" height="72" src="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-52.png" alt="" class="wp-image-8473" srcset="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-52.png 850w, https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-52-300x25.png 300w, https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-52-768x65.png 768w" sizes="(max-width: 850px) 100vw, 850px" /></figure>



<p>The server <code>www.righttrak[.]net:443</code> had, at the time, a valid certificate. Note for example the <em>not-at-all-suspicious</em> email address the authors used.&nbsp;</p>


<div class="wp-block-image">
<figure class="aligncenter size-full"><a href="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-53.png"><img loading="lazy" decoding="async" width="779" height="933" src="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-53.png" alt="" class="wp-image-8474" srcset="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-53.png 779w, https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-53-250x300.png 250w, https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-53-768x920.png 768w" sizes="(max-width: 779px) 100vw, 779px" /></a><figcaption class="wp-element-caption"><em>Certificate on <code>www.righttrak[.]net:443</code> as shown by Censys</em></figcaption></figure></div>


<h4 class="wp-block-heading" id="other-infection-vectors-modular-backdoor">Other Infection Vectors of Modular Backdoor</h4>



<p><em><code>af9f1331ac671d241bf62240aa52389059b4071a0635cb9cb58fa78ab942a33b</code></em></p>



<p>During our research, we have also found a 7zip SFX executable containing two files:&nbsp;</p>



<ul class="wp-block-list">
<li><code>ms00.dat</code>&nbsp;</li>



<li><code>notepad.exe</code>&nbsp;</li>
</ul>



<p><code>notepad.exe</code> is a small binary that decrypts <code>ms00.dat</code> file using RC4 with a key <code>V#@!1vw32</code>. The decrypted <code>ms00.dat</code> file is the same Modular Backdoor malware as described above.&nbsp;</p>



<p>However, we have not seen this SFX executable being distributed by GuptiMiner. This indicates that this backdoor might be distributed by different infection vectors as well.&nbsp;</p>



<h2 class="wp-block-heading">Related and Future Research</h2>



<p>We’ve also observed other more or less related samples during our research.&nbsp;</p>



<h3 class="wp-block-heading">PowerShell Scripts</h3>



<p>Interestingly, we’ve found the C&amp;C domain from the backdoor setup phase (in Puppeteer) in additional scripts as well which were not distributed by traditional GuptiMiner operation as we know it. We think this might be a different kind of attack sharing the GuptiMiner infrastructure, though it might be a different campaign. Formatted PowerShell script can be found below:&nbsp;</p>


<div class="wp-block-image">
<figure class="aligncenter size-full"><a href="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-54.png"><img loading="lazy" decoding="async" width="850" height="720" src="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-54.png" alt="" class="wp-image-8475" srcset="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-54.png 850w, https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-54-300x254.png 300w, https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-54-768x651.png 768w" sizes="(max-width: 850px) 100vw, 850px" /></a><figcaption class="wp-element-caption"><em>A PowerShell script targeting eScan (formatted)</em></figcaption></figure></div>


<p>In this case, the payload is downloaded and executed from the malicious domain only when an antivirus is installed, and its name has more than 4 letters and starts with <code>eS</code>. One does not have to be a scrabble champion to figure out that the malware authors are targeting the eScan AV once again. The malicious code is also run when the name of the installed AV has less than 5 letters.&nbsp;</p>



<p>We’ve found this script being run via a scheduled task with a used command:<br><code>"cmd.exe" /c type "\&lt;domain&gt;\SYSVOL\&lt;domain&gt;\scripts\gpon.inc" | "\&lt;domain&gt;\SYSVOL\&lt;domain&gt;\scripts\powAMD64.dat" -nop -&nbsp;</code><br>where <code>powAMD64.dat</code> is a copy of <code>powershell.exe</code>. The task name and location was <code>C:\Windows\System32\Tasks\ScheduledDefrag&nbsp;</code></p>



<h3 class="wp-block-heading">Usage of Stolen Certificates&nbsp;</h3>



<p>We have found two stolen certificates used for signing GuptiMiner payloads. Interestingly, one of the used stolen certificates originates in Winnti operations. In this particular sample, the digital signature has a hash:&nbsp;<br><code>529763AC53562BE3C1BB2C42BCAB51E3AD8F8A56</code>&nbsp;</p>



<p>This certificate is the same as mentioned by <a href="https://securelist.com/winnti-more-than-just-a-game/37029/" target="_blank" rel="noreferrer noopener">Kaspersky</a> more than 10 years ago. However, we’ve also seen this certificate to be used in multiple malware samples than just GuptiMiner, though, indicating a broader leak.&nbsp;</p>



<p>A complete list of stolen certificates and their usage can be found in the table below:&nbsp;</p>



<figure class="wp-block-table"><table><tbody><tr><td><strong>Stolen certificate SHA1</strong>&nbsp;</td><td><strong>Signed GuptiMiner sample</strong>&nbsp;</td></tr><tr><td>529763AC53562BE3C1BB2C42BCAB51E3AD8F8A56&nbsp;</td><td>31dfba1b102bbf4092b25e63aae0f27386c480c10191c96c04295cb284f20878&nbsp;</td></tr><tr><td>529763AC53562BE3C1BB2C42BCAB51E3AD8F8A56&nbsp;</td><td>8e96d15864ec0cc6d3976d87e9e76e6eeccc23c551b22dcfacb60232773ec049&nbsp;</td></tr><tr><td>31070C2EA30E6B4E1C270DF94BE1036AE7F8616B&nbsp;</td><td>b0f94d84888dffacbc10bd7f9983b2d681b55d7e932c2d952d47ee606058df54&nbsp;</td></tr><tr><td>31070C2EA30E6B4E1C270DF94BE1036AE7F8616B&nbsp;</td><td>f656a418fca7c4275f2441840faaeb70947e4f39d3826d6d2e50a3e7b8120e4e&nbsp;</td></tr></tbody></table></figure>



<h3 class="wp-block-heading">Possible Ties to Kimsuky&nbsp;</h3>



<p><code><em>7f1221c613b9de2da62da613b8b7c9afde2ea026fe6b88198a65c9485ded7b3d</em><br><em>(2021-03-06 20:13:32 UTC)</em>&nbsp;</code></p>



<p>During our research, we’ve also found an information stealer which holds a rather similar PDB path as was used across the whole GuptiMiner campaign (<code>MainWork</code>):<br><code>F:\!PROTECT\Real\startW-2008\MainWork\Release\MainWork.pdb</code>&nbsp;</p>



<p>However, we haven’t seen it distributed by GuptiMiner and, according to our data, it doesn’t belong to the same operation and infection chain. This malware performs stealing activities like capturing every keystroke, harvesting HTML forms from opened browser tabs, noting times of opened programs, etc., and stores them in log files.&nbsp;</p>



<p>What is truly interesting, however, is that this information stealer might come from Kimsuky operations. Also known as Black Banshee, among other aliases, Kimsuky is a North Korean state-backed APT group.&nbsp;</p>



<p>It contains the similar approach of searching for AhnLab real-time detection window class name <code>49B46336-BA4D-4905-9824-D282F05F6576</code> as mentioned by both <a href="https://asec.ahnlab.com/en/31089/" target="_blank" rel="noreferrer noopener">AhnLab</a> as well as <a href="https://blog.talosintelligence.com/kimsuky-abuses-blogs-delivers-malware/" target="_blank" rel="noreferrer noopener">Cisco Talos Intelligence</a> in their <em>Information-gathering module</em> section. If such a window is found, it will be terminated/hidden from the view of the infected user.&nbsp;</p>


<div class="wp-block-image">
<figure class="aligncenter size-large"><a href="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-55.png"><img loading="lazy" decoding="async" width="1024" height="410" src="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-55-1024x410.png" alt="" class="wp-image-8477" srcset="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-55-1024x410.png 1024w, https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-55-300x120.png 300w, https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-55-768x308.png 768w, https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-55.png 1338w" sizes="(max-width: 1024px) 100vw, 1024px" /></a><figcaption class="wp-element-caption"><em>Function that searches and terminates AhnLab’s real-time detection window class</em></figcaption></figure></div>


<p>Furthermore, the stealer contains an encrypted payload in resources, having a hash: <code>d5bc6cf988c6d3c60e71195d8a5c2f7525f633bb54059688ad8cfa1d4b72aa6c (<em>2021-02-19 19.02.2021 15:00:47 UTC</em>)</code> and it has this PDB path:<br><code>F:\PROTECT\Real\startW-2008\HTTPPro\Release\HTTPPro.pdb</code>&nbsp;</p>



<p>This module is decrypted using the standard RC4 algorithm with the key <code>messi.com</code>. The module is used for downloading additional stages. One of the used URLs are:<br><code>http://stwu.mygamesonline[.]org/home/sel.php</code><br><code>http://stwu.mygamesonline[.]org/home/buy.php?filename=%s&amp;key=%s</code>&nbsp;</p>



<p>The domain <code>mygamesonline[.]org</code> is commonly used by Kimsuky (with variety of subdomains).&nbsp;</p>



<p>The keylogger also downloads next stage called <code>ms12.acm</code>:&nbsp;</p>


<div class="wp-block-image">
<figure class="aligncenter size-full"><a href="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-56.png"><img loading="lazy" decoding="async" width="467" height="169" src="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-56.png" alt="" class="wp-image-8478" srcset="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-56.png 467w, https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-56-300x109.png 300w" sizes="(max-width: 467px) 100vw, 467px" /></a><figcaption class="wp-element-caption"><em>The next stage is downloaded with a name <code>ms12.acm</code></em></figcaption></figure></div>


<p>With this, we see a possible pattern with the naming convention and a link to Modular Backdoor. As described in the <a href="#other-infection-vectors-modular-backdoor">Other Infection Vectors</a> section, the 7z SFX archive contains an encrypted file called <code>ms00.dat</code> with which we struggle to ignore the resemblance.</p>



<p>Last but not least, another strong indicator for a possible attribution is the fact that the Kimsuky keylogger sample <code>dddc57299857e6ecb2b80cbab2ae6f1978e89c4bfe664c7607129b0fc8db8b1f</code>, which is mentioned in the same blogpost from Talos, contains a section called <code>.vlizer</code>, as seen below:&nbsp;</p>


<div class="wp-block-image">
<figure class="aligncenter size-large"><a href="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-57.png"><img loading="lazy" decoding="async" width="1024" height="269" src="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-57-1024x269.png" alt="" class="wp-image-8479" srcset="https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-57-1024x269.png 1024w, https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-57-300x79.png 300w, https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-57-768x202.png 768w, https://decoded.avast.io/wp-content/uploads/sites/2/2024/04/image-57.png 1277w" sizes="(max-width: 1024px) 100vw, 1024px" /></a><figcaption class="wp-element-caption"><em>Kimsuky keylogger sections</em></figcaption></figure></div>


<p>During the GuptiMiner installation process (<a href="#installation-process">Stage 0</a>), we wrote about the threat actors introducing <a href="#code-virtualization">Code Virtualization</a> in 2018. This was done by using a dedicated section called <code>.v_lizer</code>.&nbsp;</p>



<h2 class="wp-block-heading">Conclusion&nbsp;</h2>



<p>In this analysis, we described our findings regarding a long-standing threat we called GuptiMiner, in detail. This sophisticated operation has been performing MitM attacks targeting an update mechanism of the eScan antivirus vendor. We disclosed the security vulnerability to both eScan and the India CERT and received confirmation on 2023-07-31 from eScan that the issue was fixed and successfully resolved.&nbsp;</p>



<p>During the GuptiMiner operation, the attackers were deploying a wide chain of stages and functionalities, including performing DNS requests to the attacker’s DNS servers, sideloading, extracting payloads from innocent-looking images, signing its payloads with a custom trusted root anchor certification authority, among others.&nbsp;</p>



<p>Two different types of backdoors were discovered, targeting large corporate networks. The first provided SMB scanning of the local network, enabling lateral movement over the network to potentially exploit vulnerable Windows 7 and Windows Server 2008 systems on the network. The second backdoor is multi-modular, accepting commands on background to install more modules as well as focusing on stealing stored private keys and cryptowallets.&nbsp;</p>



<p>Interestingly, the final payload distributed by GuptiMiner was also XMRig which is a bit unexpected for such a thought-through operation.&nbsp;</p>



<p>We have also found possible ties to Kimsuky, a notorious North Korean APT group, while observing similarities between Kimsuky keylogger and fragments discovered during the analysis of the GuptiMiner operation.&nbsp;</p>



<h2 class="wp-block-heading">eScan follow-up</h2>



<p>We have shared our findings and our research with eScan prior to publishing this analysis. For the sake of completeness, we are including their statement on this topic:</p>



<p><em>“I would also like to highlight some key points:</em><br><em>1. Our records indicate that the last similar report was received towards the end of the year 2019.</em><br><em>2. Since 2020, we have implemented a stringent checking mechanism that utilizes EV Signing to ensure that non-signed binaries are rejected.</em><br><em>3. Multiple heuristic rules have been integrated into our solution to detect and block any instances of legitimate processes being used for mining, including the forking of unsigned binaries.</em><br><em>4. While our internal investigations did not uncover instances of the XRig miner, it is possible that this may be due to geo-location factors.</em><br><em>5. Our latest solution versions employ secure (https) downloads, ensuring encrypted communication when clients interact with our cloud-facing servers for update downloads.”</em></p>



<p>According to our telemetry, we continue to observe new infections and GuptiMiner builds within our userbase. This may be attributable to eScan clients on these devices not being updated properly.</p>



<h2 class="wp-block-heading" id="ioc">Indicators of Compromise (IoCs)</h2>



<p>In this section, we would like to summarize the Indicators of Compromise mentioned in this analysis. As they are indicators, it doesn’t automatically mean the mentioned files and/or domains are malicious on their own.&nbsp;</p>



<p>For more detailed list of IoCs of the whole GuptiMiner campaign, please visit our <a href="https://github.com/avast/ioc/tree/master/GuptiMiner" target="_blank" rel="noreferrer noopener">GitHub</a>.</p>



<h3 class="wp-block-heading">Evolution and Timelines&nbsp;</h3>



<h4 class="wp-block-heading">Domains&nbsp;</h4>



<figure class="wp-block-table"><table><tbody><tr><td><strong>Domain</strong></td></tr><tr><td>_spf.microsoft[.]com</td></tr><tr><td>acmeautoleasing[.]net</td></tr><tr><td>b.guterman[.]net</td></tr><tr><td>breedbackfp[.]com</td></tr><tr><td>crl.microsoft[.]com</td></tr><tr><td>crl.peepzo[.]com</td></tr><tr><td>crl.sneakerhost[.]com</td></tr><tr><td>desmoinesreg[.]com</td></tr><tr><td>dl.sneakerhost[.]com</td></tr><tr><td>edgesync[.]net</td></tr><tr><td>espcomp[.]net</td></tr><tr><td>ext.microsoft[.]com</td></tr><tr><td>ext.peepzo[.]com</td></tr><tr><td>ext.sneakerhost[.]com</td></tr><tr><td>gesucht[.]net</td></tr><tr><td>gesucht[.]net</td></tr><tr><td>globalsign.microsoft[.]com</td></tr><tr><td>icamper[.]net</td></tr><tr><td>m.airequipment[.]net</td></tr><tr><td>m.cbacontrols[.]com</td></tr><tr><td>m.gosoengine[.]com</td></tr><tr><td>m.guterman[.]net</td></tr><tr><td>m.indpendant[.]com</td></tr><tr><td>m.insomniaccinema[.]com</td></tr><tr><td>m.korkyt[.]net</td></tr><tr><td>m.satchmos[.]net</td></tr><tr><td>m.sifraco[.]com</td></tr><tr><td>ns.bretzger[.]net</td></tr><tr><td>ns.deannacraite[.]com</td></tr><tr><td>ns.desmoinesreg[.]com</td></tr><tr><td>ns.dreamsoles[.]com</td></tr><tr><td>ns.editaccess[.]com</td></tr><tr><td>ns.encontacto[.]net</td></tr><tr><td>ns.gravelmart[.]net</td></tr><tr><td>ns.gridsense[.]net</td></tr><tr><td>ns.jetmediauk[.]com</td></tr><tr><td>ns.kbdn[.]net</td></tr><tr><td>ns.lesagencestv[.]net</td></tr><tr><td>ns.penawarkanser[.]net</td></tr><tr><td>ns.srnmicro[.]net</td></tr><tr><td>ns.suechiLton[.]com</td></tr><tr><td>ns.trafomo[.]com</td></tr><tr><td>ns.trafomo[.]com</td></tr><tr><td>ns1.earthscienceclass[.]com</td></tr><tr><td>ns1.peepzo[.]com</td></tr><tr><td>ns1.securtelecom[.]com</td></tr><tr><td>ns1.sneakerhost[.]com</td></tr><tr><td>p.bramco[.]net</td></tr><tr><td>p.hashvault[.]pro</td></tr><tr><td>r.sifraco[.]com</td></tr><tr><td>spf.microsoft[.]com</td></tr><tr><td>widgeonhill[.]com</td></tr><tr><td>www.bascap[.]net</td></tr></tbody></table></figure>



<h4 class="wp-block-heading">Mutexes&nbsp;</h4>



<figure class="wp-block-table"><table><tbody><tr><td><strong>Mutex</strong>&nbsp;</td></tr><tr><td>ESOCESS_&nbsp;</td></tr><tr><td>Global\Fri Aug 13 02:17:49 2021&nbsp;</td></tr><tr><td>Global\Fri Aug 13 02:22:55 2021&nbsp;</td></tr><tr><td>Global\Mon Apr 19 06:03:17 2021&nbsp;</td></tr><tr><td>Global\Mon Apr 24 07:19:54 2023&nbsp;</td></tr><tr><td>Global\Mon Feb 27 08:11:25 2023&nbsp;</td></tr><tr><td>Global\Mon Jun 14 03:22:57 2021&nbsp;</td></tr><tr><td>Global\Mon Mar 13 07:29:11 2023&nbsp;</td></tr><tr><td>Global\Mon Mar 22 09:16:00 2021&nbsp;</td></tr><tr><td>Global\Sun Jun 13 08:22:07 2021&nbsp;</td></tr><tr><td>Global\Thu Aug 10 03:25:11 2023&nbsp;</td></tr><tr><td>Global\Thu Aug 12 02:07:58 2021&nbsp;</td></tr><tr><td>Global\Thu Feb 23 08:37:09 2023&nbsp;</td></tr><tr><td>Global\Thu Mar 25 02:03:14 2021&nbsp;</td></tr><tr><td>Global\Thu Mar 25 09:31:19 2021&nbsp;</td></tr><tr><td>Global\Thu Nov&nbsp; 2 08:21:56 2023&nbsp;</td></tr><tr><td>Global\Thu Nov&nbsp; 9 06:19:40 2023&nbsp;</td></tr><tr><td>Global\Tue Apr 25 08:32:05 2023&nbsp;</td></tr><tr><td>Global\Tue Mar 23 02:37:32 2021&nbsp;</td></tr><tr><td>Global\Tue Oct 10 08:07:11 2023&nbsp;</td></tr><tr><td>Global\Wed Aug 11 09:16:37 2021&nbsp;</td></tr><tr><td>Global\Wed Jan&nbsp; 5 09:15:56 2022&nbsp;</td></tr><tr><td>Global\Wed Jun&nbsp; 2 09:43:03 2021&nbsp;</td></tr><tr><td>Global\Wed Mar&nbsp; 1 01:29:48 2023&nbsp;</td></tr><tr><td>Global\Wed Mar 23 08:56:01 2022&nbsp;</td></tr><tr><td>Global\Wed Mar 23 09:06:36 2022&nbsp;</td></tr><tr><td>Global\Wed May 10 06:38:46 2023&nbsp;</td></tr><tr><td>Global1&nbsp;</td></tr><tr><td>GlobalMIVOD_V4&nbsp;</td></tr><tr><td>GMCM1&nbsp;</td></tr><tr><td>MIVOD_6&nbsp;</td></tr><tr><td>MTX_EX01&nbsp;</td></tr><tr><td>Mutex_ONLY_ME_V1&nbsp;</td></tr><tr><td>Mutex_ONLY_ME_V2&nbsp;</td></tr><tr><td>Mutex_ONLY_ME_V3&nbsp;</td></tr><tr><td>PROCESS_&nbsp;</td></tr><tr><td>SLDV014&nbsp;</td></tr><tr><td>SLDV02&nbsp;</td></tr><tr><td>SLDV024&nbsp;</td></tr><tr><td>SLDV04&nbsp;</td></tr><tr><td>SLDV10&nbsp;</td></tr><tr><td>SLDV11&nbsp;</td></tr><tr><td>SLDV13&nbsp;</td></tr><tr><td>SLDV15&nbsp;</td></tr><tr><td>SLDV17&nbsp;</td></tr><tr><td>SLDV22&nbsp;</td></tr><tr><td>SLDV26&nbsp;</td></tr></tbody></table></figure>



<h4 class="wp-block-heading">PDB paths&nbsp;</h4>



<figure class="wp-block-table"><table><tbody><tr><td><strong>PDB path</strong></td></tr><tr><td>E:\projects\projects\RunCompressedSC\x64\Release\RunCompressedSC.pdb</td></tr><tr><td>E:\Projects\putty-src\windows\VS2012\x64\Release\plink.pdb</td></tr><tr><td>F:\CODE-20221019\Projects\RunCompressedSC\x64\Release\RunCompressedSC.pdb</td></tr><tr><td>F:\Pro\MainWork\Release\MainWork.pdb</td></tr><tr><td>F:\Pro\MainWork\x64\Release\MainWork.pdb</td></tr><tr><td>F:\Projects\2020-NEW\20200307-NEW\MainWork-VS2017-IPHLPAPI\Release\MainWork.pdb</td></tr><tr><td>F:\Projects\2020-NEW\20200307-NEW\MainWork-VS2017-IPHLPAPI\x64\Release\MainWork.pdb</td></tr><tr><td>F:\Projects\2020-NEW\20200307-NEW\MainWork-VS2017-nvhelper\Release\MainWork.pdb</td></tr><tr><td>F:\Projects\2020-NEW\20200307-NEW\MainWork-VS2017-nvhelper\x64\Release\MainWork.pdb</td></tr><tr><td>F:\Projects\RunCompressedSC\x64\Release\RunCompressedSC.pdb</td></tr><tr><td>F:\V202102\MainWork-VS2017 – Monitor\Release\MainWork.pdb</td></tr><tr><td>F:\V202102\MainWork-VS2017 – Monitor\x64\Release\MainWork.pdb</td></tr><tr><td>H:\projects\MainWork\Release\MainWork.pdb</td></tr></tbody></table></figure>



<h3 class="wp-block-heading">Stage 0 – Installation Process&nbsp;</h3>



<figure class="wp-block-table"><table><tbody><tr><td><strong>IoC</strong>&nbsp;</td><td><strong>Note</strong>&nbsp;</td></tr><tr><td>http://update3[.]mwti[.]net/pub/update/updll3.dlz&nbsp;</td><td>&nbsp;</td></tr><tr><td>c3122448ae3b21ac2431d8fd523451ff25de7f6e399ff013d6fa6953a7998fa3&nbsp;</td><td>C:\Program Files\eScan\VERSION.DLL&nbsp;</td></tr><tr><td>7a1554fe1c504786402d97edecc10c3aa12bd6b7b7b101cfc7a009ae88dd99c6&nbsp;</td><td>updll65.dlz&nbsp;</td></tr></tbody></table></figure>



<h3 class="wp-block-heading">Stage 0.9 – Installation Improvements&nbsp;</h3>



<h3 class="wp-block-heading">Stage 1 – PNG Loader&nbsp;</h3>



<figure class="wp-block-table"><table><tbody><tr><td><strong>IoC</strong>&nbsp;</td><td><strong>Note</strong>&nbsp;</td></tr><tr><td>ff884d4c01fccf08a916f1e7168080a2d740a62a774f18e64f377d23923b0297&nbsp;</td><td>&nbsp;</td></tr><tr><td>ext.peepzo[.]com&nbsp;</td><td>&nbsp;</td></tr><tr><td>crl.peepzo[.]com&nbsp;</td><td>&nbsp;</td></tr><tr><td>ns1.peepzo[.]com&nbsp;</td><td>&nbsp;</td></tr><tr><td>http://www.deanmiller[.]net/m/&nbsp;</td><td>&nbsp;</td></tr><tr><td>294b73d38b89ce66cfdefa04b1678edf1b74a9b7f50343d9036a5d549ade509a&nbsp;</td><td>&nbsp;</td></tr><tr><td>185.45.192[.]43/elimp/&nbsp;</td><td>&nbsp;</td></tr><tr><td>6305d66aac77098107e3aa6d85af1c2e3fc2bb1f639e4a9da619c8409104c414</td><td></td></tr><tr><td>SYSTEM\CurrentControlSet\Control\Arbiters\Class&nbsp;</td><td>Registry&nbsp;</td></tr><tr><td>SYSTEM\CurrentControlSet\Control\CMF\Class&nbsp;</td><td>Registry&nbsp;</td></tr><tr><td>SYSTEM\CurrentControlSet\Control\CMF\CORE&nbsp;</td><td>Registry&nbsp;</td></tr><tr><td>SYSTEM\CurrentControlSet\Control\CMF\DEF&nbsp;</td><td>Registry&nbsp;</td></tr><tr><td>SYSTEM\CurrentControlSet\Control\CMF\Els&nbsp;</td><td>Registry&nbsp;</td></tr><tr><td>SYSTEM\CurrentControlSet\Control\CMF\ASN&nbsp;</td><td>Registry&nbsp;</td></tr><tr><td>SYSTEM\CurrentControlSet\Control\MSDTC\BSR&nbsp;</td><td>Registry&nbsp;</td></tr></tbody></table></figure>



<h3 class="wp-block-heading">Stage 2 – Gzip Loader&nbsp;</h3>



<figure class="wp-block-table"><table><tbody><tr><td><strong>IoC</strong>&nbsp;</td><td><strong>Note</strong>&nbsp;</td></tr><tr><td>357009a70daacfc3379560286a134b89e1874ab930d84edb2d3ba418f7ad6a0b&nbsp;</td><td>&nbsp;</td></tr></tbody></table></figure>



<h3 class="wp-block-heading">Stage 3 – Puppeteer&nbsp;</h3>



<figure class="wp-block-table"><table><tbody><tr><td><strong>Ioc</strong>&nbsp;</td><td><strong>Note</strong>&nbsp;</td></tr><tr><td>364984e8d62eb42fd880755a296bd4a93cc071b9705c1f1b43e4c19dd84adc65&nbsp;</td><td>&nbsp;</td></tr><tr><td>C:\ProgramData\Microsoft\Crypto\Escan\dss.exe&nbsp;</td><td>&nbsp;</td></tr><tr><td>C:\ProgramData\Microsoft\Crypto\Escan\updll3.dll3&nbsp;&nbsp;</td><td>&nbsp;</td></tr><tr><td>C:\Windows\system32\tasks\Microsoft\windows\autochk\ESUpgrade&nbsp;</td><td>Scheduled task&nbsp;</td></tr><tr><td>HKEY_LOCAL_MACHINE\SOFTWARE\AVC3&nbsp;</td><td>Registry&nbsp;</td></tr><tr><td>\Device\HarddiskVolume1\Program Files (x86)\eScan\download.exe&nbsp;</td><td>&nbsp;</td></tr><tr><td>4dfd082eee771b7801b2ddcea9680457f76d4888c64bb0b45d4ea616f0a47f21&nbsp;</td><td>&nbsp;</td></tr><tr><td>SOFTWARE\Microsoft\Windows NT\CurrentVersion\DNS Server&nbsp;</td><td>Registry&nbsp;</td></tr><tr><td>net group ”domain computers” /domain&nbsp;</td><td>Command&nbsp;</td></tr><tr><td>https://m.airequipment[.]net/gpse/&nbsp;</td><td>&nbsp;</td></tr><tr><td>487624b44b43dacb45fd93d03e25c9f6d919eaa6f01e365bb71897a385919ddd&nbsp;</td><td>&nbsp;</td></tr><tr><td>C:\Program Files (x86)\eScan\updll3.dll3&nbsp;</td><td>&nbsp;</td></tr><tr><td>C:\Program Files\Common Files\SYSTEM\SysResetErr\SysResetErr.DLL&nbsp;</td><td>&nbsp;</td></tr><tr><td>C:\Program Files\Microsoft SQL Server\SpellChecking\MsSpellChecking.DLL&nbsp;</td><td>&nbsp;</td></tr><tr><td>C:\Program Files\Microsoft SQL Server\SpellChecking\MsSpellCheckingHost.DLL&nbsp;</td><td>&nbsp;</td></tr><tr><td>C:\ProgramData\AMD\CNext\atiadlxx.dll&nbsp;</td><td>&nbsp;</td></tr><tr><td>C:\ProgramData\Microsoft\Assistance\LunarG\vulkan-1.dll&nbsp;</td><td>&nbsp;</td></tr><tr><td>C:\ProgramData\Microsoft\Crypto\Escan\updll3.dll&nbsp;</td><td>&nbsp;</td></tr><tr><td>C:\ProgramData\Microsoft\Crypto\Escan\updll3.dll3&nbsp;</td><td>&nbsp;</td></tr><tr><td>C:\ProgramData\Microsoft\Network\Escan\AutoWake.dll&nbsp;</td><td>&nbsp;</td></tr><tr><td>1c31d06cbdf961867ec788288b74bee0db7f07a75ae06d45d30355c0bc7b09fe&nbsp;</td><td>&nbsp;</td></tr><tr><td>1fbc562b08637a111464ba182cd22b1286a185f7cfba143505b99b07313c97a4&nbsp;</td><td>&nbsp;</td></tr></tbody></table></figure>



<h3 class="wp-block-heading">Stage 4 – Backdoor&nbsp;</h3>



<figure class="wp-block-table"><table><tbody><tr><td><strong>IoC</strong>&nbsp;</td><td><strong>Note</strong>&nbsp;</td></tr><tr><td>07beca60c0a50520b8dbc0b8cc2d56614dd48fef0466f846a0a03afbfc42349d&nbsp;</td><td>&nbsp;</td></tr><tr><td>E:\Projects\putty-src\windows\VS2012\x64\Release\plink.pdb&nbsp;</td><td>PDB&nbsp;</td></tr><tr><td>HKEY_LOCAL_MACHINE \SYSTEM\CurrentControlSet\Control\CMF\Class&nbsp;</td><td>Registry&nbsp;</td></tr><tr><td>HKEY_LOCAL_MACHINE\SYSTEM\RNG\FFFF&nbsp;&nbsp;</td><td>Registry&nbsp;</td></tr><tr><td>gesucht[.]net&nbsp;</td><td>&nbsp;</td></tr><tr><td>f0ccfcb5d49d08e9e66b67bb3fedc476fdf5476a432306e78ddaaba4f8e3bbc4&nbsp;</td><td>&nbsp;</td></tr><tr><td>HKEY_LOCAL_MACHINE\SYSTEM\Software\Microsoft\DECLAG&nbsp;</td><td>Registry&nbsp;</td></tr><tr><td>8446d4fc1310b31238f9a610cd25ea832925a25e758b9a41eea66f998163bb34&nbsp;</td><td>Shellcode&nbsp;</td></tr><tr><td>74D7F1AF69FB706E87FF0116B8E4FA3A9B87275505E2EE7A32A8628A2D066549&nbsp;</td><td>&nbsp;</td></tr><tr><td>www.righttrak[.]net:443&nbsp;&nbsp;</td><td>&nbsp;</td></tr><tr><td>185.248.160[.]141&nbsp;</td><td>&nbsp;</td></tr><tr><td>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\PCB&nbsp;</td><td>Registry&nbsp;</td></tr><tr><td>af9f1331ac671d241bf62240aa52389059b4071a0635cb9cb58fa78ab942a33b&nbsp;</td><td>&nbsp;</td></tr></tbody></table></figure>



<h3 class="wp-block-heading">Related and Future Research&nbsp;</h3>



<figure class="wp-block-table"><table><tbody><tr><td><strong>IoC</strong>&nbsp;</td><td><strong>Note</strong>&nbsp;</td></tr><tr><td>&#8220;cmd.exe&#8221; /c type &#8220;\&lt;domain&gt;\SYSVOL\&lt;domain&gt;\scripts\gpon.inc&#8221; | &#8220;\&lt;domain&gt;\SYSVOL\&lt;domain&gt;\scripts\powAMD64.dat&#8221; -nop &#8211;&nbsp;</td><td>Command&nbsp;</td></tr><tr><td>C:\Windows\System32\Tasks\ScheduledDefrag&nbsp;</td><td>Scheduled task&nbsp;</td></tr><tr><td>529763AC53562BE3C1BB2C42BCAB51E3AD8F8A56&nbsp;</td><td>Certificate SHA1&nbsp;</td></tr><tr><td>31070C2EA30E6B4E1C270DF94BE1036AE7F8616B&nbsp;</td><td>Certificate SHA1&nbsp;</td></tr><tr><td>31dfba1b102bbf4092b25e63aae0f27386c480c10191c96c04295cb284f20878&nbsp;</td><td>&nbsp;</td></tr><tr><td>8e96d15864ec0cc6d3976d87e9e76e6eeccc23c551b22dcfacb60232773ec049&nbsp;</td><td>&nbsp;</td></tr><tr><td>b0f94d84888dffacbc10bd7f9983b2d681b55d7e932c2d952d47ee606058df54&nbsp;</td><td>&nbsp;</td></tr><tr><td>f656a418fca7c4275f2441840faaeb70947e4f39d3826d6d2e50a3e7b8120e4e&nbsp;</td><td>&nbsp;</td></tr><tr><td>7f1221c613b9de2da62da613b8b7c9afde2ea026fe6b88198a65c9485ded7b3d&nbsp;</td><td>&nbsp;</td></tr><tr><td>F:\!PROTECT\Real\startW-2008\MainWork\Release\MainWork.pdb&nbsp;</td><td>PDB&nbsp;</td></tr></tbody></table></figure>
                                            </div>

                </article>

                                    <div class="entry-tags clearfix">
                        <span>Tagged as</span><a href="https://decoded.avast.io/tag/antivirus/" rel="tag">antivirus</a>, <a href="https://decoded.avast.io/tag/backdoor/" rel="tag">backdoor</a>, <a href="https://decoded.avast.io/tag/cryptomining/" rel="tag">cryptomining</a>, <a href="https://decoded.avast.io/tag/kimsuky/" rel="tag">Kimsuky</a>, <a href="https://decoded.avast.io/tag/malware/" rel="tag">malware</a>, <a href="https://decoded.avast.io/tag/mitm/" rel="tag">mitm</a>, <a href="https://decoded.avast.io/tag/xmrig/" rel="tag">xmrig</a>                    </div>
                
                                     
		<div class="meks_ess no-labels"><span class="johannes-share-label">Share:</span><a href="#" class="meks_ess-item socicon-twitter" data-url="http://twitter.com/intent/tweet?url=https%3A%2F%2Fdecoded.avast.io%2Fjanrubin%2Fguptiminer-hijacking-antivirus-updates-for-distributing-backdoors-and-casual-mining%2F&amp;text=GuptiMiner%3A%20Hijacking%20Antivirus%20Updates%20for%20Distributing%20Backdoors%20and%20Casual%20Mining"><span>X</span></a><a href="#" class="meks_ess-item socicon-facebook" data-url="http://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fdecoded.avast.io%2Fjanrubin%2Fguptiminer-hijacking-antivirus-updates-for-distributing-backdoors-and-casual-mining%2F&amp;t=GuptiMiner%3A%20Hijacking%20Antivirus%20Updates%20for%20Distributing%20Backdoors%20and%20Casual%20Mining"><span>Facebook</span></a></div>                
                               
		        

            </div>

            
        </div>
    </div>
</div>

        <div class="johannes-section johannes-related section-margin johannes-bg-alt-2">
        <div class="container">
            <div class="section-head">
                <h5 class="section-title h2">Further reading</h5>
            </div>
            <div class="section-content row justify-content-center">
                <div class="col-12 ">
                    <div class="row johannes-items johannes-posts">
                                                                        <div class="col-12 col-md-6 col-lg-4">
                            
<article class="johannes-post johannes-layout-d johannes-layout-g category-pill category-pill-small entry-meta-small post-8701 post type-post status-publish format-standard has-post-thumbnail hentry tag-ai tag-cryptocurrency tag-scam category-pc">
    	    <div class="entry-media">
	        <a href="https://decoded.avast.io/martinchlumecky1/cryptocore-unmasking-the-sophisticated-cryptocurrency-scam-operations/"><img width="344" height="194" src="https://decoded.avast.io/wp-content/uploads/sites/2/2024/07/CC-featured-image-344x194.png" class="attachment-johannes-d size-johannes-d wp-post-image" alt="" loading="lazy" srcset="https://decoded.avast.io/wp-content/uploads/sites/2/2024/07/CC-featured-image-344x194.png 344w, https://decoded.avast.io/wp-content/uploads/sites/2/2024/07/CC-featured-image-540x304.png 540w" sizes="(max-width: 344px) 100vw, 344px" /></a>
				        <div class="entry-category">
	            <a href="https://decoded.avast.io/category/mobile/" rel="tag" class="cat-item category-mobile">Mobile</a><a href="https://decoded.avast.io/category/pc/" rel="tag" class="cat-item category-pc">PC</a>	        </div>
        	    </div>
        <div class="entry-header">
    	        
        <h2 class="entry-title h5"><a href="https://decoded.avast.io/martinchlumecky1/cryptocore-unmasking-the-sophisticated-cryptocurrency-scam-operations/">CryptoCore: Unmasking the Sophisticated Cryptocurrency Scam Operations</a></h2>        	        <div class="entry-meta">
	            <span class="meta-item meta-date"><span class="updated">August 13, 2024</span></span><span class="meta-item meta-author"><span class="vcard author">by <a href="https://decoded.avast.io/author/martinchlumecky1/">Martin Chlumecký</a></span></span>	        </div>
            </div>
    	    <div class="entry-content">
	        <p>As digital currencies have grown, so have cryptocurrency scams, posing significant user risks. The rise of AI and deepfake technology has intensified scams exploiting famous personalities and events by creating realistic fake videos. Platforms like X and YouTube have been especially targeted, with...</p>
	    </div>
        </article>                        </div>
                                                                        <div class="col-12 col-md-6 col-lg-4">
                            
<article class="johannes-post johannes-layout-d johannes-layout-g category-pill category-pill-small entry-meta-small post-8680 post type-post status-publish format-standard has-post-thumbnail hentry tag-decryptor tag-decryptors tag-ransomware category-pc">
    	    <div class="entry-media">
	        <a href="https://decoded.avast.io/threatresearch/decrypted-donex-ransomware-and-its-predecessors/"><img width="344" height="194" src="https://decoded.avast.io/wp-content/uploads/sites/2/2024/07/donex-344x194.jpeg" class="attachment-johannes-d size-johannes-d wp-post-image" alt="" loading="lazy" srcset="https://decoded.avast.io/wp-content/uploads/sites/2/2024/07/donex-344x194.jpeg 344w, https://decoded.avast.io/wp-content/uploads/sites/2/2024/07/donex-540x304.jpeg 540w" sizes="(max-width: 344px) 100vw, 344px" /></a>
				        <div class="entry-category">
	            <a href="https://decoded.avast.io/category/pc/" rel="tag" class="cat-item category-pc">PC</a>	        </div>
        	    </div>
        <div class="entry-header">
    	        
        <h2 class="entry-title h5"><a href="https://decoded.avast.io/threatresearch/decrypted-donex-ransomware-and-its-predecessors/">Decrypted: DoNex Ransomware and its Predecessors</a></h2>        	        <div class="entry-meta">
	            <span class="meta-item meta-date"><span class="updated">July 8, 2024</span></span><span class="meta-item meta-author"><span class="vcard author">by <a href="https://decoded.avast.io/author/threatresearch/">Threat Research Team</a></span></span>	        </div>
            </div>
    	    <div class="entry-content">
	        <p>Researchers from Avast have discovered a flaw in the cryptographic schema of the DoNex ransomware and its predecessors. In cooperation with law enforcement organizations, we have been silently providing the decryptor to DoNex ransomware victims since March 2024. The&nbsp; cryptographic weakness was...</p>
	    </div>
        </article>                        </div>
                                                                        <div class="col-12 col-md-6 col-lg-4">
                            
<article class="johannes-post johannes-layout-d johannes-layout-g category-pill category-pill-small entry-meta-small post-8646 post type-post status-publish format-standard has-post-thumbnail hentry tag-analysis tag-linux tag-malware tag-rootkit category-pc">
    	    <div class="entry-media">
	        <a href="https://decoded.avast.io/davidalvarez/new-diamorphine-rootkit-variant-seen-undetected-in-the-wild/"><img width="344" height="194" src="https://decoded.avast.io/wp-content/uploads/sites/2/2024/06/krzysztof-hepner-C1JTOq_uTpY-unsplash-344x194.jpg" class="attachment-johannes-d size-johannes-d wp-post-image" alt="" loading="lazy" srcset="https://decoded.avast.io/wp-content/uploads/sites/2/2024/06/krzysztof-hepner-C1JTOq_uTpY-unsplash-344x194.jpg 344w, https://decoded.avast.io/wp-content/uploads/sites/2/2024/06/krzysztof-hepner-C1JTOq_uTpY-unsplash-540x304.jpg 540w, https://decoded.avast.io/wp-content/uploads/sites/2/2024/06/krzysztof-hepner-C1JTOq_uTpY-unsplash-1128x635.jpg 1128w" sizes="(max-width: 344px) 100vw, 344px" /></a>
				        <div class="entry-category">
	            <a href="https://decoded.avast.io/category/pc/" rel="tag" class="cat-item category-pc">PC</a>	        </div>
        	    </div>
        <div class="entry-header">
    	        
        <h2 class="entry-title h5"><a href="https://decoded.avast.io/davidalvarez/new-diamorphine-rootkit-variant-seen-undetected-in-the-wild/">New Diamorphine rootkit variant seen undetected in the wild</a></h2>        	        <div class="entry-meta">
	            <span class="meta-item meta-date"><span class="updated">June 18, 2024</span></span><span class="meta-item meta-author"><span class="vcard author">by <a href="https://decoded.avast.io/author/davidalvarez/">David Álvarez</a></span></span>	        </div>
            </div>
    	    <div class="entry-content">
	        <p>Introduction Code reuse is very frequent in malware, especially for those parts of the sample that are complex to develop or hard to write with an essentially different alternative code. By tracking both source code and object code, we efficiently detect new malware and track the evolution of...</p>
	    </div>
        </article>                        </div>
                                            </div>
                </div>
            </div>
        </div>
    </div>
    

    
    
    <footer id="johannes-footer" class="johannes-footer">
        <div class="container">

                            <div class="footer-divider"></div>
                
	<div class="row johannes-footer-widgets justify-content-center">
	    	        	    	        	    	        	    	        	    	</div>
            
                            <div class="johannes-copyright">
                    <p>2024 Copyright © Avast Software s.r.o.</p>
                </div>
                    </div>
    </footer>

            <div class="pswp" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="pswp__bg"></div>
    <div class="pswp__scroll-wrap">
        <div class="pswp__container">
            <div class="pswp__item"></div>
            <div class="pswp__item"></div>
            <div class="pswp__item"></div>
        </div>
        <div class="pswp__ui pswp__ui--hidden">
            <div class="pswp__top-bar">
                <div class="pswp__counter"></div>
                <button class="pswp__button pswp__button--close" title="Close (Esc)"></button>
                <button class="pswp__button pswp__button--fs" title="Toggle fullscreen"></button>
                <button class="pswp__button pswp__button--zoom" title="Zoom in/out"></button>
                <div class="pswp__preloader">
                    <div class="pswp__preloader__icn">
                        <div class="pswp__preloader__cut">
                            <div class="pswp__preloader__donut"></div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="pswp__share-modal pswp__share-modal--hidden pswp__single-tap">
                <div class="pswp__share-tooltip"></div>
            </div>
            <button class="pswp__button pswp__button--arrow--left" title="Previous (arrow left)">
            </button>
            <button class="pswp__button pswp__button--arrow--right" title="Next (arrow right)">
            </button>
            <div class="pswp__caption">
                <div class="pswp__caption__center"></div>
            </div>
        </div>
    </div>
</div>    

</div>


    <a href="javascript:void(0)" id="johannes-goto-top" class="johannes-goto-top"><i class="jf jf-chevron-up"></i></a>

<div class="johannes-action-overlay">

</div><div class="johannes-sidebar johannes-sidebar-hidden">

	<div class="johannes-sidebar-branding">
	    <span class="site-title h1 "><a href="https://decoded.avast.io/" rel="home"><picture class="johannes-logo"><source media="(min-width: 1050px)" srcset="https://wordpress-salat-test.storage.googleapis.com/sites/2/2019/06/Asset-22ldpi.png"><source srcset="https://wordpress-salat-test.storage.googleapis.com/sites/2/2019/06/Asset-22ldpi.png"><img src="https://wordpress-salat-test.storage.googleapis.com/sites/2/2019/06/Asset-22ldpi.png" alt="Avast Threat Labs"></picture></a></span>	    <span class="johannes-action-close"><i class="jf jf-close" aria-hidden="true"></i></span>
	</div>	

		<div class="johannes-menu-mobile widget d-md-block d-lg-none">
		<div class="widget-inside johannes-bg-alt-2">
		<h4 class="widget-title">Menu</h4>
			    <nav class="menu-main-menu-container"><ul id="menu-main-menu-1" class="johannes-menu johannes-menu-primary"><li class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-367 category-mobile"><a href="https://decoded.avast.io/category/mobile/">Mobile</a></li>
<li class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-368 category-network"><a href="https://decoded.avast.io/category/network/">Network</a></li>
<li class="menu-item menu-item-type-taxonomy menu-item-object-category current-post-ancestor current-menu-parent current-post-parent menu-item-369 category-pc"><a href="https://decoded.avast.io/category/pc/">PC</a></li>
<li class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-370 category-iot"><a href="https://decoded.avast.io/category/iot/">IoT</a></li>
<li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-371"><a href="https://www.avast.com/en-us/careers">Careers</a></li>
</ul></nav>			                                    <ul class="johannes-menu-action johannes-search">
	<li><form class="search-form" action="https://decoded.avast.io/" method="get">
	<input name="s" type="text" value="" placeholder="Type here to search..." />
		<button type="submit">Search</button>
</form>
</li>
</ul>                            		</div>
	</div>

		    <div id="categories-2" class="widget widget_categories"><div class="widget-inside johannes-bg-alt-2"><h4 class="widget-title">Categories</h4>
			<ul>
					<li class="cat-item cat-item-32 category-events"><a href="https://decoded.avast.io/category/events/">Events</a>
</li>
	<li class="cat-item cat-item-23 category-iot"><a href="https://decoded.avast.io/category/iot/">IoT</a>
</li>
	<li class="cat-item cat-item-22 category-mobile"><a href="https://decoded.avast.io/category/mobile/">Mobile</a>
</li>
	<li class="cat-item cat-item-20 category-network"><a href="https://decoded.avast.io/category/network/">Network</a>
</li>
	<li class="cat-item cat-item-106 category-other-research"><a href="https://decoded.avast.io/category/other-research/">Other/Research</a>
</li>
	<li class="cat-item cat-item-21 category-pc"><a href="https://decoded.avast.io/category/pc/">PC</a>
</li>
	<li class="cat-item cat-item-135 category-reports"><a href="https://decoded.avast.io/category/reports/">Reports</a>
</li>
	<li class="cat-item cat-item-1 category-uncategorized"><a href="https://decoded.avast.io/category/uncategorized/">Uncategorized</a>
</li>
			</ul>

			</div></div><div id="tag_cloud-2" class="widget widget_tag_cloud"><div class="widget-inside johannes-bg-alt-2"><h4 class="widget-title">Tags</h4><div class="tagcloud"><a href="https://decoded.avast.io/tag/ai/" class="tag-cloud-link tag-link-194 tag-link-position-1" style="font-size: 9.3125pt;" aria-label="AI (3 items)">AI</a>
<a href="https://decoded.avast.io/tag/analysis/" class="tag-cloud-link tag-link-5 tag-link-position-2" style="font-size: 20.578125pt;" aria-label="analysis (42 items)">analysis</a>
<a href="https://decoded.avast.io/tag/android/" class="tag-cloud-link tag-link-6 tag-link-position-3" style="font-size: 12.046875pt;" aria-label="Android (6 items)">Android</a>
<a href="https://decoded.avast.io/tag/apt/" class="tag-cloud-link tag-link-63 tag-link-position-4" style="font-size: 12.046875pt;" aria-label="APT (6 items)">APT</a>
<a href="https://decoded.avast.io/tag/backdoor/" class="tag-cloud-link tag-link-65 tag-link-position-5" style="font-size: 14.890625pt;" aria-label="backdoor (12 items)">backdoor</a>
<a href="https://decoded.avast.io/tag/botnet/" class="tag-cloud-link tag-link-157 tag-link-position-6" style="font-size: 10.40625pt;" aria-label="botnet (4 items)">botnet</a>
<a href="https://decoded.avast.io/tag/brazil/" class="tag-cloud-link tag-link-38 tag-link-position-7" style="font-size: 8pt;" aria-label="brazil (2 items)">brazil</a>
<a href="https://decoded.avast.io/tag/cryptocurrency/" class="tag-cloud-link tag-link-105 tag-link-position-8" style="font-size: 11.28125pt;" aria-label="cryptocurrency (5 items)">cryptocurrency</a>
<a href="https://decoded.avast.io/tag/cryptomining/" class="tag-cloud-link tag-link-9 tag-link-position-9" style="font-size: 14.125pt;" aria-label="cryptomining (10 items)">cryptomining</a>
<a href="https://decoded.avast.io/tag/csrf/" class="tag-cloud-link tag-link-26 tag-link-position-10" style="font-size: 9.3125pt;" aria-label="csrf (3 items)">csrf</a>
<a href="https://decoded.avast.io/tag/ddos/" class="tag-cloud-link tag-link-173 tag-link-position-11" style="font-size: 9.3125pt;" aria-label="ddos (3 items)">ddos</a>
<a href="https://decoded.avast.io/tag/decryptor/" class="tag-cloud-link tag-link-165 tag-link-position-12" style="font-size: 12.59375pt;" aria-label="decryptor (7 items)">decryptor</a>
<a href="https://decoded.avast.io/tag/decryptors/" class="tag-cloud-link tag-link-134 tag-link-position-13" style="font-size: 15.328125pt;" aria-label="decryptors (13 items)">decryptors</a>
<a href="https://decoded.avast.io/tag/desktop/" class="tag-cloud-link tag-link-139 tag-link-position-14" style="font-size: 14.890625pt;" aria-label="desktop (12 items)">desktop</a>
<a href="https://decoded.avast.io/tag/dirtymoe/" class="tag-cloud-link tag-link-117 tag-link-position-15" style="font-size: 11.28125pt;" aria-label="DirtyMoe (5 items)">DirtyMoe</a>
<a href="https://decoded.avast.io/tag/dns-hijack/" class="tag-cloud-link tag-link-27 tag-link-position-16" style="font-size: 9.3125pt;" aria-label="dns hijack (3 items)">dns hijack</a>
<a href="https://decoded.avast.io/tag/dropper/" class="tag-cloud-link tag-link-52 tag-link-position-17" style="font-size: 8pt;" aria-label="dropper (2 items)">dropper</a>
<a href="https://decoded.avast.io/tag/exploit/" class="tag-cloud-link tag-link-28 tag-link-position-18" style="font-size: 12.59375pt;" aria-label="exploit (7 items)">exploit</a>
<a href="https://decoded.avast.io/tag/fake-app/" class="tag-cloud-link tag-link-7 tag-link-position-19" style="font-size: 8pt;" aria-label="fake-app (2 items)">fake-app</a>
<a href="https://decoded.avast.io/tag/ghostdns/" class="tag-cloud-link tag-link-29 tag-link-position-20" style="font-size: 9.3125pt;" aria-label="ghostdns (3 items)">ghostdns</a>
<a href="https://decoded.avast.io/tag/google-play-store/" class="tag-cloud-link tag-link-40 tag-link-position-21" style="font-size: 8pt;" aria-label="Google Play Store (2 items)">Google Play Store</a>
<a href="https://decoded.avast.io/tag/iot/" class="tag-cloud-link tag-link-13 tag-link-position-22" style="font-size: 13.140625pt;" aria-label="iot (8 items)">iot</a>
<a href="https://decoded.avast.io/tag/malware/" class="tag-cloud-link tag-link-37 tag-link-position-23" style="font-size: 22pt;" aria-label="malware (57 items)">malware</a>
<a href="https://decoded.avast.io/tag/mobile/" class="tag-cloud-link tag-link-8 tag-link-position-24" style="font-size: 16.75pt;" aria-label="mobile (18 items)">mobile</a>
<a href="https://decoded.avast.io/tag/obfuscation/" class="tag-cloud-link tag-link-57 tag-link-position-25" style="font-size: 11.28125pt;" aria-label="obfuscation (5 items)">obfuscation</a>
<a href="https://decoded.avast.io/tag/p-code/" class="tag-cloud-link tag-link-110 tag-link-position-26" style="font-size: 11.28125pt;" aria-label="P-Code (5 items)">P-Code</a>
<a href="https://decoded.avast.io/tag/phishing/" class="tag-cloud-link tag-link-31 tag-link-position-27" style="font-size: 11.28125pt;" aria-label="phishing (5 items)">phishing</a>
<a href="https://decoded.avast.io/tag/ransomware/" class="tag-cloud-link tag-link-47 tag-link-position-28" style="font-size: 15.875pt;" aria-label="ransomware (15 items)">ransomware</a>
<a href="https://decoded.avast.io/tag/rat/" class="tag-cloud-link tag-link-34 tag-link-position-29" style="font-size: 11.28125pt;" aria-label="rat (5 items)">rat</a>
<a href="https://decoded.avast.io/tag/report/" class="tag-cloud-link tag-link-136 tag-link-position-30" style="font-size: 14.5625pt;" aria-label="report (11 items)">report</a>
<a href="https://decoded.avast.io/tag/research/" class="tag-cloud-link tag-link-109 tag-link-position-31" style="font-size: 12.59375pt;" aria-label="Research (7 items)">Research</a>
<a href="https://decoded.avast.io/tag/reversing/" class="tag-cloud-link tag-link-45 tag-link-position-32" style="font-size: 16.53125pt;" aria-label="reversing (17 items)">reversing</a>
<a href="https://decoded.avast.io/tag/risk/" class="tag-cloud-link tag-link-138 tag-link-position-33" style="font-size: 14.5625pt;" aria-label="risk (11 items)">risk</a>
<a href="https://decoded.avast.io/tag/rootkit/" class="tag-cloud-link tag-link-126 tag-link-position-34" style="font-size: 11.28125pt;" aria-label="rootkit (5 items)">rootkit</a>
<a href="https://decoded.avast.io/tag/router/" class="tag-cloud-link tag-link-25 tag-link-position-35" style="font-size: 9.3125pt;" aria-label="router (3 items)">router</a>
<a href="https://decoded.avast.io/tag/security/" class="tag-cloud-link tag-link-54 tag-link-position-36" style="font-size: 9.3125pt;" aria-label="security (3 items)">security</a>
<a href="https://decoded.avast.io/tag/series/" class="tag-cloud-link tag-link-113 tag-link-position-37" style="font-size: 15.875pt;" aria-label="series (15 items)">series</a>
<a href="https://decoded.avast.io/tag/spyware/" class="tag-cloud-link tag-link-35 tag-link-position-38" style="font-size: 8pt;" aria-label="spyware (2 items)">spyware</a>
<a href="https://decoded.avast.io/tag/stealer/" class="tag-cloud-link tag-link-36 tag-link-position-39" style="font-size: 13.140625pt;" aria-label="stealer (8 items)">stealer</a>
<a href="https://decoded.avast.io/tag/takedown/" class="tag-cloud-link tag-link-50 tag-link-position-40" style="font-size: 8pt;" aria-label="takedown (2 items)">takedown</a>
<a href="https://decoded.avast.io/tag/threat-intel/" class="tag-cloud-link tag-link-11 tag-link-position-41" style="font-size: 8pt;" aria-label="threat-intel (2 items)">threat-intel</a>
<a href="https://decoded.avast.io/tag/threats/" class="tag-cloud-link tag-link-137 tag-link-position-42" style="font-size: 14.890625pt;" aria-label="threats (12 items)">threats</a>
<a href="https://decoded.avast.io/tag/vb/" class="tag-cloud-link tag-link-108 tag-link-position-43" style="font-size: 12.59375pt;" aria-label="VB (7 items)">VB</a>
<a href="https://decoded.avast.io/tag/vulnerability/" class="tag-cloud-link tag-link-12 tag-link-position-44" style="font-size: 12.046875pt;" aria-label="vulnerability (6 items)">vulnerability</a>
<a href="https://decoded.avast.io/tag/worm/" class="tag-cloud-link tag-link-49 tag-link-position-45" style="font-size: 8pt;" aria-label="worm (2 items)">worm</a></div>
</div></div>
		<div id="recent-posts-2" class="widget widget_recent_entries"><div class="widget-inside johannes-bg-alt-2">
		<h4 class="widget-title">Recent Posts</h4>
		<ul>
											<li>
					<a href="https://decoded.avast.io/martinchlumecky1/cryptocore-unmasking-the-sophisticated-cryptocurrency-scam-operations/">CryptoCore: Unmasking the Sophisticated Cryptocurrency Scam Operations</a>
									</li>
											<li>
					<a href="https://decoded.avast.io/threatresearch/decrypted-donex-ransomware-and-its-predecessors/">Decrypted: DoNex Ransomware and its Predecessors</a>
									</li>
											<li>
					<a href="https://decoded.avast.io/davidalvarez/new-diamorphine-rootkit-variant-seen-undetected-in-the-wild/">New Diamorphine rootkit variant seen undetected in the wild</a>
									</li>
											<li>
					<a href="https://decoded.avast.io/threatresearch/avast-q1-2024-threat-report/">Avast Q1/2024 Threat Report</a>
									</li>
											<li>
					<a href="https://decoded.avast.io/janrubin/guptiminer-hijacking-antivirus-updates-for-distributing-backdoors-and-casual-mining/" aria-current="page">GuptiMiner: Hijacking Antivirus Updates for Distributing Backdoors and Casual Mining</a>
									</li>
					</ul>

		</div></div><div id="archives-2" class="widget widget_archive"><div class="widget-inside johannes-bg-alt-2"><h4 class="widget-title">Archive</h4>
			<ul>
					<li><a href='https://decoded.avast.io/2024/08/'>August 2024</a></li>
	<li><a href='https://decoded.avast.io/2024/07/'>July 2024</a></li>
	<li><a href='https://decoded.avast.io/2024/06/'>June 2024</a></li>
	<li><a href='https://decoded.avast.io/2024/05/'>May 2024</a></li>
	<li><a href='https://decoded.avast.io/2024/04/'>April 2024</a></li>
	<li><a href='https://decoded.avast.io/2024/02/'>February 2024</a></li>
	<li><a href='https://decoded.avast.io/2024/01/'>January 2024</a></li>
	<li><a href='https://decoded.avast.io/2023/12/'>December 2023</a></li>
	<li><a href='https://decoded.avast.io/2023/11/'>November 2023</a></li>
	<li><a href='https://decoded.avast.io/2023/10/'>October 2023</a></li>
	<li><a href='https://decoded.avast.io/2023/09/'>September 2023</a></li>
	<li><a href='https://decoded.avast.io/2023/08/'>August 2023</a></li>
	<li><a href='https://decoded.avast.io/2023/07/'>July 2023</a></li>
	<li><a href='https://decoded.avast.io/2023/06/'>June 2023</a></li>
	<li><a href='https://decoded.avast.io/2023/05/'>May 2023</a></li>
	<li><a href='https://decoded.avast.io/2023/04/'>April 2023</a></li>
	<li><a href='https://decoded.avast.io/2023/02/'>February 2023</a></li>
	<li><a href='https://decoded.avast.io/2023/01/'>January 2023</a></li>
	<li><a href='https://decoded.avast.io/2022/12/'>December 2022</a></li>
	<li><a href='https://decoded.avast.io/2022/11/'>November 2022</a></li>
	<li><a href='https://decoded.avast.io/2022/10/'>October 2022</a></li>
	<li><a href='https://decoded.avast.io/2022/09/'>September 2022</a></li>
	<li><a href='https://decoded.avast.io/2022/08/'>August 2022</a></li>
	<li><a href='https://decoded.avast.io/2022/07/'>July 2022</a></li>
	<li><a href='https://decoded.avast.io/2022/06/'>June 2022</a></li>
	<li><a href='https://decoded.avast.io/2022/05/'>May 2022</a></li>
	<li><a href='https://decoded.avast.io/2022/04/'>April 2022</a></li>
	<li><a href='https://decoded.avast.io/2022/03/'>March 2022</a></li>
	<li><a href='https://decoded.avast.io/2022/02/'>February 2022</a></li>
	<li><a href='https://decoded.avast.io/2022/01/'>January 2022</a></li>
	<li><a href='https://decoded.avast.io/2021/12/'>December 2021</a></li>
	<li><a href='https://decoded.avast.io/2021/11/'>November 2021</a></li>
	<li><a href='https://decoded.avast.io/2021/10/'>October 2021</a></li>
	<li><a href='https://decoded.avast.io/2021/09/'>September 2021</a></li>
	<li><a href='https://decoded.avast.io/2021/08/'>August 2021</a></li>
	<li><a href='https://decoded.avast.io/2021/07/'>July 2021</a></li>
	<li><a href='https://decoded.avast.io/2021/06/'>June 2021</a></li>
	<li><a href='https://decoded.avast.io/2021/05/'>May 2021</a></li>
	<li><a href='https://decoded.avast.io/2021/04/'>April 2021</a></li>
	<li><a href='https://decoded.avast.io/2021/03/'>March 2021</a></li>
	<li><a href='https://decoded.avast.io/2021/02/'>February 2021</a></li>
	<li><a href='https://decoded.avast.io/2020/12/'>December 2020</a></li>
	<li><a href='https://decoded.avast.io/2020/11/'>November 2020</a></li>
	<li><a href='https://decoded.avast.io/2020/10/'>October 2020</a></li>
	<li><a href='https://decoded.avast.io/2020/09/'>September 2020</a></li>
	<li><a href='https://decoded.avast.io/2020/08/'>August 2020</a></li>
	<li><a href='https://decoded.avast.io/2020/06/'>June 2020</a></li>
	<li><a href='https://decoded.avast.io/2020/05/'>May 2020</a></li>
	<li><a href='https://decoded.avast.io/2020/04/'>April 2020</a></li>
	<li><a href='https://decoded.avast.io/2019/12/'>December 2019</a></li>
	<li><a href='https://decoded.avast.io/2019/09/'>September 2019</a></li>
	<li><a href='https://decoded.avast.io/2019/08/'>August 2019</a></li>
	<li><a href='https://decoded.avast.io/2019/07/'>July 2019</a></li>
	<li><a href='https://decoded.avast.io/2019/04/'>April 2019</a></li>
	<li><a href='https://decoded.avast.io/2019/03/'>March 2019</a></li>
	<li><a href='https://decoded.avast.io/2019/02/'>February 2019</a></li>
	<li><a href='https://decoded.avast.io/2019/01/'>January 2019</a></li>
	<li><a href='https://decoded.avast.io/2018/08/'>August 2018</a></li>
	<li><a href='https://decoded.avast.io/2018/01/'>January 2018</a></li>
	<li><a href='https://decoded.avast.io/2017/10/'>October 2017</a></li>
			</ul>

			</div></div><div id="meta-2" class="widget widget_meta"><div class="widget-inside johannes-bg-alt-2"><h4 class="widget-title">Meta</h4>
		<ul>
						<li><a rel="nofollow" href="https://decoded.avast.io/wp-login.php">Log in</a></li>
			<li><a href="https://decoded.avast.io/feed/">Entries feed</a></li>
			<li><a href="https://decoded.avast.io/comments/feed/">Comments feed</a></li>

			<li><a href="https://wordpress.org/">WordPress.org</a></li>
		</ul>

		</div></div>    
</div>
<script type="text/javascript" src="https://decoded.avast.io/wp-includes/js/imagesloaded.min.js?ver=5.0.0" id="imagesloaded-js"></script>
<script type="text/javascript" src="https://decoded.avast.io/wp-includes/js/masonry.min.js?ver=4.2.2" id="masonry-js"></script>
<script type="text/javascript" src="https://decoded.avast.io/wp-includes/js/jquery/jquery.masonry.min.js?ver=3.1.2b" id="jquery-masonry-js"></script>
<script type="text/javascript" id="johannes-main-js-extra">
/* <![CDATA[ */
var johannes_js_settings = {"rtl_mode":"","header_sticky":"","header_sticky_offset":"300","header_sticky_up":"","popup":"1","go_to_top":"1","grid":{"column":50,"gutter":{"xs":15,"sm":15,"md":30,"lg":30,"xl":48},"breakpoint":{"xs":0,"sm":374,"md":600,"lg":900,"xl":1128}}};
/* ]]> */
</script>
<script type="text/javascript" src="https://decoded.avast.io/wp-content/themes/johannes/assets/js/min.js?ver=1.1.3" id="johannes-main-js"></script>
<script type="text/javascript" src="https://decoded.avast.io/wp-content/plugins/meks-easy-social-share/assets/js/main.js?ver=1.3" id="meks_ess-main-js"></script>
<script type="text/javascript" src="https://decoded.avast.io/wp-content/plugins/page-links-to/dist/new-tab.js?ver=3.3.7" id="page-links-to-js"></script>
<script type="text/javascript">(function (undefined) {let scriptOptions={"_localizedStrings":{"redirect_overlay_title":"Hold On","redirect_overlay_text":"You are being redirected to another page,<br>it may take a few seconds.","webview_notification_text":"The selected provider doesn't support embedded browsers!"},"_targetWindow":"prefer-popup","_redirectOverlay":"overlay-with-spinner-and-message","_unsupportedWebviewBehavior":""};
/**
 * Used when Cross-Origin-Opener-Policy blocked the access to the opener. We can't have a reference of the opened windows, so we should attempt to refresh only the windows that has opened popups.
 */
window._nslHasOpenedPopup = false;
window._nslWebViewNoticeElement = null;

window.NSLPopup = function (url, title, w, h) {
    const userAgent = navigator.userAgent,
        mobile = function () {
            return /\b(iPhone|iP[ao]d)/.test(userAgent) ||
                /\b(iP[ao]d)/.test(userAgent) ||
                /Android/i.test(userAgent) ||
                /Mobile/i.test(userAgent);
        },
        screenX = window.screenX !== undefined ? window.screenX : window.screenLeft,
        screenY = window.screenY !== undefined ? window.screenY : window.screenTop,
        outerWidth = window.outerWidth !== undefined ? window.outerWidth : document.documentElement.clientWidth,
        outerHeight = window.outerHeight !== undefined ? window.outerHeight : document.documentElement.clientHeight - 22,
        targetWidth = mobile() ? null : w,
        targetHeight = mobile() ? null : h,
        left = parseInt(screenX + (outerWidth - targetWidth) / 2, 10),
        right = parseInt(screenY + (outerHeight - targetHeight) / 2.5, 10),
        features = [];
    if (targetWidth !== null) {
        features.push('width=' + targetWidth);
    }
    if (targetHeight !== null) {
        features.push('height=' + targetHeight);
    }
    features.push('left=' + left);
    features.push('top=' + right);
    features.push('scrollbars=1');

    const newWindow = window.open(url, title, features.join(','));

    if (window.focus) {
        newWindow.focus();
    }

    window._nslHasOpenedPopup = true;

    return newWindow;
};

let isWebView = null;

function checkWebView() {
    if (isWebView === null) {
        function _detectOS(ua) {
            if (/Android/.test(ua)) {
                return "Android";
            } else if (/iPhone|iPad|iPod/.test(ua)) {
                return "iOS";
            } else if (/Windows/.test(ua)) {
                return "Windows";
            } else if (/Mac OS X/.test(ua)) {
                return "Mac";
            } else if (/CrOS/.test(ua)) {
                return "Chrome OS";
            } else if (/Firefox/.test(ua)) {
                return "Firefox OS";
            }
            return "";
        }

        function _detectBrowser(ua) {
            let android = /Android/.test(ua);

            if (/Opera Mini/.test(ua) || / OPR/.test(ua) || / OPT/.test(ua)) {
                return "Opera";
            } else if (/CriOS/.test(ua)) {
                return "Chrome for iOS";
            } else if (/Edge/.test(ua)) {
                return "Edge";
            } else if (android && /Silk\//.test(ua)) {
                return "Silk";
            } else if (/Chrome/.test(ua)) {
                return "Chrome";
            } else if (/Firefox/.test(ua)) {
                return "Firefox";
            } else if (android) {
                return "AOSP";
            } else if (/MSIE|Trident/.test(ua)) {
                return "IE";
            } else if (/Safari\//.test(ua)) {
                return "Safari";
            } else if (/AppleWebKit/.test(ua)) {
                return "WebKit";
            }
            return "";
        }

        function _detectBrowserVersion(ua, browser) {
            if (browser === "Opera") {
                return /Opera Mini/.test(ua) ? _getVersion(ua, "Opera Mini/") :
                    / OPR/.test(ua) ? _getVersion(ua, " OPR/") :
                        _getVersion(ua, " OPT/");
            } else if (browser === "Chrome for iOS") {
                return _getVersion(ua, "CriOS/");
            } else if (browser === "Edge") {
                return _getVersion(ua, "Edge/");
            } else if (browser === "Chrome") {
                return _getVersion(ua, "Chrome/");
            } else if (browser === "Firefox") {
                return _getVersion(ua, "Firefox/");
            } else if (browser === "Silk") {
                return _getVersion(ua, "Silk/");
            } else if (browser === "AOSP") {
                return _getVersion(ua, "Version/");
            } else if (browser === "IE") {
                return /IEMobile/.test(ua) ? _getVersion(ua, "IEMobile/") :
                    /MSIE/.test(ua) ? _getVersion(ua, "MSIE ")
                        :
                        _getVersion(ua, "rv:");
            } else if (browser === "Safari") {
                return _getVersion(ua, "Version/");
            } else if (browser === "WebKit") {
                return _getVersion(ua, "WebKit/");
            }
            return "0.0.0";
        }

        function _getVersion(ua, token) {
            try {
                return _normalizeSemverString(ua.split(token)[1].trim().split(/[^\w\.]/)[0]);
            } catch (o_O) {
            }
            return "0.0.0";
        }

        function _normalizeSemverString(version) {
            const ary = version.split(/[\._]/);
            return (parseInt(ary[0], 10) || 0) + "." +
                (parseInt(ary[1], 10) || 0) + "." +
                (parseInt(ary[2], 10) || 0);
        }

        function _isWebView(ua, os, browser, version, options) {
            switch (os + browser) {
                case "iOSSafari":
                    return false;
                case "iOSWebKit":
                    return _isWebView_iOS(options);
                case "AndroidAOSP":
                    return false;
                case "AndroidChrome":
                    return parseFloat(version) >= 42 ? /; wv/.test(ua) : /\d{2}\.0\.0/.test(version) ? true : _isWebView_Android(options);
            }
            return false;
        }

        function _isWebView_iOS(options) {
            const document = (window["document"] || {});

            if ("WEB_VIEW" in options) {
                return options["WEB_VIEW"];
            }
            return !("fullscreenEnabled" in document || "webkitFullscreenEnabled" in document || false);
        }

        function _isWebView_Android(options) {
            if ("WEB_VIEW" in options) {
                return options["WEB_VIEW"];
            }
            return !("requestFileSystem" in window || "webkitRequestFileSystem" in window || false);
        }

        const options = {},
            nav = window.navigator || {},
            ua = nav.userAgent || "",
            os = _detectOS(ua),
            browser = _detectBrowser(ua),
            browserVersion = _detectBrowserVersion(ua, browser);

        isWebView = _isWebView(ua, os, browser, browserVersion, options);
    }

    return isWebView;
}

function isAllowedWebViewForUserAgent(provider) {
    const facebookAllowedWebViews = [
        'Instagram',
        'FBAV',
        'FBAN'
    ];
    let whitelist = [];

    if (provider && provider === 'facebook') {
        whitelist = facebookAllowedWebViews;
    }

    const nav = window.navigator || {},
        ua = nav.userAgent || "";

    if (whitelist.length && ua.match(new RegExp(whitelist.join('|')))) {
        return true;
    }

    return false;
}

function disableButtonInWebView(providerButtonElement) {
    if (providerButtonElement) {
        providerButtonElement.classList.add('nsl-disabled-provider');
        providerButtonElement.setAttribute('href', '#');

        providerButtonElement.addEventListener('pointerdown', (e) => {
            if (!window._nslWebViewNoticeElement) {
                window._nslWebViewNoticeElement = document.createElement('div');
                window._nslWebViewNoticeElement.id = "nsl-notices-fallback";
                window._nslWebViewNoticeElement.addEventListener('pointerdown', function (e) {
                    this.parentNode.removeChild(this);
                    window._nslWebViewNoticeElement = null;
                });
                const webviewNoticeHTML = '<div class="error"><p>' + scriptOptions._localizedStrings.webview_notification_text + '</p></div>';

                window._nslWebViewNoticeElement.insertAdjacentHTML("afterbegin", webviewNoticeHTML);
                document.body.appendChild(window._nslWebViewNoticeElement);
            }
        });
    }

}

window._nslDOMReady(function () {

    window.nslRedirect = function (url) {
        if (scriptOptions._redirectOverlay) {
            const overlay = document.createElement('div');
            overlay.id = "nsl-redirect-overlay";
            let overlayHTML = '';
            const overlayContainer = "<div id='nsl-redirect-overlay-container'>",
                overlayContainerClose = "</div>",
                overlaySpinner = "<div id='nsl-redirect-overlay-spinner'></div>",
                overlayTitle = "<p id='nsl-redirect-overlay-title'>" + scriptOptions._localizedStrings.redirect_overlay_title + "</p>",
                overlayText = "<p id='nsl-redirect-overlay-text'>" + scriptOptions._localizedStrings.redirect_overlay_text + "</p>";

            switch (scriptOptions._redirectOverlay) {
                case "overlay-only":
                    break;
                case "overlay-with-spinner":
                    overlayHTML = overlayContainer + overlaySpinner + overlayContainerClose;
                    break;
                default:
                    overlayHTML = overlayContainer + overlaySpinner + overlayTitle + overlayText + overlayContainerClose;
                    break;
            }

            overlay.insertAdjacentHTML("afterbegin", overlayHTML);
            document.body.appendChild(overlay);
        }

        window.location = url;
    };

    let targetWindow = scriptOptions._targetWindow || 'prefer-popup',
        lastPopup = false;


    document.addEventListener('click', function (e) {
        if (e.target) {
            const buttonLinkElement = e.target.closest('a[data-plugin="nsl"][data-action="connect"]') || e.target.closest('a[data-plugin="nsl"][data-action="link"]');
            if (buttonLinkElement) {
                if (lastPopup && !lastPopup.closed) {
                    e.preventDefault();
                    lastPopup.focus();
                } else {

                    let href = buttonLinkElement.href,
                        success = false;
                    if (href.indexOf('?') !== -1) {
                        href += '&';
                    } else {
                        href += '?';
                    }

                    const redirectTo = buttonLinkElement.dataset.redirect;
                    if (redirectTo === 'current') {
                        href += 'redirect=' + encodeURIComponent(window.location.href) + '&';
                    } else if (redirectTo && redirectTo !== '') {
                        href += 'redirect=' + encodeURIComponent(redirectTo) + '&';
                    }

                    if (targetWindow !== 'prefer-same-window' && checkWebView()) {
                        targetWindow = 'prefer-same-window';
                    }

                    if (targetWindow === 'prefer-popup') {
                        lastPopup = NSLPopup(href + 'display=popup', 'nsl-social-connect', buttonLinkElement.dataset.popupwidth, buttonLinkElement.dataset.popupheight);
                        if (lastPopup) {
                            success = true;
                            e.preventDefault();
                        }
                    } else if (targetWindow === 'prefer-new-tab') {
                        const newTab = window.open(href + 'display=popup', '_blank');
                        if (newTab) {
                            if (window.focus) {
                                newTab.focus();
                            }
                            success = true;
                            window._nslHasOpenedPopup = true;
                            e.preventDefault();
                        }
                    }

                    if (!success) {
                        window.location = href;
                        e.preventDefault();
                    }
                }
            }
        }
    });

    let buttonCountChanged = false;

    const googleLoginButtons = document.querySelectorAll(' a[data-plugin="nsl"][data-provider="google"]');
    if (googleLoginButtons.length && checkWebView()) {
        googleLoginButtons.forEach(function (googleLoginButton) {
            if (scriptOptions._unsupportedWebviewBehavior === 'disable-button') {
                disableButtonInWebView(googleLoginButton);
            } else {
                googleLoginButton.remove();
                buttonCountChanged = true;
            }
        });
    }

    const facebookLoginButtons = document.querySelectorAll(' a[data-plugin="nsl"][data-provider="facebook"]');
    if (facebookLoginButtons.length && checkWebView() && /Android/.test(window.navigator.userAgent) && !isAllowedWebViewForUserAgent('facebook')) {
        facebookLoginButtons.forEach(function (facebookLoginButton) {
            if (scriptOptions._unsupportedWebviewBehavior === 'disable-button') {
                disableButtonInWebView(facebookLoginButton);
            } else {
                facebookLoginButton.remove();
                buttonCountChanged = true;
            }
        });
    }

    const separators = document.querySelectorAll('div.nsl-separator');
    if (buttonCountChanged && separators.length) {
        separators.forEach(function (separator) {
            const separatorParentNode = separator.parentNode;
            if (separatorParentNode) {
                const separatorButtonContainer = separatorParentNode.querySelector('div.nsl-container-buttons');
                if (separatorButtonContainer && !separatorButtonContainer.hasChildNodes()) {
                    separator.remove();
                }
            }
        })
    }
});

/**
 * Cross-Origin-Opener-Policy blocked the access to the opener
 */
if (typeof BroadcastChannel === "function") {
    const _nslLoginBroadCastChannel = new BroadcastChannel('nsl_login_broadcast_channel');
    _nslLoginBroadCastChannel.onmessage = (event) => {
        if (window?._nslHasOpenedPopup && event.data?.action === 'redirect') {
            window._nslHasOpenedPopup = false;

            const url = event.data?.href;
            _nslLoginBroadCastChannel.close();
            if (typeof window.nslRedirect === 'function') {
                window.nslRedirect(url);
            } else {
                window.opener.location = url;
            }
        }
    };
}})();</script></body>

</html>