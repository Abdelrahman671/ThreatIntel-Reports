<!DOCTYPE html><html lang="en"><head><meta charSet="utf-8"/><meta name="viewport" content="width=device-width"/><title>BITS and Bytes: Analyzing BITSLOTH, a newly identified backdoor — Elastic Security Labs</title><meta name="description" content="Elastic Security Labs identified a novel Windows backdoor leveraging the Background Intelligent Transfer Service (BITS) for C2. This malware was found during a recent activity group tracked as REF8747."/><meta property="og:title" content="BITS and Bytes: Analyzing BITSLOTH, a newly identified backdoor — Elastic Security Labs"/><meta property="og:description" content="Elastic Security Labs identified a novel Windows backdoor leveraging the Background Intelligent Transfer Service (BITS) for C2. This malware was found during a recent activity group tracked as REF8747."/><meta property="og:image" content="https://www.elastic.co/security-labs/assets/images/bits-and-bytes-analyzing-bitsloth/Security Labs Images 29.jpg?3f2756a7711cc513f6dbee96a3834434"/><meta property="og:image:alt" content="Elastic Security Labs identified a novel Windows backdoor leveraging the Background Intelligent Transfer Service (BITS) for C2. This malware was found during a recent activity group tracked as REF8747."/><meta property="og:site_name"/><meta property="og:url" content="https://www.elastic.co/security-labs/bits-and-bytes-analyzing-bitsloth"/><meta property="og:type" content="website"/><meta name="twitter:card" content="summary_large_image"/><meta name="twitter:title" content="BITS and Bytes: Analyzing BITSLOTH, a newly identified backdoor — Elastic Security Labs"/><meta name="twitter:description" content="Elastic Security Labs identified a novel Windows backdoor leveraging the Background Intelligent Transfer Service (BITS) for C2. This malware was found during a recent activity group tracked as REF8747."/><meta name="twitter:image" content="https://www.elastic.co/security-labs/assets/images/bits-and-bytes-analyzing-bitsloth/Security Labs Images 29.jpg?3f2756a7711cc513f6dbee96a3834434"/><meta name="twitter:image:alt" content="Elastic Security Labs identified a novel Windows backdoor leveraging the Background Intelligent Transfer Service (BITS) for C2. This malware was found during a recent activity group tracked as REF8747."/><link rel="canonical" href="https://www.elastic.co/security-labs/bits-and-bytes-analyzing-bitsloth"/><link rel="preload" href="/security-labs/logo.svg" as="image" fetchpriority="high"/><link rel="preload" as="image" imageSrcSet="/security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fbits-and-bytes-analyzing-bitsloth%2FSecurity%20Labs%20Images%2029.jpg&amp;w=640&amp;q=75 640w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fbits-and-bytes-analyzing-bitsloth%2FSecurity%20Labs%20Images%2029.jpg&amp;w=750&amp;q=75 750w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fbits-and-bytes-analyzing-bitsloth%2FSecurity%20Labs%20Images%2029.jpg&amp;w=828&amp;q=75 828w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fbits-and-bytes-analyzing-bitsloth%2FSecurity%20Labs%20Images%2029.jpg&amp;w=1080&amp;q=75 1080w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fbits-and-bytes-analyzing-bitsloth%2FSecurity%20Labs%20Images%2029.jpg&amp;w=1200&amp;q=75 1200w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fbits-and-bytes-analyzing-bitsloth%2FSecurity%20Labs%20Images%2029.jpg&amp;w=1920&amp;q=75 1920w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fbits-and-bytes-analyzing-bitsloth%2FSecurity%20Labs%20Images%2029.jpg&amp;w=2048&amp;q=75 2048w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fbits-and-bytes-analyzing-bitsloth%2FSecurity%20Labs%20Images%2029.jpg&amp;w=3840&amp;q=75 3840w" imageSizes="100vw" fetchpriority="high"/><meta name="next-head-count" content="19"/><script src="https://play.vidyard.com/embed/v4.js" type="text/javascript" async=""></script><link rel="icon" href="/security-labs/favicon.svg"/><link rel="mask-icon" href="/security-labs/favicon.svg" color="#1C1E23"/><link rel="apple-touch-icon" href="/security-labs/favicon.svg"/><meta name="theme-color" content="#1C1E23"/><link rel="preload" href="/security-labs/_next/static/media/6d93bde91c0c2823-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/a34f9d1faa5f3315-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/369c6e283c5acc6e-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/92f44bb82993d879-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/ee71530a747ff30b-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/9fac010bc1f02be0-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/cbf5fbad4d73afac-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><script id="google-tag-manager" data-nscript="beforeInteractive">
          (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
          new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
          j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
          'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
          })(window,document,'script','dataLayer','GTM-KNJMG2M');
          </script><link rel="preload" href="/security-labs/_next/static/css/265ed7605fd03477.css" as="style"/><link rel="stylesheet" href="/security-labs/_next/static/css/265ed7605fd03477.css" data-n-g=""/><link rel="preload" href="/security-labs/_next/static/css/1007ff9e696f6f88.css" as="style"/><link rel="stylesheet" href="/security-labs/_next/static/css/1007ff9e696f6f88.css" data-n-p=""/><noscript data-n-css=""></noscript><script defer="" nomodule="" src="/security-labs/_next/static/chunks/polyfills-78c92fac7aa8fdd8.js"></script><script src="/security-labs/_next/static/chunks/webpack-7987c6fda769d510.js" defer=""></script><script src="/security-labs/_next/static/chunks/framework-7a7e500878b44665.js" defer=""></script><script src="/security-labs/_next/static/chunks/main-ebd33a9f1cae5951.js" defer=""></script><script src="/security-labs/_next/static/chunks/pages/_app-cb8664d1d3df2511.js" defer=""></script><script src="/security-labs/_next/static/chunks/fec483df-43ee602fabdfe3a4.js" defer=""></script><script src="/security-labs/_next/static/chunks/877-34f408271ef44c22.js" defer=""></script><script src="/security-labs/_next/static/chunks/511-d08fe0fdd6f8a984.js" defer=""></script><script src="/security-labs/_next/static/chunks/683-a5053c37fe5bd0c9.js" defer=""></script><script src="/security-labs/_next/static/chunks/402-791da5e634930df4.js" defer=""></script><script src="/security-labs/_next/static/chunks/616-0b017b9cfa597392.js" defer=""></script><script src="/security-labs/_next/static/chunks/pages/%5Bslug%5D-3d74e9a05863bcfd.js" defer=""></script><script src="/security-labs/_next/static/dGrrQfBbQkqaleQ_11aBK/_buildManifest.js" defer=""></script><script src="/security-labs/_next/static/dGrrQfBbQkqaleQ_11aBK/_ssgManifest.js" defer=""></script></head><body><noscript><iframe src="https://www.googletagmanager.com/ns.html?id=GTM-KNJMG2M" height="0" width="0" style="display:none;visibility:hidden"></iframe></noscript><div id="__next"><main class="__variable_0351a5 __variable_1f211e __variable_a5b5f5 flex flex-col min-h-screen"><div class="scroll-percentage-container"><div class="scroll-percentage-bar" style="width:0%"></div></div><nav class="fixed w-full z-40" data-headlessui-state=""><div class="bg-gradient-to-b from-zinc-900 from-20% h-[200%] to-transparent absolute inset-0 z-0 pointer-events-none"></div><div class="container relative z-10"><div class="flex h-16 items-center justify-between"><div class="flex items-center justify-start w-full"><div><a class="hover:opacity-50 transition" href="/security-labs"><img alt="elastic security labs logo" fetchpriority="high" width="200" height="30" decoding="async" data-nimg="1" style="color:transparent" src="/security-labs/logo.svg"/></a></div><div class="hidden lg:ml-6 lg:block"><div class="flex space-x-4"><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/about"><span>About</span></a><div class="relative" data-headlessui-state=""><div><button class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" id="headlessui-menu-button-:R2kpm:" type="button" aria-haspopup="menu" aria-expanded="false" data-headlessui-state="">Topics<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" class="ml-1 -mr-1 h-4 w-4 text-zinc-400 relative top-[1px]"><path fill-rule="evenodd" d="M5.23 7.21a.75.75 0 011.06.02L10 11.168l3.71-3.938a.75.75 0 111.08 1.04l-4.25 4.5a.75.75 0 01-1.08 0l-4.25-4.5a.75.75 0 01.02-1.06z" clip-rule="evenodd"></path></svg></button></div></div><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/category/vulnerability-updates"><span>Vulnerability updates</span></a><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/category/reports"><span>Reports</span></a><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/category/tools"><span>Tools</span></a></div></div><div class="hidden lg:ml-auto lg:block"><div class="flex items-center space-x-4"><a class="rounded flex items-center p-4 text-white focus:outline-none focus:ring-0 focus:ring-offset-1 focus:ring-offset-zinc-600 group" href="https://search.elastic.co/?location%5B0%5D=Security%20Labs&amp;referrer=https://www.elastic.co/security-labs/bits-and-bytes-analyzing-bitsloth"><div class="flex items-center relative font-display"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-6 w-6"><path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z"></path></svg></div></a><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="https://www.elastic.co/security-labs/rss/feed.xml"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" class="h-4 w-4 mr-1"><path d="M3.75 3a.75.75 0 00-.75.75v.5c0 .414.336.75.75.75H4c6.075 0 11 4.925 11 11v.25c0 .414.336.75.75.75h.5a.75.75 0 00.75-.75V16C17 8.82 11.18 3 4 3h-.25z"></path><path d="M3 8.75A.75.75 0 013.75 8H4a8 8 0 018 8v.25a.75.75 0 01-.75.75h-.5a.75.75 0 01-.75-.75V16a6 6 0 00-6-6h-.25A.75.75 0 013 9.25v-.5zM7 15a2 2 0 11-4 0 2 2 0 014 0z"></path></svg><span class="hidden xl:block">Subscribe</span></a><a class="font-display inline-flex items-center justify-center rounded font-semibold disabled:!select-none disabled:!bg-gray-400 bg-blue-600 text-white hover:bg-blue-500 enabled:hover:text-white/80 transition-colors px-4 py-2 text-sm flex-1 lg:flex-auto" href="https://cloud.elastic.co/registration?cta=cloud-registration&amp;tech=trial&amp;plcmt=navigation&amp;pg=security-labs">Start free trial</a><a class="font-display inline-flex items-center justify-center rounded font-semibold text-white disabled:!select-none disabled:!bg-gray-400 button px-4 py-2 text-sm flex-1 lg:flex-auto" href="https://www.elastic.co/contact">Contact sales</a></div></div></div><div class="-mr-2 flex lg:hidden"><a class="rounded flex items-center p-4 text-white focus:outline-none focus:ring-0 focus:ring-offset-1 focus:ring-offset-zinc-600 group" href="https://search.elastic.co/?location%5B0%5D=Security%20Labs&amp;referrer=https://www.elastic.co/security-labs/bits-and-bytes-analyzing-bitsloth"><div class="flex items-center relative font-display"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-6 w-6"><path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z"></path></svg></div></a><button class="inline-flex items-center justify-center rounded-md p-2 text-gray-400 hover:bg-gray-700 hover:text-white focus:outline-none focus:ring-2 focus:ring-inset focus:ring-white" id="headlessui-disclosure-button-:R59m:" type="button" aria-expanded="false" data-headlessui-state=""><span class="sr-only">Open navigation menu</span><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="block h-6 w-6"><path stroke-linecap="round" stroke-linejoin="round" d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5"></path></svg></button></div></div></div></nav><main class="mb-20 flex-1 flex flex-col"><div class="h-48 md:h-64"><div class="after:absolute after:block after:bg-blue-400 after:blur-3xl after:content-[&#x27; &#x27;] after:h-96 after:opacity-5 after:right-0 after:rounded-full after:top-20 after:w-1/2 after:z-0 before:absolute before:block before:blur-3xl before:bg-orange-400 before:content-[&#x27; &#x27;] before:h-96 before:left-0 before:opacity-5 before:rounded-full before:w-1/2 before:z-0 w-full h-full relative"><div class="relative z-10 w-full h-[125%] -top-[25%] bg-no-repeat bg-cover bg-bottom flex items-center justify-center" style="background-image:url(/security-labs/grid.svg)"></div></div></div><article class="px-4"><div class="max-w-7xl mx-auto relative z-10 flex flex-col space-y-4"><div class="eyebrow break-words"><time class="block mb-2 md:mb-0 md:inline-block article-published-date" dateTime="2024-08-01T00:00:00.000Z">1 August 2024</time><span class="hidden md:inline-block md:mx-2">•</span><a class="hover:text-blue-400 text-xs md:text-sm whitespace-nowrap author-name" href="/security-labs/author/seth-goodwin">Seth Goodwin</a><span class="mx-2">•</span><a class="hover:text-blue-400 text-xs md:text-sm whitespace-nowrap author-name" href="/security-labs/author/daniel-stepanic">Daniel Stepanic</a></div><h1 class="font-bold leading-tighter text-3xl md:text-5xl"><span>BITS and Bytes: Analyzing BITSLOTH, a newly identified&nbsp;backdoor</span></h1><p class="text-zinc-200 text-base md:text-xl">Elastic Security Labs identified a novel Windows backdoor leveraging the Background Intelligent Transfer Service (BITS) for C2. This malware was found during a recent activity group tracked as REF8747.</p><div class="flex items-center mt-4 text-zinc-200 text-sm space-x-4 border-t border-white/25 pt-4"><span class="flex items-center space-x-1"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-4 w-4 text-zinc-400"><path stroke-linecap="round" stroke-linejoin="round" d="M12 6v6h4.5m4.5 0a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg><span>19 min read</span></span><span class="flex items-center space-x-1"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-4 w-4 text-zinc-400"><path stroke-linecap="round" stroke-linejoin="round" d="M9.568 3H5.25A2.25 2.25 0 003 5.25v4.318c0 .597.237 1.17.659 1.591l9.581 9.581c.699.699 1.78.872 2.607.33a18.095 18.095 0 005.223-5.223c.542-.827.369-1.908-.33-2.607L11.16 3.66A2.25 2.25 0 009.568 3z"></path><path stroke-linecap="round" stroke-linejoin="round" d="M6 6h.008v.008H6V6z"></path></svg><span><a class="hover:text-blue-400 whitespace-nowrap" href="/security-labs/category/malware-analysis">Malware analysis</a></span></span></div></div><div class="max-w-7xl mx-auto"><div class="bg-zinc-900 border border-zinc-800 drop-shadow-lg p-5 sm:p-8 md:p-10 rounded-3xl mt-5 md:mt-10"><div class="relative w-full rounded-lg overflow-hidden aspect-video"><img alt="BITS and Bytes: Analyzing BITSLOTH, a newly identified backdoor" fetchpriority="high" decoding="async" data-nimg="fill" class="object-cover absolute h-full w-full" style="position:absolute;height:100%;width:100%;left:0;top:0;right:0;bottom:0;color:transparent" sizes="100vw" srcSet="/security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fbits-and-bytes-analyzing-bitsloth%2FSecurity%20Labs%20Images%2029.jpg&amp;w=640&amp;q=75 640w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fbits-and-bytes-analyzing-bitsloth%2FSecurity%20Labs%20Images%2029.jpg&amp;w=750&amp;q=75 750w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fbits-and-bytes-analyzing-bitsloth%2FSecurity%20Labs%20Images%2029.jpg&amp;w=828&amp;q=75 828w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fbits-and-bytes-analyzing-bitsloth%2FSecurity%20Labs%20Images%2029.jpg&amp;w=1080&amp;q=75 1080w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fbits-and-bytes-analyzing-bitsloth%2FSecurity%20Labs%20Images%2029.jpg&amp;w=1200&amp;q=75 1200w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fbits-and-bytes-analyzing-bitsloth%2FSecurity%20Labs%20Images%2029.jpg&amp;w=1920&amp;q=75 1920w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fbits-and-bytes-analyzing-bitsloth%2FSecurity%20Labs%20Images%2029.jpg&amp;w=2048&amp;q=75 2048w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fbits-and-bytes-analyzing-bitsloth%2FSecurity%20Labs%20Images%2029.jpg&amp;w=3840&amp;q=75 3840w" src="/security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fbits-and-bytes-analyzing-bitsloth%2FSecurity%20Labs%20Images%2029.jpg&amp;w=3840&amp;q=75"/><div class="absolute border border-white/50 inset-0 mix-blend-overlay rounded-lg z-10"></div></div></div></div><div class="lg:max-w-7xl mx-auto relative mt-12 lg:grid lg:grid-cols-4 lg:gap-8 items-start"><div class="flex justify-center lg:col-span-3"><div class="prose lg:prose-lg prose-invert w-full article-content"><div><h2 class="font-bold text-2xl md:text-4xl relative"><span id="bitsloth-at-a-glance" class="absolute -top-32"></span>BITSLOTH at a glance</h2>
<p>BITSLOTH is a newly discovered Windows backdoor that leverages the Background Intelligent Transfer Service (BITS) as its command-and-control mechanism. BITSLOTH was uncovered during an intrusion within the LATAM region earlier this summer. This malware hasn&#x27;t been publicly documented to our knowledge and while it’s not clear who’s behind the malware, it has been in development for several years based on tracking distinct versions uploaded to VirusTotal.</p>
<p>The most current iteration of the backdoor at the time of this publication has 35 handler functions including keylogging and screen capture capabilities. In addition, BITSLOTH contains many different features for discovery, enumeration, and command-line execution. Based on these capabilities, we assess this tool is designed for gathering data from victims.</p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="key-takeaways" class="absolute -top-32"></span>Key takeaways</h3>
<ul>
<li>BITSLOTH is a newly discovered Windows backdoor</li>
<li>BITSLOTH uses a built-in Microsoft feature, Background Intelligent Transfer Service (BITS) for command-and-control communication</li>
<li>BITSLOTH has numerous command handlers used for discovery/enumeration, execution, and collection purposes</li>
<li>The backdoor contains logging functions and strings consistent with the authors being native Chinese speakers</li>
</ul>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="discovery" class="absolute -top-32"></span>Discovery</h2>
<p>Our team observed BITSLOTH installed on a server environment on June 25th during REF8747, this was an intrusion into the Foreign Ministry of a South American government. The intrusion was traced back to PSEXEC execution on one of the infected endpoints. The attackers used a slew of publicly available tools for most of their operations with the exception of BITSLOTH.</p>
<ul>
<li><a href="https://github.com/T4y1oR/RingQ">RINGQ</a></li>
<li><a href="https://github.com/EddieIvan01/iox">IOX</a></li>
<li><a href="https://github.com/ph4ntonn/Stowaway">STOWAWAY</a></li>
<li><a href="https://github.com/BeichenDream/GodPotato">GODPOTATO</a></li>
<li><a href="https://github.com/Ridter/noPac">NOPAC</a></li>
<li><a href="https://github.com/gentilkiwi/mimikatz">MIMIKATZ</a></li>
<li><a href="https://github.com/gabriellandau/PPLFault">PPLFAULT</a></li>
<li><a href="https://github.com/GhostPack/Certify">CERTIFY</a></li>
</ul>
<p>One of the primary mechanisms of execution was through a shellcode loading project called RINGQ. In a similar fashion to DONUTLOADER, RINGQ will convert any Windows executable and generate custom shellcode placing it into a file ( main.txt). This shellcode gets decrypted and executed in-memory. This technique is used bypass defenses that rely on hash blocklists or static signatures in some anti-malware products.</p>
<p></p>
<p>We observed RINGQ being used to load the IOX port forwarder. Note: The key in the image below is the hex conversion of “whoami”.</p>
<p></p>
<p>Additionally the attackers used the STOWAWAY utility to proxy encrypted traffic over HTTP to their C2 servers. Proxy tools, tunnelers, and redirectors are commonly used during intrusions to conceal the adversary responsible for an intrusion. These tools offer adversaries various features, including the ability to bypass internal network controls, provide terminal interfaces, encryption capabilities as well as file transfer options.</p>
<p></p>
<p>After initial access, the actor moved laterally and dropped BITSLOTH in the form of a DLL (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">flengine.dll</code>) inside the ProgramData directory. The actor then executed the music-making program FL Studio (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">fl.exe</code>). Based on the observed call stack associated with the self-injection alert, we confirmed the threat actor used a traditional side-loading technique using a signed version of <a href="https://www.virustotal.com/gui/file/75747c8b5b3676abde25a8dd66280908c0d0fc57ef054b88a41673619d3bee28/details">FL Studio</a>.</p>
<pre><code>  c:\windows\syswow64\ntdll.dll!0x770841AC
  c:\windows\syswow64\ntdll.dll!0x7709D287
  c:\windows\syswow64\kernelbase.dll!0x76ED435F
  c:\windows\syswow64\kernelbase.dll!0x76ED42EF
  Unbacked!0x14EAB23
  Unbacked!0x14EA8B6
  c:\programdata\pl studio\flengine.dll!0x74AD2F2E
  c:\programdata\pl studio\fl.exe!0xDB3985
  c:\programdata\pl studio\fl.exe!0xDB3E5E
  c:\programdata\pl studio\fl.exe!0xDB4D3F
  c:\windows\syswow64\kernel32.dll!0x76B267F9
  c:\windows\syswow64\ntdll.dll!0x77077F4D
  c:\windows\syswow64\ntdll.dll!0x77077F1B</code></pre>
<p>This call stack was generated along with a process injection alert, and enabled researchers to extract an in-memory DLL that was set with Read/Write/Execute(RWX) page protections.</p>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="bitsloth-overview" class="absolute -top-32"></span>BITSLOTH overview</h4>
<p>During our analysis, we found several older BITSLOTH samples demonstrating a record of development since December 2021. Within this project, the malware developer chose notable terminology– referring to BITSLOTH as the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Slaver</code> component and the command and control server as the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Master</code> component. Below is an example of one of the PDB file paths linked to BITSLOTH that depicts this:</p>
<p></p>
<p>BITSLOTH employs no obfuscation around control flow or any kind of string encryption.</p>
<p></p>
<p>Both older and recent samples contain strings used for logging and debugging purposes. As an example at startup, there is a string referenced in the read-only section (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">.rdata</code>).</p>
<p></p>
<p>This Simplified Chinese wide-character string translates to:
<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Note: There is already a program running, do not run it again…</code></p>
<p></p>
<p>These small snippets contained within BITSLOTH help shed light on the development and prioritization of features, along with what appear to be operator instructions. In the latest version, a new scheduling component was added by the developer to control specific times when BITSLOTH should operate in a victim environment. This is a feature we have observed in other modern malware families such as <a href="https://www.elastic.co/security-labs/introducing-the-ref5961-intrusion-set">EAGERBEE</a>.</p>
<p></p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="bitsloth-code-analysis" class="absolute -top-32"></span>BITSLOTH code analysis</h2>
<p>BITSLOTH is a backdoor with many different capabilities including:</p>
<ul>
<li>Running and executing commands</li>
<li>Uploading and downloading files</li>
<li>Performing enumeration and discovery</li>
<li>Collecting sensitive data through keylogging and screen capturing</li>
</ul>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="mutex" class="absolute -top-32"></span>Mutex</h3>
<p>BITSLOTH uses a hard-coded mutex (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Global\d5ffff77ff77adad657658</code>) within each sample to ensure only one instance is running at a time.</p>
<p></p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="communication" class="absolute -top-32"></span>Communication</h3>
<p>BITSLOTH adopts a traditional client/server architecture, the developer refers to the client as the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Slaver</code> component and the command and control server (C2) as the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Master</code> component. The developer embeds the IP/port of the C2 server in each sample with a front-loaded string (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">rrrr_url</code>). This string acts as a key to identify the C2 configuration in itself while running in memory, this is used when updating the C2 server.</p>
<p>Below are the configurations in several samples our team has observed, the threat actor configures both internal and external IP ranges.</p>
<pre><code>rrrr_url216.238.121[.]132:8443
rrrr_url192.168.1[.]125:8443 
rrrr_url192.168.1[.]124:8443
rrrr_url45.116.13[.]178:443</code></pre>
<p>One of the defining features of BITSLOTH is using the <a href="https://learn.microsoft.com/en-us/windows/win32/bits/background-intelligent-transfer-service-portal">Background Intelligent Transfer Service</a> (BITS) for C2. While this feature has been designed to facilitate the network transfer of files between two machines, it’s been <a href="https://www.welivesecurity.com/2019/09/09/backdoor-stealth-falcon-group/">abused</a> by multiple state-sponsored groups and continues to fly under the radar against organizations. This medium is appealing to adversaries because many organizations still struggle to monitor BITS network traffic and detect unusual BITS jobs.</p>
<blockquote>
<p>Windows has a system administration feature called Background Intelligent Transfer Service (BITS) enabling the download and upload of files to HTTP web servers or SMB shares. The BITS service employs multiple features during the file transfer process such as the ability to pause/resume transfers, handling network interruptions, etc. BITS traffic is usually associated with software updates therefore wrongfully implied as trusted. Many organizations lack visibility into BITS network traffic making this an appealing target.</p>
</blockquote>
<p>The BITS API is exposed through Window’s <a href="https://learn.microsoft.com/en-us/windows/win32/com/component-object-model--com--portal">Component Object Model</a> (COM) using the <strong>IBackgroundCopyManager</strong> <a href="https://learn.microsoft.com/en-us/windows/win32/api/bits/nn-bits-ibackgroundcopymanager">interface</a>. This interface provides capabilities to create new jobs, enumerate existing jobs in the transfer queue, and access a specific job from a transfer queue.</p>
<p></p>
<p>After initialization, BITSLOTH cancels any existing BITS jobs on the victim machine that match the following display names:</p>
<ul>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">WU Client Download</code></li>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">WU Client Upload</code></li>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">WU Client Upload R</code></li>
</ul>
<p>These names are used by the developer to blend in and associate the different BITS transfer jobs with their respective BITS <a href="https://learn.microsoft.com/en-us/windows/win32/api/bits/ne-bits-bg_job_type">job type</a>. By canceling any existing jobs, this allows the execution of the malware to operate from a clean state.</p>
<p></p>
<p>Below are the Microsoft definitions matching the type of BITS job:</p>
<ul>
<li><strong>BG_JOB_TYPE_DOWNLOAD</strong> - Specifies that the job downloads files to the client.</li>
<li><strong>BG_JOB_TYPE_UPLOAD</strong> - Specifies that the job uploads a file to the server.</li>
<li><strong>BG_JOB_TYPE_UPLOAD_REPLY</strong> - Specifies that the job uploads a file to the server, and receives a reply file from the server application.</li>
</ul>
<p>After canceling any existing jobs, the MAC address and operating system information are retrieved and placed into global variables. A new thread gets created, configuring the auto-start functionality. Within this thread, a new BITS download job is created with the name (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Microsoft Windows</code>).</p>
<p></p>
<p>This download job sets the destination URL to <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">http://updater.microsoft[.]com/index.aspx</code>. While this domain is not routable, BITSLOTH masquerades this BITS job using a benign looking domain as a cover then uses <strong>SetNotifyCmdLine</strong> to execute the malware when the transfer state is changed.</p>
<p></p>
<p>Interestingly, this unique toolmark allowed us to pivot to additional samples showing this family has been in circulation for several years.</p>
<p></p>
<p>At this point, the malware has now been configured with persistence via a BITS job named <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Microsoft Windows</code>. Below is a screenshot of this job’s configuration showing the notification command line set to the BITSLOTH location (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">C:\ProgramData\Media\setup_wm.exe</code>)</p>
<p></p>
<p>Once BITSLOTH becomes active, it will start requesting instructions from the C2 server using the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">WU Client Download</code> job. This request URL is generated by combining the MAC address with a hard-coded string (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">wu.htm</code>). Below is an example URL:</p>
<pre><code>https://192.168.182.130/00-0C-29-0E-29-87/wu.htm</code></pre>
<p>In response to this request, the malware will then receive a 12-byte structure from the C2 server containing a unique ID for the job, command ID for the handler, and a response token. Throughout these exchanges of file transfers, temporary files from the victim machine are used as placeholders to hold the data being transmitted back and forth, BITSLOTH uses a filename starting with characters (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">wm</code>) appended by random characters.</p>
<p></p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="command-functionality" class="absolute -top-32"></span>Command functionality</h3>
<p>BITSLOTH uses a command handler with 35 functions to process specific actions that should be taken on the victim machine. The malware has the option to be configured with HTTP or HTTPS and uses a hardcoded single byte XOR (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">0x2</code>) to obfuscate the incoming instructions from the C2 server. The outbound requests containing the collected victim data have no additional protections by the malware itself and are sent in plaintext.</p>
<p>In order to move fast, our team leveraged a helpful Python <a href="https://github.com/SafeBreach-Labs/SimpleBITSServer">implementation</a> of a BITS server released by <a href="https://www.safebreach.com/">SafeBreach Labs</a>. By setting the C2 IP to our loopback address inside a VM, this allowed us to get introspection on the network traffic.</p>
<p></p>
<p>The handlers all behave in a similar approach performing a primary function then writing the data returned from the handler to a local temporary file. These temporary files then get mapped to a BITS upload job called <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">WU Client Upload</code>. Each handler uses its own string formatting to create a unique destination URL. Each filename at the end of the URL uses a single letter to represent the type of data collected from the host, such as <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">P.bin</code> for processes or <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">S.bin</code> for services.</p>
<pre><code>http://192.168.182.130/00-0C-29-0E-29-87/IF/P.bin</code></pre>
<p>Below is an example screenshot showing the process enumeration handler with the string formatting and how this data is then linked to the BITS upload job.</p>
<p></p>
<p>This link to the exfiltrated data can also be observed by viewing the BITS upload job directly. In the screenshots below, we can see the destination URL (C2 server) for the upload and the temporary file (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">wm9F0C.tmp</code>) linked to the job.</p>
<p></p>
<p>If we look at the temporary file, we can see the collected process information from the victim host.</p>
<p></p>
<p>Soon after the upload job is created, the data is sent over the network through a BITS_POST request containing the captured data.</p>
<p></p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="command-handling-table" class="absolute -top-32"></span>Command handling table</h3>
<div class="table-container"><table style="width:100%;table-layout:fixed;word-wrap:break-word"><thead><tr><th>Command ID</th><th>Description</th></tr></thead><tbody><tr><td>0</td><td>Collect running processes via <strong>WTSEnumerateProcessesW</strong></td></tr><tr><td>1</td><td>Get Windows services via <strong>EnumServicesStatusW</strong></td></tr><tr><td>2</td><td>Get system information via <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">systeminfo</code> command</td></tr><tr><td>3</td><td>Retrieve all top-level Windows via <strong>EnumWindows</strong></td></tr><tr><td>5</td><td>Collect file listings</td></tr><tr><td>6</td><td>Download file from C2 server</td></tr><tr><td>7</td><td>Upload file to C2 server</td></tr><tr><td>10</td><td>Terminate itself</td></tr><tr><td>11</td><td>Set communication mode to HTTPS</td></tr><tr><td>12</td><td>Set communication mode to HTTP</td></tr><tr><td>13</td><td>Remove persistence</td></tr><tr><td>14</td><td>Reconfigure persistence</td></tr><tr><td>15</td><td>Cancel BITS download job (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">WU Client Download</code>)</td></tr><tr><td>16</td><td>Remove persistence and delete itself</td></tr><tr><td>17</td><td>Thread configuration</td></tr><tr><td>18</td><td>Duplicate of handler #2</td></tr><tr><td>19</td><td>Delete file based on file path</td></tr><tr><td>20</td><td>Delete folder based on file path</td></tr><tr><td>21</td><td>Starts terminal shell using stdin/stdout redirection</td></tr><tr><td>22</td><td>Resets terminal handler (#21)</td></tr><tr><td>23</td><td>Runs Windows tree command</td></tr><tr><td>24</td><td>Updates BITSLOTH, delete old version</td></tr><tr><td>25</td><td>Shutdown the machine via <strong>ExitWindowsEx</strong></td></tr><tr><td>26</td><td>Reboot the machine via <strong>ExitWindowsEx</strong></td></tr><tr><td>27</td><td>Log user off from the machine via <strong>ExitWindowsEx</strong></td></tr><tr><td>28</td><td>Terminate process based on process identifier (PID)</td></tr><tr><td>29</td><td>Retrieves additional information via <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">msinfo32</code> command</td></tr><tr><td>30</td><td>Execute individual file via <strong>ShellExecuteW</strong></td></tr><tr><td>34</td><td>Create new directory via <strong>CreateDirectoryW</strong></td></tr><tr><td>41</td><td>Upload data to C2 server</td></tr><tr><td>42</td><td>Checks for capture driver via <strong>capGetDriverDescriptionW</strong></td></tr><tr><td>43</td><td>Take screenshots of victim machine desktop</td></tr><tr><td>44</td><td>Record keystrokes from victim machine</td></tr><tr><td>45</td><td>Stop recording screenshot images</td></tr><tr><td>46</td><td>Stop keylogger functionality</td></tr></tbody></table></div>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="backdoor-functionality" class="absolute -top-32"></span>Backdoor functionality</h3>
<p>BITSLOTH includes a wide range of post-compromise capabilities for an adversary to operate within a victim environment. We will focus on the more significant capabilities by grouping them into different categories.</p>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="discoveryenumeration" class="absolute -top-32"></span>Discovery/enumeration</h4>
<p>A portion of the BITSLOTH handlers are focused on retrieving and enumerating data from victim machines. This includes:</p>
<ul>
<li>Retrieving process information via <strong>WTSEnumerateProcessesW</strong></li>
<li>Collecting Windows services via <strong>EnumServicesStatusW</strong></li>
<li>Enumerating all top-level Windows via <strong>EnumWindows</strong> with a callback function</li>
<li>Retrieving system information via windows utilities such as <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">systeminfo</code> and <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">msinfo32</code></li>
</ul>
<p></p>
<p>In many of the handlers, the locale version is configured to <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">chs </code>(Chinese - Simplified).</p>
<p></p>
<p>BITSLOTH has a couple custom enumeration functions tied to retrieving file listings and performing directory tree searches. The file listing handler takes a custom parameter from the operator to target specific folder locations of interest:</p>
<ul>
<li><strong>GET_DESKDOP</strong> → <strong>CSIDL_DESKTOPDIRECTORY</strong> (Desktop)</li>
<li><strong>GET_BITBUCKET</strong> -&gt; <strong>CSIDL_BITBUCKET</strong> (Recycle Bin)</li>
<li><strong>GET_PERSONAl</strong> -&gt; <strong>CSIDL_MYDOCUMENTS</strong> (My Documents)</li>
</ul>
<p></p>
<p>BITSLOTH also has the ability to collect entire directory/file listings on the machine for every file by using the Windows <a href="https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/tree">tree</a> utility. This handler loops across the alphabet for each drive letter where the data is then saved locally in a temporary file named <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">aghzyxklg</code>.</p>
<p></p>
<p>The tree data is then compressed and sent to the C2 server with a .ZIP extension. Below is an example of the collected data. This data can help pinpoint sensitive files or provide more context about the target environment.</p>
<p></p>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="collection" class="absolute -top-32"></span>Collection</h4>
<p>In terms of collection, there are a few handlers used for actively gathering information. These are centered around capturing screenshots from the desktop and performing keylogging functionality.</p>
<p>BITSLOTH implements a lightweight function used to identify capture recording devices, this appears to be a technique to check for a camera using the Windows API (<strong>capGetDriverDescriptionW</strong>).</p>
<p></p>
<p>BITSLOTH has the ability to take screenshots based on parameters provided by the operator. Input to this function uses a separator (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">||</code>) where the operator provides the number of seconds of the capture interval and the capture count. The images are stored as BMP files with a hard coded name <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">ciakfjoab</code> and compressed with the DEFLATE algorithm using a <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">.ZIP</code> archive. These timestamped zipped archives are then sent out to the C2 server.</p>
<p>The handler leverages common screenshot APIs such as <strong>CreateCompatibleBitmap</strong> and <strong>BitBlt</strong> from <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Gdi32.dll</code>.</p>
<p></p>
<p>For recording keystrokes, BITSLOTH uses traditional techniques by monitoring key presses using <strong>GetAsyncKeyState</strong>/<strong>GetKeyState</strong>. The handler has an argument for the number of seconds to perform the keylogging. This data is also compressed in a <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">.ZIP</code> file and sent outbound to the C2 server.</p>
<p></p>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="execution--maintenance" class="absolute -top-32"></span>Execution / Maintenance</h4>
<p>BITSLOTH has multiple capabilities around maintenace and file execution as well as standard backdoor functionalities such as:</p>
<ul>
<li>Capability to execute files stand-alone via <strong>ShellExecuteW</strong></li>
<li>Windows terminal capability to execute commands and read data back via pipes</li>
<li>Create directories, perform reboots, shutdown the machine, terminate processes</li>
<li>Perform file upload and download between C2 server</li>
<li>Modify BITSLOTH configuration such as communication modes, update C2 URL, turn off keylogging/screenshot features</li>
</ul>
<p></p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="bitsloth-pivots" class="absolute -top-32"></span>BITSLOTH pivots</h2>
<p>BITSLOTH appears to be actively deployed. We identified another BITSLOTH C2 server (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">15.235.132[.]67</code>) using the same port (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">8443</code>) with the same <a href="https://www.shodan.io/search?query=ssl.cert.serial%3A253c1c0bbf58e1f509fc4468de462ed8872f81d9">SSL certificate</a> used from our intrusion.</p>
<p></p>
<p>While it’s not exactly clear who’s behind BITSLOTH, there was a large amount of activity of VirusTotal uploads occurring on December 12, 2021. With around 67 uploads over 24 hours from one submitter (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">1fcc35ea</code>), we suspect someone linked to this project was validating detections, making modifications, and uploading different versions of BITSLOTH to VirusTotal. One sample was packed with VMProtect, others stripped of functionality, some uploads were debug builds, etc.</p>
<p></p>
<p>A lot of time has passed since then, but it is interesting seeing this family show up in a recent intrusion. Whatever the objective behind this malware, it&#x27;s surprising that this family remained under the radar for so many years.</p>
<p></p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="ref-8747-through-mitre-attck" class="absolute -top-32"></span>REF 8747 through MITRE ATT&amp;CK</h3>
<p>Elastic uses the <a href="https://attack.mitre.org/">MITRE ATT&amp;CK</a> framework to document common tactics, techniques, and procedures that advanced persistent threats use against enterprise networks.</p>
<p>[h4] Tactics
Tactics represent the why of a technique or sub-technique. It is the adversary’s tactical goal: the reason for performing an action.</p>
<ul>
<li><a href="https://attack.mitre.org/tactics/TA0009/">Collection</a></li>
<li><a href="https://attack.mitre.org/tactics/TA0011/">Command and Control</a></li>
<li><a href="https://attack.mitre.org/tactics/TA0007/">Discovery</a></li>
<li><a href="https://attack.mitre.org/tactics/TA0002/">Execution</a></li>
<li><a href="https://attack.mitre.org/tactics/TA0010/">Exfiltration</a></li>
<li><a href="https://attack.mitre.org/tactics/TA0003/">Persistence</a></li>
</ul>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="techniques" class="absolute -top-32"></span>Techniques</h4>
<p>Techniques represent how an adversary achieves a tactical goal by performing an action.</p>
<ul>
<li><a href="https://attack.mitre.org/techniques/T1197/">BITS Jobs</a></li>
<li><a href="https://attack.mitre.org/techniques/T1082/">System Information Discovery</a></li>
<li><a href="https://attack.mitre.org/techniques/T1574/002/">Hijack Execution Flow: DLL Side-Loading</a></li>
<li><a href="https://attack.mitre.org/techniques/T1113/">Screen Capture</a></li>
<li><a href="https://attack.mitre.org/techniques/T1056/001/">Input Capture: Keylogging</a></li>
<li><a href="https://attack.mitre.org/techniques/T1090/">Proxy</a></li>
</ul>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="detecting-ref8747" class="absolute -top-32"></span>Detecting REF8747</h2>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="detection" class="absolute -top-32"></span>Detection</h3>
<p>The following detection rules and behavior prevention events were observed throughout the analysis of this intrusion set:</p>
<ul>
<li><a href="https://github.com/elastic/endpoint-rules/blob/0f01f1a9e2ac08e9ead74cafd4d73cb8166f9fc8/rules/windows/persistence_execution_via_bits_setnotifycmdline_method.toml">Persistence via BITS Job Notify Cmdline</a></li>
<li><a href="https://github.com/elastic/protections-artifacts/blob/main/behavior/rules/windows/credential_access_lsass_access_attempt_via_ppl_bypass.toml">LSASS Access Attempt via PPL Bypass</a></li>
<li><a href="https://github.com/elastic/protections-artifacts/blob/main/behavior/rules/windows/credential_access_lsass_access_attempt_from_an_unsigned_executable.toml">LSASS Access Attempt from an Unsigned Executable</a></li>
<li><a href="https://github.com/elastic/protections-artifacts/blob/main/behavior/rules/windows/defense_evasion_suspicious_parent_child_relationship.toml">Suspicious Parent-Child Relationship</a></li>
<li><a href="https://github.com/elastic/protections-artifacts/blob/main/behavior/rules/windows/credential_access_credential_access_via_known_utilities.toml">Credential Access via Known Utilities</a></li>
<li>Shellcode Injection</li>
</ul>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="yara-signatures" class="absolute -top-32"></span>YARA Signatures</h4>
<ul>
<li><a href="https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Windows_Hacktool_Mimikatz.yar">Windows.Hacktool.Mimikatz</a></li>
<li><a href="https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Windows_Trojan_BITSloth.yar">Windows.Trojan.BITSloth</a></li>
<li><a href="https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Windows_Hacktool_Iox.yar">Windows.Hacktool.Iox</a></li>
<li><a href="https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Windows_Hacktool_Rubeus.yar">Windows.Hacktool.Rubeus</a></li>
<li><a href="https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Windows_Hacktool_Certify.yar">Windows.Hacktool.Certify</a></li>
<li><a href="https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Windows_Hacktool_RingQ.yar">Windows.Hacktool.RingQ</a></li>
<li><a href="https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Windows_Hacktool_GodPotato.yar">Windows.Hacktool.GodPotato</a></li>
<li><a href="https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Multi_Hacktool_Stowaway.yar">Multi.Hacktool.Stowaway</a></li>
</ul>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="yara" class="absolute -top-32"></span>YARA</h4>
<p>Elastic Security has created YARA rules to identify this activity. Below are YARA rules to identify BITSLOTH:</p>
<pre><code>rule Windows_Trojan_BITSLOTH_05fc3a0a {
    meta:
        author = &quot;Elastic Security&quot;
        creation_date = &quot;2024-07-16&quot;
        last_modified = &quot;2024-07-18&quot;
        os = &quot;Windows&quot;
        arch = &quot;x86&quot;
        threat_name = &quot;Windows.Trojan.BITSLOTH&quot;
  	 license = &quot;Elastic License v2&quot;

    strings:
        $str_1 = &quot;/%s/index.htm?RspID=%d&quot; wide fullword
        $str_2 = &quot;/%s/%08x.rpl&quot; wide fullword
        $str_3 = &quot;/%s/wu.htm&quot; wide fullword
        $str_4 = &quot;GET_DESKDOP&quot; wide fullword
        $str_5 = &quot;http://updater.microsoft.com/index.aspx&quot; wide fullword
        $str_6 = &quot;[U] update error...&quot; wide fullword
        $str_7 = &quot;RMC_KERNEL ...&quot; wide fullword
        $seq_global_protocol_check = { 81 3D ?? ?? ?? ?? F9 03 00 00 B9 AC 0F 00 00 0F 46 C1 }
        $seq_exit_windows = { 59 85 C0 0F 84 ?? ?? ?? ?? E9 ?? ?? ?? ?? 6A 02 EB ?? 56 EB }
    condition:
        2 of them
}</code></pre>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="observations" class="absolute -top-32"></span>Observations</h2>
<p>All observables are also available for <a href="https://github.com/elastic/labs-releases/tree/main/indicators/bitsloth">download</a> in both ECS and STIX format in a combined zip bundle.</p>
<p>The following observables were discussed in this research.</p>
<div class="table-container"><table style="width:100%;table-layout:fixed;word-wrap:break-word"><thead><tr><th>Observable</th><th>Type</th><th>Name</th><th>Reference</th></tr></thead><tbody><tr><td>4a4356faad620bf12ff53bcfac62e12eb67783bd22e66bf00a19a4c404bf45df</td><td>SHA-256</td><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">s.dll</code></td><td>BITSLOTH</td></tr><tr><td>dfb76bcf5a3e29225559ebbdae8bdd24f69262492eca2f99f7a9525628006d88</td><td>SHA-256</td><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">125.exe</code></td><td>BITSLOTH</td></tr><tr><td>4fb6dd11e723209d12b2d503a9fcf94d8fed6084aceca390ac0b7e7da1874f50</td><td>SHA-256</td><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">setup_wm.exe</code></td><td>BITSLOTH</td></tr><tr><td>0944b17a4330e1c97600f62717d6bae7e4a4260604043f2390a14c8d76ef1507</td><td>SHA-256</td><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">1242.exe</code></td><td>BITSLOTH</td></tr><tr><td>0f9c0d9b77678d7360e492e00a7fa00af9b78331dc926b0747b07299b4e64afd</td><td>SHA-256</td><td><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">setup_wm.exe</code></td><td>BITSLOTH (VMProtect)</td></tr><tr><td>216.238.121[.]132</td><td>ipv4-addr</td><td>BITSLOTH C2 server</td><td></td></tr><tr><td>45.116.13[.]178</td><td>ipv4-addr</td><td>BITSLOTH C2 server</td><td></td></tr><tr><td>15.235.132[.]67</td><td>ipv4-addr</td><td>BITSLOTH C2 server</td><td></td></tr><tr><td>http ://updater.microsoft.com/index.aspx</td><td></td><td></td><td>BITSLOTH file indicator</td></tr><tr><td>updater.microsoft.com</td><td></td><td></td><td>BITSLOTH file indicator</td></tr></tbody></table></div>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="references" class="absolute -top-32"></span>References</h2>
<p>The following were referenced throughout the above research:</p>
<ul>
<li><a href="https://github.com/SafeBreach-Labs/SimpleBITSServer/tree/master">https://github.com/SafeBreach-Labs/SimpleBITSServer/tree/master</a></li>
<li><a href="https://github.com/T4y1oR/RingQ">https://github.com/T4y1oR/RingQ</a></li>
<li><a href="https://github.com/EddieIvan01/iox">https://github.com/EddieIvan01/iox</a></li>
<li><a href="https://github.com/ph4ntonn/Stowaway/">https://github.com/ph4ntonn/Stowaway/</a></li>
</ul>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="about-elastic-security-labs" class="absolute -top-32"></span>About Elastic Security Labs</h2>
<p>Elastic Security Labs is the threat intelligence branch of Elastic Security dedicated to creating positive change in the threat landscape. Elastic Security Labs provides publicly available research on emerging threats with an analysis of strategic, operational, and tactical adversary objectives, then integrates that research with the built-in detection and response capabilities of Elastic Security.</p>
<p>Follow Elastic Security Labs on Twitter <a href="https://twitter.com/elasticseclabs?ref_src=twsrc%5Egoogle%7Ctwcamp%5Eserp%7Ctwgr%5Eauthor">@elasticseclabs</a> and check out our research at <a href="https://www.elastic.co/security-labs/">www.elastic.co/security-labs/</a>.</p></div></div></div><div class="hidden lg:flex lg:col-span-1 text-sm lg:flex-col lg:space-y-6"><div class="toc"><h4 class="font-bold leading-tight text-lg md:text-2xl mb-3">Jump to section</h4><ul class="flex flex-col space-y-2"><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/bits-and-bytes-analyzing-bitsloth#bitsloth-at-a-glance"><span>BITSLOTH at a&nbsp;glance</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-4" href="/security-labs/bits-and-bytes-analyzing-bitsloth#key-takeaways"><span>Key&nbsp;takeaways</span></a></li><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/bits-and-bytes-analyzing-bitsloth#discovery"><span>Discovery</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-8" href="/security-labs/bits-and-bytes-analyzing-bitsloth#bitsloth-overview"><span>BITSLOTH&nbsp;overview</span></a></li><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/bits-and-bytes-analyzing-bitsloth#bitsloth-code-analysis"><span>BITSLOTH code&nbsp;analysis</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-4" href="/security-labs/bits-and-bytes-analyzing-bitsloth#mutex"><span>Mutex</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-4" href="/security-labs/bits-and-bytes-analyzing-bitsloth#communication"><span>Communication</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-4" href="/security-labs/bits-and-bytes-analyzing-bitsloth#command-functionality"><span>Command&nbsp;functionality</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-4" href="/security-labs/bits-and-bytes-analyzing-bitsloth#command-handling-table"><span>Command handling&nbsp;table</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-4" href="/security-labs/bits-and-bytes-analyzing-bitsloth#backdoor-functionality"><span>Backdoor&nbsp;functionality</span></a></li></ul><button class="border-t border-white/20 w-full mt-3 py-2 flex items-center space-x-1 text-xs font-medium uppercase tracking-wide hover:text-white"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" class="w-3 h-3"><path d="M10.75 4.75a.75.75 0 00-1.5 0v4.5h-4.5a.75.75 0 000 1.5h4.5v4.5a.75.75 0 001.5 0v-4.5h4.5a.75.75 0 000-1.5h-4.5v-4.5z"></path></svg><span>Show more</span></button></div><div class="bg-zinc-900 border border-zinc-800 drop-shadow-lg p-5 md:p-2 sm:p-4 md:px-6 md:py-4 rounded-xl"><h4 class="font-bold leading-tight text-lg md:text-2xl mb-3">Elastic Security Labs Newsletter</h4><div><a target="_blank" class="button inline-flex" href="https://www.elastic.co/security-labs/newsletter?utm_source=security-labs">Sign Up</a></div></div></div></div><div class="bg-zinc-900 border border-zinc-800 drop-shadow-lg p-5 md:p-2 sm:p-4 md:px-6 md:py-4 rounded-xl my-5 md:my-10 max-w-3xl mx-auto flex flex-col items-center shadow-2xl"><h4 class="font-bold leading-tight text-lg md:text-2xl">Share this article</h4><div class="flex flex-wrap items-center justify-center mt-4 space-x-4"><a class="flex items-center space-x-2 button" href="https://twitter.com/intent/tweet?text=BITS and Bytes: Analyzing BITSLOTH, a newly identified backdoor&amp;url=https://www.elastic.co/security-labs/bits-and-bytes-analyzing-bitsloth" target="_blank" rel="noopener noreferrer" aria-label="Share this article on Twitter" title="Share this article on Twitter"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill="currentColor" d="M23.954 4.569c-.885.389-1.83.653-2.825.772a4.98 4.98 0 002.187-2.746 9.955 9.955 0 01-3.157 1.204 4.98 4.98 0 00-8.49 4.54A14.128 14.128 0 011.69 3.05a4.98 4.98 0 001.54 6.638A4.94 4.94 0 011.2 8.62v.06a4.98 4.98 0 004 4.87 4.94 4.94 0 01-2.24.086 4.98 4.98 0 004.64 3.45A9.97 9.97 0 010 20.35a14.075 14.075 0 007.59 2.22c9.16 0 14.17-7.583 14.17-14.17 0-.217-.005-.434-.015-.65a10.128 10.128 0 002.485-2.58l-.001-.001z"></path></svg><span>Twitter</span></a><a class="flex items-center space-x-2 button" href="https://www.facebook.com/sharer/sharer.php?u=https://www.elastic.co/security-labs/bits-and-bytes-analyzing-bitsloth" target="_blank" rel="noopener noreferrer" aria-label="Share this article on Facebook" title="Share this article on Facebook"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill="currentColor" d="M22.5 12c0-5.799-4.701-10.5-10.5-10.5S1.5 6.201 1.5 12c0 5.301 3.901 9.699 9 10.401V14.4h-2.7v-2.7h2.7v-2.1c0-2.7 1.8-4.2 4.2-4.2 1.2 0 2.1.1 2.4.2v2.4h-1.5c-1.2 0-1.5.6-1.5 1.5v1.8h3l-.3 2.7h-2.7V22C18.599 21.3 22.5 17.301 22.5 12z"></path></svg><span>Facebook</span></a><a class="flex items-center space-x-2 button" href="https://www.linkedin.com/shareArticle?mini=true&amp;url=https://www.elastic.co/security-labs/bits-and-bytes-analyzing-bitsloth&amp;title=BITS and Bytes: Analyzing BITSLOTH, a newly identified backdoor" target="_blank" rel="noopener noreferrer" aria-label="Share this article on LinkedIn" title="Share this article on LinkedIn"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill="currentColor" d="M19 0h-14c-2.761 0-5 2.239-5 5v14c0 2.761 2.239 5 5 5h14c2.762 0 5-2.239 5-5v-14c0-2.761-2.238-5-5-5zm-11 19h-3v-11h3v11zm-1.5-12.268c-.966 0-1.75-.79-1.75-1.764s.784-1.764 1.75-1.764 1.75.79 1.75 1.764-.783 1.764-1.75 1.764zm13.5 12.268h-3v-5.604c0-3.368-4-3.113-4 0v5.604h-3v-11h3v1.765c1.396-2.586 7-2.777 7 2.476v6.759z"></path></svg><span>LinkedIn</span></a><a class="flex items-center space-x-2 button" href="https://reddit.com/submit?url=https://www.elastic.co/security-labs/bits-and-bytes-analyzing-bitsloth&amp;title=BITS and Bytes: Analyzing BITSLOTH, a newly identified backdoor" target="_blank" rel="noopener noreferrer" aria-label="Share this article on Reddit" title="Share this article on Reddit"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill-rule="evenodd" clip-rule="evenodd" d="M24 12C24 18.6274 18.6274 24 12 24C5.37258 24 0 18.6274 0 12C0 5.37258 5.37258 0 12 0C18.6274 0 24 5.37258 24 12ZM19.6879 11.0584C19.8819 11.3352 19.9916 11.6622 20.004 12C20.0091 12.3306 19.9205 12.656 19.7485 12.9384C19.5765 13.2208 19.3281 13.4488 19.032 13.596C19.0455 13.7717 19.0455 13.9483 19.032 14.124C19.032 16.812 15.9 18.996 12.036 18.996C8.172 18.996 5.04 16.812 5.04 14.124C5.02649 13.9483 5.02649 13.7717 5.04 13.596C4.80919 13.49 4.6042 13.335 4.43923 13.1419C4.27427 12.9487 4.15327 12.722 4.08462 12.4775C4.01598 12.2329 4.00133 11.9764 4.04169 11.7256C4.08205 11.4748 4.17646 11.2358 4.31837 11.0251C4.46028 10.8145 4.6463 10.6372 4.86354 10.5056C5.08078 10.3739 5.32404 10.2911 5.57646 10.2629C5.82889 10.2346 6.08444 10.2616 6.32541 10.3419C6.56638 10.4222 6.78701 10.5539 6.972 10.728C8.35473 9.79023 9.98146 9.27718 11.652 9.252L12.54 5.088C12.55 5.03979 12.5694 4.99405 12.5972 4.95341C12.625 4.91277 12.6605 4.87805 12.7018 4.85127C12.7431 4.82448 12.7894 4.80615 12.8378 4.79735C12.8862 4.78855 12.9359 4.78945 12.984 4.8L15.924 5.388C16.0676 5.14132 16.2944 4.9539 16.5637 4.85937C16.833 4.76484 17.1272 4.7694 17.3934 4.87222C17.6597 4.97505 17.8806 5.1694 18.0164 5.42041C18.1523 5.67141 18.1942 5.96262 18.1348 6.24177C18.0753 6.52092 17.9182 6.76972 17.6918 6.94352C17.4654 7.11732 17.1845 7.20473 16.8995 7.19006C16.6144 7.1754 16.3439 7.05962 16.1366 6.8635C15.9292 6.66738 15.7985 6.40378 15.768 6.12L13.2 5.58L12.42 9.324C14.0702 9.3594 15.6749 9.87206 17.04 10.8C17.2839 10.566 17.5902 10.4074 17.9221 10.3436C18.254 10.2797 18.5973 10.3132 18.9106 10.4401C19.2239 10.5669 19.4939 10.7817 19.6879 11.0584ZM8.20624 12.5333C8.07438 12.7307 8.004 12.9627 8.004 13.2C8.004 13.5183 8.13043 13.8235 8.35547 14.0485C8.58051 14.2736 8.88574 14.4 9.204 14.4C9.44134 14.4 9.67335 14.3296 9.87068 14.1978C10.068 14.0659 10.2218 13.8785 10.3127 13.6592C10.4035 13.4399 10.4272 13.1987 10.3809 12.9659C10.3346 12.7331 10.2204 12.5193 10.0525 12.3515C9.8847 12.1836 9.67089 12.0694 9.43811 12.0231C9.20533 11.9768 8.96405 12.0005 8.74478 12.0913C8.52551 12.1822 8.33809 12.336 8.20624 12.5333ZM12.012 17.424C13.0771 17.4681 14.1246 17.1416 14.976 16.5V16.548C15.0075 16.5173 15.0327 16.4806 15.05 16.4402C15.0674 16.3997 15.0766 16.3563 15.0772 16.3122C15.0777 16.2682 15.0696 16.2245 15.0533 16.1837C15.0369 16.1428 15.0127 16.1055 14.982 16.074C14.9513 16.0425 14.9146 16.0173 14.8742 16C14.8337 15.9826 14.7903 15.9734 14.7462 15.9728C14.7022 15.9723 14.6585 15.9804 14.6177 15.9967C14.5768 16.0131 14.5395 16.0373 14.508 16.068C13.7797 16.5904 12.895 16.8487 12 16.8C11.1061 16.8399 10.2255 16.5732 9.504 16.044C9.44182 15.993 9.36289 15.9669 9.28256 15.9708C9.20222 15.9748 9.12622 16.0085 9.06935 16.0653C9.01247 16.1222 8.97879 16.1982 8.97484 16.2786C8.97089 16.3589 8.99697 16.4378 9.048 16.5C9.89937 17.1416 10.9469 17.4681 12.012 17.424ZM14.0933 14.2458C14.2907 14.3776 14.5227 14.448 14.76 14.448L14.748 14.496C14.9107 14.4978 15.0721 14.4664 15.2223 14.4038C15.3725 14.3413 15.5084 14.2488 15.6218 14.1321C15.7352 14.0154 15.8236 13.8768 15.8818 13.7248C15.9399 13.5728 15.9665 13.4106 15.96 13.248C15.96 13.0107 15.8896 12.7787 15.7578 12.5813C15.6259 12.384 15.4385 12.2302 15.2192 12.1393C14.9999 12.0485 14.7587 12.0248 14.5259 12.0711C14.2931 12.1174 14.0793 12.2316 13.9115 12.3995C13.7436 12.5673 13.6294 12.7811 13.5831 13.0139C13.5368 13.2467 13.5605 13.4879 13.6513 13.7072C13.7422 13.9265 13.896 14.1139 14.0933 14.2458Z" fill="currentColor"></path></svg><span>Reddit</span></a></div></div></article></main><footer class="mt-auto text-xs md:text-sm"><div class="container py-6 flex flex-col md:flex-row gap-2 md:gap-0 justify-between items-center"><div class="text-zinc-300"><nav><ul class="flex space-x-4"><li><a class="hover:text-white font-medium" href="/security-labs/sitemap.xml">Sitemap</a></li><li><a class="hover:text-white font-medium flex items-center space-x-1" href="https://elastic.co?utm_source=elastic-search-labs&amp;utm_medium=referral&amp;utm_campaign=search-labs&amp;utm_content=footer"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="inline-block w-3 h-3"><path stroke-linecap="round" stroke-linejoin="round" d="M13.5 6H5.25A2.25 2.25 0 003 8.25v10.5A2.25 2.25 0 005.25 21h10.5A2.25 2.25 0 0018 18.75V10.5m-10.5 6L21 3m0 0h-5.25M21 3v5.25"></path></svg><span>Elastic.co</span></a></li><li><a class="hover:text-white font-medium flex items-center space-x-1" href="https://twitter.com/elasticseclabs"><svg class="w-4 h-4 inline-block w-3 h-3" viewBox="0 0 24 24"><path fill="currentColor" d="M23.954 4.569c-.885.389-1.83.653-2.825.772a4.98 4.98 0 002.187-2.746 9.955 9.955 0 01-3.157 1.204 4.98 4.98 0 00-8.49 4.54A14.128 14.128 0 011.69 3.05a4.98 4.98 0 001.54 6.638A4.94 4.94 0 011.2 8.62v.06a4.98 4.98 0 004 4.87 4.94 4.94 0 01-2.24.086 4.98 4.98 0 004.64 3.45A9.97 9.97 0 010 20.35a14.075 14.075 0 007.59 2.22c9.16 0 14.17-7.583 14.17-14.17 0-.217-.005-.434-.015-.65a10.128 10.128 0 002.485-2.58l-.001-.001z"></path></svg><span>@elasticseclabs</span></a></li></ul></nav></div><div class="flex flex-col space-y-1 text-zinc-300"><p>© <!-- -->2024<!-- -->. Elasticsearch B.V. All Rights Reserved.</p></div></div></footer></main></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"article":{"title":"BITS and Bytes: Analyzing BITSLOTH, a newly identified backdoor","slug":"bits-and-bytes-analyzing-bitsloth","date":"2024-08-01","description":"Elastic Security Labs identified a novel Windows backdoor leveraging the Background Intelligent Transfer Service (BITS) for C2. This malware was found during a recent activity group tracked as REF8747.","image":"Security Labs Images 29.jpg","body":{"raw":"\n## BITSLOTH at a glance\n\nBITSLOTH is a newly discovered Windows backdoor that leverages the Background Intelligent Transfer Service (BITS) as its command-and-control mechanism. BITSLOTH was uncovered during an intrusion within the LATAM region earlier this summer. This malware hasn't been publicly documented to our knowledge and while it’s not clear who’s behind the malware, it has been in development for several years based on tracking distinct versions uploaded to VirusTotal.\n\nThe most current iteration of the backdoor at the time of this publication has 35 handler functions including keylogging and screen capture capabilities. In addition, BITSLOTH contains many different features for discovery, enumeration, and command-line execution. Based on these capabilities, we assess this tool is designed for gathering data from victims.\n\n### Key takeaways\n\n - BITSLOTH is a newly discovered Windows backdoor\n - BITSLOTH uses a built-in Microsoft feature, Background Intelligent Transfer Service (BITS) for command-and-control communication \n - BITSLOTH has numerous command handlers used for discovery/enumeration, execution, and collection purposes\n - The backdoor contains logging functions and strings consistent with the authors being native Chinese speakers\n\n## Discovery\n\nOur team observed BITSLOTH installed on a server environment on June 25th during REF8747, this was an intrusion into the Foreign Ministry of a South American government. The intrusion was traced back to PSEXEC execution on one of the infected endpoints. The attackers used a slew of publicly available tools for most of their operations with the exception of BITSLOTH.\n\n - [RINGQ](https://github.com/T4y1oR/RingQ)\n - [IOX](https://github.com/EddieIvan01/iox)\n - [STOWAWAY](https://github.com/ph4ntonn/Stowaway)\n - [GODPOTATO](https://github.com/BeichenDream/GodPotato)\n - [NOPAC](https://github.com/Ridter/noPac)\n - [MIMIKATZ](https://github.com/gentilkiwi/mimikatz)\n - [PPLFAULT](https://github.com/gabriellandau/PPLFault)\n - [CERTIFY](https://github.com/GhostPack/Certify)\n\nOne of the primary mechanisms of execution was through a shellcode loading project called RINGQ. In a similar fashion to DONUTLOADER, RINGQ will convert any Windows executable and generate custom shellcode placing it into a file ( main.txt). This shellcode gets decrypted and executed in-memory. This technique is used bypass defenses that rely on hash blocklists or static signatures in some anti-malware products.\n\n![Screenshot of RingQ demo](/assets/images/bits-and-bytes-analyzing-bitsloth/image21.png)\n\nWe observed RINGQ being used to load the IOX port forwarder. Note: The key in the image below is the hex conversion of “whoami”.\n\n![RINGQ loading and executing IOX](/assets/images/bits-and-bytes-analyzing-bitsloth/image13.png)\n\nAdditionally the attackers used the STOWAWAY utility to proxy encrypted traffic over HTTP to their C2 servers. Proxy tools, tunnelers, and redirectors are commonly used during intrusions to conceal the adversary responsible for an intrusion. These tools offer adversaries various features, including the ability to bypass internal network controls, provide terminal interfaces, encryption capabilities as well as file transfer options.\n\n![STOWAWAY proxy usage](/assets/images/bits-and-bytes-analyzing-bitsloth/image19.png)\n\nAfter initial access, the actor moved laterally and dropped BITSLOTH in the form of a DLL (```flengine.dll```) inside the ProgramData directory. The actor then executed the music-making program FL Studio (```fl.exe```). Based on the observed call stack associated with the self-injection alert, we confirmed the threat actor used a traditional side-loading technique using a signed version of [FL Studio](https://www.virustotal.com/gui/file/75747c8b5b3676abde25a8dd66280908c0d0fc57ef054b88a41673619d3bee28/details). \n\n```\n  c:\\windows\\syswow64\\ntdll.dll!0x770841AC\n  c:\\windows\\syswow64\\ntdll.dll!0x7709D287\n  c:\\windows\\syswow64\\kernelbase.dll!0x76ED435F\n  c:\\windows\\syswow64\\kernelbase.dll!0x76ED42EF\n  Unbacked!0x14EAB23\n  Unbacked!0x14EA8B6\n  c:\\programdata\\pl studio\\flengine.dll!0x74AD2F2E\n  c:\\programdata\\pl studio\\fl.exe!0xDB3985\n  c:\\programdata\\pl studio\\fl.exe!0xDB3E5E\n  c:\\programdata\\pl studio\\fl.exe!0xDB4D3F\n  c:\\windows\\syswow64\\kernel32.dll!0x76B267F9\n  c:\\windows\\syswow64\\ntdll.dll!0x77077F4D\n  c:\\windows\\syswow64\\ntdll.dll!0x77077F1B\n```\n\nThis call stack was generated along with a process injection alert, and enabled researchers to extract an in-memory DLL that was set with Read/Write/Execute(RWX) page protections.\n\n#### BITSLOTH overview\n\nDuring our analysis, we found several older BITSLOTH samples demonstrating a record of development since December 2021. Within this project, the malware developer chose notable terminology– referring to BITSLOTH as the ```Slaver``` component and the command and control server as the ```Master``` component. Below is an example of one of the PDB file paths linked to BITSLOTH that depicts this:\n\n![PDB linked to BITSLOTH sample](/assets/images/bits-and-bytes-analyzing-bitsloth/image7.png)\n\nBITSLOTH employs no obfuscation around control flow or any kind of string encryption.\n\n![BITSLOTH strings](/assets/images/bits-and-bytes-analyzing-bitsloth/image9.png)\n\nBoth older and recent samples contain strings used for logging and debugging purposes. As an example at startup, there is a string referenced in the read-only section (```.rdata```). \n\n![Debugging](/assets/images/bits-and-bytes-analyzing-bitsloth/image24.png) \n\nThis Simplified Chinese wide-character string translates to:\n```Note: There is already a program running, do not run it again…```\n\n![String left by developer](/assets/images/bits-and-bytes-analyzing-bitsloth/image29.png)\n\nThese small snippets contained within BITSLOTH help shed light on the development and prioritization of features, along with what appear to be operator instructions. In the latest version, a new scheduling component was added by the developer to control specific times when BITSLOTH should operate in a victim environment. This is a feature we have observed in other modern malware families such as [EAGERBEE](https://www.elastic.co/security-labs/introducing-the-ref5961-intrusion-set).\n\n![BITSLOTH scheduling component](/assets/images/bits-and-bytes-analyzing-bitsloth/image27.png)\n\n## BITSLOTH code analysis\n\nBITSLOTH is a backdoor with many different capabilities including:\n\n - Running and executing commands\n - Uploading and downloading files\n - Performing enumeration and discovery \n - Collecting sensitive data through keylogging and screen capturing\n\n### Mutex\n\nBITSLOTH uses a hard-coded mutex (```Global\\d5ffff77ff77adad657658```) within each sample to ensure only one instance is running at a time. \n\n![Mutex used by BITSLOTH](/assets/images/bits-and-bytes-analyzing-bitsloth/image6.png)\n\n### Communication\n\nBITSLOTH adopts a traditional client/server architecture, the developer refers to the client as the ```Slaver``` component and the command and control server (C2) as the ```Master``` component. The developer embeds the IP/port of the C2 server in each sample with a front-loaded string (```rrrr_url```). This string acts as a key to identify the C2 configuration in itself while running in memory, this is used when updating the C2 server.\n\nBelow are the configurations in several samples our team has observed, the threat actor configures both internal and external IP ranges.\n\n```\nrrrr_url216.238.121[.]132:8443\nrrrr_url192.168.1[.]125:8443 \nrrrr_url192.168.1[.]124:8443\nrrrr_url45.116.13[.]178:443\n```\n\nOne of the defining features of BITSLOTH is using the [Background Intelligent Transfer Service](https://learn.microsoft.com/en-us/windows/win32/bits/background-intelligent-transfer-service-portal) (BITS) for C2. While this feature has been designed to facilitate the network transfer of files between two machines, it’s been [abused](https://www.welivesecurity.com/2019/09/09/backdoor-stealth-falcon-group/) by multiple state-sponsored groups and continues to fly under the radar against organizations. This medium is appealing to adversaries because many organizations still struggle to monitor BITS network traffic and detect unusual BITS jobs.\n\n\u003e Windows has a system administration feature called Background Intelligent Transfer Service (BITS) enabling the download and upload of files to HTTP web servers or SMB shares. The BITS service employs multiple features during the file transfer process such as the ability to pause/resume transfers, handling network interruptions, etc. BITS traffic is usually associated with software updates therefore wrongfully implied as trusted. Many organizations lack visibility into BITS network traffic making this an appealing target.\n\nThe BITS API is exposed through Window’s [Component Object Model](https://learn.microsoft.com/en-us/windows/win32/com/component-object-model--com--portal) (COM) using the **IBackgroundCopyManager** [interface](https://learn.microsoft.com/en-us/windows/win32/api/bits/nn-bits-ibackgroundcopymanager). This interface provides capabilities to create new jobs, enumerate existing jobs in the transfer queue, and access a specific job from a transfer queue.\n\n![Initializing IBackgroundCopyManager interface](/assets/images/bits-and-bytes-analyzing-bitsloth/image12.png)\n\nAfter initialization, BITSLOTH cancels any existing BITS jobs on the victim machine that match the following display names:\n\n - ```WU Client Download```\n - ```WU Client Upload```\n - ```WU Client Upload R```\n\nThese names are used by the developer to blend in and associate the different BITS transfer jobs with their respective BITS [job type](https://learn.microsoft.com/en-us/windows/win32/api/bits/ne-bits-bg_job_type). By canceling any existing jobs, this allows the execution of the malware to operate from a clean state.\n\n![Switch statement inside BITSLOTH to process BITS job](/assets/images/bits-and-bytes-analyzing-bitsloth/image17.png)\n\nBelow are the Microsoft definitions matching the type of BITS job:\n\n - **BG_JOB_TYPE_DOWNLOAD** - Specifies that the job downloads files to the client.\n - **BG_JOB_TYPE_UPLOAD** - Specifies that the job uploads a file to the server.\n - **BG_JOB_TYPE_UPLOAD_REPLY** - Specifies that the job uploads a file to the server, and receives a reply file from the server application.\n\nAfter canceling any existing jobs, the MAC address and operating system information are retrieved and placed into global variables. A new thread gets created, configuring the auto-start functionality. Within this thread, a new BITS download job is created with the name (```Microsoft Windows```).\n\n![BITS job creation for auto-start functionality](/assets/images/bits-and-bytes-analyzing-bitsloth/image18.png)\n\nThis download job sets the destination URL to ```http://updater.microsoft[.]com/index.aspx```. While this domain is not routable, BITSLOTH masquerades this BITS job using a benign looking domain as a cover then uses **SetNotifyCmdLine** to execute the malware when the transfer state is changed.\n\n![Setting up BITS persistence via SetNotifyCmdLine](/assets/images/bits-and-bytes-analyzing-bitsloth/image28.png)\n\nInterestingly, this unique toolmark allowed us to pivot to additional samples showing this family has been in circulation for several years. \n \n![VirusTotal relationships from embedded Microsoft URL](/assets/images/bits-and-bytes-analyzing-bitsloth/image4.png)\n\nAt this point, the malware has now been configured with persistence via a BITS job named ```Microsoft Windows```. Below is a screenshot of this job’s configuration showing the notification command line set to the BITSLOTH location (```C:\\ProgramData\\Media\\setup_wm.exe```)\n\n![BITSLOTH persistence job](/assets/images/bits-and-bytes-analyzing-bitsloth/image33.png)\n\nOnce BITSLOTH becomes active, it will start requesting instructions from the C2 server using the ```WU Client Download``` job. This request URL is generated by combining the MAC address with a hard-coded string (```wu.htm```). Below is an example URL:\n\n```\nhttps://192.168.182.130/00-0C-29-0E-29-87/wu.htm\n```\n\nIn response to this request, the malware will then receive a 12-byte structure from the C2 server containing a unique ID for the job, command ID for the handler, and a response token. Throughout these exchanges of file transfers, temporary files from the victim machine are used as placeholders to hold the data being transmitted back and forth, BITSLOTH uses a filename starting with characters (```wm```) appended by random characters.\n\n\n![Data exchange through temporary files](/assets/images/bits-and-bytes-analyzing-bitsloth/image25.png)\n\n### Command functionality\n\nBITSLOTH uses a command handler with 35 functions to process specific actions that should be taken on the victim machine. The malware has the option to be configured with HTTP or HTTPS and uses a hardcoded single byte XOR (```0x2```) to obfuscate the incoming instructions from the C2 server. The outbound requests containing the collected victim data have no additional protections by the malware itself and are sent in plaintext. \n\nIn order to move fast, our team leveraged a helpful Python [implementation](https://github.com/SafeBreach-Labs/SimpleBITSServer) of a BITS server released by [SafeBreach Labs](https://www.safebreach.com/). By setting the C2 IP to our loopback address inside a VM, this allowed us to get introspection on the network traffic. \n\n![BITSLOTH command handler](/assets/images/bits-and-bytes-analyzing-bitsloth/image2.png)\n\nThe handlers all behave in a similar approach performing a primary function then writing the data returned from the handler to a local temporary file. These temporary files then get mapped to a BITS upload job called ```WU Client Upload```. Each handler uses its own string formatting to create a unique destination URL. Each filename at the end of the URL uses a single letter to represent the type of data collected from the host, such as ```P.bin``` for processes or ```S.bin``` for services.\n\n```\nhttp://192.168.182.130/00-0C-29-0E-29-87/IF/P.bin\n```\n\nBelow is an example screenshot showing the process enumeration handler with the string formatting and how this data is then linked to the BITS upload job.\n\n![BITSLOTH handler for running processes](/assets/images/bits-and-bytes-analyzing-bitsloth/image31.png)\n\nThis link to the exfiltrated data can also be observed by viewing the BITS upload job directly. In the screenshots below, we can see the destination URL (C2 server) for the upload and the temporary file (```wm9F0C.tmp```) linked to the job.\n\n![BITS upload job configuration](/assets/images/bits-and-bytes-analyzing-bitsloth/image15.png)\n\nIf we look at the temporary file, we can see the collected process information from the victim host.\n\n![Contents of temporary file holding exfiltrated data](/assets/images/bits-and-bytes-analyzing-bitsloth/image26.png)\n\nSoon after the upload job is created, the data is sent over the network through a BITS_POST request containing the captured data.\n\n![Outbound BITS_POST request](/assets/images/bits-and-bytes-analyzing-bitsloth/image22.png)\n\n### Command handling table\n\n| Command ID | Description |\n| ----- | ----- |\n| 0 | Collect running processes via **WTSEnumerateProcessesW** |\n| 1 | Get Windows services via **EnumServicesStatusW** |\n| 2 | Get system information via ```systeminfo``` command |\n| 3 | Retrieve all top-level Windows via **EnumWindows** |\n| 5 | Collect file listings |\n| 6 | Download file from C2 server |\n| 7 | Upload file to C2 server |\n| 10 | Terminate itself |\n| 11 | Set communication mode to HTTPS |\n| 12 | Set communication mode to HTTP |\n| 13 | Remove persistence |\n| 14 | Reconfigure persistence |\n| 15 | Cancel BITS download job (```WU Client Download```) |\n| 16 | Remove persistence and delete itself |\n| 17 | Thread configuration |\n| 18 | Duplicate of handler #2 |\n| 19 | Delete file based on file path |\n| 20 | Delete folder based on file path |\n| 21 | Starts terminal shell using stdin/stdout redirection |\n| 22 | Resets terminal handler (#21) |\n| 23 | Runs Windows tree command |\n| 24 | Updates BITSLOTH, delete old version |\n| 25 | Shutdown the machine via **ExitWindowsEx** |\n| 26 | Reboot the machine via **ExitWindowsEx** |\n| 27 | Log user off from the machine via **ExitWindowsEx** |\n| 28 | Terminate process based on process identifier (PID) |\n| 29 | Retrieves additional information via ```msinfo32``` command |\n| 30 | Execute individual file via **ShellExecuteW** |\n| 34 | Create new directory via **CreateDirectoryW** |\n| 41 | Upload data to C2 server | \n| 42 | Checks for capture driver via **capGetDriverDescriptionW** |\n| 43 | Take screenshots of victim machine desktop |\n| 44 | Record keystrokes from victim machine |\n| 45 | Stop recording screenshot images |\n| 46 | Stop keylogger functionality |\n\n### Backdoor functionality\n\nBITSLOTH includes a wide range of post-compromise capabilities for an adversary to operate within a victim environment. We will focus on the more significant capabilities by grouping them into different categories.\n\n#### Discovery/enumeration\n\nA portion of the BITSLOTH handlers are focused on retrieving and enumerating data from victim machines. This includes:\n\n - Retrieving process information via **WTSEnumerateProcessesW**\n - Collecting Windows services via **EnumServicesStatusW**\n - Enumerating all top-level Windows via **EnumWindows** with a callback function\n - Retrieving system information via windows utilities such as ```systeminfo``` and ```msinfo32```\n\n![BITSLOTH handler used to collect system information](/assets/images/bits-and-bytes-analyzing-bitsloth/image14.png)\n\nIn many of the handlers, the locale version is configured to ```chs ```(Chinese - Simplified).\n\n![Retrieve Windows information](/assets/images/bits-and-bytes-analyzing-bitsloth/image16.png)\n\nBITSLOTH has a couple custom enumeration functions tied to retrieving file listings and performing directory tree searches. The file listing handler takes a custom parameter from the operator to target specific folder locations of interest:\n\n - **GET_DESKDOP** → **CSIDL_DESKTOPDIRECTORY** (Desktop)\n - **GET_BITBUCKET** -\u003e **CSIDL_BITBUCKET** (Recycle Bin)\n - **GET_PERSONAl** -\u003e **CSIDL_MYDOCUMENTS** (My Documents)\n\n![File listing parameters via BITSLOTH](/assets/images/bits-and-bytes-analyzing-bitsloth/image10.png)\n\nBITSLOTH also has the ability to collect entire directory/file listings on the machine for every file by using the Windows [tree](https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/tree) utility. This handler loops across the alphabet for each drive letter where the data is then saved locally in a temporary file named ```aghzyxklg```. \n\n![Tree listing via BITSLOTH](/assets/images/bits-and-bytes-analyzing-bitsloth/image1.png)\n\nThe tree data is then compressed and sent to the C2 server with a .ZIP extension. Below is an example of the collected data. This data can help pinpoint sensitive files or provide more context about the target environment. \n\n![Example of data collected through **GetDirectoryTree** handler](/assets/images/bits-and-bytes-analyzing-bitsloth/image5.png)\n\n#### Collection\n\nIn terms of collection, there are a few handlers used for actively gathering information. These are centered around capturing screenshots from the desktop and performing keylogging functionality.\n\nBITSLOTH implements a lightweight function used to identify capture recording devices, this appears to be a technique to check for a camera using the Windows API (**capGetDriverDescriptionW**). \n\n![Handler that records capture devices](/assets/images/bits-and-bytes-analyzing-bitsloth/image30.png)\n\nBITSLOTH has the ability to take screenshots based on parameters provided by the operator. Input to this function uses a separator (```||```) where the operator provides the number of seconds of the capture interval and the capture count. The images are stored as BMP files with a hard coded name ```ciakfjoab``` and compressed with the DEFLATE algorithm using a ```.ZIP``` archive. These timestamped zipped archives are then sent out to the C2 server.\n\nThe handler leverages common screenshot APIs such as **CreateCompatibleBitmap** and **BitBlt** from ```Gdi32.dll```.\n\n![BITSLOTH screen capture using Windows APIs](/assets/images/bits-and-bytes-analyzing-bitsloth/image32.png)\n\nFor recording keystrokes, BITSLOTH uses traditional techniques by monitoring key presses using **GetAsyncKeyState**/**GetKeyState**. The handler has an argument for the number of seconds to perform the keylogging. This data is also compressed in a ```.ZIP``` file and sent outbound to the C2 server.\n\n![Keylogger functionality inside BITSLOTH](/assets/images/bits-and-bytes-analyzing-bitsloth/image8.png)\n\n#### Execution / Maintenance\n\nBITSLOTH has multiple capabilities around maintenace and file execution as well as standard backdoor functionalities such as:\n\n - Capability to execute files stand-alone via **ShellExecuteW**\n - Windows terminal capability to execute commands and read data back via pipes\n - Create directories, perform reboots, shutdown the machine, terminate processes\n - Perform file upload and download between C2 server\n - Modify BITSLOTH configuration such as communication modes, update C2 URL, turn off keylogging/screenshot features\n\n![BITSLOTH’s CMD terminal](/assets/images/bits-and-bytes-analyzing-bitsloth/image11.png)\n\n## BITSLOTH pivots\n\nBITSLOTH appears to be actively deployed. We identified another BITSLOTH C2 server (```15.235.132[.]67```) using the same port (```8443```) with the same [SSL certificate](https://www.shodan.io/search?query=ssl.cert.serial%3A253c1c0bbf58e1f509fc4468de462ed8872f81d9) used from our intrusion. \n\n![Shodan SSL certificate matches](/assets/images/bits-and-bytes-analyzing-bitsloth/image20.png)\n\nWhile it’s not exactly clear who’s behind BITSLOTH, there was a large amount of activity of VirusTotal uploads occurring on December 12, 2021. With around 67 uploads over 24 hours from one submitter (```1fcc35ea```), we suspect someone linked to this project was validating detections, making modifications, and uploading different versions of BITSLOTH to VirusTotal. One sample was packed with VMProtect, others stripped of functionality, some uploads were debug builds, etc.\n\n![BITSLOTH - VirusTotal Submitter (```1fcc35ea```)](/assets/images/bits-and-bytes-analyzing-bitsloth/image23.png)\n\nA lot of time has passed since then, but it is interesting seeing this family show up in a recent intrusion. Whatever the objective behind this malware, it's surprising that this family remained under the radar for so many years.\n\n![Different PDB paths from BITSLOTH uploads](/assets/images/bits-and-bytes-analyzing-bitsloth/image3.png)\n\n### REF 8747 through MITRE ATT\u0026CK\n\nElastic uses the [MITRE ATT\u0026CK](https://attack.mitre.org/) framework to document common tactics, techniques, and procedures that advanced persistent threats use against enterprise networks.\n\n[h4] Tactics\nTactics represent the why of a technique or sub-technique. It is the adversary’s tactical goal: the reason for performing an action.\n\n - [Collection](https://attack.mitre.org/tactics/TA0009/)\n - [Command and Control](https://attack.mitre.org/tactics/TA0011/)\n - [Discovery](https://attack.mitre.org/tactics/TA0007/)\n - [Execution](https://attack.mitre.org/tactics/TA0002/)\n - [Exfiltration](https://attack.mitre.org/tactics/TA0010/)\n - [Persistence](https://attack.mitre.org/tactics/TA0003/)\n \n#### Techniques\n\nTechniques represent how an adversary achieves a tactical goal by performing an action.\n\n - [BITS Jobs](https://attack.mitre.org/techniques/T1197/)\n - [System Information Discovery](https://attack.mitre.org/techniques/T1082/)\n - [Hijack Execution Flow: DLL Side-Loading](https://attack.mitre.org/techniques/T1574/002/)\n - [Screen Capture](https://attack.mitre.org/techniques/T1113/)\n - [Input Capture: Keylogging](https://attack.mitre.org/techniques/T1056/001/)\n - [Proxy](https://attack.mitre.org/techniques/T1090/)\n\n## Detecting REF8747\n\n### Detection\n\nThe following detection rules and behavior prevention events were observed throughout the analysis of this intrusion set:\n\n - [Persistence via BITS Job Notify Cmdline](https://github.com/elastic/endpoint-rules/blob/0f01f1a9e2ac08e9ead74cafd4d73cb8166f9fc8/rules/windows/persistence_execution_via_bits_setnotifycmdline_method.toml)\n - [LSASS Access Attempt via PPL Bypass](https://github.com/elastic/protections-artifacts/blob/main/behavior/rules/windows/credential_access_lsass_access_attempt_via_ppl_bypass.toml)\n - [LSASS Access Attempt from an Unsigned Executable](https://github.com/elastic/protections-artifacts/blob/main/behavior/rules/windows/credential_access_lsass_access_attempt_from_an_unsigned_executable.toml)\n - [Suspicious Parent-Child Relationship](https://github.com/elastic/protections-artifacts/blob/main/behavior/rules/windows/defense_evasion_suspicious_parent_child_relationship.toml)\n - [Credential Access via Known Utilities](https://github.com/elastic/protections-artifacts/blob/main/behavior/rules/windows/credential_access_credential_access_via_known_utilities.toml)\n - Shellcode Injection\n\n#### YARA Signatures\n\n - [Windows.Hacktool.Mimikatz](https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Windows_Hacktool_Mimikatz.yar)\n - [Windows.Trojan.BITSloth](https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Windows_Trojan_BITSloth.yar)\n - [Windows.Hacktool.Iox](https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Windows_Hacktool_Iox.yar)\n - [Windows.Hacktool.Rubeus](https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Windows_Hacktool_Rubeus.yar)\n - [Windows.Hacktool.Certify](https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Windows_Hacktool_Certify.yar)\n - [Windows.Hacktool.RingQ](https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Windows_Hacktool_RingQ.yar)\n - [Windows.Hacktool.GodPotato](https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Windows_Hacktool_GodPotato.yar)\n - [Multi.Hacktool.Stowaway](https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Multi_Hacktool_Stowaway.yar)\n\n#### YARA\n\nElastic Security has created YARA rules to identify this activity. Below are YARA rules to identify BITSLOTH:\n\n```\nrule Windows_Trojan_BITSLOTH_05fc3a0a {\n    meta:\n        author = \"Elastic Security\"\n        creation_date = \"2024-07-16\"\n        last_modified = \"2024-07-18\"\n        os = \"Windows\"\n        arch = \"x86\"\n        threat_name = \"Windows.Trojan.BITSLOTH\"\n  \t license = \"Elastic License v2\"\n\n    strings:\n        $str_1 = \"/%s/index.htm?RspID=%d\" wide fullword\n        $str_2 = \"/%s/%08x.rpl\" wide fullword\n        $str_3 = \"/%s/wu.htm\" wide fullword\n        $str_4 = \"GET_DESKDOP\" wide fullword\n        $str_5 = \"http://updater.microsoft.com/index.aspx\" wide fullword\n        $str_6 = \"[U] update error...\" wide fullword\n        $str_7 = \"RMC_KERNEL ...\" wide fullword\n        $seq_global_protocol_check = { 81 3D ?? ?? ?? ?? F9 03 00 00 B9 AC 0F 00 00 0F 46 C1 }\n        $seq_exit_windows = { 59 85 C0 0F 84 ?? ?? ?? ?? E9 ?? ?? ?? ?? 6A 02 EB ?? 56 EB }\n    condition:\n        2 of them\n}\n```\n\n## Observations\n\nAll observables are also available for [download](https://github.com/elastic/labs-releases/tree/main/indicators/bitsloth) in both ECS and STIX format in a combined zip bundle.\n\nThe following observables were discussed in this research.\n\n| Observable | Type | Name | Reference |\n| ----- | ----- | ----- | ----- |\n| 4a4356faad620bf12ff53bcfac62e12eb67783bd22e66bf00a19a4c404bf45df | SHA-256 | ```s.dll``` | BITSLOTH |\n| dfb76bcf5a3e29225559ebbdae8bdd24f69262492eca2f99f7a9525628006d88 | SHA-256 | ```125.exe``` | BITSLOTH |\n| 4fb6dd11e723209d12b2d503a9fcf94d8fed6084aceca390ac0b7e7da1874f50 | SHA-256 | ```setup_wm.exe``` | BITSLOTH |\n| 0944b17a4330e1c97600f62717d6bae7e4a4260604043f2390a14c8d76ef1507 | SHA-256 | ```1242.exe``` | BITSLOTH |\n| 0f9c0d9b77678d7360e492e00a7fa00af9b78331dc926b0747b07299b4e64afd | SHA-256 | ```setup_wm.exe``` | BITSLOTH (VMProtect) |\n| 216.238.121[.]132 | ipv4-addr | BITSLOTH C2 server |\n| 45.116.13[.]178 | ipv4-addr | BITSLOTH C2 server |\n| 15.235.132[.]67 | ipv4-addr | BITSLOTH C2 server |\n| http ://updater.microsoft.com/index.aspx | | | BITSLOTH file indicator |\n| updater.microsoft.com | | | BITSLOTH file indicator |\n\n## References\nThe following were referenced throughout the above research:\n\n - [https://github.com/SafeBreach-Labs/SimpleBITSServer/tree/master](https://github.com/SafeBreach-Labs/SimpleBITSServer/tree/master)\n - [https://github.com/T4y1oR/RingQ](https://github.com/T4y1oR/RingQ)\n - [https://github.com/EddieIvan01/iox](https://github.com/EddieIvan01/iox)\n - [https://github.com/ph4ntonn/Stowaway/](https://github.com/ph4ntonn/Stowaway/)\n\n## About Elastic Security Labs\n\nElastic Security Labs is the threat intelligence branch of Elastic Security dedicated to creating positive change in the threat landscape. Elastic Security Labs provides publicly available research on emerging threats with an analysis of strategic, operational, and tactical adversary objectives, then integrates that research with the built-in detection and response capabilities of Elastic Security.\n\nFollow Elastic Security Labs on Twitter [@elasticseclabs](https://twitter.com/elasticseclabs?ref_src=twsrc%5Egoogle%7Ctwcamp%5Eserp%7Ctwgr%5Eauthor) and check out our research at [www.elastic.co/security-labs/](https://www.elastic.co/security-labs/). ","code":"var Component=(()=\u003e{var h=Object.create;var a=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var u=(t,e)=\u003e()=\u003e(e||t((e={exports:{}}).exports,e),e.exports),b=(t,e)=\u003e{for(var n in e)a(t,n,{get:e[n],enumerable:!0})},s=(t,e,n,o)=\u003e{if(e\u0026\u0026typeof e==\"object\"||typeof e==\"function\")for(let r of g(e))!f.call(t,r)\u0026\u0026r!==n\u0026\u0026a(t,r,{get:()=\u003ee[r],enumerable:!(o=m(e,r))||o.enumerable});return t};var w=(t,e,n)=\u003e(n=t!=null?h(p(t)):{},s(e||!t||!t.__esModule?a(n,\"default\",{value:t,enumerable:!0}):n,t)),y=t=\u003es(a({},\"__esModule\",{value:!0}),t);var d=u((k,l)=\u003e{l.exports=_jsx_runtime});var I={};b(I,{default:()=\u003eS,frontmatter:()=\u003eT});var i=w(d()),T={title:\"BITS and Bytes: Analyzing BITSLOTH, a newly identified backdoor\",slug:\"bits-and-bytes-analyzing-bitsloth\",date:\"2024-08-01\",description:\"Elastic Security Labs identified a novel Windows backdoor leveraging the Background Intelligent Transfer Service (BITS) for C2. This malware was found during a recent activity group tracked as REF8747.\",author:[{slug:\"seth-goodwin\"},{slug:\"daniel-stepanic\"}],image:\"Security Labs Images 29.jpg\",category:[{slug:\"malware-analysis\"}]};function c(t){let e=Object.assign({h2:\"h2\",p:\"p\",h3:\"h3\",ul:\"ul\",li:\"li\",a:\"a\",img:\"img\",code:\"code\",pre:\"pre\",h4:\"h4\",blockquote:\"blockquote\",strong:\"strong\",div:\"div\",table:\"table\",thead:\"thead\",tr:\"tr\",th:\"th\",tbody:\"tbody\",td:\"td\"},t.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h2,{id:\"bitsloth-at-a-glance\",children:\"BITSLOTH at a glance\"}),`\n`,(0,i.jsx)(e.p,{children:\"BITSLOTH is a newly discovered Windows backdoor that leverages the Background Intelligent Transfer Service (BITS) as its command-and-control mechanism. BITSLOTH was uncovered during an intrusion within the LATAM region earlier this summer. This malware hasn't been publicly documented to our knowledge and while it\\u2019s not clear who\\u2019s behind the malware, it has been in development for several years based on tracking distinct versions uploaded to VirusTotal.\"}),`\n`,(0,i.jsx)(e.p,{children:\"The most current iteration of the backdoor at the time of this publication has 35 handler functions including keylogging and screen capture capabilities. In addition, BITSLOTH contains many different features for discovery, enumeration, and command-line execution. Based on these capabilities, we assess this tool is designed for gathering data from victims.\"}),`\n`,(0,i.jsx)(e.h3,{id:\"key-takeaways\",children:\"Key takeaways\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"BITSLOTH is a newly discovered Windows backdoor\"}),`\n`,(0,i.jsx)(e.li,{children:\"BITSLOTH uses a built-in Microsoft feature, Background Intelligent Transfer Service (BITS) for command-and-control communication\"}),`\n`,(0,i.jsx)(e.li,{children:\"BITSLOTH has numerous command handlers used for discovery/enumeration, execution, and collection purposes\"}),`\n`,(0,i.jsx)(e.li,{children:\"The backdoor contains logging functions and strings consistent with the authors being native Chinese speakers\"}),`\n`]}),`\n`,(0,i.jsx)(e.h2,{id:\"discovery\",children:\"Discovery\"}),`\n`,(0,i.jsx)(e.p,{children:\"Our team observed BITSLOTH installed on a server environment on June 25th during REF8747, this was an intrusion into the Foreign Ministry of a South American government. The intrusion was traced back to PSEXEC execution on one of the infected endpoints. The attackers used a slew of publicly available tools for most of their operations with the exception of BITSLOTH.\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/T4y1oR/RingQ\",rel:\"nofollow\",children:\"RINGQ\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/EddieIvan01/iox\",rel:\"nofollow\",children:\"IOX\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/ph4ntonn/Stowaway\",rel:\"nofollow\",children:\"STOWAWAY\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/BeichenDream/GodPotato\",rel:\"nofollow\",children:\"GODPOTATO\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/Ridter/noPac\",rel:\"nofollow\",children:\"NOPAC\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/gentilkiwi/mimikatz\",rel:\"nofollow\",children:\"MIMIKATZ\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/gabriellandau/PPLFault\",rel:\"nofollow\",children:\"PPLFAULT\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/GhostPack/Certify\",rel:\"nofollow\",children:\"CERTIFY\"})}),`\n`]}),`\n`,(0,i.jsx)(e.p,{children:\"One of the primary mechanisms of execution was through a shellcode loading project called RINGQ. In a similar fashion to DONUTLOADER, RINGQ will convert any Windows executable and generate custom shellcode placing it into a file ( main.txt). This shellcode gets decrypted and executed in-memory. This technique is used bypass defenses that rely on hash blocklists or static signatures in some anti-malware products.\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/bits-and-bytes-analyzing-bitsloth/image21.png\",alt:\"Screenshot of RingQ demo\",width:\"1196\",height:\"676\"})}),`\n`,(0,i.jsx)(e.p,{children:\"We observed RINGQ being used to load the IOX port forwarder. Note: The key in the image below is the hex conversion of \\u201Cwhoami\\u201D.\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/bits-and-bytes-analyzing-bitsloth/image13.png\",alt:\"RINGQ loading and executing IOX\",width:\"1252\",height:\"296\"})}),`\n`,(0,i.jsx)(e.p,{children:\"Additionally the attackers used the STOWAWAY utility to proxy encrypted traffic over HTTP to their C2 servers. Proxy tools, tunnelers, and redirectors are commonly used during intrusions to conceal the adversary responsible for an intrusion. These tools offer adversaries various features, including the ability to bypass internal network controls, provide terminal interfaces, encryption capabilities as well as file transfer options.\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/bits-and-bytes-analyzing-bitsloth/image19.png\",alt:\"STOWAWAY proxy usage\",width:\"1340\",height:\"208\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"After initial access, the actor moved laterally and dropped BITSLOTH in the form of a DLL (\",(0,i.jsx)(e.code,{children:\"flengine.dll\"}),\") inside the ProgramData directory. The actor then executed the music-making program FL Studio (\",(0,i.jsx)(e.code,{children:\"fl.exe\"}),\"). Based on the observed call stack associated with the self-injection alert, we confirmed the threat actor used a traditional side-loading technique using a signed version of \",(0,i.jsx)(e.a,{href:\"https://www.virustotal.com/gui/file/75747c8b5b3676abde25a8dd66280908c0d0fc57ef054b88a41673619d3bee28/details\",rel:\"nofollow\",children:\"FL Studio\"}),\".\"]}),`\n`,(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:`  c:\\\\windows\\\\syswow64\\\\ntdll.dll!0x770841AC\n  c:\\\\windows\\\\syswow64\\\\ntdll.dll!0x7709D287\n  c:\\\\windows\\\\syswow64\\\\kernelbase.dll!0x76ED435F\n  c:\\\\windows\\\\syswow64\\\\kernelbase.dll!0x76ED42EF\n  Unbacked!0x14EAB23\n  Unbacked!0x14EA8B6\n  c:\\\\programdata\\\\pl studio\\\\flengine.dll!0x74AD2F2E\n  c:\\\\programdata\\\\pl studio\\\\fl.exe!0xDB3985\n  c:\\\\programdata\\\\pl studio\\\\fl.exe!0xDB3E5E\n  c:\\\\programdata\\\\pl studio\\\\fl.exe!0xDB4D3F\n  c:\\\\windows\\\\syswow64\\\\kernel32.dll!0x76B267F9\n  c:\\\\windows\\\\syswow64\\\\ntdll.dll!0x77077F4D\n  c:\\\\windows\\\\syswow64\\\\ntdll.dll!0x77077F1B\n`})}),`\n`,(0,i.jsx)(e.p,{children:\"This call stack was generated along with a process injection alert, and enabled researchers to extract an in-memory DLL that was set with Read/Write/Execute(RWX) page protections.\"}),`\n`,(0,i.jsx)(e.h4,{id:\"bitsloth-overview\",children:\"BITSLOTH overview\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"During our analysis, we found several older BITSLOTH samples demonstrating a record of development since December 2021. Within this project, the malware developer chose notable terminology\\u2013 referring to BITSLOTH as the \",(0,i.jsx)(e.code,{children:\"Slaver\"}),\" component and the command and control server as the \",(0,i.jsx)(e.code,{children:\"Master\"}),\" component. Below is an example of one of the PDB file paths linked to BITSLOTH that depicts this:\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/bits-and-bytes-analyzing-bitsloth/image7.png\",alt:\"PDB linked to BITSLOTH sample\",width:\"439\",height:\"263\"})}),`\n`,(0,i.jsx)(e.p,{children:\"BITSLOTH employs no obfuscation around control flow or any kind of string encryption.\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/bits-and-bytes-analyzing-bitsloth/image9.png\",alt:\"BITSLOTH strings\",width:\"1016\",height:\"446\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"Both older and recent samples contain strings used for logging and debugging purposes. As an example at startup, there is a string referenced in the read-only section (\",(0,i.jsx)(e.code,{children:\".rdata\"}),\").\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/bits-and-bytes-analyzing-bitsloth/image24.png\",alt:\"Debugging\",width:\"447\",height:\"130\"})}),`\n`,(0,i.jsxs)(e.p,{children:[`This Simplified Chinese wide-character string translates to:\n`,(0,i.jsx)(e.code,{children:\"Note: There is already a program running, do not run it again\\u2026\"})]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/bits-and-bytes-analyzing-bitsloth/image29.png\",alt:\"String left by developer\",width:\"1440\",height:\"305\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"These small snippets contained within BITSLOTH help shed light on the development and prioritization of features, along with what appear to be operator instructions. In the latest version, a new scheduling component was added by the developer to control specific times when BITSLOTH should operate in a victim environment. This is a feature we have observed in other modern malware families such as \",(0,i.jsx)(e.a,{href:\"https://www.elastic.co/security-labs/introducing-the-ref5961-intrusion-set\",rel:\"nofollow\",children:\"EAGERBEE\"}),\".\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/bits-and-bytes-analyzing-bitsloth/image27.png\",alt:\"BITSLOTH scheduling component\",width:\"656\",height:\"365\"})}),`\n`,(0,i.jsx)(e.h2,{id:\"bitsloth-code-analysis\",children:\"BITSLOTH code analysis\"}),`\n`,(0,i.jsx)(e.p,{children:\"BITSLOTH is a backdoor with many different capabilities including:\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"Running and executing commands\"}),`\n`,(0,i.jsx)(e.li,{children:\"Uploading and downloading files\"}),`\n`,(0,i.jsx)(e.li,{children:\"Performing enumeration and discovery\"}),`\n`,(0,i.jsx)(e.li,{children:\"Collecting sensitive data through keylogging and screen capturing\"}),`\n`]}),`\n`,(0,i.jsx)(e.h3,{id:\"mutex\",children:\"Mutex\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"BITSLOTH uses a hard-coded mutex (\",(0,i.jsx)(e.code,{children:\"Global\\\\d5ffff77ff77adad657658\"}),\") within each sample to ensure only one instance is running at a time.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/bits-and-bytes-analyzing-bitsloth/image6.png\",alt:\"Mutex used by BITSLOTH\",width:\"633\",height:\"137\"})}),`\n`,(0,i.jsx)(e.h3,{id:\"communication\",children:\"Communication\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"BITSLOTH adopts a traditional client/server architecture, the developer refers to the client as the \",(0,i.jsx)(e.code,{children:\"Slaver\"}),\" component and the command and control server (C2) as the \",(0,i.jsx)(e.code,{children:\"Master\"}),\" component. The developer embeds the IP/port of the C2 server in each sample with a front-loaded string (\",(0,i.jsx)(e.code,{children:\"rrrr_url\"}),\"). This string acts as a key to identify the C2 configuration in itself while running in memory, this is used when updating the C2 server.\"]}),`\n`,(0,i.jsx)(e.p,{children:\"Below are the configurations in several samples our team has observed, the threat actor configures both internal and external IP ranges.\"}),`\n`,(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:`rrrr_url216.238.121[.]132:8443\nrrrr_url192.168.1[.]125:8443 \nrrrr_url192.168.1[.]124:8443\nrrrr_url45.116.13[.]178:443\n`})}),`\n`,(0,i.jsxs)(e.p,{children:[\"One of the defining features of BITSLOTH is using the \",(0,i.jsx)(e.a,{href:\"https://learn.microsoft.com/en-us/windows/win32/bits/background-intelligent-transfer-service-portal\",rel:\"nofollow\",children:\"Background Intelligent Transfer Service\"}),\" (BITS) for C2. While this feature has been designed to facilitate the network transfer of files between two machines, it\\u2019s been \",(0,i.jsx)(e.a,{href:\"https://www.welivesecurity.com/2019/09/09/backdoor-stealth-falcon-group/\",rel:\"nofollow\",children:\"abused\"}),\" by multiple state-sponsored groups and continues to fly under the radar against organizations. This medium is appealing to adversaries because many organizations still struggle to monitor BITS network traffic and detect unusual BITS jobs.\"]}),`\n`,(0,i.jsxs)(e.blockquote,{children:[`\n`,(0,i.jsx)(e.p,{children:\"Windows has a system administration feature called Background Intelligent Transfer Service (BITS) enabling the download and upload of files to HTTP web servers or SMB shares. The BITS service employs multiple features during the file transfer process such as the ability to pause/resume transfers, handling network interruptions, etc. BITS traffic is usually associated with software updates therefore wrongfully implied as trusted. Many organizations lack visibility into BITS network traffic making this an appealing target.\"}),`\n`]}),`\n`,(0,i.jsxs)(e.p,{children:[\"The BITS API is exposed through Window\\u2019s \",(0,i.jsx)(e.a,{href:\"https://learn.microsoft.com/en-us/windows/win32/com/component-object-model--com--portal\",rel:\"nofollow\",children:\"Component Object Model\"}),\" (COM) using the \",(0,i.jsx)(e.strong,{children:\"IBackgroundCopyManager\"}),\" \",(0,i.jsx)(e.a,{href:\"https://learn.microsoft.com/en-us/windows/win32/api/bits/nn-bits-ibackgroundcopymanager\",rel:\"nofollow\",children:\"interface\"}),\". This interface provides capabilities to create new jobs, enumerate existing jobs in the transfer queue, and access a specific job from a transfer queue.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/bits-and-bytes-analyzing-bitsloth/image12.png\",alt:\"Initializing IBackgroundCopyManager interface\",width:\"941\",height:\"630\"})}),`\n`,(0,i.jsx)(e.p,{children:\"After initialization, BITSLOTH cancels any existing BITS jobs on the victim machine that match the following display names:\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:\"WU Client Download\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:\"WU Client Upload\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:\"WU Client Upload R\"})}),`\n`]}),`\n`,(0,i.jsxs)(e.p,{children:[\"These names are used by the developer to blend in and associate the different BITS transfer jobs with their respective BITS \",(0,i.jsx)(e.a,{href:\"https://learn.microsoft.com/en-us/windows/win32/api/bits/ne-bits-bg_job_type\",rel:\"nofollow\",children:\"job type\"}),\". By canceling any existing jobs, this allows the execution of the malware to operate from a clean state.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/bits-and-bytes-analyzing-bitsloth/image17.png\",alt:\"Switch statement inside BITSLOTH to process BITS job\",width:\"743\",height:\"427\"})}),`\n`,(0,i.jsx)(e.p,{children:\"Below are the Microsoft definitions matching the type of BITS job:\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:\"BG_JOB_TYPE_DOWNLOAD\"}),\" - Specifies that the job downloads files to the client.\"]}),`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:\"BG_JOB_TYPE_UPLOAD\"}),\" - Specifies that the job uploads a file to the server.\"]}),`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:\"BG_JOB_TYPE_UPLOAD_REPLY\"}),\" - Specifies that the job uploads a file to the server, and receives a reply file from the server application.\"]}),`\n`]}),`\n`,(0,i.jsxs)(e.p,{children:[\"After canceling any existing jobs, the MAC address and operating system information are retrieved and placed into global variables. A new thread gets created, configuring the auto-start functionality. Within this thread, a new BITS download job is created with the name (\",(0,i.jsx)(e.code,{children:\"Microsoft Windows\"}),\").\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/bits-and-bytes-analyzing-bitsloth/image18.png\",alt:\"BITS job creation for auto-start functionality\",width:\"1015\",height:\"226\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"This download job sets the destination URL to \",(0,i.jsx)(e.code,{children:\"http://updater.microsoft[.]com/index.aspx\"}),\". While this domain is not routable, BITSLOTH masquerades this BITS job using a benign looking domain as a cover then uses \",(0,i.jsx)(e.strong,{children:\"SetNotifyCmdLine\"}),\" to execute the malware when the transfer state is changed.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/bits-and-bytes-analyzing-bitsloth/image28.png\",alt:\"Setting up BITS persistence via SetNotifyCmdLine\",width:\"506\",height:\"52\"})}),`\n`,(0,i.jsx)(e.p,{children:\"Interestingly, this unique toolmark allowed us to pivot to additional samples showing this family has been in circulation for several years.\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/bits-and-bytes-analyzing-bitsloth/image4.png\",alt:\"VirusTotal relationships from embedded Microsoft URL\",width:\"1002\",height:\"372\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"At this point, the malware has now been configured with persistence via a BITS job named \",(0,i.jsx)(e.code,{children:\"Microsoft Windows\"}),\". Below is a screenshot of this job\\u2019s configuration showing the notification command line set to the BITSLOTH location (\",(0,i.jsx)(e.code,{children:\"C:\\\\ProgramData\\\\Media\\\\setup_wm.exe\"}),\")\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/bits-and-bytes-analyzing-bitsloth/image33.png\",alt:\"BITSLOTH persistence job\",width:\"917\",height:\"312\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"Once BITSLOTH becomes active, it will start requesting instructions from the C2 server using the \",(0,i.jsx)(e.code,{children:\"WU Client Download\"}),\" job. This request URL is generated by combining the MAC address with a hard-coded string (\",(0,i.jsx)(e.code,{children:\"wu.htm\"}),\"). Below is an example URL:\"]}),`\n`,(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:`https://192.168.182.130/00-0C-29-0E-29-87/wu.htm\n`})}),`\n`,(0,i.jsxs)(e.p,{children:[\"In response to this request, the malware will then receive a 12-byte structure from the C2 server containing a unique ID for the job, command ID for the handler, and a response token. Throughout these exchanges of file transfers, temporary files from the victim machine are used as placeholders to hold the data being transmitted back and forth, BITSLOTH uses a filename starting with characters (\",(0,i.jsx)(e.code,{children:\"wm\"}),\") appended by random characters.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/bits-and-bytes-analyzing-bitsloth/image25.png\",alt:\"Data exchange through temporary files\",width:\"1048\",height:\"543\"})}),`\n`,(0,i.jsx)(e.h3,{id:\"command-functionality\",children:\"Command functionality\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"BITSLOTH uses a command handler with 35 functions to process specific actions that should be taken on the victim machine. The malware has the option to be configured with HTTP or HTTPS and uses a hardcoded single byte XOR (\",(0,i.jsx)(e.code,{children:\"0x2\"}),\") to obfuscate the incoming instructions from the C2 server. The outbound requests containing the collected victim data have no additional protections by the malware itself and are sent in plaintext.\"]}),`\n`,(0,i.jsxs)(e.p,{children:[\"In order to move fast, our team leveraged a helpful Python \",(0,i.jsx)(e.a,{href:\"https://github.com/SafeBreach-Labs/SimpleBITSServer\",rel:\"nofollow\",children:\"implementation\"}),\" of a BITS server released by \",(0,i.jsx)(e.a,{href:\"https://www.safebreach.com/\",rel:\"nofollow\",children:\"SafeBreach Labs\"}),\". By setting the C2 IP to our loopback address inside a VM, this allowed us to get introspection on the network traffic.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/bits-and-bytes-analyzing-bitsloth/image2.png\",alt:\"BITSLOTH command handler\",width:\"833\",height:\"502\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"The handlers all behave in a similar approach performing a primary function then writing the data returned from the handler to a local temporary file. These temporary files then get mapped to a BITS upload job called \",(0,i.jsx)(e.code,{children:\"WU Client Upload\"}),\". Each handler uses its own string formatting to create a unique destination URL. Each filename at the end of the URL uses a single letter to represent the type of data collected from the host, such as \",(0,i.jsx)(e.code,{children:\"P.bin\"}),\" for processes or \",(0,i.jsx)(e.code,{children:\"S.bin\"}),\" for services.\"]}),`\n`,(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:`http://192.168.182.130/00-0C-29-0E-29-87/IF/P.bin\n`})}),`\n`,(0,i.jsx)(e.p,{children:\"Below is an example screenshot showing the process enumeration handler with the string formatting and how this data is then linked to the BITS upload job.\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/bits-and-bytes-analyzing-bitsloth/image31.png\",alt:\"BITSLOTH handler for running processes\",width:\"920\",height:\"358\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"This link to the exfiltrated data can also be observed by viewing the BITS upload job directly. In the screenshots below, we can see the destination URL (C2 server) for the upload and the temporary file (\",(0,i.jsx)(e.code,{children:\"wm9F0C.tmp\"}),\") linked to the job.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/bits-and-bytes-analyzing-bitsloth/image15.png\",alt:\"BITS upload job configuration\",width:\"968\",height:\"265\"})}),`\n`,(0,i.jsx)(e.p,{children:\"If we look at the temporary file, we can see the collected process information from the victim host.\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/bits-and-bytes-analyzing-bitsloth/image26.png\",alt:\"Contents of temporary file holding exfiltrated data\",width:\"794\",height:\"455\"})}),`\n`,(0,i.jsx)(e.p,{children:\"Soon after the upload job is created, the data is sent over the network through a BITS_POST request containing the captured data.\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/bits-and-bytes-analyzing-bitsloth/image22.png\",alt:\"Outbound BITS_POST request\",width:\"1049\",height:\"660\"})}),`\n`,(0,i.jsx)(e.h3,{id:\"command-handling-table\",children:\"Command handling table\"}),`\n`,(0,i.jsx)(e.div,{className:\"table-container\",children:(0,i.jsxs)(e.table,{children:[(0,i.jsx)(e.thead,{children:(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.th,{children:\"Command ID\"}),(0,i.jsx)(e.th,{children:\"Description\"})]})}),(0,i.jsxs)(e.tbody,{children:[(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:\"0\"}),(0,i.jsxs)(e.td,{children:[\"Collect running processes via \",(0,i.jsx)(e.strong,{children:\"WTSEnumerateProcessesW\"})]})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:\"1\"}),(0,i.jsxs)(e.td,{children:[\"Get Windows services via \",(0,i.jsx)(e.strong,{children:\"EnumServicesStatusW\"})]})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:\"2\"}),(0,i.jsxs)(e.td,{children:[\"Get system information via \",(0,i.jsx)(e.code,{children:\"systeminfo\"}),\" command\"]})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:\"3\"}),(0,i.jsxs)(e.td,{children:[\"Retrieve all top-level Windows via \",(0,i.jsx)(e.strong,{children:\"EnumWindows\"})]})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:\"5\"}),(0,i.jsx)(e.td,{children:\"Collect file listings\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:\"6\"}),(0,i.jsx)(e.td,{children:\"Download file from C2 server\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:\"7\"}),(0,i.jsx)(e.td,{children:\"Upload file to C2 server\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:\"10\"}),(0,i.jsx)(e.td,{children:\"Terminate itself\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:\"11\"}),(0,i.jsx)(e.td,{children:\"Set communication mode to HTTPS\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:\"12\"}),(0,i.jsx)(e.td,{children:\"Set communication mode to HTTP\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:\"13\"}),(0,i.jsx)(e.td,{children:\"Remove persistence\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:\"14\"}),(0,i.jsx)(e.td,{children:\"Reconfigure persistence\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:\"15\"}),(0,i.jsxs)(e.td,{children:[\"Cancel BITS download job (\",(0,i.jsx)(e.code,{children:\"WU Client Download\"}),\")\"]})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:\"16\"}),(0,i.jsx)(e.td,{children:\"Remove persistence and delete itself\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:\"17\"}),(0,i.jsx)(e.td,{children:\"Thread configuration\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:\"18\"}),(0,i.jsx)(e.td,{children:\"Duplicate of handler #2\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:\"19\"}),(0,i.jsx)(e.td,{children:\"Delete file based on file path\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:\"20\"}),(0,i.jsx)(e.td,{children:\"Delete folder based on file path\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:\"21\"}),(0,i.jsx)(e.td,{children:\"Starts terminal shell using stdin/stdout redirection\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:\"22\"}),(0,i.jsx)(e.td,{children:\"Resets terminal handler (#21)\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:\"23\"}),(0,i.jsx)(e.td,{children:\"Runs Windows tree command\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:\"24\"}),(0,i.jsx)(e.td,{children:\"Updates BITSLOTH, delete old version\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:\"25\"}),(0,i.jsxs)(e.td,{children:[\"Shutdown the machine via \",(0,i.jsx)(e.strong,{children:\"ExitWindowsEx\"})]})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:\"26\"}),(0,i.jsxs)(e.td,{children:[\"Reboot the machine via \",(0,i.jsx)(e.strong,{children:\"ExitWindowsEx\"})]})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:\"27\"}),(0,i.jsxs)(e.td,{children:[\"Log user off from the machine via \",(0,i.jsx)(e.strong,{children:\"ExitWindowsEx\"})]})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:\"28\"}),(0,i.jsx)(e.td,{children:\"Terminate process based on process identifier (PID)\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:\"29\"}),(0,i.jsxs)(e.td,{children:[\"Retrieves additional information via \",(0,i.jsx)(e.code,{children:\"msinfo32\"}),\" command\"]})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:\"30\"}),(0,i.jsxs)(e.td,{children:[\"Execute individual file via \",(0,i.jsx)(e.strong,{children:\"ShellExecuteW\"})]})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:\"34\"}),(0,i.jsxs)(e.td,{children:[\"Create new directory via \",(0,i.jsx)(e.strong,{children:\"CreateDirectoryW\"})]})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:\"41\"}),(0,i.jsx)(e.td,{children:\"Upload data to C2 server\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:\"42\"}),(0,i.jsxs)(e.td,{children:[\"Checks for capture driver via \",(0,i.jsx)(e.strong,{children:\"capGetDriverDescriptionW\"})]})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:\"43\"}),(0,i.jsx)(e.td,{children:\"Take screenshots of victim machine desktop\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:\"44\"}),(0,i.jsx)(e.td,{children:\"Record keystrokes from victim machine\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:\"45\"}),(0,i.jsx)(e.td,{children:\"Stop recording screenshot images\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:\"46\"}),(0,i.jsx)(e.td,{children:\"Stop keylogger functionality\"})]})]})]})}),`\n`,(0,i.jsx)(e.h3,{id:\"backdoor-functionality\",children:\"Backdoor functionality\"}),`\n`,(0,i.jsx)(e.p,{children:\"BITSLOTH includes a wide range of post-compromise capabilities for an adversary to operate within a victim environment. We will focus on the more significant capabilities by grouping them into different categories.\"}),`\n`,(0,i.jsx)(e.h4,{id:\"discoveryenumeration\",children:\"Discovery/enumeration\"}),`\n`,(0,i.jsx)(e.p,{children:\"A portion of the BITSLOTH handlers are focused on retrieving and enumerating data from victim machines. This includes:\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsxs)(e.li,{children:[\"Retrieving process information via \",(0,i.jsx)(e.strong,{children:\"WTSEnumerateProcessesW\"})]}),`\n`,(0,i.jsxs)(e.li,{children:[\"Collecting Windows services via \",(0,i.jsx)(e.strong,{children:\"EnumServicesStatusW\"})]}),`\n`,(0,i.jsxs)(e.li,{children:[\"Enumerating all top-level Windows via \",(0,i.jsx)(e.strong,{children:\"EnumWindows\"}),\" with a callback function\"]}),`\n`,(0,i.jsxs)(e.li,{children:[\"Retrieving system information via windows utilities such as \",(0,i.jsx)(e.code,{children:\"systeminfo\"}),\" and \",(0,i.jsx)(e.code,{children:\"msinfo32\"})]}),`\n`]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/bits-and-bytes-analyzing-bitsloth/image14.png\",alt:\"BITSLOTH handler used to collect system information\",width:\"867\",height:\"365\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"In many of the handlers, the locale version is configured to \",(0,i.jsx)(e.code,{children:\"chs \"}),\"(Chinese - Simplified).\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/bits-and-bytes-analyzing-bitsloth/image16.png\",alt:\"Retrieve Windows information\",width:\"871\",height:\"335\"})}),`\n`,(0,i.jsx)(e.p,{children:\"BITSLOTH has a couple custom enumeration functions tied to retrieving file listings and performing directory tree searches. The file listing handler takes a custom parameter from the operator to target specific folder locations of interest:\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:\"GET_DESKDOP\"}),\" \\u2192 \",(0,i.jsx)(e.strong,{children:\"CSIDL_DESKTOPDIRECTORY\"}),\" (Desktop)\"]}),`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:\"GET_BITBUCKET\"}),\" -\u003e \",(0,i.jsx)(e.strong,{children:\"CSIDL_BITBUCKET\"}),\" (Recycle Bin)\"]}),`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:\"GET_PERSONAl\"}),\" -\u003e \",(0,i.jsx)(e.strong,{children:\"CSIDL_MYDOCUMENTS\"}),\" (My Documents)\"]}),`\n`]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/bits-and-bytes-analyzing-bitsloth/image10.png\",alt:\"File listing parameters via BITSLOTH\",width:\"646\",height:\"566\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"BITSLOTH also has the ability to collect entire directory/file listings on the machine for every file by using the Windows \",(0,i.jsx)(e.a,{href:\"https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/tree\",rel:\"nofollow\",children:\"tree\"}),\" utility. This handler loops across the alphabet for each drive letter where the data is then saved locally in a temporary file named \",(0,i.jsx)(e.code,{children:\"aghzyxklg\"}),\".\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/bits-and-bytes-analyzing-bitsloth/image1.png\",alt:\"Tree listing via BITSLOTH\",width:\"1087\",height:\"451\"})}),`\n`,(0,i.jsx)(e.p,{children:\"The tree data is then compressed and sent to the C2 server with a .ZIP extension. Below is an example of the collected data. This data can help pinpoint sensitive files or provide more context about the target environment.\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/bits-and-bytes-analyzing-bitsloth/image5.png\",alt:\"Example of data collected through GetDirectoryTree handler\",width:\"622\",height:\"267\"})}),`\n`,(0,i.jsx)(e.h4,{id:\"collection\",children:\"Collection\"}),`\n`,(0,i.jsx)(e.p,{children:\"In terms of collection, there are a few handlers used for actively gathering information. These are centered around capturing screenshots from the desktop and performing keylogging functionality.\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"BITSLOTH implements a lightweight function used to identify capture recording devices, this appears to be a technique to check for a camera using the Windows API (\",(0,i.jsx)(e.strong,{children:\"capGetDriverDescriptionW\"}),\").\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/bits-and-bytes-analyzing-bitsloth/image30.png\",alt:\"Handler that records capture devices\",width:\"902\",height:\"345\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"BITSLOTH has the ability to take screenshots based on parameters provided by the operator. Input to this function uses a separator (\",(0,i.jsx)(e.code,{children:\"||\"}),\") where the operator provides the number of seconds of the capture interval and the capture count. The images are stored as BMP files with a hard coded name \",(0,i.jsx)(e.code,{children:\"ciakfjoab\"}),\" and compressed with the DEFLATE algorithm using a \",(0,i.jsx)(e.code,{children:\".ZIP\"}),\" archive. These timestamped zipped archives are then sent out to the C2 server.\"]}),`\n`,(0,i.jsxs)(e.p,{children:[\"The handler leverages common screenshot APIs such as \",(0,i.jsx)(e.strong,{children:\"CreateCompatibleBitmap\"}),\" and \",(0,i.jsx)(e.strong,{children:\"BitBlt\"}),\" from \",(0,i.jsx)(e.code,{children:\"Gdi32.dll\"}),\".\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/bits-and-bytes-analyzing-bitsloth/image32.png\",alt:\"BITSLOTH screen capture using Windows APIs\",width:\"1097\",height:\"732\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"For recording keystrokes, BITSLOTH uses traditional techniques by monitoring key presses using \",(0,i.jsx)(e.strong,{children:\"GetAsyncKeyState\"}),\"/\",(0,i.jsx)(e.strong,{children:\"GetKeyState\"}),\". The handler has an argument for the number of seconds to perform the keylogging. This data is also compressed in a \",(0,i.jsx)(e.code,{children:\".ZIP\"}),\" file and sent outbound to the C2 server.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/bits-and-bytes-analyzing-bitsloth/image8.png\",alt:\"Keylogger functionality inside BITSLOTH\",width:\"673\",height:\"331\"})}),`\n`,(0,i.jsx)(e.h4,{id:\"execution--maintenance\",children:\"Execution / Maintenance\"}),`\n`,(0,i.jsx)(e.p,{children:\"BITSLOTH has multiple capabilities around maintenace and file execution as well as standard backdoor functionalities such as:\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsxs)(e.li,{children:[\"Capability to execute files stand-alone via \",(0,i.jsx)(e.strong,{children:\"ShellExecuteW\"})]}),`\n`,(0,i.jsx)(e.li,{children:\"Windows terminal capability to execute commands and read data back via pipes\"}),`\n`,(0,i.jsx)(e.li,{children:\"Create directories, perform reboots, shutdown the machine, terminate processes\"}),`\n`,(0,i.jsx)(e.li,{children:\"Perform file upload and download between C2 server\"}),`\n`,(0,i.jsx)(e.li,{children:\"Modify BITSLOTH configuration such as communication modes, update C2 URL, turn off keylogging/screenshot features\"}),`\n`]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/bits-and-bytes-analyzing-bitsloth/image11.png\",alt:\"BITSLOTH\\u2019s CMD terminal\",width:\"1017\",height:\"682\"})}),`\n`,(0,i.jsx)(e.h2,{id:\"bitsloth-pivots\",children:\"BITSLOTH pivots\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"BITSLOTH appears to be actively deployed. We identified another BITSLOTH C2 server (\",(0,i.jsx)(e.code,{children:\"15.235.132[.]67\"}),\") using the same port (\",(0,i.jsx)(e.code,{children:\"8443\"}),\") with the same \",(0,i.jsx)(e.a,{href:\"https://www.shodan.io/search?query=ssl.cert.serial%3A253c1c0bbf58e1f509fc4468de462ed8872f81d9\",rel:\"nofollow\",children:\"SSL certificate\"}),\" used from our intrusion.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/bits-and-bytes-analyzing-bitsloth/image20.png\",alt:\"Shodan SSL certificate matches\",width:\"1440\",height:\"706\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"While it\\u2019s not exactly clear who\\u2019s behind BITSLOTH, there was a large amount of activity of VirusTotal uploads occurring on December 12, 2021. With around 67 uploads over 24 hours from one submitter (\",(0,i.jsx)(e.code,{children:\"1fcc35ea\"}),\"), we suspect someone linked to this project was validating detections, making modifications, and uploading different versions of BITSLOTH to VirusTotal. One sample was packed with VMProtect, others stripped of functionality, some uploads were debug builds, etc.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/bits-and-bytes-analyzing-bitsloth/image23.png\",alt:\"BITSLOTH - VirusTotal Submitter (1fcc35ea)\",width:\"653\",height:\"217\"})}),`\n`,(0,i.jsx)(e.p,{children:\"A lot of time has passed since then, but it is interesting seeing this family show up in a recent intrusion. Whatever the objective behind this malware, it's surprising that this family remained under the radar for so many years.\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/bits-and-bytes-analyzing-bitsloth/image3.png\",alt:\"Different PDB paths from BITSLOTH uploads\",width:\"773\",height:\"172\"})}),`\n`,(0,i.jsx)(e.h3,{id:\"ref-8747-through-mitre-attck\",children:\"REF 8747 through MITRE ATT\u0026CK\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"Elastic uses the \",(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/\",rel:\"nofollow\",children:\"MITRE ATT\u0026CK\"}),\" framework to document common tactics, techniques, and procedures that advanced persistent threats use against enterprise networks.\"]}),`\n`,(0,i.jsx)(e.p,{children:`[h4] Tactics\nTactics represent the why of a technique or sub-technique. It is the adversary\\u2019s tactical goal: the reason for performing an action.`}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/tactics/TA0009/\",rel:\"nofollow\",children:\"Collection\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/tactics/TA0011/\",rel:\"nofollow\",children:\"Command and Control\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/tactics/TA0007/\",rel:\"nofollow\",children:\"Discovery\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/tactics/TA0002/\",rel:\"nofollow\",children:\"Execution\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/tactics/TA0010/\",rel:\"nofollow\",children:\"Exfiltration\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/tactics/TA0003/\",rel:\"nofollow\",children:\"Persistence\"})}),`\n`]}),`\n`,(0,i.jsx)(e.h4,{id:\"techniques\",children:\"Techniques\"}),`\n`,(0,i.jsx)(e.p,{children:\"Techniques represent how an adversary achieves a tactical goal by performing an action.\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1197/\",rel:\"nofollow\",children:\"BITS Jobs\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1082/\",rel:\"nofollow\",children:\"System Information Discovery\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1574/002/\",rel:\"nofollow\",children:\"Hijack Execution Flow: DLL Side-Loading\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1113/\",rel:\"nofollow\",children:\"Screen Capture\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1056/001/\",rel:\"nofollow\",children:\"Input Capture: Keylogging\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1090/\",rel:\"nofollow\",children:\"Proxy\"})}),`\n`]}),`\n`,(0,i.jsx)(e.h2,{id:\"detecting-ref8747\",children:\"Detecting REF8747\"}),`\n`,(0,i.jsx)(e.h3,{id:\"detection\",children:\"Detection\"}),`\n`,(0,i.jsx)(e.p,{children:\"The following detection rules and behavior prevention events were observed throughout the analysis of this intrusion set:\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/endpoint-rules/blob/0f01f1a9e2ac08e9ead74cafd4d73cb8166f9fc8/rules/windows/persistence_execution_via_bits_setnotifycmdline_method.toml\",rel:\"nofollow\",children:\"Persistence via BITS Job Notify Cmdline\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/main/behavior/rules/windows/credential_access_lsass_access_attempt_via_ppl_bypass.toml\",rel:\"nofollow\",children:\"LSASS Access Attempt via PPL Bypass\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/main/behavior/rules/windows/credential_access_lsass_access_attempt_from_an_unsigned_executable.toml\",rel:\"nofollow\",children:\"LSASS Access Attempt from an Unsigned Executable\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/main/behavior/rules/windows/defense_evasion_suspicious_parent_child_relationship.toml\",rel:\"nofollow\",children:\"Suspicious Parent-Child Relationship\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/main/behavior/rules/windows/credential_access_credential_access_via_known_utilities.toml\",rel:\"nofollow\",children:\"Credential Access via Known Utilities\"})}),`\n`,(0,i.jsx)(e.li,{children:\"Shellcode Injection\"}),`\n`]}),`\n`,(0,i.jsx)(e.h4,{id:\"yara-signatures\",children:\"YARA Signatures\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Windows_Hacktool_Mimikatz.yar\",rel:\"nofollow\",children:\"Windows.Hacktool.Mimikatz\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Windows_Trojan_BITSloth.yar\",rel:\"nofollow\",children:\"Windows.Trojan.BITSloth\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Windows_Hacktool_Iox.yar\",rel:\"nofollow\",children:\"Windows.Hacktool.Iox\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Windows_Hacktool_Rubeus.yar\",rel:\"nofollow\",children:\"Windows.Hacktool.Rubeus\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Windows_Hacktool_Certify.yar\",rel:\"nofollow\",children:\"Windows.Hacktool.Certify\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Windows_Hacktool_RingQ.yar\",rel:\"nofollow\",children:\"Windows.Hacktool.RingQ\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Windows_Hacktool_GodPotato.yar\",rel:\"nofollow\",children:\"Windows.Hacktool.GodPotato\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Multi_Hacktool_Stowaway.yar\",rel:\"nofollow\",children:\"Multi.Hacktool.Stowaway\"})}),`\n`]}),`\n`,(0,i.jsx)(e.h4,{id:\"yara\",children:\"YARA\"}),`\n`,(0,i.jsx)(e.p,{children:\"Elastic Security has created YARA rules to identify this activity. Below are YARA rules to identify BITSLOTH:\"}),`\n`,(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:`rule Windows_Trojan_BITSLOTH_05fc3a0a {\n    meta:\n        author = \"Elastic Security\"\n        creation_date = \"2024-07-16\"\n        last_modified = \"2024-07-18\"\n        os = \"Windows\"\n        arch = \"x86\"\n        threat_name = \"Windows.Trojan.BITSLOTH\"\n  \t license = \"Elastic License v2\"\n\n    strings:\n        $str_1 = \"/%s/index.htm?RspID=%d\" wide fullword\n        $str_2 = \"/%s/%08x.rpl\" wide fullword\n        $str_3 = \"/%s/wu.htm\" wide fullword\n        $str_4 = \"GET_DESKDOP\" wide fullword\n        $str_5 = \"http://updater.microsoft.com/index.aspx\" wide fullword\n        $str_6 = \"[U] update error...\" wide fullword\n        $str_7 = \"RMC_KERNEL ...\" wide fullword\n        $seq_global_protocol_check = { 81 3D ?? ?? ?? ?? F9 03 00 00 B9 AC 0F 00 00 0F 46 C1 }\n        $seq_exit_windows = { 59 85 C0 0F 84 ?? ?? ?? ?? E9 ?? ?? ?? ?? 6A 02 EB ?? 56 EB }\n    condition:\n        2 of them\n}\n`})}),`\n`,(0,i.jsx)(e.h2,{id:\"observations\",children:\"Observations\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"All observables are also available for \",(0,i.jsx)(e.a,{href:\"https://github.com/elastic/labs-releases/tree/main/indicators/bitsloth\",rel:\"nofollow\",children:\"download\"}),\" in both ECS and STIX format in a combined zip bundle.\"]}),`\n`,(0,i.jsx)(e.p,{children:\"The following observables were discussed in this research.\"}),`\n`,(0,i.jsx)(e.div,{className:\"table-container\",children:(0,i.jsxs)(e.table,{children:[(0,i.jsx)(e.thead,{children:(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.th,{children:\"Observable\"}),(0,i.jsx)(e.th,{children:\"Type\"}),(0,i.jsx)(e.th,{children:\"Name\"}),(0,i.jsx)(e.th,{children:\"Reference\"})]})}),(0,i.jsxs)(e.tbody,{children:[(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:\"4a4356faad620bf12ff53bcfac62e12eb67783bd22e66bf00a19a4c404bf45df\"}),(0,i.jsx)(e.td,{children:\"SHA-256\"}),(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"s.dll\"})}),(0,i.jsx)(e.td,{children:\"BITSLOTH\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:\"dfb76bcf5a3e29225559ebbdae8bdd24f69262492eca2f99f7a9525628006d88\"}),(0,i.jsx)(e.td,{children:\"SHA-256\"}),(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"125.exe\"})}),(0,i.jsx)(e.td,{children:\"BITSLOTH\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:\"4fb6dd11e723209d12b2d503a9fcf94d8fed6084aceca390ac0b7e7da1874f50\"}),(0,i.jsx)(e.td,{children:\"SHA-256\"}),(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"setup_wm.exe\"})}),(0,i.jsx)(e.td,{children:\"BITSLOTH\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:\"0944b17a4330e1c97600f62717d6bae7e4a4260604043f2390a14c8d76ef1507\"}),(0,i.jsx)(e.td,{children:\"SHA-256\"}),(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"1242.exe\"})}),(0,i.jsx)(e.td,{children:\"BITSLOTH\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:\"0f9c0d9b77678d7360e492e00a7fa00af9b78331dc926b0747b07299b4e64afd\"}),(0,i.jsx)(e.td,{children:\"SHA-256\"}),(0,i.jsx)(e.td,{children:(0,i.jsx)(e.code,{children:\"setup_wm.exe\"})}),(0,i.jsx)(e.td,{children:\"BITSLOTH (VMProtect)\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:\"216.238.121[.]132\"}),(0,i.jsx)(e.td,{children:\"ipv4-addr\"}),(0,i.jsx)(e.td,{children:\"BITSLOTH C2 server\"}),(0,i.jsx)(e.td,{})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:\"45.116.13[.]178\"}),(0,i.jsx)(e.td,{children:\"ipv4-addr\"}),(0,i.jsx)(e.td,{children:\"BITSLOTH C2 server\"}),(0,i.jsx)(e.td,{})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:\"15.235.132[.]67\"}),(0,i.jsx)(e.td,{children:\"ipv4-addr\"}),(0,i.jsx)(e.td,{children:\"BITSLOTH C2 server\"}),(0,i.jsx)(e.td,{})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:\"http ://updater.microsoft.com/index.aspx\"}),(0,i.jsx)(e.td,{}),(0,i.jsx)(e.td,{}),(0,i.jsx)(e.td,{children:\"BITSLOTH file indicator\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:\"updater.microsoft.com\"}),(0,i.jsx)(e.td,{}),(0,i.jsx)(e.td,{}),(0,i.jsx)(e.td,{children:\"BITSLOTH file indicator\"})]})]})]})}),`\n`,(0,i.jsx)(e.h2,{id:\"references\",children:\"References\"}),`\n`,(0,i.jsx)(e.p,{children:\"The following were referenced throughout the above research:\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/SafeBreach-Labs/SimpleBITSServer/tree/master\",rel:\"nofollow\",children:\"https://github.com/SafeBreach-Labs/SimpleBITSServer/tree/master\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/T4y1oR/RingQ\",rel:\"nofollow\",children:\"https://github.com/T4y1oR/RingQ\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/EddieIvan01/iox\",rel:\"nofollow\",children:\"https://github.com/EddieIvan01/iox\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/ph4ntonn/Stowaway/\",rel:\"nofollow\",children:\"https://github.com/ph4ntonn/Stowaway/\"})}),`\n`]}),`\n`,(0,i.jsx)(e.h2,{id:\"about-elastic-security-labs\",children:\"About Elastic Security Labs\"}),`\n`,(0,i.jsx)(e.p,{children:\"Elastic Security Labs is the threat intelligence branch of Elastic Security dedicated to creating positive change in the threat landscape. Elastic Security Labs provides publicly available research on emerging threats with an analysis of strategic, operational, and tactical adversary objectives, then integrates that research with the built-in detection and response capabilities of Elastic Security.\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"Follow Elastic Security Labs on Twitter \",(0,i.jsx)(e.a,{href:\"https://twitter.com/elasticseclabs?ref_src=twsrc%5Egoogle%7Ctwcamp%5Eserp%7Ctwgr%5Eauthor\",rel:\"nofollow\",children:\"@elasticseclabs\"}),\" and check out our research at \",(0,i.jsx)(e.a,{href:\"https://www.elastic.co/security-labs/\",rel:\"nofollow\",children:\"www.elastic.co/security-labs/\"}),\".\"]})]})}function v(t={}){let{wrapper:e}=t.components||{};return e?(0,i.jsx)(e,Object.assign({},t,{children:(0,i.jsx)(c,t)})):c(t)}var S=v;return y(I);})();\n;return Component;"},"_id":"articles/bits-and-bytes-analyzing-bitsloth.mdx","_raw":{"sourceFilePath":"articles/bits-and-bytes-analyzing-bitsloth.mdx","sourceFileName":"bits-and-bytes-analyzing-bitsloth.mdx","sourceFileDir":"articles","contentType":"mdx","flattenedPath":"articles/bits-and-bytes-analyzing-bitsloth"},"type":"Article","imageUrl":"/assets/images/bits-and-bytes-analyzing-bitsloth/Security Labs Images 29.jpg","readingTime":"19 min read","series":"","url":"/bits-and-bytes-analyzing-bitsloth","headings":[{"level":2,"title":"BITSLOTH at a glance","href":"#bitsloth-at-a-glance"},{"level":3,"title":"Key takeaways","href":"#key-takeaways"},{"level":2,"title":"Discovery","href":"#discovery"},{"level":4,"title":"BITSLOTH overview","href":"#bitsloth-overview"},{"level":2,"title":"BITSLOTH code analysis","href":"#bitsloth-code-analysis"},{"level":3,"title":"Mutex","href":"#mutex"},{"level":3,"title":"Communication","href":"#communication"},{"level":3,"title":"Command functionality","href":"#command-functionality"},{"level":3,"title":"Command handling table","href":"#command-handling-table"},{"level":3,"title":"Backdoor functionality","href":"#backdoor-functionality"},{"level":4,"title":"Discovery/enumeration","href":"#discoveryenumeration"},{"level":4,"title":"Collection","href":"#collection"},{"level":4,"title":"Execution / Maintenance","href":"#execution--maintenance"},{"level":2,"title":"BITSLOTH pivots","href":"#bitsloth-pivots"},{"level":3,"title":"REF 8747 through MITRE ATT\u0026CK","href":"#ref-8747-through-mitre-attck"},{"level":4,"title":"Techniques","href":"#techniques"},{"level":2,"title":"Detecting REF8747","href":"#detecting-ref8747"},{"level":3,"title":"Detection","href":"#detection"},{"level":4,"title":"YARA Signatures","href":"#yara-signatures"},{"level":4,"title":"YARA","href":"#yara"},{"level":2,"title":"Observations","href":"#observations"},{"level":2,"title":"References","href":"#references"},{"level":2,"title":"About Elastic Security Labs","href":"#about-elastic-security-labs"}],"author":[{"title":"Seth Goodwin","slug":"seth-goodwin","description":"Elastic","body":{"raw":"","code":"var Component=(()=\u003e{var x=Object.create;var s=Object.defineProperty;var d=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,l=Object.prototype.hasOwnProperty;var _=(t,n)=\u003e()=\u003e(n||t((n={exports:{}}).exports,n),n.exports),j=(t,n)=\u003e{for(var e in n)s(t,e,{get:n[e],enumerable:!0})},a=(t,n,e,i)=\u003e{if(n\u0026\u0026typeof n==\"object\"||typeof n==\"function\")for(let r of f(n))!l.call(t,r)\u0026\u0026r!==e\u0026\u0026s(t,r,{get:()=\u003en[r],enumerable:!(i=d(n,r))||i.enumerable});return t};var p=(t,n,e)=\u003e(e=t!=null?x(g(t)):{},a(n||!t||!t.__esModule?s(e,\"default\",{value:t,enumerable:!0}):e,t)),h=t=\u003ea(s({},\"__esModule\",{value:!0}),t);var u=_((X,c)=\u003e{c.exports=_jsx_runtime});var D={};j(D,{default:()=\u003eC,frontmatter:()=\u003ew});var o=p(u()),w={title:\"Seth Goodwin\",description:\"Elastic\",slug:\"seth-goodwin\"};function m(t){return(0,o.jsx)(o.Fragment,{})}function M(t={}){let{wrapper:n}=t.components||{};return n?(0,o.jsx)(n,Object.assign({},t,{children:(0,o.jsx)(m,t)})):m(t)}var C=M;return h(D);})();\n;return Component;"},"_id":"authors/seth-goodwin.mdx","_raw":{"sourceFilePath":"authors/seth-goodwin.mdx","sourceFileName":"seth-goodwin.mdx","sourceFileDir":"authors","contentType":"mdx","flattenedPath":"authors/seth-goodwin"},"type":"Author","imageUrl":"","url":"/authors/seth-goodwin"},{"title":"Daniel Stepanic","slug":"daniel-stepanic","description":"Elastic","body":{"raw":"","code":"var Component=(()=\u003e{var m=Object.create;var i=Object.defineProperty;var x=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var d=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var _=(t,n)=\u003e()=\u003e(n||t((n={exports:{}}).exports,n),n.exports),g=(t,n)=\u003e{for(var e in n)i(t,e,{get:n[e],enumerable:!0})},s=(t,n,e,o)=\u003e{if(n\u0026\u0026typeof n==\"object\"||typeof n==\"function\")for(let a of p(n))!f.call(t,a)\u0026\u0026a!==e\u0026\u0026i(t,a,{get:()=\u003en[a],enumerable:!(o=x(n,a))||o.enumerable});return t};var j=(t,n,e)=\u003e(e=t!=null?m(d(t)):{},s(n||!t||!t.__esModule?i(e,\"default\",{value:t,enumerable:!0}):e,t)),D=t=\u003es(i({},\"__esModule\",{value:!0}),t);var u=_((h,c)=\u003e{c.exports=_jsx_runtime});var X={};g(X,{default:()=\u003eF,frontmatter:()=\u003eM});var r=j(u()),M={title:\"Daniel Stepanic\",description:\"Elastic\",slug:\"daniel-stepanic\"};function l(t){return(0,r.jsx)(r.Fragment,{})}function C(t={}){let{wrapper:n}=t.components||{};return n?(0,r.jsx)(n,Object.assign({},t,{children:(0,r.jsx)(l,t)})):l(t)}var F=C;return D(X);})();\n;return Component;"},"_id":"authors/daniel-stepanic.mdx","_raw":{"sourceFilePath":"authors/daniel-stepanic.mdx","sourceFileName":"daniel-stepanic.mdx","sourceFileDir":"authors","contentType":"mdx","flattenedPath":"authors/daniel-stepanic"},"type":"Author","imageUrl":"","url":"/authors/daniel-stepanic"}],"category":[{"title":"Malware analysis","slug":"malware-analysis","body":{"raw":"","code":"var Component=(()=\u003e{var u=Object.create;var s=Object.defineProperty;var x=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var _=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var j=(t,n)=\u003e()=\u003e(n||t((n={exports:{}}).exports,n),n.exports),M=(t,n)=\u003e{for(var e in n)s(t,e,{get:n[e],enumerable:!0})},i=(t,n,e,o)=\u003e{if(n\u0026\u0026typeof n==\"object\"||typeof n==\"function\")for(let r of f(n))!g.call(t,r)\u0026\u0026r!==e\u0026\u0026s(t,r,{get:()=\u003en[r],enumerable:!(o=x(n,r))||o.enumerable});return t};var d=(t,n,e)=\u003e(e=t!=null?u(_(t)):{},i(n||!t||!t.__esModule?s(e,\"default\",{value:t,enumerable:!0}):e,t)),p=t=\u003ei(s({},\"__esModule\",{value:!0}),t);var l=j((X,c)=\u003e{c.exports=_jsx_runtime});var D={};M(D,{default:()=\u003eC,frontmatter:()=\u003ew});var a=d(l()),w={title:\"Malware analysis\",slug:\"malware-analysis\"};function m(t){return(0,a.jsx)(a.Fragment,{})}function y(t={}){let{wrapper:n}=t.components||{};return n?(0,a.jsx)(n,Object.assign({},t,{children:(0,a.jsx)(m,t)})):m(t)}var C=y;return p(D);})();\n;return Component;"},"_id":"categories/malware-analysis.mdx","_raw":{"sourceFilePath":"categories/malware-analysis.mdx","sourceFileName":"malware-analysis.mdx","sourceFileDir":"categories","contentType":"mdx","flattenedPath":"categories/malware-analysis"},"type":"Category","url":"/categories/malware-analysis"}]},"seriesArticles":null},"__N_SSG":true},"page":"/[slug]","query":{"slug":"bits-and-bytes-analyzing-bitsloth"},"buildId":"dGrrQfBbQkqaleQ_11aBK","assetPrefix":"/security-labs","isFallback":false,"gsp":true,"scriptLoader":[]}</script></body></html>