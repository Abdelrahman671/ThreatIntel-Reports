<!DOCTYPE html>
<html lang="en-GB">

  <head>
    <!-- General meta -->
    <meta name="viewport" content="width=device-width, initial-scale=1">

    

    
      <!-- Begin Jekyll SEO tag v2.8.0 -->
<title>Diavol Ransomware | Chuong Dong</title>
<meta name="generator" content="Jekyll v3.9.5" />
<meta property="og:title" content="Diavol Ransomware" />
<meta name="author" content="Chuong Dong" />
<meta property="og:locale" content="en_GB" />
<meta name="description" content="Malware Analysis Report - Diavol Ransomware" />
<meta property="og:description" content="Malware Analysis Report - Diavol Ransomware" />
<link rel="canonical" href="https://cdong1012.github.io//reverse%20engineering/2021/12/17/DiavolRansomware/" />
<meta property="og:url" content="https://cdong1012.github.io//reverse%20engineering/2021/12/17/DiavolRansomware/" />
<meta property="og:site_name" content="Chuong Dong" />
<meta property="og:image" content="https://cdong1012.github.io//assets/logos/kunal-logo.png" />
<meta property="og:type" content="article" />
<meta property="article:published_time" content="2021-12-17T00:00:00-05:00" />
<meta name="twitter:card" content="summary_large_image" />
<meta property="twitter:image" content="https://cdong1012.github.io//assets/logos/kunal-logo.png" />
<meta property="twitter:title" content="Diavol Ransomware" />
<meta name="twitter:site" content="@cPeterr" />
<meta name="twitter:creator" content="@Chuong Dong" />
<script type="application/ld+json">
{"@context":"https://schema.org","@type":"BlogPosting","author":{"@type":"Person","name":"Chuong Dong"},"dateModified":"2021-12-17T00:00:00-05:00","datePublished":"2021-12-17T00:00:00-05:00","description":"Malware Analysis Report - Diavol Ransomware","headline":"Diavol Ransomware","image":"https://cdong1012.github.io//assets/logos/kunal-logo.png","mainEntityOfPage":{"@type":"WebPage","@id":"https://cdong1012.github.io//reverse%20engineering/2021/12/17/DiavolRansomware/"},"publisher":{"@type":"Organization","logo":{"@type":"ImageObject","url":"https://cdong1012.github.io//assets/logos/logo-cdong.gif"},"name":"Chuong Dong"},"url":"https://cdong1012.github.io//reverse%20engineering/2021/12/17/DiavolRansomware/"}</script>
<!-- End Jekyll SEO tag -->

    

    <link rel="manifest" href="/manifest.json">
    <meta name="theme-color" content="#242e2b"/>

    
      
<style>/*! normalize.css v4.1.1 | MIT License | github.com/necolas/normalize.css */@import url("https://fonts.googleapis.com/css?family=Karla:700,700");@import url("https://fonts.googleapis.com/css?family=Space Mono:400,700");html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}article,aside,details,figcaption,figure,footer,header,main,menu,nav,section,summary{display:block}audio,canvas,progress,video{display:inline-block}audio:not([controls]){display:none;height:0}progress{vertical-align:baseline}template,[hidden]{display:none}a{background-color:transparent;-webkit-text-decoration-skip:objects}a:active,a:hover{outline-width:0}abbr[title]{border-bottom:none;text-decoration:underline;text-decoration:underline dotted}b,strong{font-weight:inherit}b,strong{font-weight:bolder}dfn{font-style:italic}h1{font-size:2em;margin:0.67em 0}mark{background-color:#ff0;color:#000}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-0.25em}sup{top:-0.5em}img{border-style:none}svg:not(:root){overflow:hidden}code,kbd,pre,samp{font-family:monospace, monospace;font-size:1em}figure{margin:1em 40px}hr{box-sizing:content-box;height:0;overflow:visible}button,input,select,textarea{font:inherit;margin:0}optgroup{font-weight:bold}button,input{overflow:visible}button,select{text-transform:none}button,html [type="button"],[type="reset"],[type="submit"]{-webkit-appearance:button}button::-moz-focus-inner,[type="button"]::-moz-focus-inner,[type="reset"]::-moz-focus-inner,[type="submit"]::-moz-focus-inner{border-style:none;padding:0}button:-moz-focusring,[type="button"]:-moz-focusring,[type="reset"]:-moz-focusring,[type="submit"]:-moz-focusring{outline:1px dotted ButtonText}fieldset{border:1px solid #c0c0c0;margin:0 2px;padding:0.35em 0.625em 0.75em}legend{box-sizing:border-box;color:inherit;display:table;max-width:100%;padding:0;white-space:normal}textarea{overflow:auto}[type="checkbox"],[type="radio"]{box-sizing:border-box;padding:0}[type="number"]::-webkit-inner-spin-button,[type="number"]::-webkit-outer-spin-button{height:auto}[type="search"]{-webkit-appearance:textfield;outline-offset:-2px}[type="search"]::-webkit-search-cancel-button,[type="search"]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-input-placeholder{color:inherit;opacity:0.54}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}*{box-sizing:border-box}html,body,div,span,applet,object,iframe,h1,h2,h3,h4,h5,h6,p,blockquote,pre,a,abbr,acronym,address,big,cite,code,del,dfn,em,img,ins,kbd,q,s,samp,small,strike,strong,sub,sup,tt,var,b,u,i,center,dl,dt,dd,ol,ul,li,fieldset,form,label,legend,table,caption,tbody,tfoot,thead,tr,th,td,article,aside,canvas,details,embed,figure,figcaption,footer,header,hgroup,menu,nav,output,ruby,section,summary,time,mark,audio,video{margin:0;padding:0;border:0;font-size:100%;font:inherit;vertical-align:baseline}article,aside,details,figcaption,figure,footer,header,hgroup,menu,nav,section{display:block}html,body{height:100%}a img{border:none}blockquote{quotes:none}blockquote:before,blockquote:after{content:'';content:none}table{border-collapse:collapse;border-spacing:0}caption,th,td{text-align:left;font-weight:normal;vertical-align:middle}html{font-size:75%;-webkit-text-size-adjust:100%;-ms-text-size-adjust:100%}@media screen and (min-width: 40em){html{font-size:87.5%}}@media screen and (min-width: 50em){html{font-size:93.75%}}@media screen and (min-width: 64em){html{font-size:106.25%}}@media screen and (min-width: 100em){html{font-size:118.75%}}body{font-size:1.3333333333rem;font-family:Space Mono, monospace;font-style:normal;font-weight:400;line-height:2rem}@media screen and (min-width: 40em){body{font-size:1.2142857143rem}}@media screen and (min-width: 50em){body{font-size:1.2rem}}@media screen and (min-width: 64em){body{font-size:1.1764705882rem}}@media screen and (min-width: 100em){body{font-size:1.1578947368rem}}a{color:#45a29e;text-decoration:none;transition:color .1s, background-color .1s}a:hover,a:active,a:focus{color:#66fcf1;text-decoration:none}.typeset p a,.typeset li a{background-image:linear-gradient(to bottom, transparent 50%, #45a29e 50%);background-position:0 93%;background-repeat:repeat-x;background-size:100% 0.15rem;text-shadow:0.1rem 0 #161820,0.15rem 0 #161820,-0.1rem 0 #161820,-0.15rem 0 #161820}.typeset p a:hover,.typeset p a:active,.typeset p a:focus,.typeset li a:hover,.typeset li a:active,.typeset li a:focus{background-image:linear-gradient(to bottom, transparent 50%, #66fcf1 50%)}.typeset p{line-height:2rem;margin-bottom:1.49999rem;padding-top:.50001rem;font-feature-settings:'kern', 'onum', 'liga'}@media screen and (min-width: 40em){.typeset p{margin-bottom:1.4553471429rem;padding-top:.5446528571rem}}@media screen and (min-width: 50em){.typeset p{margin-bottom:1.44999rem;padding-top:.55001rem}}@media screen and (min-width: 64em){.typeset p{margin-bottom:1.4411664706rem;padding-top:.5588335294rem}}@media screen and (min-width: 100em){.typeset p{margin-bottom:1.4342005263rem;padding-top:.5657994737rem}}.typeset h1,.typeset h2,.typeset h3,.typeset h4,.typeset h5,.typeset h6{color:#66fcf1;font-family:"Karla", monospace;font-feature-settings:'dlig', 'liga', 'lnum', 'kern';font-style:normal;font-weight:700}.typeset h1,.typeset .alpha{line-height:3rem;font-size:2.3333333333rem;margin-bottom:.37499rem;padding-top:.62501rem}@media screen and (min-width: 40em){.typeset h1,.typeset .alpha{font-size:2.1428571429rem;margin-bottom:.3035614286rem;padding-top:.6964385714rem}}@media screen and (min-width: 50em){.typeset h1,.typeset .alpha{font-size:2.1333333333rem;margin-bottom:.29999rem;padding-top:.70001rem}}@media screen and (min-width: 64em){.typeset h1,.typeset .alpha{font-size:2.3529411765rem;margin-bottom:.3823429412rem;padding-top:.6176570588rem}}@media screen and (min-width: 100em){.typeset h1,.typeset .alpha{font-size:2.6315789474rem;margin-bottom:.4868321053rem;padding-top:.5131678947rem}}.typeset h2,.typeset .beta{line-height:3rem;font-size:2.0833333333rem;margin-bottom:.28124rem;padding-top:.71876rem}@media screen and (min-width: 40em){.typeset h2,.typeset .beta{font-size:1.9rem;margin-bottom:.21249rem;padding-top:.78751rem}}@media screen and (min-width: 50em){.typeset h2,.typeset .beta{font-size:1.8733333333rem;margin-bottom:.20249rem;padding-top:.79751rem}}@media screen and (min-width: 64em){.typeset h2,.typeset .beta{font-size:2.0882352941rem;margin-bottom:.2830782353rem;padding-top:.7169217647rem}}@media screen and (min-width: 100em){.typeset h2,.typeset .beta{font-size:2.3105263158rem;margin-bottom:.3664373684rem;padding-top:.6335626316rem}}.typeset h3,.typeset .gamma{line-height:3rem;font-size:1.8666666667rem;margin-bottom:.19999rem;padding-top:.80001rem}@media screen and (min-width: 40em){.typeset h3,.typeset .gamma{font-size:1.7142857143rem;margin-bottom:.1428471429rem;padding-top:.8571528571rem}}@media screen and (min-width: 50em){.typeset h3,.typeset .gamma{font-size:1.7066666667rem;margin-bottom:.13999rem;padding-top:.86001rem}}@media screen and (min-width: 64em){.typeset h3,.typeset .gamma{font-size:1.7647058824rem;margin-bottom:.1617547059rem;padding-top:.8382452941rem}}@media screen and (min-width: 100em){.typeset h3,.typeset .gamma{font-size:1.8578947368rem;margin-bottom:.1967005263rem;padding-top:.8032994737rem}}.typeset h4,.typeset .delta{line-height:2rem;font-size:1.6666666667rem;margin-bottom:-.37501rem;padding-top:.37501rem}@media screen and (min-width: 40em){.typeset h4,.typeset .delta{font-size:1.5214285714rem;margin-bottom:-.4294742857rem;padding-top:.4294742857rem}}@media screen and (min-width: 50em){.typeset h4,.typeset .delta{font-size:1.5rem;margin-bottom:-.43751rem;padding-top:.43751rem}}@media screen and (min-width: 64em){.typeset h4,.typeset .delta{font-size:1.5705882353rem;margin-bottom:-.4110394118rem;padding-top:.4110394118rem}}@media screen and (min-width: 100em){.typeset h4,.typeset .delta{font-size:1.6368421053rem;margin-bottom:-.3861942105rem;padding-top:.3861942105rem}}.typeset h5,.typeset .epsilon{line-height:2rem;font-size:1.4916666667rem;margin-bottom:-.440635rem;padding-top:.440635rem}@media screen and (min-width: 40em){.typeset h5,.typeset .epsilon{font-size:1.3714285714rem;margin-bottom:-.4857242857rem;padding-top:.4857242857rem}}@media screen and (min-width: 50em){.typeset h5,.typeset .epsilon{font-size:1.3666666667rem;margin-bottom:-.48751rem;padding-top:.48751rem}}@media screen and (min-width: 64em){.typeset h5,.typeset .epsilon{font-size:1.3235294118rem;margin-bottom:-.5036864706rem;padding-top:.5036864706rem}}@media screen and (min-width: 100em){.typeset h5,.typeset .epsilon{font-size:1.3157894737rem;margin-bottom:-.5065889474rem;padding-top:.5065889474rem}}.typeset h6,.typeset .zeta{line-height:2rem;font-size:1.3333333333rem;margin-bottom:-.50001rem;padding-top:.50001rem}@media screen and (min-width: 40em){.typeset h6,.typeset .zeta{font-size:1.2142857143rem;margin-bottom:-.5446528571rem;padding-top:.5446528571rem}}@media screen and (min-width: 50em){.typeset h6,.typeset .zeta{font-size:1.2rem;margin-bottom:-.55001rem;padding-top:.55001rem}}@media screen and (min-width: 64em){.typeset h6,.typeset .zeta{font-size:1.1764705882rem;margin-bottom:-.5588335294rem;padding-top:.5588335294rem}}@media screen and (min-width: 100em){.typeset h6,.typeset .zeta{font-size:1.1578947368rem;margin-bottom:-.5657994737rem;padding-top:.5657994737rem}}.typeset ul,.typeset ol{line-height:2rem;margin-bottom:1.49999rem;padding-top:.50001rem}@media screen and (min-width: 40em){.typeset ul,.typeset ol{margin-bottom:1.4553471429rem;padding-top:.5446528571rem}}@media screen and (min-width: 50em){.typeset ul,.typeset ol{margin-bottom:1.44999rem;padding-top:.55001rem}}@media screen and (min-width: 64em){.typeset ul,.typeset ol{margin-bottom:1.4411664706rem;padding-top:.5588335294rem}}@media screen and (min-width: 100em){.typeset ul,.typeset ol{margin-bottom:1.4342005263rem;padding-top:.5657994737rem}}.typeset ul li,.typeset ol li{font-feature-settings:'kern', 'onum', 'liga';margin-left:2rem}@media screen and (min-width: 40em){.typeset ul li,.typeset ol li{margin-left:0}}.typeset ul li ol,.typeset ul li ul,.typeset ol li ol,.typeset ol li ul{padding-top:1rem;margin-bottom:1rem;margin-left:2rem}.typeset ol{list-style-type:none}.typeset ol li{counter-increment:top-level}.typeset ol li:before{content:counter(top-level) ".";font-feature-settings:'lnum', 'tnum';margin-left:-3rem;position:absolute;text-align:right;width:2em}.typeset ol li ul li:before{content:''}.typeset ol li ul li ol li{counter-increment:alt-level}.typeset ol li ul li ol li:before{content:counter(alt-level) "."}.typeset ol li ol li{counter-increment:sub-level}.typeset ol li ol li:before{content:counter(top-level) "." counter(sub-level)}.typeset ol li ol li ul li:before{content:''}.typeset ol li ol li ol li{counter-increment:sub-sub-level}.typeset ol li ol li ol li:before{content:counter(top-level) "." counter(sub-level) "." counter(sub-sub-level)}.typeset dl{line-height:2rem;margin-bottom:1.49999rem;padding-top:.50001rem}@media screen and (min-width: 40em){.typeset dl{margin-bottom:1.4553471429rem;padding-top:.5446528571rem}}@media screen and (min-width: 50em){.typeset dl{margin-bottom:1.44999rem;padding-top:.55001rem}}@media screen and (min-width: 64em){.typeset dl{margin-bottom:1.4411664706rem;padding-top:.5588335294rem}}@media screen and (min-width: 100em){.typeset dl{margin-bottom:1.4342005263rem;padding-top:.5657994737rem}}.typeset dl dt,.typeset dl dd{font-feature-settings:'kern', 'onum', 'liga';margin-left:2rem}@media screen and (min-width: 40em){.typeset dl dt,.typeset dl dd{margin-left:0}}.typeset dl dt{font-weight:700}.typeset dl dd+dt{padding-top:1rem}.typeset table{line-height:2rem;font-size:1.1916666667rem;margin-bottom:-.553135rem;padding-top:.553135rem;font-family:"Karla", monospace;font-feature-settings:'liga', 'lnum', 'tnum', 'kern';font-style:normal;font-weight:400;width:100%}@media screen and (min-width: 40em){.typeset table{font-size:1.0928571429rem;margin-bottom:-.5901885714rem;padding-top:.5901885714rem}}@media screen and (min-width: 50em){.typeset table{font-size:1.0866666667rem;margin-bottom:-.59251rem;padding-top:.59251rem}}@media screen and (min-width: 64em){.typeset table{font-size:.9941176471rem;margin-bottom:-.6272158824rem;padding-top:.6272158824rem}}@media screen and (min-width: 100em){.typeset table{font-size:.9263157895rem;margin-bottom:-.6526415789rem;padding-top:.6526415789rem}}.typeset table thead th{line-height:2rem;font-size:1.3333333333rem;margin-bottom:-.50001rem;padding-top:.50001rem;padding-bottom:1px}@media screen and (min-width: 40em){.typeset table thead th{font-size:1.2142857143rem;margin-bottom:-.5446528571rem;padding-top:.5446528571rem}}@media screen and (min-width: 50em){.typeset table thead th{font-size:1.2rem;margin-bottom:-.55001rem;padding-top:.55001rem}}@media screen and (min-width: 64em){.typeset table thead th{font-size:1.1764705882rem;margin-bottom:-.5588335294rem;padding-top:.5588335294rem}}@media screen and (min-width: 100em){.typeset table thead th{font-size:1.1578947368rem;margin-bottom:-.5657994737rem;padding-top:.5657994737rem}}.typeset b,.typeset strong,.typeset .bold{font-weight:700}.typeset em,.typeset i,.typeset .italic{font-style:italic}.typeset small,.typeset .caption{font-size:1.0666666667rem;font-family:"Karla", monospace;font-style:normal;font-weight:400}@media screen and (min-width: 40em){.typeset small,.typeset .caption{font-size:.9714285714rem}}@media screen and (min-width: 50em){.typeset small,.typeset .caption{font-size:.96rem}}@media screen and (min-width: 64em){.typeset small,.typeset .caption{font-size:.8823529412rem}}@media screen and (min-width: 100em){.typeset small,.typeset .caption{font-size:.8210526316rem}}.typeset small{line-height:1rem}.typeset .caption{line-height:2rem;margin-bottom:1.39999rem;padding-top:.60001rem;color:#529e99}@media screen and (min-width: 40em){.typeset .caption{margin-bottom:1.3642757143rem;padding-top:.6357242857rem}}@media screen and (min-width: 50em){.typeset .caption{margin-bottom:1.35999rem;padding-top:.64001rem}}@media screen and (min-width: 64em){.typeset .caption{margin-bottom:1.3308723529rem;padding-top:.6691276471rem}}@media screen and (min-width: 100em){.typeset .caption{margin-bottom:1.3078847368rem;padding-top:.6921152632rem}}.typeset h1+.caption,.typeset .alpha+.caption,.typeset h2+.caption,.typeset .beta+.caption,.typeset h3+.caption,.typeset .gamma+.caption{margin-top:-1rem}.typeset .delta+.caption,.typeset .epsilon+.caption,.typeset .zeta+.caption{margin-top:0rem}.typeset blockquote p{border-left:0.15rem solid #45a29e;font-style:italic;padding-left:1rem;margin-bottom:1.99999rem;padding-bottom:.50001rem}@media screen and (min-width: 40em){.typeset blockquote p{margin-bottom:1.9107042857rem;padding-bottom:.5446528571rem}}@media screen and (min-width: 50em){.typeset blockquote p{margin-bottom:1.89999rem;padding-bottom:.55001rem}}@media screen and (min-width: 64em){.typeset blockquote p{margin-bottom:1.8823429412rem;padding-bottom:.5588335294rem}}@media screen and (min-width: 100em){.typeset blockquote p{margin-bottom:1.8684110526rem;padding-bottom:.5657994737rem}}@media screen and (min-width: 40em){.typeset blockquote{margin-left:-1rem}}.typeset hr{background-image:linear-gradient(to bottom, transparent 50%, #529e99 50%);background-position:0 50%;background-repeat:repeat-x;background-size:100% 0.15rem;border:0;margin:0;padding-bottom:3rem;padding-top:0.5rem}.typeset code,.typeset pre{background-color:#1f2833;font-family:Menlo, monospace}.typeset pre{display:block;margin-bottom:2rem;padding:1rem;white-space:pre;white-space:pre-wrap;word-break:break-all;word-wrap:break-word}.typeset code{font-size:1.0666666667rem;line-height:1rem}@media screen and (min-width: 40em){.typeset code{font-size:.9714285714rem}}@media screen and (min-width: 50em){.typeset code{font-size:.96rem}}@media screen and (min-width: 64em){.typeset code{font-size:.8823529412rem}}@media screen and (min-width: 100em){.typeset code{font-size:.8210526316rem}}.typeset .upper{font-kerning:normal;letter-spacing:0.1rem;text-transform:uppercase}.typeset .small-caps{font-feature-settings:'smcp', 'kern';font-kerning:normal;letter-spacing:0.1rem}.typeset .lining-numerals{font-feature-settings:'lnum', 'kern'}.typeset .oldstyle-numerals{font-feature-settings:'onum', 'kern'}.hll{background-color:#c510bc}.c{color:#54dbf3;font-style:italic}.err{color:#a61717;background-color:#e3d2d2}.k{color:#c59659;font-weight:bold}.o{color:#c59659;font-weight:bold}.cm{color:#999988;font-style:italic}.cp{color:#999999;font-weight:bold;font-style:italic}.c1{color:#999988;font-style:italic}.cs{color:#999999;font-weight:bold;font-style:italic}.gd{color:#000000;background-color:#fdd}.ge{color:#000000;font-style:italic}.gr{color:#a00}.gh{color:#999}.gi{color:#000000;background-color:#dfd}.go{color:#888}.gp{color:#555}.gs{font-weight:bold}.gu{color:#aaa}.gt{color:#a00}.kc{color:#000000;font-weight:bold}.kd{color:#000000;font-weight:bold}.kn{color:#000000;font-weight:bold}.kp{color:#000000;font-weight:bold}.kr{color:#000000;font-weight:bold}.kt{color:#445588;font-weight:bold}.m{color:#099}.s{color:#fce773}.na{color:teal}.nb{color:#0086B3}.nc{color:#445588;font-weight:bold}.no{color:teal}.nd{color:#3c5d5d;font-weight:bold}.ni{color:purple}.ne{color:#99b898;font-weight:bold}.nf{color:#99b898;font-weight:bold}.nl{color:#99b898;font-weight:bold}.nn{color:#555}.nt{color:#ff847c}.nv{color:teal}.ow{color:#000000;font-weight:bold}.w{color:#bbb}.mf{color:#099}.mh{color:#099}.mi{color:#099}.mo{color:#099}.sb{color:#fce773}.sc{color:#fce773}.sd{color:#fce773}.s2{color:#fce773}.se{color:#fce773}.sh{color:#fce773}.si{color:#773f00}.sx{color:#fce773}.sr{color:#009926}.s1{color:#ff847c}.ss{color:#990073}.bp{color:#999}.vc{color:#2e878a}.vg{color:#2e878a}.vi{color:#2e878a}.il{color:#099}body{background:#161820;color:#efeff0;height:100%;display:flex;-webkit-box-direction:normal;-webkit-box-orient:vertical;-webkit-flex-direction:column;-moz-flex-direction:column;-ms-flex-direction:column;flex-direction:column;overflow-x:hidden}.container{width:90%;max-width:1200px;margin:0 auto}.header .nav,.footer .nav{text-align:right}.header .logo,.footer .logo{-webkit-box-flex:0;-webkit-flex:0 0 auto;-moz-box-flex:0;-moz-flex:0 0 auto;-ms-flex:0 0 auto;flex:0 0 auto}.header .container,.footer .container{display:-webkit-box;display:-webkit-flex;display:-moz-flex;display:-ms-flexbox;display:flex;-webkit-box-direction:normal;-webkit-box-orient:horizontal;-webkit-flex-direction:row;-moz-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-box-pack:justify;-ms-flex-pack:justify;-webkit-justify-content:space-between;-moz-justify-content:space-between;justify-content:space-between;padding:1rem 0}@media screen and (min-width: 40em){.header .container,.footer .container{-webkit-box-align:center;-ms-flex-align:center;-webkit-align-items:center;-moz-align-items:center;align-items:center}}.header .nav{display:flex;flex-direction:column-reverse;align-items:flex-end;justify-content:flex-end;overflow:hidden}.feature{padding-bottom:.4rem;margin-bottom:1.6rem;text-align:center;background:#c5c6c7;background-size:cover;background-position:center}.feature .container{min-height:40vh;max-width:60%;-webkit-box-direction:normal;-webkit-box-orient:vertical;-webkit-flex-direction:column;-moz-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:center;-ms-flex-pack:center;-webkit-justify-content:center;-moz-justify-content:center;justify-content:center}.logo{display:inline-block;line-height:0;max-height:7rem;display:-webkit-box;display:-webkit-flex;display:-moz-flex;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;-webkit-align-items:center;-moz-align-items:center;align-items:center}.logo img{max-height:7rem}.nav a{padding:.2rem}.nav--social a{display:inline-block;line-height:1}.small{padding-top:.8rem;color:#529e99;display:inline-block}.footer{background:#161820;color:#529e99}.footer a{color:#529e99}.footer a:hover{color:#161820}.footer .container{-webkit-flex-wrap:wrap;-moz-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap}.footer .small{padding-top:0}.nav--paginator{display:-webkit-box;display:-webkit-flex;display:-moz-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:justify;-ms-flex-pack:justify;-webkit-justify-content:space-between;-moz-justify-content:space-between;justify-content:space-between;color:#529e99;text-align:center}.pagination{min-width:20%}.main{display:-webkit-box;display:-webkit-flex;display:-moz-flex;display:-ms-flexbox;display:flex;-webkit-box-direction:normal;-webkit-box-orient:vertical;-webkit-flex-direction:column;-moz-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-flex:1;-webkit-flex:1 0 auto;-moz-box-flex:1;-moz-flex:1 0 auto;-ms-flex:1 0 auto;flex:1 0 auto;-webkit-box-pack:start;-ms-flex-pack:start;-webkit-justify-content:flex-start;-moz-justify-content:flex-start;justify-content:flex-start;margin-bottom:1.6rem}@media screen and (min-width: 40em){.main{-webkit-box-pack:center;-ms-flex-pack:center;-webkit-justify-content:center;-moz-justify-content:center;justify-content:center;-webkit-box-direction:normal;-webkit-box-orient:horizontal;-webkit-flex-direction:row;-moz-flex-direction:row;-ms-flex-direction:row;flex-direction:row}}.header,.feature,.footer{-webkit-box-flex:0;-webkit-flex:0 0 auto;-moz-box-flex:0;-moz-flex:0 0 auto;-ms-flex:0 0 auto;flex:0 0 auto}@media screen and (min-width: 40em){.content{width:85%}}.share .button{margin-right:.3rem}@media screen and (min-width: 40em){.aside{max-width:20%;margin-left:5%;-webkit-box-flex:1;-webkit-flex:1 0 auto;-moz-box-flex:1;-moz-flex:1 0 auto;-ms-flex:1 0 auto;flex:1 0 auto;opacity:0.7;transition:opacity .1s}.aside .section{position:sticky;top:0}.aside--left{margin-left:0;margin-right:5%;order:-1}.aside:hover{opacity:1}}.section{margin:0}.list{list-style:none}.list--nav{overflow:hidden;margin-bottom:var(--listHeight, 0)}.list .item--post,.list .item--result,.list .item--category{margin-left:0}@media screen and (min-width: 40em){.item--nav{margin-left:.4rem;display:inline-block}}.item--nav:first-of-type{margin-left:0}.item--current a{color:#529e99}a .icon{transition:fill .1s}a .icon:hover{fill:currentColor}.icon{vertical-align:middle;width:1.1em;height:1.1em;fill:CurrentColor}img{max-width:100%;height:auto}.figure{line-height:0}.figure--left{float:left;padding-right:.8rem}.figure--right{float:right;text-align:right;padding-left:.8rem}.figure--center{text-align:center;clear:both}.video,.map{position:relative;padding-bottom:56.25%;height:0}.video iframe,.map iframe{position:absolute;top:0;left:0;width:100%;height:100%}.map{padding-bottom:70%}.figure,.video,.map,.form{margin-bottom:.8rem}audio,video{width:100%}.form{position:relative}.form__legend{font-style:italic;color:#529e99;position:absolute;overflow:hidden;right:0;clip:rect(0 0 0 0)}button,.button,input[type="text"],input[type="email"],input[type="search"],input[type="submit"],input[type="color"],textarea,select{padding:.6rem 1.2rem;margin-bottom:.6rem;transition:color .1s, background-color .1s, border .1s;line-height:inherit;border:none;box-shadow:none;border-radius:0;-webkit-appearance:none}button .icon,.button .icon,input[type="text"] .icon,input[type="email"] .icon,input[type="search"] .icon,input[type="submit"] .icon,input[type="color"] .icon,textarea .icon,select .icon{margin:0 0 .35rem}input[type="submit"],button,.button{cursor:pointer;display:inline-block;color:#161820;background:#45a29e;transition:box-shadow .1s;will-change:box-shadow;box-shadow:inset 0 0 0 2rem transparent}input[type="submit"]:hover,button:hover,.button:hover{box-shadow:inset 0 0 0 2rem rgba(0,0,0,0.25)}input[type="submit"]:active,input[type="submit"]:focus,button:active,button:focus,.button:active,.button:focus{box-shadow:inset 0 0 0 2rem rgba(0,0,0,0.25)}.button--nav{background:none;color:#45a29e;margin-bottom:0;min-height:4rem;min-width:4rem}@media screen and (min-width: 40em){.button--nav{display:none}}.button--nav:hover,.button--nav:focus{box-shadow:none;color:#66fcf1}a:focus,a:hover:focus,button:focus,button:hover:focus,.button:focus,.button:hover:focus,input:focus,input:hover:focus,textarea:focus,textarea:hover:focus,select:focus,select:hover:focus{outline:solid 0.12rem #45a29e;outline-offset:-.12rem}a:hover:focus{outline:none}input[type="text"],input[type="email"],input[type="search"],input[type="color"],textarea,select{width:100%;border:1px solid #529e99}input[type="text"]:hover,input[type="email"]:hover,input[type="search"]:hover,input[type="color"]:hover,textarea:hover,select:hover{border-color:#efeff0}select{background:#1f2833}textarea{resize:vertical}label{line-height:2rem;margin-bottom:1.49999rem;padding-top:.50001rem}@media screen and (min-width: 40em){label{margin-bottom:1.4553471429rem;padding-top:.5446528571rem}}@media screen and (min-width: 50em){label{margin-bottom:1.44999rem;padding-top:.55001rem}}@media screen and (min-width: 64em){label{margin-bottom:1.4411664706rem;padding-top:.5588335294rem}}@media screen and (min-width: 100em){label{margin-bottom:1.4342005263rem;padding-top:.5657994737rem}}code{padding:.12rem .2rem;color:#66fcf1}pre code{padding:0}.required{color:#fff}::-webkit-input-placeholder{opacity:0.5}::-moz-placeholder{opacity:0.5}:-ms-input-placeholder{opacity:0.5}:-moz-placeholder{opacity:0.5}::selection{background:#66fcf1;color:#161820;text-shadow:none}.typeset a>code{text-shadow:none}.typeset .button,.typeset button{background-image:none;text-shadow:none;color:#161820}.typeset .button:hover,.typeset .button:active,.typeset .button:focus,.typeset button:hover,.typeset button:active,.typeset button:focus{background-image:none;color:#161820}.typeset hr{width:100%}.typeset li>p{padding:0;margin:0}.typeset .nav a{padding-left:0;padding-right:0;margin-left:.2rem;margin-right:.2rem}.typeset pre{white-space:pre;overflow-x:scroll}</style>


    

    
  
    <link rel="icon" type="image/png" href="/assets/logos/16x.png" sizes="16x16">
    <link rel="apple-touch-icon" sizes="16x16" href="/assets/logos/16x.png">
  
    <link rel="icon" type="image/png" href="/assets/logos/32x.png" sizes="32x32">
    <link rel="apple-touch-icon" sizes="32x32" href="/assets/logos/32x.png">
  
    <link rel="icon" type="image/png" href="/assets/logos/96x.png" sizes="96x96">
    <link rel="apple-touch-icon" sizes="96x96" href="/assets/logos/96x.png">
  
    <link rel="icon" type="image/png" href="/assets/logos/120.png" sizes="120x120">
    <link rel="apple-touch-icon" sizes="120x120" href="/assets/logos/120.png">
  
    <link rel="icon" type="image/png" href="/assets/logos/144.png" sizes="144x144">
    <link rel="apple-touch-icon" sizes="144x144" href="/assets/logos/144.png">
  
    <link rel="icon" type="image/png" href="/assets/logos/180.png" sizes="180x180">
    <link rel="apple-touch-icon" sizes="180x180" href="/assets/logos/180.png">
  
    <link rel="icon" type="image/png" href="/assets/logos/512.png" sizes="512x512">
    <link rel="apple-touch-icon" sizes="512x512" href="/assets/logos/512.png">
  
    <link rel="icon" type="image/png" href="/assets/logos/1024.png" sizes="1024x1024">
    <link rel="apple-touch-icon" sizes="1024x1024" href="/assets/logos/1024.png">
  

<link rel="shortcut icon" href="/assets/logos/logo-cdong.gif">


    <!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-168923617-1"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-168923617-1');
  gtag('config', 'UA-168923617-1', {
    'anonymize_ip': true
  });
</script>


    <!-- Overwrite this file with code you want before the closing head tag -->

    <meta name="google-site-verification" content="fhiMUAXjII16BlWNx0x4tY2MXKJwEcdDVjILoXGUXYA" />
  </head>
  <!-- Global site tag (gtag.js) - Google Analytics -->
  <script async src="https://www.googletagmanager.com/gtag/js?id=UA-168923617-1"></script>
  <script>
    window.dataLayer = window.dataLayer || [];
    function gtag(){dataLayer.push(arguments);}
    gtag('js', new Date());

    gtag('config', 'UA-168923617-1');
  </script>


  <body class="layout-post  diavol-ransomware">
    <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" style="height: 0; position: absolute">
  <symbol id="codepen" viewBox="0 0 16 16"><path d="M15.988 5.443c-.004-.02-.007-.04-.012-.058l-.01-.033c-.006-.017-.012-.034-.02-.05-.003-.012-.01-.023-.014-.034l-.023-.045-.02-.032-.03-.04-.024-.03c-.01-.013-.022-.026-.034-.038l-.027-.027-.04-.032-.03-.024-.012-.01L8.38.117c-.23-.155-.53-.155-.76 0L.305 4.99.296 5c-.012.007-.022.015-.032.023-.014.01-.027.02-.04.032l-.027.027-.034.037-.024.03-.03.04c-.006.012-.013.022-.02.033l-.023.045-.015.034c-.007.016-.012.033-.018.05l-.01.032c-.005.02-.01.038-.012.058l-.006.03C.002 5.5 0 5.53 0 5.56v4.875c0 .03.002.06.006.09l.007.03c.003.02.006.04.013.058l.01.033c.006.018.01.035.018.05l.015.033c.006.016.014.03.023.047l.02.03c.008.016.018.03.03.042.007.01.014.02.023.03.01.012.02.025.034.036.01.01.018.02.028.026l.04.033.03.023.01.01 7.31 4.876c.116.078.248.117.382.116.134 0 .266-.04.38-.116l7.314-4.875.01-.01c.012-.007.022-.015.032-.023.014-.01.027-.02.04-.032l.027-.027.034-.037.024-.03.03-.04.02-.032.023-.046.015-.033.018-.052.01-.033c.005-.02.01-.038.013-.058 0-.01.003-.02.004-.03.004-.03.006-.06.006-.09V5.564c0-.03-.002-.06-.006-.09l-.007-.03zM8 9.626L5.568 8 8 6.374 10.432 8 8 9.626zM7.312 5.18l-2.98 1.993-2.406-1.61 5.386-3.59v3.206zM3.095 8l-1.72 1.15v-2.3L3.095 8zm1.237.828l2.98 1.993v3.208l-5.386-3.59 2.406-1.61zm4.355 1.993l2.98-1.993 2.407 1.61-5.387 3.59v-3.206zM12.905 8l1.72-1.15v2.3L12.905 8zm-1.237-.827L8.688 5.18V1.97l5.386 3.59-2.406 1.61z" fill-rule="nonzero"/></symbol>
  <symbol id="dribbble" viewBox="0 0 16 16"><path d="M8 16c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm6.747-6.905c-.234-.074-2.115-.635-4.257-.292.894 2.456 1.258 4.456 1.328 4.872 1.533-1.037 2.624-2.68 2.93-4.58zM10.67 14.3c-.102-.6-.5-2.688-1.46-5.18l-.044.014C5.312 10.477 3.93 13.15 3.806 13.4c1.158.905 2.614 1.444 4.194 1.444.947 0 1.85-.194 2.67-.543zm-7.747-1.72c.155-.266 2.03-3.37 5.555-4.51.09-.03.18-.056.27-.08-.173-.39-.36-.778-.555-1.16C4.78 7.85 1.47 7.807 1.17 7.8l-.003.208c0 1.755.665 3.358 1.756 4.57zM1.31 6.61c.307.005 3.122.017 6.318-.832-1.132-2.012-2.353-3.705-2.533-3.952-1.912.902-3.34 2.664-3.784 4.785zM6.4 1.368c.188.253 1.43 1.943 2.548 4 2.43-.91 3.46-2.293 3.582-2.468C11.323 1.827 9.736 1.176 8 1.176c-.55 0-1.087.066-1.6.19zm6.89 2.322c-.145.194-1.29 1.662-3.816 2.694.16.325.31.656.453.99.05.117.1.235.147.352 2.274-.286 4.533.172 4.758.22-.015-1.613-.59-3.094-1.543-4.257z"/></symbol>
  <symbol id="designernews" viewBox="0 0 16 16"><path d="M7.514 7.988c0-2.555-1.57-4.287-4.56-4.287H0v8.6h3.016c2.903 0 4.498-1.75 4.498-4.31zM5.37 8c0 1.844-.946 2.642-2.467 2.642H2.13V5.358h.773C4.36 5.358 5.37 6.193 5.37 8zM16 12.3V3.7h-1.98v4.81L10.853 3.7h-2.07v8.6h1.982V7.152l3.39 5.146H16z"/></symbol>
  <symbol id="facebook" viewBox="0 0 16 16"><path d="M15.117 0H.883C.395 0 0 .395 0 .883v14.234c0 .488.395.883.883.883h7.663V9.804H6.46V7.39h2.086V5.607c0-2.066 1.262-3.19 3.106-3.19.883 0 1.642.064 1.863.094v2.16h-1.28c-1 0-1.195.476-1.195 1.176v1.54h2.39l-.31 2.416h-2.08V16h4.077c.488 0 .883-.395.883-.883V.883C16 .395 15.605 0 15.117 0" fill-rule="nonzero"/></symbol>
  <symbol id="flickr" viewBox="0 0 16 16"><path d="M0 8c0 2.05 1.662 3.71 3.71 3.71 2.05 0 3.713-1.66 3.713-3.71S5.76 4.29 3.71 4.29C1.663 4.29 0 5.95 0 8zm8.577 0c0 2.05 1.662 3.71 3.712 3.71C14.337 11.71 16 10.05 16 8s-1.662-3.71-3.71-3.71c-2.05 0-3.713 1.66-3.713 3.71z"/></symbol>
  <symbol id="github" viewBox="0 0 16 16"><path d="M8 0C3.58 0 0 3.582 0 8c0 3.535 2.292 6.533 5.47 7.59.4.075.547-.172.547-.385 0-.19-.007-.693-.01-1.36-2.226.483-2.695-1.073-2.695-1.073-.364-.924-.89-1.17-.89-1.17-.725-.496.056-.486.056-.486.803.056 1.225.824 1.225.824.714 1.223 1.873.87 2.33.665.072-.517.278-.87.507-1.07-1.777-.2-3.644-.888-3.644-3.953 0-.873.31-1.587.823-2.147-.083-.202-.358-1.015.077-2.117 0 0 .672-.215 2.2.82.638-.178 1.323-.266 2.003-.27.68.004 1.364.092 2.003.27 1.527-1.035 2.198-.82 2.198-.82.437 1.102.163 1.915.08 2.117.513.56.823 1.274.823 2.147 0 3.073-1.87 3.75-3.653 3.947.287.246.543.735.543 1.48 0 1.07-.01 1.933-.01 2.195 0 .215.144.463.55.385C13.71 14.53 16 11.534 16 8c0-4.418-3.582-8-8-8"/></symbol>
  <symbol id="hackernews" viewBox="0 0 16 16"><path d="M0 0v16h16V0H0zm8.92 8.96v3H7.25v-3l-2.75-5h1.96l1.66 3.48L9.7 3.96h1.88l-2.66 5z"/></symbol>
  <symbol id="instagram" viewBox="0 0 16 16"><path d="M8 0C5.827 0 5.555.01 4.702.048 3.85.088 3.27.222 2.76.42c-.526.204-.973.478-1.417.923-.445.444-.72.89-.923 1.417-.198.51-.333 1.09-.372 1.942C.008 5.555 0 5.827 0 8s.01 2.445.048 3.298c.04.852.174 1.433.372 1.942.204.526.478.973.923 1.417.444.445.89.72 1.417.923.51.198 1.09.333 1.942.372.853.04 1.125.048 3.298.048s2.445-.01 3.298-.048c.852-.04 1.433-.174 1.942-.372.526-.204.973-.478 1.417-.923.445-.444.72-.89.923-1.417.198-.51.333-1.09.372-1.942.04-.853.048-1.125.048-3.298s-.01-2.445-.048-3.298c-.04-.852-.174-1.433-.372-1.942-.204-.526-.478-.973-.923-1.417-.444-.445-.89-.72-1.417-.923-.51-.198-1.09-.333-1.942-.372C10.445.008 10.173 0 8 0zm0 1.44c2.136 0 2.39.01 3.233.048.78.036 1.203.166 1.485.276.374.145.64.318.92.598.28.28.453.546.598.92.11.282.24.705.276 1.485.038.844.047 1.097.047 3.233s-.01 2.39-.048 3.233c-.036.78-.166 1.203-.276 1.485-.145.374-.318.64-.598.92-.28.28-.546.453-.92.598-.282.11-.705.24-1.485.276-.844.038-1.097.047-3.233.047s-2.39-.01-3.233-.048c-.78-.036-1.203-.166-1.485-.276-.374-.145-.64-.318-.92-.598-.28-.28-.453-.546-.598-.92-.11-.282-.24-.705-.276-1.485C1.45 10.39 1.44 10.136 1.44 8s.01-2.39.048-3.233c.036-.78.166-1.203.276-1.485.145-.374.318-.64.598-.92.28-.28.546-.453.92-.598.282-.11.705-.24 1.485-.276C5.61 1.45 5.864 1.44 8 1.44zm0 2.452c-2.27 0-4.108 1.84-4.108 4.108 0 2.27 1.84 4.108 4.108 4.108 2.27 0 4.108-1.84 4.108-4.108 0-2.27-1.84-4.108-4.108-4.108zm0 6.775c-1.473 0-2.667-1.194-2.667-2.667 0-1.473 1.194-2.667 2.667-2.667 1.473 0 2.667 1.194 2.667 2.667 0 1.473-1.194 2.667-2.667 2.667zm5.23-6.937c0 .53-.43.96-.96.96s-.96-.43-.96-.96.43-.96.96-.96.96.43.96.96z"/></symbol>
  <symbol id="linkedin" viewBox="0 0 16 16"><path d="M13.632 13.635h-2.37V9.922c0-.886-.018-2.025-1.234-2.025-1.235 0-1.424.964-1.424 1.96v3.778h-2.37V6H8.51V7.04h.03c.318-.6 1.092-1.233 2.247-1.233 2.4 0 2.845 1.58 2.845 3.637v4.188zM3.558 4.955c-.762 0-1.376-.617-1.376-1.377 0-.758.614-1.375 1.376-1.375.76 0 1.376.617 1.376 1.375 0 .76-.617 1.377-1.376 1.377zm1.188 8.68H2.37V6h2.376v7.635zM14.816 0H1.18C.528 0 0 .516 0 1.153v13.694C0 15.484.528 16 1.18 16h13.635c.652 0 1.185-.516 1.185-1.153V1.153C16 .516 15.467 0 14.815 0z" fill-rule="nonzero"/></symbol>
  <symbol id="medium" viewBox="0 0 16 16"><path d="M11.824 12.628l-.276.45.798.398 2.744 1.372c.15.076.294.11.418.11.278 0 .467-.177.467-.492V5.883l-4.15 6.745zm4.096-8.67c-.004-.003 0-.01-.003-.012l-4.825-2.412c-.06-.03-.123-.038-.187-.044-.016 0-.03-.01-.047-.01-.184 0-.368.092-.467.254l-.24.39-.5.814-1.89 3.08 1.89 3.076.5.813.5.812.59.95 4.71-7.64c.02-.03.01-.06-.02-.08zm-6.27 7.045L7.17 6.97l-.295-.477-.294-.477-.25-.416v4.867l3.32 1.663.5.25.5.25-.5-.813-.5-.813zM.737 1.68L.59 1.608c-.085-.042-.166-.062-.24-.062-.206 0-.35.16-.35.427v10.162c0 .272.2.594.442.716l4.145 2.08c.107.06.208.08.3.08.257 0 .438-.2.438-.53V4.01c0-.02-.012-.04-.03-.047L.738 1.68z"/></symbol>
  <symbol id="pinterest" viewBox="0 0 16 16"><path d="M8 0C3.582 0 0 3.582 0 8c0 3.39 2.108 6.285 5.084 7.45-.07-.633-.133-1.604.028-2.295.146-.625.938-3.977.938-3.977s-.24-.48-.24-1.188c0-1.11.646-1.943 1.448-1.943.683 0 1.012.513 1.012 1.127 0 .687-.436 1.713-.662 2.664-.19.797.4 1.445 1.185 1.445 1.42 0 2.514-1.498 2.514-3.662 0-1.915-1.376-3.254-3.342-3.254-2.276 0-3.61 1.707-3.61 3.472 0 .687.263 1.424.593 1.825.066.08.075.15.057.23-.06.252-.196.796-.223.907-.035.146-.115.178-.268.107-.998-.465-1.624-1.926-1.624-3.1 0-2.524 1.834-4.84 5.287-4.84 2.774 0 4.932 1.977 4.932 4.62 0 2.757-1.74 4.977-4.153 4.977-.81 0-1.572-.422-1.833-.92l-.5 1.902c-.18.695-.667 1.566-.994 2.097.75.232 1.545.357 2.37.357 4.417 0 8-3.582 8-8s-3.583-8-8-8z" fill-rule="nonzero"/></symbol>
  <symbol id="rss" viewBox="0 0 16 16"><path d="M12.8 16C12.8 8.978 7.022 3.2 0 3.2V0c8.777 0 16 7.223 16 16h-3.2zM2.194 11.61c1.21 0 2.195.985 2.195 2.196 0 1.21-.985 2.194-2.196 2.194C.984 16 0 15.017 0 13.806c0-1.21.983-2.195 2.194-2.195zM10.606 16h-3.11c0-4.113-3.383-7.497-7.496-7.497v-3.11c5.818 0 10.606 4.79 10.606 10.607z"/></symbol>
  <symbol id="reddit" viewBox="0 0 16 16"><path d="M1.473 9.368c-.04.185-.06.374-.06.566 0 2.3 2.94 4.173 6.554 4.173 3.613 0 6.553-1.872 6.553-4.173 0-.183-.02-.364-.055-.54l-.01-.022c-.013-.036-.02-.073-.02-.11-.2-.784-.745-1.497-1.533-2.072-.03-.01-.058-.026-.084-.047-.017-.013-.03-.028-.044-.043-1.198-.824-2.91-1.34-4.807-1.34-1.88 0-3.576.506-4.772 1.315-.01.012-.02.023-.033.033-.026.022-.056.04-.087.05-.805.576-1.364 1.293-1.572 2.086 0 .038-.01.077-.025.114l-.005.01zM8 13.003c-1.198 0-2.042-.26-2.58-.8-.116-.116-.116-.305 0-.422.117-.11.307-.11.424 0 .42.42 1.125.63 2.155.63 1.03 0 1.73-.2 2.15-.62.11-.11.3-.11.42 0 .11.12.11.31 0 .43-.54.54-1.38.8-2.58.8zM5.592 7.945c-.61 0-1.12.51-1.12 1.12 0 .608.51 1.102 1.12 1.102.61 0 1.103-.494 1.103-1.102 0-.61-.494-1.12-1.103-1.12zm4.83 0c-.61 0-1.12.51-1.12 1.12 0 .608.51 1.102 1.12 1.102.61 0 1.103-.494 1.103-1.102 0-.61-.494-1.12-1.103-1.12zM13.46 6.88c.693.556 1.202 1.216 1.462 1.94.3-.225.48-.578.48-.968 0-.67-.545-1.214-1.214-1.214-.267 0-.52.087-.728.243zM1.812 6.64c-.67 0-1.214.545-1.214 1.214 0 .363.16.7.43.927.268-.72.782-1.37 1.478-1.92-.202-.14-.443-.22-.694-.22zm6.155 8.067c-3.944 0-7.152-2.14-7.152-4.77 0-.183.016-.363.046-.54-.53-.33-.86-.91-.86-1.545 0-1 .82-1.812 1.82-1.812.45 0 .87.164 1.2.455 1.24-.796 2.91-1.297 4.75-1.33l1.21-3.69.27.063s.01 0 .01.002l2.82.663c.23-.533.76-.908 1.38-.908.82 0 1.49.67 1.49 1.492 0 .823-.67 1.492-1.49 1.492s-1.49-.67-1.49-1.49L9.4 2.18l-.98 2.99c1.77.07 3.37.57 4.57 1.35.33-.31.764-.48 1.225-.48 1 0 1.814.81 1.814 1.81 0 .66-.36 1.26-.92 1.58.02.17.04.33.04.5-.01 2.63-3.21 4.77-7.16 4.77zM13.43 1.893c-.494 0-.895.4-.895.894 0 .493.4.894.894.894.49 0 .89-.4.89-.89s-.4-.89-.9-.89z"/></symbol>
  <symbol id="skype" viewBox="0 0 16 16"><path d="M8.035 12.6c-2.685 0-3.885-1.322-3.885-2.313 0-.51.374-.865.89-.865 1.15 0 .85 1.653 2.995 1.653 1.096 0 1.703-.597 1.703-1.208 0-.368-.18-.775-.904-.954l-2.387-.597C4.524 7.833 4.175 6.79 4.175 5.812c0-2.034 1.91-2.798 3.704-2.798 1.65 0 3.6.916 3.6 2.136 0 .523-.452.827-.97.827-.98 0-.798-1.36-2.773-1.36-.98 0-1.523.444-1.523 1.08 0 .636.774.84 1.446.993l1.767.392c1.936.433 2.427 1.566 2.427 2.633 0 1.652-1.266 2.886-3.82 2.886m7.4-3.264l-.014.084-.028-.16c.015.024.028.05.042.076.082-.45.125-.912.125-1.373 0-1.023-.2-2.014-.595-2.948-.38-.902-.925-1.712-1.62-2.407-.692-.696-1.5-1.242-2.4-1.623C10.015.59 9.025.39 8.005.39c-.48 0-.963.045-1.43.135H6.57l.08.04-.16-.023.08-.016C5.927.183 5.205 0 4.472 0 3.278 0 2.155.466 1.31 1.313.465 2.16 0 3.286 0 4.483c0 .763.195 1.512.563 2.175l.013-.083.028.16c-.015-.026-.027-.052-.04-.077-.076.43-.115.867-.115 1.305 0 1.022.2 2.014.593 2.948.38.903.925 1.713 1.62 2.408.693.695 1.5 1.242 2.4 1.623.932.397 1.92.597 2.94.597.445 0 .89-.04 1.325-.118l-.077-.043.162.028-.084.014c.67.378 1.426.58 2.2.58 1.194 0 2.317-.466 3.162-1.313.845-.846 1.31-1.972 1.31-3.17 0-.765-.197-1.517-.566-2.18" fill-rule="nonzero"/></symbol>
  <symbol id="tumblr" viewBox="0 0 16 16"><path d="M9.708 16c-3.396 0-4.687-2.504-4.687-4.274V6.498H3.403V4.432C5.83 3.557 6.412 1.368 6.55.12c.01-.086.077-.12.115-.12H9.01v4.076h3.2v2.422H8.997v4.98c.01.667.25 1.58 1.472 1.58h.067c.424-.012.994-.136 1.29-.278l.77 2.283c-.288.424-1.594.916-2.77.936h-.12z" fill-rule="nonzero"/></symbol>
  <symbol id="twitch" viewBox="0 0 16 16"><g fill-rule="nonzero"><path d="M1.393 0L.35 2.783v11.13h3.824V16h2.088l2.085-2.088h3.13L15.65 9.74V0H1.394zm1.39 1.39H14.26v7.653l-2.435 2.435H8l-2.085 2.085v-2.085H2.783V1.39z"/><path d="M6.61 8.348H8V4.175H6.61v4.173zm3.824 0h1.39V4.175h-1.39v4.173z"/></g></symbol>
  <symbol id="twitter" viewBox="0 0 16 16"><path d="M16 3.038c-.59.26-1.22.437-1.885.517.677-.407 1.198-1.05 1.443-1.816-.634.375-1.337.648-2.085.795-.598-.638-1.45-1.036-2.396-1.036-1.812 0-3.282 1.468-3.282 3.28 0 .258.03.51.085.75C5.152 5.39 2.733 4.084 1.114 2.1.83 2.583.67 3.147.67 3.75c0 1.14.58 2.143 1.46 2.732-.538-.017-1.045-.165-1.487-.41v.04c0 1.59 1.13 2.918 2.633 3.22-.276.074-.566.114-.865.114-.21 0-.416-.02-.617-.058.418 1.304 1.63 2.253 3.067 2.28-1.124.88-2.54 1.404-4.077 1.404-.265 0-.526-.015-.783-.045 1.453.93 3.178 1.474 5.032 1.474 6.038 0 9.34-5 9.34-9.338 0-.143-.004-.284-.01-.425.64-.463 1.198-1.04 1.638-1.7z" fill-rule="nonzero"/></symbol>
  <symbol id="vimeo" viewBox="0 0 16 16"><path d="M15.992 4.275c-.07 1.56-1.16 3.697-3.263 6.41-2.176 2.832-4.017 4.248-5.522 4.248-.933 0-1.722-.862-2.367-2.588L3.55 7.6c-.48-1.724-.993-2.587-1.542-2.587-.12 0-.538.252-1.255.755L0 4.796C.79 4.1 1.568 3.406 2.335 2.71c1.053-.912 1.844-1.39 2.37-1.44 1.246-.12 2.012.733 2.3 2.56.31 1.97.526 3.194.647 3.673.36 1.634.754 2.45 1.185 2.45.335 0 .838-.53 1.51-1.59.67-1.06 1.028-1.866 1.076-2.42.096-.915-.263-1.374-1.077-1.374-.383 0-.778.087-1.185.262.788-2.58 2.29-3.834 4.508-3.762 1.644.048 2.42 1.116 2.324 3.205z" fill-rule="nonzero"/></symbol>
  <symbol id="youtube" viewBox="0 0 16 16"><path d="M0 7.345c0-1.294.16-2.59.16-2.59s.156-1.1.636-1.587c.608-.637 1.408-.617 1.764-.684C3.84 2.36 8 2.324 8 2.324s3.362.004 5.6.166c.314.038.996.04 1.604.678.48.486.636 1.588.636 1.588S16 6.05 16 7.346v1.258c0 1.296-.16 2.59-.16 2.59s-.156 1.102-.636 1.588c-.608.638-1.29.64-1.604.678-2.238.162-5.6.166-5.6.166s-4.16-.037-5.44-.16c-.356-.067-1.156-.047-1.764-.684-.48-.487-.636-1.587-.636-1.587S0 9.9 0 8.605v-1.26zm6.348 2.73V5.58l4.323 2.255-4.32 2.24h-.002z"/></symbol>
  <symbol id="link" viewBox="0 0 16 16"><path d="M5.86 12.7l-.81.8c-.7.7-1.84.7-2.54 0a1.75 1.75 0 0 1 0-2.5l2.98-2.96c.61-.61 1.77-1.52 2.62-.68a1 1 0 1 0 1.4-1.4c-1.44-1.43-3.57-1.17-5.42.67L1.1 9.6a3.72 3.72 0 0 0 0 5.32 3.78 3.78 0 0 0 5.34 0l.8-.8a1 1 0 1 0-1.39-1.42zm9.03-11.5c-1.55-1.53-3.7-1.6-5.14-.19l-1 1a1 1 0 1 0 1.39 1.41l1-1c.75-.74 1.72-.43 2.35.2a1.75 1.75 0 0 1 0 2.5l-3.17 3.15c-1.46 1.45-2.14.77-2.43.48a1 1 0 0 0-1.4 1.4c.67.67 1.43 1 2.23 1 .98 0 2.01-.5 3-1.47l3.17-3.15a3.72 3.72 0 0 0 0-5.32z"/></symbol>
  <symbol id="email" viewBox="0 0 16 11"><path fill-rule="evenodd" d="M1.33 0h13.34L8 5 1.33 0zM16 0v11H0V0l8 6 8-6z"/></symbol>
  <symbol id="nav" viewBox="0 0 16 11"><path d="M0 12h16v-2H0v2zm0-5h16V5H0v2zm0-7v2h16V0H0z"/></symbol>
</svg>


    <header class="header">
  <div class="container">
    <a class="logo" href="/">
  <img src="/assets/logos/logo-cdong.gif" alt=""/>
</a>


    
<nav class="nav  nav--header">
  <ul class="list  list--nav">
    

      

      <li class="item  item--nav">
        <a href="/">Home</a>
      </li>
    

      

      <li class="item  item--nav">
        <a href="/about/">About</a>
      </li>
    

      

      <li class="item  item--nav">
        <a href="/blog/">Blog</a>
      </li>
    

      

      <li class="item  item--nav">
        <a href="/search/">Search</a>
      </li>
    
  </ul>
  <button class="button  button--nav" aria-label="Menu toggle">
    <svg width="16" height="16" class="icon  icon--nav" role="img" alt="Menu"><title>Menu</title><use xlink:href="#nav" fill="CurrentColor"></use></svg>

  </button>
</nav>


<script type="text/javascript">
  // Get list and button
  const navList = document.querySelector('.header .list--nav')
  const button  = document.querySelector('.header .button--nav')

  // Hide nav and apply toggle
  const collapseNav = () => {
    if (document.body.clientWidth < 640) {
      navList.style.setProperty('--listHeight', `-${navList.offsetHeight}px`)
    } else {
      navList.removeAttribute('style')
    }

    button.onclick = () => {
      navList.style.setProperty('transition', `margin .1s`)
      if (navList.style.getPropertyValue('--listHeight')) {
        navList.style.removeProperty('--listHeight')
      } else {
        navList.style.setProperty('--listHeight', `-${navList.offsetHeight}px`)
      }
    }
  }

  collapseNav()

  // Check on resize if to collapse nav
  window.addEventListener('resize', () => {
    collapseNav()
  })
</script>

  </div>

  





  <meta name="google-site-verification" content="fhiMUAXjII16BlWNx0x4tY2MXKJwEcdDVjILoXGUXYA" />
</header>


<main class="main  container">

  <article class="article  article--post  content  typeset">

    

<small class="small  post-meta">
  
  
    
      <span class="label  label--category"><a href="/categories/#reverse engineering">Reverse Engineering</a></span>
    
  &nbsp;&middot;&nbsp;<time datetime="2021-12-17T00:00:00-05:00" class="time">17 Dec 2021</time>
</small>

    
    <h1 id="diavol-ransomware">Diavol Ransomware</h1>

<h2 id="contents">Contents</h2>

<ul>
  <li><a href="#diavol-ransomware">Diavol Ransomware</a>
    <ul>
      <li><a href="#contents">Contents</a></li>
      <li><a href="#overview">Overview</a></li>
      <li><a href="#iocs">IOCS</a></li>
      <li><a href="#ransom-note">Ransom Note</a></li>
    </ul>
  </li>
  <li><a href="#static-code-analysis">Static Code Analysis</a>
    <ul>
      <li><a href="#anti-analysis-launching-functions-with-shellcode">Anti-Analysis: Launching Functions with Shellcode</a></li>
      <li><a href="#command-line-arguments">Command-line Arguments</a></li>
      <li><a href="#bot-id-generation">Bot ID Generation</a></li>
      <li><a href="#hard-coded-configuration">Hard-coded Configuration</a></li>
      <li><a href="#bot-registration">Bot Registration</a></li>
      <li><a href="#configuration-overriding">Configuration Overriding</a></li>
      <li><a href="#stopping-services">Stopping Services</a></li>
      <li><a href="#terminating-processes">Terminating Processes</a></li>
      <li><a href="#rsa-initialization">RSA Initialization</a></li>
      <li><a href="#finding-drives-to-encrypt">Finding Drives To Encrypt</a></li>
      <li><a href="#scanning-target-network-shares-through-smb">Scanning Target Network Shares Through SMB</a></li>
      <li><a href="#scanning-network-shares-in-arp-table-through-smb">Scanning Network Shares In ARP Table Through SMB</a></li>
      <li><a href="#encryption-target-file-enumeration">Encryption: Target File Enumeration</a></li>
      <li><a href="#encryption-remote-file-enumeration-through-smb">Encryption: Remote File Enumeration Through SMB</a></li>
      <li><a href="#encryption-system-drives-enumeration">Encryption: System Drives Enumeration</a></li>
      <li><a href="#encryption-file-encryption">Encryption: File Encryption</a></li>
      <li><a href="#shadow-copies-deletion">Shadow Copies Deletion</a></li>
      <li><a href="#changing-desktop-image">Changing Desktop Image</a></li>
      <li><a href="#self-deletion">Self Deletion</a></li>
      <li><a href="#logging">Logging</a></li>
      <li><a href="#references">References</a></li>
    </ul>
  </li>
</ul>

<h2 id="overview">Overview</h2>

<p>This is my analysis for the <strong>DIAVOL Ransomware</strong>.</p>

<p><strong>DIAVOL</strong> is a relatively new ransomware that uses a unique method with shellcode to launch its core functions and <strong>RSA</strong> to encrypt files.</p>

<p>The malware contains a hard-coded configuration that stores informations such as files to encrypt and <strong>RSA</strong> public key, but it can also requests these informations from the threat actor’s remote server.</p>

<p>Unlike most major ransomware, this new malware’s encryption scheme is relatively slow due to its recursive method for file traversal.</p>

<p><img src="/uploads/diavol01.PNG" alt="alt text" /></p>

<p><em>Figure 1: DIAVOL Post-Infection.</em></p>

<h2 id="iocs">IOCS</h2>

<p>Huge shout-out to <a href="https://twitter.com/CuratedIntel">Curated Intelligence</a> for providing this sample.</p>

<p>The analyzed sample is a 64-bit Windows executable.</p>

<p><strong>MD5</strong>: f4928b5365a0bd6db2e9d654a77308d7</p>

<p><strong>SHA256</strong>: ee13d59ae3601c948bd10560188447e6faaeef5336dcd605b52ee558ff2a8588</p>

<p><strong>Sample</strong>: <a href="https://bazaar.abuse.ch/sample/ee13d59ae3601c948bd10560188447e6faaeef5336dcd605b52ee558ff2a8588/">MalwareBazaar</a></p>

<p><img src="/uploads/diavol02.PNG" alt="alt text" /></p>

<p><em>Figure 2: VirusTotal Result.</em></p>

<h2 id="ransom-note">Ransom Note</h2>

<p>The content of the default ransom note is stored in plaintext in <strong>DIAVOL’s</strong> configuration. The malware can also request a ransom note from its remote server and override the default with that.</p>

<p><strong>DIAVOL’s</strong> ransom note filename is <strong>README-FOR-DECRYPT.txt</strong>.</p>

<p><img src="/uploads/diavol03.PNG" alt="alt text" /></p>

<p><em>Figure 3: DIAVOL’s Ransom Note.</em></p>

<h1 id="static-code-analysis">Static Code Analysis</h1>

<h2 id="anti-analysis-launching-functions-with-shellcode">Anti-Analysis: Launching Functions with Shellcode</h2>

<p>For anti-analysis, <strong>DIAVOL</strong> loads shellcode containing its core functions into memory and executes it dynamically, which makes static analysis a bit harder.</p>

<p>First, the malware calls <strong>VirtualAlloc</strong> to allocate two memory buffers to later load these shellcodes in.</p>

<p><img src="/uploads/diavol04.PNG" alt="alt text" /></p>

<p><em>Figure 4: Allocating Shellcode Buffers.</em></p>

<p>When <strong>DIAVOL</strong> wants to execute a certain functionality, it calls a function to load the shellcode into memory and executes a <strong>call</strong> instruction to transfer control to the shellcode.</p>

<p><img src="/uploads/new_diavol05.PNG" alt="alt text" /></p>

<p><em>Figure 5: Loading &amp; Executing Shellcode.</em></p>

<p>First, to load shellcode into memory, <strong>DIAVOL</strong> extracts the bitmap image corresponds to the given resource name by calling <strong>LoadBitmapW</strong>, <strong>CreateCompatibleDC</strong>, <strong>SelectObject</strong>, and <strong>GetObjectW</strong>.</p>

<p>Next, it calls <strong>GetDIBits</strong> to retrieve the bits of the bitmap image and copies them into the shellcode buffer as a DIB.</p>

<p><img src="/uploads/diavol06.PNG" alt="alt text" /></p>

<p><em>Figure 6: Loading Shellcode into memory.</em></p>

<p>Unlike normal shellcode, <strong>DIAVOL’s</strong> don’t manually walk the PEB to resolve its imports dynamically. The malware loads a “JPEG” with the same name in the resource section, extracts a list of imported functions with their corresponding DLL, and manually calls <strong>LoadLibraryA</strong> and <strong>GetProcAddress</strong> to resolve it for the shellcode. The resolved API addresses are stored at the end of the buffer, so the shellcode can make calls to those APIs using their exact offsets, which makes the loaded payload position-independent.</p>

<p><img src="/uploads/diavol07.PNG" alt="alt text" /></p>

<p><em>Figure 7: Resolving API Addresses For Shellcode.</em></p>

<p>Below is the bitmap and the imported API list extracted from <strong>Resource Hacker</strong>.</p>

<p><img src="/uploads/diavol08.PNG" alt="alt text" /></p>

<p><em>Figure 8: DIAVOL Resource Section.</em></p>

<p>Because each shellcode should be position-independent, we can simply load it into IDA for static analysis after extraction. However, the API addresses won’t make sense when IDA loads the shellcode because they are relative to where the DLLs are in the malware’s memory.</p>

<p><img src="/uploads/diavol09.PNG" alt="alt text" /></p>

<p><em>Figure 9: Loading Shellcode Into IDA.</em></p>

<p>To fix this, we just need to rename the API addresses in the order that they appear in the corresponding JPEG resource. After renaming, the shellcode should be decompiled correctly, and we can begin our static analysis on it.</p>

<p><img src="/uploads/diavol10.PNG" alt="alt text" /></p>

<p><em>Figure 10: Fixing Shellcode’s API Calls In IDA.</em></p>

<h2 id="command-line-arguments">Command-line Arguments</h2>

<p><strong>DIAVOL</strong> can run with or without command-line arguments.</p>

<p>Below is the list of arguments that can be supplied by the operator.</p>

<table>
  <thead>
    <tr>
      <th>Argument</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>-p &lt;target&gt;</strong></td>
      <td>Path to a file containing files/directories to be encrypt specifically</td>
    </tr>
    <tr>
      <td><strong>-h &lt;target&gt;</strong></td>
      <td>Path to a file containing remote files/directories to enumerate with SMB</td>
    </tr>
    <tr>
      <td><strong>-m local</strong></td>
      <td>Encrypting local files and directories</td>
    </tr>
    <tr>
      <td><strong>-m net</strong></td>
      <td>Encrypting network shares</td>
    </tr>
    <tr>
      <td><strong>-m scan</strong></td>
      <td>Scanning and encrypting network shares through SMB</td>
    </tr>
    <tr>
      <td><strong>-m all</strong></td>
      <td>Encrypting local and network drives without scanning through SMB</td>
    </tr>
    <tr>
      <td><strong>-log &lt;log_filename&gt;</strong></td>
      <td>Enable logging to the specified log file</td>
    </tr>
    <tr>
      <td><strong>-s &lt;IP_address&gt;</strong></td>
      <td>Remote server’s IP address to register bot</td>
    </tr>
    <tr>
      <td><strong>-perc &lt;percent&gt;</strong></td>
      <td>Percent of data to be encrypted in a file (default: 10%)</td>
    </tr>
  </tbody>
</table>

<h2 id="bot-id-generation">Bot ID Generation</h2>

<p>The first functionality <strong>DIAVOL</strong> executes is generating the bot ID through loading and executing the shellcode from the resource <strong>GENBOTID</strong>.</p>

<p>Prior to launching the shellcode, <strong>DIAVOL</strong> calls <strong>time64</strong> to retrieve the current timestamp on the system and uses it as the seed for <strong>srand</strong> to initialize the pseudo-random number generator.</p>

<p>Next, it generates the following structure and passes it to the shellcode. The <strong>bot_ID</strong> field is later used to register the victim to the threat actor’s remote server, and the <strong>victim_ID</strong> is the victim ID that is written to the ransom note. The <strong>RSA_CRYPT_BUFF</strong> is a buffer that is later used to encrypt files.</p>

<pre><code class="language-C">struct DIAVOL_GENBOTID_STRUCT
{
  char* bot_ID;
  wchar_t* victim_ID;
  BYTE* RSA_CRYPT_BUFF;
  int (__stdcall *rand)();
};
</code></pre>

<p><img src="/uploads/new_diavol11.PNG" alt="alt text" /></p>

<p><em>Figure 11: Initialize Structure For GENBOTID.</em></p>

<p>To generate the victim ID, the shellcode creates a unique GUID using <strong>CoCreateGuid</strong> and uses it as a random number to index into the string <strong>“0123456789ABCDEF”</strong> to generate a random 32-character string.</p>

<p><img src="/uploads/diavol12.PNG" alt="alt text" /></p>

<p><img src="/uploads/diavol13.PNG" alt="alt text" /></p>

<p><em>Figure 12, 13: Generating Random 32-character Victim ID.</em></p>

<p>To generate the bot ID, the malware first calls <strong>GetComputerNameA</strong> and <strong>GetUserNameA</strong> to retrieve the computer name and user name. It also calls <strong>RtlGetVersion</strong> to retrieve the version of the victim’s computer and uses it to index into the string <strong>“0123456789ABCDEF”</strong> to generate an 8-character string.</p>

<p>Then, the bot ID is built in the following string format.</p>

<p>**<computer_name> + <user_name> + "_W" + &lt;8_character_string_from_OS_version&gt; + "."**</user_name></computer_name></p>

<p><img src="/uploads/diavol14.PNG" alt="alt text" /></p>

<p><img src="/uploads/diavol15.PNG" alt="alt text" /></p>

<p><em>Figure 14, 15: Generating Bot ID.</em></p>

<p>Finally, to populate the <strong>RSA_CRYPT_BUFF</strong> field, the malware calls the <strong>rand</strong> function to generate a random 1024-byte buffer.</p>

<p><img src="/uploads/new_diavol16.PNG" alt="alt text" /></p>

<p><em>Figure 16: Generating RSA CRYPT Buffer.</em></p>

<h2 id="hard-coded-configuration">Hard-coded Configuration</h2>

<p>The configuration of <strong>DIAVOL</strong> is stored in plaintext in memory. To extract it, the malware allocates the following structure using <strong>LocalAlloc</strong> and populates it using the hard-coded values from memory.</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span> <span class="n">DIAVOL_CONFIG</span>
<span class="p">{</span>
  <span class="n">_QWORD</span> <span class="n">server_IP_addr</span><span class="p">;</span> <span class="c1">// remote server to register bot</span>
  <span class="kt">wchar_t</span><span class="o">*</span> <span class="n">group_ID</span><span class="p">;</span> <span class="c1">// bot group ID</span>
  <span class="kt">wchar_t</span><span class="o">*</span> <span class="n">Base64_RSA_key</span><span class="p">;</span> <span class="c1">// Base64-encoded RSA key</span>
  <span class="kt">wchar_t</span><span class="o">*</span> <span class="n">process_kill_list</span><span class="p">;</span> <span class="c1">// processes to kill</span>
  <span class="kt">wchar_t</span><span class="o">*</span> <span class="n">service_stop_list</span><span class="p">;</span> <span class="c1">// services to stop</span>
  <span class="kt">wchar_t</span><span class="o">*</span> <span class="n">file_ignore_list</span><span class="p">;</span> <span class="c1">// filenames to avoid encrypting</span>
  <span class="kt">wchar_t</span><span class="o">*</span> <span class="n">file_include_list</span><span class="p">;</span> <span class="c1">// filenames to include encrypting</span>
  <span class="kt">wchar_t</span><span class="o">*</span> <span class="n">file_wipe_list</span><span class="p">;</span> <span class="c1">// filenames to delete</span>
  <span class="kt">wchar_t</span><span class="o">*</span> <span class="n">target_file_list</span><span class="p">;</span> <span class="c1">// target files to encrypt first (overriden by "-p" command-line)</span>
  <span class="kt">wchar_t</span><span class="o">*</span> <span class="n">ransom_note</span><span class="p">;</span> <span class="c1">// ransom note in reverse</span>
  <span class="n">_QWORD</span> <span class="n">findfiles_complete_flag</span><span class="p">;</span> <span class="c1">// is set to true when the first FINDFILES iteration is done</span>
<span class="p">};</span>
</code></pre></div></div>

<p><img src="/uploads/diavol17.PNG" alt="alt text" /></p>

<p><img src="/uploads/diavol18.PNG" alt="alt text" /></p>

<p><em>Figure 17, 18: Populate Configuration.</em></p>

<p>Below are the hard-coded values for the configuration.</p>

<pre><code class="language-JSON">{
  server_IP_addr: "127.0.0.1",
  group_ID = "c1aaee",
  Base64_RSA_Key = "BgIAAACkAABSU0ExAAQAAAEAAQCxVuiQzWxjl9dwh2F77Jxqt/PIrJoczV2RKluW
M+xv0gSAZrL8DncWw9hif+zsvJq6PcqC0NugL3raLFbaUCUT8KAGgrOkIPmnrQpz
5Ts2pQ0mZ80UlkRpw10CMHgdqChBqsnNkB9XF/CFYo4rndjQG+ZO22WX+EtQr6V8
MYOE1A==",
  process_kill_list = ["iexplore.exe", "msedge.exe", "chrome.exe", "opera.exe", "firefox.exe", "savfmsesp.exe", "zoolz.exe", "firefoxconfig.exe", "tbirdconfig.exe", "thunderbird.exe", "agntsvc.exe", "dbeng50.exe", "dbsnmp.exe", "isqlplussvc.exe", "msaccess.exe", "msftesql.exe", "mydesktopqos.exe", "mydesktopservice.exe", "mysqld-nt.exe", "mysqld-opt.exe", "mysqld.exe", "ocautoupds.exe", "ocssd.exe", "oracle.exe", "sqlagent.exe", "synctime.exe", "thebat.exe", "thebat64.exe", "encsvc.exe", "ocomm.exe", "xfssvccon.exe", "excel.exe", "infopath.exe", "mspub.exe", "onenote.exe", "outlook.exe", "powerpnt.exe", "visio.exe", "wordpad.exe", "CNTAoSMgr.exe", "mbamtray.exe", "NtrtscPccNTMon.exe", "tmlisten.exe", "sqlmangr.exe", "RAgui.exe", "QBCFMonitorService.exe", "supervise.exe", "fdhost.exe", "Culture.exe", "RTVscan.exe", "Defwatch.exe", "wxServerView.exe", "GDscan.exe", "QBW32.exe", "QBDBMgr.exe", "qbupdate.exe", "axlbridge.exe", "360se.exe", "360doctor.exe", "QBIDPService.exe", "wxServer.exe", "httpd.exe", "fdlauncher.exe", "MsDtSrvr.exe", "tomcat6.exe", "java.exe", "wdswfsafe.exe"],
  service_stop_list = ["DefWatch", "ccEvtMgr", "ccSetMgr", "SavRoam", "dbsrv12", "sqlservr", "sqlagent", "Intuit.QuickBooks.FCS", "dbeng8", "QBIDPService", "Culserver", "RTVscan", "vmware-usbarbitator64", "vmware-converter", "VMAuthdService", "VMnetDHCP", "VMUSBArbService", "VMwareHostd", "SQLADHLP", "msmdsrv", "tomcat6", "QBCFMonitorService", "Acronis VSS Provider", "SQL Backups", "SQLsafe Backup Service", "SQLsafe Filter Service", "Symantec System Recovery", "Veeam Backup Catalog Data Service", "Zoolz 2 Service", "AcrSch2Svc", "ARSM", "BackupExecAgentAccelerator", "BackupExecAgentBrowser", "BackupExecDeviceMediaService", "BackupExecJobEngine", "BackupExecManagementService", "BackupExecRPCService", "BackupExecVSSProvider", "bedbg", "MMS", "mozyprobackup", "ntrtscan", "PDVFSService", "SDRSVC", "SNAC", "SQLWriter", "VeeamBackupSvc", "VeeamBrokerSvc", "VeeamCatalogSvc", "VeeamCloudSvc", "VeeamDeploymentService", "VeeamDeploySvc", "VeeamEnterpriseManagerSvc", "VeeamHvIntegrationSvc", "VeeamMountSvc", "VeeamNFSSvc", "VeeamRESTSvc", "VeeamTransportSvc", "sms_site_sql_backup", "MsDtsServer", "MsDtsServer100", "MsDtsServer110", "msftesql$PROD", "MSOLAP$SQL_2008", "MSOLAP$SYSTEM_BGC", "MSOLAP$TPS", "MSOLAP$TPSAMA", "MSSQL$BKUPEXEC", "MSSQL$ECWDB2", "MSSQL$PRACTICEMGT", "MSSQL$PRACTTICEBGC", "MSSQL$PROD", "MSSQL$PROFXENGAGEMENT", "MSSQL$SBSMONITORING", "MSSQL$SHAREPOINT", "MSSQL$SQL_2008", "MSSQL$SQLEXPRESS", "MSSQL$SYSTEM_BGC", "MSSQL$TPS", "MSSQL$TPSAMA", "MSSQL$VEEAMSQL2008R2", "MSSQL$VEEAMSQL2012", "MSSQLFDLauncher", "MSSQLFDLauncher$PROFXENGAGEMENT", "MSSQLFDLauncher$SBSMONITORING", "MSSQLFDLauncher$SHAREPOINT", "MSSQLFDLauncher$SQL_2008", "MSSQLFDLauncher$SYSTEM_BGC", "MSSQLFDLauncher$TPS", "MSSQLFDLauncher$TPSAMA", "MSSQLSERVER", "MSSQLServerADHelper", "MSSQLServerADHelper100", "MSSQLServerOLAPService", "MySQL57", "MySQL80", "OracleClientCache80", "ReportServer$SQL_2008", "RESvc", "SQLAgent$BKUPEXEC", "SQLAgent$CITRIX_METAFRAME", "SQLAgent$CXDB", "SQLAgent$ECWDB2", "SQLAgent$PRACTTICEBGC", "SQLAgent$PRACTTICEMGT", "SQLAgent$PROD", "SQLAgent$PROFXENGAGEMENT", "SQLAgent$SBSMONITORING", "SQLAgent$SHAREPOINT", "SQLAgent$SQL_2008", "SQLAgent$SQLEXPRESS", "SQLAgent$SYSTEM_BGC", "SQLAgent$TPS", "SQLAgent$TPSAMA", "SQLAgent$VEEAMSQL2008R2", "SQLAgent$VEEAMSQL2012", "SQLBrowser", "SQLSafeOLRService", "SQLSERVERAGENT", "SQLTELEMETRY", "SQLTELEMETRY$ECWDB2", "mssql$vim_sqlexp", "IISAdmin", "NetMsmqActivator", "POP3Svc", "SstpSvc", "UI0Detect", "W3Svc", "aphidmonitorservice", "intel(r) proset monitoring service", "unistoresvc_1af40a", "audioendpointbuilder", "MSExchangeES", "MSExchangeIS", "MSExchangeMGMT", "MSExchangeMTA", "MSExchangeSA", "MSExchangeSRS", "msexchangeadtopology", "msexchangeimap4", "Sophos Agent", "Sophos AutoUpdate Service", "Sophos Clean Service", "Sophos Device Control Service", "Sophos File Scanner Service", "Sophos Health Service", "Sophos MCS Agent", "Sophos MCS Client", "Sophos Message Router", "Sophos Safestore Service", "Sophos System Protection Service", "Sophos Web Control Service", "AcronisAgent", "Antivirus", "AVP", "DCAgent", "EhttpSrv", "ekrn", "EPSecurityService", "EPUpdateService", "EsgShKernel", "ESHASRV", "FA_Scheduler", "IMAP4Svc", "KAVFS", "KAVFSGT", "kavfsslp", "klnagent", "macmnsvc", "masvc", "MBAMService", "MBEndpointAgent", "McAfeeEngineService", "McAfeeFramework", "McAfeeFrameworkMcAfeeFramework", "McShield", "McTaskManager", "mfefire", "mfemms", "mfevtp", "MSSQL$SOPHOS", "sacsvr", "SAVAdminService", "SAVService", "SepMasterService", "ShMonitor", "Smcinst", "SmcService", "SntpService", "sophossps", "SQLAgent$SOPHsvcGenericHost", "swi_filter", "swi_service", "swi_update", "swi_update_64", "TmCCSF", "tmlisten", "TrueKey", "TrueKeyScheduler", "TrueKeyServiceHelWRSVC", "vapiendpoint"],
  file_ignore_list = ["*.exe", "*.sys", "*.dll", "*.lock64", "*readme_for_decrypt.txt", "*locker.txt", "*unlocker.txt", "%WINDIR%\\", "%PROGRAMFILES%\\", "%PROGRAMW6432%\\", "*\\Microsoft\\", "*\\Windows\\", "*\\Program Files*\\", "%TEMP%\\"],
  file_include_list = ["*"],
  file_wipe_list = [],
  target_file_list = [],
  ransom_note = "\n\r!NPV revo roT esu ot yrT .krowten etaroproc ro yrtnuoc ruoy ni kcolb eb yam resworB roT\n\r\n\r%tob_dic%/&lt;redacted&gt;/&lt;redacted&gt;//:sptth - etisbew ruo tisiv dna resworB roT eht nepO .2\n\r.ti llatsni dna resworB roT daolnwoD .1\n\r\n\r# ?kcab selif ym teg ot woH #\n\r\n\r.etisbew swen ruo no dehsilbup eb lliw tnemyap gnikam ton fo esac ni taht krowten ruoy morf atad dedaolnwod osla evah ew taht noitaredisnoc otni ekaT\n\r.krowten eht erotser rof loot noitpyrced y"
}
</code></pre>

<h2 id="bot-registration">Bot Registration</h2>

<p>To register the victim as a bot, <strong>DIAVOL</strong> first builds the content of the POST request to later be sent to the register remote server.</p>

<p>This is done through combining the bot ID generated in <a href="#bot-id-generation">Bot ID Generation</a> and the hard-coded group ID in the configuration in the following format.</p>

<pre><code class="language-CSS">cid=&lt;bot_ID&gt;&amp;group=&lt;group_ID&gt;&amp;ip_local1=111.111.111.111&amp;ip_local2=222.222.222.222&amp;ip_external=2.16.7.12
</code></pre>

<p><img src="/uploads/diavol19.PNG" alt="alt text" /></p>

<p><em>Figure 19: Building Register Request.</em></p>

<p>Next, the malware allocates memory for the following structure before loading and executing the shellcode from resource <strong>REGISTER</strong>.</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span> <span class="n">DIAVOL_REGISTER_STRUCT</span>
<span class="p">{</span>
  <span class="kt">char</span><span class="o">*</span> <span class="n">agent</span><span class="p">;</span> <span class="c1">// "Agent"</span>
  <span class="kt">char</span><span class="o">*</span> <span class="n">C2_IP_addr</span><span class="p">;</span> <span class="c1">// C2 IP address from configuration or command-line "-s"</span>
  <span class="kt">char</span><span class="o">*</span> <span class="n">request_type</span><span class="p">;</span> <span class="c1">// "POST"</span>
  <span class="kt">char</span><span class="o">*</span> <span class="n">domain_dir</span><span class="p">;</span> <span class="c1">// "/BnpOnspQwtjCA/register"</span>
  <span class="kt">char</span><span class="o">*</span> <span class="n">content_type</span><span class="p">;</span> <span class="c1">// "Content-Type: application/x-www-form-urlencoded; charset=UTF-8"</span>
  <span class="n">__int64</span> <span class="n">content_type_len</span><span class="p">;</span> <span class="c1">// length of content type</span>
  <span class="kt">char</span><span class="o">*</span> <span class="n">payload_content</span><span class="p">;</span> <span class="c1">// register request</span>
  <span class="n">__int64</span> <span class="n">payload_content_len</span><span class="p">;</span> <span class="c1">// length of register request</span>
<span class="p">};</span>
</code></pre></div></div>

<p><img src="/uploads/diavol20.PNG" alt="alt text" /></p>

<p><em>Figure 20: Building Register Structure &amp; Register Bot.</em></p>

<p>To send the POST request, the shellcode <strong>InternetOpenA</strong> to initializes the application’s use of the <strong>WinINet</strong> functions, <strong>InternetConnectA</strong> to connect to the C2 server, <strong>HttpOpenRequestA</strong> to open a POST request at the specified domain directory, and <strong>HttpSendRequestA</strong> to send the crafted POST request.</p>

<p>Finally, the malware calls <strong>HttpQueryInfoA</strong> to query and return the server’s response.</p>

<p><img src="/uploads/diavol21.PNG" alt="alt text" /></p>

<p><em>Figure 21: Sending POST Request To Register Bot.</em></p>

<h2 id="configuration-overriding">Configuration Overriding</h2>

<p>Beside using the command line parameters, <strong>DIAVOL</strong> can also request different values from its remote server to override the configuration fields unlike most major ransomware.</p>

<p>First, the malware checks to make sure the victim has been properly registered as a bot to the main register server by checking if the server’s response code is 200.</p>

<p><img src="/uploads/diavol22.PNG" alt="alt text" /></p>

<p><em>Figure 22: Checking Register Response Code.</em></p>

<p>Next, it loads and executes the shellcode from the resource <strong>FROMNET</strong> to request different configuration values.</p>

<p>For the calls to the shellcode, the malware allocates the following structure before passing it in as a parameter.</p>

<pre><code class="language-C">struct DIAVOL_FROMNET_STRUCT
{
  char* agent; // "Agent"
  char* C2_IP_addr; // "173.232.146.118" (Hard-coded)
  char* request_type; // "GET"
  char* domain_dir; // "/Bnyar8RsK04ug/&lt;bot_ID&gt;/&lt;group_ID&gt;/&lt;field_name&gt;
  char* content_type; // "Content-Type: application/x-www-form-urlencoded; charset=UTF-8"
  __int64 content_type_len; // the length of the content type
};
</code></pre>

<p>For the domain directory of the server’s address, the field name depends on the configuration field the malware is requesting. Once registration is done, <strong>DIAVOL</strong> requests for the following field names:</p>

<ul>
  <li><strong>key</strong>: Base64-encoded RSA key</li>
  <li><strong>services</strong>: service stop list</li>
  <li><strong>priority</strong>: target files to encrypt first</li>
  <li><strong>ignore</strong>: filenames to avoid encrypting</li>
  <li><strong>ext</strong>: filenames to include encrypting</li>
  <li><strong>wipe</strong>: filenames to delete</li>
  <li><strong>landing</strong>: Ransom note</li>
</ul>

<p><img src="/uploads/diavol23.PNG" alt="alt text" /></p>

<p><em>Figure 23: Populating FROMNET Structure.</em></p>

<p>The shellcode calls <strong>InternetConnectA</strong> to connect to the C2 server, <strong>HttpOpenRequestA</strong> to open a GET request, and <strong>HttpSendRequestA</strong> to send the request. Next, it then calls <strong>InternetReadFile</strong> to read the server’s response for the requested field and return that.</p>

<p><img src="/uploads/diavol24.PNG" alt="alt text" /></p>

<p><em>Figure 24: Sending GET Request For Config Field.</em></p>

<p>Next, because the lists in the configuration contains environment variables, DIAVOL resolves them by calling <strong>GetEnvironmentVariableW</strong> and converts them to lowercase using <strong>CharLowerBuffW</strong>.</p>

<p><img src="/uploads/diavol25.PNG" alt="alt text" /></p>

<p><em>Figure 25: Parsing Configuration Lists.</em></p>

<p>Finally, the ransom note in the configuration is reversed and the string <strong>“%cid_bot%”</strong> is replaced with the generated victim ID.</p>

<p><img src="/uploads/diavol26.PNG" alt="alt text" /></p>

<p><em>Figure 26: Building Final Ransom Note.</em></p>

<h2 id="stopping-services">Stopping Services</h2>

<p><strong>DIAVOL</strong> loads and executes the shellcode from the resource <strong>SERVPROC</strong> to stop the services specified in the configuration.</p>

<p><img src="/uploads/diavol27.PNG" alt="alt text" /></p>

<p><em>Figure 27: Loading &amp; Executing SERVPROC.</em></p>

<p>Given a list of services to stop, the shellcode iterates through the list and stops them through the service control manager.</p>

<p>It first calls <strong>OpenSCManagerW</strong> to retrieve a service control manager handle with all access, <strong>OpenServiceW</strong> to retrieve a handle to the target service, and <strong>ControlService</strong> to send a control stop code to stop it.</p>

<p><img src="/uploads/diavol28.PNG" alt="alt text" /></p>

<p><em>Figure 28: Stopping Target Services.</em></p>

<h2 id="terminating-processes">Terminating Processes</h2>

<p><strong>DIAVOL</strong> loads and executes the shellcode from the resource <strong>KILLPR</strong> to terminate the processes specified in the configuration.</p>

<p><img src="/uploads/diavol29.PNG" alt="alt text" /></p>

<p><em>Figure 29: Loading &amp; Executing KILLPR.</em></p>

<p>The shellcode first calls <strong>CreateToolhelp32Snapshot</strong> to take a snapshot of all processes in the system. Using the snapshot, it iterates through each process using <strong>Process32FirstW</strong> and <strong>Process32NextW</strong>. For each process, its executable name is compared against every name in the configuration’s process list to be terminated.</p>

<p><img src="/uploads/diavol30.PNG" alt="alt text" /></p>

<p><img src="/uploads/diavol31.PNG" alt="alt text" /></p>

<p><em>Figure 30, 31: Terminating Target Processes.</em></p>

<h2 id="rsa-initialization">RSA Initialization</h2>

<p>Prior to file encryption, <strong>DIAVOL</strong> sets up the cryptography buffers that are later used to encrypt files.</p>

<p>First, it allocates memory for the following structure before loading and executing the shellcode from resource <strong>RSAINIT</strong>.</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span> <span class="n">DIAVOL_RSAINIT_STRUCT</span>
<span class="p">{</span>
  <span class="n">HCRYPTPROV</span> <span class="n">hCryptProv</span><span class="p">;</span> <span class="c1">// Handle to cryptographic service provider</span>
  <span class="n">BYTE</span><span class="o">*</span> <span class="n">Base64_RSA_key</span><span class="p">;</span> <span class="c1">// Base64-encoded RSA key</span>
  <span class="kt">char</span><span class="o">*</span> <span class="n">container_str</span><span class="p">;</span> <span class="c1">// "MicrosoftCryptoGuard"</span>
  <span class="kt">char</span><span class="o">*</span> <span class="n">provider_str</span><span class="p">;</span> <span class="c1">// "Microsoft Enhanced Cryptographic Provider v1.0"</span>
  <span class="n">BYTE</span><span class="o">*</span> <span class="n">RSA_CRYPT_BUFF</span><span class="p">;</span>
  <span class="n">BYTE</span><span class="o">*</span> <span class="n">RSA_FOOTER</span><span class="p">;</span>
<span class="p">};</span>
</code></pre></div></div>

<p><img src="/uploads/new_diavol32.PNG" alt="alt text" /></p>

<p><em>Figure 32: Loading &amp; Executing RSAINIT.</em></p>

<p>The shellcode’s job is to populate <strong>RSA_FOOTER</strong> field to later be used during file encryption.</p>

<p>First, it calls <strong>CryptStringToBinaryW</strong> to Base64-decode the RSA public key and <strong>CryptAcquireContextW</strong> to retrieve a handle to the corresponding cryptographic service provider.</p>

<p><img src="/uploads/diavol33.PNG" alt="alt text" /></p>

<p><em>Figure 33: Decode RSA Key &amp; Retrieve CSP Handle.</em></p>

<p>Next, the malware calls <strong>CryptImportKey</strong> to import the RSA public key and retrieve the key handle. It calls <strong>VirtualAlloc</strong> to allocate a memory buffer and divides the <strong>RSA_CRYPT_BUFF</strong> buffer into 117-byte blocks. For each block, <strong>DIAVOL</strong> appends it into the allocated buffer and calls <strong>CryptEncrypt</strong> to encrypt it using the RSA key handle.</p>

<p><img src="/uploads/new_diavol34.PNG" alt="alt text" /></p>

<p><em>Figure 34: Importing RSA Public Key &amp; Encrypting <strong>RSA_CRYPT_BUFF</strong>.</em></p>

<p>Finally, the 2304-byte encoded buffer will be copied into the <strong>RSA_FOOTER</strong> buffer. How this and the <strong>RSA_CRYPT_BUFF</strong> buffer are used will later be discussed during <a href="#encryption-file-encryption">file encryption</a>.</p>

<p><img src="/uploads/diavol35.PNG" alt="alt text" /></p>

<p><em>Figure 35: Writing Encrypted Content Into RSA_FOOTER.</em></p>

<h2 id="finding-drives-to-encrypt">Finding Drives To Encrypt</h2>

<p><strong>DIAVOL</strong> loads and executes the shellcode from the resource <strong>ENMDSKS</strong> to enumerate and find all drives in the system when the encryption mode from the command line is <strong>local</strong>, <strong>net</strong>, <strong>scan</strong>, or <strong>all</strong>.</p>

<p>The shellcode receives the list of files to avoid encrypting and a buffer to contain the name of drives found during enumeration as parameters.</p>

<p><img src="/uploads/diavol36.PNG" alt="alt text" /></p>

<p><em>Figure 36: Loading &amp; Executing ENMDSKS.</em></p>

<p>The shellcode first calls <strong>GetLogicalDriveStringsW</strong> to retrieve a list of all the drives in the system. For each drive, its name is converted into lowercase and passed into <strong>GetDriveTypeW</strong> as a parameter to retrieve its type.</p>

<p>The drive only gets processed if its type is <strong>DRIVE_REMOTE</strong> or <strong>DRIVE_FIXED</strong> and its name is not in the list of files to avoid.</p>

<p><img src="/uploads/diavol37.PNG" alt="alt text" /></p>

<p><em>Figure 37: Enumerating Drives.</em></p>

<p>If the drive is valid to be encrypted, its name is appended to the buffer of drives from the shellcode’s parameter.</p>

<p><img src="/uploads/diavol38.PNG" alt="alt text" /></p>

<p><em>Figure 38: Populating Target Drives List.</em></p>

<p>If the drive is a remote drive, the malware calls <strong>WNetGetConnectionW</strong> to retrieve the name of the network resource associated with it.</p>

<p><img src="/uploads/diavol39.PNG" alt="alt text" /></p>

<p><em>Figure 39: Finding Network Resource From Drive Name.</em></p>

<p>Finally, using the name of the network resource, the malware calls <strong>gethostbyname</strong> to retrieve a <strong>hostent</strong> structure that contains the IP address of the remote host.</p>

<p>Finally, <strong>DIAVOL</strong> adds that IP address to the list of files to avoid encrypting.</p>

<p><img src="/uploads/diavol40.PNG" alt="alt text" /></p>

<p><em>Figure 40: Adding Network Resource IP Address To Avoid Enumerating Twice.</em></p>

<h2 id="scanning-target-network-shares-through-smb">Scanning Target Network Shares Through SMB</h2>

<p><strong>DIAVOL</strong> has two different shellcode for scanning network shares using SMB in the <strong>SMBFAST</strong> and <strong>SMB</strong> resources.</p>

<p>The <strong>SMBFAST</strong> shellcode is used to scan for network shares from the target host list given by the <strong>“-h”</strong> command-line parameter.</p>

<p>Prior to launching this shellcode, <strong>DIAVOL</strong> allocates memory for this following structure to contain information about network hosts to enumerate for shares.</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span> <span class="n">DIAVOL_SMB_STRUCT</span>
<span class="p">{</span>
  <span class="n">FARPROC</span> <span class="n">GetProcAddress</span><span class="p">;</span>
  <span class="n">FARPROC</span> <span class="n">memset</span><span class="p">;</span>
  <span class="kt">wchar_t</span> <span class="o">*</span><span class="n">TARGET_NETWORK_SHARE_LIST</span><span class="p">;</span> <span class="c1">// Target network host names to enumerate for shares (from "-h" command-line)</span>
  <span class="n">DWORD</span> <span class="o">*</span><span class="n">remote_host_IP_list</span><span class="p">;</span> <span class="c1">// Buffer to receive IP address of network hosts</span>
  <span class="n">__int64</span> <span class="n">curr_network_share_name</span><span class="p">[</span><span class="mi">16</span><span class="p">];</span> <span class="c1">// Buffer to contain currently-processed share name</span>
  <span class="n">_WORD</span> <span class="n">DNS_server_name</span><span class="p">[</span><span class="mi">260</span><span class="p">];</span> <span class="c1">// Buffer to receive DNS or NetBIOS name of the remote server</span>
  <span class="n">MIB_IPNETTABLE</span> <span class="o">*</span><span class="n">IpNetTable</span><span class="p">;</span>
  <span class="n">MIB_IFROW</span> <span class="n">pIfRow</span><span class="p">;</span>
  <span class="n">__int64</span> <span class="n">unk</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
<span class="p">};</span>
</code></pre></div></div>

<p>The malware also allocates memory for this structure to receive the name of all scanned network resources. Both structures are then passed to the shellcode as parameters.</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span> <span class="n">DIAVOL_SMB_LIST</span>
<span class="p">{</span>
  <span class="n">__int64</span> <span class="n">length</span><span class="p">;</span>
  <span class="kt">char</span> <span class="o">*</span><span class="n">SMB_net_share_list</span><span class="p">;</span>
<span class="p">};</span>
</code></pre></div></div>

<p><img src="/uploads/diavol41.PNG" alt="alt text" /></p>

<p><em>Figure 41: Loading &amp; Executing SMBFAST.</em></p>

<p>Since the <strong>SMBFAST</strong> shellcode only scans for host names in the given target list, it enumerates through the list and writes each network share name into the <strong>curr_network_share_name</strong> field to be processed.</p>

<p>First, the malware calls <strong>gethostbyname</strong> to retrieve a <strong>hostent</strong> structure for the current share name. Using the structure, it extracts the host’s list of IP addresses and appends it to the <strong>remote_host_IP_list</strong> field.</p>

<p><img src="/uploads/diavol42.PNG" alt="alt text" /></p>

<p><em>Figure 42: SMBFAST: Retrieve Target Host IP Addresses.</em></p>

<p>Next, for each IP address retrieve from the host, the malware writes it to the <strong>DIAVOL_SMB_STRUCT-&gt;DNS_server_name</strong> buffer. This is then passed as a parameter to a <strong>NetShareEnum</strong> call to retrieve information about each shared resource on the server with that IP address.</p>

<p><img src="/uploads/diavol43.PNG" alt="alt text" /></p>

<p><em>Figure 43: SMBFAST: Retrieve Share Resource Info From IP Address.</em></p>

<p>Next, for each resource on the server, <strong>DIAVOL</strong> adds it to the <strong>DIAVOL_SMB_LIST-&gt;SMB_net_share_list</strong> buffer in the following format.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="n">Server_IP_Address</span><span class="o">&gt;//&lt;</span><span class="n">Resource_Name</span><span class="o">&gt;//</span><span class="w">
</span></code></pre></div></div>

<p>The resource name is extracted from the <strong>shi1_netname</strong> from the <strong>SHARE_INFO_1</strong> structure that comes from the previous <strong>NetShareEnum</strong> call.</p>

<p><img src="/uploads/diavol44.PNG" alt="alt text" /></p>

<p><img src="/uploads/diavol45.PNG" alt="alt text" /></p>

<p><em>Figure 44, 45: SMBFAST: Adding Share Resource’s Full Path To Output List.</em></p>

<p>The final list is later used to encrypt these shared resources.</p>

<h2 id="scanning-network-shares-in-arp-table-through-smb">Scanning Network Shares In ARP Table Through SMB</h2>

<p>The <strong>SMB</strong> shellcode is used to scan for network shares from the hosts extracted from the <strong>Address Resolution Protocol (ARP)</strong> table.</p>

<p>Prior to launching this shellcode, <strong>DIAVOL</strong> allocates memory for the <strong>DIAVOL_SMB_STRUCT</strong> structure and the <strong>DIAVOL_SMB_LIST</strong> structure similar to the <strong>SMBFAST</strong> shellcode.</p>

<p><img src="/uploads/diavol46.PNG" alt="alt text" /></p>

<p><em>Figure 46: Loading &amp; Executing SMB.</em></p>

<p>First, the shellcode calls <strong>GetIpNetTable</strong> to retrieve the IPv4-to-physical address mapping table on the victim’s machine.</p>

<p>Using that table, the malware extracts the list of <strong>MIB_IPNETROW</strong> structures containing entries for IP addresses in the ARP table. For each <strong>MIB_IPNETROW</strong> structure, <strong>DIAVOL</strong> calls <strong>GetIfEntry</strong> to retrieve information for the specified interface on the local computer.</p>

<p><img src="/uploads/diavol47.PNG" alt="alt text" /></p>

<p><em>Figure 47: SMB: Retrieving Information For IP Addresses In ARP Table.</em></p>

<p>Next, the malware iterates through the <strong>DIAVOL_SMB_STRUCT-&gt;remote_host_IP_list</strong> buffer to check if any given IP address from the “-h” command-line parameter is in the ARP table.</p>

<p><img src="/uploads/diavol48.PNG" alt="alt text" /></p>

<p><em>Figure 48: SMB: Looking Up Target IP Addresses In ARP Table.</em></p>

<p>For each target IP address that is also in the ARP table, the malware writes it to the <strong>DIAVOL_SMB_STRUCT-&gt;DNS_server_name</strong> buffer. This is then passed as a parameter to a <strong>NetShareEnum</strong> call to retrieve information about each shared resource on the server with that IP address.</p>

<p><img src="/uploads/diavol49.PNG" alt="alt text" /></p>

<p><em>Figure 49: SMB: Retrieve Share Resource Info From IP Address.</em></p>

<p>The rest of the code is similar to the <strong>SMBFAST</strong> shellcode. For each resource on the server, <strong>DIAVOL</strong> adds it to the <strong>DIAVOL_SMB_LIST-&gt;SMB_net_share_list</strong> buffer in the following format.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="n">Server_IP_Address</span><span class="o">&gt;//&lt;</span><span class="n">Resource_Name</span><span class="o">&gt;//</span><span class="w">
</span></code></pre></div></div>

<h2 id="encryption-target-file-enumeration">Encryption: Target File Enumeration</h2>

<p><strong>DIAVOL’s</strong> file encryption is divided into three parts. The first part is enumerating and encrypting all files from the target list in the malware’s configuration.</p>

<p>Up to this point, the files and directories in the list can come from the hard-coded values in memory or from the command-line parameter <strong>“-p”</strong>.</p>

<p>First, it allocates memory for the following structure before loading and executing the shellcode from resource <strong>FINDFILES</strong>.</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span> <span class="n">DIAVOL_FINDFILES_STRUCT</span>
<span class="p">{</span>
  <span class="kt">char</span><span class="o">*</span> <span class="n">target_file</span><span class="p">;</span> <span class="c1">// The name of the file/directory to be encrypted</span>
  <span class="n">DIAVOL_CONFIG</span> <span class="o">*</span><span class="n">diavol_config</span><span class="p">;</span> <span class="c1">// Malware configuration</span>
  <span class="n">FARPROC</span> <span class="n">encrypt_file</span><span class="p">;</span> <span class="c1">// Function to encrypt file</span>
<span class="p">};</span>
</code></pre></div></div>

<p>For the <strong>target_file</strong> field, the malware iterates through the target file list and launches the <strong>FINDFILES</strong> shellcode to encrypt each one.</p>

<p><img src="/uploads/diavol50.PNG" alt="alt text" /></p>

<p><em>Figure 50: Loading &amp; Executing FINDFILES.</em></p>

<p>The <strong>FINDFILES</strong> shellcode first converts the target filename to lowercase and checks to make sure the filename does not match with anything in the configuration’s file to ignore list or the target file list (to avoid enumerating a directory twice).</p>

<p>Because the names in the list can contain wildcard characters (<strong>‘*‘</strong> for matching zero or more characters and <strong>’?’</strong> for matching one character), the shellcode contains some additional code to check for that against the target filename.</p>

<p><img src="/uploads/diavol51.PNG" alt="alt text" /></p>

<p><em>Figure 51: Checking To Avoid Encrypting File.</em></p>

<p>Next, <strong>DIAVOL</strong> calls <strong>FindFirstFileW</strong> to begin its enumeration on the target file. For each file it finds, the malware checks and avoids files whose name are <strong>”.”</strong> or <strong>”..”</strong> to infinite recursion during enumeration.</p>

<p><img src="/uploads/diavol52.PNG" alt="alt text" /></p>

<p><em>Figure 52: Starting Enumeration.</em></p>

<p>If the currently processed file is a directory, the malware similarly converts it into lowercase and checks to make sure the filename is not in the file to ignore list or the target file list.</p>

<p>If the found directory is valid to be enumerated, the malware updates the <strong>target_file</strong> field to the directory’s name and recursively calls the <strong>FINDFILES</strong> shellcode function again.</p>

<p>If it is not valid, <strong>DIAVOL</strong> calls <strong>FindNextFileW</strong> to move on to find another file.</p>

<p><img src="/uploads/diavol53.PNG" alt="alt text" /></p>

<p><em>Figure 53: Recursive Traversal On Found Directories.</em></p>

<p>If the currently processed file is a directory, the malware also converts it into lowercase and checks to make sure the filename is not in the file to ignore list or the target file list.</p>

<p>If the filename is in the configuration’s file to wipe list, the malware calls <strong>DeleteFileW</strong> to delete it.</p>

<p><img src="/uploads/diavol54.PNG" alt="alt text" /></p>

<p><em>Figure 54: Deleting File.</em></p>

<p>Next, if the filename’s format matches with anything in the configuration’s file to include list, the malware calls <strong>LocalAlloc</strong> to allocate memory and write the filename in there. Finally, it passes the allocated buffer to the <strong>DIAVOL_FINDFILES_STRUCT-&gt;encrypt_file</strong> function to encrypt it.</p>

<p><img src="/uploads/diavol55.PNG" alt="alt text" /></p>

<p><em>Figure 55: Sending File To Be Encrypted.</em></p>

<p>Once the enumeration is done for the original target file, the malware calls <strong>FindClose</strong> to close the file search handle and pass the target file’s name to the <strong>DIAVOL_FINDFILES_STRUCT-&gt;encrypt_file</strong> function to encrypt it.</p>

<p><img src="/uploads/diavol56.PNG" alt="alt text" /></p>

<p><em>Figure 56: Closing Search Handle &amp; Encrypting Target File.</em></p>

<p>The <strong>encrypt_file</strong> function will be analyzed in <a href="#encryption-file-encryption">a later section</a>. This function can either take in a directory name or a filename as the parameter.</p>

<h2 id="encryption-remote-file-enumeration-through-smb">Encryption: Remote File Enumeration Through SMB</h2>

<p>After scanning the network for network share resources through the <strong>SMBFAST</strong> and <strong>SMB</strong> shellcodes, the malware spawns threads to enumerate the resources in those lists.</p>

<p>Prior to each <strong>thread_encrypt</strong> call, the malware updates the <strong>target_file</strong> field to contain each resource list from the two shellcodes.</p>

<p><img src="/uploads/diavol57.PNG" alt="alt text" /></p>

<p><em>Figure 57: Setting Up Network Resource Enumeration.</em></p>

<p>The <strong>thread_encrypt</strong> function calls <strong>CreateThread</strong> to create a suspended thread launching an inner function with the <strong>FINDFILES</strong> structure passed in as parameter.</p>

<p><strong>DIAVOL</strong> also passes the thread handle to a global handle array to later launch it.</p>

<p><img src="/uploads/diavol58.PNG" alt="alt text" /></p>

<p><em>Figure 58: Launching Suspended Thread To Enumerate Share Resource.</em></p>

<p>For each resource in the list, the thread executes the <strong>FINDFILES</strong> to enumerate it.</p>

<p><img src="/uploads/diavol59.PNG" alt="alt text" /></p>

<p><em>Figure 59: Thread To Launch FINDFILES Shellcode To Enumerate Resource.</em></p>

<p>Finally, to launch all these threads to begin the remote file enumeration, the malware iterates through the global handle array and calls <strong>ResumeThread</strong> on each thread handle.</p>

<p><img src="/uploads/diavol60.PNG" alt="alt text" /></p>

<p><em>Figure 60: Resuming Suspended Threads To Begin Enumeration.</em></p>

<h2 id="encryption-system-drives-enumeration">Encryption: System Drives Enumeration</h2>

<p>The final part of the enumeration is on the local and network drives retrieved from the <strong>ENMDSKS</strong> shellcode in <a href="#finding-drives-to-encrypt">the previous section</a>.</p>

<p>The list of drives to encrypt is passed to the <strong>target_file</strong> field in the <strong>FINDFILES</strong> structure, and the malware launches the <strong>FINDFILES</strong> shellcode to enumerate and encrypt each drive.</p>

<p><img src="/uploads/diavol61.PNG" alt="alt text" /></p>

<p><em>Figure 61: Enumerating &amp; Encrypting Network + Local Drives.</em></p>

<h2 id="encryption-file-encryption">Encryption: File Encryption</h2>

<p>The <strong>encrypt_file</strong> used in the <strong>FINDFILES</strong> shellcode takes in the name of a directory/file to encrypt.</p>

<p>First, it sets up the following structure.</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span> <span class="n">DIAVOL_ENCDEFILES_TRUCT</span>
<span class="p">{</span>
  <span class="n">HANDLE</span> <span class="n">RSA_hKey</span><span class="p">;</span> <span class="c1">// RSA Public Key Handle</span>
  <span class="kt">wchar_t</span> <span class="o">*</span><span class="n">file_name</span><span class="p">;</span> <span class="c1">// filename to encrypt</span>
  <span class="n">__int64</span> <span class="n">MAX_FILE_CRYPT_PERCENT</span><span class="p">;</span> <span class="c1">// From the "-perc" command-line parameter</span>
  <span class="n">FARPROC</span> <span class="n">calculate_percent</span><span class="p">;</span> <span class="c1">// function to calculate percent (a / b * c where b is 100)</span>
  <span class="n">BYTE</span> <span class="o">*</span><span class="n">RSA_CRYPT_BUFF</span><span class="p">;</span>
  <span class="n">BYTE</span> <span class="o">*</span><span class="n">RSA_FOOTER</span><span class="p">;</span>
  <span class="n">FARPROC</span> <span class="n">log_to_file</span><span class="p">;</span> <span class="c1">// logging function</span>
<span class="p">};</span>
</code></pre></div></div>

<p><img src="/uploads/new_diavol62.PNG" alt="alt text" /></p>

<p><em>Figure 62: Populating ENCDEFILES Structure.</em></p>

<p>If the name from the parameter is a directory, <strong>DIAVOL</strong> calls <strong>SetCurrentDirectoryW</strong> to change the current directory for the malware’s process to the directory’s name.</p>

<p>It then calls <strong>CreateFileW</strong> to create the ransom note file and <strong>WriteFile</strong> to write the ransom note in there.</p>

<p><img src="/uploads/diavol63.PNG" alt="alt text" /></p>

<p><em>Figure 63: Dropping Ransom Note.</em></p>

<p>Earlier, before setting up the <strong>FINDFILES</strong> shellcode, the malware also loads the <strong>ENCDEFILE</strong> shellcode into another buffer in memory.</p>

<p>When the name from the parameter is of a file, the malware launches the <strong>ENCDEFILE</strong> shellcode to encrypt it.</p>

<p><img src="/uploads/diavol64.PNG" alt="alt text" /></p>

<p><em>Figure 64: Launching ENCDEFILE Shellcode To Encrypt File.</em></p>

<p>To encrypt the file, the shellcode first calls <strong>CreateFileW</strong> to retrieve a handle for the target file.</p>

<p>It then calls <strong>GetFileSizeEx</strong> to retrieve the size of the file and calculates the maximum size to encrypt the file. This is done by calculating the <strong>MAX_FILE_CRYPT_PERCENT</strong> percent from the total file size.</p>

<p>Next, the file is encrypted in 2048-byte blocks each, and the malware allocates a 2048-byte buffer using <strong>VirtualAlloc</strong> to host this data. For each block, <strong>DIAVOL</strong> calls <strong>ReadFile</strong> to read data into the allocated buffer and encrypts it using the <strong>RSA_CRYPT_BUFF</strong> buffer.</p>

<p>It then calls <strong>SetFilePointerEx</strong> to set the file pointer to the beginning of the newly encrypted block and calls <strong>WriteFile</strong> to write the encrypted block back in.</p>

<p>After the encryption is finished, <strong>DIAVOL</strong> calls <strong>SetFilePointerEx</strong> to set the file pointer to the end of the file. It then calls <strong>WriteFile</strong> to write to the end the <strong>RSA_FOOTER</strong> buffer, the max file size to encrypt, and the negation of every byte of that size.</p>

<p>Using this file footer, the threat actor’s decryptor can retrieve the <strong>RSA_FOOTER</strong> buffer and decrypt it into the <strong>RSA_CRYPT_BUFF</strong> buffer using their RSA private key to decrypt the file.</p>

<p><img src="/uploads/diavol66.PNG" alt="alt text" /></p>

<p><em>Figure 66: Writing File Footer.</em></p>

<p>Finally, <strong>DIAVOL</strong> calls <strong>VirtualAlloc</strong> to allocate a buffer to store the encrypted filename. It writes the original filename in this buffer and appends it with the extension <strong>“.lock64”</strong> before calling <strong>MoveFileW</strong> to change the filename.</p>

<p><img src="/uploads/diavol67.PNG" alt="alt text" /></p>

<p><em>Figure 67: Setting Encrypted File Extension.</em></p>

<h2 id="shadow-copies-deletion">Shadow Copies Deletion</h2>

<p>To delete all shadow copies on the system, <strong>DIAVOL</strong> loads and executes the shellcode from the <strong>VSSMOD</strong> resource.</p>

<p><img src="/uploads/diavol68.PNG" alt="alt text" /></p>

<p><em>Figure 68: Loading &amp; Executing VSSMOD.</em></p>

<p>First, the shellcode resolves these two stackstrings:</p>

<ul>
  <li>“CompSpec”</li>
  <li>“/c vssadmin Delete Shadows /All /Quiet » NULL”</li>
</ul>

<p><img src="/uploads/diavol69.PNG" alt="alt text" />
<img src="/uploads/diavol70.PNG" alt="alt text" /></p>

<p><em>Figure 69, 70: Resolving Stackstrings.</em></p>

<p>Next, it calls <strong>GetEnvironmentVariableW</strong> on the “CompSpec” string to retrieve a full path to the command-line interpreter.</p>

<p>With that, it calls <strong>ShellExecuteW</strong> to execute the command <strong>“vssadmin Delete Shadows /All /Quiet » NULL”</strong> to delete all shadow copies on the system.</p>

<p><img src="/uploads/diavol71.PNG" alt="alt text" /></p>

<p><em>Figure 71: Deleting Shadow Copies.</em></p>

<h2 id="changing-desktop-image">Changing Desktop Image</h2>

<p>To change the desktop image, <strong>DIAVOL</strong> loads and executes the shellcode from the <strong>CHNGDESK</strong> resource.</p>

<p><img src="/uploads/diavol72.PNG" alt="alt text" /></p>

<p><em>Figure 72: Loading &amp; Executing CHNGDESK.</em></p>

<p>The shellcode first resolves the following stackstrings:</p>

<ul>
  <li>”.\encr.bmp”</li>
  <li>“Control Panel\Desktop”</li>
  <li>“Wallpaper”</li>
  <li>“WallpaperOld”</li>
</ul>

<p>Next, it calls <strong>RegOpenKeyExW</strong> to retrieve the registry key using the sub key <strong>“Control Panel\Desktop”</strong>. With the registry key, the malware calls <strong>RegQueryValueExW</strong> to query the path to the current wallpaper image and <strong>RegSetValueExW</strong> to set that path as the value of <strong>“WallpaperOld”</strong>.</p>

<p><img src="/uploads/diavol73.PNG" alt="alt text" /></p>

<p><em>Figure 73: Setting WallpaperOld Registry Value.</em></p>

<p>To build the bitmap path to drop on the system, the malware calls <strong>GetDesktopWindow</strong> and <strong>SHGetSpecialFolderPathW</strong> to retrieve the path to the special folder containing image files common to all users. It then appends <strong>“encr.bmp”</strong> to that path.</p>

<p><img src="/uploads/diavol74.PNG" alt="alt text" /></p>

<p><em>Figure 74: Building Bitmap Path.</em></p>

<p>To build the bitmap from scratch, <strong>DIAVOL</strong> calls <strong>CreateCompatibleDC</strong>, <strong>GetDesktopWindow</strong>, and <strong>CreateDIBSection</strong> to create a bitmap as big as the current desktop window size. It also calls <strong>GetStockObject</strong> to set the bitmap’s background to black and <strong>SetTextColor</strong> to set the text color to white.</p>

<p><img src="/uploads/diavol75.PNG" alt="alt text" /></p>

<p><em>Figure 75: Creating Background Bitmap.</em></p>

<p>Next, it resolves the following stackstrings:</p>

<ul>
  <li>“All your files are encrypted!”</li>
  <li>“For more information see README-FOR-DECRYPT.txt”</li>
</ul>

<p>The malware then calls <strong>DrawTextW</strong> to write these two strings into the bitmap, <strong>CreateFileW</strong> to create the bitmap file in the special folder, and <strong>WriteFile</strong> to write the generated bitmap into the file.</p>

<p><img src="/uploads/diavol76.PNG" alt="alt text" /></p>

<p><em>Figure 76: Writing Bitmap Data To File.</em></p>

<p>Finally, it calls <strong>SystemParametersInfoW</strong> to set wallpaper to the newly created bitmap file.</p>

<p><img src="/uploads/diavol77.PNG" alt="alt text" /></p>

<p><em>Figure 77: Setting Wallpaper To Generated Bitmap.</em></p>

<h2 id="self-deletion">Self Deletion</h2>

<p>After finishing file encryption and changing the wallpaper, the malware deletes its own executable.</p>

<p>First, it calls <strong>GetModuleFileNameW</strong> to retrieve its own executable path. Then it builds the following string using that.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s2">"/c del &lt;malware_executable_path&gt; &gt;&gt; NULL"</span><span class="w">
</span></code></pre></div></div>

<p><img src="/uploads/diavol78.PNG" alt="alt text" /></p>

<p><em>Figure 78: Building CMD Parameter.</em></p>

<p>Next, it calls <strong>GetEnvironmentVariableW</strong> on the “CompSpec” string to retrieve a full path to the command-line interpreter.</p>

<p>With that, it calls <strong>ShellExecuteW</strong> to execute the parameter above to delete its own executable.</p>

<p><img src="/uploads/diavol79.PNG" alt="alt text" /></p>

<p><em>Figure 79: Deleting Its Own Executable.</em></p>

<h2 id="logging">Logging</h2>

<p>Throughout its execution, <strong>DIAVOL</strong> logs all of its operations when logging is enabled through command-line.</p>

<p>In the logging function, the malware receives a string as a parameter. It calls <strong>GetLocalTime</strong> to retrieve the current system time when the logging occurs and write that to the log file buffer.</p>

<p>The malware then appends the input string parameter to the log file buffer and calls <strong>WriteFile</strong> to write to the log file.</p>

<p><img src="/uploads/diavol80.PNG" alt="alt text" /></p>

<p><em>Figure 80: Logging Functionality.</em></p>

<h2 id="references">References</h2>

<p>https://www.fortinet.com/blog/threat-research/diavol-new-ransomware-used-by-wizard-spider</p>

<p>https://securityintelligence.com/posts/analysis-of-diavol-ransomware-link-trickbot-gang/</p>

<p>yashechka, don’t be too distanced ;) Just wanna say hi on XSS</p>


    <div class="share">
  
    
      
      
      
      

      

      <a class="button" href="https://twitter.com/intent/tweet/?url=https://cdong1012.github.io//reverse%20engineering/2021/12/17/DiavolRansomware/&text=Diavol%20Ransomware&via=cPeterr" style="background: #0d94e7">Twitter&nbsp; <svg width="16" height="16" class="icon  icon--twitter" role="img" alt="twitter"><title>twitter</title><use xlink:href="#twitter" fill="CurrentColor"></use></svg>
</a>

    
  
    
      
      
      
      

      

      <a class="button" href="https://facebook.com/sharer/sharer.php?u=https://cdong1012.github.io//reverse%20engineering/2021/12/17/DiavolRansomware/" style="background: #3B5998">Facebook&nbsp; <svg width="16" height="16" class="icon  icon--facebook" role="img" alt="facebook"><title>facebook</title><use xlink:href="#facebook" fill="CurrentColor"></use></svg>
</a>

    
  
    
      
      
      
      

      

      <a class="button" href="mailto:?subject=Diavol Ransomware&body=Hey, check out this: https://cdong1012.github.io//reverse%20engineering/2021/12/17/DiavolRansomware/" style="background: true">Email&nbsp; <svg width="16" height="16" class="icon  icon--email" role="img" alt="email"><title>email</title><use xlink:href="#email" fill="CurrentColor"></use></svg>
</a>

    
  
</div>


    


  </article>

  

</main>

<footer class="footer">
  <div class="container">
    <div class="copyright  typeset">
      <small class="small">&copy; Chuong Dong 2024</small>
    </div>

    
<nav class="nav  nav--footer">
  <ul class="list list--nav">
    

      

      <li class="item  item--nav">
        <a href="https://cdong1012.github.io">Chuong's Security Blog</a>
      </li>
    
  </ul>
</nav>


  </div>
</footer>


    <script type="text/javascript">
(() => {
  const registerServiceWorker = () => {
    if (!navigator.serviceWorker) {
      return;
    }

    navigator.serviceWorker
      .register("/sw.js")
      .then(registration => {
        console.log("Service Worker: registered");
      })
      .catch(err => {
        console.log("Service Worker: registration failed ", err);
      });
  };

  registerServiceWorker();
})();
</script>


    <!-- Overwrite this file with code you want before the closing body tag -->

  </body>

</html>
