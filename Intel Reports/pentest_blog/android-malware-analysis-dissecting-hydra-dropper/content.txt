<!doctype html>
<!--[if !IE]>
<html class="no-js non-ie" lang="en-US"> <![endif]-->
<!--[if IE 7 ]>
<html class="no-js ie7" lang="en-US"> <![endif]-->
<!--[if IE 8 ]>
<html class="no-js ie8" lang="en-US"> <![endif]-->
<!--[if IE 9 ]>
<html class="no-js ie9" lang="en-US"> <![endif]-->
<!--[if gt IE 9]><!-->
<html class="no-js" lang="en-US"> <!--<![endif]-->
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="theme-color" content="">
<link rel="profile" href="http://gmpg.org/xfn/11">

<title>Android Malware Analysis : Dissecting Hydra Dropper &#8211; Pentest Blog</title>
<meta name='robots' content='max-image-preview:large' />
<link rel='dns-prefetch' href='//www.googletagmanager.com' />
<link rel='dns-prefetch' href='//fonts.googleapis.com' />
<link rel="alternate" type="application/rss+xml" title="Pentest Blog &raquo; Feed" href="https://pentest.blog/feed/" />
<link rel="alternate" type="application/rss+xml" title="Pentest Blog &raquo; Comments Feed" href="https://pentest.blog/comments/feed/" />
<link rel="alternate" type="application/rss+xml" title="Pentest Blog &raquo; Android Malware Analysis : Dissecting Hydra Dropper Comments Feed" href="https://pentest.blog/android-malware-analysis-dissecting-hydra-dropper/feed/" />
<script type="text/javascript">
/* <![CDATA[ */
window._wpemojiSettings = {"baseUrl":"https:\/\/s.w.org\/images\/core\/emoji\/15.0.3\/72x72\/","ext":".png","svgUrl":"https:\/\/s.w.org\/images\/core\/emoji\/15.0.3\/svg\/","svgExt":".svg","source":{"concatemoji":"https:\/\/pentest.blog\/wp-includes\/js\/wp-emoji-release.min.js?ver=6.5.3"}};
/*! This file is auto-generated */
!function(i,n){var o,s,e;function c(e){try{var t={supportTests:e,timestamp:(new Date).valueOf()};sessionStorage.setItem(o,JSON.stringify(t))}catch(e){}}function p(e,t,n){e.clearRect(0,0,e.canvas.width,e.canvas.height),e.fillText(t,0,0);var t=new Uint32Array(e.getImageData(0,0,e.canvas.width,e.canvas.height).data),r=(e.clearRect(0,0,e.canvas.width,e.canvas.height),e.fillText(n,0,0),new Uint32Array(e.getImageData(0,0,e.canvas.width,e.canvas.height).data));return t.every(function(e,t){return e===r[t]})}function u(e,t,n){switch(t){case"flag":return n(e,"\ud83c\udff3\ufe0f\u200d\u26a7\ufe0f","\ud83c\udff3\ufe0f\u200b\u26a7\ufe0f")?!1:!n(e,"\ud83c\uddfa\ud83c\uddf3","\ud83c\uddfa\u200b\ud83c\uddf3")&&!n(e,"\ud83c\udff4\udb40\udc67\udb40\udc62\udb40\udc65\udb40\udc6e\udb40\udc67\udb40\udc7f","\ud83c\udff4\u200b\udb40\udc67\u200b\udb40\udc62\u200b\udb40\udc65\u200b\udb40\udc6e\u200b\udb40\udc67\u200b\udb40\udc7f");case"emoji":return!n(e,"\ud83d\udc26\u200d\u2b1b","\ud83d\udc26\u200b\u2b1b")}return!1}function f(e,t,n){var r="undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope?new OffscreenCanvas(300,150):i.createElement("canvas"),a=r.getContext("2d",{willReadFrequently:!0}),o=(a.textBaseline="top",a.font="600 32px Arial",{});return e.forEach(function(e){o[e]=t(a,e,n)}),o}function t(e){var t=i.createElement("script");t.src=e,t.defer=!0,i.head.appendChild(t)}"undefined"!=typeof Promise&&(o="wpEmojiSettingsSupports",s=["flag","emoji"],n.supports={everything:!0,everythingExceptFlag:!0},e=new Promise(function(e){i.addEventListener("DOMContentLoaded",e,{once:!0})}),new Promise(function(t){var n=function(){try{var e=JSON.parse(sessionStorage.getItem(o));if("object"==typeof e&&"number"==typeof e.timestamp&&(new Date).valueOf()<e.timestamp+604800&&"object"==typeof e.supportTests)return e.supportTests}catch(e){}return null}();if(!n){if("undefined"!=typeof Worker&&"undefined"!=typeof OffscreenCanvas&&"undefined"!=typeof URL&&URL.createObjectURL&&"undefined"!=typeof Blob)try{var e="postMessage("+f.toString()+"("+[JSON.stringify(s),u.toString(),p.toString()].join(",")+"));",r=new Blob([e],{type:"text/javascript"}),a=new Worker(URL.createObjectURL(r),{name:"wpTestEmojiSupports"});return void(a.onmessage=function(e){c(n=e.data),a.terminate(),t(n)})}catch(e){}c(n=f(s,u,p))}t(n)}).then(function(e){for(var t in e)n.supports[t]=e[t],n.supports.everything=n.supports.everything&&n.supports[t],"flag"!==t&&(n.supports.everythingExceptFlag=n.supports.everythingExceptFlag&&n.supports[t]);n.supports.everythingExceptFlag=n.supports.everythingExceptFlag&&!n.supports.flag,n.DOMReady=!1,n.readyCallback=function(){n.DOMReady=!0}}).then(function(){return e}).then(function(){var e;n.supports.everything||(n.readyCallback(),(e=n.source||{}).concatemoji?t(e.concatemoji):e.wpemoji&&e.twemoji&&(t(e.twemoji),t(e.wpemoji)))}))}((window,document),window._wpemojiSettings);
/* ]]> */
</script>
<style id='wp-emoji-styles-inline-css' type='text/css'>

	img.wp-smiley, img.emoji {
		display: inline !important;
		border: none !important;
		box-shadow: none !important;
		height: 1em !important;
		width: 1em !important;
		margin: 0 0.07em !important;
		vertical-align: -0.1em !important;
		background: none !important;
		padding: 0 !important;
	}
</style>
<link rel='stylesheet' id='wp-block-library-css' href='https://pentest.blog/wp-includes/css/dist/block-library/style.min.css?ver=6.5.3' type='text/css' media='all' />
<style id='classic-theme-styles-inline-css' type='text/css'>
/*! This file is auto-generated */
.wp-block-button__link{color:#fff;background-color:#32373c;border-radius:9999px;box-shadow:none;text-decoration:none;padding:calc(.667em + 2px) calc(1.333em + 2px);font-size:1.125em}.wp-block-file__button{background:#32373c;color:#fff;text-decoration:none}
</style>
<style id='global-styles-inline-css' type='text/css'>
body{--wp--preset--color--black: #000000;--wp--preset--color--cyan-bluish-gray: #abb8c3;--wp--preset--color--white: #ffffff;--wp--preset--color--pale-pink: #f78da7;--wp--preset--color--vivid-red: #cf2e2e;--wp--preset--color--luminous-vivid-orange: #ff6900;--wp--preset--color--luminous-vivid-amber: #fcb900;--wp--preset--color--light-green-cyan: #7bdcb5;--wp--preset--color--vivid-green-cyan: #00d084;--wp--preset--color--pale-cyan-blue: #8ed1fc;--wp--preset--color--vivid-cyan-blue: #0693e3;--wp--preset--color--vivid-purple: #9b51e0;--wp--preset--gradient--vivid-cyan-blue-to-vivid-purple: linear-gradient(135deg,rgba(6,147,227,1) 0%,rgb(155,81,224) 100%);--wp--preset--gradient--light-green-cyan-to-vivid-green-cyan: linear-gradient(135deg,rgb(122,220,180) 0%,rgb(0,208,130) 100%);--wp--preset--gradient--luminous-vivid-amber-to-luminous-vivid-orange: linear-gradient(135deg,rgba(252,185,0,1) 0%,rgba(255,105,0,1) 100%);--wp--preset--gradient--luminous-vivid-orange-to-vivid-red: linear-gradient(135deg,rgba(255,105,0,1) 0%,rgb(207,46,46) 100%);--wp--preset--gradient--very-light-gray-to-cyan-bluish-gray: linear-gradient(135deg,rgb(238,238,238) 0%,rgb(169,184,195) 100%);--wp--preset--gradient--cool-to-warm-spectrum: linear-gradient(135deg,rgb(74,234,220) 0%,rgb(151,120,209) 20%,rgb(207,42,186) 40%,rgb(238,44,130) 60%,rgb(251,105,98) 80%,rgb(254,248,76) 100%);--wp--preset--gradient--blush-light-purple: linear-gradient(135deg,rgb(255,206,236) 0%,rgb(152,150,240) 100%);--wp--preset--gradient--blush-bordeaux: linear-gradient(135deg,rgb(254,205,165) 0%,rgb(254,45,45) 50%,rgb(107,0,62) 100%);--wp--preset--gradient--luminous-dusk: linear-gradient(135deg,rgb(255,203,112) 0%,rgb(199,81,192) 50%,rgb(65,88,208) 100%);--wp--preset--gradient--pale-ocean: linear-gradient(135deg,rgb(255,245,203) 0%,rgb(182,227,212) 50%,rgb(51,167,181) 100%);--wp--preset--gradient--electric-grass: linear-gradient(135deg,rgb(202,248,128) 0%,rgb(113,206,126) 100%);--wp--preset--gradient--midnight: linear-gradient(135deg,rgb(2,3,129) 0%,rgb(40,116,252) 100%);--wp--preset--font-size--small: 13px;--wp--preset--font-size--medium: 20px;--wp--preset--font-size--large: 36px;--wp--preset--font-size--x-large: 42px;--wp--preset--spacing--20: 0.44rem;--wp--preset--spacing--30: 0.67rem;--wp--preset--spacing--40: 1rem;--wp--preset--spacing--50: 1.5rem;--wp--preset--spacing--60: 2.25rem;--wp--preset--spacing--70: 3.38rem;--wp--preset--spacing--80: 5.06rem;--wp--preset--shadow--natural: 6px 6px 9px rgba(0, 0, 0, 0.2);--wp--preset--shadow--deep: 12px 12px 50px rgba(0, 0, 0, 0.4);--wp--preset--shadow--sharp: 6px 6px 0px rgba(0, 0, 0, 0.2);--wp--preset--shadow--outlined: 6px 6px 0px -3px rgba(255, 255, 255, 1), 6px 6px rgba(0, 0, 0, 1);--wp--preset--shadow--crisp: 6px 6px 0px rgba(0, 0, 0, 1);}:where(.is-layout-flex){gap: 0.5em;}:where(.is-layout-grid){gap: 0.5em;}body .is-layout-flex{display: flex;}body .is-layout-flex{flex-wrap: wrap;align-items: center;}body .is-layout-flex > *{margin: 0;}body .is-layout-grid{display: grid;}body .is-layout-grid > *{margin: 0;}:where(.wp-block-columns.is-layout-flex){gap: 2em;}:where(.wp-block-columns.is-layout-grid){gap: 2em;}:where(.wp-block-post-template.is-layout-flex){gap: 1.25em;}:where(.wp-block-post-template.is-layout-grid){gap: 1.25em;}.has-black-color{color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-color{color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-color{color: var(--wp--preset--color--white) !important;}.has-pale-pink-color{color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-color{color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-color{color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-color{color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-color{color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-color{color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-color{color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-color{color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-color{color: var(--wp--preset--color--vivid-purple) !important;}.has-black-background-color{background-color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-background-color{background-color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-background-color{background-color: var(--wp--preset--color--white) !important;}.has-pale-pink-background-color{background-color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-background-color{background-color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-background-color{background-color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-background-color{background-color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-background-color{background-color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-background-color{background-color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-background-color{background-color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-background-color{background-color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-background-color{background-color: var(--wp--preset--color--vivid-purple) !important;}.has-black-border-color{border-color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-border-color{border-color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-border-color{border-color: var(--wp--preset--color--white) !important;}.has-pale-pink-border-color{border-color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-border-color{border-color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-border-color{border-color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-border-color{border-color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-border-color{border-color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-border-color{border-color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-border-color{border-color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-border-color{border-color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-border-color{border-color: var(--wp--preset--color--vivid-purple) !important;}.has-vivid-cyan-blue-to-vivid-purple-gradient-background{background: var(--wp--preset--gradient--vivid-cyan-blue-to-vivid-purple) !important;}.has-light-green-cyan-to-vivid-green-cyan-gradient-background{background: var(--wp--preset--gradient--light-green-cyan-to-vivid-green-cyan) !important;}.has-luminous-vivid-amber-to-luminous-vivid-orange-gradient-background{background: var(--wp--preset--gradient--luminous-vivid-amber-to-luminous-vivid-orange) !important;}.has-luminous-vivid-orange-to-vivid-red-gradient-background{background: var(--wp--preset--gradient--luminous-vivid-orange-to-vivid-red) !important;}.has-very-light-gray-to-cyan-bluish-gray-gradient-background{background: var(--wp--preset--gradient--very-light-gray-to-cyan-bluish-gray) !important;}.has-cool-to-warm-spectrum-gradient-background{background: var(--wp--preset--gradient--cool-to-warm-spectrum) !important;}.has-blush-light-purple-gradient-background{background: var(--wp--preset--gradient--blush-light-purple) !important;}.has-blush-bordeaux-gradient-background{background: var(--wp--preset--gradient--blush-bordeaux) !important;}.has-luminous-dusk-gradient-background{background: var(--wp--preset--gradient--luminous-dusk) !important;}.has-pale-ocean-gradient-background{background: var(--wp--preset--gradient--pale-ocean) !important;}.has-electric-grass-gradient-background{background: var(--wp--preset--gradient--electric-grass) !important;}.has-midnight-gradient-background{background: var(--wp--preset--gradient--midnight) !important;}.has-small-font-size{font-size: var(--wp--preset--font-size--small) !important;}.has-medium-font-size{font-size: var(--wp--preset--font-size--medium) !important;}.has-large-font-size{font-size: var(--wp--preset--font-size--large) !important;}.has-x-large-font-size{font-size: var(--wp--preset--font-size--x-large) !important;}
.wp-block-navigation a:where(:not(.wp-element-button)){color: inherit;}
:where(.wp-block-post-template.is-layout-flex){gap: 1.25em;}:where(.wp-block-post-template.is-layout-grid){gap: 1.25em;}
:where(.wp-block-columns.is-layout-flex){gap: 2em;}:where(.wp-block-columns.is-layout-grid){gap: 2em;}
.wp-block-pullquote{font-size: 1.5em;line-height: 1.6;}
</style>
<link rel='stylesheet' id='asciinema-player-css-css' href='https://pentest.blog/wp-content/plugins/asciiplayer/asciinema-player.css?ver=2.4.1' type='text/css' media='all' />
<link rel='stylesheet' id='sparkling-bootstrap-css' href='https://pentest.blog/wp-content/themes/sparkling/assets/css/bootstrap.min.css?ver=6.5.3' type='text/css' media='all' />
<link rel='stylesheet' id='sparkling-icons-css' href='https://pentest.blog/wp-content/themes/sparkling/assets/css/fontawesome-all.min.css?ver=5.1.1.' type='text/css' media='all' />
<link rel='stylesheet' id='sparkling-fonts-css' href='//fonts.googleapis.com/css?family=Open+Sans%3A400italic%2C400%2C600%2C700%7CRoboto+Slab%3A400%2C300%2C700&#038;ver=6.5.3' type='text/css' media='all' />
<link rel='stylesheet' id='sparkling-style-css' href='https://pentest.blog/wp-content/themes/sparkling/style.css?ver=2.4.2' type='text/css' media='all' />
<link rel='stylesheet' id='enlighterjs-css' href='https://pentest.blog/wp-content/plugins/enlighter/cache/enlighterjs.min.css?ver=vLiMInY5I09xi1g' type='text/css' media='all' />
<script type="text/javascript" src="https://pentest.blog/wp-includes/js/jquery/jquery.min.js?ver=3.7.1" id="jquery-core-js"></script>
<script type="text/javascript" src="https://pentest.blog/wp-includes/js/jquery/jquery-migrate.min.js?ver=3.4.1" id="jquery-migrate-js"></script>
<script type="text/javascript" src="https://pentest.blog/wp-content/themes/sparkling/assets/js/vendor/bootstrap.min.js?ver=6.5.3" id="sparkling-bootstrapjs-js"></script>
<script type="text/javascript" src="https://pentest.blog/wp-content/themes/sparkling/assets/js/functions.js?ver=20180503" id="sparkling-functions-js"></script>

<!-- Google Analytics snippet added by Site Kit -->
<script type="text/javascript" src="https://www.googletagmanager.com/gtag/js?id=GT-MK4L4F6" id="google_gtagjs-js" async></script>
<script type="text/javascript" id="google_gtagjs-js-after">
/* <![CDATA[ */
window.dataLayer = window.dataLayer || [];function gtag(){dataLayer.push(arguments);}
gtag('set', 'linker', {"domains":["pentest.blog"]} );
gtag("js", new Date());
gtag("set", "developer_id.dZTNiMT", true);
gtag("config", "GT-MK4L4F6");
/* ]]> */
</script>

<!-- End Google Analytics snippet added by Site Kit -->
<link rel="https://api.w.org/" href="https://pentest.blog/wp-json/" /><link rel="alternate" type="application/json" href="https://pentest.blog/wp-json/wp/v2/posts/2182" /><link rel="EditURI" type="application/rsd+xml" title="RSD" href="https://pentest.blog/xmlrpc.php?rsd" />
<meta name="generator" content="WordPress 6.5.3" />
<link rel="canonical" href="https://pentest.blog/android-malware-analysis-dissecting-hydra-dropper/" />
<link rel='shortlink' href='https://pentest.blog/?p=2182' />
<link rel="alternate" type="application/json+oembed" href="https://pentest.blog/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fpentest.blog%2Fandroid-malware-analysis-dissecting-hydra-dropper%2F" />
<meta name="generator" content="Site Kit by Google 1.119.0" /><style type="text/css">.entry-content {font-family: Tahoma, Geneva;}.entry-content {font-size:15px}</style><style type="text/css">.recentcomments a{display:inline !important;padding:0 !important;margin:0 !important;}</style>		<style type="text/css">
				.navbar > .container .navbar-brand {
			color: #dadada;
		}
		</style>
	<link rel="icon" href="https://pentest.blog/wp-content/uploads/logo-favicon.png" sizes="32x32" />
<link rel="icon" href="https://pentest.blog/wp-content/uploads/logo-favicon.png" sizes="192x192" />
<link rel="apple-touch-icon" href="https://pentest.blog/wp-content/uploads/logo-favicon.png" />
<meta name="msapplication-TileImage" content="https://pentest.blog/wp-content/uploads/logo-favicon.png" />
		<style type="text/css" id="wp-custom-css">
			#secondary .widget a {
    color: #636467;
}		</style>
		
<script data-cfasync="false" nonce="abba3166-bd09-4f32-aacf-a96a0ad72ec6">try{(function(w,d){!function(df,dg,dh,di){if(df.zaraz)console.error("zaraz is loaded twice");else{df[dh]=df[dh]||{};df[dh].executed=[];df.zaraz={deferred:[],listeners:[]};df.zaraz._v="5847";df.zaraz._n="abba3166-bd09-4f32-aacf-a96a0ad72ec6";df.zaraz.q=[];df.zaraz._f=function(dj){return async function(){var dk=Array.prototype.slice.call(arguments);df.zaraz.q.push({m:dj,a:dk})}};for(const dl of["track","set","debug"])df.zaraz[dl]=df.zaraz._f(dl);df.zaraz.init=()=>{var dm=dg.getElementsByTagName(di)[0],dn=dg.createElement(di),dp=dg.getElementsByTagName("title")[0];dp&&(df[dh].t=dg.getElementsByTagName("title")[0].text);df[dh].x=Math.random();df[dh].w=df.screen.width;df[dh].h=df.screen.height;df[dh].j=df.innerHeight;df[dh].e=df.innerWidth;df[dh].l=df.location.href;df[dh].r=dg.referrer;df[dh].k=df.screen.colorDepth;df[dh].n=dg.characterSet;df[dh].o=(new Date).getTimezoneOffset();if(df.dataLayer)for(const dq of Object.entries(Object.entries(dataLayer).reduce(((dr,ds)=>({...dr[1],...ds[1]})),{})))zaraz.set(dq[0],dq[1],{scope:"page"});df[dh].q=[];for(;df.zaraz.q.length;){const dt=df.zaraz.q.shift();df[dh].q.push(dt)}dn.defer=!0;for(const du of[localStorage,sessionStorage])Object.keys(du||{}).filter((dw=>dw.startsWith("_zaraz_"))).forEach((dv=>{try{df[dh]["z_"+dv.slice(7)]=JSON.parse(du.getItem(dv))}catch{df[dh]["z_"+dv.slice(7)]=du.getItem(dv)}}));dn.referrerPolicy="origin";dn.src="/cdn-cgi/zaraz/s.js?z="+btoa(encodeURIComponent(JSON.stringify(df[dh])));dm.parentNode.insertBefore(dn,dm)};["complete","interactive"].includes(dg.readyState)?zaraz.init():df.addEventListener("DOMContentLoaded",zaraz.init)}}(w,d,"zarazData","script");window.zaraz._p=async cY=>new Promise((cZ=>{if(cY){cY.e&&cY.e.forEach((c$=>{try{const da=d.querySelector("script[nonce]"),db=da?.nonce||da?.getAttribute("nonce"),dc=d.createElement("script");db&&(dc.nonce=db);dc.innerHTML=c$;dc.onload=()=>{d.head.removeChild(dc)};d.head.appendChild(dc)}catch(dd){console.error(`Error executing script: ${c$}\n`,dd)}}));Promise.allSettled((cY.f||[]).map((de=>fetch(de[0],de[1]))))}cZ()}));zaraz._p({"e":["(function(w,d){})(window,document)"]});})(window,document)}catch(e){throw fetch("/cdn-cgi/zaraz/t"),e;};</script></head>

<body class="post-template-default single single-post postid-2182 single-format-standard group-blog">
	<a class="sr-only sr-only-focusable" href="#content">Skip to main content</a>
<div id="page" class="hfeed site">

	<header id="masthead" class="site-header" role="banner">
		<nav class="navbar navbar-default
		" role="navigation">
			<div class="container">
				<div class="row">
					<div class="site-navigation-inner col-sm-12">
						<div class="navbar-header">


														<div id="logo">
																																<a href="https://pentest.blog/"><img src="https://pentest.blog/wp-content/uploads/pentestblog-color-e1508706802866.png"  height="67" width="280" alt="Pentest Blog"/></a>
																																</div><!-- end of #logo -->

							<button type="button" class="btn navbar-toggle" data-toggle="collapse" data-target=".navbar-ex1-collapse">
								<span class="sr-only">Toggle navigation</span>
								<span class="icon-bar"></span>
								<span class="icon-bar"></span>
								<span class="icon-bar"></span>
							</button>
						</div>



						<div class="collapse navbar-collapse navbar-ex1-collapse"><ul id="menu-header-menu" class="nav navbar-nav"><li id="menu-item-1061" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-1061"><a href="https://pentest.blog/category/advisories/">Advisories</a></li>
<li id="menu-item-105" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-105"><a href="https://pentest.blog/category/operating-system/">Operating System</a></li>
<li id="menu-item-20" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-20"><a href="https://pentest.blog/category/application-security/">Application Security</a></li>
<li id="menu-item-11" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-11"><a href="https://pentest.blog/category/network/">Network</a></li>
<li id="menu-item-106" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-106"><a href="https://pentest.blog/category/tools/">Tools</a></li>
<li id="menu-item-991" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-991"><a href="https://pentest.blog/article-series/">Article Series</a></li>
<li id="menu-item-14" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-14"><a href="https://pentest.blog/about-us/">About Us</a></li>
</ul></div>


					</div>
				</div>
			</div>
		</nav><!-- .site-navigation -->
	</header><!-- #masthead -->

	<div id="content" class="site-content">

		<div class="top-section">
								</div>

		<div class="container main-content-area">
						<div class="row side-pull-left">
				<div class="main-content-inner col-sm-12 col-md-8">

	<div id="primary" class="content-area">
		<main id="main" class="site-main" role="main">

		<article id="post-2182" class="post-2182 post type-post status-publish format-standard has-post-thumbnail hentry category-android tag-android tag-malware tag-reverse">
	<img width="750" height="410" src="https://pentest.blog/wp-content/uploads/hydrapic-750x410.png" class="single-featured wp-post-image" alt="" decoding="async" fetchpriority="high" />	<div class="post-inner-content">
		<header class="entry-header page-header">

			<h1 class="entry-title ">Android Malware Analysis : Dissecting Hydra Dropper</h1>

			<div class="entry-meta">
				<span class="posted-on"><i class="fa fa-calendar-alt"></i> <a href="https://pentest.blog/android-malware-analysis-dissecting-hydra-dropper/" rel="bookmark"><time class="entry-date published" datetime="2019-07-18T14:29:20+03:00">July 18, 2019</time><time class="updated" datetime="2019-07-18T14:29:52+03:00">July 18, 2019</time></a></span><span class="byline"> <i class="fa fa-user"></i> <span class="author vcard"><a class="url fn n" href="https://pentest.blog/author/ahmet-bilal-can/">Ahmet Bilal Can</a></span></span>
								<span class="cat-links"><i class="fa fa-folder-open"></i>
				 <a href="https://pentest.blog/category/android/" rel="category tag">Android</a>				</span>
								
			</div><!-- .entry-meta -->
		</header><!-- .entry-header -->

		<div class="entry-content">
			
<p>Hydra is another android bankbot variant. It uses overlay to steal information like <a href="https://eybisi.run/Mobile-Malware-Analysis-Tricks-used-in-Anubis/">Anubis</a> . Its name comes from <a href="https://twitter.com/PRODAFT/status/1096458491852664840">command and control panel</a>. Through July 2018 to March 2019 there was atleast 8-10 sample on Google Play Store. Distribution of malware is similar to Anubis cases. Dropper apps are uploaded to Play Store. But unlike Anubis, Dropper apps extract dex file from png file with <em>kinda</em> stenography and downloads malicious app from command and control server with dropped dex. You can find the sample that I will go through in this post here : <a href="https://koodous.com/apks/46aeb04f2f03ebe7c716fc6e58a5dea763cd9b00eb7a466d10a0744f50a7368f/comments">Dropper</a><br></p>



<span id="more-2182"></span>



<p>ToC:</p>



<ul><li>Bypass checks that on the java side</li><li>GDB Debug</li><li>Ghidra shenanigans</li><li>Understanding creation of the dex file</li><li>Bonus</li></ul>



<p>First of all, if the dropper app likes the environment it runs, it will load the dex file and connect to the command and control server. There are multiple checks on java and native side. We will debug the native side with gdb and use ghidra to help us to find checks and important functions.</p>



<h2 class="wp-block-heading">Time Check</h2>



<p>When we open the first app with jadx we can see time check in class <code>com.taxationtex.giristexation.qes.Hdvhepuwy.</code></p>



<pre class="EnlighterJSRAW" data-enlighter-language="java" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">public static boolean j() {
        return new Date().getTime() >= 1553655180000L &amp;&amp; new Date().getTime() &lt;= 1554519180000L;
}</pre>



<p>This function called in another class : com.taxationtex.giristexation.qes.Sctdsqres</p>



<pre class="EnlighterJSRAW" data-enlighter-language="java" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">class Sctdsqres {
    private static boolean L = false;
    private static native  void fyndmmn(Object obj);
    Sctdsqres() {
    }
    static void j() {
        if (Hdvhepuwy.j()) {
            H();
        }
    }
    static void H() {
        if (!L) {
            System.loadLibrary("hoter");
            L = true;
        }
        fyndmmn(Hdvhepuwy.j());
    }
}</pre>



<p>First, it checks the time and if the condition holds, the app will load the native library and call <code>fyndmmn(Hdvhepuwy.j());</code> which is native function. We need to bypass this check so app will always load the library.</p>



<p>I used <code>apktool</code> to disassemble apk to smali and changed <code>j()</code> to always return true.</p>



<ul><li>apktool d com.taxationtex.giristexation.apk</li><li>cd com.taxationtex.giristexation/smali/com/taxationtext/giristexation/qes</li><li>edit j()Z in Hdvhepeuwy.smali</li></ul>



<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">.method public static j()Z
    .locals 1
    const/4 v0, 0x1
    return v0
.end method</pre>



<p>rebuild apk with <code>apktool b com.taxationtex.giristexation -o hydra_time.apk</code> and sign it.</p>



<p>Now time control will always return true and after loading native library and <code>fyndmmn</code> native function is called. Even with this still app doesn’t load dex file.<br></p>



<h2 class="wp-block-heading">GDB Debug</h2>



<p><a href="https://packmad.github.io/gdb-android/">Here</a> is a great post explaining how to setup gdb to debug native libraries. Steps:</p>



<ul><li>Download android sdk with <a href="https://dl.google.com/android/repository/android-ndk-r20-linux-x86_64.zip">ndk</a></li><li>adb push ~android-ndk-r20/prebuilt/android-TARGET-ARCH/gdbserver/gdbserver /data/local/tmp</li><li>adb shell &#8220;chmod 777 /data/local/tmp/gdbserver&#8221;</li><li>adb shell &#8220;ls -l /data/local/tmp/gdbserver&#8221;</li><li>get process id, ps -A | grep com.tax</li><li>/data/local/tmp/gdbserver :1337 &#8211;attach $pid</li><li>adb forward tcp:1337 tcp:1337</li><li>gdb</li><li>target remote :1337</li><li>b Java_com_tax\TAB</li></ul>



<p>There is a small problem here. App will load the library and call the native function and exit. The app needs to wait for gdb connection. My first thought was putting sleep and then connect with gdb.</p>



<ul><li>apktool d hydra_time.apk</li><li>vim hydra_time/com.taxationtex.giristexation/smali/com/taxationtex/giristexation/qes/Sctdsqres.smali</li></ul>



<p>after following block:</p>



<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">.line 43
:cond_0</pre>



<p>Add</p>



<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">const-wide/32 v0, 0xea60
invoke-static {v0, v1}, Landroid/os/SystemClock;->sleep(J)V</pre>



<p>and since <code>locals</code> variable is 1 and we use an extra v1 variable, increment it to 2</p>



<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">.method static H()V
    .locals 2</pre>



<p>Again sign and install the app. If all goes well the app will wait 60 seconds in a white screen. Now we can connect with gdb.</p>



<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">ps | grep com.tax
/data/local/tmp/gdbserver :1337 --attach $pid</pre>



<p>I use pwndbg for better gdb experience, you can try peda or whatever you want.</p>



<ul><li>adb forward tcp:1337 tcp:1337</li><li>gdb</li><li>target remote :1337 </li></ul>



<figure class="wp-block-image"><img decoding="async" width="1024" height="462" src="https://pentest.blog/wp-content/uploads/gdb-1024x462.png" alt="" class="wp-image-2204" srcset="https://pentest.blog/wp-content/uploads/gdb-1024x462.png 1024w, https://pentest.blog/wp-content/uploads/gdb-300x135.png 300w, https://pentest.blog/wp-content/uploads/gdb-768x346.png 768w, https://pentest.blog/wp-content/uploads/gdb.png 1372w" sizes="(max-width: 1024px) 100vw, 1024px" /><figcaption>debug session</figcaption></figure>



<p>It takes some time to load all libraries. Put breakpoint to native function <code>fymdmmn</code></p>



<div class="wp-block-image"><figure class="aligncenter"><img decoding="async" width="840" height="829" src="https://pentest.blog/wp-content/uploads/break.png" alt="" class="wp-image-2205" srcset="https://pentest.blog/wp-content/uploads/break.png 840w, https://pentest.blog/wp-content/uploads/break-300x296.png 300w, https://pentest.blog/wp-content/uploads/break-768x758.png 768w, https://pentest.blog/wp-content/uploads/break-60x60.png 60w" sizes="(max-width: 840px) 100vw, 840px" /><figcaption>set breakpoint</figcaption></figure></div>



<p>If you want to sync gdb and ghidra addresses, type vmmap at gdb and look for first entry of <code>libhoter.so</code> . <br><code>0xe73be000 0xe73fc000 r-xp    3e000 0      /data/app/com.taxationtex.giristexation-1/lib/x86/libhoter.so</code><br>So <code>0xe73be000</code> is my base address.<br>Go to <code>Window</code>-&gt; <code>Memory Map</code> and press <code>Home</code> icon on  the upper right. Put your base address and rebase the binary.</p>



<p>Look at the entry of native function in ghdira:</p>



<div class="wp-block-image"><figure class="aligncenter"><img loading="lazy" decoding="async" width="513" height="259" src="https://pentest.blog/wp-content/uploads/hydra1-1.png" alt="" class="wp-image-2304" srcset="https://pentest.blog/wp-content/uploads/hydra1-1.png 513w, https://pentest.blog/wp-content/uploads/hydra1-1-300x151.png 300w" sizes="(max-width: 513px) 100vw, 513px" /><figcaption>fyndmmn function</figcaption></figure></div>



<p>Why call the time function ? Again time check ? Rename return value of time function (curr_time) and press <code>ctrl+shift+f</code> from assembly view and go to location that context is <code>READ</code></p>



<pre class="wp-block-code"><code>return (uint)(curr_time + 0xa3651a74U &lt; 0xd2f00) </code></pre>



<p>So we were right, again time check. Rename the current function to <code>check_time</code>. Calculate the epoch time: </p>



<pre class="wp-block-code"><code>>>> 0xffffffff-0xa3651a74+0xd2f00
>>> 1554519179
>>> (1554519179+ 0xa3651a74) &amp; 0xffffffff &lt; 0xd2f00
>>> True</code></pre>



<p>convert epoch to time : Saturday, April 6, 2019 2:52:59 AM<br>Yep this was the time that app was on play store. Check how this boolean is used. Look for xrefs of <code>check_time</code> function.</p>



<div class="wp-block-image"><figure class="aligncenter"><img loading="lazy" decoding="async" width="504" height="53" src="https://pentest.blog/wp-content/uploads/hydra_time.png" alt="" class="wp-image-2191" srcset="https://pentest.blog/wp-content/uploads/hydra_time.png 504w, https://pentest.blog/wp-content/uploads/hydra_time-300x32.png 300w" sizes="(max-width: 504px) 100vw, 504px" /></figure></div>



<p>Yep, as we think it will exit if time doesn&#8217;t hold.<br>First breakpoint/binary patch point is here. Or we can change emulator/phone&#8217;s time to April 5 2019.<br><code>b *(base + 0x8ba8)</code><br>But bypassing time check is not enough.</p>



<h2 class="wp-block-heading">Ghidra Shenanigans</h2>



<p>Now diving into binary file you will find multiple functions like this :</p>



<div class="wp-block-image"><figure class="aligncenter"><img loading="lazy" decoding="async" width="494" height="615" src="https://pentest.blog/wp-content/uploads/xor-1.png" alt="" class="wp-image-2306" srcset="https://pentest.blog/wp-content/uploads/xor-1.png 494w, https://pentest.blog/wp-content/uploads/xor-1-241x300.png 241w" sizes="(max-width: 494px) 100vw, 494px" /><figcaption>decryption blocks</figcaption></figure></div>



<p>If you look at while loop.</p>



<div class="wp-block-image"><figure class="aligncenter"><img loading="lazy" decoding="async" width="482" height="86" src="https://pentest.blog/wp-content/uploads/while-1.png" alt="" class="wp-image-2307" srcset="https://pentest.blog/wp-content/uploads/while-1.png 482w, https://pentest.blog/wp-content/uploads/while-1-300x54.png 300w" sizes="(max-width: 482px) 100vw, 482px" /><figcaption>xor while loop</figcaption></figure></div>



<p>2 blocks of data are XORed. ( Length 0x18)  We can put breakpoint after do while but it will not be efficient solution. Let&#8217;s think a programmatic way to find decrypted strings.<br>These xor blocks are next to each other. If we can get length of blocks we can easily get decrypted string. Then find the function that use these xor blocks and rename it. Afterwards we can jump <code>2*length</code> and get next xor blocks. Repeat.<br>Starting xor block is  at <code>0x34035</code>. <br>Get xrefs of block:</p>



<div class="wp-block-image"><figure class="aligncenter"><img loading="lazy" decoding="async" width="374" height="362" src="https://pentest.blog/wp-content/uploads/xor_1-2.png" alt="" class="wp-image-2310" srcset="https://pentest.blog/wp-content/uploads/xor_1-2.png 374w, https://pentest.blog/wp-content/uploads/xor_1-2-300x290.png 300w" sizes="(max-width: 374px) 100vw, 374px" /><figcaption>xor block</figcaption></figure></div>



<p>go to function,</p>



<div class="wp-block-image"><figure class="aligncenter"><img loading="lazy" decoding="async" width="651" height="283" src="https://pentest.blog/wp-content/uploads/xor_2-1.png" alt="" class="wp-image-2311" srcset="https://pentest.blog/wp-content/uploads/xor_2-1.png 651w, https://pentest.blog/wp-content/uploads/xor_2-1-300x130.png 300w" sizes="(max-width: 651px) 100vw, 651px" /><figcaption>get cmp value</figcaption></figure></div>



<p>get size from CMP instruction, since we know the address of first xor block, add size to first address and get the address of second xor block. XOR the blocks and rename the calling function.</p>



<p>Ghidra : go to <code>Window</code> -&gt; <code>Script Manager</code> -&gt; <code>Create New Script</code> -&gt; <code>Python</code>.<br>Set name for script and let&#8217;s write our ghidra script.</p>



<pre class="EnlighterJSRAW" data-enlighter-language="python" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">import ghidra.app.script.GhidraScript
import exceptions
from ghidra.program.model.address import AddressOutOfBoundsException
from ghidra.program.model.symbol import SourceType

def xor_block(addr,size):

	## get byte list
	first_block = getBytes(toAddr(addr),size).tolist()
	second_block = getBytes(toAddr(addr+size),size).tolist()

	a = ""
	## decrypt the block
	for i in range(len(first_block)):
		a += chr(first_block[i]^second_block[i])
        ## each string have trash value at the end, delete it
	trash = len("someval")
	return a[:-trash]
    
def block(addr):
   ## block that related to creation of dex file. pass itt
	if addr == 0x34755:
		return 0x0003494f
	## get xrefs
	xrefs = getReferencesTo(toAddr(addr))
	if len(xrefs) ==0:
		## no xrefs go to next byte
		return addr+1
		
	for xref in xrefs:
		ref_addr = xref.getFromAddress()
		try:
			inst = getInstructionAt(ref_addr.add(32))
		except AddressOutOfBoundsException as e:
			print("Found last xor block exiting..")
			exit()
            
    ## Get size of block with inst.getByte(2)
		block_size = inst.getByte(2)
    ## decrypt blocks
		dec_str = xor_block(addr,block_size)
    ## get function
		func = getFunctionBefore(ref_addr)
		new_name = "dec_"+dec_str[:-1]
    ## rename the function
		func.setName(new_name,SourceType.USER_DEFINED)
    ## log
		print("Block : {} , func : {}, dec string : {}".format(hex(addr),func.getEntryPoint(),dec_str))

	return addr+2*block_size

def extract_encrypted_str():

	## starting block
	curr_block_location = 0x34035
	for i in range(200):
		curr_block_location = block(curr_block_location)

def run():
	extract_encrypted_str()

run()</pre>



<p>To run the script, select created script in <code>Script Manager</code> and press Run.<br>Now look at the output.</p>



<figure class="wp-block-image"><img loading="lazy" decoding="async" width="712" height="455" src="https://pentest.blog/wp-content/uploads/sim-1.png" alt="" class="wp-image-2312" srcset="https://pentest.blog/wp-content/uploads/sim-1.png 712w, https://pentest.blog/wp-content/uploads/sim-1-300x192.png 300w" sizes="(max-width: 712px) 100vw, 712px" /><figcaption>ghidra script output</figcaption></figure>



<p>As you can see there are functions : <code>getSimCountryISO</code>, <code>getNetworkCountryIso</code>, <code>getCountry</code> and one suspicious string : <code>tr</code>. Without running we can assume code will check if these function&#8217;s return values are equals to <code>tr</code>. I know this app targets Turkish people so this is reasonable to avoid sandbox and even manual analyze. <br>If you follow from these functions&#8217; xrefs to function <code>FUN_00018A90()</code> (called after time check) you can see this block : <br></p>



<div class="wp-block-image"><figure class="aligncenter"><img loading="lazy" decoding="async" width="438" height="120" src="https://pentest.blog/wp-content/uploads/second-1.png" alt="" class="wp-image-2313" srcset="https://pentest.blog/wp-content/uploads/second-1.png 438w, https://pentest.blog/wp-content/uploads/second-1-300x82.png 300w" sizes="(max-width: 438px) 100vw, 438px" /><figcaption>country check</figcaption></figure></div>



<p>So next patch/breakpoint is this check :<br><code>b *(base + 0x8c80)</code><br>After these checks code will drop dex and load it. If you run without patch/breakpoints only <code>edevlet</code> page is shown and nothing happens. Get your base address and try bypassing checks :</p>



<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">b *(base + 0x8ba8)
b *(base + 0x8c80)
copy eip : .... a8 -> set $eip = .... aa
c
copy eip : .... 80 -> set $eip = .... 82
c</pre>



<p>After these breakpoints, app will create dex file and load it. You will see Accessibility page pop-pup if you do it correctly. </p>



<figure class="wp-block-image"><img loading="lazy" decoding="async" width="1024" height="586" src="https://pentest.blog/wp-content/uploads/access-1024x586.png" alt="" class="wp-image-2210" srcset="https://pentest.blog/wp-content/uploads/access-1024x586.png 1024w, https://pentest.blog/wp-content/uploads/access-300x172.png 300w, https://pentest.blog/wp-content/uploads/access-768x440.png 768w, https://pentest.blog/wp-content/uploads/access.png 1410w" sizes="(max-width: 1024px) 100vw, 1024px" /><figcaption>checks bypassed</figcaption></figure>



<p>Or we can patch <code>je</code> instructions to <code>jne</code> in native library and build apk again. </p>



<h2 class="wp-block-heading">Understanding creation of the dex file</h2>



<p>If you look for dropped file in filesystem, you won&#8217;t see anything. File is removed with <code>remove</code>. We can attach frida and catch dropped file easily. But forget about it for now and find how png file is used to create dex file. </p>



<p>Look at the last parts of the ghidra script&#8217;s output.</p>



<div class="wp-block-image"><figure class="aligncenter"><img loading="lazy" decoding="async" width="911" height="378" src="https://pentest.blog/wp-content/uploads/init-1.png" alt="" class="wp-image-2314" srcset="https://pentest.blog/wp-content/uploads/init-1.png 911w, https://pentest.blog/wp-content/uploads/init-1-300x124.png 300w, https://pentest.blog/wp-content/uploads/init-1-768x319.png 768w" sizes="(max-width: 911px) 100vw, 911px" /><figcaption>ghidra script output</figcaption></figure></div>



<p>Somehow <code>prcnbzqn.png</code> is processed with <code>AndroidBitmap</code> and dex file is created with the name <code>xwchfc.dex</code>. Then with <code>ClassLoader</code> API dex file is loaded and <code>moonlight.loader.sdk.SdkBuilder</code> class is called.</p>



<p>Check function : <code>0xeec0</code></p>



<div class="wp-block-image"><figure class="aligncenter"><img loading="lazy" decoding="async" width="640" height="312" src="https://pentest.blog/wp-content/uploads/asset_iterate-1.png" alt="" class="wp-image-2315" srcset="https://pentest.blog/wp-content/uploads/asset_iterate-1.png 640w, https://pentest.blog/wp-content/uploads/asset_iterate-1-300x146.png 300w" sizes="(max-width: 640px) 100vw, 640px" /><figcaption>get png file from asset folder</figcaption></figure></div>



<p>Iterates over assets and finds png file. Good. Rename this function <code>asset_caller</code>. Go to xrefs of this func and find <code>0xe2c0</code>. I renamed some of functions. <code>dex_header</code> creates dex file on memory. <code>dex_dropper</code> drops dex file to system and loads.</p>



<div class="wp-block-image"><figure class="aligncenter"><img loading="lazy" decoding="async" width="695" height="349" src="https://pentest.blog/wp-content/uploads/up_asset-1.png" alt="" class="wp-image-2316" srcset="https://pentest.blog/wp-content/uploads/up_asset-1.png 695w, https://pentest.blog/wp-content/uploads/up_asset-1-300x151.png 300w" sizes="(max-width: 695px) 100vw, 695px" /><figcaption>hierarchy of functions</figcaption></figure></div>



<p>How dex_header creates dex file ? Go to function definition.</p>



<div class="wp-block-image"><figure class="aligncenter"><img loading="lazy" decoding="async" width="519" height="203" src="https://pentest.blog/wp-content/uploads/dex_c-1-1.png" alt="" class="wp-image-2317" srcset="https://pentest.blog/wp-content/uploads/dex_c-1-1.png 519w, https://pentest.blog/wp-content/uploads/dex_c-1-1-300x117.png 300w" sizes="(max-width: 519px) 100vw, 519px" /><figcaption>dex creator function</figcaption></figure></div>



<p><code>bitmap_related</code> creates bitmap from png file. Bitmap object is passed to <code>dex_related</code> function. Bitmap ?</p>



<p>If you read png file byte byte you don&#8217;t get color codes of pixels directly. You need to convert it to bitmap. So app first transfer png file to bitmap and read hex values of pixels. Fire up gimp/paint and look at the hex codes of first pixel of the image and compare with below picture 🙂</p>



<figure class="wp-block-image"><img loading="lazy" decoding="async" width="752" height="234" src="https://pentest.blog/wp-content/uploads/pixel.jpg" alt="" class="wp-image-2217" srcset="https://pentest.blog/wp-content/uploads/pixel.jpg 752w, https://pentest.blog/wp-content/uploads/pixel-300x93.jpg 300w, https://pentest.blog/wp-content/uploads/pixel-750x234.jpg 750w" sizes="(max-width: 752px) 100vw, 752px" /><figcaption>rgb values of pixels</figcaption></figure>



<p>Now comes fun part. How these values are used. At <code>0xfbf0</code>you can find <code>dex_related</code> function. </p>



<p>Bitmap object is passed to this function. Now there are 2 important functions here:</p>



<div class="wp-block-image"><figure class="aligncenter"><img loading="lazy" decoding="async" width="648" height="294" src="https://pentest.blog/wp-content/uploads/dex_ff-1.png" alt="" class="wp-image-2318" srcset="https://pentest.blog/wp-content/uploads/dex_ff-1.png 648w, https://pentest.blog/wp-content/uploads/dex_ff-1-300x136.png 300w" sizes="(max-width: 648px) 100vw, 648px" /><figcaption>two important function</figcaption></figure></div>



<p><code>byte_chooser</code> will return one byte and <code>dex_extractor</code> will use that byte to get final dex bytes.  <code>4_cmp</code> variable is set to 0 at the beginning and will set to 0 at the end of else block. So flow will hit <code>byte_chooser</code> 2 times before entering <code>dex_extractor</code>. Here is <code>byte_chooser</code></p>



<figure class="wp-block-image"><img loading="lazy" decoding="async" width="674" height="112" src="https://pentest.blog/wp-content/uploads/byte_chose-1.png" alt="" class="wp-image-2319" srcset="https://pentest.blog/wp-content/uploads/byte_chose-1.png 674w, https://pentest.blog/wp-content/uploads/byte_chose-1-300x50.png 300w" sizes="(max-width: 674px) 100vw, 674px" /><figcaption>byte chooser function</figcaption></figure>



<p>param_3 is hex codes of pixels. param_2 is like seed. If its first call of byte_chooser it is set to 0. In second call of byte_chooser, param_2 will be return value of first call and left shifted by 4.  Then its set to 0 at the end of else block.</p>



<p>After calculating the byte by calling byte_chooser twice, return value is passed to <code>dex_extractor</code>. </p>



<figure class="wp-block-image"><img loading="lazy" decoding="async" width="708" height="111" src="https://pentest.blog/wp-content/uploads/dex_ext-1.png" alt="" class="wp-image-2321" srcset="https://pentest.blog/wp-content/uploads/dex_ext-1.png 708w, https://pentest.blog/wp-content/uploads/dex_ext-1-300x47.png 300w" sizes="(max-width: 708px) 100vw, 708px" /><figcaption>dex byte calculator function</figcaption></figure>



<p>param_2 is calculated byte param_1 is index. </p>



<p>Now we know how the dex file is  created. Let&#8217;s do it with python</p>



<pre class="EnlighterJSRAW" data-enlighter-language="python" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">from PIL import Image
import struct

image_file = "prcnbzqn.png"
so_file = "libhoter.so"
offset = 0x34755
size = 0x1fa
output_file = "drop.dex"


im = Image.open(image_file)
rgb_im = im.convert('RGB')
im_y = im.size[1]
im_x = im.size[0]

dex_size = im_y*im_x/2-255

f = open(so_file)
d = f.read()
d = d[offset:offset+size]

def create_magic(p1,p2,p3):
	return (p1&lt;&lt;2 &amp;4 | p2 &amp; 2 | p2 &amp; 1 | p1 &lt;&lt; 2 &amp; 8 | p3)

def dex_extractor(p1,p2):
	return (p1/size)*size&amp;0xffffff00| ord(d[p1%size]) ^ p2

count = 0
dex_file = open(output_file,"wb")
second = False
magic_byte = 0
for y in range(0,im.size[1]):
	for x in range(0,im.size[0]):
		r, g, b = rgb_im.getpixel((x, y))
		magic_byte = create_magic(r,b,magic_byte)
		if second:
			magic_byte = magic_byte &amp; 0xff
			dex_byte = dex_extractor(count,magic_byte)
			dex_byte = dex_byte &amp;0xff
			if count > 7 and count-8 &lt; dex_size:
				dex_file.write(struct.pack("B",dex_byte))
			magic_byte = 0
			second = False
			count+=1
		else:
			magic_byte = magic_byte &lt;&lt; 4
			second = True

dex_file.close()</pre>



<p>Let&#8217;s look at the output file with jadx</p>



<figure class="wp-block-image"><img loading="lazy" decoding="async" width="960" height="484" src="https://pentest.blog/wp-content/uploads/jadx-3.png" alt="" class="wp-image-2322" srcset="https://pentest.blog/wp-content/uploads/jadx-3.png 960w, https://pentest.blog/wp-content/uploads/jadx-3-300x151.png 300w, https://pentest.blog/wp-content/uploads/jadx-3-768x387.png 768w" sizes="(max-width: 960px) 100vw, 960px" /><figcaption>dropped dex file</figcaption></figure>



<p>Remember moonlight from output of ghidra script ? Yep this looks correct.</p>



<h2 class="wp-block-heading">Frida &lt;3</h2>



<p>Well I cant write an article without mentioning frida. Bypass checks with frida. </p>



<ul><li>There are time checks on java and native side. </li><li>Country check</li><li>File is removed at native side.</li></ul>



<pre class="EnlighterJSRAW" data-enlighter-language="js" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">var unlinkPtr = Module.findExportByName(null, 'unlink');
// remove bypass
Interceptor.replace(unlinkPtr, new NativeCallback( function (a){
     console.log("[+] Unlink : " +  Memory.readUtf8String(ptr(a)))

}, 'int', ['pointer']));

var timePtr = Module.findExportByName(null, 'time');
// time bypass
Interceptor.replace(timePtr, new NativeCallback( function (){
    console.log("[+] native time bypass : ")
    return 1554519179
},'long', ['long']));

Java.perform(function() {
    var f = Java.use("android.telephony.TelephonyManager")
    var t = Java.use('java.util.Date')
    //country bypass
    f.getSimCountryIso.overload().implementation = function(){
        console.log("Changing country from " + this.getSimCountryIso() + " to tr ")
        return "tr"
    }
    t.getTime.implementation = function(){
    console.log("[+] Java date bypass ")
    return 1554519179000 
    }
 })
</pre>



<figure class="wp-block-image"><img loading="lazy" decoding="async" width="896" height="509" src="https://pentest.blog/wp-content/uploads/fridadex.png" alt="" class="wp-image-2232" srcset="https://pentest.blog/wp-content/uploads/fridadex.png 896w, https://pentest.blog/wp-content/uploads/fridadex-300x170.png 300w, https://pentest.blog/wp-content/uploads/fridadex-768x436.png 768w" sizes="(max-width: 896px) 100vw, 896px" /><figcaption>output of frida session</figcaption></figure>



<p>Pull the dex file with <code>adb pull path/xwcnhfc.dex</code>.</p>



<h2 class="wp-block-heading">Homework</h2>



<p>This part is homework for reader 🙂 Next version of this malware only use native arm binaries. So we can&#8217;t easily debug without having arm based device. But we can use our dex dropper python script. Malware <a href="https://koodous.com/apks/6c13658a81921f658f660a0f670eb61e9459d8105c1a72910a6bc8abd7795c65">sample</a>. Load the arm binary to ghidra. Find the correct offset of the dex data block and the size of the block.  dex_extractor function might look different but it does the same thing. So you need to only change the name of the files, offset and size variables at the python script. Hash of dropped dex file : 7ff02fb46009fc96c139c48c28fb61904cc3de60482663631272396c6c6c32ec</p>



<h2 class="wp-block-heading">Conclusion</h2>



<p>We attached gdb to debug native code and found certain checks. Wrote a ghidra script to automate decryption of strings and frida script to bypass checks. Also learned that png files needs to be converted with Bitmap to get pixel values. So next time you see png file and suspicious app, look for bitmap calls 😉</p>



<h2 class="wp-block-heading">References</h2>



<p>GDB Debug : <a href="https://packmad.github.io/gdb-android/">https://packmad.github.io/gdb-android/</a><br>Featured image : <a href="https://www.deviantart.com/velinov/art/Hydra-monster-144496963">https://www.deviantart.com/velinov/art/Hydra-monster-144496963</a></p>



<p></p>



<p></p>
					</div><!-- .entry-content -->

		<footer class="entry-meta">

					  <!-- tags -->
		  <div class="tagcloud">

				<a href="https://pentest.blog/tag/android/">android</a> <a href="https://pentest.blog/tag/malware/">malware</a> <a href="https://pentest.blog/tag/reverse/">reverse</a> 
		  </div>
		  <!-- end tags -->
			
		</footer><!-- .entry-meta -->
	</div>

	
</article><!-- #post-## -->

<div id="disqus_thread"></div>

	<nav class="navigation post-navigation" aria-label="Posts">
		<h2 class="screen-reader-text">Post navigation</h2>
		<div class="nav-links"><div class="nav-previous"><a href="https://pentest.blog/n-ways-to-unpack-mobile-malware/" rel="prev"><i class="fa fa-chevron-left"></i> <span class="post-title">N Ways to Unpack Mobile Malware</span></a></div><div class="nav-next"><a href="https://pentest.blog/art-of-anti-detection-4-self-defense/" rel="next"><span class="post-title">Art of Anti Detection 4 &#8211; Self-Defense <i class="fa fa-chevron-right"></i></span></a></div></div>
	</nav>
		</main><!-- #main -->
	</div><!-- #primary -->

</div><!-- close .main-content-inner -->
<div id="secondary" class="widget-area col-sm-12 col-md-4" role="complementary">
	<div class="well">
				<aside id="search-2" class="widget widget_search">
<form role="search" method="get" class="form-search" action="https://pentest.blog/">
  <div class="input-group">
	  <label class="screen-reader-text" for="s">Search for:</label>
	<input type="text" class="form-control search-query" placeholder="Search&hellip;" value="" name="s" title="Search for:" />
	<span class="input-group-btn">
	  <button type="submit" class="btn btn-default" name="submit" id="searchsubmit" value="Search"><span class="glyphicon glyphicon-search"></span></button>
	</span>
  </div>
</form>
</aside><aside id="text-3" class="widget widget_text"><h3 class="widget-title">PRODAFT Cyber Intelligence and Cyber Security Services</h3>			<div class="textwidget"><a href="https://www.invictuseurope.com/"><img src="https://pentest.blog/wp-content/uploads/Mg6EYwIk_400x400.jpg"></a></div>
		</aside>
		<aside id="recent-posts-2" class="widget widget_recent_entries">
		<h3 class="widget-title">Recent Posts</h3>
		<ul>
											<li>
					<a href="https://pentest.blog/advisory-netmodule-router-software-race-condition-leads-to-remote-code-execution/">Advisory | NetModule Router Software Race Condition Leads to Remote Code Execution</a>
									</li>
											<li>
					<a href="https://pentest.blog/advisory-roxy-wi-unauthenticated-remote-code-executions-cve-2022-31137/">Advisory | Roxy-WI Unauthenticated Remote Code Executions CVE-2022-31137</a>
									</li>
											<li>
					<a href="https://pentest.blog/advisory-glpi-service-management-software-sql-injection-remote-code-execution-and-local-file-inclusion/">Advisory | GLPI Service Management Software Multiple Vulnerabilities and Remote Code Execution</a>
									</li>
											<li>
					<a href="https://pentest.blog/liderahenk-0day-all-your-pardus-clients-belongs-to-me/">LiderAhenk 0day &#8211; All your PARDUS Clients Belongs To Me (CVE-2021-3825)</a>
									</li>
											<li>
					<a href="https://pentest.blog/pardus-21-linux-distro-remote-code-execution-0day-2021/">Pardus 21 Linux Distro &#8211; Remote Code Execution 0day 2021 CVE-2021-3806</a>
									</li>
					</ul>

		</aside><aside id="recent-comments-2" class="widget widget_recent_comments"><h3 class="widget-title">Latest Comments</h3><ul id="recentcomments"><li class="recentcomments"><span class="comment-author-link"><a href="https://github.com/EgeBalci" class="url" rel="ugc external nofollow">Ege Balci</a></span> on <a href="https://pentest.blog/art-of-anti-detection-3-shellcode-alchemy/#comment-1244">Art of Anti Detection 3 &#8211; Shellcode Alchemy</a></li><li class="recentcomments"><span class="comment-author-link">Chase Run Taylor</span> on <a href="https://pentest.blog/art-of-anti-detection-1-introduction-to-av-detection-techniques/#comment-1243">Art of Anti Detection 1 &#8211;  Introduction to AV &amp; Detection Techniques</a></li><li class="recentcomments"><span class="comment-author-link"><a href="http://www.mehmetince.net/" class="url" rel="ugc external nofollow">Mehmet İnce</a></span> on <a href="https://pentest.blog/unexpected-journey-4-escaping-from-restricted-shell-and-gaining-root-access-to-solarwinds-log-event-manager-siem-product/#comment-1242">Unexpected Journey #4 &#8211; Escaping from Restricted Shell and Gaining Root Access to SolarWinds Log &#038; Event Manager (SIEM) Product</a></li><li class="recentcomments"><span class="comment-author-link">0x00</span> on <a href="https://pentest.blog/unexpected-journey-4-escaping-from-restricted-shell-and-gaining-root-access-to-solarwinds-log-event-manager-siem-product/#comment-1241">Unexpected Journey #4 &#8211; Escaping from Restricted Shell and Gaining Root Access to SolarWinds Log &#038; Event Manager (SIEM) Product</a></li><li class="recentcomments"><span class="comment-author-link"><a href="http://www.mehmetince.net/" class="url" rel="ugc external nofollow">Mehmet İnce</a></span> on <a href="https://pentest.blog/unexpected-journey-4-escaping-from-restricted-shell-and-gaining-root-access-to-solarwinds-log-event-manager-siem-product/#comment-1240">Unexpected Journey #4 &#8211; Escaping from Restricted Shell and Gaining Root Access to SolarWinds Log &#038; Event Manager (SIEM) Product</a></li></ul></aside><aside id="tag_cloud-2" class="widget widget_tag_cloud"><h3 class="widget-title">Tags</h3><div class="tagcloud"><a href="https://pentest.blog/tag/0day/" class="tag-cloud-link tag-link-70 tag-link-position-1" style="font-size: 22pt;" aria-label="0day (16 items)">0day</a>
<a href="https://pentest.blog/tag/1day/" class="tag-cloud-link tag-link-67 tag-link-position-2" style="font-size: 10.709677419355pt;" aria-label="1day (2 items)">1day</a>
<a href="https://pentest.blog/tag/advisory/" class="tag-cloud-link tag-link-66 tag-link-position-3" style="font-size: 18.537634408602pt;" aria-label="advisory (9 items)">advisory</a>
<a href="https://pentest.blog/tag/alienvault/" class="tag-cloud-link tag-link-69 tag-link-position-4" style="font-size: 8pt;" aria-label="alienvault (1 item)">alienvault</a>
<a href="https://pentest.blog/tag/android/" class="tag-cloud-link tag-link-95 tag-link-position-5" style="font-size: 8pt;" aria-label="android (1 item)">android</a>
<a href="https://pentest.blog/tag/application/" class="tag-cloud-link tag-link-98 tag-link-position-6" style="font-size: 8pt;" aria-label="application (1 item)">application</a>
<a href="https://pentest.blog/tag/assembly/" class="tag-cloud-link tag-link-90 tag-link-position-7" style="font-size: 8pt;" aria-label="assembly (1 item)">assembly</a>
<a href="https://pentest.blog/tag/bof/" class="tag-cloud-link tag-link-86 tag-link-position-8" style="font-size: 8pt;" aria-label="bof (1 item)">bof</a>
<a href="https://pentest.blog/tag/burp/" class="tag-cloud-link tag-link-52 tag-link-position-9" style="font-size: 10.709677419355pt;" aria-label="burp (2 items)">burp</a>
<a href="https://pentest.blog/tag/bypass/" class="tag-cloud-link tag-link-78 tag-link-position-10" style="font-size: 10.709677419355pt;" aria-label="bypass (2 items)">bypass</a>
<a href="https://pentest.blog/tag/crypter/" class="tag-cloud-link tag-link-27 tag-link-position-11" style="font-size: 10.709677419355pt;" aria-label="crypter (2 items)">crypter</a>
<a href="https://pentest.blog/tag/decoder/" class="tag-cloud-link tag-link-75 tag-link-position-12" style="font-size: 8pt;" aria-label="decoder (1 item)">decoder</a>
<a href="https://pentest.blog/tag/dns/" class="tag-cloud-link tag-link-15 tag-link-position-13" style="font-size: 14.021505376344pt;" aria-label="dns (4 items)">dns</a>
<a href="https://pentest.blog/tag/emet/" class="tag-cloud-link tag-link-76 tag-link-position-14" style="font-size: 8pt;" aria-label="EMET (1 item)">EMET</a>
<a href="https://pentest.blog/tag/encoder/" class="tag-cloud-link tag-link-74 tag-link-position-15" style="font-size: 8pt;" aria-label="encoder (1 item)">encoder</a>
<a href="https://pentest.blog/tag/exploit/" class="tag-cloud-link tag-link-77 tag-link-position-16" style="font-size: 17.784946236559pt;" aria-label="exploit (8 items)">exploit</a>
<a href="https://pentest.blog/tag/hook/" class="tag-cloud-link tag-link-89 tag-link-position-17" style="font-size: 8pt;" aria-label="hook (1 item)">hook</a>
<a href="https://pentest.blog/tag/iat/" class="tag-cloud-link tag-link-88 tag-link-position-18" style="font-size: 8pt;" aria-label="iat (1 item)">iat</a>
<a href="https://pentest.blog/tag/icmp/" class="tag-cloud-link tag-link-17 tag-link-position-19" style="font-size: 10.709677419355pt;" aria-label="icmp (2 items)">icmp</a>
<a href="https://pentest.blog/tag/in-memory/" class="tag-cloud-link tag-link-84 tag-link-position-20" style="font-size: 8pt;" aria-label="in-memory (1 item)">in-memory</a>
<a href="https://pentest.blog/tag/iot/" class="tag-cloud-link tag-link-104 tag-link-position-21" style="font-size: 8pt;" aria-label="IOT (1 item)">IOT</a>
<a href="https://pentest.blog/tag/linux/" class="tag-cloud-link tag-link-8 tag-link-position-22" style="font-size: 8pt;" aria-label="linux (1 item)">linux</a>
<a href="https://pentest.blog/tag/malware/" class="tag-cloud-link tag-link-25 tag-link-position-23" style="font-size: 14.021505376344pt;" aria-label="malware (4 items)">malware</a>
<a href="https://pentest.blog/tag/metasploit/" class="tag-cloud-link tag-link-61 tag-link-position-24" style="font-size: 17.784946236559pt;" aria-label="metasploit (8 items)">metasploit</a>
<a href="https://pentest.blog/tag/multi-stage/" class="tag-cloud-link tag-link-82 tag-link-position-25" style="font-size: 8pt;" aria-label="multi-stage (1 item)">multi-stage</a>
<a href="https://pentest.blog/tag/nas/" class="tag-cloud-link tag-link-99 tag-link-position-26" style="font-size: 8pt;" aria-label="nas (1 item)">nas</a>
<a href="https://pentest.blog/tag/packer/" class="tag-cloud-link tag-link-81 tag-link-position-27" style="font-size: 10.709677419355pt;" aria-label="packer (2 items)">packer</a>
<a href="https://pentest.blog/tag/php/" class="tag-cloud-link tag-link-12 tag-link-position-28" style="font-size: 8pt;" aria-label="php (1 item)">php</a>
<a href="https://pentest.blog/tag/ransomware/" class="tag-cloud-link tag-link-80 tag-link-position-29" style="font-size: 8pt;" aria-label="ransomware (1 item)">ransomware</a>
<a href="https://pentest.blog/tag/rce/" class="tag-cloud-link tag-link-101 tag-link-position-30" style="font-size: 8pt;" aria-label="rce (1 item)">rce</a>
<a href="https://pentest.blog/tag/reflective/" class="tag-cloud-link tag-link-85 tag-link-position-31" style="font-size: 8pt;" aria-label="reflective (1 item)">reflective</a>
<a href="https://pentest.blog/tag/research/" class="tag-cloud-link tag-link-102 tag-link-position-32" style="font-size: 10.709677419355pt;" aria-label="research (2 items)">research</a>
<a href="https://pentest.blog/tag/reverse/" class="tag-cloud-link tag-link-96 tag-link-position-33" style="font-size: 8pt;" aria-label="reverse (1 item)">reverse</a>
<a href="https://pentest.blog/tag/reversing/" class="tag-cloud-link tag-link-41 tag-link-position-34" style="font-size: 8pt;" aria-label="reversing (1 item)">reversing</a>
<a href="https://pentest.blog/tag/secure-coding/" class="tag-cloud-link tag-link-97 tag-link-position-35" style="font-size: 8pt;" aria-label="secure coding (1 item)">secure coding</a>
<a href="https://pentest.blog/tag/securityonion/" class="tag-cloud-link tag-link-87 tag-link-position-36" style="font-size: 8pt;" aria-label="securityonion (1 item)">securityonion</a>
<a href="https://pentest.blog/tag/self-defence/" class="tag-cloud-link tag-link-91 tag-link-position-37" style="font-size: 8pt;" aria-label="self-defence (1 item)">self-defence</a>
<a href="https://pentest.blog/tag/shellcode/" class="tag-cloud-link tag-link-73 tag-link-position-38" style="font-size: 10.709677419355pt;" aria-label="shellcode (2 items)">shellcode</a>
<a href="https://pentest.blog/tag/siem/" class="tag-cloud-link tag-link-72 tag-link-position-39" style="font-size: 8pt;" aria-label="siem (1 item)">siem</a>
<a href="https://pentest.blog/tag/sql-injection/" class="tag-cloud-link tag-link-13 tag-link-position-40" style="font-size: 12.516129032258pt;" aria-label="sql injection (3 items)">sql injection</a>
<a href="https://pentest.blog/tag/sqlmap/" class="tag-cloud-link tag-link-62 tag-link-position-41" style="font-size: 10.709677419355pt;" aria-label="sqlmap (2 items)">sqlmap</a>
<a href="https://pentest.blog/tag/stager/" class="tag-cloud-link tag-link-83 tag-link-position-42" style="font-size: 8pt;" aria-label="stager (1 item)">stager</a>
<a href="https://pentest.blog/tag/storage/" class="tag-cloud-link tag-link-103 tag-link-position-43" style="font-size: 8pt;" aria-label="storage (1 item)">storage</a>
<a href="https://pentest.blog/tag/tunneling/" class="tag-cloud-link tag-link-14 tag-link-position-44" style="font-size: 8pt;" aria-label="tunneling (1 item)">tunneling</a>
<a href="https://pentest.blog/tag/windows/" class="tag-cloud-link tag-link-51 tag-link-position-45" style="font-size: 12.516129032258pt;" aria-label="windows (3 items)">windows</a></div>
</aside><aside id="custom_html-3" class="widget_text widget widget_custom_html"><h3 class="widget-title">Awarded Top 15 Pentest Blog</h3><div class="textwidget custom-html-widget"><a href="https://blog.feedspot.com/pentest_blogs/" title="Pentest Blogs" target="_blank" rel="noopener"><img alt="Pentest Blogs" src="/wp-content/uploads/pentest_1000px.png"/></a>
<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-88100923-1"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-88100923-1');
</script>

</div></aside>	</div>
</div><!-- #secondary -->
		</div><!-- close .row -->
	</div><!-- close .container -->
</div><!-- close .site-content -->

	<div id="footer-area">
		<div class="container footer-inner">
			<div class="row">
				
				</div>
		</div>

		<footer id="colophon" class="site-footer" role="contentinfo">
			<div class="site-info container">
				<div class="row">
										<nav role="navigation" class="col-md-6">
											</nav>
					<div class="copyright col-md-6">
						INVICTUS Cyber Security & Intelligence Services |						Theme by <a href="http://colorlib.com/" target="_blank" rel="nofollow noopener">Colorlib</a> Powered by <a href="http://wordpress.org/" target="_blank">WordPress</a>					</div>
				</div>
			</div><!-- .site-info -->
			<div class="scroll-to-top"><i class="fa fa-angle-up"></i></div><!-- .scroll-to-top -->
		</footer><!-- #colophon -->
	</div>
</div><!-- #page -->

		<script type="text/javascript">
		  jQuery(document).ready(function ($) {
			if ($(window).width() >= 767) {
			  $('.navbar-nav > li.menu-item > a').click(function () {
				if ($(this).attr('target') !== '_blank') {
				  window.location = $(this).attr('href')
				}
			  })
			}
		  })
		</script>
	<script type="text/javascript" src="https://pentest.blog/wp-content/plugins/asciiplayer/asciinema-player.js?ver=2.4.1" id="asciinema-player-js-js"></script>
<script type="text/javascript" id="disqus_count-js-extra">
/* <![CDATA[ */
var countVars = {"disqusShortname":"pentestblog"};
/* ]]> */
</script>
<script type="text/javascript" src="https://pentest.blog/wp-content/plugins/disqus-comment-system/public/js/comment_count.js?ver=3.1.1" id="disqus_count-js"></script>
<script type="text/javascript" id="disqus_embed-js-extra">
/* <![CDATA[ */
var embedVars = {"disqusConfig":{"integration":"wordpress 3.1.1"},"disqusIdentifier":"2182 https:\/\/pentest.blog\/?p=2182","disqusShortname":"pentestblog","disqusTitle":"Android Malware Analysis : Dissecting Hydra Dropper","disqusUrl":"https:\/\/pentest.blog\/android-malware-analysis-dissecting-hydra-dropper\/","postId":"2182"};
/* ]]> */
</script>
<script type="text/javascript" src="https://pentest.blog/wp-content/plugins/disqus-comment-system/public/js/comment_embed.js?ver=3.1.1" id="disqus_embed-js"></script>
<script type="text/javascript" src="https://pentest.blog/wp-content/themes/sparkling/assets/js/skip-link-focus-fix.min.js?ver=20140222" id="sparkling-skip-link-focus-fix-js"></script>
<script type="text/javascript" src="https://pentest.blog/wp-includes/js/comment-reply.min.js?ver=6.5.3" id="comment-reply-js" async="async" data-wp-strategy="async"></script>
<script type="text/javascript" src="https://pentest.blog/wp-content/plugins/enlighter/cache/enlighterjs.min.js?ver=vLiMInY5I09xi1g" id="enlighterjs-js"></script>
<script type="text/javascript" id="enlighterjs-js-after">
/* <![CDATA[ */
!function(e,n){if("undefined"!=typeof EnlighterJS){var o={"selectors":{"block":"pre.EnlighterJSRAW","inline":"code.EnlighterJSRAW"},"options":{"indent":2,"ampersandCleanup":true,"linehover":true,"rawcodeDbclick":false,"textOverflow":"break","linenumbers":true,"theme":"enlighter","language":"generic","retainCssClasses":false,"collapse":false,"toolbarOuter":"","toolbarTop":"{BTN_RAW}{BTN_COPY}{BTN_WINDOW}{BTN_WEBSITE}","toolbarBottom":""}};(e.EnlighterJSINIT=function(){EnlighterJS.init(o.selectors.block,o.selectors.inline,o.options)})()}else{(n&&(n.error||n.log)||function(){})("Error: EnlighterJS resources not loaded yet!")}}(window,console);
/* ]]> */
</script>

</body>
</html>
