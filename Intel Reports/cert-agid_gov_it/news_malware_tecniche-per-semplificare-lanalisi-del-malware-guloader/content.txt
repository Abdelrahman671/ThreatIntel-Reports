<!DOCTYPE html>
<!--[if IE 8]><html class="no-js ie89 ie8" lang="it"><![endif]-->
<!--[if IE 9]><html class="no-js ie89 ie9" lang="it"><![endif]-->
<!--[if (gte IE 9)|!(IE)]><!-->
<html class="no-js" lang="it-IT"
xmlns:og="http://opengraphprotocol.org/schema/"
xmlns:fb="http://www.facebook.com/2008/fbml"
prefix="og: http://ogp.me/ns#">
<!--<![endif]-->


<head>
  <meta charset="UTF-8">
  <meta http-equiv="x-ua-compatible" content="ie=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1">

  <link rel="preload" href="/wp-content/themes/cert-agid/build/IWT.min.js" as="script">
  <link href='https://fonts.googleapis.com/css?family=Titillium+Web:300,400,400i,600,700,' rel='stylesheet' type='text/css' />

  <link rel="stylesheet" href="/wp-content/themes/cert-agid/assets/css/brands.min.css">
  <link rel="stylesheet" href="/wp-content/themes/cert-agid/assets/css/fa-all.css">
  <link rel="icon" type="image/png" href="/wp-content/themes/cert-agid/assets/images/favicon.png">

  <script src="/wp-content/themes/cert-agid/build/vendor/modernizr.js"></script>
  <link media="all" rel="stylesheet" href="/wp-content/themes/cert-agid/style.css?v=2">
  <link media="all" rel="stylesheet" href="/wp-content/themes/cert-agid/build/build.css?v=1">
  
  <script src="/wp-content/themes/cert-agid/assets/js/jquery-1.12.4.min.js"></script>

  <title>Tecniche per semplificare l&#8217;analisi del malware GuLoader &#8211; CERT-AGID</title>
<meta name='robots' content='max-image-preview:large' />
	<style>img:is([sizes="auto" i], [sizes^="auto," i]) { contain-intrinsic-size: 3000px 1500px }</style>
	<script type="text/javascript">
/* <![CDATA[ */
window._wpemojiSettings = {"baseUrl":"https:\/\/s.w.org\/images\/core\/emoji\/15.0.3\/72x72\/","ext":".png","svgUrl":"https:\/\/s.w.org\/images\/core\/emoji\/15.0.3\/svg\/","svgExt":".svg","source":{"concatemoji":"https:\/\/cert-agid.gov.it\/wp-includes\/js\/wp-emoji-release.min.js?ver=6.7.1"}};
/*! This file is auto-generated */
!function(i,n){var o,s,e;function c(e){try{var t={supportTests:e,timestamp:(new Date).valueOf()};sessionStorage.setItem(o,JSON.stringify(t))}catch(e){}}function p(e,t,n){e.clearRect(0,0,e.canvas.width,e.canvas.height),e.fillText(t,0,0);var t=new Uint32Array(e.getImageData(0,0,e.canvas.width,e.canvas.height).data),r=(e.clearRect(0,0,e.canvas.width,e.canvas.height),e.fillText(n,0,0),new Uint32Array(e.getImageData(0,0,e.canvas.width,e.canvas.height).data));return t.every(function(e,t){return e===r[t]})}function u(e,t,n){switch(t){case"flag":return n(e,"\ud83c\udff3\ufe0f\u200d\u26a7\ufe0f","\ud83c\udff3\ufe0f\u200b\u26a7\ufe0f")?!1:!n(e,"\ud83c\uddfa\ud83c\uddf3","\ud83c\uddfa\u200b\ud83c\uddf3")&&!n(e,"\ud83c\udff4\udb40\udc67\udb40\udc62\udb40\udc65\udb40\udc6e\udb40\udc67\udb40\udc7f","\ud83c\udff4\u200b\udb40\udc67\u200b\udb40\udc62\u200b\udb40\udc65\u200b\udb40\udc6e\u200b\udb40\udc67\u200b\udb40\udc7f");case"emoji":return!n(e,"\ud83d\udc26\u200d\u2b1b","\ud83d\udc26\u200b\u2b1b")}return!1}function f(e,t,n){var r="undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope?new OffscreenCanvas(300,150):i.createElement("canvas"),a=r.getContext("2d",{willReadFrequently:!0}),o=(a.textBaseline="top",a.font="600 32px Arial",{});return e.forEach(function(e){o[e]=t(a,e,n)}),o}function t(e){var t=i.createElement("script");t.src=e,t.defer=!0,i.head.appendChild(t)}"undefined"!=typeof Promise&&(o="wpEmojiSettingsSupports",s=["flag","emoji"],n.supports={everything:!0,everythingExceptFlag:!0},e=new Promise(function(e){i.addEventListener("DOMContentLoaded",e,{once:!0})}),new Promise(function(t){var n=function(){try{var e=JSON.parse(sessionStorage.getItem(o));if("object"==typeof e&&"number"==typeof e.timestamp&&(new Date).valueOf()<e.timestamp+604800&&"object"==typeof e.supportTests)return e.supportTests}catch(e){}return null}();if(!n){if("undefined"!=typeof Worker&&"undefined"!=typeof OffscreenCanvas&&"undefined"!=typeof URL&&URL.createObjectURL&&"undefined"!=typeof Blob)try{var e="postMessage("+f.toString()+"("+[JSON.stringify(s),u.toString(),p.toString()].join(",")+"));",r=new Blob([e],{type:"text/javascript"}),a=new Worker(URL.createObjectURL(r),{name:"wpTestEmojiSupports"});return void(a.onmessage=function(e){c(n=e.data),a.terminate(),t(n)})}catch(e){}c(n=f(s,u,p))}t(n)}).then(function(e){for(var t in e)n.supports[t]=e[t],n.supports.everything=n.supports.everything&&n.supports[t],"flag"!==t&&(n.supports.everythingExceptFlag=n.supports.everythingExceptFlag&&n.supports[t]);n.supports.everythingExceptFlag=n.supports.everythingExceptFlag&&!n.supports.flag,n.DOMReady=!1,n.readyCallback=function(){n.DOMReady=!0}}).then(function(){return e}).then(function(){var e;n.supports.everything||(n.readyCallback(),(e=n.source||{}).concatemoji?t(e.concatemoji):e.wpemoji&&e.twemoji&&(t(e.twemoji),t(e.wpemoji)))}))}((window,document),window._wpemojiSettings);
/* ]]> */
</script>
<style id='wp-emoji-styles-inline-css' type='text/css'>

	img.wp-smiley, img.emoji {
		display: inline !important;
		border: none !important;
		box-shadow: none !important;
		height: 1em !important;
		width: 1em !important;
		margin: 0 0.07em !important;
		vertical-align: -0.1em !important;
		background: none !important;
		padding: 0 !important;
	}
</style>
<link rel='stylesheet' id='wp-block-library-css' href='https://cert-agid.gov.it/wp-includes/css/dist/block-library/style.min.css?ver=6.7.1' type='text/css' media='all' />
<style id='highcode-highcode-style-inline-css' type='text/css'>
.wp-block-highcode-highcode{border-radius:.3em;display:block;font-family:monospace;font-size:1em;margin:1.3em auto;max-height:28em;overflow:auto;padding:1.2em!important;white-space:pre;width:100%}

</style>
<style id='classic-theme-styles-inline-css' type='text/css'>
/*! This file is auto-generated */
.wp-block-button__link{color:#fff;background-color:#32373c;border-radius:9999px;box-shadow:none;text-decoration:none;padding:calc(.667em + 2px) calc(1.333em + 2px);font-size:1.125em}.wp-block-file__button{background:#32373c;color:#fff;text-decoration:none}
</style>
<style id='global-styles-inline-css' type='text/css'>
:root{--wp--preset--aspect-ratio--square: 1;--wp--preset--aspect-ratio--4-3: 4/3;--wp--preset--aspect-ratio--3-4: 3/4;--wp--preset--aspect-ratio--3-2: 3/2;--wp--preset--aspect-ratio--2-3: 2/3;--wp--preset--aspect-ratio--16-9: 16/9;--wp--preset--aspect-ratio--9-16: 9/16;--wp--preset--color--black: #000000;--wp--preset--color--cyan-bluish-gray: #abb8c3;--wp--preset--color--white: #ffffff;--wp--preset--color--pale-pink: #f78da7;--wp--preset--color--vivid-red: #cf2e2e;--wp--preset--color--luminous-vivid-orange: #ff6900;--wp--preset--color--luminous-vivid-amber: #fcb900;--wp--preset--color--light-green-cyan: #7bdcb5;--wp--preset--color--vivid-green-cyan: #00d084;--wp--preset--color--pale-cyan-blue: #8ed1fc;--wp--preset--color--vivid-cyan-blue: #0693e3;--wp--preset--color--vivid-purple: #9b51e0;--wp--preset--gradient--vivid-cyan-blue-to-vivid-purple: linear-gradient(135deg,rgba(6,147,227,1) 0%,rgb(155,81,224) 100%);--wp--preset--gradient--light-green-cyan-to-vivid-green-cyan: linear-gradient(135deg,rgb(122,220,180) 0%,rgb(0,208,130) 100%);--wp--preset--gradient--luminous-vivid-amber-to-luminous-vivid-orange: linear-gradient(135deg,rgba(252,185,0,1) 0%,rgba(255,105,0,1) 100%);--wp--preset--gradient--luminous-vivid-orange-to-vivid-red: linear-gradient(135deg,rgba(255,105,0,1) 0%,rgb(207,46,46) 100%);--wp--preset--gradient--very-light-gray-to-cyan-bluish-gray: linear-gradient(135deg,rgb(238,238,238) 0%,rgb(169,184,195) 100%);--wp--preset--gradient--cool-to-warm-spectrum: linear-gradient(135deg,rgb(74,234,220) 0%,rgb(151,120,209) 20%,rgb(207,42,186) 40%,rgb(238,44,130) 60%,rgb(251,105,98) 80%,rgb(254,248,76) 100%);--wp--preset--gradient--blush-light-purple: linear-gradient(135deg,rgb(255,206,236) 0%,rgb(152,150,240) 100%);--wp--preset--gradient--blush-bordeaux: linear-gradient(135deg,rgb(254,205,165) 0%,rgb(254,45,45) 50%,rgb(107,0,62) 100%);--wp--preset--gradient--luminous-dusk: linear-gradient(135deg,rgb(255,203,112) 0%,rgb(199,81,192) 50%,rgb(65,88,208) 100%);--wp--preset--gradient--pale-ocean: linear-gradient(135deg,rgb(255,245,203) 0%,rgb(182,227,212) 50%,rgb(51,167,181) 100%);--wp--preset--gradient--electric-grass: linear-gradient(135deg,rgb(202,248,128) 0%,rgb(113,206,126) 100%);--wp--preset--gradient--midnight: linear-gradient(135deg,rgb(2,3,129) 0%,rgb(40,116,252) 100%);--wp--preset--font-size--small: 13px;--wp--preset--font-size--medium: 20px;--wp--preset--font-size--large: 36px;--wp--preset--font-size--x-large: 42px;--wp--preset--spacing--20: 0.44rem;--wp--preset--spacing--30: 0.67rem;--wp--preset--spacing--40: 1rem;--wp--preset--spacing--50: 1.5rem;--wp--preset--spacing--60: 2.25rem;--wp--preset--spacing--70: 3.38rem;--wp--preset--spacing--80: 5.06rem;--wp--preset--shadow--natural: 6px 6px 9px rgba(0, 0, 0, 0.2);--wp--preset--shadow--deep: 12px 12px 50px rgba(0, 0, 0, 0.4);--wp--preset--shadow--sharp: 6px 6px 0px rgba(0, 0, 0, 0.2);--wp--preset--shadow--outlined: 6px 6px 0px -3px rgba(255, 255, 255, 1), 6px 6px rgba(0, 0, 0, 1);--wp--preset--shadow--crisp: 6px 6px 0px rgba(0, 0, 0, 1);}:where(.is-layout-flex){gap: 0.5em;}:where(.is-layout-grid){gap: 0.5em;}body .is-layout-flex{display: flex;}.is-layout-flex{flex-wrap: wrap;align-items: center;}.is-layout-flex > :is(*, div){margin: 0;}body .is-layout-grid{display: grid;}.is-layout-grid > :is(*, div){margin: 0;}:where(.wp-block-columns.is-layout-flex){gap: 2em;}:where(.wp-block-columns.is-layout-grid){gap: 2em;}:where(.wp-block-post-template.is-layout-flex){gap: 1.25em;}:where(.wp-block-post-template.is-layout-grid){gap: 1.25em;}.has-black-color{color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-color{color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-color{color: var(--wp--preset--color--white) !important;}.has-pale-pink-color{color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-color{color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-color{color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-color{color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-color{color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-color{color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-color{color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-color{color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-color{color: var(--wp--preset--color--vivid-purple) !important;}.has-black-background-color{background-color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-background-color{background-color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-background-color{background-color: var(--wp--preset--color--white) !important;}.has-pale-pink-background-color{background-color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-background-color{background-color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-background-color{background-color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-background-color{background-color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-background-color{background-color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-background-color{background-color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-background-color{background-color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-background-color{background-color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-background-color{background-color: var(--wp--preset--color--vivid-purple) !important;}.has-black-border-color{border-color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-border-color{border-color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-border-color{border-color: var(--wp--preset--color--white) !important;}.has-pale-pink-border-color{border-color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-border-color{border-color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-border-color{border-color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-border-color{border-color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-border-color{border-color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-border-color{border-color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-border-color{border-color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-border-color{border-color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-border-color{border-color: var(--wp--preset--color--vivid-purple) !important;}.has-vivid-cyan-blue-to-vivid-purple-gradient-background{background: var(--wp--preset--gradient--vivid-cyan-blue-to-vivid-purple) !important;}.has-light-green-cyan-to-vivid-green-cyan-gradient-background{background: var(--wp--preset--gradient--light-green-cyan-to-vivid-green-cyan) !important;}.has-luminous-vivid-amber-to-luminous-vivid-orange-gradient-background{background: var(--wp--preset--gradient--luminous-vivid-amber-to-luminous-vivid-orange) !important;}.has-luminous-vivid-orange-to-vivid-red-gradient-background{background: var(--wp--preset--gradient--luminous-vivid-orange-to-vivid-red) !important;}.has-very-light-gray-to-cyan-bluish-gray-gradient-background{background: var(--wp--preset--gradient--very-light-gray-to-cyan-bluish-gray) !important;}.has-cool-to-warm-spectrum-gradient-background{background: var(--wp--preset--gradient--cool-to-warm-spectrum) !important;}.has-blush-light-purple-gradient-background{background: var(--wp--preset--gradient--blush-light-purple) !important;}.has-blush-bordeaux-gradient-background{background: var(--wp--preset--gradient--blush-bordeaux) !important;}.has-luminous-dusk-gradient-background{background: var(--wp--preset--gradient--luminous-dusk) !important;}.has-pale-ocean-gradient-background{background: var(--wp--preset--gradient--pale-ocean) !important;}.has-electric-grass-gradient-background{background: var(--wp--preset--gradient--electric-grass) !important;}.has-midnight-gradient-background{background: var(--wp--preset--gradient--midnight) !important;}.has-small-font-size{font-size: var(--wp--preset--font-size--small) !important;}.has-medium-font-size{font-size: var(--wp--preset--font-size--medium) !important;}.has-large-font-size{font-size: var(--wp--preset--font-size--large) !important;}.has-x-large-font-size{font-size: var(--wp--preset--font-size--x-large) !important;}
:where(.wp-block-post-template.is-layout-flex){gap: 1.25em;}:where(.wp-block-post-template.is-layout-grid){gap: 1.25em;}
:where(.wp-block-columns.is-layout-flex){gap: 2em;}:where(.wp-block-columns.is-layout-grid){gap: 2em;}
:root :where(.wp-block-pullquote){font-size: 1.5em;line-height: 1.6;}
</style>
<link rel='stylesheet' id='highlightcss-css' href='https://cert-agid.gov.it/wp-content/plugins/highcode/github-dark-dimmed.min.css?ver=6.7.1' type='text/css' media='all' />
<script type="text/javascript" src="https://cert-agid.gov.it/wp-content/plugins/highcode/highlight.min.js?ver=6.7.1" id="highlightjs-js"></script>
<script type="text/javascript" src="https://cert-agid.gov.it/wp-includes/js/jquery/jquery.min.js?ver=3.7.1" id="jquery-core-js"></script>
<script type="text/javascript" src="https://cert-agid.gov.it/wp-includes/js/jquery/jquery-migrate.min.js?ver=3.4.1" id="jquery-migrate-js"></script>
<link rel="https://api.w.org/" href="https://cert-agid.gov.it/wp-json/" /><link rel="alternate" title="JSON" type="application/json" href="https://cert-agid.gov.it/wp-json/wp/v2/posts/5134" /><link rel="canonical" href="https://cert-agid.gov.it/news/malware/tecniche-per-semplificare-lanalisi-del-malware-guloader/" />
<link rel='shortlink' href='https://cert-agid.gov.it/?p=5134' />
<link rel="alternate" title="oEmbed (JSON)" type="application/json+oembed" href="https://cert-agid.gov.it/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fcert-agid.gov.it%2Fnews%2Fmalware%2Ftecniche-per-semplificare-lanalisi-del-malware-guloader%2F" />
<link rel="alternate" title="oEmbed (XML)" type="text/xml+oembed" href="https://cert-agid.gov.it/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fcert-agid.gov.it%2Fnews%2Fmalware%2Ftecniche-per-semplificare-lanalisi-del-malware-guloader%2F&#038;format=xml" />
<meta name="twitter:card" content="summary" /><meta name="twitter:site" content="@certagid" /><meta property="og:title" content="Tecniche per semplificare l&#8217;analisi del malware GuLoader"/><meta property="og:type" content="article"/><meta property="og:url" content="https://cert-agid.gov.it/news/malware/tecniche-per-semplificare-lanalisi-del-malware-guloader/"/><meta property="og:site_name" content="CERT-AGID"/><meta property="og:description" content="Tecniche per semplificare l&#8217;analisi del malware GuLoader"/><meta property="og:image" content="https://cert-agid.gov.it/wp-content/uploads/2022/07/image-3-300x176.png"/></head>

<body class="post-template-default single single-post postid-5134 single-format-standard t-certagid">
  <ul class="Skiplinks js-fr-bypasslinks u-hiddenPrint">
    <li><a href="#main">Vai al contenuto</a></li>
    <li><a class="js-fr-offcanvas-open" href="#menu" aria-controls="menu" aria-label="accedi al menu" title="accedi al menu">Vai alla navigazione del sito</a></li>
  </ul>





  <header class="Header  u-hiddenPrint">
    <div class="Header-banner ">
      <div class="u-layout-wide Grid Grid--alignMiddle u-layoutCenter">
	<div class="Grid-cell"  aria-hidden="true" style="padding: 5px 0;">
	  <div style="float:right;">

	    <ul class="top-menu u-hidden u-sm-hidden u-md-inlineBlock u-lg-inlineBlock" >

	    </ul>


          </div>
        </div>
      </div>
    </div>


    <div class="Header-navbar ">
	<div class="u-layout-wide Grid Grid--alignMiddle u-layoutCenter">
        <div class="Header-logo Grid-cell" aria-hidden="true">
          <a href="https://cert-agid.gov.it/" tabindex="-1">
            <img src="/wp-content/themes/cert-agid/assets/images/cert-agid-logo-white.svg" alt="Logo CERT-AGID">
          </a>
        </div>

        <div class="Header-title Grid-cell u-xs-larger">
          <h1 class="Header-titleLink">
            <a href="https://cert-agid.gov.it/" class="u-xs-font-reduced" style="text-decoration: none !important; padding-top:13px;">
              CERT-AGID	      
              <br class="Header-subTitle-break">
	      
	      <span class="Header-subTitle">
Computer Emergency Response Team<br>AGID              </span>
            </a>
          </h1>
        </div>


	<div class="Header-logo2 Grid-cell u-size3of12 u-sm-size2of12 u-md-size4of12 u-lg-size4of12 u-hidden u-sm-block u-md-block u-lg-block">

 	    <div class="title u-hidden u-sm-hidden u-md-inlineBlock u-lg-inlineBlock" style="float:right; vertical-align:middle;">
              <a href="https://www.agid.gov.it">Agenzia per<br>l'Italia Digitale</a>
	    </div>

            <div class="u-hidden u-sm-hidden u-md-inlineBlock u-lg-inlineBlock" style="float:right; padding-top:6px; vertical-align: middle;">  
	      <a href="https://www.agid.gov.it" tabindex="-1">
                <img class="logo" 
                     src="/wp-content/themes/cert-agid/assets/images/logo-agid.svg" 
                     alt="Logo AgID - Agenzia per l'Italia Digitale">
	      </a>
	    </div>

	</div>

        <div class="Header-searchTrigger Grid-cell">
          <button aria-controls="header-search" class="js-Header-search-trigger Icon Icon-search " title="attiva il form di ricerca" aria-label="attiva il form di ricerca" aria-hidden="false"></button>
          <button aria-controls="header-search" class="js-Header-search-trigger Icon Icon-close u-hidden " title="disattiva il form di ricerca" aria-label="disattiva il form di ricerca" aria-hidden="true"></button>
        </div>
	
	<div class="Header-utils Grid-cell">
          <div class="Header-social Headroom-hideme">
            <p>Seguici su</p>
            <ul class="Header-socialIcons">              <li>
                <a href="https://cert-agid.gov.it/feed/" title="RSS">
                  <span class="Icon Icon-rss"></span>
                  <span class="u-hiddenVisually">RSS</span>
                </a>
              </li>
              <li>
                <a href="https://t.me/certagid" title="Telegram">
                  <span class="fab fa-telegram-plane"></span>
                  <span class="u-hiddenVisually">Telegram</span>
                </a>
              </li>
              <li>
                <a href="https://twitter.com/agidcert" title="X / Twitter">
                  <span class="fa-brands fa-x-twitter"></span>
                  <span class="u-hiddenVisually">X / Twitter</span>
                </a>
              </li>
</ul>
	  </div>
          <div class="Header-search" id="header-search">
            <form class="Form" action="/">
              <div class="Form-field Form-field--withPlaceholder Grid u-background-white u-color-grey-30 u-borderRadius-s" role="search">
                <input name="s" class="Form-input Form-input--ultraLean Grid-cell u-sizeFill u-text-r-s u-color-black u-text-r-xs u-borderRadius-s" required id="cerca" value="">
                <label class="Form-label u-color-grey-50 u-text-r-xxs" for="cerca">cerca nel sito</label>
                <button class="clickable Grid-cell u-sizeFit Icon-search Icon--rotated u-color-grey-50 u-padding-all-s u-textWeight-700" title="Avvia la ricerca" aria-label="Avvia la ricerca"></button>
              </div>
            </form>
          </div>
        </div>
    
        <div class="Header-toggle Grid-cell">
          <a class="Hamburger-toggleContainer js-fr-offcanvas-open u-nojsDisplayInlineBlock u-lg-hidden u-md-hidden" href="#menu" aria-controls="menu" aria-label="accedi al menu" title="accedi al menu">
        		<span class="Hamburger-toggle" role="presentation"></span>
            <span class="Header-toggleText" role="presentation">Menu</span>          </a>
        </div>

      </div>
    </div>
    <!-- Header-navbar -->


    <div class="Headroom-hideme u-textCenter u-hidden u-sm-hidden u-md-block u-lg-block">
        <nav class="Megamenu Megamenu--default js-megamenu " data-rel=".Offcanvas .Treeview"></nav>
    </div>
  </header>

  <!-- Print header -->
  <header class="Header-print u-margin-top-xxl u-blockPrint u-hidden">
    <div class="u-layout-wide u-layout-r-withGutter u-layoutCenter">

      <div class="Grid Grid--withGutter Grid--alignMiddle">
        <div class="Grid-cell u-sizeFull" aria-hidden="true">
            
            <div class="Grid Grid--alignMiddle">
              <img class="Grid-cell Footer-logo u-sizeFit" src="/wp-content/themes/cert-agid/assets/images/cert-agid-logo-black.svg" alt="Logo del CERT-PA">
              
              <span class="Grid-cell Footer-siteName u-sizeFit" >CERT-AGID</span>

              <div class="Grid-cell u-sizeFill u-color-print u-text-xl">
                <a href="https://cert-agid.gov.it/" class="Print-link">https://cert-agid.gov.it/</a>
              </div>
            </div>

        </div>
      </div>
    </div>
  </header>

  <section class="Offcanvas Offcanvas--right Offcanvas--modal js-fr-offcanvas u-jsVisibilityHidden u-nojsDisplayNone u-hiddenPrint" id="menu">
    <h2 class="u-hiddenVisually">Menu di navigazione</h2>
    <div class="Offcanvas-content u-background-white">
        <div class="Offcanvas-toggleContainer u-background-70 u-jsHidden">
            <a class="Hamburger-toggleContainer u-block u-color-white u-padding-bottom-xxl u-padding-left-s u-padding-top-xxl js-fr-offcanvas-close" aria-controls="menu" aria-label="esci dalla navigazione" title="esci dalla navigazione" href="#">
              <span class="Hamburger-toggle is-active" aria-hidden="true"></span>
            </a>
        </div>
        <nav>
            <ul class="Linklist Linklist--padded Treeview Treeview--default js-Treeview u-text-r-xs" style="max-width: 180rem !important;">
<li id="menu-item-42" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-has-children menu-item-42"><a href="#">Documentazione</a>
<ul class="sub-menu">
	<li id="menu-item-43" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-43"><a href="https://cert-agid.gov.it/documenti-agid/">Documenti AGID</a></li>
	<li id="menu-item-163" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-163"><a href="https://cert-agid.gov.it/pillole-informative/">Pillole informative</a></li>
	<li id="menu-item-3285" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-3285"><a href="https://cert-agid.gov.it/scarica-il-modulo-accreditamento-feed-ioc/">Flusso IoC</a></li>
</ul>
</li>
<li id="menu-item-13" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-13"><a href="https://cert-agid.gov.it/chi-siamo/">Chi siamo</a></li>
<li id="menu-item-50" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-50"><a href="https://cert-agid.gov.it/contatti/">Contatti</a></li>
<li id="menu-item-16" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-has-children menu-item-16"><a href="https://cert-agid.gov.it/strumenti/">Strumenti</a>
<ul class="sub-menu">
	<li id="menu-item-8727" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-8727"><a href="https://cert-agid.gov.it/hashr/">hashr</a></li>
	<li id="menu-item-3922" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-3922"><a href="https://cert-agid.gov.it/verifica-https-cms/">Verifica HTTPS e CMS</a></li>
	<li id="menu-item-4778" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-4778"><a href="https://cert-agid.gov.it/statistiche/">Statistiche sulle campagne italiane di malware e phishing</a></li>
</ul>
</li>
<li id="menu-item-90" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-has-children menu-item-90"><a href="https://cert-agid.gov.it/glossario/">Glossario</a>
<ul class="sub-menu">
	<li id="menu-item-91" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-91"><a href="https://cert-agid.gov.it/glossario/0day/">0day</a></li>
	<li id="menu-item-92" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-92"><a href="https://cert-agid.gov.it/glossario/botnet/">Botnet</a></li>
	<li id="menu-item-93" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-93"><a href="https://cert-agid.gov.it/glossario/data-breach/">Data breach</a></li>
	<li id="menu-item-94" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-94"><a href="https://cert-agid.gov.it/glossario/ddos-dos/">DDOS-DOS</a></li>
	<li id="menu-item-95" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-95"><a href="https://cert-agid.gov.it/glossario/deep-dark-web/">Deep-Dark web</a></li>
	<li id="menu-item-96" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-96"><a href="https://cert-agid.gov.it/glossario/defacing/">Defacing</a></li>
	<li id="menu-item-97" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-97"><a href="https://cert-agid.gov.it/glossario/exploit/">Exploit</a></li>
	<li id="menu-item-98" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-98"><a href="https://cert-agid.gov.it/glossario/mitm/">MITM</a></li>
	<li id="menu-item-99" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-99"><a href="https://cert-agid.gov.it/glossario/osint-closint/">OSINT-CLOSINT</a></li>
	<li id="menu-item-100" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-100"><a href="https://cert-agid.gov.it/glossario/phishing/">Phishing</a></li>
	<li id="menu-item-101" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-101"><a href="https://cert-agid.gov.it/glossario/privilege-escalation/">Privilege escalation</a></li>
	<li id="menu-item-102" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-102"><a href="https://cert-agid.gov.it/glossario/spam/">Spam</a></li>
	<li id="menu-item-103" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-103"><a href="https://cert-agid.gov.it/glossario/spoofing/">Spoofing</a></li>
	<li id="menu-item-104" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-104"><a href="https://cert-agid.gov.it/glossario/sqli-sql-injection/">SQLi-SQL Injection</a></li>
	<li id="menu-item-105" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-105"><a href="https://cert-agid.gov.it/glossario/xss/">XSS</a></li>
</ul>
</li>
<li id="menu-item-44" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-has-children menu-item-44"><a href="#">Link utili</a>
<ul class="sub-menu">
	<li id="menu-item-45" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-45"><a href="https://www.agid.gov.it/">Agenzia per l&#8217;Italia Digitale</a></li>
	<li id="menu-item-10" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-10"><a href="https://csirt.gov.it">CSIRT Italia</a></li>
	<li id="menu-item-47" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-47"><a href="https://www.cert.garr.it/">CERT-GARR</a></li>
	<li id="menu-item-49" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-49"><a href="https://www.commissariatodips.it/profilo/cnaipic/index.html">CNAIPIC</a></li>
	<li id="menu-item-48" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-48"><a href="https://www.difesa.it/smd/cor/cert-difesa/25338.html">CERT-DIFESA</a></li>
</ul>
</li>
            </ul>
        </nav>
    </div>

   <script type="text/javascript">
	jQuery('.menu-item-has-children > a').addClass('Megamenu-submenu');
   </script>	
  </section>


  <div id="main">
    <div class="main-overlaid"></div>
    <div class="u-layout-wide u-layoutCenter u-layout-r-withGutters">
  
      <div class="Grid Grid-print">

	<div class="menu-menu-categorie-container"><ul id="menu-menu-categorie" class="menu"></li>
</li>
</li>
</li>
</ul></div>	 

        <!-- BREADCRUMB -->
        <div class="Grid-cell u-sizeFull u-md-size2of12 u-lg-size2of12 u-hiddenPrint"></div>

        <div class="Grid-cell u-sizeFull u-md-size8of12 u-lg-size8of12 u-hiddenPrint">
          <section class="u-layout-wide u-layoutCenter u-padding-top-xl u-padding-r-left u-padding-r-right">
            <nav aria-label="sei qui:" role="navigation">
              <ul class="Breadcrumb">
                <li class="Breadcrumb-item"><a class="Breadcrumb-link u-color-50 u-lineHeight-l" href="https://cert-agid.gov.it/">Home</a></li>
                <li class="Breadcrumb-item">
                  <a class="Breadcrumb-link u-color-50 u-lineHeight-l" href="https://cert-agid.gov.it/category/malpedia/">
                    Malpedia                  </a>
                </li>
                <li class="Breadcrumb-item"><span class="u-lineHeight-l" href="/">Tecniche per semplificare l&#8217;analisi del malware GuLoader</span></li>
              </ul>
	    </nav>

	    <div class="u-padding-top-l" style="border-bottom: 1px solid #aaaaaa"></div>
          </section>
        </div>

        <div class="Grid-cell u-sizeFull u-md-size2of12 u-lg-size2of12 u-hiddenPrint"></div>


        <!-- NEWS -->
        <div class="Grid-cell u-sizeFull u-md-size2of12 u-lg-size2of12"></div>

        <div class="Grid-cell u-sizeFull u-md-size8of12 u-lg-size8of12 u-margin-bottom-xl">
          <article id="post-5134" class="u-layout-wide u-layoutCenter u-padding-r-all Post-text post-5134 post type-post status-publish format-standard has-post-thumbnail hentry category-malpedia category-malware tag-guloader">
	    <h1 class="u-text-h2 u-titlePrint WP-Title" style="margin: 2rem 0 !important; ">Tecniche per semplificare l&#8217;analisi del malware GuLoader</h1>

    	    <div class="u-text-l u-color-50 u-margin-top-xs">21/07/2022</div>
	    <br>			<a class="tag-item u-textClean u-textWeight-700 u-text-r-xxs u-color-80-commented u-color-print " href="https://cert-agid.gov.it/tag/guloader/">
				guloader			</a>

            <div class="News-prose u-margin-top-xl">
		
<p>Gli analisti di CERT-AgID hanno osservato GuLoader in Italia per la prima volta verso la fine mese di marzo 2021. Nell&#8217;arco dello scorso anno sono state registrate solo 6 campagne che utilizzavano GuLoader sfruttando il tema &#8220;<em>Pagamenti</em>&#8220;, &#8220;<em>Preventivo</em>&#8221; e &#8220;<em>Ordine</em>&#8221; con lo scopo di veicolare il malware <strong>AgentTesla</strong> ed in un solo caso si è avuta evidenza del rilascio di <strong>Remcos</strong>.</p>



<p>Le campagne GuLoader in Italia sono terminate a fine settembre 2021 per poi ripresentarsi nel 2022, mantenendo gli stessi temi, con 4 nuove campagne: una ad aprile, un&#8217;altra a metà giugno e le ultime due &#8211; ad un mese esatto di distanza &#8211; a metà luglio.</p>



<p>GuLoader è un dropper che si caratterizza per l&#8217;efficacia delle sue misure anti-debug e anti-vm. Il CERT-AgID aveva <a href="https://cert-agid.gov.it/wp-content/uploads/2020/06/CERT-AGID_Tecniche-di-AntiVM-AntiDBG-20200514.pdf">già discusso la natura di tali misure</a>, anche se al tempo il packer non era stato identificato come GuLoader. Ad oggi, tali tecniche sono state affinate e ve ne sono state aggiunte di nuove, al punto che analizzare GuLoader è diventato un compito abbastanza complesso.</p>



<h2 class="wp-block-heading">Due vecchie tecniche migliorano</h2>



<p>GuLoader disponeva di un controllo anti-debug che, anzichè cercare un comportamento anomalo delle API di Windows, <strong>verificava la presenza in memoria di artefatti usati dai debugger </strong>(o loro plugin) per nascondersi dai malware.</p>


<div class="wp-block-image">
<figure class="aligncenter size-large"><img fetchpriority="high" decoding="async" width="1024" height="237" src="https://cert-agid.gov.it/wp-content/uploads/2022/07/image-1024x237.png" alt="" class="wp-image-5135" srcset="https://cert-agid.gov.it/wp-content/uploads/2022/07/image-1024x237.png 1024w, https://cert-agid.gov.it/wp-content/uploads/2022/07/image-300x69.png 300w, https://cert-agid.gov.it/wp-content/uploads/2022/07/image-768x177.png 768w, https://cert-agid.gov.it/wp-content/uploads/2022/07/image.png 1381w" sizes="(max-width: 1024px) 100vw, 1024px" /><figcaption>Esempio di un&#8217;area di memoria contenente codice e dati di Scylla, un plugin per nascondere il debugger, in un processo sotto debug.</figcaption></figure></div>


<p>GuLoader non controllava direttamente la presenza di valori specifici ma utilizza l&#8217;hashing <a href="https://theartincode.stanis.me/008-djb2/">DBJ2</a> su gli indirizzi di porzioni di memoria determinate empiricamente.</p>



<p><strong>Questa tecnica era totalmente efficace nel rilevare i debugger più usati</strong>: la chiamata alla funzione che effettuava questo controllo era <strong>facilmente identificabile</strong> per via del fatto che prendeva un gran numero di argomenti (gli hash degli artefatti) terminati dal valore <code>0xffffffff</code>. In questo caso era sufficiente rimpiazzare la chiamata con dei <code><em>NOP</em></code> per superare l&#8217;ostacolo.</p>



<p>Questa tecnica, oggi, esiste ancora ma qualcosa è stato cambiato. Gli argomenti passati alla funzione non si limitano agli hash ma contengono anche dei numeri.</p>


<div class="wp-block-image">
<figure class="aligncenter size-full is-resized"><img decoding="async" src="https://cert-agid.gov.it/wp-content/uploads/2022/07/image-1.png" alt="" class="wp-image-5136" width="412" height="295"/><figcaption>Gli argomenti della funzione che controlla la presenza di debugger. Sono coppie composte da un numero ed un hash, terminate da uno zero.</figcaption></figure></div>


<p>Probabilmente la tecnica di rilevamento è stata aggiornata per essere più resiliente ed adeguarsi alla continua evoluzione dei debugger.</p>



<p><strong>Ancora oggi il rilevamento del debugger è efficace</strong> e l&#8217;unica opzione per eludere questo controllo è quello di individuare la chiamata e di rimpiazzarla, oppure disinstallare i plugin nella speranza che il debugger non abbia artefatti propri rilevati da GuLoader. Disabilitare i plugin però comporterà la facile individuazione del debugger tramite le usuali tecniche anti-debug (es: tramite <em>NtQueryInformationProcess</em>) che GuLoader non disdegna. Per debuggare GuLoader è quindi necessario procedere passo passo fino all&#8217;individuazione di questa chiamata. Tuttavia, gli autori del dropper hanno individuato un metodo per rendere l&#8217;analisi passo passo molto tediosa.</p>



<h2 class="wp-block-heading">Tecniche di Anti-VM</h2>



<p>Sfortunatamente per noi, GuLoader ha un ottimo controllo anti-vm che continua ad ingannare <a href="https://app.any.run/tasks/02138642-5020-4e81-a3cf-b5d9d4715ebf/">anche le sandbox online</a>. Quindi, eseguirlo in una VM insieme ad uno strumento in grado di monitorare il traffico di rete non è sufficiente per ottenere il drop URL ed il payload.</p>



<p>La tecnica che veniva usata nel campione analizzato nel bollettino allegato era stata battezzata <em>RDSTC trick</em> e si basava su un assunto molto semplice: l&#8217;istruzione <code>cpuid</code> causa un VM-exit non condizionale ed il suo risultato deve essere alterato dall&#8217;hypervisor (poichè descrive le caratteristiche e le estensioni della CPU): questo comporta che<strong> in un ambiente virtualizzato la sua esecuzione sia più lenta che in uno fisico</strong>. Per effettuare questo genere di misurazioni è necessario un timer molto preciso ed a bassa latenza di accesso, il timestamp counter (detto anche TSC e letto tramite <code>rdtsc</code>) presente nelle CPU Intel e compatibili è l&#8217;ideale. <strong>La parte complessa è tarare bene le soglie di rilevamento</strong>. </p>



<blockquote class="wp-block-quote is-layout-flow wp-block-quote-is-layout-flow"><p><strong>Nota tecnica</strong></p><p>Nelle CPU moderne il TSC è un contatore slegato dalla frequenza e dallo stato energetico della CPU. Tuttavia, lo stato energetico (si vedano le tecnologie di gestione termica di Intel, da SpeedStep a HWP passando per Turbo Boost) della CPU influenza pesantemente il tempo cronometrato di esecuzione delle istruzioni, per cui misurare la durata delle istruzioni con il TSC non è molto affidabile ma probabilmente sufficiente agli scopi.</p></blockquote>



<p>Nel campione attuale questo controllo è stato stravolto.</p>


<div class="wp-block-image">
<figure class="aligncenter size-large is-resized"><img decoding="async" src="https://cert-agid.gov.it/wp-content/uploads/2022/07/guloader-8-1024x294.png" alt="" class="wp-image-5138" width="859" height="245" srcset="https://cert-agid.gov.it/wp-content/uploads/2022/07/guloader-8-300x86.png 300w, https://cert-agid.gov.it/wp-content/uploads/2022/07/guloader-8-768x220.png 768w, https://cert-agid.gov.it/wp-content/uploads/2022/07/guloader-8-2048x587.png 2048w" sizes="(max-width: 859px) 100vw, 859px" /><figcaption>A sinistra: il controllo sulla durata di cpuid e rdtsc tramite il timer di Windows. A destra: il controllo che rdtsc non ritorni valori fasulli.</figcaption></figure></div>


<p>Un workaround per l&#8217;<em>RDTSC trick</em> era quello di emulare un TSC lento.</p>



<p>La nuova strategia di temporizzazione utilizza il timer di Windows, <a href="https://www.geoffchappell.com/studies/windows/km/ntoskrnl/inc/api/ntexapi_x/kuser_shared_data/index.htm">accede direttamente ad user space tramite  KUSER_SHARED_DATA</a> e misura l&#8217;esecuzione di <code>cpuid</code> e <code>rdtsc</code> ripetutamente. Qualora il valore accumulato superi una certa soglia, GuLoader assume di trovarsi in presenza di una VM. Viene aggiunto anche un controllo esplicito che verifica se rdtsc ritorna valori falsi, ad esempio che siano troppo &#8220;lenti&#8221;.</p>



<p>Questi controlli sono efficaci e portano GuLoader a mostrare una finestra di avviso e terminare o entrare volutamente in un ciclo infinito, prevenendo l&#8217;analisi automatica.</p>


<div class="wp-block-image">
<figure class="aligncenter size-large"><img decoding="async" src="https://cert-agid.gov.it/wp-content/uploads/2022/07/anti-vm.jpg" alt=""/></figure></div>


<p>In aggiunta a questi controlli di temporizzazione è sempre presente la verifica del bit 31 di <code>CPUID.1.ecx</code>, che <strong>indica la presenza di un hypervisor con supporto di paravirtualizzazione</strong>. Dato che le VM non tendono a nascondersi, questo controllo risulta efficace. Disabilitare la paravirtualizzazione ha i suoi costi rendendo l&#8217;esecuzione della VM più lenta ed onerosa.</p>



<p>GuLoader cerca inoltre di determinare se è eseguito dentro una VM anche tramite metodi più convenzionali. In particolare utilizza <code>EnumDeviceDrivers</code> e <code>EnumServicesStatusA</code> per enumerare i driver ed i servizi tipicamente installati nelle VM paravirtualizzate (es: <em>vmmouse.sys</em>).</p>



<p>Anche queste misure sono piuttosto efficaci nel rilevare le VM. Maggiori dettagli sono riportati in questa <a href="https://securitynews.sonicwall.com/xmlpost/guloader-a-fileless-shellcode-based-malware-in-action/">analisi di SonicWall</a>. </p>



<h2 class="wp-block-heading">Tecnica Anti-Analisi</h2>



<p>Nonostante la presenza di questi controlli, inizialmente era più semplice riconoscerli e saltarli. Oggi questo è diventato più complesso per via di una tecnica anti-analisi introdotta da qualche mese e piuttosto fastidiosa.</p>


<div class="wp-block-image">
<figure class="aligncenter size-large"><img loading="lazy" decoding="async" width="1024" height="388" src="https://cert-agid.gov.it/wp-content/uploads/2022/07/guloader-6-1024x388.png" alt="" class="wp-image-5140" srcset="https://cert-agid.gov.it/wp-content/uploads/2022/07/guloader-6-1024x388.png 1024w, https://cert-agid.gov.it/wp-content/uploads/2022/07/guloader-6-300x114.png 300w, https://cert-agid.gov.it/wp-content/uploads/2022/07/guloader-6-768x291.png 768w, https://cert-agid.gov.it/wp-content/uploads/2022/07/guloader-6-1536x582.png 1536w, https://cert-agid.gov.it/wp-content/uploads/2022/07/guloader-6.png 1852w" sizes="auto, (max-width: 1024px) 100vw, 1024px" /><figcaption>L&#8217;exception handler che sposta l&#8217;instruction pointer dopo ogni istruzione int3. Il numero di byte di cui spostare eip in avanti è ottenuto come xor tra 0x9d ed il byte successivo ad int3.</figcaption></figure></div>


<p>Subito dopo aver decifrato il suo secondo stadio, lo shellcode di GuLoader installa un exception handler tramite <code>RtlAddVectoredExceptionHandler</code>. Questo handler è invocato tramite delle istruzioni <em>int3</em> sparse in tutto il codice.</p>


<div class="wp-block-image">
<figure class="aligncenter size-full is-resized"><img loading="lazy" decoding="async" src="https://cert-agid.gov.it/wp-content/uploads/2022/07/image-2.png" alt="" class="wp-image-5141" width="385" height="349"/><figcaption>Istruzioni int3 sparse per il codide del dropper. Come si intuisce dalla presenza di istruzioni privilegiate, l&#8217;esecuzione non è lineare.</figcaption></figure></div>


<p>Come mostra il codice qui sopra, questo handler ha due funzioni:</p>



<ol class="wp-block-list"><li>Verifica che non siano presenti <strong>breakpoint</strong> software (dopo l&#8217;istruzione <code>int3</code>) o hardware.</li><li>Legge il valore del <strong>byte successivo</strong> all&#8217;istruzione <code>int3</code>, effettua uno <em>xor</em> con <code>0x9D</code> e aggiunge questo valore all&#8217;instruction pointer, di fatto spostando l&#8217;esecuzione in avanti.</li></ol>



<p>I controlli anti-debug di cui il punto 1) possono essere disabilitati rimpiazzando i salti condizionali con dei <em>nop</em>. Ma il secondo punto rimane problematico: il debugger decodificando le istruzioni sequenzialmente si confonde e diventa impossibile avere una visione d&#8217;insieme del codice, rendendo complesso il riconoscimento delle funzioni. Infine, quando l&#8217;handler ritorna con il valore <code>EXCEPTION_CONTINUE_EXECUTION</code> l&#8217;esecuzione torna al codice interrotto tramite <code>NtContinue</code>, la quale non da modo al debugger di interrompere immediatamente il processo, di fatto facendo saltare l&#8217;analisi &#8220;da <em>int3</em> in <em>int3</em>&#8220;.</p>



<p>Per aggirare il problema di non controllo sull&#8217;esecuzione è necessario ricorrere a degli script per il proprio debugger. Ad esempio, per <em>x64dbg</em> è possibile usare le seguenti istruzioni (quando <code>eip</code> è su <code>int3</code>):</p>



<div><code class="wp-block-highcode-highcode">$ec = byte(eip + 1); xor $ec, 0x9d; eip = eip + $ec;</code><script>hljs.highlightElement(document.currentScript.parentNode.querySelector('code'));</script></div>



<h2 class="wp-block-heading">Estrarre il drop url automaticamente</h2>



<p>La nuova tecnica anti-analisi di GuLoader rende il debug molto tedioso e la presenza di numerosi controlli anti-vm ed anti-debug non permettono l&#8217;esecuzione non controllata del dropper.</p>



<h3 class="wp-block-heading">È  possibile velocizzare l&#8217;analisi?</h3>



<p>Lo shellcode di GuLoader appena avviato salta ad una procedura che decodifica il secondo stadio. La struttura dello shellcode è la seguente:</p>


<div class="wp-block-image">
<figure class="aligncenter size-full is-resized"><img loading="lazy" decoding="async" src="https://cert-agid.gov.it/wp-content/uploads/2022/07/guloader-10-1.png" alt="" class="wp-image-5143" width="286" height="424" srcset="https://cert-agid.gov.it/wp-content/uploads/2022/07/guloader-10-1.png 600w, https://cert-agid.gov.it/wp-content/uploads/2022/07/guloader-10-1-202x300.png 202w" sizes="auto, (max-width: 286px) 100vw, 286px" /><figcaption>La funzione che decifra il secondo stadio si trova subito prima di esso.</figcaption></figure></div>


<p>C&#8217;è una prima parte, in blu, che non viene decodificata: essa contiene il codice di decodifica stesso. Tale codice è chiamato tramite un&#8217;istruzione <code>call</code> situata subito prima dell&#8217;inizio del secondo stadio. Questo fa sì che dentro tale chiamata l&#8217;<strong>indirizzo di ritorno punti proprio al secondo stadio</strong>.</p>


<div class="wp-block-image">
<figure class="aligncenter size-large"><img loading="lazy" decoding="async" width="1024" height="600" src="https://cert-agid.gov.it/wp-content/uploads/2022/07/image-3-1024x600.png" alt="" class="wp-image-5144" srcset="https://cert-agid.gov.it/wp-content/uploads/2022/07/image-3-1024x600.png 1024w, https://cert-agid.gov.it/wp-content/uploads/2022/07/image-3-300x176.png 300w, https://cert-agid.gov.it/wp-content/uploads/2022/07/image-3-768x450.png 768w, https://cert-agid.gov.it/wp-content/uploads/2022/07/image-3.png 1196w" sizes="auto, (max-width: 1024px) 100vw, 1024px" /><figcaption>Decodifica del secondo stadio tramite xor. La freccia verso sinistra indica l&#8217;istruzione <em>call</em> subito prima del secondo stadio. A destra il codice di decodifica.</figcaption></figure></div>


<p>Nel secondo stadio, dopo una piccola pausa implementata con un ciclo che esegue <code>rdtsc</code>, GuLoader determina l&#8217;inizio del secondo stadio cercando la DWORD <em>0xE9Ea9011</em>.</p>


<div class="wp-block-image">
<figure class="aligncenter size-full"><img loading="lazy" decoding="async" width="802" height="735" src="https://cert-agid.gov.it/wp-content/uploads/2022/07/image-4.png" alt="" class="wp-image-5145" srcset="https://cert-agid.gov.it/wp-content/uploads/2022/07/image-4.png 802w, https://cert-agid.gov.it/wp-content/uploads/2022/07/image-4-300x275.png 300w, https://cert-agid.gov.it/wp-content/uploads/2022/07/image-4-768x704.png 768w" sizes="auto, (max-width: 802px) 100vw, 802px" /><figcaption>Guloader determina l&#8217;inizio del secondo stadio cercando la DWORD 0xE9Ea9011 e sottraendovi 5 (la lunghezza di un <em>jmp</em> lungo).</figcaption></figure></div>


<p>Possiamo ipotizzare che la chiave di decodifica vari da campione a campione: uno strumento automatico dovrebbe essere in grado di estrarla o calcolarla. Estrarla è complesso perchè è generata tramite istruzioni aritmetiche e richiederebbe l&#8217;esecuzione concolica (simbolica + concreta) dello shellcode. Analogo discorso per l&#8217;inizio del secondo stadio.</p>



<p>Un&#8217;alternativa è quella di sfruttare le debolezze della cifratura con <em>xor</em> e chiave piccola.</p>



<p>Il secondo stadio probabilmente conterrà delle sequenze di byte nulli: queste sequenze rilevano la chiave ma il tutto sta nel capire dove sono. Piuttosto che utilizzare offset fissi, un approccio ragionevole è quello di considerare lo shellcode come una sequenza di DWORD (interi senza segno a 32 bit) ed ordinarli dal più frequente a quello meno frequente.</p>



<p>Ipotizziamo che tra i primi valori sia presente anche la rotazione della chiave. Parliamo di rotazione della chiave perchè lo <em>xor</em> può non iniziare ad indirizzi multipli di 4 bytes, ovvero: non è allineato a DWORD e in questa campione non lo fa.</p>



<p>Possiamo verificare velocemente questa ipotesi con un po&#8217; di codice Python. La chiave usata nel sample in analisi è <em>0xb49be733</em>.</p>



<div><code class="wp-block-highcode-highcode language-python" data-language="python">def count_dwords(data, skew=0):
	hist = {}
	for i in range(0 + skew, (len(data)-skew)//4 * 4, 4):
		
		dw = struct.unpack("&lt;I", data[i:i+4])[0]
		
		if dw &lt;= 0xffffff:
			continue
			
		if dw not in hist:
			hist[dw] = 1
		else:
			hist[dw] += 1
			
	return {x[0]:x[1] for i, x in enumerate(sorted(hist.items(), key=lambda x: -x[1])) if i &lt; 10}</code><script>hljs.highlightElement(document.currentScript.parentNode.querySelector('code'));</script></div>



<p>Il risultato di <code>count_dwords</code> mostra che la (rotazione) della chiave è il primo risultato:</p>



<pre class="wp-block-code"><code>0x33e7b49b 53
0xff000000 39
0xbae7b49a 37
0xffe7b49a 35
0xfbfbfbfb 26
0x78787878 24
0xbae7b499 24
0x49494949 23
0xe5e5e5e5 23
0x74747474 23</code></pre>



<p>Per ogni possibile chiave, possiamo fare lo <em>xor</em> con lo shellcode, includendo la parte blu, visto che non sappiamo dove finisce, e verificare la presenza del valore <em>0xE9EA9011</em>, esattamente come fa GuLoader. Questo ci permette <strong>non solo di confermare che la chiave è giusta ma anche di determinare dove inizia il secondo stadio</strong> in modo da decifrare soltanto quello.</p>



<div><code class="wp-block-highcode-highcode language-python" data-language="python">def count_dwords(data, skew=0):
	hist = {}
	for i in range(0 + skew, (len(data)-skew)//4 * 4, 4):
		
		dw = struct.unpack("&lt;I", data[i:i+4])[0]
		
		if dw &lt;= 0xffffff:
			continue
			
		if dw not in hist:
			hist[dw] = 1
		else:
			hist[dw] += 1
			
	return {x[0]:x[1] for i, x in enumerate(sorted(hist.items(), key=lambda x: -x[1])) if i &lt; 10}
	
def xor(b1, i1, b2, i2, l, dbg=False):
	res = [0] * l
	for i in range(i1, i1+l):
		if dbg and i > len(b1):
			print("Wrap around1")
		if dbg and i-i1 &lt; 16:
			
			print(hex(i % len(b1)), hex(b1[i % len(b1)]), hex((i2 + i-i1) % len(b2)), hex(b2[(i2 + i-i1) % len(b2)]), hex(b1[i % len(b1)] ^ b2[(i2 + i-i1) % len(b2)]))
		res[i-i1] = b1[i % len(b1)] ^ b2[(i2 + i-i1) % len(b2)]
	return bytes(res)


def find_stage2(data, key):
	sign = b"\x11\x90\xea\xe9" 			#Alternative signature: b"\xe9\x4d\x01\x00"
	sign_off = 5					#Alternative offset: 0
	dec = b""
	for i in range(0, len(data), 4):
		dec = (dec + xor(data, i, key, 0, 4))[-8:]
		if sign in dec:
			j = dec.index(sign)
			return i+j-4-sign_off
		
def shift(data, val):
	return data[val:] + data[:val]	

def decrypt_stage2(data):
	for k, v in count_dwords(data).items():
		print(f"🤞 Possible (rotated) decrypt key: {hex(k)}")
		key =  struct.pack("&lt;I", k)
		offset = find_stage2(data, key)
		
		if offset is None:
			print(f"😐 No stage found for this key, trying next one.")
			continue
		else:
			print(f"Stage 2 found at offset {hex(offset)}")

		key = shift(key, offset &amp; 0x3)
		print(f"Adjusted key to: {hex(struct.unpack('&lt;I', key)[0])}")
		dec_data = data[:offset] +  xor(data, offset, key, 0, len(data)-offset)
		print(f"🦾 Stage 2 decrypted.")
		
		return dec_data</code><script>hljs.highlightElement(document.currentScript.parentNode.querySelector('code'));</script></div>



<p>Nel campione analizzato il secondo stadio inizia a <em>0x20ea</em>. Il risultato dello script Python conferma che la decifratura è corretta:</p>



<pre class="wp-block-code"><code>🤞 Possible (rotated) decrypt key: 0x33e7b49b
Stage 2 found at offset 0x20ea
Adjusted key to: 0xb49b33e7
🦾 Stage 2 decrypted.</code></pre>



<h3 class="wp-block-heading">Come possiamo usare il codice del secondo stadio per velocizzare l&#8217;analisi?</h3>



<p>Il drop url è contenuto in una stringa codificata. Fortunatamente la prima azione di GuLoader, dopo aver determinato l&#8217;inizio del secondo stadio, è decodifcare la stringa <em>L&#8221;ntdll&#8221; </em>per cui possiamo subito analizzare come avviene questo processo.</p>



<p>Tenere traccia degli indirizzi è tedioso per via del codice superfluo: le stringhe sono salvate <em>xorate</em> con una chiave di <em>0x2b</em> byte e precedute da una DWORD che indica la lunghezza, anch&#8217;essa è <em>xorata</em> con una costante. Gli offset dove trovare queste stringhe codificate sono probabilmente fissi e generati tramite istruzioni aritmetiche per cui ottenerli è complicato.</p>


<div class="wp-block-image">
<figure class="aligncenter size-large"><img loading="lazy" decoding="async" width="1024" height="448" src="https://cert-agid.gov.it/wp-content/uploads/2022/07/image-5-1024x448.png" alt="" class="wp-image-5147" srcset="https://cert-agid.gov.it/wp-content/uploads/2022/07/image-5-1024x448.png 1024w, https://cert-agid.gov.it/wp-content/uploads/2022/07/image-5-300x131.png 300w, https://cert-agid.gov.it/wp-content/uploads/2022/07/image-5-768x336.png 768w, https://cert-agid.gov.it/wp-content/uploads/2022/07/image-5-1536x672.png 1536w, https://cert-agid.gov.it/wp-content/uploads/2022/07/image-5.png 1800w" sizes="auto, (max-width: 1024px) 100vw, 1024px" /><figcaption>Da sinistra a destra: La funzione che ottiene l&#8217;indirizzo della chiave tramite il proprio indirizzo di ritorno, la funzione intermedia che passa i parametri alla vera procedura di decifratura, il codice di decifratura.</figcaption></figure></div>


<p>Tuttavia, <strong>se avessimo la chiave, potremmo provare un bruteforce alla ricerca di stringhe stampabili e, tra queste, quelle che iniziano per <em>http</em> o contengono <em>://</em></strong>.</p>



<p>Con un po&#8217; di pazienza si trova facilmente che GuLoader ottiene l&#8217;indirizzo della chiave per decifrare le stringhe in modo analogo a come ottiene l&#8217;indirizzo del secondo stadio: ovvero <strong>tramite una chiamata posizionata subito prima della chiave</strong>. Con un po&#8217; di debug si scopre che la lunghezza di questa chiave è <em>0x2b</em> byte.</p>



<h3 class="wp-block-heading">Come trovare la chiave nel secondo stadio decifrato?</h3>



<p>L&#8217;idea è di cercare tutte le chiamate con opcode <em>0xe8</em> e offset negativo (salto all&#8217;indietro) e considerare i byte successivi come la chiave. La speranza è che non ve ne siano molte. In realtà possiamo provare a cercare esattamente i byte <em>0xe8, 0xd9, 0xfe, 0xff</em> se ipotizziamo che la distanza tra la chiave e la funzione di decifratura non cambi ed eventualmente tornare ad un metodo bruteforce nel caso questo fallisca.</p>



<p>Ottenuta la chiave è possibile fare un bruteforce su ogni offset e prendere le stringhe stampabili di almeno <em>n</em> caratteri. Si deve porre attenzione al fatto che le stringhe sono, o potrebbero essere, in UTF-16. </p>



<p>Nello script di seguito riportato vengono ricercate tutte le stringhe ma mostrate solo quelle con <em>http</em> o <em>://</em> ed è possibile ottimizzarlo per cercare solo quelle di interesse:</p>



<div><code class="wp-block-highcode-highcode language-python" data-language="python">def get_string_key(data):
	call_strdec = b"\xe8\xd9\xfe\xff\xff"		#The string key are the 0x2b bytes after this call.
							#If this fails, we can try looking for all E8 (relative) calls
	if call_strdec in data:
		i = data.index(call_strdec)+5
		return data[i:i+0x2b]



def find_strs(data, skey, mlen=100):
	strs = []
	i = 0
	while i &lt; len(data):
		possible = xor(data, i, skey, 0, mlen)
		s = b"";
		for j in range(len(possible)):
			if (possible[j] >= 0x20 and possible[j] &lt;= 0x7f) or possible[j] in [0xa, 0xd, 0x00, 0x07]:
				s += bytes([possible[j]])
			else:
				break
				
		s2 = s.replace(b"\x00", b"")
		if len(s2) >= 5:
			strs.append(s2)
			i += len(s)
		i += 1
	return strs
	
def interesting_str(strs):
	res = False
	for s in strs:
		if b"http" in s or b"://" in s:
			print(s)
			res = True
	return res</code><script>hljs.highlightElement(document.currentScript.parentNode.querySelector('code'));</script></div>



<h3 class="wp-block-heading">Lo script completo</h3>



<p><strong>Lo script seguente è un PoC su come estrarre il drop url da un campione GuLoader</strong>. Potrebbe essere necessario sistemare <code>get_string_key</code> con una nuova firma o un&#8217;euristica. La nuova firma è ottenibile con una breve analisi: è possibile anche posizionare un breakpoint in <code>ZwAllocateVirtualMemory</code> e poi seguire le chiamate per arrivare direttamente alla funzione che decifra le stringhe (come mostrata nelle figure precedenti).</p>



<p>Lo script si esegue passandogli lo shellcode di GuLoader: questo va estratto manualmente dal vettore di infezione. Il campione in analisi utilizzava uno script NSIS per questo:</p>



<div><code class="wp-block-highcode-highcode language-python" data-language="python">import struct
from binascii import hexlify
import sys

def read_shellcode(filename):
	with open(filename, "rb") as f:
		data = f.read()
	return data
		
def count_dwords(data, skew=0):
	hist = {}
	for i in range(0 + skew, (len(data)-skew)//4 * 4, 4):
		
		dw = struct.unpack("&lt;I", data[i:i+4])[0]
		
		if dw &lt;= 0xffffff:
			continue
			
		if dw not in hist:
			hist[dw] = 1
		else:
			hist[dw] += 1
			
	return {x[0]:x[1] for i, x in enumerate(sorted(hist.items(), key=lambda x: -x[1])) if i &lt; 10}
	
def xor(b1, i1, b2, i2, l, dbg=False):
	res = [0] * l
	for i in range(i1, i1+l):
		if dbg and i > len(b1):
			print("Wrap around1")
		if dbg and i-i1 &lt; 16:
			
			print(hex(i % len(b1)), hex(b1[i % len(b1)]), hex((i2 + i-i1) % len(b2)), hex(b2[(i2 + i-i1) % len(b2)]), hex(b1[i % len(b1)] ^ b2[(i2 + i-i1) % len(b2)]))
		res[i-i1] = b1[i % len(b1)] ^ b2[(i2 + i-i1) % len(b2)]
	return bytes(res)


def find_stage2(data, key):
	sign = b"\x11\x90\xea\xe9" 			#Alternative signature: b"\xe9\x4d\x01\x00"
	sign_off = 5					#Alternative offset: 0
	dec = b""
	for i in range(0, len(data), 4):
		dec = (dec + xor(data, i, key, 0, 4))[-8:]
		if sign in dec:
			j = dec.index(sign)
			return i+j-4-sign_off
		
def shift(data, val):
	return data[val:] + data[:val]	

def decrypt_stage2(data):
	for k, v in count_dwords(data).items():
		print(f"🤞 Possible (rotated) decrypt key: {hex(k)}")
		key =  struct.pack("&lt;I", k)
		offset = find_stage2(data, key)
		
		if offset is None:
			print(f"😐 No stage found for this key, trying next one.")
			continue
		else:
			print(f"Stage 2 found at offset {hex(offset)}")

		key = shift(key, offset &amp; 0x3)
		print(f"Adjusted key to: {hex(struct.unpack('&lt;I', key)[0])}")
		dec_data = data[:offset] +  xor(data, offset, key, 0, len(data)-offset)
		print(f"🦾 Stage 2 decrypted.")
		
		return dec_data
	
def get_string_key(data):
	call_strdec = b"\xe8\xd9\xfe\xff\xff"		#The string key are the 0x2b bytes after this call.
							#If this fails, we can try looking for all E8 (relative) calls
	if call_strdec in data:
		i = data.index(call_strdec)+5
		return data[i:i+0x2b]



def find_strs(data, skey, mlen=100):
	strs = []
	i = 0
	while i &lt; len(data):
		possible = xor(data, i, skey, 0, mlen)
		s = b"";
		for j in range(len(possible)):
			if (possible[j] >= 0x20 and possible[j] &lt;= 0x7f) or possible[j] in [0xa, 0xd, 0x00, 0x07]:
				s += bytes([possible[j]])
			else:
				break
				
		s2 = s.replace(b"\x00", b"")
		if len(s2) >= 5:
			strs.append(s2)
			i += len(s)
		i += 1
	return strs
	
def interesting_str(strs):
	res = False
	for s in strs:
		if b"http" in s or b"://" in s:
			print(s)
			res = True
	return res


def extract_info(data):	
	dec_data = decrypt_stage2(data)

	print("Looking for the string key.")
	str_key = get_string_key(dec_data)
	if str_key is None:
		print("💔 No string key found. Aborted.")
		return False
	else:
		print(f"🥳 String key found: {hexlify(str_key)}")
		
	print("Finding strings by bruteforce...")
	strs = find_strs(dec_data, str_key)
	print("Interesting strings found:")
	return interesting_str(strs)



#
# MAIN
#

if len(sys.argv) != 2:
	print(f"Usage: {sys.argv[0]} SHELLCODE_FILENAME", file=sys.stderr)
	sys.exit(1)
	
sys.exit(2 if not extract_info(read_shellcode(sys.argv[1])) else 0)	</code><script>hljs.highlightElement(document.currentScript.parentNode.querySelector('code'));</script></div>



<p><strong>Esempio</strong></p>



<pre class="wp-block-code"><code>$ python3 gl.py ~/shared/guloader_shellcode
🤞 Possible (rotated) decrypt key: 0x33e7b49b
Stage 2 found at offset 0x20ea
Adjusted key to: 0xb49b33e7
🦾 Stage 2 decrypted.
Looking for the string key.
🥳 String key found: b'0fc5fc4b7eb350b07d046090e4a0b73cb0100ed1063f658e0d43f257ec17708039314398012d065c9e4663'
Finding strings by bruteforce...
Interesting strings found:
b'https://91news.in/bcwq_WFnUhj158.bin'</code></pre>



<p>Ottenuto il drop url è quindi possibile scaricare il payload. I primi 64 byte sono random e non usati, i restanti sono un PE xorato con una chiave.</p>



<p>Non essendo il payload disponibile al momento di questa analisi non abbiamo potuto automatizzare la sua decodifica. Si suggeriscono comunque due approcci:</p>



<ul class="wp-block-list"><li>La chiave è solitamente tra i 0x200 e i 0x380 byte, i PE contengono spesso lunghe sequenze di byte nulli che rileverebbero la chiave. Cercando una sequenza ripetuta è possibile estrarre la chiave.</li><li>Alcuni campi di un PE sono noti, questo rileva parte della chiave.</li></ul>



<h3 class="wp-block-heading">Aggiornamento</h3>



<p>In seguito all&#8217;analisi di ulteriori sample è stato notato che la variabilità tra questi è troppo alta affinchè un approccio basato sul riconoscimento di firme (come avviene nello script sopra) possa funzionare.</p>



<p>L&#8217;alternativa è quella di utilizzare un approccio puramente bruteforce:</p>



<ol class="wp-block-list"><li><strong>Enumerare le prime n DWORD più presenti nello shellcode.</strong> La speranza è che qualcuna di queste sia la chiave XOR per decodificare il secondo stadio (l&#8217;idea è che il secondo stadio contenga un numero elevato di zeri e quindi una volta cifrato un numero elevato di DWORD che corrispondono alla chiave).</li><li><strong>Per ogni DWORD, usarla come chiave per decodificare il secondo stadio.</strong> Contrariamente a prima non sono fatti controlli riguardo la validità del secondo stadio ottenuto.</li><li><strong>Cercare tutte le chiamate dirette relative all&#8217;indietro, il cui offset sia compreso tra valori negativi piccoli (di default lo script usa -500 e -100)</strong>. Questo passo identifica ogni possibile chiamata che delimita la chiave per decifrare le stringhe. Contrariamente a prima non sono fatte verifiche e tutti i candidati sono presi in considerazione.</li><li><strong>Usare tutte le chiavi candidate ottenute al punto 3 per decifrare le stringhe</strong> e mostrare quelle che contengono determinati caratteri (es: http).</li></ol>



<p>Oltre a questo approccio puramente bruteforce, è stata aggiunta la possibilità di continuare la ricerca quando viene trovata una stringa di interesse e soprattutto di salvare su file il secondo stadio decodificato. Questo tornerà utile per decodificare il payload.</p>



<div><code class="wp-block-highcode-highcode language-python" data-language="python">import struct
from binascii import hexlify
import sys

#After this many bytes, stop decoding a (so far valid) string. NOTE: Guloader uses UTF-16, the 
#no. of chars is halved!
MAX_STRING_LEN = 150
#Try this many possible Stage2 decode keys
MAX_STAGE2_DECODE_KEYS = 10
#The call before the String key must have an immediate between min and max (a bigger gap find more candidates)
DECODE_STRING_MIN_IMMEDIATE = -500
DECODE_STRING_MAX_IMMEDIATE = -100

#Read a binary file
def read_shellcode(filename):
	with open(filename, "rb") as f:
		data = f.read()
	return data
		
#Count the DWORD in an array of bytes, not counting DWORD with the MSB equal to zero
def count_dwords(data, skew=0):
	hist = {}
	for i in range(0 + skew, (len(data)-skew)//4 * 4, 4):
		
		dw = struct.unpack("&lt;I", data[i:i+4])[0]
		
		if dw &lt;= 0xffffff:
			continue
			
		if dw not in hist:
			hist[dw] = 1
		else:
			hist[dw] += 1
			
	return {x[0]:x[1] for i, x in enumerate(sorted(hist.items(), key=lambda x: -x[1])) if i &lt; MAX_STAGE2_DECODE_KEYS}
	

#XOR b1[i1, i1+l] with b2[i2:i2+l] and return the result (which has length l!)
def xor(b1, i1, b2, i2, l):
	res = [0] * l
	for i in range(i1, i1+l):
		res[i-i1] = b1[i % len(b1)] ^ b2[(i2 + i-i1) % len(b2)]
	return bytes(res)




#Find all calls with negative offset, not too big nor too small
def get_string_keys(data):
	keys = []
	for i in range(0, len(data)-4-0x2b):
		if data[i] != 0xe8:
			continue
			
		imm = struct.unpack("&lt;i", data[i+1:i+5])[0]
		if imm >= DECODE_STRING_MAX_IMMEDIATE or imm &lt; DECODE_STRING_MIN_IMMEDIATE:
			continue
		
		keys.append(data[i+5:i+5+0x2b])
	
	return keys


#Decode Strings
def find_strs(data, skey, mlen=MAX_STRING_LEN):
	strs = []
	i = 0
	while i &lt; len(data):
		possible = xor(data, i, skey, 0, mlen)
		s = b"";
		for j in range(len(possible)):
			if (possible[j] >= 0x20 and possible[j] &lt;= 0x7f) or possible[j] in [0xa, 0xd, 0x00, 0x07]:
				s += bytes([possible[j]])
			else:
				break
				
		s2 = s.replace(b"\x00", b"")
		if len(s2) >= 5:
			strs.append(s2)
			i += len(s)
		i += 1
	return strs
	
def interesting_str(strs):
	res = False
	for s in strs:
		if b"http" in s or b"://" in s:
			print(s)
			res = True
	return res


def bruteforce(data):
	for k, v in count_dwords(data).items():
		print(f"🤞 Possible (rotated) decrypt key: {hex(k)}")
		key =  struct.pack("&lt;I", k)
		
		print(f"👽 Decoding the shellcode...")
		dec_data = xor(data, 0, key, 0, len(data))
		
		print(f"🔍 Finding the possible string keys...")
		keys = get_string_keys(dec_data)
		print(f"🏋️ Found {len(keys)} keys. Brute forcing...")
		
		for k in keys:
			print(f"🤞 Trying key {hexlify(k)}")
			strs = find_strs(dec_data, k)
				
			if interesting_str(strs):
				while True:
					action = input("Type c to continue the search, q to quit, s FILENAME to save the decoded stage and exit: ").split(" ", 2)
					cmd = action[0].lower()
					if cmd == "q":
						return True
					elif cmd == "c":
						break
					elif cmd == "s":
						with open(action[1].strip(), "wb") as f:
							f.write(dec_data)
						return True
	
	return False
		





#
# MAIN
#

if len(sys.argv) != 2:
	print(f"Usage: {sys.argv[0]} SHELLCODE_FILENAME", file=sys.stderr)
	sys.exit(1)
	
sys.exit(2 if not bruteforce(read_shellcode(sys.argv[1])) else 0)	</code><script>hljs.highlightElement(document.currentScript.parentNode.querySelector('code'));</script></div>



<p>Il payload scaricabile dal drop URL è codificato tramite XOR con una chiave la cui lunghezza (e valore) cambia da sample a sample.</p>



<p>La chiave non è salvata nel secondo stadio in chiaro ma è a sua volta XORata con una WORD (intero di 16 bit) che guloader calcola a runtime tramite bruteforcing. L&#8217;algoritmo che usa Guloader è il seguente.</p>



<pre class="wp-block-code"><code>//Chiave (sconosciuta per noi)
uint16_t key = { ... };
//Payload scaricato
uint16_t* payload = ...;

//Calcolo della WORD da xorare con la chiave
uint16_t index;
for (index = 0; (uint32_t)index &lt; 0x10000; index++)
   if (key&#91;0] ^ index ^ payload&#91;32] == 0x4d5a)
      break;

//Calcolo della chiave
for (int j = 0; j &lt; sizeof(key)/sizeof(key&#91;0]); j++)
   key&#91;j] ^= index;
</code></pre>



<p>Guloader può calcolare <em>index</em> perchè sà che la prima WORD di un PE è <code>0x4d5a</code> (MZ) e perchè conosce dove è la chiave codificata e la sua lunghezza.</p>



<p>Noi <strong>non</strong> conosciamo dove si trova la chiave <strong>nè</strong> la sua lunghezza ma possiamo di nuovo sfruttare della Crittoanalisi 101 per montare un attacco bruteforce.</p>



<p>L&#8217;idea è che conosciamo i primi due byte della chiave grazie alla firma MZ (chiamiamoli <em>k0</em>), k0<em> </em>può comparire all&#8217;interno del PE sia perchè la WORD corrispondente nel PE era zero (0 ^ <em>k0</em> = <em>k0</em>) sia perchè per coincidenza l&#8217;operazione di XOR l&#8217;ha data come risultato (<em>word_nel_pe_originale</em> ^ <em>ki</em> = <em>k0</em>).</p>



<p>Supponiamo che troviamo solo instanze del primo tipo, la distanza in byte tra due di queste WORD di valore <em>k0</em> è un multiplo della chiave. E&#8217; un multiplo e non la lunghezza esatta perchè non possiamo garantire che tutte le istanze di k0 compaiano nel PE codificato. Per cui prendendo la più piccola lunghezza abbiamo buona probabilità di trovare la lunghezza effettiva della chiave.<br>Istanze del secondo tipo (che, con un po&#8217; di forzatura, assunto una distribuzione uniforme di chiave e payload si verificano con probabilità 2^-16) possono indurre falsi positivi. Per cui si ottiene una lista di possibili lunghezze (tutte quelle che non sono multiple di altre).</p>



<p>Alla fine si ha un insieme di possibili lunghezze di chiavi, se si è fortunati se ne ha una solo.<br>Se le lunghezze ottenute sono tutte multiple della lunghezza effettiva l&#8217;attacco sotto fallisce, si può pensare in questo caso di fattorizzare le lunghezze trovare e considerare tutti i possibili divisori (questo è ancora da implementare).</p>



<p>Per trovare la chiave stessa verrebbe da provare a cercare una sequenza di byte che inizia con <em>k0</em> e che si ripete (almeno in parte). Ma le chiavi usate possono essere troppo lunghe perchè questo succeda, ad esempio nel sample usato la chiave era di <code>0x606</code> byte, troppo lunga affinchè il PE avesse tutti questi zeri consecutivi.</p>



<p>Un altro approccio è utilizzare il secondo stadio decodificato e tentare un bruteforce.<br>Scorriamo ogni singola WORD <em>s0</em> nel secondo stadio e la consideriamo come l&#8217;inizio della chiave, che ricordiamo è XORata con la quantità <em>index</em>. Dato che conosciamo per certo <em>k0</em>, possiamo calcolare <em>index</em> = <em>s0</em> ^ <em>k0</em> visto che <em>s0</em> = <em>k0</em> ^ <em>index</em>. Se davvero <em>s0</em> è l&#8217;inizio della chiave codificata nel secondo stadio, calcolando <em>si</em> ^ <em>ki</em>, dove <em>si</em> sono le WORD successive a <em>s0</em> nel secondo stagio e<em> ki</em> quelle successive a <em>k0</em> nel payload cifrato, per ogni <em>i</em> fino a raggiungere la lunghezza stimata, la maggior parte di questi valori sarà pari ad <em>index</em>.<br>Non tutti saranno uguale ad <em>index</em> perchè i <em>ki</em>  sono in realtà WORD che vengono dal payload codificato e corrispondono alla WORD <em>ki</em> chiave solo se e solo se in quella posizione il PE conteneva una WORD nulla.<br>Tuttavia prendendo come candidati le chiavi che danno almeno <em>m</em> valori uguali ad <em>index</em> (di default <em>m</em>=10) si ha una buona probabilità di trovare dove inizia la chiave nel secondo stadio e il valore <em>index</em>.</p>



<p>Trovati <em>index</em>, la chiave nel secondo stadio e la sua lunghezza, è possibile emulare la decodifica di Guloader ed ottenere il payload.</p>



<p>Lo script seguente prende da linea di comando il percorso del secondo stadio decodificato (generato dallo script sopra ad esempio) e del payload cifrato (così come scaricato) e prova un attacco bruteforce per ottenere il payload.</p>



<div><code class="wp-block-highcode-highcode language-python" data-language="python">import binascii
import struct
import pefile
import sys

#Xor b1[i1:i1+l] with b2[i2:i2+l] and return a byte array of length l
def xor(b1, i1, b2, i2, l):
	res = [0] * l
	for i in range(i1, i1+l):
		res[i-i1] = b1[i % len(b1)] ^ b2[(i2 + i-i1) % len(b2)]
	return bytes(res)

	
#Find the possible lengths of the key and the possible keys (only those with a "primitive" length will be effetively used)	
def find_keys_and_lens(data, min_len=0x100):
	#We know the first two bytes of the PE, so we know the first two bytes of the key
	key_start = xor(b"MZ", 0, data, 0, 2)
	print(f"Key start is {binascii.hexlify(key_start)}")
	
	#Where was the last WORD with value key_start
	last_start = None
	#The keys found
	keys = []
	#The lengths found (# of these is &lt;= # keys as two or more keys can share a length)
	lens = []
	#Scan all the payload WORDs
	for i in range(0, len(data), 2):
		#If not a key start, skip
		if data[i:i+2] != key_start:
			continue
		
		#If this is the second key start, save the key and the length if not already present
		if last_start is not None :
			pkey = data[last_start:i]
			if pkey not in keys:
				print(f"Found a possible key at offset {hex(i)} with (possible multiple) len {hex(len(pkey))}")
				keys.append(pkey)
		last_start = i
	
	#We remove all the length that are multiple of other lengths or too low
	for k in sorted(keys, key = lambda k: len(k)):
		l = len(k)
		if l &lt; min_len:
			continue
		
		#First (and smallest) length
		if len(lens) == 0:
			lens.append(l)
		#No multiples? Add
		elif len([ol for ol in lens if l % ol == 0]) == 0:
			lens.append(l)
			
	return keys, lens
			


#
# M A I N
#

if len(sys.argv) != 3:
	print(f"Usage: {sys.argv[0]} DECODED_STAGE2_FILENAME PAYLOAD_FILENAME")
	sys.exit(1)
	
#Read the data
with open(sys.argv[2], "rb") as f:
	data = f.read()[64:]
	
with open(sys.argv[1], "rb") as f:
	stage2 = f.read()
	
		
#Get keys and lengths		
keys, lens = find_keys_and_lens(data)
print(f"Found {len(lens)} possible key length(s)")

#TODO: Show the key lengths and ask if we should add each divisor (if greater than a threshold) of these length to the list (and the relative key prefixes to keys) before bruteforcing.
# if the script fails to find the payload, try implementing this, even manually.

#For each key length...
for kl in lens:
	#Get the possibly partially coded keys from the payload
	candidates = [k for k in keys if len(k) == kl]
	print(f"Trying keys with len {hex(kl)} ({len(candidates)} candidate(s) found)")
	
	#For each candidate
	n = 0
	for c in candidates:
		#This WORD is known to be the valid (it's the first WORD of the key)
		k0 = struct.unpack("&lt;H", c[0:2])[0]
		print("Looking for a match in the decoded stage2...")
		#For each WORD in the second stage...
		for i in range(0, len(stage2)-kl):
		
			#Progress
			if i % 10000 == 0:
				print(f"Still looking... ({i*100//(len(stage2)-kl)}% of stage2 checked)")
				
			#Calculate the possible index
			s0 = struct.unpack("&lt;H", stage2[i:i+2])[0]
			index = s0 ^ k0
			
			#Count how many times index comes up when decodind the subsequent words
			count_matches = 0
			for j in range(2, kl, 2):
				si = struct.unpack("&lt;H", stage2[i+j:i+j+2])[0]
				ki = struct.unpack("&lt;H", c[j:j+2])[0]
				
				if si ^ ki == index:
					count_matches += 1
			
			#If we have at least 10 matches, consider this a possible key
			if count_matches >= 10:
				print(f"A candidate matched")
				#Find the key
				key = xor(stage2, i, struct.pack("&lt;H", index), 2, kl)	
				#Decode the PE
				pe = xor(data, 0, key, 0, len(data))
		
				#Try parsing the PE
				try:
					pefile.PE(data=pe)
					name = f"Payload{n}.exe"
					print(f"Possible key found, saving payload to {name}")
					with open(name, "wb") as f:
						f.write(pe)
				except Exception as e:
					continue

	</code><script>hljs.highlightElement(document.currentScript.parentNode.querySelector('code'));</script></div>



<pre class="wp-block-code"><code><strong>$ python3 gl3.py gu_s2.bin ~/Malwares/20220727/gumabelt_DNCAoUwjFj89.bin</strong> 
Key start is b'5848'
Found a possible key at offset 0x5c3a with (possible multiple) len 0x3d7c
Found a possible key at offset 0x10862 with (possible multiple) len 0xac28
Found a possible key at offset 0x114ae with (possible multiple) len 0xc4c
Found a possible key at offset 0x120fa with (possible multiple) len 0xc4c
Found a possible key at offset 0x12d46 with (possible multiple) len 0xc4c
Found a possible key at offset 0x1522a with (possible multiple) len 0x24e4
Found a possible key at offset 0x1770e with (possible multiple) len 0x24e4
Found a possible key at offset 0x20a9e with (possible multiple) len 0x9390
Found a possible key at offset 0x28bbc with (possible multiple) len 0x811e
Found a possible key at offset 0x2b6c6 with (possible multiple) len 0x2b0a
Found a possible key at offset 0x2c312 with (possible multiple) len 0xc4c
Found a possible key at offset 0x33e0a with (possible multiple) len 0x7af8
Found a possible key at offset 0x34430 with (possible multiple) len 0x626
Found 1 possible key lengths
Trying keys with len 0x626 (1 candidate(s) found)
Looking for a match in the decoded stage2...
Still looking... (0% of stage2 checked)
Still looking... (11% of stage2 checked)
Still looking... (22% of stage2 checked)
Still looking... (33% of stage2 checked)
Still looking... (44% of stage2 checked)
Still looking... (55% of stage2 checked)
Still looking... (66% of stage2 checked)
A candidate matched
Possible key found, saving payload to Payload0.exe
Still looking... (78% of stage2 checked)
Still looking... (89% of stage2 checked)
<strong>$ file Payload0.exe </strong>
Payload0.exe: PE32 executable (GUI) Intel 80386 Mono/.Net assembly, for MS Windows</code></pre>



<h3 class="wp-block-heading">Aggiornamento</h3>



<p><a href="https://cert-agid.gov.it/wp-content/uploads/2022/08/gudecoder.zip">E&#8217; disponibile anche la versione C degli stessi script</a>. I parametri di ricerca sono definiti in config.h.</p>



<p>L&#8217;utilizzo è il seguente :</p>



<pre class="wp-block-code"><code>gudecoder url FILE_STAGE2_CIFRATO
...
gudecoder payload FILE_STAGE2_DECIFRATO PAYLOAD_CIFRATO</code></pre>
	    </div>

          </article>
	 <section>
		<div class="u-padding-top-xs" style="border-bottom: 2px solid #aaaaaa; margin-bottom: 4rem; "></div> 
		<div class="u-padding-left-s">
			Taggato&nbsp; 
						<a class="tag-item u-textClean u-textWeight-700 u-text-r-xxs u-color-80-commented u-color-print " href="https://cert-agid.gov.it/tag/guloader/">
				guloader			</a>
		</div>
	 </section>
	  
		<div class="u-padding-bottom-xl u-margin-top-l" style="border-top: 1px solid #aaaaaa"></div>		
	 	
	<nav class="navigation post-navigation" aria-label="Articoli">
		<h2 class="screen-reader-text">Navigazione articoli</h2>
		<div class="nav-links"><div class="nav-previous"><a href="https://cert-agid.gov.it/news/analisi-e-approfondimenti-tecnici-sul-malware-coper-utilizzato-per-attaccare-dispositivi-mobili/" rel="prev"><span class="u-hiddenVisually u-hiddenPrint">Notizia precedente</span> <span class="Icon-chevron-left u-text-r-s u-hiddenPrint" role="presentation u-hiddenPrint"></span><span class="u-text-s u-padding-r-left u-hiddenPrint u-hidden u-sm-inline u-md-inline u-lg-inline">Analisi e approfondimenti tecnici sul malware Coper utilizzato per attaccare dispositivi mobili</span></a></div><div class="nav-next"><a href="https://cert-agid.gov.it/news/sintesi-riepilogativa-delle-campagne-malevole-nella-settimana-del-16-22-luglio-2022/" rel="next"><span class="u-hiddenVisually u-hiddenPrint">Prossima notizia:</span> <span class="u-text-s u-padding-r-right u-hiddenPrint u-hidden u-sm-inline u-md-inline u-lg-inline">Sintesi riepilogativa delle campagne malevole nella settimana del 16 – 22 luglio 2022</span><span class="Icon-chevron-right u-text-r-s u-hiddenPrint" role="presentation"></span></a></div></div>
	</nav>
  	          </div>

        <div class="Grid-cell u-sizeFull u-md-size2of12 u-lg-size2of12"></div>

      </div>

    </div>
  </div>
      </div>

    </div>
  </div>

  <!-- FOOTER -->
  
  <footer class="Footer u-background-95 u-margin-top-xxl u-hiddenPrint">
    <div class="u-layout-wide u-layout-r-withGutter u-layoutCenter">

      <div class="Grid Grid--withGutter Grid--alignMiddle">
        <div class="Grid-cell u-sizeFull u-sm-size1of2 u-md-size1of2 u-lg-size1of2" aria-hidden="true">
            
            <div class="Grid Grid--alignMiddle">
              <img class="Grid-cell Footer-logo u-sizeFit" src="/wp-content/themes/cert-agid/assets/images/cert-agid-logo-white.svg" alt="Logo del CERT-PA">
              <span class="Grid-cell Footer-siteName u-sizeFit" >CERT-AGID</span>
            </div>
<!--
            <img class="Footer-logo" src="/wp-content/themes/cert-agid/assets/images/cert-agid-logo-white.svg" alt="Logo del CERT-PA">
            <span class="Footer-siteName" >CERT-AGID</span>
-->
        </div>

        <div class="Grid-cell u-sizeFull u-sm-size1of2 u-md-size1of2 u-lg-size1of2 u-hidden u-sm-block u-md-block u-lg-block u-hiddenPrint">
          <form class="Form" action="/">
            <div class="Form-field Form-field--withPlaceholder Grid u-background-white u-color-gray-30 u-border-radius-s" role="search">
              <input type="text" name="s" class="Form-input Grid-cell u-sizeFill u-border-radius-s Form-input--ultraLean u-color-black u-text-r-xs" required id="cerca-in-footer" value="">
              <label for="cerca-in-footer" class="Form-label u-text-r-xxs u-color-grey-50">cerca nel sito</label>
              <button type="submit" class="clickable Grid-cell Icon Icon-search u-sizeFit u-padding-all-s u-color-gray-50 u-text-weight-700" title="Avvia la ricerca" aria-label="Avvia la ricerca">
            </div>          
          </form>
        </div>        
      </div>

      <div class="Footer-separator u-hiddenPrint" aria-hidden="true"></div>

      <div class="Grid Grid--withGutter Grid--alignMiddle Grid-sm--reverse u-hiddenPrint">
        <div class="Grid-cell u-sizeFull u-sm-size1of2 u-md-size1of2 u-lg-size1of2 u-margin-top-s u-sm-margin-top-none">
          <ul class="Footer-links u-cf">
<li id="menu-item-25" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-25"><a href="https://cert-agid.gov.it/contatti/">Contatti</a></li>
<li id="menu-item-24" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-privacy-policy menu-item-24"><a rel="privacy-policy" href="https://cert-agid.gov.it/privacy/">Privacy</a></li>
<li id="menu-item-26" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-26"><a href="https://cert-agid.gov.it/note-legali/">Note legali</a></li>
          </ul>
        </div> 
        <div class="Footer-linksRow Grid-cell u-sizeFull u-margin-top-xs u-margin-bottom-xs u-sm-margin-top-none u-sm-margin-bottom-none u-sm-size1of2 u-md-size1of2 u-lg-size1of2">
	  <h4 class="Footer-blockTitle">Seguici su</h4>
          <ul class="Footer-socialIcons">
              <li>
                <a href="https://cert-agid.gov.it/feed/" title="RSS">
                  <span class="Icon Icon-rss"></span>
                  <span class="u-hiddenVisually">RSS</span>
                </a>
              </li>
              <li>
                <a href="https://t.me/certagid" title="Telegram">
                  <span class="fab fa-telegram-plane"></span>
                  <span class="u-hiddenVisually">Telegram</span>
                </a>
              </li>
              <li>
                <a href="https://twitter.com/agidcert" title="X / Twitter">
                  <span class="fa-brands fa-x-twitter"></span>
                  <span class="u-hiddenVisually">X / Twitter</span>
                </a>
              </li>
	  </ul>
        </div> 
      </div>
   
    </div>
  </footer>
  
  <!-- Print footer -->
  <footer class="Footer u-margin-top-xxl u-blockPrint u-hidden" style="page-break-inside: avoid;">
    <div class="u-layout-wide u-layout-r-withGutter u-layoutCenter">

      <div class="Grid Grid--withGutter Grid--alignMiddle">
        <div class="Grid-cell u-sizeFull" aria-hidden="true">
            
            <div class="Grid Grid--alignMiddle">
              <img class="Grid-cell Footer-logo u-sizeFit" src="/wp-content/themes/cert-agid/assets/images/cert-agid-logo-black.svg" alt="Logo del CERT-PA">
              
              <span class="Grid-cell Footer-siteName u-sizeFit" >CERT-AGID</span>

              <div class="Grid-cell u-sizeFill u-color-print u-text-xl">
                <a href="https://cert-agid.gov.it/" class="Print-link">https://cert-agid.gov.it/</a>
              </div>
            </div>

        </div>
      </div>
    </div>
  </footer>

  <!--[if IE 8]>
  <script src="/wp-content/themes/cert-agid/build/vendor/respond.min.js"></script>
  <script src="/wp-content/themes/cert-agid/build/vendor/rem.min.js"></script>
  <script src="/wp-content/themes/cert-agid/build/vendor/selectivizr.js"></script>
  <script src="/wp-content/themes/cert-agid/build/vendor/slice.js"></script>
  <![endif]-->

  <!--[if lte IE 9]>
  <script src="/wp-content/themes/cert-agid/build/vendor/polyfill.min.js"></script>
  <![endif]-->

  <script>__PUBLIC_PATH__ = '/wp-content/themes/cert-agid/build/'</script>
  <script src="/wp-content/themes/cert-agid/build/IWT.min.js"></script>
<script type="text/javascript" src="https://cert-agid.gov.it/wp-content/themes/cert-agid/assets/js/imagelink.js?ver=1" id="image-link-js"></script>
</body>
</html>

<!--
Performance optimized by W3 Total Cache. Learn more: https://www.boldgrid.com/w3-total-cache/

Object Caching 150/270 objects using Memcached
Page Caching using Disk: Enhanced 

Served from: cert-agid.gov.it @ 2024-12-18 04:02:57 by W3 Total Cache
-->