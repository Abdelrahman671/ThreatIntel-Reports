<!doctype html>
<!--
  Minimal Mistakes Jekyll Theme 4.19.2 by Michael Rose
  Copyright 2013-2019 Michael Rose - mademistakes.com | @mmistakes
  Free for personal and commercial use under the MIT license
  https://github.com/mmistakes/minimal-mistakes/blob/master/LICENSE
-->
<html lang="en" class="no-js">
  <head>
    <meta charset="utf-8">

<!-- begin _includes/seo.html --><title>The Approach of TA413 for Tibetan Targets - MalGamy</title>
<meta name="description" content="Summary This attack chain begins with the victim receiving a malicious RTF file through a phishing attack. When the victim opens the RTF file, it contains a hidden encoded file which is then decoded and executed using a shellcode. The executed file then performs process hollowing, injecting itself into the rundll32.dll process and establishing a connection with the attacker’s command and control (C2) server.  ">


  <meta name="author" content="Gameel Ali">


<meta property="og:type" content="article">
<meta property="og:locale" content="en_US">
<meta property="og:site_name" content="MalGamy">
<meta property="og:title" content="The Approach of TA413 for Tibetan Targets">
<meta property="og:url" content="https://malgamy.github.io/malware-analysis/The-Approach-of-TA413-for-Tibetan-Targets/">


  <meta property="og:description" content="Summary This attack chain begins with the victim receiving a malicious RTF file through a phishing attack. When the victim opens the RTF file, it contains a hidden encoded file which is then decoded and executed using a shellcode. The executed file then performs process hollowing, injecting itself into the rundll32.dll process and establishing a connection with the attacker’s command and control (C2) server.  ">



  <meta property="og:image" content="https://malgamy.github.io/img/11.jpg">





  <meta property="article:published_time" content="2023-02-07T00:00:00+00:00">





  

  


<link rel="canonical" href="https://malgamy.github.io/malware-analysis/The-Approach-of-TA413-for-Tibetan-Targets/">




<script type="application/ld+json">
  {
    "@context": "https://schema.org",
    
      "@type": "Person",
      "name": "Gameel Ali",
      "url": "https://malgamy.github.io/"
    
  }
</script>


  <meta name="google-site-verification" content="J3MnMF94zaZhTUoNtUiRt9cKsr7hiMyTxEdAvQ3GfmY" />





<!-- end _includes/seo.html -->


<link href="/feed.xml" type="application/atom+xml" rel="alternate" title="MalGamy Feed">

<!-- https://t.co/dKP3o1e -->
<meta name="viewport" content="width=device-width, initial-scale=1.0">

<script>
  document.documentElement.className = document.documentElement.className.replace(/\bno-js\b/g, '') + ' js ';
</script>

<!-- For all browsers -->
<link rel="stylesheet" href="/assets/css/main.css">

<!--[if IE]>
  <style>
    /* old IE unsupported flexbox fixes */
    .greedy-nav .site-title {
      padding-right: 3em;
    }
    .greedy-nav button {
      position: absolute;
      top: 0;
      right: 0;
      height: 100%;
    }
  </style>
<![endif]-->



    <!-- start custom head snippets -->

<!-- insert favicons. use https://realfavicongenerator.net/ -->

<!-- end custom head snippets -->

<!-- favicon -->
<link rel="icon" type="image/png" sizes="32x32" href="/assets/images/site_data/favicon-32x32.png">
<link rel="icon" type="image/png" sizes="16x16" href="/assets/images/site_data/favicon-16x16.png">
<meta name="theme-color" content="#ffffff">

  </head>

  <body class="layout--single wide">
    <nav class="skip-links">
  <h2 class="screen-reader-text">Skip links</h2>
  <ul>
    <li><a href="#site-nav" class="screen-reader-shortcut">Skip to primary navigation</a></li>
    <li><a href="#main" class="screen-reader-shortcut">Skip to content</a></li>
    <li><a href="#footer" class="screen-reader-shortcut">Skip to footer</a></li>
  </ul>
</nav>

    <!--[if lt IE 9]>
<div class="notice--danger align-center" style="margin: 0;">You are using an <strong>outdated</strong> browser. Please <a href="https://browsehappy.com/">upgrade your browser</a> to improve your experience.</div>
<![endif]-->

    

<div class="masthead">
  <div class="masthead__inner-wrap">
    <div class="masthead__menu">
      <nav id="site-nav" class="greedy-nav">
        
          <a class="site-logo" href="/"><img src="/img/cover.jpg" alt=""></a>
        
        <a class="site-title" href="/">
          MalGamy
          
        </a>
        <ul class="visible-links"><li class="masthead__menu-item">
              <a href="/categories/#revese-enginnering">Revese Enginnering</a>
            </li><li class="masthead__menu-item">
              <a href="/categories/#malware-analysis">Malware Analysis</a>
            </li><li class="masthead__menu-item">
              <a href="/categories/#ctf-writeups">CTF Writeups</a>
            </li><li class="masthead__menu-item">
              <a href="/categories/#tutorials">Tutorials</a>
            </li><li class="masthead__menu-item">
              <a href="/categories">All Categories</a>
            </li></ul>
        
        <button class="search__toggle" type="button">
          <span class="visually-hidden">Toggle search</span>
          <svg class="icon" width="16" height="16" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.99 16">
            <path d="M15.5,13.12L13.19,10.8a1.69,1.69,0,0,0-1.28-.55l-0.06-.06A6.5,6.5,0,0,0,5.77,0,6.5,6.5,0,0,0,2.46,11.59a6.47,6.47,0,0,0,7.74.26l0.05,0.05a1.65,1.65,0,0,0,.5,1.24l2.38,2.38A1.68,1.68,0,0,0,15.5,13.12ZM6.4,2A4.41,4.41,0,1,1,2,6.4,4.43,4.43,0,0,1,6.4,2Z" transform="translate(-.01)"></path>
          </svg>
        </button>
        
        <button class="greedy-nav__toggle hidden" type="button">
          <span class="visually-hidden">Toggle menu</span>
          <div class="navicon"></div>
        </button>
        <ul class="hidden-links hidden"></ul>
      </nav>
    </div>
  </div>
</div>


    <div class="initial-content">
      



<div id="main" role="main">
  
  <div class="sidebar sticky">
  


<div itemscope itemtype="https://schema.org/Person">

  
    <div class="author__avatar">
      
        <img src="/img/cover.jpg" alt="Gameel Ali" itemprop="image">
      
    </div>
  

  <div class="author__content">
    
      <h3 class="author__name" itemprop="name">Gameel Ali</h3>
    
    
      <div class="author__bio" itemprop="description">
        <p>Malware analysis &amp; Reverse engineering</p>

      </div>
    
  </div>

  <div class="author__urls-wrapper">
    <button class="btn btn--inverse">Follow</button>
    <ul class="author__urls social-icons">
      

      
        
          
            <li><a href="gameelaa29@gmail.com" rel="nofollow noopener noreferrer"><i class="fas fa-fw fa-envelope-square" aria-hidden="true"></i><span class="label">Email</span></a></li>
          
        
          
        
          
            <li><a href="https://twitter.com/GameelA63457659" rel="nofollow noopener noreferrer"><i class="fab fa-fw fa-twitter-square" aria-hidden="true"></i><span class="label">Twitter</span></a></li>
          
        
          
        
          
            <li><a href="https://www.linkedin.com/in/gameel-ali-8041161bb/" rel="nofollow noopener noreferrer"><i class="fab fa-fw fa-linkedin" aria-hidden="true"></i><span class="label">LinkedIn</span></a></li>
          
        
          
            <li><a href="https://github.com/MalGamy" rel="nofollow noopener noreferrer"><i class="fab fa-fw fa-github" aria-hidden="true"></i><span class="label">GitHub</span></a></li>
          
        
          
        
      

      

      

      

      

      

      

      

      

      

      

      

      

      

      

      

      

      

      

      

      

      

      

      

      

      <!--
  <li>
    <a href="http://link-to-whatever-social-network.com/user/" itemprop="sameAs" rel="nofollow noopener noreferrer">
      <i class="fas fa-fw" aria-hidden="true"></i> Custom Social Profile Link
    </a>
  </li>
-->
    </ul>
  </div>
</div>

  
  </div>



  <article class="page" itemscope itemtype="https://schema.org/CreativeWork">
    <meta itemprop="headline" content="The Approach of TA413 for Tibetan Targets">
    <meta itemprop="description" content="SummaryThis attack chain begins with the victim receiving a malicious RTF file through a phishing attack. When the victim opens the RTF file, it contains a hidden encoded file which is then decoded and executed using a shellcode. The executed file then performs process hollowing, injecting itself into the rundll32.dll process and establishing a connection with the attacker’s command and control (C2) server.">
    <meta itemprop="datePublished" content="2023-02-07T00:00:00+00:00">
    

    <div class="page__inner-wrap">
      
        <header>
          <h1 id="page-title" class="page__title" itemprop="headline">The Approach of TA413 for Tibetan Targets
</h1>
          
            <p class="page__meta"><i class="far fa-clock" aria-hidden="true"></i> 




  12 minute read

</p>
          
        </header>
      

      <section class="page__content" itemprop="text">
        
          <aside class="sidebar__right ">
            <nav class="toc">
              <header><h4 class="nav__title"><i class="fas fa-file-alt"></i> On this page</h4></header>
              <ul class="toc__menu">
  <li><a href="#summary">Summary</a></li>
  <li><a href="#technical-analysis">Technical analysis</a></li>
  <li><a href="#second-stage">second stage</a></li>
  <li><a href="#thrid-stage">thrid stage</a></li>
  <li><a href="#mutex">mutex</a></li>
  <li><a href="#obfuscation">obfuscation</a></li>
  <li><a href="#collecting-sensitive-information">collecting sensitive information</a></li>
  <li><a href="#evade-detection">Evade Detection</a></li>
  <li><a href="#establish-a-connection">Establish a connection</a></li>
  <li><a href="#implemention-of-a-simple-http">implemention of a simple HTTP</a></li>
  <li><a href="#encryption-data-with-aes">Encryption data with AES</a></li>
  <li><a href="#c2-response">c2 response</a></li>
  <li><a href="#commands">commands</a></li>
  <li><a href="#analysis-infrastructure">Analysis Infrastructure</a></li>
  <li><a href="#classification-and-attribution">Classification and attribution</a></li>
  <li><a href="#ttps">TTPs</a></li>
  <li><a href="#yara-rule">Yara Rule</a></li>
  <li><a href="#iocs">IOCs</a>
    <ul>
      <li><a href="#frist-stage">Frist stage</a></li>
      <li><a href="#second-stage-1">second stage</a></li>
      <li><a href="#third-stage">third stage</a></li>
      <li><a href="#ip">IP</a></li>
      <li><a href="#domain">domain</a></li>
      <li><a href="#ip-addresses">ip addresses</a></li>
      <li><a href="#19936158100">199.36.158.100</a></li>
      <li><a href="#urls">urls</a></li>
      <li><a href="#files">Files</a></li>
    </ul>
  </li>
</ul>

            </nav>
          </aside>
        
        <h1 id="summary">Summary</h1>
<p>This attack chain begins with the victim receiving a malicious RTF file through a phishing attack. When the victim opens the RTF file, it contains a hidden encoded file which is then decoded and executed using a shellcode. The executed file then performs process hollowing, injecting itself into the rundll32.dll process and establishing a connection with the attacker’s command and control (C2) server.</p>

<p><img src="https://user-images.githubusercontent.com/74544712/217367882-eee587ff-85af-4c7e-bc90-15dc4c2c6703.png" alt="1" /></p>

<p>Once connected to the C2 server, the infected machine begins sending data about itself to the attacker, who can then use this information to send further modules and commands to the infected machine.</p>

<h1 id="technical-analysis">Technical analysis</h1>

<p>During our analysis, we collected some important information about the document file in question. By utilizing VirusTotal to scan the file’s hash, we were able to detect that the file is a RTF document that has been flagged by 34 different security solutions. Further analysis revealed that the RTF document exploits several known vulnerabilities, including CVE-2017-11882, CVE-2017-8759, CVE-2018-0802, and CVE-2018-0798.</p>

<p><img src="https://user-images.githubusercontent.com/74544712/217368686-d9c5e544-d64f-47e2-b3ae-f0c0ea7ab855.jpeg" alt="2" /></p>

<p>Using the tool rtfobj, we were able to extract multiple objects from the RTF document. Upon examining these objects, we identified an exploit code. exploit code equation drop encode payload on temp folder <code class="language-plaintext highlighter-rouge">Temp\ghb4nrwmp.wmf</code>. After deconding dropped file, it executed to reliver second stage.</p>

<p><img src="https://user-images.githubusercontent.com/74544712/217369290-00421ff8-a50b-4d27-8ea5-873f1f574548.png" alt="3" /></p>

<p>Further investigation revealed that the RTF document is related to the Royal Road.</p>

<p>Royal Road: It is known for its use of weaponized Microsoft Office documents to deliver payloads, including ransomware and other malicious software. The documents often exploit vulnerabilities in software such as Adobe Reader or Microsoft Office to execute the payload without the user’s knowledge.</p>

<p>RoyalRoad has been used in various campaigns targeting individuals and organizations around the world. It has been observed being delivered through spam emails, exploit kits, and other methods. Once the payload is delivered and executed, it may perform various malicious actions such as encrypting files, stealing sensitive information, and installing other malware.</p>

<p>During our analysis, we utilized the rr_decoder tool to decode the second stage payload of the RoyalRoad malware, which was named “ghb4nrwmp.wmf”. The results of the decoding are shown in the figure below.</p>

<p>$python3 rr_decode.py sample_ghb4nrwmp.wmf second_stage.exe</p>
<ul>
  <li>[!] Type [b2a66dff] is Detected!</li>
  <li>[+] Decoding…</li>
  <li>[!] Complete!</li>
</ul>

<h1 id="second-stage">second stage</h1>

<p>Upon decoding the second stage payload of the RoyalRoad malware, second stage is packed. so we identified that it utilized the VirtualAlloc function multiple times to allocate a region of memory in which to copy shellcode. Upon transferring execution to the shellcode, we observed the use of obfuscation techniques such as stack strings to obscure the names of APIs. Further analysis revealed that the shellcode used the “LoadLibraryA” and “GetProcAddress” functions to resolve and locate APIs necessary for injecting the third stage of the malware into the “rundll.dll” process.</p>

<p>In order to understand the injection process used by the RoyalRoad, we analyzed the behavior of the payload and identified the following steps:</p>
<ul>
  <li>The malware utilizes the VirtualAlloc function to copy shellcode into a region of memory.</li>
  <li>The shellcode uses stack strings to obscure the commandline.</li>
  <li>The CreateProcA function is used to create a process in a suspended state (0x4) <code class="language-plaintext highlighter-rouge">rundll32.dll</code>.</li>
  <li>A handle to the target process is obtained to allocate a region of memory on it using <code class="language-plaintext highlighter-rouge">VirtualAllocEx</code>.</li>
  <li>The third stage of the malware is copied into the target process using <code class="language-plaintext highlighter-rouge">WriteProcessMemory</code>`.</li>
  <li>The third stage is executed using the <code class="language-plaintext highlighter-rouge">ResumeThread</code> function.</li>
</ul>

<p>From the previous steps, we can identif that second stage used process hollowing to inject third stage into rundll.dll and excute it using this commandline</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">C:\Windows\system32\rundll32.exe"shell32.dll,Control_RunDLL</code></li>
</ul>

<h1 id="thrid-stage">thrid stage</h1>

<p>The third stage of the malware is developed in C and functions as a backdoor to collect information about the infected system and send it to the attacker. If the attacker determines that the infected system is of interest, they may choose to drop the next stage of the malware.</p>

<h1 id="mutex">mutex</h1>
<p>Upon analysis of the malware, it was observed that the malware creates a mutex with the identifier “552FFA80-3393-423d-8671-7BA046BB5906.” This mutex is also used as the malware’s campaign name, as shown in the following figure.</p>

<p><img src="https://user-images.githubusercontent.com/74544712/217369586-f36363c6-f684-47bf-bd2f-f887a8ad0c62.png" alt="4" /></p>

<h1 id="obfuscation">obfuscation</h1>

<p>The malware is equipped with a capability to encrypt strings using a simple XOR algorithm. This function was used by the malware to decrypt APIs into runtime in order to evade detection by static analysis tools. The malware also loaded 4 libraries into runtime using this technique. It is worth noting that different keys were used to decrypt the APIs and the libraries.</p>

<p><img src="https://user-images.githubusercontent.com/74544712/217369643-fd98f54b-8c97-4cec-823b-1299ebee72f2.png" alt="5" /></p>

<p>The keys used for decryption are as follows:</p>

<p>Key for decrypting APIs     :  cffb9895f0dcddca9e8befc4aee9b1bf (in hex) <br />
Key for decrypting libraries:  bf8a87e415cebb95aaf991b08ec486a4 (in hex)</p>

<p>After decrypting the APIs, the malware was able to utilize the GetProcAddress function to resolve the APIs and load the libraries using LoadLibraryA. This allowed the malware to execute its desired functions at runtime and we can include laoded libraries.</p>
<ul>
  <li>ws2_32.dll</li>
  <li>ntdll.dll!</li>
  <li>advapi32.dll</li>
</ul>

<p>we can see our script to decrypted encrypted strings.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">unhex</span><span class="p">(</span><span class="n">hex_string</span><span class="p">):</span>
    <span class="kn">import</span> <span class="nn">binascii</span>
    <span class="k">if</span> <span class="nb">type</span><span class="p">(</span><span class="n">hex_string</span><span class="p">)</span> <span class="o">==</span> <span class="nb">str</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">binascii</span><span class="p">.</span><span class="n">unhexlify</span><span class="p">(</span><span class="n">hex_string</span><span class="p">.</span><span class="n">encode</span><span class="p">(</span><span class="s">'utf-8'</span><span class="p">))</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">binascii</span><span class="p">.</span><span class="n">unhexlify</span><span class="p">(</span><span class="n">hex_string</span><span class="p">)</span>
	
<span class="k">def</span> <span class="nf">tohex</span><span class="p">(</span><span class="n">data</span><span class="p">):</span>
    <span class="kn">import</span> <span class="nn">binascii</span>
    <span class="k">if</span> <span class="nb">type</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="o">==</span> <span class="nb">str</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">binascii</span><span class="p">.</span><span class="n">hexlify</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="n">encode</span><span class="p">(</span><span class="s">'utf-8'</span><span class="p">))</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">binascii</span><span class="p">.</span><span class="n">hexlify</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
<span class="n">out</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">data</span> <span class="o">=</span> <span class="n">unhex</span><span class="p">(</span><span class="s">"c8f8b7b822f993f6ce9c9b"</span><span class="p">)</span>
<span class="n">key</span> <span class="o">=</span> <span class="n">unhex</span><span class="p">(</span><span class="s">"bf8a87e415cebb95aaf991b08ec486a4"</span><span class="p">)</span>


<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">)):</span>
 
    <span class="n">out</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">i</span> <span class="o">^</span> <span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">^</span> <span class="n">key</span><span class="p">[</span><span class="n">i</span> <span class="o">&amp;</span> <span class="mi">15</span><span class="p">])</span>

<span class="k">print</span><span class="p">(</span><span class="nb">bytes</span><span class="p">(</span><span class="n">out</span><span class="p">))</span>
</code></pre></div></div>
<h1 id="collecting-sensitive-information">collecting sensitive information</h1>
<p>function appears to be designed to gather and encode various system information. It does this by first decrypting several strings using the mw_decrypt_strings function. These strings are likely API names or other relevant information that is used later in the function.</p>

<p>The function then calls one of the decrypted functions (either GetNativeSystemInfo or GetSystemInfo) to retrieve system information and stores it in an array called system_info. This information may include details such as the system’s processor, memory, and operating system.</p>

<p>The function then encodes this information, as well as the hostname and username, using the mw_base64_encode function. The encoded strings are then concatenated into a single string.</p>

<p>collected information:</p>
<ul>
  <li>Username</li>
  <li>Process name and Process ID</li>
  <li>IP Address</li>
  <li>Hostname</li>
</ul>

<p><img src="https://user-images.githubusercontent.com/74544712/217370462-6079c974-cf31-4739-a3b9-9f2ba1378d60.png" alt="12" /></p>

<h1 id="evade-detection">Evade Detection</h1>
<p>After gathering and encoding data, the malware appears to use the LZF compression algorithm to compress the data further. It then applies an XOR operation with the value 0x2b to encrypt each element of the compressed data before encoding it again using the base64 encoding method. This process may be used to reduce the size of the data for easier transmission.</p>

<p><img src="https://user-images.githubusercontent.com/74544712/217370160-74883b94-f897-428a-abfa-21a1928a759d.png" alt="6" /></p>

<h1 id="establish-a-connection">Establish a connection</h1>
<p>Malware establish a connection with the server over a socket, so malware call htons to ensure that the data is correctly interpreted by the receiving system then call</p>
<ul>
  <li>mw_create_listen: to create a socket that can listen for incoming connections.</li>
  <li>mw_send_socket_connection: to be used to send a socket connection request to a server.</li>
  <li>mw_establishing_connection_server: to be used to establish a connection with a server.</li>
</ul>

<p><img src="https://user-images.githubusercontent.com/74544712/217370727-684cbc69-b3d7-4ea0-aab3-66ed7e7ae8f9.png" alt="7" /></p>

<h1 id="implemention-of-a-simple-http">implemention of a simple HTTP</h1>
<p>The malware appears to have implemented a simple HTTP client that can send HTTP requests to a server and receive responses. The process begins by extracting the hostname and port number for the connection. A socket is then created and a connection is established with the server.</p>

<p>The malware then constructs an HTTP request using the following format: “CONNECT %s:%d HTTP/1.1\r\nProxy-Connection: Keep-Alive\r\nContent-Length: 0\r\nHost: %s\r\nUser-Agent: %s\r\n”. The request is then sent to the server and a response is received. It is not clear how the response is processed or what the purpose of the request is.</p>

<p><img src="https://user-images.githubusercontent.com/74544712/217370841-ac764021-7693-4f9e-875f-a2fc4a150f9b.png" alt="8" /></p>

<h1 id="encryption-data-with-aes">Encryption data with AES</h1>
<p>After establishing a connection with the server, the malware appears to be utilizing the AES algorithm to encrypt data before sending it to the server. It uses a ransom key as the initial key for the encryption process and then receives a key from the server to encrypt the data again</p>

<p><img src="https://user-images.githubusercontent.com/74544712/217371007-888066ea-a6ca-41d3-8292-bcd64005df72.png" alt="9" /></p>

<h1 id="c2-response">c2 response</h1>
<p>malware appears to use a specific method for receiving encrypted data from the server and decrypting it. This data is likely to be modules or commands that are used for specific tasks. The decryption process is  reversing method that was used to encrypt the data, which includes:</p>

<ul>
  <li>LZF compression</li>
  <li>XORing with 0x2b</li>
  <li>Base64 encoding</li>
  <li>AES encryption with a randomly generated key</li>
  <li>AES encryption with a key derived from the XOR of the Client, Server Random Bytes Key</li>
</ul>

<h1 id="commands">commands</h1>
<p>malware checkes the header of response with “PK” and receive also one commands or more and we can see the commands in the next figure.</p>

<ul>
  <li>Command <code class="language-plaintext highlighter-rouge">2000</code>: which used to decode using base64, decrypt, with 0x2b key and decompress uing LZF.</li>
</ul>

<p><img src="https://user-images.githubusercontent.com/74544712/217371338-c9406b77-cc8e-4f27-94d4-fca4b7ea574d.png" alt="10" /></p>

<p>We can see a table of commands</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">No.</th>
      <th>command</th>
      <th>info</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">1</td>
      <td>2000</td>
      <td>which used to decode using base64, decrypt, with 0x2b key and decompress uing LZF</td>
    </tr>
    <tr>
      <td style="text-align: left">2</td>
      <td>2001</td>
      <td>clear the command of data</td>
    </tr>
    <tr>
      <td style="text-align: left">3</td>
      <td>2002</td>
      <td>set communication delay time</td>
    </tr>
    <tr>
      <td style="text-align: left">4</td>
      <td>2003</td>
      <td>exit command loop</td>
    </tr>
    <tr>
      <td style="text-align: left">5</td>
      <td>2004</td>
      <td>break connection</td>
    </tr>
    <tr>
      <td style="text-align: left">6</td>
      <td>2005</td>
      <td>load module from attaker into memory</td>
    </tr>
    <tr>
      <td style="text-align: left">7</td>
      <td>2006</td>
      <td>run module</td>
    </tr>
    <tr>
      <td style="text-align: left">8</td>
      <td>default</td>
      <td>listen for proxy connection</td>
    </tr>
  </tbody>
</table>

<h1 id="analysis-infrastructure">Analysis Infrastructure</h1>
<ul>
  <li>
    <p>It appears that the hostname “45.77.19.75.vultrusercontent.com” is associated with the domain “VULTRUSERCONTENT.COM” and is hosted by the cloud provider Vultr. The host is located in Japan, specifically in the city of Ōi. The organization responsible for the host is Vultr Holdings, LLC, and the ISP is The Constant Company, LLC. The ASN associated with the host is AS20473. It is important to note that the presence of a host or domain on a cloud provider does not necessarily indicate malicious activity.</p>
  </li>
  <li>
    <p>The network and AS are likely used by the malware for communication with its command and control (C2).</p>
  </li>
</ul>

<h1 id="classification-and-attribution">Classification and attribution</h1>
<p>Attribution refers to the process of identifying the source of a cyber attack or threat. It is often difficult to accurately attribute cyber attacks to a specific country, as attackers often use various tactics to hide their identity and location. There are a number of factors that can be used to help attribute a cyber attack to a specific country, including:</p>

<p>Victimology: This refers to the characteristics of the victims of the attack, such as the type of organization or industry they belong to. If a group of attacks all target organizations in a specific country, it can be a strong indication that the attacks are coming from that country.</p>

<p>Infrastructure: If a group of attacks all use the same infrastructure, such as a specific set of servers or domain names, this can be used to help attribute the attacks to a specific country or group.</p>

<p>Tactics, Techniques, and Procedures (TTPs): The specific tactics and techniques used in an attack can often be used to identify the group or country behind the attack.</p>

<p>Malware used: The type of malware used in an attack can often be used to attribute the attack to a specific group or country.</p>

<p>A spreadsheet targeting a Tibetan organization was used and a domain, tibet[.]bet, was attributed to the TA413 group for the attack. ansd we can see that in the next figure.</p>

<p><img src="https://user-images.githubusercontent.com/74544712/217516849-99318076-7c5c-448e-b859-4e3fa95418f1.png" alt="15" /></p>

<p>In this particular case, TA413 are known to have impersonated the “Department of Religion &amp; Culture.” This type of social engineering tactic is often used to trick individuals into revealing sensitive information or downloading malware.</p>

<p><img src="https://user-images.githubusercontent.com/74544712/217517825-a3f86e96-c7d8-4b1b-8055-e3c210fa663b.png" alt="13" /></p>

<h4 id="ideas-how-to-track-activity-of-this-tool">ideas how to track activity of this tool:</h4>

<ul>
  <li>
    <p>Set up a YARA rule to identify the RTF version of the Royal Road tool or any associated indicators of compromise (IOCs). This can be done by analyzing the characteristics of the RTF file, such as specific strings of code or patterns of behavior, and creating a rule that matches these characteristics.</p>
  </li>
  <li>
    <p>Use YARA to scan your network for any instances of the RTF version of the Royal Road tool or associated IOCs. This can be done by running YARA on a schedule, such as daily or weekly, or in real-time as part of a threat hunting process.</p>
  </li>
  <li>
    <p>When YARA detects a match, conduct further investigation to determine the scope and impact of the RTF version of the Royal Road tool on your network. This may involve analyzing network traffic, examining system logs, and performing forensic analysis on affected systems.</p>
  </li>
  <li>
    <p>Take appropriate remediation steps to remove the RTF version of the Royal Road tool from your network and secure any affected systems. This may involve isolating infected systems, patching vulnerabilities, and implementing additional security measures to prevent future attacks.</p>
  </li>
  <li>
    <p>Use threat intelligence sources to stay informed about the latest tactics and techniques used by APT groups, including those that use the RTF version of the Royal Road tool. This can help you stay ahead of potential threats and better defend your network.</p>
    <h1 id="ttps">TTPs</h1>
  </li>
</ul>

<p><img src="https://user-images.githubusercontent.com/74544712/217855970-1a69fc78-8c4f-4008-968c-c7b346527e4f.png" alt="11111" /></p>

<h1 id="yara-rule">Yara Rule</h1>
<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">rule</span> <span class="nt">lowzero_malware</span><span class="o">:</span> <span class="nt">lowzero</span>
<span class="p">{</span>
    <span class="py">meta</span><span class="p">:</span>
	<span class="n">description</span> <span class="err">=</span> <span class="s1">"Detect_lowzero_malware"</span>
        <span class="n">author</span> <span class="err">=</span> <span class="s1">"@malgamy12"</span>
	<span class="n">date</span> <span class="err">=</span> <span class="s1">"2022/12/26"</span>
	<span class="n">license</span> <span class="err">=</span> <span class="s1">"DRL 1.1"</span>
        <span class="n">hash</span> <span class="err">=</span> <span class="s1">"de44e5f6cfac9cd3e61194efd5c2b20ba44c437a520fe7018ed7f623e66f8131"</span>

                
    <span class="n">strings</span><span class="p">:</span>
        
        <span class="err">$</span><span class="n">pdb</span> <span class="err">=</span> <span class="s1">"Proxy-Authorization: NTLM "</span> <span class="n">ascii</span>
     
        <span class="err">$</span><span class="n">op</span> <span class="err">=</span> <span class="err">{</span><span class="m">8</span><span class="n">B</span> <span class="n">C1</span> <span class="m">8</span><span class="n">D</span> <span class="m">14</span> <span class="m">39</span> <span class="m">83</span> <span class="n">E0</span> <span class="err">??</span> <span class="m">8</span><span class="n">A</span> <span class="m">44</span> <span class="m">05</span> <span class="err">??</span> <span class="m">32</span> <span class="m">04</span> <span class="m">16</span> <span class="m">32</span> <span class="n">C1</span> <span class="m">41</span> <span class="m">88</span> <span class="m">02</span> <span class="m">3</span><span class="n">B</span> <span class="n">CB</span><span class="p">}</span>
        
    <span class="nt">condition</span><span class="o">:</span>
        <span class="nt">uint16</span><span class="o">(</span><span class="err">0</span><span class="o">)</span> <span class="o">==</span> <span class="err">0</span><span class="nt">x5A4D</span> <span class="nt">and</span> <span class="nt">all</span> <span class="nt">of</span> <span class="nt">them</span>
<span class="err">}</span>
</code></pre></div></div>

<h1 id="iocs">IOCs</h1>
<h2 id="frist-stage">Frist stage</h2>
<ul>
  <li>9681ef910820d553e4cd54286f8893850a3a57a29df7114c6a6b0d89362ff326</li>
</ul>

<h2 id="second-stage-1">second stage</h2>
<ul>
  <li>028e07fa88736f405d24f0d465bc789c3bcbbc9278effb3b1b73653847e86cf8</li>
</ul>

<h2 id="third-stage">third stage</h2>
<ul>
  <li>de44e5f6cfac9cd3e61194efd5c2b20ba44c437a520fe7018ed7f623e66f8131</li>
</ul>

<h2 id="ip">IP</h2>
<ul>
  <li>45.77.19.75</li>
</ul>

<h2 id="domain">domain</h2>
<ul>
  <li>chorig-org.web.app</li>
  <li>desktoppreview.com</li>
  <li>odc.officeapps.live.com</li>
</ul>

<h2 id="ip-addresses">ip addresses</h2>
<ul>
  <li>131.107.255.255</li>
  <li>45.77.19.75</li>
  <li>
    <h2 id="19936158100">199.36.158.100</h2>
    <h2 id="urls">urls</h2>
  </li>
  <li>https://chorig-org.web.app/Application-form-Sixmonth-workshop-2022V1.doc</li>
  <li>http://chorig-org.web.app/Application-form-Sixmonth-workshop-2022V1.doc</li>
  <li>http://desktoppreview.com/salvoed.dotx</li>
  <li>https://desktoppreview.com/salvoed.dotx</li>
</ul>

<h2 id="files">Files</h2>
<ul>
  <li>0b30433bb80abd4b1978fa84d953c13f4d7b726cd533e3c50cef36b4e79f2d2e</li>
  <li>cfc72b48732286a2beab5d0fc60aabc8d529faf4d0fb262b99a092096a187dc0</li>
  <li>1351dca77922b22ab5dae0689550cb55807900348a42b5dc71b01a5a78602b0f</li>
  <li>9681ef910820d553e4cd54286f8893850a3a57a29df7114c6a6b0d89362ff326</li>
  <li>ba2c89192643f05e64f49b5cb3513a6a5bbfa719225af3b72c83587b8b774e8d</li>
  <li>d987e80a23f334c5eb50c9883a6b5b1b2090230f950fa5eb7cec0a2d74f5271b</li>
  <li>3a69c1453b8062620837ab32be68ed871df383e24e68161839508a98bf7033b8</li>
  <li>c0fc6a2ba864650af25b9da8e70396cdb40e8a196f7f0ce6024ff67a080346dc</li>
  <li>c44be5ed5c4bec2be72ce9737bde5a2d48fe5fb0ea235ddc61ba447b26642949</li>
  <li>c8934c7b3187e48b1ee44fc2c8e1c3ab19850efc1e45383442cfe4b9b4a06d01</li>
  <li>9b79fbbc895ca98b951aecd664cdd7ce69f63901996c7341a560d7c207a143ea</li>
  <li>65bddf8148ed60f5625b3495baba0824d2fcd13a710494817c7a84e0062ce227</li>
  <li>1120275dc25bc9a7b3e078138c7240fbf26c91890d829e51d9fa837fe90237ed</li>
  <li>4f941e1203bf7c1cb3ec93d42792f7f971f8ec923d11017902481ccf42efaf75</li>
  <li>67458476cc289f7d0f0bda8938f959b8a1a515e23f37c9d16452b2e1d8adf5a4</li>
  <li>7d9e22ae60cb85c4dbdceac46d33fc080b89df23607ab4904b3795d9a9765b82</li>
  <li>c83c28add56ec8cad23a14155d5d3d082a1166c64ea5b7432e0acaa728231165</li>
  <li>b7bebe92a5802aa922e5719c948e35716f908e67701cfffaeebfcadc7a6e650a</li>
  <li>0eb7ba6457367f8f5f917f37ebbf1e7ccf0e971557dbe5d7547e49d129ac0e98</li>
</ul>

<p>References:</p>
<ul>
  <li>https://www.recordedfuture.com/chinese-state-sponsored-group-ta413-adopts-new-capabilities-in-pursuit-of-tibetan-targets</li>
  <li>https://nao-sec.org/2020/01/an-overhead-view-of-the-royal-road.html</li>
  <li>https://github.com/nao-sec/rr_decoder</li>
</ul>


        
      </section>

      <footer class="page__meta">
        
        


  


  
  
  

  <p class="page__taxonomy">
    <strong><i class="fas fa-fw fa-folder-open" aria-hidden="true"></i> Categories: </strong>
    <span itemprop="keywords">
    
      
      
      <a href="/categories/#malware-analysis" class="page__taxonomy-item" rel="tag">Malware-Analysis</a>
    
    </span>
  </p>


        
          <p class="page__date"><strong><i class="fas fa-fw fa-calendar-alt" aria-hidden="true"></i> Updated:</strong> <time datetime="2023-02-07T00:00:00+00:00">February 7, 2023</time></p>
        
      </footer>

      

      
  <nav class="pagination">
    
      <a href="/malware-analysis/Nokoyawa/" class="pagination--pager" title="Detect Nokoyawa ransomware With YARA Rule.
">Previous</a>
    
    
      <a href="#" class="pagination--pager disabled">Next</a>
    
  </nav>

    </div>

    
  </article>

  
  
</div>

    </div>

    
      <div class="search-content">
        <div class="search-content__inner-wrap"><form class="search-content__form" onkeydown="return event.key != 'Enter';">
    <label class="sr-only" for="search">
      Enter your search term...
    </label>
    <input type="search" id="search" class="search-input" tabindex="-1" placeholder="Enter your search term..." />
  </form>
  <div id="results" class="results"></div></div>

      </div>
    

    <div id="footer" class="page__footer">
      <footer>
        <!-- start custom footer snippets -->

<!-- end custom footer snippets -->
        <div class="page__footer-follow">
  <ul class="social-icons">
    
      <li><strong>Follow:</strong></li>
    

    
      
        
      
        
      
        
      
        
      
        
      
        
      
    

    <li><a href="/feed.xml"><i class="fas fa-fw fa-rss-square" aria-hidden="true"></i> Feed</a></li>
  </ul>
</div>

<div class="page__footer-copyright">&copy; 2023 Gameel Ali. Powered by <a href="https://jekyllrb.com" rel="nofollow">Jekyll</a> &amp; <a href="https://mademistakes.com/work/minimal-mistakes-jekyll-theme/" rel="nofollow">Minimal Mistakes</a>.</div>

      </footer>
    </div>

    
  <script src="/assets/js/main.min.js"></script>
  <script src="https://kit.fontawesome.com/4eee35f757.js"></script>




<script src="/assets/js/lunr/lunr.min.js"></script>
<script src="/assets/js/lunr/lunr-store.js"></script>
<script src="/assets/js/lunr/lunr-en.js"></script>




  <script>
  window.ga=function(){ga.q.push(arguments)};ga.q=[];ga.l=+new Date;
  ga('create','UA-165194559-1','auto');
  ga('set', 'anonymizeIp', false);
  ga('send','pageview')
</script>
<script src="https://www.google-analytics.com/analytics.js" async></script>









  </body>
</html>
