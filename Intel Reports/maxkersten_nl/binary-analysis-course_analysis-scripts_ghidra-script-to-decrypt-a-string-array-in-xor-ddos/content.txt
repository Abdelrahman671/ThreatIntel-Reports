<!DOCTYPE html>
<html lang="en-US">
<head>
	<meta charset="UTF-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge" />
	<link rel="profile" href="https://gmpg.org/xfn/11">
	<title>Ghidra script to decrypt a string array in XOR DDoS &#8211; Max Kersten</title>
<style type="text/css">
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for c
 * CSS class: , CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2014 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.c .de1, .c .de2 {}
.c  {font-family:monospace;}
.c .imp {font-weight: bold; color: red;}
.c li, .c .li1 {font-weight: normal; vertical-align:top;}
.c .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.c .li2 {font-weight: bold; vertical-align:top;}
.c .kw1 {color: #b1b100;}
.c .kw2 {color: #000000; font-weight: bold;}
.c .kw3 {color: #000066;}
.c .kw4 {color: #993333;}
.c .co1 {color: #666666; font-style: italic;}
.c .co2 {color: #339933;}
.c .coMULTI {color: #808080; font-style: italic;}
.c .es0 {color: #000099; font-weight: bold;}
.c .es1 {color: #000099; font-weight: bold;}
.c .es2 {color: #660099; font-weight: bold;}
.c .es3 {color: #660099; font-weight: bold;}
.c .es4 {color: #660099; font-weight: bold;}
.c .es5 {color: #006699; font-weight: bold;}
.c .br0 {color: #009900;}
.c .sy0 {color: #339933;}
.c .st0 {color: #ff0000;}
.c .nu0 {color: #0000dd;}
.c .nu6 {color: #208080;}
.c .nu8 {color: #208080;}
.c .nu12 {color: #208080;}
.c .nu16 {color:#800080;}
.c .nu17 {color:#800080;}
.c .nu18 {color:#800080;}
.c .nu19 {color:#800080;}
.c .me1 {color: #202020;}
.c .me2 {color: #202020;}
.c .ln-xtra, .c li.ln-xtra, .c div.ln-xtra {background-color: #ffc;}
.c span.xtra { display:block; }
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for asm
 * CSS class: , CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2014 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.asm .de1, .asm .de2 {}
.asm  {font-family:monospace;}
.asm .imp {font-weight: bold; color: red;}
.asm li, .asm .li1 {font-weight: normal; vertical-align:top;}
.asm .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.asm .li2 {font-weight: bold; vertical-align:top;}
.asm .kw1 {color: #00007f; font-weight: bold;}
.asm .kw2 {color: #0000ff;}
.asm .kw3 {color: #b00040;}
.asm .kw4 {color: #46aa03; font-weight: bold;}
.asm .kw5 {color: #0000ff; font-weight: bold;}
.asm .kw6 {color: #0000ff; font-weight: bold;}
.asm .co1 {color: #666666; font-style: italic;}
.asm .co2 {color: #adadad; font-style: italic;}
.asm .es0 {color: #000099; font-weight: bold;}
.asm .br0 {color: #009900; font-weight: bold;}
.asm .sy1 {color: #339933;}
.asm .sy2 {color: #0000ff; font-weight: bold;}
.asm .st0 {color: #7f007f;}
.asm .nu0 {color: #ff0000;}
.asm .ln-xtra, .asm li.ln-xtra, .asm div.ln-xtra {background-color: #ffc;}
.asm span.xtra { display:block; }
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for java
 * CSS class: , CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2014 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.java .de1, .java .de2 {}
.java  {font-family:monospace;}
.java .imp {font-weight: bold; color: red;}
.java li, .java .li1 {font-weight: normal; vertical-align:top;}
.java .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.java .li2 {font-weight: bold; vertical-align:top;}
.java .kw1 {color: #000000; font-weight: bold;}
.java .kw2 {color: #000066; font-weight: bold;}
.java .kw3 {color: #003399;}
.java .kw4 {color: #000066; font-weight: bold;}
.java .co1 {color: #666666; font-style: italic;}
.java .co2 {color: #006699;}
.java .co3 {color: #008000; font-style: italic; font-weight: bold;}
.java .coMULTI {color: #666666; font-style: italic;}
.java .es0 {color: #000099; font-weight: bold;}
.java .br0 {color: #009900;}
.java .sy0 {color: #339933;}
.java .st0 {color: #0000ff;}
.java .nu0 {color: #cc66cc;}
.java .me1 {color: #006633;}
.java .me2 {color: #006633;}
.java .ln-xtra, .java li.ln-xtra, .java div.ln-xtra {background-color: #ffc;}
.java span.xtra { display:block; }
</style>
<meta name='robots' content='max-image-preview:large' />
	<style>img:is([sizes="auto" i], [sizes^="auto," i]) { contain-intrinsic-size: 3000px 1500px }</style>
	<link rel='dns-prefetch' href='//fonts.googleapis.com' />
<link href='https://fonts.gstatic.com' crossorigin rel='preconnect' />
<link rel="alternate" type="application/rss+xml" title="Max Kersten &raquo; Feed" href="https://maxkersten.nl/feed/" />
<link rel="alternate" type="application/rss+xml" title="Max Kersten &raquo; Comments Feed" href="https://maxkersten.nl/comments/feed/" />

<link rel='stylesheet' id='wp-block-library-css' href='https://maxkersten.nl/wp-includes/css/dist/block-library/style.min.css?ver=6.7.1' type='text/css' media='all' />
<style id='classic-theme-styles-inline-css' type='text/css'>
/*! This file is auto-generated */
.wp-block-button__link{color:#fff;background-color:#32373c;border-radius:9999px;box-shadow:none;text-decoration:none;padding:calc(.667em + 2px) calc(1.333em + 2px);font-size:1.125em}.wp-block-file__button{background:#32373c;color:#fff;text-decoration:none}
</style>
<style id='global-styles-inline-css' type='text/css'>
:root{--wp--preset--aspect-ratio--square: 1;--wp--preset--aspect-ratio--4-3: 4/3;--wp--preset--aspect-ratio--3-4: 3/4;--wp--preset--aspect-ratio--3-2: 3/2;--wp--preset--aspect-ratio--2-3: 2/3;--wp--preset--aspect-ratio--16-9: 16/9;--wp--preset--aspect-ratio--9-16: 9/16;--wp--preset--color--black: #000000;--wp--preset--color--cyan-bluish-gray: #abb8c3;--wp--preset--color--white: #ffffff;--wp--preset--color--pale-pink: #f78da7;--wp--preset--color--vivid-red: #cf2e2e;--wp--preset--color--luminous-vivid-orange: #ff6900;--wp--preset--color--luminous-vivid-amber: #fcb900;--wp--preset--color--light-green-cyan: #7bdcb5;--wp--preset--color--vivid-green-cyan: #00d084;--wp--preset--color--pale-cyan-blue: #8ed1fc;--wp--preset--color--vivid-cyan-blue: #0693e3;--wp--preset--color--vivid-purple: #9b51e0;--wp--preset--gradient--vivid-cyan-blue-to-vivid-purple: linear-gradient(135deg,rgba(6,147,227,1) 0%,rgb(155,81,224) 100%);--wp--preset--gradient--light-green-cyan-to-vivid-green-cyan: linear-gradient(135deg,rgb(122,220,180) 0%,rgb(0,208,130) 100%);--wp--preset--gradient--luminous-vivid-amber-to-luminous-vivid-orange: linear-gradient(135deg,rgba(252,185,0,1) 0%,rgba(255,105,0,1) 100%);--wp--preset--gradient--luminous-vivid-orange-to-vivid-red: linear-gradient(135deg,rgba(255,105,0,1) 0%,rgb(207,46,46) 100%);--wp--preset--gradient--very-light-gray-to-cyan-bluish-gray: linear-gradient(135deg,rgb(238,238,238) 0%,rgb(169,184,195) 100%);--wp--preset--gradient--cool-to-warm-spectrum: linear-gradient(135deg,rgb(74,234,220) 0%,rgb(151,120,209) 20%,rgb(207,42,186) 40%,rgb(238,44,130) 60%,rgb(251,105,98) 80%,rgb(254,248,76) 100%);--wp--preset--gradient--blush-light-purple: linear-gradient(135deg,rgb(255,206,236) 0%,rgb(152,150,240) 100%);--wp--preset--gradient--blush-bordeaux: linear-gradient(135deg,rgb(254,205,165) 0%,rgb(254,45,45) 50%,rgb(107,0,62) 100%);--wp--preset--gradient--luminous-dusk: linear-gradient(135deg,rgb(255,203,112) 0%,rgb(199,81,192) 50%,rgb(65,88,208) 100%);--wp--preset--gradient--pale-ocean: linear-gradient(135deg,rgb(255,245,203) 0%,rgb(182,227,212) 50%,rgb(51,167,181) 100%);--wp--preset--gradient--electric-grass: linear-gradient(135deg,rgb(202,248,128) 0%,rgb(113,206,126) 100%);--wp--preset--gradient--midnight: linear-gradient(135deg,rgb(2,3,129) 0%,rgb(40,116,252) 100%);--wp--preset--font-size--small: 13px;--wp--preset--font-size--medium: 20px;--wp--preset--font-size--large: 36px;--wp--preset--font-size--x-large: 42px;--wp--preset--spacing--20: 0.44rem;--wp--preset--spacing--30: 0.67rem;--wp--preset--spacing--40: 1rem;--wp--preset--spacing--50: 1.5rem;--wp--preset--spacing--60: 2.25rem;--wp--preset--spacing--70: 3.38rem;--wp--preset--spacing--80: 5.06rem;--wp--preset--shadow--natural: 6px 6px 9px rgba(0, 0, 0, 0.2);--wp--preset--shadow--deep: 12px 12px 50px rgba(0, 0, 0, 0.4);--wp--preset--shadow--sharp: 6px 6px 0px rgba(0, 0, 0, 0.2);--wp--preset--shadow--outlined: 6px 6px 0px -3px rgba(255, 255, 255, 1), 6px 6px rgba(0, 0, 0, 1);--wp--preset--shadow--crisp: 6px 6px 0px rgba(0, 0, 0, 1);}:where(.is-layout-flex){gap: 0.5em;}:where(.is-layout-grid){gap: 0.5em;}body .is-layout-flex{display: flex;}.is-layout-flex{flex-wrap: wrap;align-items: center;}.is-layout-flex > :is(*, div){margin: 0;}body .is-layout-grid{display: grid;}.is-layout-grid > :is(*, div){margin: 0;}:where(.wp-block-columns.is-layout-flex){gap: 2em;}:where(.wp-block-columns.is-layout-grid){gap: 2em;}:where(.wp-block-post-template.is-layout-flex){gap: 1.25em;}:where(.wp-block-post-template.is-layout-grid){gap: 1.25em;}.has-black-color{color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-color{color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-color{color: var(--wp--preset--color--white) !important;}.has-pale-pink-color{color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-color{color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-color{color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-color{color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-color{color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-color{color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-color{color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-color{color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-color{color: var(--wp--preset--color--vivid-purple) !important;}.has-black-background-color{background-color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-background-color{background-color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-background-color{background-color: var(--wp--preset--color--white) !important;}.has-pale-pink-background-color{background-color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-background-color{background-color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-background-color{background-color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-background-color{background-color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-background-color{background-color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-background-color{background-color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-background-color{background-color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-background-color{background-color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-background-color{background-color: var(--wp--preset--color--vivid-purple) !important;}.has-black-border-color{border-color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-border-color{border-color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-border-color{border-color: var(--wp--preset--color--white) !important;}.has-pale-pink-border-color{border-color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-border-color{border-color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-border-color{border-color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-border-color{border-color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-border-color{border-color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-border-color{border-color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-border-color{border-color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-border-color{border-color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-border-color{border-color: var(--wp--preset--color--vivid-purple) !important;}.has-vivid-cyan-blue-to-vivid-purple-gradient-background{background: var(--wp--preset--gradient--vivid-cyan-blue-to-vivid-purple) !important;}.has-light-green-cyan-to-vivid-green-cyan-gradient-background{background: var(--wp--preset--gradient--light-green-cyan-to-vivid-green-cyan) !important;}.has-luminous-vivid-amber-to-luminous-vivid-orange-gradient-background{background: var(--wp--preset--gradient--luminous-vivid-amber-to-luminous-vivid-orange) !important;}.has-luminous-vivid-orange-to-vivid-red-gradient-background{background: var(--wp--preset--gradient--luminous-vivid-orange-to-vivid-red) !important;}.has-very-light-gray-to-cyan-bluish-gray-gradient-background{background: var(--wp--preset--gradient--very-light-gray-to-cyan-bluish-gray) !important;}.has-cool-to-warm-spectrum-gradient-background{background: var(--wp--preset--gradient--cool-to-warm-spectrum) !important;}.has-blush-light-purple-gradient-background{background: var(--wp--preset--gradient--blush-light-purple) !important;}.has-blush-bordeaux-gradient-background{background: var(--wp--preset--gradient--blush-bordeaux) !important;}.has-luminous-dusk-gradient-background{background: var(--wp--preset--gradient--luminous-dusk) !important;}.has-pale-ocean-gradient-background{background: var(--wp--preset--gradient--pale-ocean) !important;}.has-electric-grass-gradient-background{background: var(--wp--preset--gradient--electric-grass) !important;}.has-midnight-gradient-background{background: var(--wp--preset--gradient--midnight) !important;}.has-small-font-size{font-size: var(--wp--preset--font-size--small) !important;}.has-medium-font-size{font-size: var(--wp--preset--font-size--medium) !important;}.has-large-font-size{font-size: var(--wp--preset--font-size--large) !important;}.has-x-large-font-size{font-size: var(--wp--preset--font-size--x-large) !important;}
:where(.wp-block-post-template.is-layout-flex){gap: 1.25em;}:where(.wp-block-post-template.is-layout-grid){gap: 1.25em;}
:where(.wp-block-columns.is-layout-flex){gap: 2em;}:where(.wp-block-columns.is-layout-grid){gap: 2em;}
:root :where(.wp-block-pullquote){font-size: 1.5em;line-height: 1.6;}
</style>
<link rel='stylesheet' id='generate-style-grid-css' href='https://maxkersten.nl/wp-content/themes/generatepress/css/unsemantic-grid.min.css?ver=1.3.46' type='text/css' media='all' />
<link rel='stylesheet' id='generate-style-css' href='https://maxkersten.nl/wp-content/themes/generatepress/style.css?ver=1.3.46' type='text/css' media='all' />
<style id='generate-style-inline-css' type='text/css'>
body{background-color:#efefef;color:#3a3a3a;}a, a:visited{color:#1e73be;text-decoration:none;}a:hover, a:focus, a:active{color:#000000;text-decoration:none;}body .grid-container{max-width:1100px;}
body, button, input, select, textarea{font-family:"Open Sans", sans-serif;}.main-navigation .main-nav ul ul li a{font-size:14px;}@media (max-width:768px){.main-title{font-size:30px;}h1{font-size:30px;}h2{font-size:25px;}}
.site-header{background-color:#ffffff;color:#3a3a3a;}.site-header a,.site-header a:visited{color:#3a3a3a;}.main-title a,.main-title a:hover,.main-title a:visited{color:#222222;}.site-description{color:#999999;}.main-navigation,.main-navigation ul ul{background-color:#222222;}.main-navigation .main-nav ul li a,.menu-toggle{color:#ffffff;}.main-navigation .main-nav ul li > a:hover,.main-navigation .main-nav ul li > a:focus, .main-navigation .main-nav ul li.sfHover > a{color:#ffffff;background-color:#3f3f3f;}button.menu-toggle:hover,button.menu-toggle:focus,.main-navigation .mobile-bar-items a,.main-navigation .mobile-bar-items a:hover,.main-navigation .mobile-bar-items a:focus{color:#ffffff;}.main-navigation .main-nav ul li[class*="current-menu-"] > a{color:#ffffff;background-color:#3f3f3f;}.main-navigation .main-nav ul li[class*="current-menu-"] > a:hover,.main-navigation .main-nav ul li[class*="current-menu-"].sfHover > a{color:#ffffff;background-color:#3f3f3f;}.main-navigation ul ul{background-color:#3f3f3f;}.main-navigation .main-nav ul ul li a{color:#ffffff;}.main-navigation .main-nav ul ul li > a:hover,.main-navigation .main-nav ul ul li > a:focus,.main-navigation .main-nav ul ul li.sfHover > a{color:#ffffff;background-color:#4f4f4f;}.main-navigation .main-nav ul ul li[class*="current-menu-"] > a{color:#ffffff;background-color:#4f4f4f;}.main-navigation .main-nav ul ul li[class*="current-menu-"] > a:hover,.main-navigation .main-nav ul ul li[class*="current-menu-"].sfHover > a{color:#ffffff;background-color:#4f4f4f;}.separate-containers .inside-article, .separate-containers .comments-area, .separate-containers .page-header, .one-container .container, .separate-containers .paging-navigation, .inside-page-header{background-color:#ffffff;}.entry-meta{color:#888888;}.entry-meta a,.entry-meta a:visited{color:#666666;}.entry-meta a:hover{color:#1e73be;}.sidebar .widget{background-color:#ffffff;}.sidebar .widget .widget-title{color:#000000;}.site-info{color:#ffffff;background-color:#222222;}.site-info a,.site-info a:visited{color:#ffffff;}.site-info a:hover{color:#606060;}.footer-bar .widget_nav_menu .current-menu-item a{color:#606060;}input[type="text"],input[type="email"],input[type="url"],input[type="password"],input[type="search"],textarea{color:#666666;background-color:#fafafa;border-color:#cccccc;}input[type="text"]:focus,input[type="email"]:focus,input[type="url"]:focus,input[type="password"]:focus,input[type="search"]:focus,textarea:focus{color:#666666;background-color:#ffffff;border-color:#bfbfbf;}button,html input[type="button"],input[type="reset"],input[type="submit"],.button,.button:visited{color:#ffffff;background-color:#666666;}button:hover,html input[type="button"]:hover,input[type="reset"]:hover,input[type="submit"]:hover,.button:hover,button:focus,html input[type="button"]:focus,input[type="reset"]:focus,input[type="submit"]:focus,.button:focus{color:#ffffff;background-color:#3f3f3f;}
@media (max-width:768px){.separate-containers .inside-article, .separate-containers .comments-area, .separate-containers .page-header, .separate-containers .paging-navigation, .one-container .site-content, .inside-page-header{padding:30px;}}.main-navigation ul ul{top:auto;}
</style>
<link rel='stylesheet' id='generate-mobile-style-css' href='https://maxkersten.nl/wp-content/themes/generatepress/css/mobile.min.css?ver=1.3.46' type='text/css' media='all' />
<link rel='stylesheet' id='fontawesome-css' href='https://maxkersten.nl/wp-content/themes/generatepress/css/font-awesome.min.css?ver=4.7' type='text/css' media='all' />
<!--[if lt IE 9]>
<link rel='stylesheet' id='generate-ie-css' href='https://maxkersten.nl/wp-content/themes/generatepress/css/ie.min.css?ver=1.3.46' type='text/css' media='all' />
<![endif]-->
<link rel='stylesheet' id='wpgeshi-wp-geshi-highlight-css' href='https://maxkersten.nl/wp-content/plugins/wp-geshi-highlight/wp-geshi-highlight.css?ver=6.7.1' type='text/css' media='all' />
<script type="text/javascript" src="https://maxkersten.nl/wp-includes/js/jquery/jquery.min.js?ver=3.7.1" id="jquery-core-js"></script>
<script type="text/javascript" src="https://maxkersten.nl/wp-includes/js/jquery/jquery-migrate.min.js?ver=3.4.1" id="jquery-migrate-js"></script>
<link rel="https://api.w.org/" href="https://maxkersten.nl/wp-json/" /><link rel="alternate" title="JSON" type="application/json" href="https://maxkersten.nl/wp-json/wp/v2/pages/3521" /><link rel="EditURI" type="application/rsd+xml" title="RSD" href="https://maxkersten.nl/xmlrpc.php?rsd" />
<meta name="generator" content="WordPress 6.7.1" />
<link rel="canonical" href="https://maxkersten.nl/binary-analysis-course/analysis-scripts/ghidra-script-to-decrypt-a-string-array-in-xor-ddos/" />
<link rel='shortlink' href='https://maxkersten.nl/?p=3521' />
<link rel="alternate" title="oEmbed (JSON)" type="application/json+oembed" href="https://maxkersten.nl/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fmaxkersten.nl%2Fbinary-analysis-course%2Fanalysis-scripts%2Fghidra-script-to-decrypt-a-string-array-in-xor-ddos%2F" />
<link rel="alternate" title="oEmbed (XML)" type="text/xml+oembed" href="https://maxkersten.nl/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fmaxkersten.nl%2Fbinary-analysis-course%2Fanalysis-scripts%2Fghidra-script-to-decrypt-a-string-array-in-xor-ddos%2F&#038;format=xml" />
<meta name="viewport" content="width=device-width, initial-scale=1"><link rel="icon" href="https://maxkersten.nl/wp-content/uploads/2021/03/cropped-libra-32x32.png" sizes="32x32" />
<link rel="icon" href="https://maxkersten.nl/wp-content/uploads/2021/03/cropped-libra-192x192.png" sizes="192x192" />
<link rel="apple-touch-icon" href="https://maxkersten.nl/wp-content/uploads/2021/03/cropped-libra-180x180.png" />
<meta name="msapplication-TileImage" content="https://maxkersten.nl/wp-content/uploads/2021/03/cropped-libra-270x270.png" />
</head>

<body data-rsssl=1 itemtype='http://schema.org/WebPage' itemscope='itemscope' class="page-template-default page page-id-3521 page-child parent-pageid-2046  right-sidebar nav-below-header fluid-header separate-containers active-footer-widgets-0 nav-aligned-left header-aligned-left dropdown-hover">
	<a class="screen-reader-text skip-link" href="#content" title="Skip to content">Skip to content</a>
			<header itemtype="http://schema.org/WPHeader" itemscope="itemscope" id="masthead" class="site-header">
		<div class="inside-header grid-container grid-parent">
						<div class="site-branding">
				<p class="main-title" itemprop="headline">
			<a href="https://maxkersten.nl/" rel="home">
				Max Kersten
			</a>
		</p>
				<p class="site-description">
			Security through explanation
		</p>
			</div>					</div><!-- .inside-header -->
	</header><!-- #masthead -->
			<nav itemtype="http://schema.org/SiteNavigationElement" itemscope="itemscope" id="site-navigation" class="main-navigation">
		<div class="inside-navigation grid-container grid-parent">
						<button class="menu-toggle" aria-controls="primary-menu" aria-expanded="false">
								<span class="mobile-menu">Menu</span>
			</button>
				<div id="primary-menu" class="main-nav">
		<ul class="menu sf-menu">
			<li class="page_item page-item-31"><a href="https://maxkersten.nl/">Home</a></li>
<li class="page_item page-item-51"><a href="https://maxkersten.nl/blog/">Blog</a></li>
<li class="page_item page-item-205 menu-item-has-children current-menu-ancestor"><a href="https://maxkersten.nl/binary-analysis-course/">Binary Analysis Course<span role="button" class="dropdown-menu-toggle" aria-expanded="false"></span></a>
<ul class='children'>
<li class="page_item page-item-240 menu-item-has-children"><a href="https://maxkersten.nl/binary-analysis-course/introduction/">Introduction<span role="button" class="dropdown-menu-toggle" aria-expanded="false"></span></a>
	<ul class='children'>
<li class="page_item page-item-208"><a href="https://maxkersten.nl/binary-analysis-course/introduction/secura-grand-slam-ctf-easy-reverse/">Practical case: Secura Grand Slam CTF &#8220;Easy Reverse&#8221;</a></li>
<li class="page_item page-item-2135"><a href="https://maxkersten.nl/binary-analysis-course/introduction/the-workstation/">The workstation</a></li>
<li class="page_item page-item-263"><a href="https://maxkersten.nl/binary-analysis-course/introduction/basic-cpu-architecture/">Basic CPU architecture</a></li>
	</ul>
</li>
<li class="page_item page-item-311 menu-item-has-children"><a href="https://maxkersten.nl/binary-analysis-course/assembly-basics/">Assembly basics<span role="button" class="dropdown-menu-toggle" aria-expanded="false"></span></a>
	<ul class='children'>
<li class="page_item page-item-313"><a href="https://maxkersten.nl/binary-analysis-course/assembly-basics/conditions-and-loops/">Conditions and loops</a></li>
<li class="page_item page-item-400"><a href="https://maxkersten.nl/binary-analysis-course/assembly-basics/practical-case-patch-me-0x01/">Practical case: Patch Me 0x01</a></li>
<li class="page_item page-item-485"><a href="https://maxkersten.nl/binary-analysis-course/assembly-basics/methods-and-macros-the-call-stack/">Methods and macros: the call stack</a></li>
<li class="page_item page-item-529"><a href="https://maxkersten.nl/binary-analysis-course/assembly-basics/practical-case-buffer-overflow-0x01/">Practical case: Buffer Overflow 0x01</a></li>
<li class="page_item page-item-568"><a href="https://maxkersten.nl/binary-analysis-course/assembly-basics/crash-course/">Crash course</a></li>
<li class="page_item page-item-1569"><a href="https://maxkersten.nl/binary-analysis-course/assembly-basics/practical-case-crack-me-0x01/">Practical case: Crack Me 0x01</a></li>
<li class="page_item page-item-1680"><a href="https://maxkersten.nl/binary-analysis-course/assembly-basics/practical-case-crack-me-0x02/">Practical case: Crack Me 0x02</a></li>
<li class="page_item page-item-1971"><a href="https://maxkersten.nl/binary-analysis-course/assembly-basics/practical-case-crack-me-0x03/">Practical case: Crack Me 0x03</a></li>
	</ul>
</li>
<li class="page_item page-item-1286 menu-item-has-children"><a href="https://maxkersten.nl/binary-analysis-course/assembly-code/">Assembly code<span role="button" class="dropdown-menu-toggle" aria-expanded="false"></span></a>
	<ul class='children'>
<li class="page_item page-item-1289"><a href="https://maxkersten.nl/binary-analysis-course/assembly-code/hello-world/">Hello world</a></li>
<li class="page_item page-item-1323"><a href="https://maxkersten.nl/binary-analysis-course/assembly-code/universal-product-code-calculator/">Universal Product Code calculator</a></li>
<li class="page_item page-item-1385"><a href="https://maxkersten.nl/binary-analysis-course/assembly-code/debugging-code/">Debugging code</a></li>
	</ul>
</li>
<li class="page_item page-item-610 menu-item-has-children"><a href="https://maxkersten.nl/binary-analysis-course/binary-types/">Binary types<span role="button" class="dropdown-menu-toggle" aria-expanded="false"></span></a>
	<ul class='children'>
<li class="page_item page-item-615"><a href="https://maxkersten.nl/binary-analysis-course/binary-types/dot-net/">Dot Net</a></li>
<li class="page_item page-item-687"><a href="https://maxkersten.nl/binary-analysis-course/binary-types/android/">Android</a></li>
<li class="page_item page-item-1541"><a href="https://maxkersten.nl/binary-analysis-course/binary-types/browser-plug-in/">Browser plug-in</a></li>
	</ul>
</li>
<li class="page_item page-item-1435 menu-item-has-children"><a href="https://maxkersten.nl/binary-analysis-course/common-techniques/">Common techniques<span role="button" class="dropdown-menu-toggle" aria-expanded="false"></span></a>
	<ul class='children'>
<li class="page_item page-item-1441"><a href="https://maxkersten.nl/binary-analysis-course/common-techniques/general-techniques/">General techniques</a></li>
<li class="page_item page-item-3155"><a href="https://maxkersten.nl/binary-analysis-course/common-techniques/analysing-scripts/">Analysing scripts</a></li>
<li class="page_item page-item-3439"><a href="https://maxkersten.nl/binary-analysis-course/common-techniques/debugging-dot-net-binaries/">Debugging Dot Net binaries</a></li>
	</ul>
</li>
<li class="page_item page-item-744 menu-item-has-children"><a href="https://maxkersten.nl/binary-analysis-course/malware-analysis/">Malware analysis<span role="button" class="dropdown-menu-toggle" aria-expanded="false"></span></a>
	<ul class='children'>
<li class="page_item page-item-4305"><a href="https://maxkersten.nl/binary-analysis-course/malware-analysis/dot-net-rat/">Dot Net RAT</a></li>
<li class="page_item page-item-862"><a href="https://maxkersten.nl/binary-analysis-course/malware-analysis/android-sms-stealer/">Android SMS Stealer</a></li>
<li class="page_item page-item-1039"><a href="https://maxkersten.nl/binary-analysis-course/malware-analysis/lnk-isesteroids-powershell-dropper/">LNK &#038; ISESteroids Powershell dropper</a></li>
<li class="page_item page-item-1079"><a href="https://maxkersten.nl/binary-analysis-course/malware-analysis/emotet-droppers/">Emotet droppers</a></li>
<li class="page_item page-item-1193"><a href="https://maxkersten.nl/binary-analysis-course/malware-analysis/magecart/">Magecart</a></li>
<li class="page_item page-item-1785"><a href="https://maxkersten.nl/binary-analysis-course/malware-analysis/corona-ddos-bot/">Corona DDoS bot</a></li>
<li class="page_item page-item-2326"><a href="https://maxkersten.nl/binary-analysis-course/malware-analysis/azorult-loader-stages/">Azorult loader stages</a></li>
<li class="page_item page-item-2472"><a href="https://maxkersten.nl/binary-analysis-course/malware-analysis/emotet-javascript-downloader/">Emotet JavaScript downloader</a></li>
<li class="page_item page-item-2560"><a href="https://maxkersten.nl/binary-analysis-course/malware-analysis/corona-locker/">Corona Locker</a></li>
<li class="page_item page-item-3016"><a href="https://maxkersten.nl/binary-analysis-course/malware-analysis/rezer0v4-loader/">ReZer0v4 loader</a></li>
<li class="page_item page-item-3913"><a href="https://maxkersten.nl/binary-analysis-course/malware-analysis/dumping-whispergates-wiper-from-an-eazfuscator-obfuscated-loader/">Dumping WhisperGate&#8217;s wiper from an Eazfuscator obfuscated loader</a></li>
	</ul>
</li>
<li class="page_item page-item-2046 menu-item-has-children current-menu-ancestor current-menu-parent"><a href="https://maxkersten.nl/binary-analysis-course/analysis-scripts/">Analysis scripts<span role="button" class="dropdown-menu-toggle" aria-expanded="false"></span></a>
	<ul class='children'>
<li class="page_item page-item-1007"><a href="https://maxkersten.nl/binary-analysis-course/analysis-scripts/automatic-string-formatting-deobfuscation/">PowerShell string formatting deobfuscation</a></li>
<li class="page_item page-item-2764"><a href="https://maxkersten.nl/binary-analysis-course/analysis-scripts/javascript-string-concatenation-deobfuscation/">JavaScript string concatenation deobfuscation</a></li>
<li class="page_item page-item-3061"><a href="https://maxkersten.nl/binary-analysis-course/analysis-scripts/automatic-rezer0-payload-and-configuration-extraction/">Automatic ReZer0 payload and configuration extraction</a></li>
<li class="page_item page-item-3206"><a href="https://maxkersten.nl/binary-analysis-course/analysis-scripts/ghidra-script-to-decrypt-strings-in-amadey-1-09/">Ghidra script to decrypt strings in Amadey 1.09</a></li>
<li class="page_item page-item-3521 current-menu-item"><a href="https://maxkersten.nl/binary-analysis-course/analysis-scripts/ghidra-script-to-decrypt-a-string-array-in-xor-ddos/">Ghidra script to decrypt a string array in XOR DDoS</a></li>
<li class="page_item page-item-3974"><a href="https://maxkersten.nl/binary-analysis-course/analysis-scripts/ghidra-script-to-handle-stack-strings/">Ghidra script to handle stack strings</a></li>
	</ul>
</li>
<li class="page_item page-item-3978 menu-item-has-children"><a href="https://maxkersten.nl/binary-analysis-course/malware-snippets/">Malware snippets<span role="button" class="dropdown-menu-toggle" aria-expanded="false"></span></a>
	<ul class='children'>
<li class="page_item page-item-3982"><a href="https://maxkersten.nl/binary-analysis-course/malware-snippets/self-deletion/">Self Deletion</a></li>
<li class="page_item page-item-3984"><a href="https://maxkersten.nl/binary-analysis-course/malware-snippets/api-hashing/">API Hashing</a></li>
	</ul>
</li>
<li class="page_item page-item-1250 menu-item-has-children"><a href="https://maxkersten.nl/binary-analysis-course/obtaining-samples/">Obtaining samples<span role="button" class="dropdown-menu-toggle" aria-expanded="false"></span></a>
	<ul class='children'>
<li class="page_item page-item-1253"><a href="https://maxkersten.nl/binary-analysis-course/obtaining-samples/searching-samples/">Searching samples</a></li>
	</ul>
</li>
<li class="page_item page-item-2096 menu-item-has-children"><a href="https://maxkersten.nl/binary-analysis-course/documentation/">Documentation<span role="button" class="dropdown-menu-toggle" aria-expanded="false"></span></a>
	<ul class='children'>
<li class="page_item page-item-2099"><a href="https://maxkersten.nl/binary-analysis-course/documentation/article-structure/">Article structure</a></li>
	</ul>
</li>
<li class="page_item page-item-480"><a href="https://maxkersten.nl/binary-analysis-course/resources/">Resources</a></li>
<li class="page_item page-item-473"><a href="https://maxkersten.nl/binary-analysis-course/faq/">FAQ</a></li>
<li class="page_item page-item-1490 menu-item-has-children"><a href="https://maxkersten.nl/binary-analysis-course/miscellaneous/">Miscellaneous<span role="button" class="dropdown-menu-toggle" aria-expanded="false"></span></a>
	<ul class='children'>
<li class="page_item page-item-1493"><a href="https://maxkersten.nl/binary-analysis-course/miscellaneous/a-year-in-review-2018-2019/">A year in review: 2018-2019</a></li>
<li class="page_item page-item-2697"><a href="https://maxkersten.nl/binary-analysis-course/miscellaneous/a-year-in-review-2019-2020/">A year in review: 2019-2020</a></li>
<li class="page_item page-item-3467"><a href="https://maxkersten.nl/binary-analysis-course/miscellaneous/a-year-in-review-2020-2021/">A year in review: 2020-2021</a></li>
<li class="page_item page-item-4031"><a href="https://maxkersten.nl/binary-analysis-course/miscellaneous/a-year-in-review-2021-2022/">A year in review: 2021-2022</a></li>
	</ul>
</li>
</ul>
</li>
<li class="page_item page-item-4353"><a href="https://maxkersten.nl/libras-ghidra-library/">Libra&#8217;s Ghidra Library</a></li>
<li class="page_item page-item-161 menu-item-has-children"><a href="https://maxkersten.nl/projects/">Projects<span role="button" class="dropdown-menu-toggle" aria-expanded="false"></span></a>
<ul class='children'>
<li class="page_item page-item-793"><a href="https://maxkersten.nl/projects/androidprojectcreator/">AndroidProjectCreator</a></li>
<li class="page_item page-item-3295 menu-item-has-children"><a href="https://maxkersten.nl/projects/m3-framework/">m3 framework<span role="button" class="dropdown-menu-toggle" aria-expanded="false"></span></a>
	<ul class='children'>
<li class="page_item page-item-3292"><a href="https://maxkersten.nl/projects/m3-framework/extending-m3/">Extending m3</a></li>
<li class="page_item page-item-3329"><a href="https://maxkersten.nl/projects/m3-framework/anubis-and-cerberus-explained/">Anubis and Cerberus explained</a></li>
	</ul>
</li>
<li class="page_item page-item-3128 menu-item-has-children"><a href="https://maxkersten.nl/projects/api-client-libraries/">API client libraries<span role="button" class="dropdown-menu-toggle" aria-expanded="false"></span></a>
	<ul class='children'>
<li class="page_item page-item-3351"><a href="https://maxkersten.nl/projects/api-client-libraries/hatching-triage-java-api-client/">Hatching Triage Java API client</a></li>
<li class="page_item page-item-3353"><a href="https://maxkersten.nl/projects/api-client-libraries/malshare-java-api-client/">MalShare Java API client</a></li>
<li class="page_item page-item-3700"><a href="https://maxkersten.nl/projects/api-client-libraries/malware-bazaar-java-api-client/">Malware Bazaar Java API client</a></li>
<li class="page_item page-item-4185"><a href="https://maxkersten.nl/projects/api-client-libraries/yaraify-java-api-client/">Yaraify Java API client</a></li>
	</ul>
</li>
<li class="page_item page-item-2876"><a href="https://maxkersten.nl/projects/malwaretheflag/">MalwareTheFlag</a></li>
<li class="page_item page-item-2145"><a href="https://maxkersten.nl/projects/responsible-disclosures/">Responsible Disclosures</a></li>
<li class="page_item page-item-2430"><a href="https://maxkersten.nl/projects/malpull/">MalPull</a></li>
<li class="page_item page-item-104 menu-item-has-children"><a href="https://maxkersten.nl/projects/capricorn/">Capricorn<span role="button" class="dropdown-menu-toggle" aria-expanded="false"></span></a>
	<ul class='children'>
<li class="page_item page-item-109"><a href="https://maxkersten.nl/projects/capricorn/changelog/">Changelog</a></li>
	</ul>
</li>
<li class="page_item page-item-2141 menu-item-has-children"><a href="https://maxkersten.nl/projects/archive/">Archive<span role="button" class="dropdown-menu-toggle" aria-expanded="false"></span></a>
	<ul class='children'>
<li class="page_item page-item-163"><a href="https://maxkersten.nl/projects/archive/shouldersurfer/">ShoulderSurfer</a></li>
<li class="page_item page-item-167"><a href="https://maxkersten.nl/projects/archive/stringer/">Stringer</a></li>
<li class="page_item page-item-16 menu-item-has-children"><a href="https://maxkersten.nl/projects/archive/gemini/">Gemini<span role="button" class="dropdown-menu-toggle" aria-expanded="false"></span></a>
		<ul class='children'>
<li class="page_item page-item-73"><a href="https://maxkersten.nl/projects/archive/gemini/changelog/">Changelog</a></li>
		</ul>
</li>
<li class="page_item page-item-35"><a href="https://maxkersten.nl/projects/archive/whitepapers/">Whitepapers</a></li>
	</ul>
</li>
</ul>
</li>
<li class="page_item page-item-4 menu-item-has-children"><a href="https://maxkersten.nl/about-me/">About me<span role="button" class="dropdown-menu-toggle" aria-expanded="false"></span></a>
<ul class='children'>
<li class="page_item page-item-2436"><a href="https://maxkersten.nl/about-me/news-and-conferences/">News and conferences</a></li>
<li class="page_item page-item-198"><a href="https://maxkersten.nl/about-me/privacy-policy/">Privacy Policy</a></li>
</ul>
</li>
		</ul>
	</div><!-- .main-nav -->
			</div><!-- .inside-navigation -->
	</nav><!-- #site-navigation -->
		
	<div id="page" class="hfeed site grid-container container grid-parent">
		<div id="content" class="site-content">
			
	<div id="primary" class="content-area grid-parent mobile-grid-100 grid-75 tablet-grid-75">
		<main id="main" class="site-main">
						
				
<article id="post-3521" class="post-3521 page type-page status-publish" itemtype='http://schema.org/CreativeWork' itemscope='itemscope'>
	<div class="inside-article">
				
					<header class="entry-header">
				<h1 class="entry-title" itemprop="headline">Ghidra script to decrypt a string array in XOR DDoS</h1>			</header><!-- .entry-header -->
				
				<div class="entry-content" itemprop="text">
			<p><em>This article was published on the 25th of July 2021. This article was updated on the 8th of December 2021.</em></p>
<p>The XOR DDoS bot, an ELF file for Linux distributions, is used to perform DDoS attacks. This article focuses on a rather small segment of the malware family: the internally used encrypted string array, and its decryption. This article will dive into arrays, the decryption loop, the decryption routine, and the creation of a Ghidra script in Java to automate this process.</p>
<h2>Table of contents</h2>
<ul>
<li><a href="#the-sample">The sample</a></li>
<li><a href="#used-tooling">Used tooling</a></li>
<li><a href="#arrays-in-theory">Arrays in theory</a></li>
<li><a href="#understanding-the-loop">Understanding the loop</a></li>
<li><a href="#remaking-the-decryption-routine">Remaking the decryption routine</a></li>
<li><a href="#writing-the-ghidra-script">Writing the Ghidra script</a></li>
<li><a href="#conclusion">Conclusion</a></li>
<li><a href="#the-complete-script">The complete script</a></li>
</ul>
<p><a name ="the-sample"></a></p>
<h2><a href="#the-sample">The sample</a></h2>
<p>The sample can be downloaded from <a href="https://virusbay.io/sample/browse/349456ecaa1380a142f15810a8260378">VirusBay</a>, <a href="https://bazaar.abuse.ch/sample/0f00c2e074c6284c556040012ef23357853ccac4ad1373d1dea683562dc24bca/">Malware Bazaar</a>, or <a href="https://malshare.com/sample.php?action=detail&#038;hash=349456ecaa1380a142f15810a8260378">MalShare</a>. The hashes are given below.</p>
<pre>
MD5: 349456ecaa1380a142f15810a8260378
SHA-1: 02dd15ecdeedefd7a2f82ba0df38703a74489af3
SHA-256: 0f00c2e074c6284c556040012ef23357853ccac4ad1373d1dea683562dc24bca
Size: 625889 bytes
</pre>
<p><a name ="used-tooling"></a></p>
<h2><a href="#used-tooling">Used tooling</a></h2>
<p>The analysis in this article has been done with a self-built version of <a href="https://ghidra-sre.org/">Ghidra</a>. The used sources date back to the first of June 2021. The used for-loop that is seen later in this article is displayed as a while-loop in earlier Ghidra versions. Other than that, no significant changes are present between versions. All analysis options have been used when analysing the file.</p>
<p><a name ="arrays-in-theory"></a></p>
<h2><a href="#arrays-in-theory">Arrays in theory</a></h2>
<p>Arrays, disregarding of the type, are structured the same way. The first element, which resides at index zero, marks the start of the array, followed by the other elements if present. To obtain the element for a given index, the size of each element is multiplied by the index number, which is then added to the address of the first element. The code below provides an example in pseudo code, where <em>T</em> is the element&#8217;s type.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="c"><pre class="de1"><span class="kw4">long</span> elementAddress <span class="sy0">=</span> arrayBase <span class="sy0">+</span> <span class="br0">&#40;</span><span class="kw4">sizeof</span><span class="br0">&#40;</span>T<span class="br0">&#41;</span> <span class="sy0">*</span> i<span class="br0">&#41;</span><span class="sy0">;</span></pre></div></div></div></div></div></div></div>


<p>When dealing with strings, the length can be variable, as not all strings have the same length. In some cases, strings with a fixed length are used, this uses more memory than is required, but makes it easy to find the element for a given index. Alternatively, the string&#8217;s length can be calculated using <a href="https://www.tutorialspoint.com/c_standard_library/c_function_strlen.htm">strlen</a>, which is then used instead of the <a href="https://en.wikipedia.org/wiki/Sizeof">sizeof</a> function. This requires more CPU cycles, as the string length needs to be calculated, but it uses less memory.</p>
<p><a name ="understanding-the-loop"></a></p>
<h2><a href="#understanding-the-loop">Understanding the loop</a></h2>
<p>The given sample contains symbols, which make the analysis easier. The main function is already called <em>main</em>, and contains the decryption loop for the string array at <em>0804d12a</em>. The complete loop&#8217;s assembly code is given below.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="asm"><pre class="de1">	 <span class="kw1">MOV</span>        <span class="kw6">dword</span> ptr <span class="br0">&#91;</span><span class="kw4">EBP</span> <span class="sy1">+</span> local_3c<span class="br0">&#93;</span><span class="sy1">,</span><span class="nu0">0x0</span>
	 <span class="kw1">JMP</span>        LAB_0804d12e
 LAB_0804d108
	 <span class="kw1">MOV</span>        <span class="kw4">EDX</span><span class="sy1">,</span><span class="kw6">dword</span> ptr <span class="br0">&#91;</span><span class="kw4">EBP</span> <span class="sy1">+</span> local_3c<span class="br0">&#93;</span>
	 <span class="kw1">MOV</span>        <span class="kw4">EAX</span><span class="sy1">,</span><span class="kw4">EDX</span>
	 <span class="kw1">SHL</span>        <span class="kw4">EAX</span><span class="sy1">,</span><span class="nu0">0x2</span>
	 <span class="kw1">ADD</span>        <span class="kw4">EAX</span><span class="sy1">,</span><span class="kw4">EDX</span>
	 <span class="kw1">SHL</span>        <span class="kw4">EAX</span><span class="sy1">,</span><span class="nu0">0x2</span>
	 <span class="kw1">ADD</span>        <span class="kw4">EAX</span><span class="sy1">,</span>daemonname
	 <span class="kw1">MOV</span>        <span class="kw6">dword</span> ptr <span class="br0">&#91;</span><span class="kw4">ESP</span> <span class="sy1">+</span> local_3dec<span class="br0">&#93;</span><span class="sy1">,</span><span class="nu0">0x14</span>
	 <span class="kw1">MOV</span>        <span class="kw6">dword</span> ptr <span class="br0">&#91;</span><span class="kw4">ESP</span><span class="br0">&#93;</span>=&gt;local_3df0<span class="sy1">,</span><span class="kw4">EAX</span>
	 <span class="kw1">CALL</span>       encrypt_code
	 <span class="kw1">ADD</span>        <span class="kw6">dword</span> ptr <span class="br0">&#91;</span><span class="kw4">EBP</span> <span class="sy1">+</span> local_3c<span class="br0">&#93;</span><span class="sy1">,</span><span class="nu0">0x1</span>
 LAB_0804d12e
	 <span class="kw1">CMP</span>        <span class="kw6">dword</span> ptr <span class="br0">&#91;</span><span class="kw4">EBP</span> <span class="sy1">+</span> local_3c<span class="br0">&#93;</span><span class="sy1">,</span><span class="nu0">0x16</span>
	 <span class="kw1">JBE</span>        LAB_0804d108</pre></div></div></div></div></div></div></div>


<p>The loop, like most loops in assembly languages, starts with the initialisation of a variable to store the count in. This variable is commonly named <em>i</em> when named by programmers. In this case, the variable is named <em>local_3c</em> by Ghidra. The naming scheme of Ghidra is based on the location. A jump is then made downwards, where the value of <em>local_3c</em> is compared to <em>0x16</em>, or <em>22</em> in decimal. If the value of <em>local_3c</em> is below or equal, the jump upwards is taken. The two labels, <em>LAB_0804d108</em> and <em>LAB_0804d12e</em>, can be renamed to <em>loop_body</em> and <em>loop_compare</em> respectively to increase the readability. The variable <em>local_3c</em> can be renamed to <em>i</em> for further clarification.</p>
<p>To understand the loop&#8217;s body, each instruction will be explained below, in the usual step-by-step manner. At first, the value of <em>i</em>, which resides at <em>EBP + i</em> is moved into <em>EDX</em>, after which it is also moved into <em>EAX</em>.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="asm"><pre class="de1"><span class="kw1">MOV</span>        <span class="kw4">EDX</span><span class="sy1">,</span><span class="kw6">dword</span> ptr <span class="br0">&#91;</span><span class="kw4">EBP</span> <span class="sy1">+</span> i<span class="br0">&#93;</span>
<span class="kw1">MOV</span>        <span class="kw4">EAX</span><span class="sy1">,</span><span class="kw4">EDX</span></pre></div></div></div></div></div></div></div>


<p>Next, the value in <em>EAX</em> is shifted left by two bits. A left shift of <em>N</em> equals two to the power of <em>N</em>. In this case, it means that <em>EAX</em> is multiplied by four.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="asm"><pre class="de1"><span class="kw1">SHL</span>        <span class="kw4">EAX</span><span class="sy1">,</span><span class="nu0">0x2</span></pre></div></div></div></div></div></div></div>


<p>The value of <em>i</em> is then added to <em>EAX</em>, after which it is multiplied by four again.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="asm"><pre class="de1"><span class="kw1">ADD</span>        <span class="kw4">EAX</span><span class="sy1">,</span><span class="kw4">EDX</span>
<span class="kw1">SHL</span>        <span class="kw4">EAX</span><span class="sy1">,</span><span class="nu0">0x2</span></pre></div></div></div></div></div></div></div>


<p>The variable named <em>daemonname</em> refers to the string array, although Ghidra does not recognise the type due to the fact that it contains the encrypted strings. The base address of the array is then added to <em>EAX</em>.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="asm"><pre class="de1"><span class="kw1">ADD</span>        <span class="kw4">EAX</span><span class="sy1">,</span>daemonname</pre></div></div></div></div></div></div></div>


<p>In short, <em>EAX</em> contains the array&#8217;s base address and the offset based on <em>i</em>.</p>
<p>The next three instructions push two arguments on the stack, after which the decryption function (named <em>encrypt_code</em>) is called. The first argument, as they are read from the stack in the reverse order, is equal to <em>EAX</em>, which contains the current element&#8217;s address. The second argument is equal to <em>0x14</em>, or <em>20</em> in decimal. As such, it becomes apparent that this string array is based on strings with a fixed length, although this does not mean that every string is 20 bytes in size. Rather, the length of each string is between 0 and 19, given that each string is terminated with a null byte.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="asm"><pre class="de1"><span class="kw1">MOV</span>        <span class="kw6">dword</span> ptr <span class="br0">&#91;</span><span class="kw4">ESP</span> <span class="sy1">+</span> local_3dec<span class="br0">&#93;</span><span class="sy1">,</span><span class="nu0">0x14</span>
<span class="kw1">MOV</span>        <span class="kw6">dword</span> ptr <span class="br0">&#91;</span><span class="kw4">ESP</span><span class="br0">&#93;</span>=&gt;local_3df0<span class="sy1">,</span><span class="kw4">EAX</span>
<span class="kw1">CALL</span>       encrypt_code</pre></div></div></div></div></div></div></div>


<p>At last, the value of <em>i</em> is incremented with one.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="asm"><pre class="de1"><span class="kw1">ADD</span>        <span class="kw6">dword</span> ptr <span class="br0">&#91;</span><span class="kw4">EBP</span> <span class="sy1">+</span> i<span class="br0">&#93;</span><span class="sy1">,</span><span class="nu0">0x1</span></pre></div></div></div></div></div></div></div>


<p>The calculation for the offset of the next element can be simplified as follows.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="java"><pre class="de1"><span class="kw1">for</span> <span class="br0">&#40;</span><span class="kw4">int</span> i <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> i <span class="sy0">&lt;=</span> 0x16<span class="sy0">;</span> i<span class="sy0">++</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	<span class="kw4">int</span> result <span class="sy0">=</span> i<span class="sy0">;</span>
	result <span class="sy0">=</span> result <span class="sy0">*</span> <span class="nu0">4</span><span class="sy0">;</span>
	result <span class="sy0">+=</span> i<span class="sy0">;</span>
	result <span class="sy0">=</span> result <span class="sy0">*</span> <span class="nu0">4</span><span class="sy0">;</span>
	<span class="kw3">System</span>.<span class="me1">out</span>.<span class="me1">println</span><span class="br0">&#40;</span>result<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></div></div></div></div></div></div></div>


<p>Further simplified, one can rewrite the code above as follows.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="java"><pre class="de1"><span class="kw1">for</span> <span class="br0">&#40;</span><span class="kw4">int</span> i <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> i <span class="sy0">&lt;=</span> 0x16<span class="sy0">;</span> i<span class="sy0">++</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
	<span class="kw4">int</span> result <span class="sy0">=</span> <span class="br0">&#40;</span><span class="br0">&#40;</span>i <span class="sy0">*</span> <span class="nu0">4</span><span class="br0">&#41;</span> <span class="sy0">+</span> i<span class="br0">&#41;</span> <span class="sy0">*</span> <span class="nu0">4</span><span class="sy0">;</span>
	<span class="kw3">System</span>.<span class="me1">out</span>.<span class="me1">println</span><span class="br0">&#40;</span>result<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></div></div></div></div></div></div></div>


<p>Since multiplication is the same as repeated addition, one can even further simplify the formula. At first, <em>i</em> is multiplied by four, after which <em>i</em> is added. This can be simplified by stating that <em>i</em> is multiplied by five. The outcome of this is multiplied by four. As such, the original value is multiplied by four, after which its multiplied by five. In total, <em>i</em> is multiplied by (four times five) twenty. The code below shows the simplification in several steps.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="java"><pre class="de1"><span class="br0">&#40;</span><span class="br0">&#40;</span>i <span class="sy0">*</span> <span class="nu0">4</span><span class="br0">&#41;</span> <span class="sy0">+</span> i<span class="br0">&#41;</span> <span class="sy0">*</span> <span class="nu0">4</span><span class="sy0">;</span>
<span class="br0">&#40;</span>i <span class="sy0">*</span> <span class="nu0">5</span><span class="br0">&#41;</span> <span class="sy0">*</span> <span class="nu0">4</span>
i <span class="sy0">*</span> <span class="nu0">20</span></pre></div></div></div></div></div></div></div>


<p>The likely reason as to why the code looks like this, is the efficiency of the shift instructions, when compared to the multiplication instructions. The compiler likely chose to replace a single multiplication with less resource intensive instructions.</p>
<p>When looking at the <em>main</em> function in Ghidra&#8217;s decompiler, one can find the string array decryption loop at line 100, 101, and 102. The excerpt is given below. Note that the refactoring of the variables in the assembly code is reflected in this code.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="c"><pre class="de1"><span class="kw1">for</span> <span class="br0">&#40;</span>i <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> i <span class="sy0">&lt;</span> <span class="nu12">0x17</span><span class="sy0">;</span> i <span class="sy0">=</span> i <span class="sy0">+</span> <span class="nu0">1</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
  encrypt_code<span class="br0">&#40;</span>daemonname <span class="sy0">+</span> i <span class="sy0">*</span> <span class="nu12">0x14</span><span class="sy0">,</span><span class="nu12">0x14</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></div></div></div></div></div></div></div>


<p>Note that this loop displays <em>0x17</em> with regards to the amount of iterations, rather than <em>0x16</em>. The condition for the loop is <em>less than</em>, rather than <em>less than or equal</em>, meaning the value needs to be incremented with one.</p>
<p>Fully understanding the code, and how it is generated, will be useful when creating a Ghidra script later on.</p>
<p><a name ="remaking-the-decryption-routine"></a></p>
<h2><a href="#remaking-the-decryption-routine">Remaking the decryption routine</a></h2>
<p>The decryption function, named <em>encrypt_code</em>, is used to decrypt a given encrypted string with a given length. The function is given below.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="c"><pre class="de1">byte <span class="sy0">*</span> encrypt_code<span class="br0">&#40;</span>byte <span class="sy0">*</span>param_1<span class="sy0">,</span><span class="kw4">int</span> param_2<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  byte <span class="sy0">*</span>local_10<span class="sy0">;</span>
  <span class="kw4">int</span> local_c<span class="sy0">;</span>
&nbsp;
  local_10 <span class="sy0">=</span> param_1<span class="sy0">;</span>
  <span class="kw1">for</span> <span class="br0">&#40;</span>local_c <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> local_c <span class="sy0">&lt;</span> param_2<span class="sy0">;</span> local_c <span class="sy0">=</span> local_c <span class="sy0">+</span> <span class="nu0">1</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
    <span class="sy0">*</span>local_10 <span class="sy0">=</span> <span class="sy0">*</span>local_10 <span class="sy0">^</span> xorkeys<span class="br0">&#91;</span>local_c <span class="sy0">%</span> <span class="nu12">0x10</span><span class="br0">&#93;</span><span class="sy0">;</span>
    local_10 <span class="sy0">=</span> local_10 <span class="sy0">+</span> <span class="nu0">1</span><span class="sy0">;</span>
  <span class="br0">&#125;</span>
  <span class="kw1">return</span> param_1<span class="sy0">;</span>
<span class="br0">&#125;</span></pre></div></div></div></div></div></div></div>


<p>The first argument (named <em>param_1</em>) can be renamed into <em>input</em>, whereas the second argument (named <em>param_2</em>) can be renamed into <em>length</em>. The variable named <em>local_10</em> is a copy of the given input, as it points to the same value. As such, it can be renamed into <em>inputCopy</em>. The loop uses <em>local_c</em> as its counter, which can be renamed into <em>i</em>. The refactored code is given below.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="c"><pre class="de1">byte <span class="sy0">*</span> encrypt_code<span class="br0">&#40;</span>byte <span class="sy0">*</span>input<span class="sy0">,</span><span class="kw4">int</span> length<span class="br0">&#41;</span>
<span class="br0">&#123;</span>
  byte <span class="sy0">*</span>inputCopy<span class="sy0">;</span>
  <span class="kw4">int</span> i<span class="sy0">;</span>
&nbsp;
  inputCopy <span class="sy0">=</span> input<span class="sy0">;</span>
  <span class="kw1">for</span> <span class="br0">&#40;</span>i <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> i <span class="sy0">&lt;</span> length<span class="sy0">;</span> i <span class="sy0">=</span> i <span class="sy0">+</span> <span class="nu0">1</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
    <span class="sy0">*</span>inputCopy <span class="sy0">=</span> <span class="sy0">*</span>inputCopy <span class="sy0">^</span> xorkeys<span class="br0">&#91;</span>i <span class="sy0">%</span> <span class="nu12">0x10</span><span class="br0">&#93;</span><span class="sy0">;</span>
    inputCopy <span class="sy0">=</span> inputCopy <span class="sy0">+</span> <span class="nu0">1</span><span class="sy0">;</span>
  <span class="br0">&#125;</span>
  <span class="kw1">return</span> input<span class="sy0">;</span>
<span class="br0">&#125;</span></pre></div></div></div></div></div></div></div>


<p>The variable <em>xorkeys</em> is a string, although Ghidra does not recognise it as such. Changing the type, using <em>T</em> as a hotkey in the disassembly view, will display its content. Alternatively, one can also get the raw value of the bytes instead. The key equals <em>BB2FA36AAA9541F0</em>.</p>
<p>When rewriting the decryption function in Java, there is one more more thing to take into account. Strings in C end with a null byte, but when using a byte array to create a string in Java, this byte is to be omitted. As not all strings are equal to the predefined length, a check is to be included to break the loop when the null byte is encountered. When breaking the loop, the bytes that have been decrypted thus far are to be used to create a new string. The recreated function is given below.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="java"><pre class="de1"><span class="kw1">private</span> <span class="kw3">String</span> decrypt<span class="br0">&#40;</span><span class="kw4">byte</span><span class="br0">&#91;</span><span class="br0">&#93;</span> input, <span class="kw4">char</span><span class="br0">&#91;</span><span class="br0">&#93;</span> key<span class="br0">&#41;</span> <span class="br0">&#123;</span>
  <span class="kw4">byte</span><span class="br0">&#91;</span><span class="br0">&#93;</span> output <span class="sy0">=</span> <span class="kw1">new</span> <span class="kw4">byte</span><span class="br0">&#91;</span>input.<span class="me1">length</span><span class="br0">&#93;</span><span class="sy0">;</span>
&nbsp;
  <span class="kw1">for</span> <span class="br0">&#40;</span><span class="kw4">int</span> i <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> i <span class="sy0">&lt;</span> input.<span class="me1">length</span><span class="sy0">;</span> i<span class="sy0">++</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
    <span class="kw1">if</span><span class="br0">&#40;</span>input<span class="br0">&#91;</span>i<span class="br0">&#93;</span> <span class="sy0">==</span> <span class="nu0">0</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
      <span class="kw1">break</span><span class="sy0">;</span>
    <span class="br0">&#125;</span>
    output<span class="br0">&#91;</span>i<span class="br0">&#93;</span> <span class="sy0">=</span> <span class="br0">&#40;</span><span class="kw4">byte</span><span class="br0">&#41;</span> <span class="br0">&#40;</span>input<span class="br0">&#91;</span>i<span class="br0">&#93;</span> <span class="sy0">^</span> key<span class="br0">&#91;</span>i <span class="sy0">%</span> 0x10<span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span>
  <span class="br0">&#125;</span>
  <span class="kw1">return</span> <span class="kw1">new</span> <span class="kw3">String</span><span class="br0">&#40;</span>output<span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></div></div></div></div></div></div></div>


<p>Note that the key is passed as an argument to the function, as this will come in useful when creating the script. By passing the value as an argument to the function, one can keep all variables in a single place within the script.</p>
<p><a name ="writing-the-ghidra-script"></a></p>
<h2><a href="#writing-the-ghidra-script">Writing the Ghidra script</a></h2>
<p>The script itself uses the decryption function that was created in the previous step. To decrypt the string array, several variables need to be initialised first. The decryption <em>key</em>, as is required by the decryption function, as well as the location of the array (defined as <em>arrayBase</em>), the size of a single element (defined as <em>elementSize</em>), and the amount of elements of the array (defined as <em>arraySize</em>).</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="java"><pre class="de1"><span class="kw4">char</span><span class="br0">&#91;</span><span class="br0">&#93;</span> key <span class="sy0">=</span> <span class="st0">&quot;BB2FA36AAA9541F0&quot;</span>.<span class="me1">toCharArray</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="kw4">int</span> arrayBase <span class="sy0">=</span> 0x080cf1c0<span class="sy0">;</span>
<span class="kw4">int</span> elementSize <span class="sy0">=</span> 0x14<span class="sy0">;</span>
<span class="kw4">int</span> arraySize <span class="sy0">=</span> 0x17<span class="sy0">;</span></pre></div></div></div></div></div></div></div>


<p>To get the value of each element, one needs to multiply the loop count with the predefined element size,  after which the array&#8217;s base address is added. To get the data from the sample, one can use the <a href="https://ghidra.re/ghidra_docs/api/ghidra/program/flatapi/FlatProgramAPI.html#getBytes(ghidra.program.model.address.Address,int)">getBytes</a> function, which requires an <a href="https://ghidra.re/ghidra_docs/api/ghidra/program/model/address/package-summary.html">Address</a> to know where to start reading the bytes from, and an integer to know how many bytes should be read. To convert an integer, long, or string to an Address object, one needs to use the <a href="https://ghidra.re/ghidra_docs/api/ghidra/program/flatapi/FlatProgramAPI.html#toAddr(int)">toAddr</a> function.</p>
<p>The obtained bytes are decrypted by the decryption function, along with the decryption key. The result is then printed to Ghidra&#8217;s console.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="java"><pre class="de1"><span class="kw1">try</span> <span class="br0">&#123;</span>
  <span class="kw1">for</span> <span class="br0">&#40;</span><span class="kw4">int</span> i <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> i <span class="sy0">&lt;</span> arraySize<span class="sy0">;</span> i<span class="sy0">++</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
	<span class="kw4">int</span> offset <span class="sy0">=</span> i <span class="sy0">*</span> elementSize<span class="sy0">;</span>
	<span class="kw4">int</span> location <span class="sy0">=</span> arrayBase <span class="sy0">+</span> offset<span class="sy0">;</span>
	<span class="kw4">byte</span><span class="br0">&#91;</span><span class="br0">&#93;</span> input <span class="sy0">=</span> getBytes<span class="br0">&#40;</span>toAddr<span class="br0">&#40;</span>location<span class="br0">&#41;</span>, elementSize<span class="br0">&#41;</span><span class="sy0">;</span>
	<span class="kw3">String</span> decrypted <span class="sy0">=</span> decrypt<span class="br0">&#40;</span>input, key<span class="br0">&#41;</span><span class="sy0">;</span>
	println<span class="br0">&#40;</span>decrypted<span class="br0">&#41;</span><span class="sy0">;</span>
  <span class="br0">&#125;</span>
<span class="br0">&#125;</span> <span class="kw1">catch</span> <span class="br0">&#40;</span>MemoryAccessException e<span class="br0">&#41;</span> <span class="br0">&#123;</span>
  e.<span class="me1">printStackTrace</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
  println<span class="br0">&#40;</span><span class="st0">&quot;<span class="es0">\n</span>A memory access exception occurred, please refer to the stacktrace above for more information&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre></div></div></div></div></div></div></div>


<p>In the case of an error with the <em>getBytes</em> function, a <em>MemoryAccessException</em> is thrown. The image below shows the output of the script once its execution has finished.</p>
<p><img fetchpriority="high" decoding="async" src="https://maxkersten.nl/wp-content/uploads/2021/07/xorddos_array_decryption.png" alt="" width="351" height="463" class="alignnone size-full wp-image-3546" srcset="https://maxkersten.nl/wp-content/uploads/2021/07/xorddos_array_decryption.png 351w, https://maxkersten.nl/wp-content/uploads/2021/07/xorddos_array_decryption-227x300.png 227w" sizes="(max-width: 351px) 100vw, 351px" /></p>
<p><a name ="conclusion"></a></p>
<h2><a href="#conclusion">Conclusion</a></h2>
<p>Decrypting content from a sample provides a lot more insight as to what the sample does, especially because these strings are concealed for a reason. In some cases, bots within the same family reuse the  encryption key. If the key changes, it is easy to replace it in the script, or make use of a dialog in the script that requests the key once executed. </p>
<p>Understanding how to easily access variables and memory in a script in Ghidra is helpful when analysing any sample. Given that some code segments are easy to reuse, it is useful to create scripts that are made up of easily reusable functions.</p>
<p><a name ="the-complete-script"></a></p>
<h2><a href="#the-complete-script">The complete script</a></h2>
<p>The complete script, including documentation, is given below. Note the hardcoded key, element length, and array length. For more information on how to avoid hardcoding values in a script, one can visit the <a href="https://maxkersten.nl/binary-analysis-course/analysis-scripts/ghidra-script-to-decrypt-strings-in-amadey-1-09/">Amadey string decryption script</a> article.</p>


<div class="wp-geshi-highlight-wrap5"><div class="wp-geshi-highlight-wrap4"><div class="wp-geshi-highlight-wrap3"><div class="wp-geshi-highlight-wrap2"><div class="wp-geshi-highlight-wrap"><div class="wp-geshi-highlight"><div class="java"><pre class="de1"><span class="co1">//This script is used to decrypt a string array within the XOR DDoS bot. Note that it the array's location, element size, and array size are hardcoded in the script.</span>
<span class="co1">//@author Max 'Libra' Kersten (https://maxkersten.nl, @Libranalysis)</span>
<span class="co1">//@category string array decryption</span>
<span class="co1">//@keybinding</span>
<span class="co1">//@menupath</span>
<span class="co1">//@toolbar</span>
&nbsp;
<span class="kw1">import</span> <span class="co2">ghidra.app.script.GhidraScript</span><span class="sy0">;</span>
<span class="kw1">import</span> <span class="co2">ghidra.program.model.mem.MemoryAccessException</span><span class="sy0">;</span>
&nbsp;
<span class="kw1">public</span> <span class="kw1">class</span> xorddos_array_decryption <span class="kw1">extends</span> GhidraScript <span class="br0">&#123;</span>
&nbsp;
  <span class="co3">/**
   * This function is called by Ghidra, as such it is the entry into the script
   */</span>
  @Override
  <span class="kw1">protected</span> <span class="kw4">void</span> run<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="kw1">throws</span> <span class="kw3">Exception</span> <span class="br0">&#123;</span>
    <span class="co1">//The hardcoded decryption key, works for numerous samples, but this script is based on 0f00c2e074c6284c556040012ef23357853ccac4ad1373d1dea683562dc24bca</span>
    <span class="kw4">char</span><span class="br0">&#91;</span><span class="br0">&#93;</span> key <span class="sy0">=</span> <span class="st0">&quot;BB2FA36AAA9541F0&quot;</span>.<span class="me1">toCharArray</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    <span class="co1">//The location of the array's base address, which resides at index 0</span>
    <span class="kw4">int</span> arrayBase <span class="sy0">=</span> 0x080cf1c0<span class="sy0">;</span>
    <span class="co1">//The size of each element within the array</span>
    <span class="kw4">int</span> elementSize <span class="sy0">=</span> 0x14<span class="sy0">;</span>
    <span class="co1">//The amount of elements in the array</span>
    <span class="kw4">int</span> arraySize <span class="sy0">=</span> 0x17<span class="sy0">;</span>
    <span class="kw1">try</span> <span class="br0">&#123;</span>
      <span class="co1">//Since the assembly code uses a Jump Below or Equal instruction to compare i to 0x16, the loop needs to iterate 0x17 times to cover the complete array</span>
      <span class="kw1">for</span> <span class="br0">&#40;</span><span class="kw4">int</span> i <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> i <span class="sy0">&lt;</span> arraySize<span class="sy0">;</span> i<span class="sy0">++</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
        <span class="co1">//Declare the offset from the array base (meaning the size of each element times the element that is selected)</span>
        <span class="kw4">int</span> offset <span class="sy0">=</span> i <span class="sy0">*</span> elementSize<span class="sy0">;</span>
        <span class="co1">//Declare the location within the program</span>
        <span class="kw4">int</span> location <span class="sy0">=</span> arrayBase <span class="sy0">+</span> offset<span class="sy0">;</span>
        <span class="co1">//Get the bytes for one element at the given location</span>
        <span class="kw4">byte</span><span class="br0">&#91;</span><span class="br0">&#93;</span> input <span class="sy0">=</span> getBytes<span class="br0">&#40;</span>toAddr<span class="br0">&#40;</span>location<span class="br0">&#41;</span>, elementSize<span class="br0">&#41;</span><span class="sy0">;</span>
        <span class="co1">//Decrypt the given data using the given key</span>
        <span class="kw3">String</span> decrypted <span class="sy0">=</span> decrypt<span class="br0">&#40;</span>input, key<span class="br0">&#41;</span><span class="sy0">;</span>
        <span class="co1">//Print the decrypted string</span>
        println<span class="br0">&#40;</span>decrypted<span class="br0">&#41;</span><span class="sy0">;</span>
      <span class="br0">&#125;</span>
    <span class="br0">&#125;</span> <span class="kw1">catch</span> <span class="br0">&#40;</span>MemoryAccessException e<span class="br0">&#41;</span> <span class="br0">&#123;</span>
      <span class="co1">//Print the stacktrace, and provide further indication that an error occured</span>
      e.<span class="me1">printStackTrace</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
      println<span class="br0">&#40;</span><span class="st0">&quot;<span class="es0">\n</span>A memory access exception occurred, please refer to the stacktrace above for more information&quot;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    <span class="br0">&#125;</span>
  <span class="br0">&#125;</span>
&nbsp;
  <span class="co3">/**
   * Decrypts the given input using the given key and returns a new string with the decrypted content in it
   * @param input the data to decrypt
   * @param key the key to decrypt the given input
   * @return the decrypted input in the form of a string
   */</span>
  <span class="kw1">private</span> <span class="kw3">String</span> decrypt<span class="br0">&#40;</span><span class="kw4">byte</span><span class="br0">&#91;</span><span class="br0">&#93;</span> input, <span class="kw4">char</span><span class="br0">&#91;</span><span class="br0">&#93;</span> key<span class="br0">&#41;</span> <span class="br0">&#123;</span>
    <span class="co1">//Create a new byte array to store the decrypted data in</span>
    <span class="kw4">byte</span><span class="br0">&#91;</span><span class="br0">&#93;</span> output <span class="sy0">=</span> <span class="kw1">new</span> <span class="kw4">byte</span><span class="br0">&#91;</span>input.<span class="me1">length</span><span class="br0">&#93;</span><span class="sy0">;</span>
    <span class="co1">//Iterate over all bytes</span>
    <span class="kw1">for</span> <span class="br0">&#40;</span><span class="kw4">int</span> i <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> i <span class="sy0">&lt;</span> input.<span class="me1">length</span><span class="sy0">;</span> i<span class="sy0">++</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
      <span class="co1">//If the byte equals zero, the string is terminated, meaning the loop needs to be broken, which returns a string based on the data that has been decrypted thus far</span>
      <span class="kw1">if</span><span class="br0">&#40;</span>input<span class="br0">&#91;</span>i<span class="br0">&#93;</span> <span class="sy0">==</span> <span class="nu0">0</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
        <span class="kw1">break</span><span class="sy0">;</span>
      <span class="br0">&#125;</span>
      <span class="co1">//Decrypt the current byte</span>
      output<span class="br0">&#91;</span>i<span class="br0">&#93;</span> <span class="sy0">=</span> <span class="br0">&#40;</span><span class="kw4">byte</span><span class="br0">&#41;</span> <span class="br0">&#40;</span>input<span class="br0">&#91;</span>i<span class="br0">&#93;</span> <span class="sy0">^</span> key<span class="br0">&#91;</span>i <span class="sy0">%</span> 0x10<span class="br0">&#93;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    <span class="br0">&#125;</span>
    <span class="co1">//Once the loop breaks, or all iterations have finished, a new string is returned</span>
    <span class="kw1">return</span> <span class="kw1">new</span> <span class="kw3">String</span><span class="br0">&#40;</span>output<span class="br0">&#41;</span><span class="sy0">;</span>
  <span class="br0">&#125;</span>
<span class="br0">&#125;</span></pre></div></div></div></div></div></div></div>


<hr />
<p>To contact me, you can e-mail me at [info][at][maxkersten][dot][nl], or DM me on Twitter <a href="https://twitter.com/Libranalysis">@Libranalysis</a>.</p>
					</div><!-- .entry-content -->
			</div><!-- .inside-article -->
</article><!-- #post-## -->

				
								</main><!-- #main -->
	</div><!-- #primary -->

<div id="right-sidebar" itemtype="http://schema.org/WPSideBar" itemscope="itemscope" role="complementary" class="widget-area grid-25 tablet-grid-25 grid-parent sidebar">
	<div class="inside-right-sidebar">
				
		<aside id="recent-posts-2" class="widget inner-padding widget_recent_entries">
		<h4 class="widget-title">Recent Posts</h4>
		<ul>
											<li>
					<a href="https://maxkersten.nl/2024/11/27/ghidra-tip-0x08-scripting-with-microservices/">Ghidra Tip 0x08: Scripting with microservices</a>
									</li>
											<li>
					<a href="https://maxkersten.nl/2024/10/31/ghidra-tip-0x07-iterating-over-all-strings-in-a-program/">Ghidra Tip 0x07: Iterating over all strings in a Program</a>
									</li>
											<li>
					<a href="https://maxkersten.nl/2024/09/28/ghidra-tip-0x06-domainfiles-in-projects/">Ghidra Tip 0x06: DomainFiles in Projects</a>
									</li>
											<li>
					<a href="https://maxkersten.nl/2024/08/18/my-impression-of-tdi-2024-blackhat-usa-2024-and-defcon-32/">My impression of TDI 2024, BlackHat USA 2024 and DEFCON 32</a>
									</li>
											<li>
					<a href="https://maxkersten.nl/2024/06/30/ghidra-tip-0x05-headless-execution/">Ghidra Tip 0x05: Headless execution</a>
									</li>
					</ul>

		</aside><aside id="archives-2" class="widget inner-padding widget_archive"><h4 class="widget-title">Archives</h4>
			<ul>
					<li><a href='https://maxkersten.nl/2024/11/'>November 2024</a></li>
	<li><a href='https://maxkersten.nl/2024/10/'>October 2024</a></li>
	<li><a href='https://maxkersten.nl/2024/09/'>September 2024</a></li>
	<li><a href='https://maxkersten.nl/2024/08/'>August 2024</a></li>
	<li><a href='https://maxkersten.nl/2024/06/'>June 2024</a></li>
	<li><a href='https://maxkersten.nl/2024/05/'>May 2024</a></li>
	<li><a href='https://maxkersten.nl/2024/04/'>April 2024</a></li>
	<li><a href='https://maxkersten.nl/2024/03/'>March 2024</a></li>
	<li><a href='https://maxkersten.nl/2024/02/'>February 2024</a></li>
	<li><a href='https://maxkersten.nl/2023/08/'>August 2023</a></li>
	<li><a href='https://maxkersten.nl/2023/05/'>May 2023</a></li>
	<li><a href='https://maxkersten.nl/2023/04/'>April 2023</a></li>
	<li><a href='https://maxkersten.nl/2023/03/'>March 2023</a></li>
	<li><a href='https://maxkersten.nl/2023/02/'>February 2023</a></li>
	<li><a href='https://maxkersten.nl/2023/01/'>January 2023</a></li>
	<li><a href='https://maxkersten.nl/2022/12/'>December 2022</a></li>
	<li><a href='https://maxkersten.nl/2022/11/'>November 2022</a></li>
	<li><a href='https://maxkersten.nl/2022/10/'>October 2022</a></li>
	<li><a href='https://maxkersten.nl/2022/09/'>September 2022</a></li>
	<li><a href='https://maxkersten.nl/2022/08/'>August 2022</a></li>
	<li><a href='https://maxkersten.nl/2022/07/'>July 2022</a></li>
	<li><a href='https://maxkersten.nl/2022/06/'>June 2022</a></li>
	<li><a href='https://maxkersten.nl/2022/05/'>May 2022</a></li>
	<li><a href='https://maxkersten.nl/2022/04/'>April 2022</a></li>
	<li><a href='https://maxkersten.nl/2022/03/'>March 2022</a></li>
	<li><a href='https://maxkersten.nl/2022/02/'>February 2022</a></li>
	<li><a href='https://maxkersten.nl/2022/01/'>January 2022</a></li>
	<li><a href='https://maxkersten.nl/2021/12/'>December 2021</a></li>
	<li><a href='https://maxkersten.nl/2021/11/'>November 2021</a></li>
	<li><a href='https://maxkersten.nl/2021/10/'>October 2021</a></li>
	<li><a href='https://maxkersten.nl/2021/09/'>September 2021</a></li>
	<li><a href='https://maxkersten.nl/2021/08/'>August 2021</a></li>
	<li><a href='https://maxkersten.nl/2021/07/'>July 2021</a></li>
	<li><a href='https://maxkersten.nl/2021/06/'>June 2021</a></li>
	<li><a href='https://maxkersten.nl/2021/05/'>May 2021</a></li>
	<li><a href='https://maxkersten.nl/2021/04/'>April 2021</a></li>
	<li><a href='https://maxkersten.nl/2021/03/'>March 2021</a></li>
	<li><a href='https://maxkersten.nl/2021/02/'>February 2021</a></li>
	<li><a href='https://maxkersten.nl/2021/01/'>January 2021</a></li>
	<li><a href='https://maxkersten.nl/2020/12/'>December 2020</a></li>
	<li><a href='https://maxkersten.nl/2020/11/'>November 2020</a></li>
	<li><a href='https://maxkersten.nl/2020/10/'>October 2020</a></li>
	<li><a href='https://maxkersten.nl/2020/09/'>September 2020</a></li>
	<li><a href='https://maxkersten.nl/2020/08/'>August 2020</a></li>
	<li><a href='https://maxkersten.nl/2020/07/'>July 2020</a></li>
	<li><a href='https://maxkersten.nl/2020/06/'>June 2020</a></li>
	<li><a href='https://maxkersten.nl/2020/05/'>May 2020</a></li>
	<li><a href='https://maxkersten.nl/2020/04/'>April 2020</a></li>
	<li><a href='https://maxkersten.nl/2020/03/'>March 2020</a></li>
	<li><a href='https://maxkersten.nl/2020/02/'>February 2020</a></li>
	<li><a href='https://maxkersten.nl/2020/01/'>January 2020</a></li>
	<li><a href='https://maxkersten.nl/2019/12/'>December 2019</a></li>
	<li><a href='https://maxkersten.nl/2019/11/'>November 2019</a></li>
	<li><a href='https://maxkersten.nl/2019/10/'>October 2019</a></li>
	<li><a href='https://maxkersten.nl/2019/09/'>September 2019</a></li>
	<li><a href='https://maxkersten.nl/2019/08/'>August 2019</a></li>
	<li><a href='https://maxkersten.nl/2019/07/'>July 2019</a></li>
	<li><a href='https://maxkersten.nl/2019/06/'>June 2019</a></li>
	<li><a href='https://maxkersten.nl/2019/05/'>May 2019</a></li>
	<li><a href='https://maxkersten.nl/2019/04/'>April 2019</a></li>
	<li><a href='https://maxkersten.nl/2019/03/'>March 2019</a></li>
	<li><a href='https://maxkersten.nl/2019/02/'>February 2019</a></li>
	<li><a href='https://maxkersten.nl/2019/01/'>January 2019</a></li>
	<li><a href='https://maxkersten.nl/2018/12/'>December 2018</a></li>
	<li><a href='https://maxkersten.nl/2018/11/'>November 2018</a></li>
	<li><a href='https://maxkersten.nl/2018/10/'>October 2018</a></li>
	<li><a href='https://maxkersten.nl/2018/09/'>September 2018</a></li>
	<li><a href='https://maxkersten.nl/2018/08/'>August 2018</a></li>
	<li><a href='https://maxkersten.nl/2018/07/'>July 2018</a></li>
	<li><a href='https://maxkersten.nl/2018/06/'>June 2018</a></li>
	<li><a href='https://maxkersten.nl/2018/01/'>January 2018</a></li>
	<li><a href='https://maxkersten.nl/2017/10/'>October 2017</a></li>
	<li><a href='https://maxkersten.nl/2017/07/'>July 2017</a></li>
	<li><a href='https://maxkersten.nl/2017/06/'>June 2017</a></li>
	<li><a href='https://maxkersten.nl/2017/05/'>May 2017</a></li>
	<li><a href='https://maxkersten.nl/2017/04/'>April 2017</a></li>
			</ul>

			</aside><aside id="categories-2" class="widget inner-padding widget_categories"><h4 class="widget-title">Categories</h4>
			<ul>
					<li class="cat-item cat-item-10"><a href="https://maxkersten.nl/category/androidprojectcreator/">AndroidProjectCreator</a>
</li>
	<li class="cat-item cat-item-16"><a href="https://maxkersten.nl/category/api-clients/">API Clients</a>
</li>
	<li class="cat-item cat-item-9"><a href="https://maxkersten.nl/category/binary-analysis-course/">Binary Analysis Course</a>
</li>
	<li class="cat-item cat-item-4"><a href="https://maxkersten.nl/category/capricorn/">Capricorn</a>
</li>
	<li class="cat-item cat-item-18"><a href="https://maxkersten.nl/category/conferences/">Conferences</a>
</li>
	<li class="cat-item cat-item-3"><a href="https://maxkersten.nl/category/ethics/">Ethics</a>
</li>
	<li class="cat-item cat-item-2"><a href="https://maxkersten.nl/category/gemini/">Gemini</a>
</li>
	<li class="cat-item cat-item-6"><a href="https://maxkersten.nl/category/lectures/">Lectures</a>
</li>
	<li class="cat-item cat-item-19"><a href="https://maxkersten.nl/category/libras-ghidra-library/">Libra&#039;s Ghidra Library</a>
</li>
	<li class="cat-item cat-item-17"><a href="https://maxkersten.nl/category/m3/">m3</a>
</li>
	<li class="cat-item cat-item-15"><a href="https://maxkersten.nl/category/magecart/">MageCart</a>
</li>
	<li class="cat-item cat-item-13"><a href="https://maxkersten.nl/category/malpull/">MalPull</a>
</li>
	<li class="cat-item cat-item-8"><a href="https://maxkersten.nl/category/malware-analysis/">Malware Analysis</a>
</li>
	<li class="cat-item cat-item-14"><a href="https://maxkersten.nl/category/malwaretheflag/">MalwareTheFlag</a>
</li>
	<li class="cat-item cat-item-11"><a href="https://maxkersten.nl/category/responsible-disclosure/">Responsible Disclosure</a>
</li>
	<li class="cat-item cat-item-12"><a href="https://maxkersten.nl/category/reviews/">Reviews</a>
</li>
	<li class="cat-item cat-item-1"><a href="https://maxkersten.nl/category/uncategorized/">Uncategorized</a>
</li>
	<li class="cat-item cat-item-5"><a href="https://maxkersten.nl/category/web-hacking/">Web hacking</a>
</li>
	<li class="cat-item cat-item-7"><a href="https://maxkersten.nl/category/whitepapers/">Whitepapers</a>
</li>
			</ul>

			</aside>			</div><!-- .inside-right-sidebar -->
</div><!-- #secondary -->
	</div><!-- #content -->
</div><!-- #page -->
<div class="site-footer  ">
		<footer class="site-info" itemtype="http://schema.org/WPFooter" itemscope="itemscope">
		<div class="inside-site-info grid-container grid-parent">
						<div class="copyright-bar">
				<span class="copyright">&copy; 2024</span> &bull; <a href="https://generatepress.com" target="_blank" itemprop="url">GeneratePress</a>			</div>
		</div>
	</footer><!-- .site-info -->
	</div><!-- .site-footer -->

<a title="Scroll back to top" rel="nofollow" href="#" class="generate-back-to-top" style="opacity:0;visibility:hidden;" data-scroll-speed="400" data-start-scroll="300">
			<i class="fa fa-angle-up" aria-hidden="true"></i>
			<span class="screen-reader-text">Scroll back to top</span>
		</a><script type="text/javascript" src="https://maxkersten.nl/wp-content/themes/generatepress/js/navigation.min.js?ver=1.3.46" id="generate-navigation-js"></script>
<script type="text/javascript" src="https://maxkersten.nl/wp-content/themes/generatepress/js/dropdown.min.js?ver=1.3.46" id="generate-dropdown-js"></script>
<script type="text/javascript" src="https://maxkersten.nl/wp-content/themes/generatepress/js/back-to-top.min.js?ver=1.3.46" id="generate-back-to-top-js"></script>
<!--[if lt IE 9]>
<script type="text/javascript" src="https://maxkersten.nl/wp-content/themes/generatepress/js/html5shiv.min.js?ver=1.3.46" id="generate-html5-js"></script>
<![endif]-->

</body>
</html>