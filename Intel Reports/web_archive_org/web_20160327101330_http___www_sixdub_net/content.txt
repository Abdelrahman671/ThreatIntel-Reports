<!DOCTYPE html>
<html itemscope="itemscope" itemtype="http://schema.org/Article" lang="en">
<head><!-- is_embed=True -->
<script type="text/javascript" src="/_static/js/bundle-playback.js?v=krFivnjJ" charset="utf-8"></script>
<script type="text/javascript" src="/_static/js/wombat.js?v=txqj7nKC" charset="utf-8"></script>
<script>window.RufflePlayer=window.RufflePlayer||{};window.RufflePlayer.config={"autoplay":"on","unmuteOverlay":"hidden"};</script>
<script type="text/javascript" src="/_static/js/ruffle/ruffle.js"></script>
<script type="text/javascript">
    __wm.init("https://web.archive.org/web");
  __wm.wombat("http://www.sixdub.net/?p=367","20160327101330","https://web.archive.org/","web","/_static/",
	      "1459073610");
</script>
<link rel="stylesheet" type="text/css" href="/_static/css/banner-styles.css?v=S1zqJCYt" />
<link rel="stylesheet" type="text/css" href="/_static/css/iconochive.css?v=3PDvdIFv" />
<!-- End Wayback Rewrite JS Include -->

	<meta charset="UTF-8"/>
	<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1"/>
	<title>Inexorable PowerShell &#8211; A Red Teamer&#8217;s Tale of Overcoming Simple AppLocker Policies &#8211; @sixdub</title>
	<link rel="profile" href="http://gmpg.org/xfn/11"/>
	<link rel="pingback" href="http://www.sixdub.net/xmlrpc.php"/>
	<!--[if lt IE 9]>
	<script src="http://www.sixdub.net/wp-content/themes/independent-publisher/js/html5.js" type="text/javascript"></script>
	<![endif]-->
	<link rel="alternate" type="application/rss+xml" title="@sixdub » Feed" href="https://web.archive.org/web/20160327101330/http://www.sixdub.net/?feed=rss2"/>
<link rel="alternate" type="application/rss+xml" title="@sixdub » Comments Feed" href="https://web.archive.org/web/20160327101330/http://www.sixdub.net/?feed=comments-rss2"/>
<link rel="alternate" type="application/rss+xml" title="@sixdub » Inexorable PowerShell – A Red Teamer’s Tale of Overcoming Simple AppLocker Policies Comments Feed" href="https://web.archive.org/web/20160327101330/http://www.sixdub.net/?feed=rss2&amp;p=367"/>
<link rel="stylesheet" id="genericons-css" href="https://web.archive.org/web/20160327101330cs_/http://www.sixdub.net/wp-content/plugins/jetpack/_inc/genericons/genericons/genericons.css?ver=3.1" type="text/css" media="all"/>
<link rel="stylesheet" id="independent-publisher-jetpack-sharing-enhancements-css" href="https://web.archive.org/web/20160327101330cs_/http://www.sixdub.net/wp-content/themes/independent-publisher/css/jetpack-sharing-enhancements.css?ver=1.0" type="text/css" media="all"/>
<link rel="stylesheet" id="independent-publisher-style-css" href="https://web.archive.org/web/20160327101330cs_/http://www.sixdub.net/wp-content/themes/independent-publisher/style.css?ver=4.1" type="text/css" media="all"/>
<link rel="stylesheet" id="jetpack_css-css" href="https://web.archive.org/web/20160327101330cs_/http://www.sixdub.net/wp-content/plugins/jetpack/css/jetpack.css?ver=3.4.1" type="text/css" media="all"/>
<script type="text/javascript" src="https://web.archive.org/web/20160327101330js_/http://www.sixdub.net/wp-includes/js/jquery/jquery.js?ver=1.11.1"></script>
<script type="text/javascript" src="https://web.archive.org/web/20160327101330js_/http://www.sixdub.net/wp-includes/js/jquery/jquery-migrate.min.js?ver=1.2.1"></script>
<script type="text/javascript" src="https://web.archive.org/web/20160327101330js_/http://www.sixdub.net/wp-content/themes/independent-publisher/js/fade-post-title.js?ver=4.1"></script>
<script type="text/javascript" src="https://web.archive.org/web/20160327101330js_/http://www.sixdub.net/wp-content/themes/independent-publisher/js/enhanced-comment-form.js?ver=1.0"></script>
<link rel="prev" title="Offensive Event Parsing – Bringing Home Trophies" href="https://web.archive.org/web/20160327101330/http://www.sixdub.net/?p=315"/>
<link rel="next" title="Collaborative Distributed Scanning with Minions" href="https://web.archive.org/web/20160327101330/http://www.sixdub.net/?p=422"/>
<meta name="generator" content="WordPress 4.1"/>
<link rel="canonical" href="https://web.archive.org/web/20160327101330/http://www.sixdub.net/?p=367"/>
<link rel="shortlink" href="https://web.archive.org/web/20160327101330/http://wp.me/p4X1w6-5V"/>

	<!--wp code prettify--><style type="text/css">img#wpstats{display:none}</style>

		<!--WordPress Theme Customizer CSS-->
		<style type="text/css">

			/* Background Color */

			
			/* Comment Form Background Color */

			
			/* Text Color */

															
			/* Link Color */

			a, a:visited, a:hover, a:focus, a:active { color:#a30101; }
			.enhanced-excerpts .enhanced-excerpt-read-more a, .enhanced-excerpts .enhanced-excerpt-read-more a:hover { color:#a30101; }
			.post-excerpts .sticky.format-standard .entry-content a, .post-excerpts .sticky.format-standard .entry-content a:focus, .post-excerpts .sticky.format-standard .entry-content a:hover, .post-excerpts .sticky.format-standard .entry-content a:active, .post-excerpts .sticky.format-standard .entry-content a:visited { color:#a30101; }
			.post-excerpts .format-standard.show-full-content-first-post .entry-content a { color:#a30101; }
			.post-excerpts .format-standard .entry-content a.moretag { color:#a30101; }
			.post-excerpts .format-standard .entry-content a.more-link { color:#a30101; }
			.read-more a, .read-more a:hover { color:#a30101; }
			.entry-title a:hover { color:#a30101; }
			.entry-meta a:hover { color:#a30101; }
			.site-footer a:hover { color:#a30101; }
			blockquote { border-color:#a30101; }
			#infinite-footer .blog-credits a, #infinite-footer .blog-credits a:hover { color:#a30101; }
			#nprogress .bar { background:#a30101; }
			#nprogress .spinner-icon { border-top-color:#a30101; }
			#nprogress .spinner-icon { border-left-color:#a30101; }
			#nprogress .peg { box-shadow:0 0 10px #a30101, 0 0 5px #a30101; }

			button, html input[type="button"], input[type="reset"], input[type="submit"], button:hover, html input[type="button"]:hover, input[type="reset"]:hover, input[type="submit"]:hover { background:#a30101; /* Old browsers */ }
			button, html input[type="button"], input[type="reset"], input[type="submit"], button:hover, html input[type="button"]:hover, input[type="reset"]:hover, input[type="submit"]:hover { background: -moz-linear-gradient(top, #a30101 60%, #a30101 100%); /* FF3.6+ */ }
			button, html input[type="button"], input[type="reset"], input[type="submit"], button:hover, html input[type="button"]:hover, input[type="reset"]:hover, input[type="submit"]:hover { background: -webkit-gradient(linear, left top, left bottom, color-stop(60%, #a30101), color-stop(100%, #a30101)); /* Chrome,Safari4+ */ }
			button, html input[type="button"], input[type="reset"], input[type="submit"], button:hover, html input[type="button"]:hover, input[type="reset"]:hover, input[type="submit"]:hover { background: -webkit-linear-gradient(top, #a30101 60%, #a30101 100%); /* Chrome10+,Safari5.1+ */ }
			button, html input[type="button"], input[type="reset"], input[type="submit"], button:hover, html input[type="button"]:hover, input[type="reset"]:hover, input[type="submit"]:hover { background: -o-linear-gradient(top, #a30101 60%, #a30101 100%); /* Opera 11.10+ */ }
			button, html input[type="button"], input[type="reset"], input[type="submit"], button:hover, html input[type="button"]:hover, input[type="reset"]:hover, input[type="submit"]:hover { background: -ms-linear-gradient(top, #a30101 60%, #a30101 100%); /* IE10+ */ }
			button, html input[type="button"], input[type="reset"], input[type="submit"], button:hover, html input[type="button"]:hover, input[type="reset"]:hover, input[type="submit"]:hover { background: linear-gradient(top, #a30101 60%, #a30101 100%); /* W3C */ }

			/* Header Text Color */

																		
			/* Primary Meta Text Color */

									
			/* Secondary Meta Text Color */

																											
		</style>
		<!--/WordPress Theme Customizer CSS-->

	
<!-- Jetpack Open Graph Tags -->
<meta property="og:type" content="article"/>
<meta property="og:title" content="Inexorable PowerShell - A Red Teamer's Tale of Overcoming Simple AppLocker Policies"/>
<meta property="og:url" content="https://web.archive.org/web/20160327101330/http://www.sixdub.net/?p=367"/>
<meta property="og:description" content="*EDIT* This repo has been renamed to PowerPick and added to the Veil-Framework's PowerTools. Find it HERE! See below for more edits. *EDIT* Attackers have evolved to love PowerShell more than most ..."/>
<meta property="article:published_time" content="2014-12-02T14:24:42+00:00"/>
<meta property="article:modified_time" content="2015-01-06T02:06:12+00:00"/>
<meta property="article:author" content="http://www.sixdub.net"/>
<meta property="og:site_name" content="@sixdub"/>
<meta property="og:image" content="https://web.archive.org/web/20160327101330im_/http://www.sixdub.net/wp-content/uploads/2015/01/Screen-Shot-2014-12-01-at-7.29.37-PM-150x150.png"/>
<meta property="og:image:secure_url" content="https://i1.wp.com/www.sixdub.net/wp-content/uploads/2015/01/Screen-Shot-2014-12-01-at-7.29.37-PM-150x150.png"/>
<meta property="og:image" content="https://web.archive.org/web/20160327101330im_/http://www.sixdub.net/wp-content/uploads/2015/01/Screen-Shot-2014-12-01-at-7.29.45-PM-150x150.png"/>
<meta property="og:image:secure_url" content="https://i1.wp.com/www.sixdub.net/wp-content/uploads/2015/01/Screen-Shot-2014-12-01-at-7.29.45-PM-150x150.png"/>
<meta property="og:image" content="https://web.archive.org/web/20160327101330im_/http://www.sixdub.net/wp-content/uploads/2015/01/Screen-Shot-2014-12-01-at-7.29.06-PM-150x150.png"/>
<meta property="og:image:secure_url" content="https://i1.wp.com/www.sixdub.net/wp-content/uploads/2015/01/Screen-Shot-2014-12-01-at-7.29.06-PM-150x150.png"/>
<meta property="og:image" content="https://web.archive.org/web/20160327101330im_/http://www.sixdub.net/wp-content/uploads/2015/01/Screen-Shot-2014-12-01-at-7.30.36-PM-150x150.png"/>
<meta property="og:image:secure_url" content="https://i2.wp.com/www.sixdub.net/wp-content/uploads/2015/01/Screen-Shot-2014-12-01-at-7.30.36-PM-150x150.png"/>
<meta property="og:image" content="https://web.archive.org/web/20160327101330im_/http://www.sixdub.net/wp-content/uploads/2015/01/Screen-Shot-2014-12-01-at-7.30.57-PM-150x150.png"/>
<meta property="og:image:secure_url" content="https://i1.wp.com/www.sixdub.net/wp-content/uploads/2015/01/Screen-Shot-2014-12-01-at-7.30.57-PM-150x150.png"/>
<meta property="og:image" content="https://web.archive.org/web/20160327101330im_/http://www.sixdub.net/wp-content/uploads/2015/01/Screen-Shot-2014-12-01-at-7.31.08-PM-150x150.png"/>
<meta property="og:image:secure_url" content="https://i1.wp.com/www.sixdub.net/wp-content/uploads/2015/01/Screen-Shot-2014-12-01-at-7.31.08-PM-150x150.png"/>
<meta property="og:image" content="https://web.archive.org/web/20160327101330im_/http://www.sixdub.net/wp-content/uploads/2015/01/Screen-Shot-2014-12-01-at-7.31.46-PM-150x150.png"/>
<meta property="og:image:secure_url" content="https://i0.wp.com/www.sixdub.net/wp-content/uploads/2015/01/Screen-Shot-2014-12-01-at-7.31.46-PM-150x150.png"/>
<meta property="og:image" content="https://web.archive.org/web/20160327101330im_/http://www.sixdub.net/wp-content/uploads/2015/01/Screen-Shot-2014-12-01-at-7.54.28-PM-150x150.png"/>
<meta property="og:image:secure_url" content="https://i2.wp.com/www.sixdub.net/wp-content/uploads/2015/01/Screen-Shot-2014-12-01-at-7.54.28-PM-150x150.png"/>
<meta name="twitter:site" content="@jetpack"/>
<meta name="twitter:image0" content="http://www.sixdub.net/wp-content/uploads/2015/01/Screen-Shot-2014-12-01-at-7.29.37-PM-150x150.png?w=640"/>
<meta name="twitter:image1" content="http://www.sixdub.net/wp-content/uploads/2015/01/Screen-Shot-2014-12-01-at-7.29.45-PM-150x150.png?w=640"/>
<meta name="twitter:image2" content="http://www.sixdub.net/wp-content/uploads/2015/01/Screen-Shot-2014-12-01-at-7.29.06-PM-150x150.png?w=640"/>
<meta name="twitter:image3" content="http://www.sixdub.net/wp-content/uploads/2015/01/Screen-Shot-2014-12-01-at-7.30.36-PM-150x150.png?w=640"/>
<meta name="twitter:card" content="gallery"/>

<style id="custom-css-css">body{font-size:1.5em}.site-title{font-size:2.3em}</style>
</head>

<body class="single single-post postid-367 single-format-standard" itemscope="itemscope" itemtype="http://schema.org/WebPage">



<div id="page" class="hfeed site">
	<header id="masthead" class="site-header" role="banner" itemscope itemtype="http://schema.org/WPHeader">

		<div class="site-header-info">
													<a class="site-logo" href="https://web.archive.org/web/20160327101330/http://www.sixdub.net/">
			<img alt="" src="https://web.archive.org/web/20160327101330im_/http://1.gravatar.com/avatar/38fcfdaaa3b9e3a38962e451495eeb3d?s=100&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D100&amp;r=G" class="avatar avatar-100 photo" height="100" width="100"/>		</a>

		<h1 class="site-title"><span class="byline"><span class="author vcard"><a class="url fn n" href="https://web.archive.org/web/20160327101330/http://www.sixdub.net/" title="View all posts by sixdub" rel="author">sixdub</a></span></span></h1>
		<h2 class="site-description"></h2>

		<div id="menu-social" class="menu"><ul id="menu-social-items" class="menu-items"><li id="menu-item-440" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-440"><a href="https://web.archive.org/web/20160327101330/http://github.com/sixdub"><span class="screen-reader-text">Menu Item</span></a></li>
<li id="menu-item-441" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-441"><a href="https://web.archive.org/web/20160327101330/http://twitter.com/sixdub"><span class="screen-reader-text">Menu Item</span></a></li>
<li id="menu-item-516" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-516"><a href="https://web.archive.org/web/20160327101330/https://www.linkedin.com/profile/view?id=357803078"><span class="screen-reader-text">Menu Item</span></a></li>
</ul></div>
		<div class="site-published-separator"></div>
		<h2 class="site-published">Published</h2>
		<h2 class="site-published-date"><a href="https://web.archive.org/web/20160327101330/http://www.sixdub.net/?p=367" title="Inexorable PowerShell – A Red Teamer’s Tale of Overcoming Simple AppLocker Policies" rel="bookmark"><time class="entry-date" datetime="2014-12-02T14:24:42+00:00" pubdate="pubdate">December 2, 2014</time></a></h2>
							<h2 class="site-published">Updated</h2>
			<h2 class="site-published-date"><a href="https://web.archive.org/web/20160327101330/http://www.sixdub.net/?p=367" title="Inexorable PowerShell – A Red Teamer’s Tale of Overcoming Simple AppLocker Policies" rel="bookmark"><time class="entry-date-modified" datetime="2015-01-06T02:06:12+00:00" moddate="moddate">January 6, 2015</time></a></h2>
		
								</div>

							<nav role="navigation" class="site-navigation main-navigation">
				<a class="screen-reader-text skip-link" href="#content" title="Skip to content">Skip to content</a>

													<div class="menu-site-menu-container"><ul id="menu-site-menu" class="menu"><li id="menu-item-201" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-201"><a href="https://web.archive.org/web/20160327101330/http://sixdub.net/">Blog</a></li>
<li id="menu-item-193" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-193"><a href="https://web.archive.org/web/20160327101330/http://www.sixdub.net/?page_id=132">About</a></li>
<li id="menu-item-306" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-306"><a href="https://web.archive.org/web/20160327101330/http://www.sixdub.net/?page_id=305">Projects</a></li>
<li id="menu-item-524" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-524"><a href="https://web.archive.org/web/20160327101330/http://www.sixdub.net/?page_id=522">Presentations</a></li>
</ul></div>				
			</nav><!-- .site-navigation .main-navigation -->
		
			</header>
	<!-- #masthead .site-header -->

	<div id="main" class="site-main">
	<div id="primary" class="content-area">
		<main id="content" class="site-content" role="main">

			
				
<article id="post-367" class="post-367 post type-post status-publish format-standard hentry category-powershell category-redteam tag-powershell-hacking-redteam-veil" itemscope="itemscope" itemtype="http://schema.org/BlogPosting" itemprop="blogPost">
		<header class="entry-header">
			<h2 class="entry-title-meta">
			<span class="entry-title-meta-author">
				<span class="byline"><span class="author vcard"><a class="url fn n" href="https://web.archive.org/web/20160327101330/http://www.sixdub.net/" title="View all posts by sixdub" rel="author">sixdub</a></span></span>			</span>
			in <a href="https://web.archive.org/web/20160327101330/http://www.sixdub.net/?cat=4" title="View all posts in Powershell">Powershell</a>			<span class="entry-title-meta-post-date">
				<span class="sep"> | </span>
				<a href="https://web.archive.org/web/20160327101330/http://www.sixdub.net/?p=367" title="Inexorable PowerShell – A Red Teamer’s Tale of Overcoming Simple AppLocker Policies" rel="bookmark"><time class="entry-date" datetime="2014-12-02T14:24:42+00:00" pubdate="pubdate">December 2, 2014</time></a>			</span>
					</h2>
		<h1 class="entry-title" itemprop="name">Inexorable PowerShell &#8211; A Red Teamer&#8217;s Tale of Overcoming Simple AppLocker Policies</h1>
		</header>
	<!-- .entry-header -->
	<div class="entry-content" itemprop="mainContentOfPage">
		<p>*EDIT* This repo has been renamed to PowerPick and added to the Veil-Framework&#8217;s PowerTools. Find it <a href="https://web.archive.org/web/20160327101330/https://github.com/Veil-Framework/PowerTools" target="_blank">HERE</a>! See below for more edits. *EDIT*</p>
<p>Attackers have evolved to love PowerShell more than most defenders or system administrators. Tools like Powersploit&#8217;, Veil Power*, and Nishang have become routine capabilities used by Red Teams, Pentesters, Evil attackers, and skiddies alike. With this evolution and overall consolidation of techniques into a single scripting language, surely defenders have found a proven method to prevent PowerShell execution? Surely Software Restriction Policies (SRP) or AppLocker can save the day? Don&#8217;t be so sure&#8230;</p>
<p>Assessment after Assessment, I find that we can compromise a domain user, elevate local privileges, steal credentials, inject payloads, and escalate in the domain all using PowerShell. I have nightmares of the day someone effectively restricts PowerShell and some of the old school tactics must return. From my conversations with defenders or infosec junkies, awareness of these techniques is on the rise and people are finally starting to pay attention to the routine release of PowerShell tools to aid in offense. With that being said, until disabling PowerShell on unneeded systems becomes common practice in the trenches of commercial enterprise, attackers will still have an easy[ier] win. At this point, the restriction of PowerShell is unlikely to happen until the time/cost required to implement such defensives are minimized to a point where it can be realistically accomplished natively at scale.</p>
<p>For some previous research attackers&#8217; use of PowerShell:</p>
<ul>
<li><a href="https://web.archive.org/web/20160327101330/https://www.fireeye.com/content/dam/legacy/resources/pdfs/fireeye-lazanciyan-investigating-powershell-attacks.pdf" target="_blank">FireEye WhitePaper from Blackhat</a> &#8211; Includes discussion of incident response with PowerShell. Awesome writeup! Props to these guys for taking a stab at defensive conversation in this arena. I hope to see some of this work recreated on an engagement some time.</li>
<li><a href="https://web.archive.org/web/20160327101330/http://blog.crowdstrike.com/deep-thought-chinese-targeting-national-security-think-tanks/" target="_blank">Crowdstrike Report on DeepPanda</a> &#8211; Example of threat actor using PowerShell</li>
<li><a title="Weaponizing Powershell" href="https://web.archive.org/web/20160327101330/http://www.harmj0y.net/blog/powershell/derbycon-powershell-weaponization/" target="_blank">Weaponizing PowerShell</a> &#8211; harmj0ys post on weaponizing PowerShell. Good write up on bypassing execution restrictions</li>
<li><a href="https://web.archive.org/web/20160327101330/http://www.darkoperator.com/powershellbasics/" target="_blank">PowerShell Basics</a> &#8211; Carlos Perez tutorials on PowerShell. Definitely worth the read</li>
<li><a href="https://web.archive.org/web/20160327101330/https://github.com/mattifestation/PowerSploit" target="_blank">Powersploit&#8217; Github</a> &#8211; Essential for Offensive PowerShell users</li>
</ul>
<p><span id="more-367"></span></p>
<h2>In The Words of The Defenders &#8211; &#8220;Use Applocker&#8221;</h2>
<p>Disclaimer: This is not intended to be a guide on AppLocker. Later you will see, this is a guide of what not to do! Also, I am not a Microsoft Certified Systems Engineer (MSCE) or any sort of Microsoft professional. There might be ways to properly configure AppLocker to prevent PowerShell&#8230; but they are not publicized enough if they exist! I googled as much as the average network defender would.</p>
<p>AppLocker is the Microsoft solution for &#8220;application control in the enterprise&#8221;. It is built to restrict unwanted software from being executed and provides a variety of methods to accomplish this. It allows you to specify policies that limit executables, DLLs, installers or scripts by path, hash, or publisher. The resulting policies are then pushed out by Group Policy and managed centrally.</p>
<p>Obviously there is the regularly preached balance between usability and security but I find it important here to mention that the best setup possible with AppLocker would utilize a whitelist approach. Organizations could analyze their standard images and build policies to match this image. With that being said, the CEO wouldn&#8217;t be able to install their P2P software, the user wouldn&#8217;t be able to run World of Warcraft, and tech support would have an increase call volume by 3000% (Seriously hope to never work help desk&#8230; but I sure do appreciate the work they do!). For this reason, organizations still rely on blacklist based policies to prevent the use of net*.exe, cmd.exe and powershell.exe.</p>
<p>For the purpose of my demo, I intended to mimic an organization that used AppLocker in a black list fashion. My goal was to use AppLocker as much as possible to block PowerShell and test appropriate measures to get around the blacklist.</p>
<p>I tested with a Windows 7 system. I performed the following actions to attempt to setup and secure my test machine:</p>
<ul>
<li>Started the Application Identity service</li>
<li>Added Executable Rules to deny by hash the following executables:
<ul>
<li>C:\windows\system32\WindowsPowerShellv1.0\powershell.exe</li>
<li>C:\windows\system32\WindowsPowerShellv1.0\powershell_ise.exe</li>
<li>C:\windows\Syswow64\WindowsPowerShellv1.0\powershell.exe</li>
<li>C:\windows\Syswow64\WindowsPowerShellv1.0\powershell_ise.exe</li>
</ul>
</li>
<li>Added Script Rules to deny by path: *.ps1*</li>
<li>Enabled &#8220;Enforce&#8221; on DLL Rules (AppLocker-&gt;Properties)</li>
<li>Added DLL Rules to deny by hash the following DLLs:
<ul>
<li>C:\Program Files\Reference Assemblies\Microsoft\WindowsPowerShellv1.0\Microsoft.PowerShell.Commands.Management.dll</li>
<li>C:\Program Files\Reference Assemblies\Microsoft\WindowsPowerShellv1.0\Microsoft.PowerShell.Commands.Utility.dll</li>
<li>C:\Program Files\Reference Assemblies\Microsoft\WindowsPowerShellv1.0\Microsoft.PowerShell.ConsoleHost.dll</li>
<li>C:\Program Files\Reference Assemblies\Microsoft\WindowsPowerShellv1.0\Microsoft.PowerShell.Security.dll</li>
<li>C:\Program Files\Reference Assemblies\Microsoft\WindowsPowerShellv1.0\System.Management.Automation.dll</li>
</ul>
</li>
<li>Tested to ensure the block worked! SUCCESS!</li>
</ul>
<div id="gallery-11" class="gallery galleryid-367 gallery-columns-3 gallery-size-thumbnail"><figure class="gallery-item">
			<div class="gallery-icon landscape">
				<a href="https://web.archive.org/web/20160327101330/http://www.sixdub.net/?attachment_id=477"><img width="150" height="150" src="https://web.archive.org/web/20160327101330im_/http://www.sixdub.net/wp-content/uploads/2015/01/Screen-Shot-2014-12-01-at-7.29.37-PM-150x150.png" class="attachment-thumbnail" alt="Screen-Shot-2014-12-01-at-7.29.37-PM"/></a>
			</div></figure><figure class="gallery-item">
			<div class="gallery-icon landscape">
				<a href="https://web.archive.org/web/20160327101330/http://www.sixdub.net/?attachment_id=478"><img width="150" height="150" src="https://web.archive.org/web/20160327101330im_/http://www.sixdub.net/wp-content/uploads/2015/01/Screen-Shot-2014-12-01-at-7.29.45-PM-150x150.png" class="attachment-thumbnail" alt="Screen-Shot-2014-12-01-at-7.29.45-PM"/></a>
			</div></figure><figure class="gallery-item">
			<div class="gallery-icon landscape">
				<a href="https://web.archive.org/web/20160327101330/http://www.sixdub.net/?attachment_id=476"><img width="150" height="150" src="https://web.archive.org/web/20160327101330im_/http://www.sixdub.net/wp-content/uploads/2015/01/Screen-Shot-2014-12-01-at-7.29.06-PM-150x150.png" class="attachment-thumbnail" alt="Screen-Shot-2014-12-01-at-7.29.06-PM"/></a>
			</div></figure><figure class="gallery-item">
			<div class="gallery-icon landscape">
				<a href="https://web.archive.org/web/20160327101330/http://www.sixdub.net/?attachment_id=479"><img width="150" height="150" src="https://web.archive.org/web/20160327101330im_/http://www.sixdub.net/wp-content/uploads/2015/01/Screen-Shot-2014-12-01-at-7.30.36-PM-150x150.png" class="attachment-thumbnail" alt="Screen-Shot-2014-12-01-at-7.30.36-PM"/></a>
			</div></figure>
		</div>

<h2>The Work Around &#8211; Lock Picking the AppLocker</h2>
<p>I have recently gotten into the Offensive PowerShell world and have only tip toed at this point.  I have heard a couple people discuss methods of bypassing the AppLocker rules with regards to PowerShell. <strong>Personally, I give props to harmj0y for the inspiration and tips in the right direction. I also know many of the ideas and initial research discovering this technique came from darkoperator and a few others in the offensive PowerShell community</strong>. Thanks to those who came before and paved the way. Would love to hear if you have better methods!</p>
<p>PowerShell provides backend access through the .NET framework and Windows Common Language Interface (CLI). Developers love the extensibility this provides and many examples exist online for how to use these features to create utilities to do fun sys-ad type things. Few people realized that the same code could be used to package PowerShell as a workaround for AppLocker restrictions.</p>
<p>Take a read of <a href="https://web.archive.org/web/20160327101330/http://blogs.msdn.com/b/kebab/archive/2014/04/28/executing-powershell-scripts-from-c.aspx" target="_blank">this</a> for info on how to invoke PS scripts in C#.</p>
<p>First I must configure my project and add the Automation assembly as a reference:</p>
<ul>
<li>RC on References-&gt;Add Reference</li>
<li>Browse and select: C:Program FilesReference AssembliesMicrosoftWindowsPowerShellv1.0System.Management.Automation.dll</li>
</ul>
<p>In order to load from a resource, I must first create a resource:</p>
<ul>
<li>Open Resources.resx</li>
<li>Add String Resource</li>
<li>Name the string &#8220;Script&#8221;</li>
<li>Set the value to &#8220;Get-Process&#8221; or whatever script you want to execute</li>
</ul>
<p>After creating the project, I instantiate my Runspace and create the Pipeline that will be used to execute commands</p>
<pre class="prettyprint">&#47;&#47;Init stuff
Runspace runspace = RunspaceFactory.CreateRunspace();
runspace.Open();
RunspaceInvoke scriptInvoker = new RunspaceInvoke(runspace);
Pipeline pipeline = runspace.CreatePipeline();
</pre>
<p>Next, I extract a PowerShell script from the resource section and add it to the pipeline. This could be changed to read a PowerShell script from the internet, from an encrypted string, etc. In a target environment, it would be important to obfuscate/encrypt the script to prevent AV or HIPS from triggering on the plaintext script. I have see on disk scripts get a Red Team caught every now and then&#8230;.</p>
<pre class="prettyprint">&#47;&#47;Add commands
string script = Properties.Resources.ResourceManager.GetString(&#34;Script&#34;);
pipeline.Commands.AddScript(script);
</pre>
<p>To retrieve the output from the script, I add the &#8220;Out-String&#8221; command onto the pipeline and grab the return objects. iterate over these objects with a string builder to return the final output string.</p>
<pre class="prettyprint">&#47;&#47;Prep PS for string output and invoke
pipeline.Commands.Add(&#34;Out-String&#34;);
Collection results = pipeline.Invoke();
runspace.Close();

&#47;&#47;Convert records to strings
StringBuilder stringBuilder = new StringBuilder();
foreach (PSObject obj in results)
{
    stringBuilder.AppendLine(obj.ToString());
}
Console.Write(stringBuilder.ToString());
</pre>
<p>Compiling this executable and throwing it into the test environment results in an astounding success. Despite all of the preventions on running PowerShell, our executable was able to access the API and run any script we chose. I tested it primarily with Veil-PowerView. 20ish lines of C# demonstrated a pretty rudimentary proof of concept. There are some obvious downsides to this bypass&#8230;</p>
<ul>
<li>Offensive capability put on disk (although script could be fetched from internet)</li>
<li>Managed code, namely .NET is easily decompiled</li>
<li>Whitelist environments defeat this</li>
</ul>
<div id="gallery-12" class="gallery galleryid-367 gallery-columns-3 gallery-size-thumbnail"><figure class="gallery-item">
			<div class="gallery-icon landscape">
				<a href="https://web.archive.org/web/20160327101330/http://www.sixdub.net/?attachment_id=480"><img width="150" height="150" src="https://web.archive.org/web/20160327101330im_/http://www.sixdub.net/wp-content/uploads/2015/01/Screen-Shot-2014-12-01-at-7.30.57-PM-150x150.png" class="attachment-thumbnail" alt="Screen-Shot-2014-12-01-at-7.30.57-PM"/></a>
			</div></figure><figure class="gallery-item">
			<div class="gallery-icon landscape">
				<a href="https://web.archive.org/web/20160327101330/http://www.sixdub.net/?attachment_id=481"><img width="150" height="150" src="https://web.archive.org/web/20160327101330im_/http://www.sixdub.net/wp-content/uploads/2015/01/Screen-Shot-2014-12-01-at-7.31.08-PM-150x150.png" class="attachment-thumbnail" alt="Screen-Shot-2014-12-01-at-7.31.08-PM"/></a>
			</div></figure><figure class="gallery-item">
			<div class="gallery-icon portrait">
				<a href="https://web.archive.org/web/20160327101330/http://www.sixdub.net/?attachment_id=482"><img width="150" height="150" src="https://web.archive.org/web/20160327101330im_/http://www.sixdub.net/wp-content/uploads/2015/01/Screen-Shot-2014-12-01-at-7.31.46-PM-150x150.png" class="attachment-thumbnail" alt="Screen-Shot-2014-12-01-at-7.31.46-PM"/></a>
			</div></figure><figure class="gallery-item">
			<div class="gallery-icon landscape">
				<a href="https://web.archive.org/web/20160327101330/http://www.sixdub.net/?attachment_id=483"><img width="150" height="150" src="https://web.archive.org/web/20160327101330im_/http://www.sixdub.net/wp-content/uploads/2015/01/Screen-Shot-2014-12-01-at-7.54.28-PM-150x150.png" class="attachment-thumbnail" alt="Screen-Shot-2014-12-01-at-7.54.28-PM"/></a>
			</div></figure>
		</div>

<h2>Defeat The Workaround</h2>
<p>This was just too easy&#8230; The heavy reliance on .NET had me confident there was an easy way to stop this.  In my test environment, I spent some time in Process Explorer and Process Monitor digging around a dump of my malicious application. I confirmed that the custom executable was loading the .NET assemblies to accomplish the PowerShell execution. In the words of Microsoft, &#8220;Assemblies are the building blocks of the .NET Framework&#8221;. Essentially, assemblies are the libraries that make up the CLI. For the most part, the assemblies are stored in the Global Assembly Cache (GAC) at C:WindowsAssembly. Neat fact, .NET loads the assemblies at run time as they are needed&#8230; not upon initial application execution. As I played with the code, I could see the point where the assembly would get loaded. Below are a sampling of the file handles I saw open:</p>
<ul>
<li>
<pre>C:WindowsassemblyGAC_MSILMicrosoft.PowerShell.Commands.Diagnostics1.0.0.0__31bf3856ad364e35Microsoft.PowerShell.Commands.Diagnostics.dll</pre>
</li>
<li>
<pre>C:WindowsassemblyGAC_MSILSystem.Management.Automation1.0.0.0__31bf3856ad364e35System.Management.Automation.dll</pre>
</li>
</ul>
<p>Running quickly back to AppLocker, I added all of the PowerShell specific assemblies from the GAC to the deny policy by hash. To get the assembly DLLs blocked in AppLocker and allow explorer to access the backend assembly libraries, I had to disable the &#8220;Cache Viewer&#8221; functionality. Definitely be sure to reenable this if you want drag-and-drop install of assemblies.  A quick reg command FTW:</p>
<pre>reg add HKLMSoftwareMicrosoftFusion /v DisableCacheViewer /t REG_DWORD /d 1</pre>
<p>For some reason, the assembly deny policy still failed to deny execution to my malicious application. At first I thought it might be due to the fact that the DLL was hidden in an assembly, but after testing, that turned out to be false. Other assembly DLLs could be blocked. See the follow up section for more info! The only DLL that I could find that would successfully prevent execution via AppLocker DLL Rules was:</p>
<pre>C:WindowsMicrosoft.NETassemblyGAC_32System.Transactionsv4.0_4.0.0.0__b77a5c561934e089System.Transactions.dll</pre>
<p>This prevented the execution of my malicious script but the DLL being blocked was the library responsible for all transactional classes (aka the ability to create a resource manager). This was an unreasonable block as tons of legitimate .NET applications require resources. Finally, I moved on to the obvious: rename/move the PowerShell assemblies.</p>
<pre>mkdir c:windowsassemblydisabled
move c:windowsassemblyGAC_MSILMicrosoft.PowerShell.Commands.Management1.0.0.0__31bf3856ad364e35Microsoft.PowerShell.Commands.Management.dll c:windowsassemblydisabled
</pre>
<p>Obviously this worked and prevented execution of my malicious application. In my mind, this is a limited solution due to the inflexibility of having to install/uninstall assemblies. It would be ideal to have a configurable policy to allow the assembly to be used by certain users or in certain situations but prevent use by the standard user.</p>
<h2>*FOLLOW UP* (added after post)</h2>
<p>After posting this originally, several people got involved in discussion via twitter. Before going too much further, I must state that the best policy to use is a whitelist based policy. Blacklisting should be considered nothing more than a stop gap and will be overcome by a dedicated attacker. This post was intended to demo that. With that being said, I rarely even discover companies who have made the jump to any sort of AppLocker policies.</p>
<p>Many thanks for Lee Holmes (@Lee_Holmes) and Carlos Perez (@Carlos_Perez) for the follow up and twitter discussion. Lee Holmes dug in and found out why I was not able to get the PowerShell assemblies working successfully in DLL blacklist mode. He used the AppLocker audit mode combined with Windows Event logs to detect which DLLs were being loaded and blocked based on policies. This will definitely help narrow what specifically you can block. After a bunch of playing with this method, I can vouch it is useful.</p>
<p><b>To blacklist a .NET assembly, specifically the PowerShell ones, you must block ALL of the related DLLs behind the assemblies. This includes the DLLs in GAC_MSIL and NativeImages if they both are present.</b> To discover the DLL for the PowerShell assembly, you can run this in PowerShell:<em> [PSObject].Assembly.Location.</em> There are also several different PowerShell dependencies in the .NET assemblies so feel free to check it out yourself. Using this method, I was able to block the assembly DLL required for the .NET import.</p>
<h2>Thats All Folks&#8230;</h2>
<p>There is some obvious follow on work for this project that I hope to explore:</p>
<ul>
<li>Execute/Use the PowerShell API through unmanaged code. There might be a way to access the CLI through a COM object allowing you to integrate PowerShell into your existing RATs and Tools without utilizing the PS executables</li>
<li>Explore and test different AV/HIPS products with .NET assemblies</li>
</ul>
<p>Hopefully this stirs some discussion and encourages both the defensive and offensive PowerShell communities to dig deeper. Do not think that blocklisting or setting permissions on a single executable will prevent the use of the PowerShell language. There needs to be an effective and native capability to deny  or limit the use of PowerShell by an adversary. As this is proof of concept type of work, please let me know if you have better defensive methods or have seen specific software that works to defend PowerShell really well.</p>
					</div>
	<!-- .entry-content -->

			<div class="post-author-bottom">
			<div class="post-author-card">
				<a class="site-logo" href="https://web.archive.org/web/20160327101330/http://www.sixdub.net/">
					<img alt="" src="https://web.archive.org/web/20160327101330im_/http://1.gravatar.com/avatar/38fcfdaaa3b9e3a38962e451495eeb3d?s=100&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D100&amp;r=G" class="avatar avatar-100 photo" height="100" width="100"/>				</a>

				<div class="post-author-info">
					<h1 class="site-title">
						<span class="byline"><span class="author vcard"><a class="url fn n" href="https://web.archive.org/web/20160327101330/http://www.sixdub.net/" title="View all posts by sixdub" rel="author">sixdub</a></span></span>					</h1>

					<h2 class="site-description"></h2>
				</div>
				<div class="post-published-date">
					<h2 class="site-published">Published</h2>
					<h2 class="site-published-date"><a href="https://web.archive.org/web/20160327101330/http://www.sixdub.net/?p=367" title="Inexorable PowerShell – A Red Teamer’s Tale of Overcoming Simple AppLocker Policies" rel="bookmark"><time class="entry-date" datetime="2014-12-02T14:24:42+00:00" pubdate="pubdate">December 2, 2014</time></a></h2>
																<h2 class="site-published">Updated</h2>
						<h2 class="site-published-date"><a href="https://web.archive.org/web/20160327101330/http://www.sixdub.net/?p=367" title="Inexorable PowerShell – A Red Teamer’s Tale of Overcoming Simple AppLocker Policies" rel="bookmark"><time class="entry-date-modified" datetime="2015-01-06T02:06:12+00:00" moddate="moddate">January 6, 2015</time></a></h2>
					
					
				</div>
			</div>
		</div>
		<!-- .post-author-bottom -->
		
	<footer class="entry-meta">
		
					<div id="share-comment-button">
				<button>
					<i class="share-comment-icon"></i>Write a Comment				</button>
			</div>
		
			</footer>
	<!-- .entry-meta -->

</article><!-- #post-367 -->

				
	<div id="commentform-top"></div> <!-- do not remove; used by jQuery to move the comment reply form here -->
									<div id="respond" class="comment-respond">
				<h3 id="reply-title" class="comment-reply-title"> <small><a rel="nofollow" id="cancel-comment-reply-link" href="/web/20160327101330/http://www.sixdub.net/?p=367" style="display:none;">Cancel Reply</a></small></h3>
									<form action="https://web.archive.org/web/20160327101330/http://www.sixdub.net/wp-comments-post.php" method="post" id="commentform" class="comment-form" novalidate>
						<div id="main-reply-title"><h3>Write a Comment</h3></div><div class="comment-form-reply-title"><p>Comment</p></div><p class="comment-form-comment" id="comment-form-field"><textarea id="comment" name="comment" cols="60" rows="6" aria-required="true"></textarea></p>																				<p class="comment-form-author"><label for="author">Name</label><input id="author" name="author" type="text" value="" aria-required="true"/></p>
<p class="comment-form-email"><label for="email">Email</label><input id="email" name="email" type="text" value="" aria-required="true"/></p>
<p class="comment-form-url"><label for="url">Website</label><input id="url" name="url" type="text" value=""/></p>
																								<p class="form-submit">
							<input name="submit" type="submit" id="submit" class="submit" value="Submit Comment"/>
							<input type="hidden" name="comment_post_ID" value="367" id="comment_post_ID"/>
<input type="hidden" name="comment_parent" id="comment_parent" value="0"/>
						</p>
						<p style="display: none;"><input type="hidden" id="akismet_comment_nonce" name="akismet_comment_nonce" value="6fcd6eba4d"/></p><p class="comment-subscription-form"><input type="checkbox" name="subscribe_comments" id="subscribe_comments" value="subscribe" style="width: auto; -moz-appearance: checkbox; -webkit-appearance: checkbox;"/> <label class="subscribe-label" id="subscribe-label" for="subscribe_comments">Notify me of follow-up comments by email.</label></p><p class="comment-subscription-form"><input type="checkbox" name="subscribe_blog" id="subscribe_blog" value="subscribe" style="width: auto; -moz-appearance: checkbox; -webkit-appearance: checkbox;"/> <label class="subscribe-label" id="subscribe-blog-label" for="subscribe_blog">Notify me of new posts by email.</label></p><p style="display: none;"><input type="hidden" id="ak_js" name="ak_js" value="39"/></p>					</form>
							</div><!-- #respond -->
			

	<div id="comments" class="comments-area">
				
		
		
		
		
	</div><!-- #comments .comments-area -->


				
																			<div id="taglist">
						<ul class="taglist"><li class="taglist-title">Related Content by Tag</li><li><a href="https://web.archive.org/web/20160327101330/http://www.sixdub.net/?tag=powershell-hacking-redteam-veil" rel="tag">powershell hacking redteam veil</a></li></ul>					</div>
				
			
		</main>
		<!-- #content .site-content -->
	</div><!-- #primary .content-area -->

<div id="secondary" class="widget-area" role="complementary">
	</div><!-- #secondary .widget-area -->

	<!--wp code prettify-->
	<script type="text/javascript">
	function $(id) {return !id ? null : document.getElementById(id);}

	loadPrettifyCss = function () {
		if(!$('prettify_css')) {
			css = document.createElement('link');
			css.id = 'prettify_css';
			css.type = 'text/css';
			css.rel = 'stylesheet';
			css.href = 'https://web.archive.org/web/20160327101330/http://www.sixdub.net/wp-content/plugins/wp-code-prettify/css/prettify.css';
			var headNode = document.getElementsByTagName("head")[0];
			headNode.appendChild(css);
		} else {
			$('prettify_css').href = 'https://web.archive.org/web/20160327101330/http://www.sixdub.net/wp-content/plugins/wp-code-prettify/css/prettify.css';
		}

		if(!$('prettify_custom')) {
			css = document.createElement('style');
			css.id = 'prettify_custom';
			css.type = 'text/css';
			css.rel = 'stylesheet';
			css.innerHTML = 'pre.prettyprint { margin: 5px; padding: 10px; max-height: 300px; overflow: auto; background-color: #f8f8f8;}';
			var headNode = document.getElementsByTagName("head")[0];
			headNode.appendChild(css);
		} else {
			$('prettify_css').innerHTML = 'pre.prettyprint { margin: 5px; padding: 10px; max-height: 300px; overflow: auto; background-color: #f8f8f8;}';
		}
	}
	</script>
	<script type="text/javascript">
		loadPrettifyCss();
	</script>

	<script type="text/javascript" src="https://web.archive.org/web/20160327101330js_/http://www.sixdub.net/wp-content/plugins/wp-code-prettify/js/prettify.js"></script>
	<script type="text/javascript">
		function wpCodePrettifyOnLoad(func){
			var wpCodePrettifyOldOnLoad = window.onload;
			if (typeof window.onload != 'function') {
				window.onload = func
			} else {
				window.onload = function () {
					wpCodePrettifyOldOnLoad();
					func()
				}
			}
		}

		wpCodePrettifyOnLoad(function(){prettyPrint();});
	</script>
	<!--//wp code prettify-->
	
</div><!-- #main .site-main -->

<footer id="colophon" class="site-footer" itemscope="itemscope" itemtype="http://schema.org/WPFooter" role="contentinfo">
	<div class="site-info">
		<a href="https://web.archive.org/web/20160327101330/http://independentpublisher.me/" rel="designer" title="Independent Publisher: A beautiful reader-focused WordPress theme, for you.">Independent Publisher</a> empowered by <a href="https://web.archive.org/web/20160327101330/http://wordpress.org/" rel="generator" title="WordPress: A free open-source publishing platform">WordPress</a>	</div>
	<!-- .site-info -->
</footer><!-- #colophon .site-footer -->
</div><!-- #page .hfeed .site -->

	<div style="display:none">
	<div class="grofile-hash-map-38fcfdaaa3b9e3a38962e451495eeb3d">
	</div>
	</div>
		<script type="text/javascript">
			!function(d,s,id){
				var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';
				if(!d.getElementById(id)){
					js=d.createElement(s);
					js.id=id;js.src=p+"://platform.twitter.com/widgets.js";
					fjs.parentNode.insertBefore(js,fjs);
				}
			}(document,"script","twitter-wjs");
		</script>
		<script type="text/javascript" src="https://web.archive.org/web/20160327101330js_/http://www.sixdub.net/wp-content/plugins/akismet/_inc/form.js?ver=3.1.7"></script>
<script type="text/javascript" src="https://web.archive.org/web/20160327101330js_/http://s0.wp.com/wp-content/js/devicepx-jetpack.js?ver=201612"></script>
<script type="text/javascript" src="https://web.archive.org/web/20160327101330js_/http://s.gravatar.com/js/gprofiles.js?ver=2016Maraa"></script>
<script type="text/javascript">
/* <![CDATA[ */
var WPGroHo = {"my_hash":""};
/* ]]> */
</script>
<script type="text/javascript" src="https://web.archive.org/web/20160327101330js_/http://www.sixdub.net/wp-content/plugins/jetpack/modules/wpgroho.js?ver=4.1"></script>
<script type="text/javascript" src="https://web.archive.org/web/20160327101330js_/http://www.sixdub.net/wp-content/themes/independent-publisher/js/skip-link-focus-fix.js?ver=20130115"></script>
<script type="text/javascript" src="https://web.archive.org/web/20160327101330js_/http://www.sixdub.net/wp-includes/js/comment-reply.min.js?ver=4.1"></script>
<script type="text/javascript" src="https://web.archive.org/web/20160327101330js_/http://stats.wp.com/e-201612.js" async defer></script>
<script type="text/javascript">
	_stq = window._stq || [];
	_stq.push([ 'view', {v:'ext',j:'1:3.4.1',blog:'73172530',post:'367',tz:'0'} ]);
	_stq.push([ 'clickTrackerInit', '73172530', '367' ]);
</script>

</body>
</html>
<!--
     FILE ARCHIVED ON 10:13:30 Mar 27, 2016 AND RETRIEVED FROM THE
     INTERNET ARCHIVE ON 02:57:29 Oct 24, 2024.
     JAVASCRIPT APPENDED BY WAYBACK MACHINE, COPYRIGHT INTERNET ARCHIVE.

     ALL OTHER CONTENT MAY ALSO BE PROTECTED BY COPYRIGHT (17 U.S.C.
     SECTION 108(a)(3)).
-->
<!--
playback timings (ms):
  captures_list: 0.502
  exclusion.robots: 0.024
  exclusion.robots.policy: 0.015
  esindex: 0.009
  cdx.remote: 25.127
  LoadShardBlock: 243.498 (3)
  PetaboxLoader3.datanode: 90.858 (4)
  PetaboxLoader3.resolve: 154.506 (3)
  load_resource: 133.632
-->