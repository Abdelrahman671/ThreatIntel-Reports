<!DOCTYPE html>
<html lang="en"><head>
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1"><!-- Begin Jekyll SEO tag v2.6.1 -->
<title>MS Crypto Derive Functions | Random RE</title>
<meta name="generator" content="Jekyll v3.8.5" />
<meta property="og:title" content="MS Crypto Derive Functions" />
<meta property="og:locale" content="en_US" />
<meta name="description" content="Three functions come up a lot when you are trying to write scripts to decode out malware strings or configs, this is me dumping my notes on these functions." />
<meta property="og:description" content="Three functions come up a lot when you are trying to write scripts to decode out malware strings or configs, this is me dumping my notes on these functions." />
<link rel="canonical" href="/malware,/reverse-engineering/2018/05/12/MS-Derivation-functions.html" />
<meta property="og:url" content="/malware,/reverse-engineering/2018/05/12/MS-Derivation-functions.html" />
<meta property="og:site_name" content="Random RE" />
<meta property="og:type" content="article" />
<meta property="article:published_time" content="2018-05-12T16:31:12+00:00" />
<script type="application/ld+json">
{"@type":"BlogPosting","headline":"MS Crypto Derive Functions","dateModified":"2018-05-12T16:31:12+00:00","datePublished":"2018-05-12T16:31:12+00:00","url":"/malware,/reverse-engineering/2018/05/12/MS-Derivation-functions.html","mainEntityOfPage":{"@type":"WebPage","@id":"/malware,/reverse-engineering/2018/05/12/MS-Derivation-functions.html"},"description":"Three functions come up a lot when you are trying to write scripts to decode out malware strings or configs, this is me dumping my notes on these functions.","@context":"https://schema.org"}</script>
<!-- End Jekyll SEO tag -->
<link rel="stylesheet" href="/assets/main.css"><link type="application/atom+xml" rel="alternate" href="/feed.xml" title="Random RE" /></head>
<body><header class="site-header" role="banner">

  <div class="wrapper"><a class="site-title" rel="author" href="/">Random RE</a><nav class="site-nav">
        <input type="checkbox" id="nav-trigger" class="nav-trigger" />
        <label for="nav-trigger">
          <span class="menu-icon">
            <svg viewBox="0 0 18 15" width="18px" height="15px">
              <path d="M18,1.484c0,0.82-0.665,1.484-1.484,1.484H1.484C0.665,2.969,0,2.304,0,1.484l0,0C0,0.665,0.665,0,1.484,0 h15.032C17.335,0,18,0.665,18,1.484L18,1.484z M18,7.516C18,8.335,17.335,9,16.516,9H1.484C0.665,9,0,8.335,0,7.516l0,0 c0-0.82,0.665-1.484,1.484-1.484h15.032C17.335,6.031,18,6.696,18,7.516L18,7.516z M18,13.516C18,14.335,17.335,15,16.516,15H1.484 C0.665,15,0,14.335,0,13.516l0,0c0-0.82,0.665-1.483,1.484-1.483h15.032C17.335,12.031,18,12.695,18,13.516L18,13.516z"/>
            </svg>
          </span>
        </label>

        <div class="trigger"><a class="page-link" href="/about/">About</a></div>
      </nav></div>
</header>
<main class="page-content" aria-label="Content">
      <div class="wrapper">
        <article class="post h-entry" itemscope itemtype="http://schema.org/BlogPosting">

  <header class="post-header">
    <h1 class="post-title p-name" itemprop="name headline">MS Crypto Derive Functions</h1>
    <p class="post-meta">
      <time class="dt-published" datetime="2018-05-12T16:31:12+00:00" itemprop="datePublished">May 12, 2018
      </time></p>
  </header>

  <div class="post-content e-content" itemprop="articleBody">
    <p>Three functions come up a lot when you are trying to write scripts to decode out malware strings or configs, this is me dumping my notes on these functions.</p>

<p>So you have a .NET script using PasswordDeriveBytes? Or well really you have anything doing a routine on data. So what do you do? Well if the routine is semi complicated or I haven’t run upon it before then I will commonly let the malware take the data and then right as it’s passed off to the function in question I will force the data to be dumped out in all stages.</p>

<p>What does this mean? It means if I want to recreate how PasswordDeriveBytes works then I just simply need to pass the same values to it and dump the bytes out to a file on disk using a different script.</p>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">namespace</span> <span class="nn">PassDeriveTest</span>
<span class="p">{</span>
    <span class="k">class</span> <span class="nc">Program</span>
    <span class="p">{</span>
	<span class="k">static</span> <span class="kt">string</span> <span class="n">bleh</span> <span class="p">=</span> <span class="s">"B5YDTLEDBjd+8zy5lzEfjw=="</span><span class="p">;</span>
	<span class="k">public</span> <span class="k">static</span> <span class="kt">string</span> <span class="nf">S</span><span class="p">(</span><span class="kt">string</span> <span class="n">C_0</span><span class="p">)</span>
	    <span class="p">{</span>
		<span class="kt">string</span> <span class="n">strPassword</span> <span class="p">=</span> <span class="s">"amp4Z0wpKzJ5Cg0GDT5sJD0sMw0IDAsaGQ1Afik6NwXr6rrSEQE="</span><span class="p">;</span>
		<span class="kt">string</span> <span class="n">s</span> <span class="p">=</span> <span class="s">"aGQ1Afik6NampDT5sJEQE4Z0wpsMw0IDAD06rrSswXrKzJ5Cg0G="</span><span class="p">;</span>
		<span class="kt">string</span> <span class="n">strHashName</span> <span class="p">=</span> <span class="s">"SHA1"</span><span class="p">;</span>
		<span class="kt">int</span> <span class="n">iterations</span> <span class="p">=</span> <span class="m">2</span><span class="p">;</span>
		<span class="kt">int</span> <span class="n">num</span> <span class="p">=</span> <span class="m">256</span><span class="p">;</span>
		<span class="kt">string</span> <span class="n">s2</span> <span class="p">=</span> <span class="s">"@1B2c3D4e5F6g7H8"</span><span class="p">;</span>
		<span class="kt">byte</span><span class="p">[]</span> <span class="n">bytes</span> <span class="p">=</span> <span class="n">System</span><span class="p">.</span><span class="n">Text</span><span class="p">.</span><span class="n">Encoding</span><span class="p">.</span><span class="n">ASCII</span><span class="p">.</span><span class="nf">GetBytes</span><span class="p">(</span><span class="n">s2</span><span class="p">);</span>
		<span class="kt">byte</span><span class="p">[]</span> <span class="n">bytes2</span> <span class="p">=</span> <span class="n">System</span><span class="p">.</span><span class="n">Text</span><span class="p">.</span><span class="n">Encoding</span><span class="p">.</span><span class="n">ASCII</span><span class="p">.</span><span class="nf">GetBytes</span><span class="p">(</span><span class="n">s</span><span class="p">);</span>
		<span class="kt">byte</span><span class="p">[]</span> <span class="n">array</span> <span class="p">=</span> <span class="n">System</span><span class="p">.</span><span class="n">Convert</span><span class="p">.</span><span class="nf">FromBase64String</span><span class="p">(</span><span class="n">C_0</span><span class="p">);</span>
		<span class="n">System</span><span class="p">.</span><span class="n">Security</span><span class="p">.</span><span class="n">Cryptography</span><span class="p">.</span><span class="n">PasswordDeriveBytes</span> <span class="n">passwordDeriveBytes</span> <span class="p">=</span> <span class="k">new</span> <span class="n">System</span><span class="p">.</span><span class="n">Security</span><span class="p">.</span><span class="n">Cryptography</span><span class="p">.</span><span class="nf">PasswordDeriveBytes</span><span class="p">(</span><span class="n">strPassword</span><span class="p">,</span> <span class="n">bytes2</span><span class="p">,</span> <span class="n">strHashName</span><span class="p">,</span> <span class="n">iterations</span><span class="p">);</span>
		<span class="kt">byte</span><span class="p">[]</span> <span class="n">bytes3</span> <span class="p">=</span> <span class="n">passwordDeriveBytes</span><span class="p">.</span><span class="nf">GetBytes</span><span class="p">(</span><span class="n">num</span> <span class="p">/</span> <span class="m">8</span><span class="p">);</span>
		<span class="n">File</span><span class="p">.</span><span class="nf">WriteAllBytes</span><span class="p">(</span><span class="s">"keydata.bin"</span><span class="p">,</span> <span class="n">bytes3</span><span class="p">);</span>
		<span class="n">System</span><span class="p">.</span><span class="n">Security</span><span class="p">.</span><span class="n">Cryptography</span><span class="p">.</span><span class="n">ICryptoTransform</span> <span class="n">transform</span> <span class="p">=</span> <span class="k">new</span> <span class="n">System</span><span class="p">.</span><span class="n">Security</span><span class="p">.</span><span class="n">Cryptography</span><span class="p">.</span><span class="n">RijndaelManaged</span>
		<span class="p">{</span>
		    <span class="n">Mode</span> <span class="p">=</span> <span class="n">System</span><span class="p">.</span><span class="n">Security</span><span class="p">.</span><span class="n">Cryptography</span><span class="p">.</span><span class="n">CipherMode</span><span class="p">.</span><span class="n">CBC</span>
		<span class="p">}.</span><span class="nf">CreateDecryptor</span><span class="p">(</span><span class="n">bytes3</span><span class="p">,</span> <span class="n">bytes</span><span class="p">);</span>
		<span class="n">System</span><span class="p">.</span><span class="n">IO</span><span class="p">.</span><span class="n">MemoryStream</span> <span class="n">memoryStream</span> <span class="p">=</span> <span class="k">new</span> <span class="n">System</span><span class="p">.</span><span class="n">IO</span><span class="p">.</span><span class="nf">MemoryStream</span><span class="p">(</span><span class="n">array</span><span class="p">);</span>
		<span class="n">System</span><span class="p">.</span><span class="n">Security</span><span class="p">.</span><span class="n">Cryptography</span><span class="p">.</span><span class="n">CryptoStream</span> <span class="n">cryptoStream</span> <span class="p">=</span> <span class="k">new</span> <span class="n">System</span><span class="p">.</span><span class="n">Security</span><span class="p">.</span><span class="n">Cryptography</span><span class="p">.</span><span class="nf">CryptoStream</span><span class="p">(</span><span class="n">memoryStream</span><span class="p">,</span> <span class="n">transform</span><span class="p">,</span> <span class="n">System</span><span class="p">.</span><span class="n">Security</span><span class="p">.</span><span class="n">Cryptography</span><span class="p">.</span><span class="n">CryptoStreamMode</span><span class="p">.</span><span class="n">Read</span><span class="p">);</span>
		<span class="kt">byte</span><span class="p">[]</span> <span class="n">array2</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">byte</span><span class="p">[</span><span class="n">array</span><span class="p">.</span><span class="n">Length</span><span class="p">];</span>
		<span class="kt">int</span> <span class="n">count</span> <span class="p">=</span> <span class="n">cryptoStream</span><span class="p">.</span><span class="nf">Read</span><span class="p">(</span><span class="n">array2</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="n">array2</span><span class="p">.</span><span class="n">Length</span><span class="p">);</span>
		<span class="n">memoryStream</span><span class="p">.</span><span class="nf">Close</span><span class="p">();</span>
		<span class="n">cryptoStream</span><span class="p">.</span><span class="nf">Close</span><span class="p">();</span>
		<span class="k">return</span> <span class="n">System</span><span class="p">.</span><span class="n">Text</span><span class="p">.</span><span class="n">Encoding</span><span class="p">.</span><span class="n">UTF8</span><span class="p">.</span><span class="nf">GetString</span><span class="p">(</span><span class="n">array2</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="n">count</span><span class="p">);</span>
	    <span class="p">}</span>
	<span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">()</span>
	<span class="p">{</span>
		<span class="kt">string</span> <span class="n">blah</span> <span class="p">=</span> <span class="nf">S</span><span class="p">(</span><span class="n">bleh</span><span class="p">);</span>
		<span class="n">Console</span><span class="p">.</span><span class="nf">Write</span><span class="p">(</span><span class="n">blah</span><span class="p">);</span>
	<span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>So I’m writing the bytes out to a file keydata.bin while at the same time going ahead and decrypting the string, now I know exactly what the bytes used for the AES key will be which were generated from PasswordDeriveBytes. While I’m at it I can go ahead and change the iterations to 1 and output the edge case of what happens when iterations is 1 for generating the bytes, as it turns out it generates the same bytes as iterations being 2.</p>

<p>So now with this data we can attempt to recreate the routine in python and verify if we are in fact generating the same bytes for atleast this case. Generating the data we will need for other cases will be done in a similar manner but sometimes may involve doing things such as letting the malware call a function like CryptDeriveKey and then overwriting the bytecode in the malware itself to call an export function to dump the key into memory. Like most cyber security professions getting better at reverse engineering will usually come down to time, reading specifications and reference materials, testing or rolling your own routines/algorithms. If I want to understand how something works or how to identify it when I’m staring at disassembly then I find it much easier if I’ve already spent the time developing the routine or rolling my own cryto or using someones crypto library and then staring at it disassembled. It’s far from glamorous but some of my most interesting research has involved staring at RFCs for months.</p>

<h1 id="net-passwordderivebytes">.NET PasswordDeriveBytes</h1>

<p>Based on PBKDF1, however PBKDF1 doens’t allow for generated bytes to exceed the hash length. Microsofts PasswordDeriveBytes however will reuse the hash before last on the iterations in order to generate more bytes in a stream.</p>

<p>It does this by reusing the last hash from the iteration and prepending an integer to it stringified starting at 1 and going until it has satisfied enough bytes for the requested stream.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">hashlib</span>
<span class="kn">from</span> <span class="nn">base64</span> <span class="kn">import</span> <span class="n">b64decode</span>

<span class="k">def</span> <span class="nf">MS_PasswordDeriveBytes</span><span class="p">(</span><span class="n">pstring</span><span class="p">,</span> <span class="n">salt</span><span class="p">,</span> <span class="n">hashfunc</span><span class="p">,</span> <span class="n">iterations</span><span class="p">,</span> <span class="n">keylen</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">iterations</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
        <span class="n">lasthash</span> <span class="o">=</span> <span class="n">hashlib</span><span class="o">.</span><span class="n">sha1</span><span class="p">(</span><span class="n">pstring</span><span class="o">+</span><span class="n">salt</span><span class="p">)</span><span class="o">.</span><span class="n">digest</span><span class="p">()</span>
        <span class="n">iterations</span> <span class="o">-=</span> <span class="mi">1</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"Iterations must be &gt; 0"</span><span class="p">)</span>
    <span class="c1">#If iterations is 1 then basically the same thing happens as 2 based on my testing
</span>    <span class="c1">#if iterations == 0 and keylen &gt; len(lasthash):
</span>        <span class="c1">#print("Dunno what happens here")
</span>        <span class="c1">#return -1
</span>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">iterations</span><span class="o">-</span><span class="mi">1</span><span class="p">):</span>
        <span class="n">lasthash</span> <span class="o">=</span> <span class="n">hashlib</span><span class="o">.</span><span class="n">sha1</span><span class="p">(</span><span class="n">lasthash</span><span class="p">)</span>
    <span class="nb">bytes</span> <span class="o">=</span> <span class="n">hashlib</span><span class="o">.</span><span class="n">sha1</span><span class="p">(</span><span class="n">lasthash</span><span class="p">)</span><span class="o">.</span><span class="n">digest</span><span class="p">()</span>
    <span class="n">ctrl</span> <span class="o">=</span> <span class="mi">1</span>
    <span class="k">while</span> <span class="nb">len</span><span class="p">(</span><span class="nb">bytes</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">keylen</span><span class="p">:</span>
        <span class="nb">bytes</span> <span class="o">+=</span> <span class="n">hashlib</span><span class="o">.</span><span class="n">sha1</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">ctrl</span><span class="p">)</span><span class="o">+</span><span class="n">lasthash</span><span class="p">)</span><span class="o">.</span><span class="n">digest</span><span class="p">()</span>
        <span class="n">ctrl</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="k">return</span><span class="p">(</span><span class="nb">bytes</span><span class="p">[:</span><span class="n">keylen</span><span class="p">])</span>

<span class="n">stpass</span> <span class="o">=</span> <span class="s">'amp4Z0wpKzJ5Cg0GDT5sJD0sMw0IDAsaGQ1Afik6NwXr6rrSEQE='</span>
<span class="n">slt</span> <span class="o">=</span> <span class="s">'aGQ1Afik6NampDT5sJEQE4Z0wpsMw0IDAD06rrSswXrKzJ5Cg0G='</span>
<span class="n">initv</span> <span class="o">=</span> <span class="s">'@1B2c3D4e5F6g7H8'</span>
<span class="n">enc_str</span> <span class="o">=</span> <span class="n">b64decode</span><span class="p">(</span><span class="s">'B5YDTLEDBjd+8zy5lzEfjw=='</span><span class="p">)</span>
<span class="n">derbytes</span> <span class="o">=</span> <span class="n">MS_PasswordDeriveBytes</span><span class="p">(</span><span class="n">stpass</span><span class="p">,</span> <span class="n">slt</span><span class="p">,</span> <span class="n">hashlib</span><span class="o">.</span><span class="n">sha1</span><span class="p">,</span> <span class="n">iterations</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">keylen</span><span class="o">=</span><span class="mi">32</span><span class="p">)</span>
<span class="n">derbytes</span>
<span class="s">'4</span><span class="se">\x88</span><span class="s">m[</span><span class="se">\t</span><span class="s">z</span><span class="se">\x94\x19</span><span class="s">x</span><span class="se">\xd0\xe3\x8b\x1b\\\xa3</span><span class="s">)`tj^]d</span><span class="se">\x87\x11\xb1</span><span class="s">,g</span><span class="se">\xaa</span><span class="s">[:</span><span class="se">\x8e\xbf</span><span class="s">'</span>
</code></pre></div></div>

<h1 id="rfc2898derivebytes">RFC2898DeriveBytes</h1>

<p>This one uses PBKDF2, some simple python code for the pbkdf2 library: https://github.com/mitsuhiko/python-pbkdf2</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">passwd</span> <span class="o">=</span> <span class="s">"52LUPYXcB7UmIUIYCk0"</span>
<span class="n">encrypted</span> <span class="o">=</span> <span class="s">"ETHfIKGznueFOwZzWrIPuz81fI2+EyHoMzKFUJIPBGc="</span>
<span class="n">salt</span> <span class="o">=</span> <span class="s">"Ivan Medvedev"</span>
<span class="n">blob</span> <span class="o">=</span> <span class="n">pbkdf2_bin</span><span class="p">(</span><span class="n">passwd</span><span class="p">,</span> <span class="n">salt</span><span class="p">,</span> <span class="n">keylen</span><span class="o">=</span><span class="mi">32</span><span class="o">+</span><span class="mi">16</span><span class="p">)</span>
<span class="n">key</span> <span class="o">=</span> <span class="n">blob</span><span class="p">[:</span><span class="mi">32</span><span class="p">]</span>
<span class="n">iv</span> <span class="o">=</span> <span class="n">blob</span><span class="p">[</span><span class="mi">32</span><span class="p">:]</span>
<span class="kn">from</span> <span class="nn">Crypto.Cipher</span> <span class="kn">import</span> <span class="n">AES</span>

<span class="n">data</span> <span class="o">=</span> <span class="s">"ETHfIKGznueFOwZzWrIPuz81fI2+EyHoMzKFUJIPBGc="</span>

<span class="kn">import</span> <span class="nn">base64</span>
<span class="n">temp</span> <span class="o">=</span> <span class="n">base64</span><span class="o">.</span><span class="n">b64decode</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
<span class="n">aes</span> <span class="o">=</span> <span class="n">AES</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">AES</span><span class="o">.</span><span class="n">MODE_CBC</span><span class="p">,</span> <span class="n">iv</span><span class="p">)</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">aes</span><span class="o">.</span><span class="n">decrypt</span><span class="p">(</span><span class="n">temp</span><span class="p">)</span>

<span class="s">'A</span><span class="se">\x00</span><span class="s">p</span><span class="se">\x00</span><span class="s">p</span><span class="se">\x00</span><span class="s">L</span><span class="se">\x00</span><span class="s">a</span><span class="se">\x00</span><span class="s">u</span><span class="se">\x00</span><span class="s">n</span><span class="se">\x00</span><span class="s">c</span><span class="se">\x00</span><span class="s">h</span><span class="se">\x00</span><span class="s">.</span><span class="se">\x00</span><span class="s">e</span><span class="se">\x00</span><span class="s">x</span><span class="se">\x00</span><span class="s">e</span><span class="se">\x00\x06\x06\x06\x06\x06\x06</span><span class="s">'</span>

<span class="o">&gt;&gt;&gt;</span> <span class="s">'A</span><span class="se">\x00</span><span class="s">p</span><span class="se">\x00</span><span class="s">p</span><span class="se">\x00</span><span class="s">L</span><span class="se">\x00</span><span class="s">a</span><span class="se">\x00</span><span class="s">u</span><span class="se">\x00</span><span class="s">n</span><span class="se">\x00</span><span class="s">c</span><span class="se">\x00</span><span class="s">h</span><span class="se">\x00</span><span class="s">.</span><span class="se">\x00</span><span class="s">e</span><span class="se">\x00</span><span class="s">x</span><span class="se">\x00</span><span class="s">e</span><span class="se">\x00</span><span class="s">'</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s">'utf-16'</span><span class="p">)</span>

<span class="s">u'AppLaunch.exe'</span>
</code></pre></div></div>

<h1 id="ms-cryptoapi-cryptderivekey">MS CryptoAPI CryptDeriveKey</h1>
<p>As an example using RC4</p>

<p>If I hash the string ‘test’ using any hash but let’s say md5</p>

<p>And then derive an RC4 key passing 0x280011 as the flags</p>

<p>Then the key is bit length of the flags value 0x280011 » 16 to get the number of bytes simply divide by 8 in this case 5 bytes of the resulting md5 hash will be used as the RC4 key</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">hashlib</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">hashlib</span><span class="o">.</span><span class="n">md5</span><span class="p">(</span><span class="s">'test'</span><span class="p">)</span><span class="o">.</span><span class="n">digest</span><span class="p">()</span>
<span class="s">"</span><span class="se">\t\x8f</span><span class="s">k</span><span class="se">\xcd</span><span class="s">F!</span><span class="se">\xd3</span><span class="s">s</span><span class="se">\xca\xde</span><span class="s">N</span><span class="se">\x83</span><span class="s">&amp;'</span><span class="se">\xb4\xf6</span><span class="s">"</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">flags</span> <span class="o">=</span> <span class="mh">0x280011</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nb">hex</span><span class="p">(</span><span class="n">flags</span> <span class="o">&gt;&gt;</span> <span class="mi">16</span><span class="p">)</span>
<span class="s">'0x28'</span>
<span class="o">&gt;&gt;&gt;</span> <span class="mh">0x28</span><span class="o">/</span><span class="mi">8</span>
<span class="mi">5</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">hashlib</span><span class="o">.</span><span class="n">md5</span><span class="p">(</span><span class="s">'test'</span><span class="p">)</span><span class="o">.</span><span class="n">digest</span><span class="p">()[:</span><span class="mi">5</span><span class="p">]</span>
<span class="s">'</span><span class="se">\t\x8f</span><span class="s">k</span><span class="se">\xcd</span><span class="s">F'</span>
<span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">Crypto.Cipher</span> <span class="kn">import</span> <span class="n">ARC4</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">rc4</span> <span class="o">=</span> <span class="n">ARC4</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">hashlib</span><span class="o">.</span><span class="n">md5</span><span class="p">(</span><span class="s">'test'</span><span class="p">)</span><span class="o">.</span><span class="n">digest</span><span class="p">()[:</span><span class="mi">5</span><span class="p">])</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">rc4</span><span class="o">.</span><span class="n">decrypt</span><span class="p">(</span><span class="n">encoded_data</span><span class="p">)</span>
</code></pre></div></div>

<p>Hope it helps.</p>

<p>Thanks to @maciekkotowicz and @noottrak</p>

<p>References:
https://github.com/Microsoft/referencesource/blob/master/mscorlib/system/security/cryptography/passwordderivebytes.cs
https://tools.ietf.org/html/rfc2898#section-5.1</p>

  </div><a class="u-url" href="/malware,/reverse-engineering/2018/05/12/MS-Derivation-functions.html" hidden></a>
</article>

      </div>
    </main><footer class="site-footer h-card">
  <data class="u-url" href="/"></data>

  <div class="wrapper">

    <h2 class="footer-heading">Random RE</h2>

    <div class="footer-col-wrapper">
      <div class="footer-col footer-col-1">
        <ul class="contact-list">
          <li class="p-name">Random RE</li><li><a class="u-email" href="mailto:sysopfb@gmail.com">sysopfb@gmail.com</a></li></ul>
      </div>

      <div class="footer-col footer-col-2"><ul class="social-media-list"><li><a href="https://github.com/sysopfb"><svg class="svg-icon"><use xlink:href="/assets/minima-social-icons.svg#github"></use></svg> <span class="username">sysopfb</span></a></li><li><a href="https://www.twitter.com/sysopfb"><svg class="svg-icon"><use xlink:href="/assets/minima-social-icons.svg#twitter"></use></svg> <span class="username">sysopfb</span></a></li></ul>
</div>

      <div class="footer-col footer-col-3">
        <p>Place for me to dump random RE posts mostly revolving around Malware.</p>
      </div>
    </div>

  </div>

</footer>
</body>

</html>
