<!DOCTYPE html>
<html>
  <head>
    <title>Analysis of the ShadowHammer backdoor – mauronz – x86 official language of the blog</title>

        <meta charset="utf-8" />
    <meta content='text/html; charset=utf-8' http-equiv='Content-Type'>
    <meta http-equiv='X-UA-Compatible' content='IE=edge'>
    <meta name='viewport' content='width=device-width, initial-scale=1.0, maximum-scale=1.0'>

    
    <meta name="description" content="On March 25, Kim Zetter published an astonishing story describing a supply-chain attack against ASUS which was run between June and November 2018. The ASUS Live Update software was backdoored in order to attack a very specific group of targets. The campaign, named ShadowHammer, was discovered and investigated by Kaspersky Lab, which will present the full details during SAS2019.

" />
    <meta property="og:description" content="On March 25, Kim Zetter published an astonishing story describing a supply-chain attack against ASUS which was run between June and November 2018. The ASUS Live Update software was backdoored in order to attack a very specific group of targets. The campaign, named ShadowHammer, was discovered and investigated by Kaspersky Lab, which will present the full details during SAS2019.

" />
    
    <meta name="author" content="mauronz" />

    
    <meta property="og:title" content="Analysis of the ShadowHammer backdoor" />
    <meta property="twitter:title" content="Analysis of the ShadowHammer backdoor" />
    

    <!--[if lt IE 9]>
      <script src="http://html5shiv.googlecode.com/svn/trunk/html5.js"></script>
    <![endif]-->

    <link rel="stylesheet" type="text/css" href="/style.css" />
    <link rel="alternate" type="application/rss+xml" title="mauronz - x86 official language of the blog" href="/feed.xml" />
    <!-- Begin Jekyll SEO tag v2.7.1 -->
<title>Analysis of the ShadowHammer backdoor | mauronz</title>
<meta name="generator" content="Jekyll v3.9.0" />
<meta property="og:title" content="Analysis of the ShadowHammer backdoor" />
<meta property="og:locale" content="en_US" />
<meta name="description" content="On March 25, Kim Zetter published an astonishing story describing a supply-chain attack against ASUS which was run between June and November 2018. The ASUS Live Update software was backdoored in order to attack a very specific group of targets. The campaign, named ShadowHammer, was discovered and investigated by Kaspersky Lab, which will present the full details during SAS2019." />
<meta property="og:description" content="On March 25, Kim Zetter published an astonishing story describing a supply-chain attack against ASUS which was run between June and November 2018. The ASUS Live Update software was backdoored in order to attack a very specific group of targets. The campaign, named ShadowHammer, was discovered and investigated by Kaspersky Lab, which will present the full details during SAS2019." />
<link rel="canonical" href="https://mauronz.github.io/shadowhammer-backdoor/" />
<meta property="og:url" content="https://mauronz.github.io/shadowhammer-backdoor/" />
<meta property="og:site_name" content="mauronz" />
<meta property="og:type" content="article" />
<meta property="article:published_time" content="2019-03-27T00:00:00+00:00" />
<meta name="twitter:card" content="summary" />
<meta property="twitter:title" content="Analysis of the ShadowHammer backdoor" />
<script type="application/ld+json">
{"description":"On March 25, Kim Zetter published an astonishing story describing a supply-chain attack against ASUS which was run between June and November 2018. The ASUS Live Update software was backdoored in order to attack a very specific group of targets. The campaign, named ShadowHammer, was discovered and investigated by Kaspersky Lab, which will present the full details during SAS2019.","headline":"Analysis of the ShadowHammer backdoor","url":"https://mauronz.github.io/shadowhammer-backdoor/","@type":"BlogPosting","dateModified":"2019-03-27T00:00:00+00:00","datePublished":"2019-03-27T00:00:00+00:00","mainEntityOfPage":{"@type":"WebPage","@id":"https://mauronz.github.io/shadowhammer-backdoor/"},"@context":"https://schema.org"}</script>
<!-- End Jekyll SEO tag -->

    <!-- Created with Jekyll Now - http://github.com/barryclark/jekyll-now -->
    <link rel="shortcut icon" href="/images/favicon.png">
  </head>

  <body>
    <div class="wrapper-masthead">
      <div class="container">
        <header class="masthead clearfix">
          <a href="/" class="site-avatar"><img src="https://avatars1.githubusercontent.com/u/19782194?v=3&u=638cf17c3d4bc6c76e8ba269fc02dac7c519d112&s=400" /></a>

          <div class="site-info">
            <h1 class="site-name"><a href="/">mauronz</a></h1>
            <p class="site-description">x86 official language of the blog</p>
          </div>

          <nav>
            <a href="/">Blog</a>
            <a href="/about">About</a>
          </nav>
        </header>
      </div>
    </div>

    <div id="main" role="main" class="container">
      <article class="post">
  <h1>Analysis of the ShadowHammer backdoor</h1>

  <div class="entry">
    <p>On March 25, Kim Zetter published an <a href="https://motherboard.vice.com/en_us/article/pan9wn/hackers-hijacked-asus-software-updates-to-install-backdoors-on-thousands-of-computers">astonishing story</a> describing a supply-chain attack against ASUS which was run between June and November 2018. The ASUS Live Update software was backdoored in order to attack a very specific group of targets. The campaign, named ShadowHammer, was discovered and investigated by <a href="https://securelist.com/operation-shadowhammer/89992/?utm_source=twitter&amp;utm_medium=social&amp;utm_campaign=uk_securelist_db0077_organic&amp;utm_content=sm-post&amp;utm_term=uk_twitter_organic_db0077_sm-post_social_securelist">Kaspersky Lab</a>, which will present the full details during SAS2019. 
<!--more--></p>

<p>NOTE: as of yet Kaspersky has only published a single sample of the backdoor (hash: aa15eb28292321b586c27d8401703494), so the analysis and the considerations presented in this post are specific to that. Once more samples come out it may become necessary to perform some adjustments.</p>

<h2 id="the-backdoored-setupexe">The backdoored setup.exe</h2>

<p>The ASUS software is distributed as a zip archive containing 3 files, <em>setup.exe</em> and two versions of <em>409.msi</em>. The backdoor resides in the first one.
The malicious code is executed just before the program exits.</p>

<p class="center"><img src="/images/2019-03-27-shadowhammer-backdoor/call_backdoor.jpg" alt="VM directory" /></p>

<p>The call to <strong>execute_backdoor</strong> overwrites a call to a legitimate function just before the execution of ExitProcess.</p>

<p><strong>execute_backdoor</strong> is straightforward. First, it allocates a region of memory with read, write and execution permissions. It then retrieves the encrypted shellcode data using hardcoded offsets and decrypts it in the allocated memory. Finally, it calls the entrypoint of the shellcode, once again with a hardcoded offset.</p>

<p class="center"><img src="/images/2019-03-27-shadowhammer-backdoor/decrypt_execute.jpg" alt="VM directory" /></p>

<p>It is worth noting that the two functions used to execute the malicious shellcode, <strong>execute_backdoor</strong> and <strong>decrypt</strong>, are both located at the end of the .text section of the executable. This indicates that they were added directly to the legitimate compiled file, rather than during compilation.</p>

<h2 id="the-shellcode">The shellcode</h2>

<p>The shellcode starts by dynamically loading the DLLs it needs and then retrieves the addresses of the required exported functions. The most interesting ones are iphlpapi.dll, used to retrieve the MAC addresses of the machine, and wininet.dll, for the communication with the C&amp;C.</p>

<p>The next step is to get the MAC addresses of all the interfaces. To obtain this information, the shellcode uses the API function GetAdaptersAddresses. To avoid revealing the targeted addresses, the authors of the backdoor stored their MD5 hashes. In order to correctly check the correspondence, for each interface of the machine, the shellcode computes the MD5 hash of the MAC address.</p>

<p class="center"><img src="/images/2019-03-27-shadowhammer-backdoor/get_mac.jpg" alt="VM directory" /></p>

<p>We can now look at how the backdoor checks if the retrieved MAC addresses match any of the targeted ones. The data of each target is stored in the following data structure:</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span> <span class="n">mac_data</span> <span class="p">{</span>
    <span class="n">DWORD</span> <span class="n">type</span><span class="p">;</span>
    <span class="n">BYTE</span> <span class="n">md5_hash1</span><span class="p">[</span><span class="mh">0x10</span><span class="p">];</span>
    <span class="n">DWORD</span> <span class="n">sep1</span><span class="p">;</span>
    <span class="n">BYTE</span> <span class="n">md5_hash2</span><span class="p">[</span><span class="mh">0x10</span><span class="p">];</span>
    <span class="n">DWORD</span> <span class="n">sep2</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">sep1</code> and <code class="language-plaintext highlighter-rouge">sep2</code> are always 0. <code class="language-plaintext highlighter-rouge">type</code> can be either 1 or 2. If <code class="language-plaintext highlighter-rouge">type</code> is 1, in order to match this target the machine just needs to have a MAC address with an MD5 equal to <code class="language-plaintext highlighter-rouge">md5_hash1</code>; <code class="language-plaintext highlighter-rouge">md5_hash2</code> is filled with 0. Instead, if <code class="language-plaintext highlighter-rouge">type</code> is 2, both <code class="language-plaintext highlighter-rouge">md5_hash1</code> and <code class="language-plaintext highlighter-rouge">md5_hash2</code> have an actual value and they both must be found in the MAC addresses of the machine.<br />
In the example below, we can see <code class="language-plaintext highlighter-rouge">type</code> in red, <code class="language-plaintext highlighter-rouge">md5_hash1</code> in blue and <code class="language-plaintext highlighter-rouge">md5_hash2</code> in green.</p>

<p class="center"><img src="/images/2019-03-27-shadowhammer-backdoor/hash_data.jpg" alt="VM directory" /></p>

<p>As <a href="https://twitter.com/vkamluk/status/1110208888807124992">mentioned</a> by Vitaly Kamluk from Kaspersky Lab, the complete list of targets is scattered among different samples of the backdoor. This specific sample contains 18 of them.</p>

<h4 id="target-identified">Target identified</h4>

<p>If the MAC addresses match one of those in the target list, the shellcode contacts the C&amp;C with the following URL</p>

<p class="center">hxxps://asushotfix[.]com/logo2.jpg?</p>

<p>followed by the hex encode of the matched <code class="language-plaintext highlighter-rouge">md5_hash1</code>.</p>

<p>Using the WININET APIs, the shellcode of the second stage is downloaded and saved in another memory region with read, write, execute permission. Finally it is executed.</p>

<h4 id="not-a-target">Not a target</h4>

<p>If instead the current machine is not a target, the shellcode performs one final action. It creates a file named <em>idx.ini</em> in the folder of the current user, where it stores a date a week after the current one. The purpose of this file is unclear.</p>

<p class="center"><img src="/images/2019-03-27-shadowhammer-backdoor/idx.jpg" alt="VM directory" /></p>

<p>At least for this sample, the backdoor does not perform any malicious activity on machines that are not targeted. There is no form of persistence, so the people behind ShadowHammer cannot reobtain execution unless the <em>setup.exe</em> file is run again by a user.</p>

<h3 id="list-of-target-data">List of target data</h3>

<p>type: 2<br />
00b006c7dab6ace6c25c3799eb2b6e14<br />
5977baa3f8ce0ca1c96d6ac9a40c9a91</p>

<p>type: 1<br />
00b006c7dab6ace6c25c3799eb2b6e14</p>

<p>type: 1<br />
409d8eebce8546e56a0ad740667aadbd</p>

<p>type: 1<br />
7da42dd34574d4e1a7ea0e708e7bc9a6</p>

<p>type: 2<br />
ade62a257adf118418c5b2913267543e<br />
4268aed64aa5fff2020d2447790d7d32</p>

<p>type: 1<br />
7b14c53fd3604cc1ebca5af4415afed5</p>

<p>type: 1<br />
3a8ea62e32b4ecbe33df500a28ebc873</p>

<p>type: 1<br />
cc16956c9506cd2bb389a7d7da2433bd</p>

<p>type: 2<br />
fe4ccc64159253a6019304f17102886d<br />
f241c3073a5777742c341472e2d43eec</p>

<p>type: 1<br />
4ec2564ace982dc58c1039bf6d6ea83c</p>

<p>type: 2<br />
ab0cef9e5957129e23fba178120fa20b<br />
f758024e734077c70532e90251c5df02</p>

<p>type: 1<br />
f35a60617ab336de4daac799676d07b6</p>

<p>type: 1<br />
6a62ead801802a5c9ec828d0c1edbb5b</p>

<p>type: 1<br />
600c7b52e7f80832e3cee84fcec88b9d</p>

<p>type: 2<br />
6e75b2d7470e9864d19e48cb360caf64<br />
fb559bcd103ee0fcb0cf4161b0fafb19</p>

<p>type: 1<br />
690ad61ec7859a0964216b66b5d33b1a</p>

<p>type: 2<br />
09da9df3a050afad0df0ef963b41b6e2<br />
fae3b06ab27f2b0f7c29bf7f2b03f83f</p>

<p>type: 1<br />
d4b958671f47bf5dcd08705d80de9a53</p>

  </div>

  <div class="date">
    Written on March 27, 2019
  </div>

  
</article>

    </div>

    <div class="wrapper-footer">
      <div class="container">
        <footer class="footer">
          



<a href="https://github.com/mauronz"><i class="svg-icon github"></i></a>




<a href="https://www.twitter.com/FraMauronz"><i class="svg-icon twitter"></i></a>



        </footer>
      </div>
    </div>

    
	<!-- Google Analytics -->
	<script>
		(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
		(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
		m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
		})(window,document,'script','//www.google-analytics.com/analytics.js','ga');

		ga('create', 'UA-89896855-1', 'auto');
		ga('send', 'pageview', {
		  'page': '/shadowhammer-backdoor/',
		  'title': 'Analysis of the ShadowHammer backdoor'
		});
	</script>
	<!-- End Google Analytics -->


  </body>
</html>
