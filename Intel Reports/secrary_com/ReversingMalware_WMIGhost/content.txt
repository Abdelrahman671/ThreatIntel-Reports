<!DOCTYPE html> <html> <head> <meta charset="utf-8"> <meta name="apple-mobile-web-app-capable" content="yes"> <meta http-equiv="X-UA-Compatible" content="IE=edge"> <meta name="viewport" content="width=device-width, initial-scale=1"> <title> WMIGhost / Wimmie - WMI malware | secrary[dot]com </title> <meta name="description" content=" secrary[dot]com::blog "> <meta name="keywords" content="reverse engineering, malware, windows, android, internals, blog"> <meta name="HandheldFriendly" content="True"> <meta name="MobileOptimized" content="320"> <!-- Social: Facebook / Open Graph --> <meta property="og:type" content="website"> <meta property="og:url" content="https://secrary.com/ReversingMalware/WMIGhost/"> <meta property="og:title" content=" WMIGhost / Wimmie - WMI malware | secrary[dot]com "> <meta property="og:image" content="https://secrary.com"> <meta property="og:description" content=" secrary[dot]com::blog "> <meta property="og:site_name" content="@_qaz_qaz"> <meta property="og:locale" content="en_US"> <!-- Social: Twitter --> <meta name="twitter:card" content="summary_large_image"> <meta name="twitter:site" content="@_qaz_qaz"> <meta name="twitter:title" content=" WMIGhost / Wimmie - WMI malware | secrary[dot]com "> <meta name="twitter:description" content=" secrary[dot]com::blog "> <meta name="twitter:image:src" content="https://secrary.com"> <!-- Social: Google+ / Schema.org --> <meta itemprop="name" content=" WMIGhost / Wimmie - WMI malware | secrary[dot]com "> <meta itemprop="description" content=" secrary[dot]com::blog "> <meta itemprop="image" content="https://secrary.com"> <!-- Canonical link tag --> <link rel="canonical" href="https://secrary.com/ReversingMalware/WMIGhost/"> <link rel="alternate" type="application/rss+xml" title="secrary[dot]com" href="https://secrary.com/feed.xml"> <!-- rel prev and next --> <link rel="stylesheet" href="https://secrary.com/assets/css/main.css"> </head> <body> <main class="wrapper"> <header class="site-header"> <nav class="nav"> <div class="container"> <h1 class="logo"><a href="https://secrary.com/">secrary<span>[dot]com</span></a></h1> <ul class="navbar"> <li><a href="https://secrary.com/about">about me</a></li> <!-- <li><a href="https://secrary.com/feed.xml" target="_blank">RSS</a></li> --> </ul> </div> </nav> </header> <article class="post container" itemscope itemtype="http://schema.org/BlogPosting" > <header class="post-header"> <h1 class="post-title" itemprop="name headline">WMIGhost / Wimmie - WMI malware</h1> </header> <div class="post-content" itemprop="articleBody"> <p>WMIGhost / Wimmie sample is from <a href="https://github.com/ytisf/theZoo/tree/master/malwares/Binaries/WMIGhost" title="theZoo">theZoo</a></p> <p>SHA256: <code class="language-plaintext highlighter-rouge">a6ff8dfe654da70390cd71626cdca8a6f6a0d7980cd7d82269373737b04fd206</code></p> <p>The sample has <code class="language-plaintext highlighter-rouge">.dll</code> extension but there are no exports and according to characteristics, it’s not <code class="language-plaintext highlighter-rouge">dll</code> file, I’ve changed the extension to <code class="language-plaintext highlighter-rouge">.exe</code></p> <p><img src="https://user-images.githubusercontent.com/16405698/28249223-7e2a074a-6a62-11e7-976a-4c99a96e8829.png" alt="image" /></p> <p>We can use the report from <a href="https://www.hybrid-analysis.com/sample/a6ff8dfe654da70390cd71626cdca8a6f6a0d7980cd7d82269373737b04fd206?environmentId=100" title="hybrid-analysis">hybrid-analysis</a>.</p> <p>There is no protection, let’s dive in deep.</p> <p><img src="https://user-images.githubusercontent.com/16405698/28249243-f385b11a-6a62-11e7-91d2-5bbe286f6db7.png" alt="image" /></p> <p>From the beginning, it decrypts text using <code class="language-plaintext highlighter-rouge">XOR</code> with <code class="language-plaintext highlighter-rouge">0x63</code> and <code class="language-plaintext highlighter-rouge">0xE9</code>:</p> <p><img src="https://user-images.githubusercontent.com/16405698/28249284-a3812ffe-6a63-11e7-927e-95a8e3963fc4.png" alt="image" /></p> <p>Decrypted text:</p> <p>Raw format- <a href="https://gist.github.com/secrary/8705c3cf184aec54f370c5704742602d" title="Gist link">Gist link</a></p> <p>Much more readable: <a href="https://gist.github.com/secrary/a67efdd15cdddc5e39fa2ce75fcf16c9" title="Gist Link">Gist Link</a></p> <p><img src="https://user-images.githubusercontent.com/16405698/28249405-ffb4522c-6a65-11e7-8858-8f15a2c0ae2f.png" alt="image" /></p> <p><code class="language-plaintext highlighter-rouge">NOTE</code>: you can use my script to extract decrypted text from the executable: <a href="https://gist.github.com/secrary/c4fd3273a24da449795cc47f2e4378ef" title="Gist link">Gist link</a>.</p> <p>The malware uses <code class="language-plaintext highlighter-rouge">CoCreateInstance</code> function to get access to <code class="language-plaintext highlighter-rouge">COM</code> functionality.</p> <p>The Microsoft Component Object Model (COM) is an interface standard that makes it possible for different software components to call each other’s code without knowledge of specifics about each other.</p> <p><img src="https://user-images.githubusercontent.com/16405698/28249341-fc4b15cc-6a64-11e7-97e6-1f7eb4b93cbd.png" alt="image" /></p> <p><code class="language-plaintext highlighter-rouge">MS Script Control</code> is provided in <code class="language-plaintext highlighter-rouge">msscript.ocx</code>. It is a very handy tool to run VBScript/JScript without relying on <code class="language-plaintext highlighter-rouge">CScript.exe</code> or <code class="language-plaintext highlighter-rouge">WScript.exe</code>.</p> <p>Seems like malware uses <code class="language-plaintext highlighter-rouge">Script Control</code> via <code class="language-plaintext highlighter-rouge">COM</code> to execute decrypted function without <code class="language-plaintext highlighter-rouge">CScript.exe</code> or <code class="language-plaintext highlighter-rouge">WScript.exe</code>.</p> <p><code class="language-plaintext highlighter-rouge">call dword ptr[ecx+20h]</code> calls some function from <code class="language-plaintext highlighter-rouge">msscript.ocx</code>, but I have no idea which function, there are no symbols, but I think it chooses <code class="language-plaintext highlighter-rouge">javascript</code> to execute the script:</p> <p><img src="https://user-images.githubusercontent.com/16405698/28249463-6871beac-6a67-11e7-94ad-945a832fa954.png" alt="image" /></p> <p>(Click <a href="https://user-images.githubusercontent.com/16405698/28249463-6871beac-6a67-11e7-94ad-945a832fa954.png">here</a> to view a larger version)</p> <p><img src="https://user-images.githubusercontent.com/16405698/28249433-b4a4040c-6a66-11e7-84e8-a34dbbd94b0f.png" alt="image" /></p> <p>After this at <code class="language-plaintext highlighter-rouge">00401AB7</code> there is another call to function from <code class="language-plaintext highlighter-rouge">msscript.ocx</code>:</p> <p><img src="https://user-images.githubusercontent.com/16405698/28249497-f88cd2ba-6a67-11e7-806b-212657d531ab.png" alt="image" /></p> <p>I think this function is used to execute the script because it causes creation of new process <code class="language-plaintext highlighter-rouge">scrcons.exe</code></p> <p><img src="https://user-images.githubusercontent.com/16405698/28249510-3b7196e2-6a68-11e7-80c1-168c27ec7254.png" alt="image" /></p> <p>According to <code class="language-plaintext highlighter-rouge">TrendMicro</code>’s great <a href="https://www.trendmicro.de/cloud-content/us/pdfs/security-intelligence/white-papers/wp__understanding-wmi-malware.pdf" title="paper">paper</a>:</p> <p><code class="language-plaintext highlighter-rouge">Based on our analysis of using JS, the application wscript.exe is responsible for executing the malicious code. However, in the case of WMI implementation, such a script is executed by the WMI Standard Event Consumer - scripting application, which can be found in the WMI folder in %system32%/ wbem/scrcons.exe. This makes the script hard to detect since it uses a not-so-common WMI application—scrcons.exe—rather than the traditional JS application—wscript.exe.</code></p> <p>Yes, the sample uses <code class="language-plaintext highlighter-rouge">WMI</code> and executes the script using <code class="language-plaintext highlighter-rouge">scrcons.exe</code>.</p> <p>After creation of the new process, it also creates <code class="language-plaintext highlighter-rouge">httpcom.log</code> file and writes infection date:</p> <p><img src="https://user-images.githubusercontent.com/16405698/28249621-2ca2350c-6a6a-11e7-99c5-8bd9df759f48.png" alt="image" /></p> <p>Before exit it tries to delete <code class="language-plaintext highlighter-rouge">instell.exe</code> without success:</p> <p><img src="https://user-images.githubusercontent.com/16405698/28249576-6fcd482c-6a69-11e7-9963-6eef868d83d9.png" alt="image" /></p> <p>That’s executable, let’s look at the <a href="https://gist.github.com/secrary/8153a0cb8b4954429e1c430ad4821f96" title="script">script</a>:</p> <p><img src="https://user-images.githubusercontent.com/16405698/28249667-413e6bba-6a6b-11e7-93a3-d66baabe0716.png" alt="image" /></p> <p>(Click <a href="https://user-images.githubusercontent.com/16405698/28249667-413e6bba-6a6b-11e7-93a3-d66baabe0716.png">here</a> to view a larger version)</p> <p>It creates instance of <code class="language-plaintext highlighter-rouge">ActiveScriptEventConsumer</code> under <code class="language-plaintext highlighter-rouge">root\subscription</code> namespace, executes <code class="language-plaintext highlighter-rouge">Javascript</code> script every <code class="language-plaintext highlighter-rouge">0x6e3</code> milliseconds , you can get the script from the <a href="https://gist.github.com/secrary/a67efdd15cdddc5e39fa2ce75fcf16c9" title="Gist">Gist</a> or get using <a href="https://wmie.codeplex.com/" title="`WMI Explorer`"><code class="language-plaintext highlighter-rouge">WMI Explorer</code></a>, it’s under <code class="language-plaintext highlighter-rouge">ROOT\subscription</code> namespace, the class is <code class="language-plaintext highlighter-rouge">ActiveScriptEventConsumer</code>, the name of the instance is <code class="language-plaintext highlighter-rouge">ProbeScriptFint</code>, the script is a value of the <code class="language-plaintext highlighter-rouge">ScriptText</code> property.</p> <p><img src="https://user-images.githubusercontent.com/16405698/28249657-01e2eb12-6a6b-11e7-8f9b-1d965588f3fd.png" alt="image" /></p> <p>(Click <a href="https://user-images.githubusercontent.com/16405698/28249657-01e2eb12-6a6b-11e7-8f9b-1d965588f3fd.png">here</a> to view a larger version)</p> <p>WMI classes stored in namespace: <code class="language-plaintext highlighter-rouge">subscription</code> allow permanent and general access to WMI services.</p> <p><code class="language-plaintext highlighter-rouge">new MAIN().Fire()</code> causes executing of <code class="language-plaintext highlighter-rouge">MAIN</code> routine:</p> <p><img src="https://user-images.githubusercontent.com/16405698/28249735-835bb9e8-6a6c-11e7-9db0-e7a133dc98d1.png" alt="image" /></p> <p><code class="language-plaintext highlighter-rouge">CleanObjects</code> terminates execution of the script:</p> <p><img src="https://user-images.githubusercontent.com/16405698/28249752-c41a1e48-6a6c-11e7-97bc-ef4223e2a3b5.png" alt="image" /></p> <p>Parses URLs from the argument and sends information about infected PC:</p> <p><img src="https://user-images.githubusercontent.com/16405698/28249779-4087c6e2-6a6d-11e7-850d-01fc7436b96c.png" alt="image" /></p> <p><img src="https://user-images.githubusercontent.com/16405698/28249788-62d7e5ec-6a6d-11e7-8084-f9fb00224923.png" alt="image" /></p> <p>Receives commands and sends results:</p> <p><img src="https://user-images.githubusercontent.com/16405698/28249794-9d6dbe0c-6a6d-11e7-804d-95c2408cdee0.png" alt="image" /></p> <p><img src="https://user-images.githubusercontent.com/16405698/28249803-e3a16aa4-6a6d-11e7-9e5f-a6c8fddadce3.png" alt="image" /></p> <p>If you prefer you can dive deeper into the script, it’s not obfuscated and is easy to analyze.</p> <p>That’s all… WMIGhost / Wimmie is a very interesting malware, it uses <code class="language-plaintext highlighter-rouge">WMI</code> to achieve persistence and get system related information, the script is not on the disk.</p> <p>We can get information about <code class="language-plaintext highlighter-rouge">WMI Database Entries</code> using <code class="language-plaintext highlighter-rouge">Autoruns</code>:</p> <p><img src="https://user-images.githubusercontent.com/16405698/28249882-5c6286b6-6a6f-11e7-9a09-0877bc162a2a.png" alt="image" /></p> <p>Maybe I overlook something related to <code class="language-plaintext highlighter-rouge">WMIGhost</code>, due to my limited knowledge, if you find something interesting please contact me.</p> <p>I’m new to reversing malware and any kind of feedback is helpful for me.</p> <p>Twitter: <a href="https://twitter.com/_qaz_qaz">@_qaz_qaz</a></p> <p><strong>Resources</strong>:</p> <p><a href="https://www.trendmicro.de/cloud-content/us/pdfs/security-intelligence/white-papers/wp__understanding-wmi-malware.pdf" title="Understanding WMI Malware">Understanding WMI Malware</a></p> </div> </article> <footer class="site-footer"> <div class="container"> <small class="block" >&copy; 2022 &middot; @_qaz_qaz </small> </div> </footer> </main> <script>(function(){function c(){var b=a.contentDocument||a.contentWindow.document;if(b){var d=b.createElement('script');d.innerHTML="window.__CF$cv$params={r:'8f3c5cfb58b064a8',t:'MTczNDQ5NTY1Ni4wMDAwMDA='};var a=document.createElement('script');a.nonce='';a.src='/cdn-cgi/challenge-platform/scripts/jsd/main.js';document.getElementsByTagName('head')[0].appendChild(a);";b.getElementsByTagName('head')[0].appendChild(d)}}if(document.body){var a=document.createElement('iframe');a.height=1;a.width=1;a.style.position='absolute';a.style.top=0;a.style.left=0;a.style.border='none';a.style.visibility='hidden';document.body.appendChild(a);if('loading'!==document.readyState)c();else if(window.addEventListener)document.addEventListener('DOMContentLoaded',c);else{var e=document.onreadystatechange||function(){};document.onreadystatechange=function(b){e(b);'loading'!==document.readyState&&(document.onreadystatechange=e,c())}}}})();</script></body> </html>
