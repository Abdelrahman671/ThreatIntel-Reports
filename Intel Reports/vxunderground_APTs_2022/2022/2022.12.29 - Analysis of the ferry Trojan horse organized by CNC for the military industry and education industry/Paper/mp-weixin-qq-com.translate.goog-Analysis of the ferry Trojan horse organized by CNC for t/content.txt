1/28
mp-weixin-qq-com.translate.goog
/s/uEjNpw-rtpjGGPacJS19WQ
Analysis of the "ferry" Trojan horse organized by CNC for the
military industry and education industry
Antiy CERT Antiy Group 2022-12-29 10:00
Antiy Group
ID Antiylab
Antiy is a network security national team leading the development of threat detection and defense
capabilities. Relying on independent advanced core technologies and security concepts, Antiy is
committed to providing overall security solutions for strategic customers and critical infrastructure. Antiy
products and services provide customers with basic capabilities such as endpoint protection, border
protection, traffic monitoring, diversion capture, in-depth analysis, and emergency response.
published in Beijing
Included in collection
Click on the "blue word" above
Follow us!
01
overview
Recently, Antiy Emergency Response Center ( Antiy CERT ) discovered two downloaders used by the
CNC organization when sorting out the attack activities . One of the downloaders has the ability to ferry
attacks, using mobile storage devices as One downloader steals files of interest to the attacker; another
downloader communicates using a deceptive C2 node with an untrusted digital certificate.
The CNC organization is currently known to have been discovered as early as 2019. At that time, the
organization was named CNC because the PDB path information of the remote control Trojan it used
2/28
contained cnc_client. The organization mainly targets military and education industries.
02
sample analysis
2.1 PrivateImage.png.exe (Downloader 1)
2.1.1 Sample overview
PrivateImage.png.exe will choose two ways to execute according to whether the file is in the
%localappdata% path.
1. If it is under the %localappdata% path, continuously check whether there is a new device connected; if
so, copy the file itself to the new device so that it can be spread through the removable device.
2. If it is not in the %localappdata% path, first determine whether %localappdata%\ImageEditor.exe
exists:
1) If present, skip subsequent operations and exit.
2) If it does not exist, determine the Internet connection status:
a) If you can connect to the Internet, download the follow-up downloader.
b) If you cannot connect to the Internet, get the file with the .docx or .pptx suffix from the shortcut in the
Recent folder, copy the file to a new hidden folder named after the user name in the current directory, and
replace the . file path name.
2.1.2 Detailed Analysis
Table 2-1 PrivateImage.png.exe
virus name
Trojan[Downloader]/Win32.APT
original file
name
PrivateImage.png .exe (the space is very long, disguised as
a picture)
MD5
da3d305d1b47c8934d5e1f3296a8efe0
processor
architecture
AMD AMD64
File size
1.16 MB (1216000 bytes)
file format
Win32 EXE
timestamp
2022-02-23 21:30:27 UTC
digital
signature
none
Packing type
none
compiled
language
Compiler: Microsoft Visual C/C++ (2017 v.15.9)
3/28
VT first upload
time
2022-03-26 10:51:26 UTC
VT test results 12/70
After the sample is run, it will first obtain the current user name, which will be used in subsequent path
splicing operations.
Figure 2‑1 Get the current user name
Get the path of the current file and determine whether it is in the %localappdata% directory.
Figure 2‑2 Determine whether appdata\local is included in the path
If in the %localappdata% directory, all drive strings in the system will be fetched.
4/28
Figure 2‑3 Get all drive strings in the system
Whether a new device is connected is determined by judging whether the previous drive string is the
same as the drive string obtained this time.
Figure 2‑4 Judging whether there is a new device connected
If there is a new device, get the name of the new device, and if the current file does not exist in the new
device, copy the current file to the new device. The indicator word "-firstcry" is then spliced ​​to the
hostname to communicate with the attacker-controlled device. If the current file already exists on the new
device, the indicator word "-alleat" is appended to the hostname.
5/28
Figure 2‑5 Copying the sample itself to a new device
The samples communicate with attacker-controlled devices.
Figure 2‑6 Send the status of the new device back to the control terminal
If it is not in the %localappdata% directory, load the image in the sample resource and release it to the
same directory to open.
6/28
Figure 2-7 Load and open the picture in the resource
Images included in the resources section.
7/28
Figure 2‑8 Images included in sample resources
String concatenation is performed first.
Figure 2‑9 String concatenation
Then judge whether %localappdata%\ImageEditor.exe exists, if it exists, skip subsequent operations and
end the process.
8/28
Figure 2‑10 Determine whether a file exists by obtaining file attributes
Test the communication with www[.]baidu.com to judge the Internet connection status in the current
environment.
Figure 2‑11 Test whether it is connected to the Internet
If the Internet is not available, strings are concatenated to create a hidden folder named after the current
user name in the directory where the sample is located.
9/28
Figure 2‑12 Create a hidden folder
Get the .docx or .pptx suffix files from the shortcut under the Recent folder, and find the recently opened
.docx and .pptx suffix files.
Figure 2‑13 File search
If found, it will be copied to the created hidden folder, and the file will be named by changing "\" and ":" in
the full path of the file to "_".
10/28
Figure 2‑14 File Copy
The files collected in the test machine and their naming methods are as follows.
Figure 2‑15 Files collected in the test machine
If the Internet is available, check whether the C:\ProgramData\USOshared folder exists, and create the
folder if it does not exist.
Figure 2‑16 Create a folder
A malicious follow-on downloader will then be downloaded from
185.25.51.41/control/utility/YodaoCloudMgr , copied to the USOshared folder, and the downloaded file in
%temp% will then be deleted.
Figure 2‑17 The concatenated string is used to download subsequent downloaders
11/28
If the file is successfully downloaded, save it to YodaoCloudMgr under %temp%.
Figure 2-18 Download and save to local
Copy YodaoCloudMgr from %temp% to C:\ProgramData\USOshared\YodaoCloudMgr.exe and delete the
YodaoCloudMgr file under %temp%.
Figure 2‑19 Copy and delete operations
Create a task plan, add C:\ProgramData\USOshared\YodaoCloudMgr.exe to the task scheduler library,
and execute it every 2 minutes. And construct the return information according to the results of
downloading and creating the task plan: 23Fi45XX means the download is successful, 23Fi45NNXX
means the download fails; 45tDdd43543 means the task plan is successfully created, and 45tDnn43543
means the task plan fails to be created.
12/28
Figure 2‑20 Create a task plan and execute the YodaoCloudMgr.exe file regularly
The task plan created in the test machine is as follows.
Figure 2‑21 Created task plan
Get a list of processes in the current environment.
13/28
Figure 2-22 Get process list
Splice the obtained process list with the previously constructed return information, and use the base64
encoding method to process the spliced ​​content.
Figure 2‑23 Splicing the returned information
Use URLDownloadToFileW to communicate with the control terminal and return the collected information.
If the creation of the task plan fails, execute C:\ProgramData\USOshared\YodaoCloudMgr.exe through
CreateProcessA. According to static analysis, if YodaoCloudMgr.exe fails to start, it will get the content
from the github repository and execute it after deleting the file.
14/28
Figure 2‑24 Get Content Execution
2.2 YodaoCloudMgr.exe (Downloader 2)
2.2.1 Sample overview
YodaoCloudMgr.exe is downloaded and executed by PrivateImage.png.exe, and is mainly used to
download subsequent payloads. During the analysis, it was found that there were related codes such as
file search and startup process inside the file, and the untrusted certificate used by the sample in
communication was also found.
Figure 2‑25 Communication using untrusted certificates
2.2.2 Detailed Analysis
15/28
Table 2-2 YodaoCloudMgr.exe file
virus name
Trojan[Downloader]/Win32.APT
original file
name
yodaocloudmgr.exe_
MD5
c024eb3035dd010de98839a2eb90b46b
processor
architecture
AMD AMD64
File size
3.22 MB (3378688 bytes)
file format
Win32 EXE
timestamp
2022-01-14 23:47:14 UTC
digital signature none
Packing type
none
compiled
language
Microsoft Visual C/C++ (2017 v.15.9)
VT first upload
time
2022-03-28 16:26:44 UTC
VT test results
18/71
There is a string to be decrypted in the sample.
Figure 2‑26 String with decryption
The string is decrypted through the symmetric encryption XXTEA algorithm.
16/28
Figure 2‑27 Encryption algorithm
Obtain file information through the stat function to determine whether RNGdTMP899 exists.
17/28
Figure 2-28 Determine whether the RNGdTMP899 file exists in the %temp% path
If the file does not exist, a random string of 15 bytes is generated, and the random string is used for URL
splicing. The byte value is in
"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".
18/28
Figure 2-29 Generate 15-byte random string
If the RNGdTMP899 file does not exist in the current environment, create the RNGdTMP899 file.
19/28
Figure 2‑30 Create RNGdTMP899 file
Then write random strings to the file.
Figure 2-31 Write random string
Determine the RNGdTMP899 file attribute, if the file is not a hidden attribute, set it as a hidden attribute.
Figure 2‑32 Modify the RNGdTMP899 file attribute to hide
Get the random string in RNGdTMP899. The random string generated this time is RLCTEJddUbAJMJR
and spliced ​​into https[:]//45.86.162.114/query=RLCTEJddUbAJMJR/%20%getting,forum.
Figure 2-33 URL concatenation
20/28
According to network behavior observations, the sample will first request spliced ​​
https[:]//45.86.162.114/query=RLCTEJddUbAJMJR/%20%getting,forum, and then request
https[:]//45.86.162.114/images-css/RLCTEJddUbAJMJR/ imagelogo.css gets the data.
Figure 2‑34 Splicing URLs
Then every 1 minute, loop request
https[:]//raw.githubusercontent.com/yuiopk1456/beutifymyapp/main/LICENSE. From the URL, it can be
seen that the attacker may transmit data through the github platform after the specified IP fails, and it is
guessed that the transmitted data may be the IP or domain name specified by the attacker after
encryption by the XXTEA algorithm.
Figure 2‑35 Execute the code in a loop with an interval of 1 minute
Find the marker position where the data was received.
21/28
Figure 2-36 Find the mark position of the received data
There should be a decryption operation on the subsequent data.
Figure 2‑37 Decrypted obtained data
By searching for beutifymyapp on github, it is linked to the github repository of the suspected
organization. The name of the creator of the repository is also similar to the name of the creator of the
github repository in this attack, yuiopk1456. Operations on this repository only existed in November 2021,
and no other repositories were created after that.
Figure 2‑38 Similar repositories associated to github
In related similar repositories, suspicious strings were found, which may be encrypted domain names or
IPs.
22/28
Figure 2‑39 Suspicious strings in github
Connect to the IP or domain name stored in the github repository.
Figure 2-40 socket connection
Since the domain name, IP and github address are all invalid, it is impossible to continue to follow up.
Through the static analysis of the sample, it is inferred that after the attacker communicates with the
control terminal, there may be operations such as obtaining the list of files in the specified directory,
starting the process, and so on.
Get the list of files in the specified directory.
23/28
Figure 2‑41 File search related operations
Create pipelines.
Figure 2‑42 Create a pipeline
Start the process.
24/28
Figure 2‑43 Start process
03
Attribution Analysis
In the previous observations, it was found that some CNC organization personnel would integrate vcpkg
in the development environment. This feature also exists in the samples discovered this time, and the
path is also consistent with the path used in the past.
Figure 3‑1 Path information in this attack
25/28
Figure 3‑2 Path information in past attacks
Part of the code in the sample is also very similar.
Figure 3‑3 Part of the code in this attack
Figure 3‑4 Some codes in previous attacks
Encryption functions are roughly the same.
26/28
Figure 3‑5 Some codes of encryption functions in previous attacks
Figure 3-6 Part of the code of the encryption function in this attack
To sum up, the attack activity is preliminarily attributed to the CNC organization.
04
Threat Framework Mapping
This attack involved a total of 15 technical points in 8 stages in the ATT&CK framework. The specific
behaviors are described in the following table:
Table 4‑1 Description of technical behaviors of recent CNC attack activities
27/28
The ATT&CK framework map of the behavioral technical points of CNC organization-related attack
activities is shown in the following figure:
Figure 4-1 CNC group attack activities correspond to ATT&CK framework mapping
05
Summarize
28/28
In recent years, the intention of APT organizations to attack the isolated network has become more and
more obvious, and the number of attack samples penetrating the isolated network has continued to
increase. The attack organizations represented by Darkhotel 
[1] and Young Elephant 
[2] [3] have developed
related attacks by themselves . Weapons are constantly updated. The CNC organization sample in this
attack activity has also been upgraded compared with the organization's previous samples. The vcpkg
development environment was also integrated during the development phase, and there was also the
behavior of obtaining content from the github repository. In the lateral movement stage, the method of
judging whether there is a new storage device access is different from the previous method of judging the
type of access device through GetDriveTypeA. The samples of this attack activity continuously obtain the
drive list. When a new storage device is connected, the file is copied to the newly connected storage
device, so as to achieve the purpose of spreading in the isolated network.
06
IOC
185.25.51.41
45.86.162.114
da3d305d1b47c8934d5e1f3296a8efe0
c024eb3035dd010de98839a2eb90b46b
https://raw.githubusercontent.com/yuiopk1456/beutifymyapp/main/LICENSE
https://raw.githubusercontent.com/gazelter231trivoikpo1/questions/main/beautify.js
References:
[1] Analysis of the Ramsay component of the Darkhotel organization’s infiltration isolation network
https://www.antiy.cn/research/notice&report/research_report/20200522.html
[2] "Baby Elephant" organization's attack activities against Pakistani defense manufacturers analysis
report
https://www.antiy.cn/research/notice&report/research_report/20210222.html
[3] Analysis of the cyber attack activities of the "Baby Elephant" organization in South Asia
