<!DOCTYPE html><html lang="en"><head><link href="/theme/css/bootstrap.min.css" rel="stylesheet" type="text/css"/><link href="/theme/css/font-awesome.min.css" rel="stylesheet" type="text/css"/><link href="/theme/css/fonts.css" rel="stylesheet" type="text/css"/><link href="/theme/css/pygment.css" rel="stylesheet" type="text/css"/><link href="/theme/css/blog.css" rel="stylesheet" type="text/css"/><meta charset="utf-8"/><meta content="width=device-width, initial-scale=1.0" name="viewport"/><link href="/theme/images/favicon.ico" rel="icon" type="image/x-icon"/><title>Lexfo's security blog - Dridex Loader Analysis</title></head><body><a class="float" id="float" onclick="window.scrollTo({top: 0, behavior: 'smooth'});" style="opacity: 0 !important"><i class="fas fa-arrow-up"></i></a><script>
			document.addEventListener("scroll", (event) => {
				float = document.getElementById("float")
				if (document.documentElement.scrollTop == 0) {
					float.style.opacity = 0;
				} else {
					float.style.opacity = 1;
				}
			});
		</script><nav class="navbar"><a href="https://lexfo.fr"><embed class="logo" src="/theme/images/lexfo-logo.svg"/></a><div class="nav-links"><a class="nav-link" href="/index.html">BLOG POSTS</a> <a class="nav-link" href="/categories.html">CATEGORIES</a> <a class="nav-link" href="/tags.html">TAGS</a> <a class="nav-link" href="/archives.html">ARCHIVES</a></div><a class="nav-link contact-button" href="https://lexfo.fr/contact/">CONTACT US</a></nav><header><h1><span class="gradient">Dridex Loader Analysis</span></h1><div class="blog-post-meta"><p><span class="mr-3">Tue 06 April 2021 by <strong>Lexfo</strong> in <a href="category/malware.html">Malware</a>.</span></p></div><div class="col-md-12 row mb-3" hidden=""><a class="tag" href="tag/dridex.html"><span class="fas fa-tag"></span> Dridex</a> <a class="tag" href="tag/loader.html"><span class="fas fa-tag"></span> Loader</a> <a class="tag" href="tag/trojan.html"><span class="fas fa-tag"></span> Trojan</a> <a class="tag" href="tag/banking.html"><span class="fas fa-tag"></span> Banking</a> <a class="tag" href="tag/ida.html"><span class="fas fa-tag"></span> Ida</a> <a class="tag" href="tag/reverse.html"><span class="fas fa-tag"></span> Reverse</a> <a class="tag" href="tag/malware.html"><span class="fas fa-tag"></span> Malware</a></div><div class="col-md-12 row"><a class="tag share-twitter" href="https://twitter.com/intent/tweet?text=Dridex%20Loader%20Analysis&amp;url=https%3A//blog.lexfo.fr/dridex-malware.html" rel="nofollow noopener" target="_blank"><span class="fab fa-x-twitter"></span></a> <a class="tag share-facebook" href="http://www.facebook.com/sharer/sharer.php?u=https%3A//blog.lexfo.fr/dridex-malware.html" rel="nofollow noopener" target="_blank"><span class="fab fa-facebook-f"></span></a> <a class="tag share-linkedin" href="https://www.linkedin.com/shareArticle?mini=true&amp;url=https%3A//blog.lexfo.fr/dridex-malware.html&amp;title=Dridex%20Loader%20Analysis&amp;summary=This%20article%20is%20a%20deep%20dive%20into%20the%20Dridex%20Loader&amp;source=https%3A//blog.lexfo.fr/dridex-malware.html" rel="nofollow noopener" target="_blank"><span class="fab fa-linkedin-in"></span></a> <a class="tag share-email" href="mailto:?subject=Dridex%20Loader%20Analysis&amp;body=https%3A//blog.lexfo.fr/dridex-malware.html" rel="nofollow noopener" target="_blank"><span class="fas fa-envelope"></span></a></div></header><main class="blog-post"><div class="blog-post-content"><h1 id="introduction">Introduction</h1><p>Dridex is an old banking Trojan that appeared in 2014 and is still very active today. This is mainly due to its evolution and its complex design/architecture based on proxy layers to hide the main command and control (C&amp;C). This article is a detailed analysis of the Dridex loader found in the wild earlier this year (2021).</p><p>The first part is about anti-debug bypass and string/API recovery and the second part is more focused on the loader functionality.</p><h1 id="anti-debug-rtladdvectoredexceptionhandler">Anti-debug - RtlAddVectoredExceptionHandler</h1><p>At the beginning of the Dridex loader code, a function is registered using the native API <strong>RtlAddVectoredExceptionHandler</strong> to handle all the exceptions raised by the "int 3" instructions placed everywhere in the loader:<br/></p><figure><img src="/images/dridex/int_3.PNG"/><figcaption>int_3</figcaption></figure><p></p><p>This instruction is always followed by the "ret" instruction, preceded by push instructions and a function that takes two DWORDs. This function is actually a custom "GetProcAddress" <a href="#APIs">API</a> and <code>int 3</code> is a trampoline to execute the previously resolved API via the registered exception handler.</p><p>The handler checks if the Exception Code is <code>EXCEPTION_BREAKPOINT</code> and modifies the ESP register in the <code>PCONTEXT</code> structure accordingly for the next <code>ret</code> instruction to execute the real API:<br/></p><figure><img src="/images/dridex/PCONTEXT.PNG"/><figcaption>PCONTEXT_struct</figcaption></figure><p></p><p>To get a better control flow graph and to avoid having your debugger break for each API, a small IDA script can be made to find and patch at runtime all the <code>int 3; ret</code> instructions by <code>call eax</code>:</p><div class="highlight"><pre><span></span><code><span class="kn">from</span> <span class="nn">idaapi</span> <span class="kn">import</span> <span class="n">get_segm_by_name</span>
<span class="kn">from</span> <span class="nn">idc</span> <span class="kn">import</span> <span class="n">patch_byte</span><span class="p">,</span> <span class="n">add_bpt</span><span class="p">,</span> <span class="n">set_bpt_cond</span><span class="p">,</span> <span class="n">BPT_EXEC</span><span class="p">,</span> <span class="n">load_and_run_plugin</span>
<span class="kn">import</span> <span class="nn">ida_search</span>

<span class="n">load_and_run_plugin</span><span class="p">(</span><span class="s2">"idapython"</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">find_all_occurences</span><span class="p">(</span><span class="n">start</span><span class="p">,</span> <span class="n">end</span><span class="p">,</span> <span class="n">bin_str</span><span class="p">,</span> <span class="n">flags</span><span class="p">):</span>
    <span class="n">occurences</span> <span class="o">=</span> <span class="nb">list</span><span class="p">()</span>
    <span class="n">ea</span> <span class="o">=</span> <span class="n">start</span>
    <span class="k">while</span> <span class="n">ea</span> <span class="o">&lt;=</span> <span class="n">end</span><span class="p">:</span>
        <span class="n">occurence</span> <span class="o">=</span> <span class="n">ida_search</span><span class="o">.</span><span class="n">find_binary</span><span class="p">(</span><span class="n">ea</span><span class="p">,</span> <span class="n">end</span><span class="p">,</span> <span class="n">bin_str</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">flags</span><span class="p">)</span>
        <span class="n">ea</span> <span class="o">=</span> <span class="n">occurence</span> <span class="o">+</span> <span class="mi">1</span>
        <span class="n">occurences</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">occurence</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">occurences</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>


<span class="k">def</span> <span class="nf">patch_binary</span><span class="p">():</span>
    <span class="n">segment</span> <span class="o">=</span> <span class="n">get_segm_by_name</span><span class="p">(</span><span class="s1">'.text'</span><span class="p">)</span>
    <span class="n">occurences</span> <span class="o">=</span> <span class="n">find_all_occurences</span><span class="p">(</span><span class="n">segment</span><span class="o">.</span><span class="n">start_ea</span><span class="p">,</span> <span class="n">segment</span><span class="o">.</span><span class="n">end_ea</span><span class="p">,</span> <span class="s2">"CC C3"</span><span class="p">,</span> <span class="n">ida_search</span><span class="o">.</span><span class="n">SEARCH_DOWN</span><span class="p">)</span>

    <span class="n">datas</span> <span class="o">=</span> <span class="p">[</span><span class="mh">0xFF</span><span class="p">,</span> <span class="mh">0xD0</span><span class="p">]</span>
    <span class="k">for</span> <span class="n">occurence</span> <span class="ow">in</span> <span class="n">occurences</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">byte</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">datas</span><span class="p">):</span>
            <span class="n">patch_byte</span><span class="p">(</span><span class="n">occurence</span> <span class="o">+</span> <span class="n">i</span><span class="p">,</span> <span class="n">byte</span><span class="p">)</span>
    <span class="k">return</span> <span class="kc">True</span>
</code></pre></div><h1 id="apis">APIs</h1><p>As usual, all the API names are obfuscated and as mentioned earlier, addresses are resolved without using the classical GetProcAddress. Instead, loaded libraries are parsed and functions names are enumerated from the PE export directory header until the <strong>CRC32</strong> of the name XORed with a hard-coded key match:</p><figure><img src="/images/dridex/export_directory.PNG"/><figcaption>Enumerates_exports_functions</figcaption></figure><p></p><p>Before resolving the API, the loader checks if the module is loaded using the PEB and PEB_LDR_DATA structures:</p><figure><img src="/images/dridex/LDR_DATA.PNG"/><figcaption>list_of_loaded_modules</figcaption></figure><p></p><p>Once again, it uses a combination of <strong>CRC32</strong> and <strong>XOR</strong> with the same hard-coded key to check the module name. If the module is not loaded, it enumerates DLLs in the Windows directory using the <strong>GetSystemWow64DirectoryW</strong> and <strong>FindFirstFileExW/FindNextFileW</strong> APIs and loads it using <strong>LdrLoadDLL</strong>:</p><figure><img src="/images/dridex/findfirstfile.PNG"/><figcaption>find_DLLs</figcaption></figure><p></p><p>The following Python script can be used to find which DLL and API are resolved:</p><div class="highlight"><pre><span></span><code><span class="kn">import</span> <span class="nn">json</span>
<span class="kn">import</span> <span class="nn">zlib</span>
<span class="kn">import</span> <span class="nn">sys</span>

<span class="c1">#  python3 resolve_api_hash.py 0x588AB3EA 0x649746EC</span>
<span class="c1">#  ntDLL.DLL -&gt; NtProtectVirtualMemory</span>

<span class="n">lib_hash</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
<span class="n">func_hash</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>

<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s1">'exports.json'</span><span class="p">,</span> <span class="s1">'r'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>  <span class="c1"># {"shell32.DLL": ["AppCompat_RunDLLW", "AssocCreateForClasses", ....}</span>
    <span class="n">apis</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="p">())</span>

<span class="n">xor_key</span> <span class="o">=</span> <span class="mh">0x38BA5C7B</span>  <span class="c1"># To change</span>
<span class="n">xor_func_hash</span> <span class="o">=</span> <span class="n">xor_key</span> <span class="o">^</span> <span class="nb">int</span><span class="p">(</span><span class="n">func_hash</span><span class="p">,</span> <span class="mi">16</span><span class="p">)</span>
<span class="n">xor_lib_hash</span> <span class="o">=</span> <span class="n">xor_key</span> <span class="o">^</span> <span class="nb">int</span><span class="p">(</span><span class="n">lib_hash</span><span class="p">,</span> <span class="mi">16</span><span class="p">)</span>

<span class="k">for</span> <span class="n">lib</span><span class="p">,</span> <span class="n">funcs</span> <span class="ow">in</span> <span class="n">apis</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
    <span class="n">crc</span> <span class="o">=</span> <span class="n">zlib</span><span class="o">.</span><span class="n">crc32</span><span class="p">(</span><span class="n">lib</span><span class="o">.</span><span class="n">upper</span><span class="p">()</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s1">'utf-8'</span><span class="p">))</span>
    <span class="k">if</span> <span class="n">crc</span> <span class="o">==</span> <span class="n">xor_lib_hash</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">func</span> <span class="ow">in</span> <span class="n">funcs</span><span class="p">:</span>
            <span class="n">crc</span> <span class="o">=</span> <span class="n">zlib</span><span class="o">.</span><span class="n">crc32</span><span class="p">(</span><span class="n">func</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s1">'utf-8'</span><span class="p">))</span>
            <span class="k">if</span> <span class="n">crc</span> <span class="o">==</span> <span class="n">xor_func_hash</span><span class="p">:</span>
                <span class="nb">print</span><span class="p">(</span><span class="s2">"</span><span class="si">%s</span><span class="s2"> -&gt; </span><span class="si">%s</span><span class="s2">"</span> <span class="o">%</span> <span class="p">(</span><span class="n">lib</span><span class="p">,</span> <span class="n">func</span><span class="p">))</span>
</code></pre></div><h1 id="strings">Strings</h1><p>Strings are decrypted using a function that takes 3 parameters (<code>char *output, char *enc_strings, int string_index</code>):</p><figure><img src="/images/dridex/decrypt_strings.PNG"/><figcaption>decrypt_strings</figcaption></figure><p></p><p>This function decrypts the <em>enc_strings</em> buffer using the <strong>RC4</strong> algorithm with a key located in the first 0x28 bytes (in reverse order). Then the index selects the strings to return in the output: <code>SOFTWARE/TrendMicro/Vizor\x00\\VizorUniclientLibrary.DLL\x00ProductPath\x00\x00</code></p><p>The algorithm can be summed up to the following Python script:</p><div class="highlight"><pre><span></span><code><span class="kn">import</span> <span class="nn">sys</span>
<span class="kn">from</span> <span class="nn">Crypto.Cipher</span> <span class="kn">import</span> <span class="n">ARC4</span>

<span class="n">filepath</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>

<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">filepath</span><span class="p">,</span> <span class="s1">'rb'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="n">datas</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>

<span class="n">rc4_key</span> <span class="o">=</span> <span class="n">datas</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mh">0x28</span><span class="p">]</span>
<span class="n">rc4_key</span> <span class="o">=</span> <span class="n">rc4_key</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>

<span class="n">arc4</span> <span class="o">=</span> <span class="n">ARC4</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">rc4_key</span><span class="p">)</span>
<span class="n">data</span> <span class="o">=</span> <span class="n">arc4</span><span class="o">.</span><span class="n">decrypt</span><span class="p">(</span><span class="n">datas</span><span class="p">[</span><span class="mh">0x28</span><span class="p">:])</span>

<span class="nb">print</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</code></pre></div><h1 id="system-information">System information</h1><p>Very early in the code, a function is in charge of gathering information about the infected system. This information is stored in a global structure and used when needed for other operations. Below are more details on the gathered information:</p><h2 id="operating-version">Operating version</h2><p>The build number, the Windows version and the product type are collected through the <strong>GetVersionExW</strong> function:<br/></p><figure><img src="/images/dridex/getversionExw.PNG"/><figcaption>GetVersionExW</figcaption></figure><p></p><h2 id="process-architecture">Process architecture</h2><p>The current process architecture is obtained using <strong>IsWow64Process</strong>:<br/></p><figure><img src="/images/dridex/IsWow64Process.PNG"/><figcaption>IsWow64Process</figcaption></figure><p></p><h2 id="process-privilege">Process privilege</h2><p>The Dridex loader checks his privilege level by comparing the current process token group SID to the local administrator SID (S-1-5-32-544). It uses the <strong>GetTokenInformation</strong> API with <strong>TokenGroups</strong> as Token Information:<br/></p><figure><img src="/images/dridex/gettokeninformation.PNG"/><figcaption>gettokeninformation</figcaption></figure><p></p><p>Finally, Dridex allocates the local administrator SID using <strong>AllocateAndInitializeSid</strong> and compares it using <strong>EqualSid</strong>:<br/></p><figure><img src="/images/dridex/allocateandinitsid.PNG"/><figcaption>AllocateAndInitializeSid</figcaption></figure><p></p><h2 id="uac-level">UAC level</h2><p>Dridex checks in the registry <code>SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System</code> the values <strong>EnableLUA</strong>, <strong>ConsentPromptBehaviorAdmin</strong>, <strong>PromptOnSecureDesktop</strong> and attributes a level from 0 to 5 based on the results:<br/></p><figure><img src="/images/dridex/check_UAC.PNG"/><figcaption>Check_UAC</figcaption></figure><p></p><h2 id="tokenelevation">TokenElevation</h2><p>Using <strong>OpenProcessToken</strong> and <strong>GetTokenInformation</strong> with the parameter <strong>TokenElevation</strong>, Dridex checks if the current process has elevated privileges:<br/></p><figure><img src="/images/dridex/tokenElevation.PNG"/><figcaption>TokenElevation</figcaption></figure><p></p><h2 id="sessionid">SessionId</h2><p>Dridex also gets the Terminal Services session ID associated with the current process:<br/></p><figure><img src="/images/dridex/sessionId.PNG"/><figcaption>SessionId</figcaption></figure><p></p><h2 id="process-integrity-level">Process Integrity Level</h2><p>Similarly, Dridex get the process integrity level using <strong>GetTokenInformation</strong> with the parameter <strong>TokenIntegrityLevel</strong>, then attributes a level from 1 to 7 based on the results:<br/></p><figure><img src="/images/dridex/rid_level.PNG"/><figcaption>Process Integrity Level</figcaption></figure><p></p><h2 id="system-info">System Info</h2><p>Finally, Dridex calls <strong>GetSystemInfo</strong> to get information on:</p><ul><li>Number of processors;</li><li>Page size;</li><li>Minimum application address;</li><li>Maximum application address;</li><li>Allocation granularity.<figure><img src="/images/dridex/GetSystemInfo.PNG"/><figcaption>GetSystemInfo</figcaption></figure></li></ul><h2 id="final-information-structure">Final information structure</h2><p>At the end of the function, we get the following structure:</p><div class="highlight"><pre><span></span><code>00000000   info_Struct  struc   ;    (sizeof=0x30,   mappedto_36)
00000000   major_plus_minor              dd   ?
00000004   buildnumber                   dd   ?
00000008   dwMajorVersion                db   ?
00000009   dwMinorVersion                db   ?
0000000A   ServicePackMajor              db   ?
0000000B   x64_x32_bit                   db   ?
0000000C   productType                   dw   ?
0000000E   dwNumberOfProcessors          dw   ?
00000010   dwPageSize                    dd   ?
00000014   lpMinimumApplicationAddress   dd   ?
00000018   lpMaximumApplicationAddress   dd   ?
0000001C   dwAllocationGranularity       dd   ?
00000020   SessionId                     dd   ?
00000024   UAC_level                     dd   ?
00000028   SID_local_administrator       db   ?
00000029   TokenElevation                db   ?
0000002C   RID_level                     dd   ?
00000030   info_Struct                   ends
</code></pre></div><h1 id="cc-requests">C&amp;C Requests</h1><p>The Dridex loader talks to its C&amp;Cs to download the core module and the node list. The communication is encrypted using RC4 and the protocol used is HTTPS. Below is a more detailed explanation of how the function does this job. First, it takes a <em>hash</em> in its parameters that will later identify the request type:<br/></p><figure><img src="/images/dridex/make_cnc_requests.PNG"/><figcaption>Make_CnC_Requests</figcaption></figure><p></p><p>By parsing the .data section, it builds a structure with the bot ID and a list of hard-coded IPs:</p><div class="highlight"><pre><span></span><code>00000000:  ff  ff  ff  ff  01  00  00  00  00  00  00  00  00  00  00  00    ................
00000010:  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00  00    ................
00000020:  f3  73  10  57 [7f  27  00  00] 00  7a  01 [03][51  a9  e0  de]   .s.W.'...z..Q...
00000030: [3d  0d][3e  4b  a8  6a][2e  0f][52  a5  98  7f][3d  0d] d6  ec    =.&gt;K.j..R...=...
</code></pre></div><p>Bot_Id: <code>[7f 27 00 00]</code> -&gt; 10111</p><p>IPs (0x03):</p><ul><li><code>[51 a9 e0 de][3d 0d]</code> -&gt; 81.169.224.222:3389</li><li><code>[3e 4b a8 6a][2e 0f]</code> -&gt; 62.75.168.106:3886</li><li><code>[52 a5 98 7f][3d 0d]</code> -&gt; 82.165.152.127:3389</li></ul><p></p><figure><img src="/images/dridex/gen_ips.PNG"/><figcaption>Generate_IPs</figcaption></figure><p></p><p>Then, it starts building the requests to be sent to the C&amp;Cs in binary format using previously gathered information. The request looks like this:</p><div class="highlight"><pre><span></span><code>00000000: [2b][58  58  58  58  58  58  58  58  58  58  5f  63  35  39  31    +XXXXXXXXXX_c591
00000010:  39  35  34  37  30  31  39  31  64  64  66  34  63  30  66  39    95470191ddf4c0f9
00000020:  65  35  34  65  33  33  30  34  36  33  38  36][32  63  33  38    e54e330463862c38
00000030:  61  39  66  30  30  38  64  61  63  39  61  36  63  64  37  39    a9f008dac9a6cd79
00000040:  38  36  66  62  39  66  65  64  66  62  62  32][00  6f][1d  b0    86fb9fedfbb2.o..
00000050:  f0  11][01  1f  04  11][40] 00  00 [03  3f][49  6e  74  65  6c    ......@...?Intel
00000060:  ...skip...
00000390:  69  6e  67  20  70  61  74  68  3a  20] 00  00 [07  4e][41  4c    ing  path:  ...NAL
000003a0:  ....skip..
00000ae0:  72  3d  43  3a  5c  57  69  6e  64  6f  77  73]                   r=C:\Windows
</code></pre></div><p>From left to right, the fields are the following:</p><ul><li>len(unique_account);</li><li>unique_account;</li><li>unique_system_hash;</li><li>bot_id;</li><li>sys_info;</li><li>command;</li><li>process_arch;</li><li>len(process_installed);</li><li>process_installed;</li><li>len(envs);</li><li>envs.</li></ul><p>The <em>unique_account</em> field is the concatenation of the Computer Name and the MD5 hash of the following expression: <code>md5(computer_name + user_name + \x00 + \x00\x00 + installdate + \x00\x00)</code>.</p><p>The <em>unique_system_hash</em> is also an MD5 hash: <code>md5(serial volume + install date + arch + \x00\x00)</code>.</p><p>The <em>sys_info</em> field is built using the following code:<br/></p><figure><img src="/images/dridex/build_sys_info.PNG"/><figcaption>sys_info_field</figcaption></figure><br/> In this example, <code>[1d b0]</code> (7600) is the Windows build number, <code>[f0]</code> is a bit field that depends on the current product types, process architecture, UAC flag and Administrator rights. <code>[11]</code> indicates the Windows version <code>((majorversion &lt;&lt; 4 - 0x50) + minorversion)</code>.<p></p><p>The <em>command</em> field is the command name CRC32 code (e.g. "bot" == 0x11041f01) and it is given as a parameter. The following commands were found in the loader:</p><ul><li>0x11041f01 -&gt; ("bot");</li><li>0x18F8C844 -&gt; ("list");</li><li>0x745A17F5 -&gt; ("mod9" -&gt; TrendMicro Exclusion vulnerability);</li><li>0xD3EF7577 -&gt; ("dmod5" -&gt; DllLoaded);</li><li>0x69BE7CEE -&gt; ("dmod6" -&gt; DllStarted);</li><li>0x32DC1DF8 -&gt; ("dmod11" -&gt; StartedInHi).</li></ul><p>The <em>process_installed</em> field is extracted from the following registry: <code>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall</code></p><p>The <em>envs</em> field is generated using the <strong>GetEnvironmentStringsW</strong> API.</p><p>Before sending the request, the payload is encrypted using RC4 (the key comes from the recovered strings) and prepended by its CRC32 code:</p><figure><img src="/images/dridex/rc4_key_strings.PNG"/><figcaption>RC4_key</figcaption></figure><p></p><p>The request is sent in a POST message using the WinINet library (<strong>InternetOpenA</strong>, <strong>InternetConnectW</strong>, <strong>HttpOpenRequestW</strong>, <strong>HttpSendRequestW</strong>):<br/></p><figure><img src="/images/dridex/POST_req.PNG"/><figcaption>POST_methods</figcaption></figure><p></p><p>The answer is read by calling the <strong>InternetReadFile</strong> function and if the response code is 200 or 404, the content is decrypted using RC4 with the same RC4 key as for encrypting the payload:</p><figure><img src="/images/dridex/rc4_decrypt_http_rep_contnt.PNG"/><figcaption>rc4_decrypt_rep_content</figcaption></figure><p></p><p>The response always starts with a CRC32 code of the content, followed by the content itself, which is RC4-encrypted with the same key as for sending the command.</p><h2 id="bot-command">Bot command</h2><p>Once decrypted, the "bot" command response reveals an RSA signature (0x80 bytes long) and the Dridex "core" DLL at offset 0x80:</p><div class="highlight"><pre><span></span><code>00000000: 921c 0824 eef2 954a a522 5014 0384 e394  ...$...J."P.....
00000010: b053 b2ce a5fd aeef 6796 bd1c 5edd 764d  .S......g...^.vM
00000020: 2c28 ea58 7e40 2132 8389 5259 333b 9d80  ,(.X~@!2..RY3;..
00000030: bcfa 5af5 9eeb 0ac0 22c8 e079 1510 b48e  ..Z....."..y....
00000040: d53c e43f b9d7 19ea 23a9 8e2e 4f9f 0397  .&lt;.?....#...O...
00000050: c3a5 d586 f1b0 864b 5b2e 03e7 3750 b371  .......K[...7P.q
00000060: 3e42 f62b f1da f555 954e 4bee fae7 823c  &gt;B.+...U.NK....&lt;
00000070: 2a7a 812c ba90 cfba bf0a 8965 2a5c 122d  *z.,.......e*\.-
00000080: 4d5a 9000 0300 0000 0400 0000 ffff 0000  MZ..............
00000090: b800 0000 0000 0000 4000 0000 0000 0000  ........@.......
000000a0: 0000 0000 0000 0000 0000 0000 0000 0000  ................
000000b0: 0000 0000 0000 0000 0000 0000 8401 0000  ................
000000c0: 0e1f ba0e 00b4 09cd 21b8 014c cd21 5468  ........!..L.!Th
000000d0: 6973 2070 726f 6772 616d 2063 616e 6e6f  is program canno
000000e0: 7420 6265 2072 756e 2069 6e20 444f 5320  t be run in DOS
000000f0: 6d6f 6465 2e0d 0d0a 2400 0000 0000 0000  mode....$.......
00000100: d006 fb75 9467 9526 9467 9526 9467 9526  ...u.g.&amp;.g.&amp;.g.&amp;
00000110: 9935 4826 2567 9526 21f9 4b26 da66 9526  .5H&amp;%g.&amp;!.K&amp;.f.&amp;
00000120: f289 5926 e667 9526 0f8c 5b26 6a66 9526  ..Y&amp;.g.&amp;..[&amp;jf.&amp;
00000130: ...skip...
</code></pre></div><p>This signature is in the PKCS#1 v1.5 SHA1withRSA format. It can be used to verify the payload content using an RSA1024 public key found in the decrypted strings from the core DLL:</p><div class="highlight"><pre><span></span><code>MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDA9pRumL/WGRvdjoENFuUFZi/f
OB4AaC5yUmFnTYON2qothUQiLagPsXnVNPC/lF30qb/DJbdkWk4i4nbm715TE1np
cmC9Fm4Dh9IPFpaFAuI73R6ywzxsSodkfHqDlS8N0Nf69sOX58bSf96IPKSGY2FV
ra3DZaYLeH6S7EwinQIDAQAB
</code></pre></div><div class="highlight"><pre><span></span><code>openssl<span class="w"> </span>dgst<span class="w"> </span>-sha1<span class="w"> </span>-verify<span class="w"> </span>public.pem<span class="w"> </span>-signature<span class="w"> </span>signature_core<span class="w"> </span>200_rep_content_bot_decoded_mz.bin
Verified<span class="w"> </span>OK
</code></pre></div><h2 id="node-list-command">Node list command</h2><p>The decrypted "list" command response is not as easy as the "bot" command to understand:</p><div class="highlight"><pre><span></span><code>00000000: 4ea7 8684 7e01 2b49 f3df 2efa e02d 9621  N...~.+I.....-.!
00000010: 05e0 6318 e3f7 298a 1d67 e4fa 1349 f7c9  ..c...)..g...I..
00000020: 60b4 06b2 c41c 91a6 4cad 9427 d32e 3775  `.......L..'..7u
00000030: 0f58 bed2 5b92 383a 3b49 8892 0d42 e85b  .X..[.8:;I...B.[
00000040: b335 6132 5223 2d3c 4e0e 3b65 0596 f4a6  .5a2R#-&lt;N.;e....
00000050: 4b97 5c79 f4ef 964f 27a9 7654 b67b 65af  K.\y...O'.vT.{e.
00000060: 8f5e 0b02 a61e 521b 1a49 eb19 8af2 c08e  .^....R..I......
00000070: 8c37 6e51 cf3c ba62 f249 17ea a816 8c8e  .7nQ.&lt;.b.I......
00000080: bd10 3a0d ac9c 7b44 4281 5bda 48e9 05c1  ..:...{DB.[.H...
00000090: b5e4 faeb 8ca2 7554 c375 7803 4b86 c3d5  ......uT.ux.K...
000000a0: 3233 3100 7321 c702 213e 953b 6577 011b  231.s!..!&gt;.;ew..
000000b0: 091d 5a91 4b33 6f3e eff2 5ffa 7e38 e389  ..Z.K3o&gt;.._.~8..
000000c0: 4c94 7d02 5077 4143 1c96 e768 9e7e b097  L.}.PwAC...h.~..
000000d0: 2438 1feb 7a46 a694 28f2 cfbb 9a7c f72c  $8..zF..(....|.,
000000e0: cfdf b42c b69c 9b4e 97bd 2291 1f1a ec79  ...,...N.."....y
000000f0: abfe 25fe c13c fefd 131b 0146 40cf 4244  ..%..&lt;.....F@.BD
00000100: d628 00bc f85d f599 5cf2 e27f 58bb c753  .(...]..\...X..S
00000110: 3be3 2da8 02d1 4ef9                      ;.-...N.
</code></pre></div><p>The format is as follows:</p><ul><li>CRC32 code of the content (4 Bytes);</li><li>SHA1withRSA1024 signature (128 Bytes);</li><li>First RC4 key (16 Bytes);</li><li>Content length, RC4-encrypted (4 Bytes);</li><li>Second RC4 key (16 Bytes);</li><li>List content, RC4-encrypted (length Bytes).</li></ul><p>The structure looks like this:</p><div class="highlight"><pre><span></span><code>00000000: [4e  a7  86  84][7e  01  2b  49  f3  df  2e  fa  e0  2d  96  21    N...~.+I.....-.!
00000010:  05  e0  63  18  e3  f7  29  8a  1d  67  e4  fa  13  49  f7  c9    ..c...)..g...I..
00000020:  60  b4  06  b2  c4  1c  91  a6  4c  ad  94  27  d3  2e  37  75    `.......L..'..7u
00000030:  0f  58  be  d2  5b  92  38  3a  3b  49  88  92  0d  42  e8  5b    .X..[.8:;I...B.[
00000040:  b3  35  61  32  52  23  2d  3c  4e  0e  3b  65  05  96  f4  a6    .5a2R#-&lt;N.;e....
00000050:  4b  97  5c  79  f4  ef  96  4f  27  a9  76  54  b6  7b  65  af    K.\y...O'.vT.{e.
00000060:  8f  5e  0b  02  a6  1e  52  1b  1a  49  eb  19  8a  f2  c0  8e    .^....R..I......
00000070:  8c  37  6e  51  cf  3c  ba  62  f2  49  17  ea  a8  16  8c  8e    .7nQ.&lt;.b.I......
00000080:  bd  10  3a  0d][ac  9c  7b  44  42  81  5b  da  48  e9  05  c1    ..:...{DB.[.H...
00000090:  b5  e4  fa  eb][8c  a2  75  54][c3  75  78  03  4b  86  c3  d5    ......uT.ux.K...
000000a0:  32  33  31  00  73  21  c7  02][21  3e  95  3b  65  77  01  1b    231.s!..!&gt;.;ew..
000000b0:  09  1d  5a  91  4b  33  6f  3e  ef  f2  5f  fa  7e  38  e3  89    ..Z.K3o&gt;.._.~8..
000000c0:  4c  94  7d  02  50  77  41  43  1c  96  e7  68  9e  7e  b0  97    L.}.PwAC...h.~..
000000d0:  24  38  1f  eb  7a  46  a6  94  28  f2  cf  bb  9a  7c  f7  2c    $8..zF..(....|.,
000000e0:  cf  df  b4  2c  b6  9c  9b  4e  97  bd  22  91  1f  1a  ec  79    ...,...N.."....y
000000f0:  ab  fe  25  fe  c1  3c  fe  fd  13  1b  01  46  40  cf  42  44    ..%..&lt;.....F@.BD
00000100:  d6  28  00  bc  f8  5d  f5  99  5c  f2  e2  7f  58  bb  c7  53    .(...]..\...X..S
00000110:  3b  e3  2d  a8  02  d1  4e  f9]                                   ;.-...N.
</code></pre></div><p>After checking that the first 4 bytes are the CRC32 code, it extracts the first RC4 key in <code>0x84:0x94</code> just after the RSA signature (128 bytes). With this key, it can decrypt the next four bytes <code>[8c a2 75 54]</code> to <code>00 00 00 70</code>. Then, the second RC4 key can be extracted (0x98:0xa8) to decrypt the remaining data:</p><div class="highlight"><pre><span></span><code>cat<span class="w"> </span>200_rep_content_list_decoded.bin<span class="w"> </span><span class="p">|</span><span class="w"> </span>snip<span class="w"> </span>0xa8:<span class="w"> </span><span class="p">|</span><span class="w"> </span>rc4<span class="w"> </span>h:C37578034B86C3D5323331007321C702<span class="w"> </span><span class="p">|</span><span class="w"> </span>xxd
<span class="m">00000000</span>:<span class="w"> </span>1f8b<span class="w"> </span><span class="m">0800</span><span class="w"> </span><span class="m">0000</span><span class="w"> </span><span class="m">0000</span><span class="w"> </span><span class="m">0203</span><span class="w"> </span><span class="m">0159</span><span class="w"> </span>00a6<span class="w"> </span>ff10<span class="w">  </span>...........Y....
<span class="m">00000010</span>:<span class="w"> </span><span class="m">0000</span><span class="w"> </span><span class="m">0054</span><span class="w"> </span>6bb5<span class="w"> </span>bb4c<span class="w"> </span>01c5<span class="w"> </span>2d91<span class="w"> </span>37aa<span class="w"> </span>01bb<span class="w">  </span>...Tk..L..-.7...
<span class="m">00000020</span>:<span class="w"> </span>add4<span class="w"> </span>ced3<span class="w"> </span>01bb<span class="w"> </span>175f<span class="w"> </span>842c<span class="w"> </span><span class="m">0709</span><span class="w"> </span>c003<span class="w"> </span><span class="m">8842</span><span class="w">  </span>......._.,.....B
<span class="m">00000030</span>:<span class="w"> </span>01c5<span class="w"> </span>4e52<span class="w"> </span>b1d6<span class="w"> </span>0d73<span class="w"> </span>2d0d<span class="w"> </span>c772<span class="w"> </span>01c5<span class="w"> </span>adb7<span class="w">  </span>..NR...s-..r....
<span class="m">00000040</span>:<span class="w"> </span>dad1<span class="w"> </span>01bb<span class="w"> </span>ce77<span class="w"> </span>5a31<span class="w"> </span>0d3a<span class="w"> </span>bdb3<span class="w"> </span>7eb1<span class="w"> </span>01bb<span class="w">  </span>.....wZ1.:..~...
<span class="m">00000050</span>:<span class="w"> </span><span class="m">5921</span><span class="w"> </span>a46c<span class="w"> </span>20fb<span class="w"> </span>68a8<span class="w"> </span>d570<span class="w"> </span><span class="m">0410</span><span class="w"> </span>83c4<span class="w"> </span>fd94<span class="w">  </span>Y!.l<span class="w"> </span>.h..p......
<span class="m">00000060</span>:<span class="w"> </span>01bb<span class="w"> </span>c0fa<span class="w"> </span>c665<span class="w"> </span>01bb<span class="w"> </span>006b<span class="w"> </span>c3f4<span class="w"> </span><span class="m">5900</span><span class="w"> </span><span class="m">0000</span><span class="w">  </span>.....e...k..Y...
</code></pre></div><p>Indeed, the content is gzip-encoded and the first 4 decrypted bytes (<code>00 00 00 70</code>) are the content size:</p><div class="highlight"><pre><span></span><code>cat<span class="w"> </span>200_rep_content_list_decoded.bin<span class="w"> </span><span class="p">|</span><span class="w"> </span>snip<span class="w"> </span>0xa8:<span class="w"> </span><span class="p">|</span><span class="w"> </span>rc4<span class="w"> </span>h:C37578034B86C3D5323331007321C702<span class="w"> </span><span class="p">|</span><span class="w"> </span>gzip<span class="w"> </span>-d<span class="w"> </span><span class="p">|</span><span class="w"> </span>xxd<span class="w"> </span>-g<span class="w"> </span><span class="m">1</span>
<span class="m">00000000</span>:<span class="w"> </span><span class="o">[</span><span class="m">10</span><span class="o">][</span><span class="m">00</span><span class="w">  </span><span class="m">00</span><span class="w">  </span><span class="m">00</span><span class="w">  </span><span class="m">54</span><span class="o">][</span>6b<span class="w">  </span>b5<span class="w">  </span>bb<span class="w">  </span>4c<span class="o">][</span><span class="m">01</span><span class="w">  </span>c5<span class="o">][</span>2d<span class="w">  </span><span class="m">91</span><span class="w">  </span><span class="m">37</span><span class="w">  </span>aa<span class="o">][</span><span class="m">01</span><span class="w">    </span>....Tk..L..-.7..
<span class="m">00000010</span>:<span class="w">  </span>bb<span class="o">][</span>ad<span class="w">  </span>d4<span class="w">  </span>ce<span class="w">  </span>d3<span class="o">][</span><span class="m">01</span><span class="w">  </span>bb<span class="o">][</span><span class="m">17</span><span class="w">  </span>5f<span class="w">  </span><span class="m">84</span><span class="w">  </span>2c<span class="o">][</span><span class="m">07</span><span class="w">  </span><span class="m">09</span><span class="o">][</span>c0<span class="w">  </span><span class="m">03</span><span class="w">  </span><span class="m">88</span><span class="w">    </span>........_.,.....
<span class="m">00000020</span>:<span class="w">  </span><span class="m">42</span><span class="o">][</span><span class="m">01</span><span class="w">  </span>c5<span class="o">][</span>4e<span class="w">  </span><span class="m">52</span><span class="w">  </span>b1<span class="w">  </span>d6<span class="o">][</span>0d<span class="w">  </span><span class="m">73</span><span class="o">][</span>2d<span class="w">  </span>0d<span class="w">  </span>c7<span class="w">  </span><span class="m">72</span><span class="o">][</span><span class="m">01</span><span class="w">  </span>c5<span class="o">][</span>ad<span class="w">    </span>B..NR...s-..r...
<span class="m">00000030</span>:<span class="w">  </span>b7<span class="w">  </span>da<span class="w">  </span>d1<span class="o">][</span><span class="m">01</span><span class="w">  </span>bb<span class="o">][</span>ce<span class="w">  </span><span class="m">77</span><span class="w">  </span>5a<span class="w">  </span><span class="m">31</span><span class="o">][</span>0d<span class="w">  </span>3a<span class="o">][</span>bd<span class="w">  </span>b3<span class="w">  </span>7e<span class="w">  </span>b1<span class="o">][</span><span class="m">01</span><span class="w">    </span>......wZ1.:..~..
<span class="m">00000040</span>:<span class="w">  </span>bb<span class="o">][</span><span class="m">59</span><span class="w">  </span><span class="m">21</span><span class="w">  </span>a4<span class="w">  </span>6c<span class="o">][</span><span class="m">20</span><span class="w">  </span>fb<span class="o">][</span><span class="m">68</span><span class="w">  </span>a8<span class="w">  </span>d5<span class="w">  </span><span class="m">70</span><span class="o">][</span><span class="m">04</span><span class="w">  </span><span class="m">10</span><span class="o">][</span><span class="m">83</span><span class="w">  </span>c4<span class="w">  </span>fd<span class="w">    </span>.Y!.l<span class="w">  </span>.h..p.....
<span class="m">00000050</span>:<span class="w">  </span><span class="m">94</span><span class="o">][</span><span class="m">01</span><span class="w">  </span>bb<span class="o">][</span>c0<span class="w">  </span>fa<span class="w">  </span>c6<span class="w">  </span><span class="m">65</span><span class="o">][</span><span class="m">01</span><span class="w">  </span>bb<span class="o">]</span><span class="w">                               </span>......e..
</code></pre></div><p>The first field is a marker (0x10), the second is the node list size and the rest is the list of nodes.</p><h2 id="sharing-the-node-list-with-the-core-dll">Sharing the node list with the core DLL</h2><p>Because the decryption is not done in the loader but in the core DLL, it needs a way to share the answer content of the list command. This is why the loader uses the Windows registry <code>Software\Microsoft\Windows\CurrentVersion\Explorer\CLSID\%s\shellfolder</code> where <code>%s</code> is a CLISD built from the <em>unique_account</em> hashes with the hard-coded number 0x1c:<br/></p><figure><img src="/images/dridex/nodes_regs_path.PNG"/><figcaption>reg_nodes_list_path</figcaption></figure><p></p><p>The saved data contains the <strong>bot ID</strong> (<code>7f 27</code>], the <strong>node list size</strong>, the <strong>node list</strong> and the scheduled tasks URI (details in the next parts):</p><div class="highlight"><pre><span></span><code>00000000: [00  00  00  00][7f  27][18  01][4e  a7  86  84  7e  01  2b  49    .....'..N...~.+I
00000010:  f3  df  2e  fa  e0  2d  96  21  05  e0  63  18  e3  f7  29  8a    .....-.!..c...).
00000020:  1d  67  e4  fa  13  49  f7  c9  60  b4  06  b2  c4  1c  91  a6    .g...I..`.......
00000030:  4c  ad  94  27  d3  2e  37  75  0f  58  be  d2  5b  92  38  3a    L..'..7u.X..[.8:
00000040:  3b  49  88  92  0d  42  e8  5b  b3  35  61  32  52  23  2d  3c    ;I...B.[.5a2R#-&lt;
00000050:  4e  0e  3b  65  05  96  f4  a6  4b  97  5c  79  f4  ef  96  4f    N.;e....K.\y...O
00000060:  27  a9  76  54  b6  7b  65  af  8f  5e  0b  02  a6  1e  52  1b    '.vT.{e..^....R.
00000070:  1a  49  eb  19  8a  f2  c0  8e  8c  37  6e  51  cf  3c  ba  62    .I.......7nQ.&lt;.b
00000080:  f2  49  17  ea  a8  16  8c  8e  bd  10  3a  0d  ac  9c  7b  44    .I........:...{D
00000090:  42  81  5b  da  48  e9  05  c1  b5  e4  fa  eb  8c  a2  75  54    B.[.H.........uT
000000a0:  c3  75  78  03  4b  86  c3  d5  32  33  31  00  73  21  c7  02    .ux.K...231.s!..
000000b0:  21  3e  95  3b  65  77  01  1b  09  1d  5a  91  4b  33  6f  3e    !&gt;.;ew....Z.K3o&gt;
000000c0:  ef  f2  5f  fa  7e  38  e3  89  4c  94  7d  02  50  77  41  43    .._.~8..L.}.PwAC
000000d0:  1c  96  e7  68  9e  7e  b0  97  24  38  1f  eb  7a  46  a6  94    ...h.~..$8..zF..
000000e0:  28  f2  cf  bb  9a  7c  f7  2c  cf  df  b4  2c  b6  9c  9b  4e    (....|.,...,...N
000000f0:  97  bd  22  91  1f  1a  ec  79  ab  fe  25  fe  c1  3c  fe  fd    .."....y..%..&lt;..
00000100:  13  1b  01  46  40  cf  42  44  d6  28  00  bc  f8  5d  f5  99    ...F@.BD.(...]..
00000110:  5c  f2  e2  7f  58  bb  c7  53  3b  e3  2d  a8  02  d1  4e  f9]   \...X..S;.-...N.
00000120: [4d  69  63  72  6f  73  6f  66  74  5c  57  69  6e  64  6f  77    Microsoft\Window
00000130:  73  5c  49  6e  73  74  61  6c  6c  53  65  72  76  69  63  65    s\InstallService
00000140:  5c  53  6d  61  72  74  52  65  74  72  79  2d  53  2d  31  2d    \SmartRetry-S-1-
00000150:  35  2d  32  31  2d  34  30  37  32  35  37  39  31  36  2d  31    5-21-407257916-1
00000160:  38  33  31  36  35  34  35  30  37  2d  32  36  34  33  30  33    831654507-264303
00000170:  36  33  36  34  2d  31  30  30  31  7c  4d  69  63  72  6f  73    6364-1001|Micros
00000180:  6f  66  74  5c  57  69  6e  64  6f  77  73  5c  57  44  49  5c    oft\Windows\WDI\
00000190:  4c  67  77  7a  6f  71  6a]                                       Lgwzoqj
</code></pre></div><p></p><figure><img src="/images/dridex/uncrypted_reg_struct.PNG"/><figcaption>uncrypted_nodes_list_struct</figcaption></figure><p></p><p>Before writing the registry value, the original response content of the "list" command and its length are encrypted using RC4 with two random keys (0x10-byte-long) and the CRC32 code of the content is prepended:</p><div class="highlight"><pre><span></span><code>00000000: [ba  3d  cc  e0][f0  e9  b3  53  b0  46  e0  d2  f2  8e  b0  7b    .=.....S.F.....{
00000010:  fb  c2  c8  8d][b2  4b  c6][93  30  d0  52  2d  92  66  de  da    .....K..0.R-.f..
00000020:  db  fd  d0  db  18  cc  7b  b2][93  ed  d6  3b  98  e6  ec  8f    ......{....;....
00000030:  84  4d  74  66  48  ab  72  7a  f8  08  f2  08  a7  4e  53  3e    .MtfH.rz.....NS&gt;
00000040:  ce  09  f4  f9  26  93  f2  33  3b  76  db  23  df  91  90  b9    ....&amp;..3;v.#....
00000050:  86  96  f6  3f  5b  c1  97  b8  41  32  39  ac  7e  00  94  c0    ...?[...A29.~...
00000060:  0c  35  b7  d7  96  fa  b7  57  71  07  63  09  b1  23  e4  72    .5.....Wq.c..#.r
00000070:  6c  5b  a3  72  ed  31  e8  f7  62  1e  d3  67  06  29  5c  aa    l[.r.1..b..g.)\.
00000080:  b4  dc  36  18  a8  e4  1f  b4  3a  e4  5a  a0  0b  cc  aa  ba    ..6.....:.Z.....
00000090:  b3  cc  2c  25  eb  cf  e5  b4  21  a6  e7  63  64  88  10  1a    ..,%....!..cd...
000000a0:  c7  44  03  9f  bd  87  9e  0c  98  1b  23  5a  bc  22  75  4d    .D........#Z."uM
000000b0:  84  8c  0b  d4  c1  8a  fb  98  ec  bd  60  66  7d  05  89  7f    ..........`f}...
000000c0:  bf  3b  8c  8f  55  88  5c  59  ed  dc  bd  53  ee  8f  52  b8    .;..U.\Y...S..R.
000000d0:  24  9a  34  70  62  87  0a  64  26  83  ff  78  79  2e  2e  25    $.4pb..d&amp;..xy..%
000000e0:  e4  8f  3a  75  ad  93  e4  52  21  7f  ba  0c  b8  25  e7  a7    ..:u...R!....%..
000000f0:  f8  7f  31  6b  e6  95  72  c5  77  e2  c5  0e  6a  19  98  2a    ..1k..r.w...j..*
00000100:  59  01  40  aa  59  d0  cd  a3  64  eb  d5  00  7d  5e  93  3b    Y.@.Y...d...}^.;
00000110:  af  e1  ad  0c  f2  01  b9  c3  dd  45  b9  15  51  f0  33  81    .........E..Q.3.
00000120:  8e  3f  54  41  c5  41  22  96  bf  88  ce  80  e4  ba  97  32    .?TA.A"........2
00000130:  6d  72  98  7f  24  42  3e  b8  63  12  9f  4c  2c  b4  73  f8    mr..$B&gt;.c..L,.s.
00000140:  86  58  12  d6  95  d6  59  41  b5  92  c9  0d  23  62  1f  7d    .X....YA....#b.}
00000150:  65  c1  a1  b8  1d  a8  d5  ad  46  ba  9c  70  5c  9e  40  4d    e.......F..p\.@M
00000160:  21  ab  5b  a5  6e  7f  2c  d4  5e  8b  38  ef  b7  50  6b  be    !.[.n.,.^.8..Pk.
00000170:  55  4d  e0  04  22  6e  15  d2  99  d7  9f  fe  0c  f5  78  72    UM.."n........xr
00000180:  e3  d5  cf  0b  b9  08  bf  10  a7  64  38  d9  e1  0e  9b  57    .........d8....W
00000190:  9b  24  a5  00  c2  ca  e3  12  94  35  3c  74  00  49  eb  93    .$.......5&lt;t.I..
000001a0:  41  bf  28  45  1a  bf  5d  d9  50  87  25  82  d7  1e  17  f6    A.(E..].P.%.....
000001b0:  b8  b3  4a  0b  6e  03  e6  76  2e  02  96  12  da  a9  70]       ..J.n..v......p
</code></pre></div><p>From left to right, the fields are the following:</p><ul><li>original content CRC32 code;</li><li>first random RC4 key;</li><li>length of the original content, RC4-encrypted (with the first RC4 key);</li><li>second random RC4 key;</li><li>original content, RC4-encrypted (with the second RC4 key).</li></ul><p>And finally, it is RC4-encrypted again using the previous generated <em>unique_account</em> hashes with the hard-coded number 0x1c and set using <strong>RegSetValueExA</strong>:<br/></p><figure><img src="/images/dridex/regsetvalueexa.PNG"/><figcaption>RegSetValueExA</figcaption></figure><p></p><p>The Dridex core DLL can now access the content.</p><h2 id="response-parsing-implementation">Response parsing implementation</h2><p>Below are functions that can be used to parse, validate and decrypt the "list" and "bot" command output:</p><div class="highlight"><pre><span></span><code><span class="kn">from</span> <span class="nn">Crypto.Cipher</span> <span class="kn">import</span> <span class="n">ARC4</span>
<span class="kn">from</span> <span class="nn">Crypto.PublicKey</span> <span class="kn">import</span> <span class="n">RSA</span>
<span class="kn">from</span> <span class="nn">Crypto.Signature</span> <span class="kn">import</span> <span class="n">PKCS1_v1_5</span>
<span class="kn">from</span> <span class="nn">Crypto.Hash</span> <span class="kn">import</span> <span class="n">SHA</span>
<span class="kn">import</span> <span class="nn">gzip</span>
<span class="kn">import</span> <span class="nn">binascii</span>
<span class="kn">import</span> <span class="nn">struct</span>


<span class="k">def</span> <span class="nf">validate_decrypt_bot</span><span class="p">(</span><span class="n">botcont</span><span class="p">,</span> <span class="n">rc4k</span><span class="p">,</span> <span class="n">public_key</span><span class="p">):</span>
    <span class="c1"># Check CRC32</span>
    <span class="n">crc</span> <span class="o">=</span> <span class="n">binascii</span><span class="o">.</span><span class="n">crc32</span><span class="p">(</span><span class="n">botcont</span><span class="p">[</span><span class="mi">4</span><span class="p">:])</span>
    <span class="n">chk</span> <span class="o">=</span> <span class="n">struct</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="s2">"&gt;I"</span><span class="p">,</span> <span class="n">botcont</span><span class="p">[:</span><span class="mi">4</span><span class="p">])[</span><span class="mi">0</span><span class="p">]</span>
    <span class="k">if</span> <span class="n">crc</span> <span class="o">!=</span> <span class="n">chk</span><span class="p">:</span>
        <span class="nb">print</span><span class="p">(</span><span class="s2">"Incorrect CRC32, wrong file ?"</span><span class="p">)</span>
        <span class="k">return</span> <span class="kc">None</span>

    <span class="c1"># Decrypt data</span>
    <span class="n">arc4</span> <span class="o">=</span> <span class="n">ARC4</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">rc4k</span><span class="p">)</span>
    <span class="n">data</span> <span class="o">=</span> <span class="n">arc4</span><span class="o">.</span><span class="n">decrypt</span><span class="p">(</span><span class="n">botcont</span><span class="p">[</span><span class="mi">4</span><span class="p">:])</span>

    <span class="c1"># Check RSA signature</span>
    <span class="n">key</span> <span class="o">=</span> <span class="n">RSA</span><span class="o">.</span><span class="n">importKey</span><span class="p">(</span><span class="n">public_key</span><span class="p">)</span>
    <span class="n">h</span> <span class="o">=</span> <span class="n">SHA</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="mh">0x80</span><span class="p">:])</span>
    <span class="n">verifier</span> <span class="o">=</span> <span class="n">PKCS1_v1_5</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">verifier</span><span class="o">.</span><span class="n">verify</span><span class="p">(</span><span class="n">h</span><span class="p">,</span> <span class="n">data</span><span class="p">[:</span><span class="mh">0x80</span><span class="p">]):</span>
        <span class="nb">print</span><span class="p">(</span><span class="s2">"Incorrect signature, wrong public key?"</span><span class="p">)</span>
        <span class="k">return</span> <span class="kc">None</span>

    <span class="k">return</span> <span class="n">data</span><span class="p">[</span><span class="mh">0x80</span><span class="p">:]</span>


<span class="k">def</span> <span class="nf">validate_decrypt_list</span><span class="p">(</span><span class="n">content</span><span class="p">,</span> <span class="n">rc4k</span><span class="p">,</span> <span class="n">public_key</span><span class="p">):</span>
    <span class="c1"># Check CRC32</span>
    <span class="n">crc</span> <span class="o">=</span> <span class="n">binascii</span><span class="o">.</span><span class="n">crc32</span><span class="p">(</span><span class="n">content</span><span class="p">[</span><span class="mi">4</span><span class="p">:])</span>
    <span class="n">chk</span> <span class="o">=</span> <span class="n">struct</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="s2">"&gt;I"</span><span class="p">,</span> <span class="n">content</span><span class="p">[:</span><span class="mi">4</span><span class="p">])[</span><span class="mi">0</span><span class="p">]</span>
    <span class="k">if</span> <span class="n">crc</span> <span class="o">!=</span> <span class="n">chk</span><span class="p">:</span>
        <span class="nb">print</span><span class="p">(</span><span class="s2">"Incorrect CRC32, wrong file?"</span><span class="p">)</span>
        <span class="k">return</span> <span class="kc">None</span>

    <span class="c1"># Decrypt data</span>
    <span class="n">arc4</span> <span class="o">=</span> <span class="n">ARC4</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">rc4k</span><span class="p">)</span>
    <span class="n">data</span> <span class="o">=</span> <span class="n">arc4</span><span class="o">.</span><span class="n">decrypt</span><span class="p">(</span><span class="n">content</span><span class="p">[</span><span class="mi">4</span><span class="p">:])</span>

    <span class="c1"># Check decrypted CRC32</span>
    <span class="n">crc</span> <span class="o">=</span> <span class="n">binascii</span><span class="o">.</span><span class="n">crc32</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="mi">4</span><span class="p">:])</span>
    <span class="n">chk</span> <span class="o">=</span> <span class="n">struct</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="s2">"&gt;I"</span><span class="p">,</span> <span class="n">data</span><span class="p">[:</span><span class="mi">4</span><span class="p">])[</span><span class="mi">0</span><span class="p">]</span>
    <span class="k">if</span> <span class="n">crc</span> <span class="o">!=</span> <span class="n">chk</span><span class="p">:</span>
        <span class="nb">print</span><span class="p">(</span><span class="s2">"Incorrect CRC32, wrong key?"</span><span class="p">)</span>
        <span class="k">return</span> <span class="kc">None</span>

    <span class="c1"># Check RSA signature</span>
    <span class="n">key</span> <span class="o">=</span> <span class="n">RSA</span><span class="o">.</span><span class="n">importKey</span><span class="p">(</span><span class="n">public_key</span><span class="p">)</span>
    <span class="n">h</span> <span class="o">=</span> <span class="n">SHA</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="mh">0x84</span><span class="p">:])</span>
    <span class="n">verifier</span> <span class="o">=</span> <span class="n">PKCS1_v1_5</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">verifier</span><span class="o">.</span><span class="n">verify</span><span class="p">(</span><span class="n">h</span><span class="p">,</span> <span class="n">data</span><span class="p">[</span><span class="mh">0x04</span><span class="p">:</span><span class="mh">0x84</span><span class="p">]):</span>
        <span class="nb">print</span><span class="p">(</span><span class="s2">"Incorrect signature, wrong public key?"</span><span class="p">)</span>
        <span class="k">return</span> <span class="kc">None</span>

    <span class="c1"># Decrypt node list length</span>
    <span class="n">arc4</span> <span class="o">=</span> <span class="n">ARC4</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="mh">0x84</span><span class="p">:</span><span class="mh">0x94</span><span class="p">])</span>

    <span class="c1"># Decrypt node list</span>
    <span class="n">arc4</span> <span class="o">=</span> <span class="n">ARC4</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="mh">0x98</span><span class="p">:</span><span class="mh">0xA8</span><span class="p">])</span>
    <span class="n">third</span> <span class="o">=</span> <span class="n">arc4</span><span class="o">.</span><span class="n">decrypt</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="mh">0xA8</span><span class="p">:])</span>
    <span class="n">list_bot</span> <span class="o">=</span> <span class="n">gzip</span><span class="o">.</span><span class="n">decompress</span><span class="p">(</span><span class="n">third</span><span class="p">)</span>

    <span class="c1"># Parse node list</span>
    <span class="n">ret</span> <span class="o">=</span> <span class="nb">list</span><span class="p">()</span>
    <span class="k">if</span> <span class="n">list_bot</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="mh">0x10</span><span class="p">:</span>
        <span class="n">size</span> <span class="o">=</span> <span class="n">struct</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="s2">"&gt;I"</span><span class="p">,</span> <span class="n">list_bot</span><span class="p">[</span><span class="mi">1</span><span class="p">:</span><span class="mi">5</span><span class="p">])[</span><span class="mi">0</span><span class="p">]</span>
        <span class="k">if</span> <span class="n">size</span> <span class="o">+</span> <span class="mi">5</span> <span class="o">==</span> <span class="nb">len</span><span class="p">(</span><span class="n">list_bot</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">l</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">list_bot</span><span class="p">),</span> <span class="mi">6</span><span class="p">):</span>
                <span class="n">j</span> <span class="o">=</span> <span class="n">struct</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="s2">"&gt;BBBBH"</span><span class="p">,</span> <span class="n">list_bot</span><span class="p">[</span><span class="n">l</span><span class="p">:</span><span class="n">l</span><span class="o">+</span><span class="mi">6</span><span class="p">])</span>
                <span class="n">ret</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s2">"https://</span><span class="si">%d</span><span class="s2">.</span><span class="si">%d</span><span class="s2">.</span><span class="si">%d</span><span class="s2">.</span><span class="si">%d</span><span class="s2">:</span><span class="si">%d</span><span class="s2">/"</span> <span class="o">%</span> <span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">j</span><span class="p">[</span><span class="mi">0</span><span class="p">]),</span> <span class="nb">int</span><span class="p">(</span><span class="n">j</span><span class="p">[</span><span class="mi">1</span><span class="p">]),</span> <span class="nb">int</span><span class="p">(</span><span class="n">j</span><span class="p">[</span><span class="mi">2</span><span class="p">]),</span> <span class="nb">int</span><span class="p">(</span><span class="n">j</span><span class="p">[</span><span class="mi">3</span><span class="p">]),</span> <span class="nb">int</span><span class="p">(</span><span class="n">j</span><span class="p">[</span><span class="mi">4</span><span class="p">])))</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="nb">print</span><span class="p">(</span><span class="s2">"Length error"</span><span class="p">)</span>
            <span class="k">return</span> <span class="kc">None</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="nb">print</span><span class="p">(</span><span class="s2">"Magic error"</span><span class="p">)</span>
        <span class="k">return</span> <span class="kc">None</span>

    <span class="k">return</span> <span class="n">ret</span>
</code></pre></div><h1 id="persistence-and-execution-of-the-core-dll">Persistence and execution of the core DLL</h1><p>Dridex copies a random legitimate program from <code>C:\Windows\System32</code> to a new directory in <code>%AppData%</code> (randomly named) and the Dridex core DLL is copied to the same folder and renamed to one of the DLLs imported by the legitimate program. Later on, a scheduled task will run the legitimate binary and one of its DLLs will be hijacked by the Dridex core DLL. Below is a more detailed description of how this is done.</p><h2 id="dll-hijack">DLL hijack</h2><p>First, Dridex scans <code>*.exe</code> files in <code>C:\Windows\System32\</code> and selects one binary that does not have the property to <strong>AutoElevated</strong>. It also enumerates imported DLLs in the binary and checks if the name of one of them matches a CRC32 whitelist:<br/></p><figure><img src="/images/dridex/sys32_DLL_get_valid_lib.PNG"/><figcaption>check_import_DLL</figcaption></figure><p></p><p>Below are the corresponding DLLs based on the CRC32 whitelist:</p><ul><li>ACTIVEDS.DLL</li><li>APPWIZ.CPL</li><li>CREDUI.DLL</li><li>D3D10.DLL</li><li>D3D10_1.DLL</li><li>D3D9.DLL</li><li>DPX.DLL</li><li>DUI70.DLL</li><li>DUSER.DLL</li><li>DWMAPI.DLL</li><li>DXGI.DLL</li><li>DXVA2.DLL</li><li>FVEWIZ.DLL</li><li>HID.DLL</li><li>ISCSIDSC.DLL</li><li>ISCSIUM.DLL</li><li>MAGNIFICATION.DLL</li><li>MFC42U.DLL</li><li>MFPLAT.DLL</li><li>MMCBASE.DLL</li><li>MSCMS.DLL</li><li>MSSWCH.DLL</li><li>NDFAPI.DLL</li><li>NETPLWIZ.DLL</li><li>NEWDEV.DLL</li><li>OLEACC.DLL</li><li>P2P.DLL</li><li>P2PCOLLAB.DLL</li><li>QUARTZ.DLL</li><li>REAGENT.DLL</li><li>SECUR32.DLL</li><li>SLC.DLL</li><li>SPP.DLL</li><li>SQMAPI.DLL</li><li>SRCORE.DLL</li><li>SRVCLI.DLL</li><li>SYSDM.CPL</li><li>TAPI32.DLL</li><li>UXTHEME.DLL</li><li>VERSION.DLL</li><li>WER.DLL</li><li>WINBRAND.DLL</li><li>WINMM.DLL</li><li>WINSTA.DLL</li><li>WMSGAPI.DLL</li><li>WTSAPI32.DLL</li><li>XMLLITE.DLL</li></ul><p>When a binary with a matching imported DLL is found, the legitimate DLL export directory content replaces the missing one in the core DLL:</p><figure><img src="/images/dridex/core_DLL_data_dir_export_missing.PNG"/><figcaption>original_core_DLL</figcaption></figure><br/><figure><img src="/images/dridex/new_core_DLL_data_dir.PNG"/><figcaption>new_core_DLL_data_dir</figcaption></figure><br/><figure><img src="/images/dridex/new_core_DLL_export_dir.PNG"/><figcaption>new_core_DLL_export_dir</figcaption></figure><p></p><p>The core DLL is copied to a new directory (randomly named) in <code>AppData\Roaming</code> and the DLL filename is borrowed from the legitimate one.</p><figure><img src="/images/dridex/write_DLL_roaming.PNG"/><figcaption>appdata_roaming_write</figcaption></figure><p></p><p>The selected legitimate binary is also copied in the same directory:</p><figure><img src="/images/dridex/ls_roaming_dir.PNG"/><figcaption>ls_roaming_dir</figcaption></figure><p></p><p>Everything is set up for the scheduled task.</p><h2 id="task-scheduler">Task scheduler</h2><p>Depending on the process privilege, one or two scheduled tasks are registered. The function which registers the scheduled task uses a COM object and the task properties are set using the XML format. Important properties are set dynamically by the following tags:</p><ul><li><code>&lt;author&gt;</code> (specifies the author of the task);</li><li><code>&lt;URI&gt;</code> (specifies where the registered task is placed in the task folder hierarchy);</li><li><code>&lt;UserID&gt;</code> (specifies the user identifier required to run those tasks associated with the principal);</li><li><code>&lt;exec&gt;&lt;command&gt;</code> (specifies an action that executes a command line operation).</li></ul><p>With administrator privileges, two scheduled tasks are set. In both cases, the task URI is located in a random dir in <code>C:\Windows\System32\Tasks\Microsoft\Windows\</code>:</p><figure><img src="/images/dridex/get_task_folder.PNG"/><figcaption>get_task_folder</figcaption></figure><p></p><div class="highlight"><pre><span></span><code><span class="nb">echo</span><span class="w"> </span>-en<span class="w"> </span><span class="s1">'tasks'</span><span class="w"> </span><span class="p">|</span><span class="w"> </span>crc32<span class="w"> </span><span class="p">|</span><span class="w"> </span>xor<span class="w"> </span>h:38BA5C7B<span class="w"> </span><span class="p">|</span><span class="w"> </span>xxd
<span class="m">00000000</span>:<span class="w"> </span>68e2<span class="w"> </span>39ec<span class="w">                                </span>h.9.
<span class="nb">echo</span><span class="w"> </span>-en<span class="w"> </span><span class="s1">'microsoft'</span><span class="w"> </span><span class="p">|</span><span class="w"> </span>crc32<span class="w"> </span><span class="p">|</span><span class="w"> </span>xor<span class="w"> </span>h:38BA5C7B<span class="w"> </span><span class="p">|</span><span class="w"> </span>xxd
<span class="m">00000000</span>:<span class="w"> </span><span class="m">0523</span><span class="w"> </span>75f3<span class="w">                                </span>.#u.
<span class="nb">echo</span><span class="w"> </span>-en<span class="w"> </span><span class="s1">'windows'</span><span class="w"> </span><span class="p">|</span><span class="w"> </span>crc32<span class="w"> </span><span class="p">|</span><span class="w"> </span>xor<span class="w"> </span>h:38BA5C7B<span class="w"> </span><span class="p">|</span><span class="w"> </span>xxd
<span class="m">00000000</span>:<span class="w"> </span>db5d<span class="w"> </span>d9e0<span class="w">                                </span>.<span class="o">]</span>..
</code></pre></div><p>The difference starts with the URI filename. In the first task, the URI takes a legitimate task file and appends the user SID (e.g. <code>&lt;URI&gt;\Microsoft\Windows\CloudExperienceHost\CreateObjectTask-S-1-5-21-407257916-1831654507-2643036364-1001&lt;/URI&gt;</code>):<br/></p><figure><img src="/images/dridex/URI_SID.PNG"/><figcaption>task_uri_SID</figcaption></figure><p></p><p>The <code>&lt;author&gt;</code> element is hard-coded <code>&lt;Author&gt;$(@%systemroot%\system32\wininet.DLL,-16000)&lt;/Author&gt;</code>.</p><p>The <code>&lt;exec&gt;&lt;command&gt;</code> is the path to the binary with the hijacked DLL as seen previously in the <code>AppData\Roaming</code> dir:<br/> <code>&lt;Exec&gt;&lt;Command&gt;C:\Users\YYYYYYYYYYYY\AppData\Roaming\Xsbzewcltzyxfl\rstrui.exe&lt;/Command&gt;&lt;/Exec&gt;</code></p><p>On the <strong>second scheduled task</strong>, the <code>&lt;URI&gt;</code> starts with the randomly selected dir and the filename is built with a pseudo-random algorithm based on the previously seen <em>unique_account</em> hashes. Basically, it generates MD5 hashes and picks only ASCII letters to build a string until it is long enough:<br/></p><figure><img src="/images/dridex/gen_pseudo_random_char.PNG"/><figcaption>generate_pseudo_random_strings</figcaption></figure><p></p><p>The <code>&lt;author&gt;</code> element is a field copy from the randomly selected task in the <code>C:\Windows\System32\Tasks\Microsoft\Windows\</code>. To get the value, it scans the XML task file until it finds the <code>&lt;author&gt;</code> tags using the traditional CRC32 code methods:<br/></p><figure><img src="/images/dridex/author_tag.PNG"/><figcaption>get_author_tag</figcaption></figure><p></p><div class="highlight"><pre><span></span><code><span class="nb">echo</span><span class="w"> </span>-en<span class="w"> </span><span class="s1">'author'</span><span class="w"> </span><span class="p">|</span><span class="w"> </span>crc32<span class="w"> </span><span class="p">|</span><span class="w"> </span>xor<span class="w"> </span>h:38BA5C7B<span class="w"> </span><span class="p">|</span><span class="w"> </span>xxd
<span class="m">00000000</span>:<span class="w"> </span><span class="m">8515</span><span class="w"> </span>84b3<span class="w">                                </span>....
</code></pre></div><p>In the second task, the <code>&lt;exec&gt;&lt;command&gt;</code> is a random dir in <code>C:\Windows\System32</code> that does not exist at that moment. It is still unclear what the purpose of this scheduled task is:<br/></p><figure><img src="/images/dridex/random_dir_in_sys32.PNG"/><figcaption>random_dir_in_sys32</figcaption></figure><p></p><p>To register the task, Dridex uses a COM Object by calling <strong>CoCreateInstance</strong> to create a <strong>TaskService</strong> instance:<br/></p><figure><img src="/images/dridex/oleview_CLSID.PNG"/><figcaption>ITaskService</figcaption></figure><p></p><p>The <strong>Connect</strong>, <strong>getfolder</strong>, <strong>NewTask</strong> and <strong>RegisterTaskDefinition</strong> methods are called to register the task. Both tasks are launched at the opening session and every 30 minutes:<br/></p><figure><img src="/images/dridex/tache-SID.PNG"/><figcaption>First_task</figcaption></figure><br/><figure><img src="/images/dridex/tache_unique.PNG"/><figcaption>secund_task</figcaption></figure><p></p><p>The full permission is granted to the task file:</p><figure><img src="/images/dridex/icacls_exe.PNG"/><figcaption>Grant_task_URI_Full_permissions</figcaption></figure><p></p><p>The differences with normal privileges are the following:</p><ol><li>The URI path of the created task is in the task root folder;</li><li>The name is generated from the pseudo-random function.</li></ol><h1 id="mutex">Mutex</h1><p>Before and after the scheduled task is registered, the loader checks the presence of a mutex. If the mutex is found, it means that the core DLL has been successfully started by the scheduled task and the core DLL is already injected in the <strong>explorer.exe</strong> process. Otherwise, it tries to reschedule a task.</p><figure><img src="/images/dridex/mutex.PNG"/><figcaption>mutex_check</figcaption></figure><p></p><p>The mutex name is generated using the same technique as the <em>unique_account</em> with a hard-coded number (<code>md5(computer_name + user_name + \x00 + \x02\x00 + installdate + \x00\x00)</code>) and formatted as a CLSID.</p><p>The following script can be used to check if your computer is infected.</p><div class="highlight"><pre><span></span><code><span class="k">Function</span> <span class="nb">Test-IsMutexAvailable</span> <span class="p">{</span>
    <span class="cm">&lt;#</span>
<span class="cm">    from: https://www.powershellgallery.com/packages/PSBuildSecrets/1.0.31/Content/Private%5CTest-IsMutexAvailable.ps1</span>
<span class="cm">    </span><span class="sd">.SYNOPSIS</span>
<span class="cm">        check if current thread is able to acquire an exclusive lock on a system mutex.</span>
<span class="cm">    </span><span class="sd">.DESCRIPTION</span>
<span class="cm">        A mutex can be used to serialize applications and prevent multiple instances from being opened at the same time.</span>
<span class="cm">        Wait, up to a timeout (default is 1 millisecond), for the mutex to become available for an exclusive lock.</span>
<span class="cm">    </span><span class="sd">.PARAMETER</span><span class="cm"> MutexName</span>
<span class="cm">        The name of the system mutex.</span>
<span class="cm">    </span><span class="sd">.EXAMPLE</span>
<span class="cm">        Test-IsMutexAvailable -MutexName 'Global\B475815D-EA35-2753-859C-6D042FE3C161'</span>
<span class="cm">    </span><span class="sd">.NOTES</span>
<span class="cm">        This is an internal script function and should typically not be called directly.</span>
<span class="cm">    #&gt;</span>
        <span class="p">[</span><span class="k">CmdletBinding</span><span class="p">()]</span>
        <span class="k">Param</span> <span class="p">(</span>
            <span class="p">[</span><span class="k">Parameter</span><span class="p">(</span><span class="k">Mandatory</span><span class="p">=</span><span class="nv">$true</span><span class="p">)]</span>
            <span class="p">[</span><span class="k">ValidateLength</span><span class="p">(</span><span class="n">1</span><span class="p">,</span><span class="n">500</span><span class="p">)]</span>
            <span class="no">[string]</span><span class="nv">$MutexName</span>
        <span class="p">)</span>

    <span class="k">Try</span> <span class="p">{</span>
        <span class="nb">Write-Host</span> <span class="s2">"[+] Check to see if mutex $MutexName is available."</span>
        <span class="c">## Using this variable allows capture of exceptions from .NET methods. Private scope only changes value for current function.</span>
        <span class="nv">$private:previousErrorActionPreference</span> <span class="p">=</span> <span class="nv">$ErrorActionPreference</span>
        <span class="nv">$ErrorActionPreference</span> <span class="p">=</span> <span class="s1">'Stop'</span>

        <span class="c">## Open the specified named mutex, if it already exists, without acquiring an exclusive lock on it. If the system mutex does not exist, this method throws an exception instead of creating the system object.</span>
        <span class="no">[Threading.Mutex]</span><span class="nv">$OpenExistingMutex</span> <span class="p">=</span> <span class="no">[Threading.Mutex]</span><span class="p">::</span><span class="n">OpenExisting</span><span class="p">(</span><span class="nv">$MutexName</span><span class="p">)</span>
        <span class="nv">$IsMutexExist</span> <span class="p">=</span> <span class="nv">$true</span>
        <span class="nv">$OpenExistingMutex</span><span class="p">.</span><span class="n">Close</span><span class="p">()</span>
    <span class="p">}</span>
    <span class="k">Catch</span> <span class="no">[Threading.WaitHandleCannotBeOpenedException]</span> <span class="p">{</span>
        <span class="nb">Write-Host</span> <span class="s2">"The named mutex does not exist"</span>
        <span class="nv">$IsMutexFree</span> <span class="p">=</span> <span class="nv">$true</span>
        <span class="nv">$IsMutexExist</span> <span class="p">=</span> <span class="nv">$false</span>
    <span class="p">}</span>
    <span class="k">Catch</span> <span class="no">[ObjectDisposedException]</span> <span class="p">{</span>
        <span class="nb">Write-Host</span> <span class="s2">"Mutex was disposed between opening it and attempting to wait on it"</span>
        <span class="nv">$IsMutexFree</span> <span class="p">=</span> <span class="nv">$true</span>
        <span class="nv">$IsMutexExist</span> <span class="p">=</span> <span class="nv">$true</span>
    <span class="p">}</span>
    <span class="k">Catch</span> <span class="no">[UnauthorizedAccessException]</span> <span class="p">{</span>
        <span class="nb">Write-Host</span> <span class="s2">"The named mutex exists, but the user does not have the security access required to use it"</span>
        <span class="nv">$IsMutexFree</span> <span class="p">=</span> <span class="nv">$false</span>
        <span class="nv">$IsMutexExist</span> <span class="p">=</span> <span class="nv">$true</span>
    <span class="p">}</span>
    <span class="k">Catch</span> <span class="no">[Threading.AbandonedMutexException]</span> <span class="p">{</span>
        <span class="nb">Write-Host</span> <span class="s2">"The wait completed because a thread exited without releasing a mutex. This exception is thrown when one thread acquires a mutex object that another thread has abandoned by exiting without releasing it."</span>
        <span class="nv">$IsMutexFree</span> <span class="p">=</span> <span class="nv">$true</span>
        <span class="nv">$IsMutexExist</span> <span class="p">=</span> <span class="nv">$true</span>
    <span class="p">}</span>
    <span class="k">Catch</span> <span class="p">{</span>
        <span class="nv">$IsUnhandledException</span> <span class="p">=</span> <span class="nv">$true</span>
        <span class="nb">Write-Host</span> <span class="s2">"Return $true, to signify that mutex is available, because function was unable to successfully complete a check due to an unhandled exception. Default is to err on the side of the mutex being available on a hard failure."</span>
        <span class="nb">Write-Verbose</span> <span class="s2">"Unable to check if mutex [$MutexName] is available due to an unhandled exception. Will default to return value of [$true]. </span><span class="se">`n</span><span class="p">$(</span><span class="nb">Resolve-Error</span><span class="p">)</span><span class="s2">"</span> <span class="n">-Severity</span> <span class="n">3</span>
        <span class="nv">$IsMutexFree</span> <span class="p">=</span> <span class="nv">$true</span>
        <span class="nv">$IsMutexExist</span> <span class="p">=</span> <span class="nv">$true</span>
    <span class="p">}</span>
    <span class="nv">$HashObject</span> <span class="p">=</span> <span class="p">@{</span>
        <span class="n">MutexName</span> <span class="p">=</span> <span class="nv">$MutexName</span>
        <span class="n">IsMutexExist</span> <span class="p">=</span> <span class="nv">$IsMutexExist</span>
    <span class="p">}</span>
    <span class="nv">$Result</span> <span class="p">+=</span> <span class="nb">New-Object</span> <span class="n">PSObject</span> <span class="n">-Property</span> <span class="nv">$HashObject</span>
    <span class="k">return</span> <span class="nv">$Result</span>
<span class="p">}</span>

<span class="nv">$enc</span> <span class="p">=</span> <span class="no">[system.Text.Encoding]</span><span class="p">::</span><span class="n">UTF8</span>
<span class="nv">$datas</span> <span class="p">=</span> <span class="nv">$enc</span><span class="p">.</span><span class="n">GetBytes</span><span class="p">(</span><span class="nv">$env:ComputerName</span><span class="p">)</span> <span class="p">+</span> <span class="nv">$enc</span><span class="p">.</span><span class="n">GetBytes</span><span class="p">(</span><span class="nv">$env:UserName</span><span class="p">)</span> <span class="p">+</span> <span class="no">[byte]</span><span class="n">0x00</span> <span class="p">+</span> <span class="no">[byte]</span><span class="n">0x02</span> <span class="p">+</span> <span class="no">[byte]</span><span class="n">0x00</span>
<span class="nv">$date</span> <span class="p">=</span> <span class="nb">Get-ItemProperty</span> <span class="n">-Path</span> <span class="s1">'HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\'</span> <span class="p">|</span> <span class="nb">select </span><span class="n">-ExpandProperty</span> <span class="n">InstallDate</span>

<span class="nv">$x</span> <span class="p">=</span> <span class="no">[BitConverter]</span><span class="p">::</span><span class="n">GetBytes</span><span class="p">(</span><span class="nv">$date</span><span class="p">)</span>
<span class="nv">$datas</span> <span class="p">=</span> <span class="nv">$datas</span> <span class="p">+</span> <span class="nv">$x</span> <span class="p">+</span> <span class="no">[byte]</span><span class="n">0x00</span> <span class="p">+</span> <span class="no">[byte]</span><span class="n">0x00</span>

<span class="nv">$md5</span> <span class="p">=</span> <span class="no">[System.Security.Cryptography.MD5]</span><span class="p">::</span><span class="n">Create</span><span class="p">(</span><span class="s2">"MD5"</span><span class="p">)</span>
<span class="nv">$md5</span><span class="p">.</span><span class="n">TransformFinalBlock</span><span class="p">(</span><span class="nv">$datas</span><span class="p">,</span> <span class="n">0</span><span class="p">,</span> <span class="nv">$datas</span><span class="p">.</span><span class="n">length</span><span class="p">)</span>
<span class="nv">$hash_txt</span> <span class="p">=</span> <span class="s1">''</span>
<span class="nv">$md5</span><span class="p">.</span><span class="n">Hash</span> <span class="p">|</span> <span class="k">foreach</span> <span class="p">{</span>
    <span class="nv">$hash_txt</span> <span class="p">+=</span> <span class="s1">'{0:X2}'</span> <span class="o">-f</span> <span class="nv">$_</span>
<span class="p">}</span>
<span class="nv">$hash_guid</span> <span class="p">=</span> <span class="no">[System.guid]</span><span class="p">::</span><span class="n">New</span><span class="p">(</span><span class="nv">$hash_txt</span><span class="p">)</span>
<span class="nv">$hash_guid</span> <span class="p">=</span> <span class="s1">'{'</span> <span class="p">+</span> <span class="nv">$hash_guid</span> <span class="p">+</span> <span class="s1">'}'</span>

<span class="nb">Write-Host</span> <span class="s2">"[---------------- Mutex ----------------]"</span>
<span class="nv">$IsMutexExist</span> <span class="p">=</span> <span class="nb">Test-IsMutexAvailable</span> <span class="n">-MutexName</span> <span class="nv">$hash_guid</span>
<span class="nb">Write-Host</span> <span class="nv">$IsMutexExist</span>
</code></pre></div><p>Output on an uncompromised system:</p><div class="highlight"><pre><span></span><code><span class="p">[----------------</span> <span class="n">Mutex</span> <span class="p">----------------]</span>
<span class="p">[+]</span> <span class="n">Check</span> <span class="n">to</span> <span class="n">see</span> <span class="k">if</span> <span class="n">mutex</span> <span class="p">{</span><span class="n">879f371e-fa61</span><span class="p">-</span><span class="n">7ba4-a4ab</span><span class="p">-</span><span class="n">805bbe55a0c7</span><span class="p">}</span> <span class="n">is</span> <span class="n">available</span><span class="p">.</span>
<span class="n">The</span> <span class="n">named</span> <span class="n">mutex</span> <span class="n">does</span> <span class="n">not</span> <span class="n">exist</span>
<span class="p">@{</span><span class="n">MutexName</span><span class="p">={</span><span class="n">879f371e-fa61</span><span class="p">-</span><span class="n">7ba4-a4ab</span><span class="p">-</span><span class="n">805bbe55a0c7</span><span class="p">};</span> <span class="n">IsMutexExist</span><span class="p">=</span><span class="n">False</span><span class="p">}</span>
</code></pre></div><p>Output on a compromised system:</p><div class="highlight"><pre><span></span><code><span class="p">[----------------</span> <span class="n">Mutex</span> <span class="p">----------------]</span>
<span class="p">[+]</span> <span class="n">Check</span> <span class="n">to</span> <span class="n">see</span> <span class="k">if</span> <span class="n">mutex</span> <span class="p">{</span><span class="n">879f371e-fa61</span><span class="p">-</span><span class="n">7ba4-a4ab</span><span class="p">-</span><span class="n">805bbe55a0c7</span><span class="p">}</span> <span class="n">is</span> <span class="n">available</span><span class="p">.</span>
<span class="p">@{</span><span class="n">MutexName</span><span class="p">={</span><span class="n">879f371e-fa61</span><span class="p">-</span><span class="n">7ba4-a4ab</span><span class="p">-</span><span class="n">805bbe55a0c7</span><span class="p">};</span> <span class="n">IsMutexExist</span><span class="p">=</span><span class="n">True</span><span class="p">}</span>
</code></pre></div><h1 id="conclusion">Conclusion</h1><p>Dridex loader techniques are common and do not integrate any novel features. The string and API obfuscating mechanisms are very standard but the anti-debug technique using Vector Exception Handler can be very painful without any sort of bypass, because it is on every API call. The network communication with the C&amp;C combines HTTPS with RC4. Moreover, the binary format makes it very hard to understand without any sort of reverse engineering. Finally, the persistence mechanism using the scheduled task is also common, but the use of DLL hijacking makes it very effective.</p><h1 id="iocs">IOCs</h1><h2 id="sample-hash">Sample hash</h2><ul><li>SHA256: 7b38b9c14389d7c57591a3aa4ae8a8f847ff7314f40e9cd2987ee5d4d22e84e9</li><li>SHA1: a1a07f9d5801b73214ce5d3675faaeb1e4a70c02</li><li>MD5: 509000b87e20c31a8975a035ba8af42c</li></ul><h2 id="cc-server">C&amp;C Server</h2><ul><li>81.169.224.222:3389</li><li>62.75.168.106:3886</li><li>82.165.152.127:3389</li></ul></div><div><div class="col-md-12 row"><a class="tag share-twitter" href="https://twitter.com/intent/tweet?text=Dridex%20Loader%20Analysis&amp;url=https%3A//blog.lexfo.fr/dridex-malware.html" rel="nofollow noopener" target="_blank"><span class="fab fa-x-twitter"></span></a> <a class="tag share-facebook" href="http://www.facebook.com/sharer/sharer.php?u=https%3A//blog.lexfo.fr/dridex-malware.html" rel="nofollow noopener" target="_blank"><span class="fab fa-facebook-f"></span></a> <a class="tag share-linkedin" href="https://www.linkedin.com/shareArticle?mini=true&amp;url=https%3A//blog.lexfo.fr/dridex-malware.html&amp;title=Dridex%20Loader%20Analysis&amp;summary=This%20article%20is%20a%20deep%20dive%20into%20the%20Dridex%20Loader&amp;source=https%3A//blog.lexfo.fr/dridex-malware.html" rel="nofollow noopener" target="_blank"><span class="fab fa-linkedin-in"></span></a> <a class="tag share-email" href="mailto:?subject=Dridex%20Loader%20Analysis&amp;body=https%3A//blog.lexfo.fr/dridex-malware.html" rel="nofollow noopener" target="_blank"><span class="fas fa-envelope"></span></a></div></div></main><a class="banner" href="https://www.ambionics.io/blog/"><p>Visit also our blog dedicated to web security research</p><img class="logo" src="/theme/images/ambionics-logo.svg"/></a><footer><div class="footer"><div><a href="https://lexfo.fr"><img class="logo" src="/theme/images/lexfo-logo.svg"/></a><p>+33 1 40 17 91 28 <br/> 5, rue Saulnier <br/> 75009 Paris</p></div><div><p><a class="nav-link contact-button" href="https://lexfo.fr/contact/">CONTACT US</a></p></div></div><hr/><div class="footer" style="color: #515151;"><div><p>Â© LEXFO 2024 - All rights reserved</p></div><div class="footer-networks"><a href="https://twitter.com/LexfoSecurite"><i class="fab fa-x-twitter"></i></a> <a href="https://www.linkedin.com/company/lexfo/"><i class="fab fa-linkedin"></i></a> <a href="https://github.com/lexfo"><i class="fab fa-github"></i></a></div></div></footer></body></html>