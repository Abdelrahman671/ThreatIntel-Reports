<!DOCTYPE html>
<html lang="zh-CN">
<head>

    <title>Playing Possum: What&#x27;s the Wpeeper Backdoor Up To?</title>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="HandheldFriendly" content="True" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    
    <link rel="preload" as="style" href="/assets/built/screen.css?v=256e1729b4" />
    <link rel="preload" as="script" href="/assets/built/casper.js?v=256e1729b4" />

    <link rel="stylesheet" type="text/css" href="/assets/built/screen.css?v=256e1729b4" />

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/tocbot/4.12.3/tocbot.css">

    <style>
        .gh-sidebar{
            width: 300px;
            left: -40px;
        }
        .gh-content ol ol li{
            list-style-type: none;
        }
        .gh-content {
            position: relative;
        }

        .gh-toc > .toc-list {
            position: relative;
            font-size: 12px;
             
        }

        .toc-list {
            overflow: hidden;
            list-style: none;
        }

        @media (min-width: 1300px) {
            .gh-sidebar {
                position: absolute; 
                top: 0;
                bottom: 0;
                margin-top: 4vmin;
                grid-column: wide-start / main-start; /* Place the TOC to the left of the content */
            }
        
            .gh-toc {
                position: sticky; /* On larger screens, TOC will stay in the same spot on the page */
                top: 4vmin;
            }
        }

        .gh-toc .is-active-link::before {
            background-color: var(--ghost-accent-color); /* Defines TOC   accent color based on Accent color set in Ghost Admin */
        } 
    </style>

    <link rel="icon" href="https://blog.xlab.qianxin.com/content/images/size/w256h256/2023/10/xlab-icon-1.png" type="image/png">
    <link rel="canonical" href="https://blog.xlab.qianxin.com/playing-possum-whats-the-wpeeper-backdoor-up-to/">
    <meta name="referrer" content="no-referrer-when-downgrade">
    
    <meta property="og:site_name" content="奇安信 X 实验室">
    <meta property="og:type" content="article">
    <meta property="og:title" content="Playing Possum: What&#x27;s the Wpeeper Backdoor Up To?">
    <meta property="og:description" content="Summary


On April 18, 2024, XLab&#x27;s threat hunting system detected an ELF file with zero detections on VirusTotal being distributed through two different domains. One of the domains was marked as malicious by three security firms, while the other was recently registered and had no detections, drawing our attention. Upon">
    <meta property="og:url" content="https://blog.xlab.qianxin.com/playing-possum-whats-the-wpeeper-backdoor-up-to/">
    <meta property="og:image" content="https://blog.xlab.qianxin.com/content/images/2024/04/wpeeper-2.webp">
    <meta property="article:published_time" content="2024-04-29T13:29:27.000Z">
    <meta property="article:modified_time" content="2024-06-06T01:52:14.000Z">
    <meta property="article:tag" content="Backdoor">
    <meta property="article:tag" content="Botnet">
    <meta property="article:tag" content="Android">
    <meta property="article:tag" content="EN">
    
    <meta name="twitter:card" content="summary_large_image">
    <meta name="twitter:title" content="Playing Possum: What&#x27;s the Wpeeper Backdoor Up To?">
    <meta name="twitter:description" content="Summary


On April 18, 2024, XLab&#x27;s threat hunting system detected an ELF file with zero detections on VirusTotal being distributed through two different domains. One of the domains was marked as malicious by three security firms, while the other was recently registered and had no detections, drawing our attention. Upon">
    <meta name="twitter:url" content="https://blog.xlab.qianxin.com/playing-possum-whats-the-wpeeper-backdoor-up-to/">
    <meta name="twitter:image" content="https://blog.xlab.qianxin.com/content/images/2024/04/wpeeper-2.webp">
    <meta name="twitter:label1" content="Written by">
    <meta name="twitter:data1" content="Alex.Turing">
    <meta name="twitter:label2" content="Filed under">
    <meta name="twitter:data2" content="Backdoor, Botnet, Android, EN">
    <meta name="twitter:site" content="@Xlab_qax">
    <meta name="twitter:creator" content="@TuringAlex">
    <meta property="og:image:width" content="1792">
    <meta property="og:image:height" content="1024">
    
    <script type="application/ld+json">
{
    "@context": "https://schema.org",
    "@type": "Article",
    "publisher": {
        "@type": "Organization",
        "name": "奇安信 X 实验室",
        "url": "https://blog.xlab.qianxin.com/",
        "logo": {
            "@type": "ImageObject",
            "url": "https://blog.xlab.qianxin.com/content/images/size/w256h256/2023/10/xlab-icon-1.png",
            "width": 60,
            "height": 60
        }
    },
    "author": {
        "@type": "Person",
        "name": "Alex.Turing",
        "image": {
            "@type": "ImageObject",
            "url": "https://blog.xlab.qianxin.com/content/images/2023/08/turing.png",
            "width": 1363,
            "height": 1363
        },
        "url": "https://blog.xlab.qianxin.com/author/alex/",
        "sameAs": [
            "https://twitter.com/TuringAlex"
        ]
    },
    "headline": "Playing Possum: What&#x27;s the Wpeeper Backdoor Up To?",
    "url": "https://blog.xlab.qianxin.com/playing-possum-whats-the-wpeeper-backdoor-up-to/",
    "datePublished": "2024-04-29T13:29:27.000Z",
    "dateModified": "2024-06-06T01:52:14.000Z",
    "image": {
        "@type": "ImageObject",
        "url": "https://blog.xlab.qianxin.com/content/images/2024/04/wpeeper-2.webp",
        "width": 1792,
        "height": 1024
    },
    "keywords": "Backdoor, Botnet, Android, EN",
    "description": "Summary\n\n\nOn April 18, 2024, XLab&#x27;s threat hunting system detected an ELF file with zero detections on VirusTotal being distributed through two different domains. One of the domains was marked as malicious by three security firms, while the other was recently registered and had no detections, drawing our attention. Upon analysis, we confirmed that this ELF was malware targeting Android systems, utilizing compromised WordPress sites as relay C2 servers, and we named it Wpeeper.\n\n\nWpeeper is a typ",
    "mainEntityOfPage": "https://blog.xlab.qianxin.com/playing-possum-whats-the-wpeeper-backdoor-up-to/"
}
    </script>

    <meta name="generator" content="Ghost 5.70">
    <link rel="alternate" type="application/rss+xml" title="奇安信 X 实验室" href="https://blog.xlab.qianxin.com/rss/">
    
    <script defer src="https://cdn.jsdelivr.net/ghost/sodo-search@~1.1/umd/sodo-search.min.js" data-key="85bfb974adb4cf4f0cda2658c7" data-styles="https://cdn.jsdelivr.net/ghost/sodo-search@~1.1/umd/main.css" data-sodo-search="https://blog.xlab.qianxin.com/" crossorigin="anonymous"></script>
    
    <link href="https://blog.xlab.qianxin.com/webmentions/receive/" rel="webmention">
    <script defer src="/public/cards.min.js?v=256e1729b4"></script>
    <link rel="stylesheet" type="text/css" href="/public/cards.min.css?v=256e1729b4">
    <script defer src="/public/comment-counts.min.js?v=256e1729b4" data-ghost-comments-counts-api="https://blog.xlab.qianxin.com/members/api/comments/counts/"></script>
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-8T4S62VBFD"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-8T4S62VBFD');
</script>
<style>:root {--ghost-accent-color: #4ca2ba;}</style>

</head>
<body class="post-template tag-backdoor tag-botnet tag-android tag-en is-head-middle-logo has-serif-title has-sans-body has-cover">
<div class="viewport">

    <header id="gh-head" class="gh-head outer">
        <div class="gh-head-inner inner">
            <div class="gh-head-brand">
                <a class="gh-head-logo no-image" href="https://blog.xlab.qianxin.com">
                        奇安信 X 实验室
                </a>
                <button class="gh-search gh-icon-btn" aria-label="Search this site" data-ghost-search><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2" width="20" height="20"><path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path></svg></button>
                <button class="gh-burger"></button>
            </div>

            <nav class="gh-head-menu">
                <ul class="nav">
    <li class="nav-home"><a href="https://blog.xlab.qianxin.com/">Home</a></li>
    <li class="nav-about"><a href="https://blog.xlab.qianxin.com/about/">About</a></li>
    <li class="nav-en"><a href="https://blog.xlab.qianxin.com/tag/en/">EN</a></li>
</ul>

            </nav>

            <div class="gh-head-actions">
                        <button class="gh-search gh-icon-btn" data-ghost-search><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2" width="20" height="20"><path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path></svg></button>
            </div>
        </div>
    </header>

    <div class="site-content">
        



<main id="site-main" class="site-main">
<article class="article post tag-backdoor tag-botnet tag-android tag-en ">

    <header class="article-header gh-canvas">

        <div class="article-tag post-card-tags">
                <span class="post-card-primary-tag">
                    <a href="/tag/backdoor/">Backdoor</a>
                </span>
        </div>

        <h1 class="article-title">Playing Possum: What&#x27;s the Wpeeper Backdoor Up To?</h1>


        <div class="article-byline">
        <section class="article-byline-content">

            <ul class="author-list">
                <li class="author-list-item">
                    <a href="/author/alex/" class="author-avatar">
                        <img class="author-profile-image" src="/content/images/size/w100/2023/08/turing.png" alt="Alex.Turing" />
                    </a>
                </li>
                <li class="author-list-item">
                    <a href="/author/acey9/" class="author-avatar">
                        <img class="author-profile-image" src="/content/images/size/w100/2023/11/3346712.jpeg" alt="Acey9" />
                    </a>
                </li>
                <li class="author-list-item">
                    <a href="/author/heziqian/" class="author-avatar">
                        <img class="author-profile-image" src="/content/images/size/w100/2024/01/sc_20230913155316.png" alt="heziqian" />
                    </a>
                </li>
            </ul>

            <div class="article-byline-meta">
                <h4 class="author-name"><a href="/author/alex/">Alex.Turing</a>, <a href="/author/acey9/">Acey9</a>, <a href="/author/heziqian/">heziqian</a></h4>
                <div class="byline-meta-content">
                    <time class="byline-meta-date" datetime="2024-04-29">2024年4月29日</time>
                        <span class="byline-reading-time"><span class="bull">&bull;</span> 11 min read</span>
                </div>
            </div>

        </section>
        </div>

            <figure class="article-image">
                <img
                    src="/content/images/size/w2000/2024/04/wpeeper-2.webp"
                    alt="Playing Possum: What&#x27;s the Wpeeper Backdoor Up To?"
                />
            </figure>

    </header>

    <section class="gh-content gh-canvas">
        <aside class="gh-sidebar"><div class="gh-toc"></div></aside> 
        <h1 id="summary">Summary</h1>
<p>On April 18, 2024, <code>XLab's threat hunting system</code> detected an ELF file with zero detections on VirusTotal being distributed through two different domains. One of the domains was marked as malicious by three security firms, while the other was recently registered and had no detections, drawing our attention. Upon analysis, we confirmed that this ELF was malware targeting Android systems, utilizing compromised WordPress sites as relay C2 servers, and we named it <strong>Wpeeper</strong>.</p>
<p>Wpeeper is a typical backdoor Trojan for Android systems, supporting functions such as collecting sensitive device information, managing files and directories, uploading and downloading, and executing commands. The most notable feature of Wpeeper lies in its network operations, which reflect the meticulous efforts of its creators in three aspects:</p>
<ol>
<li>Building a multi-level C2 architecture relying on compromised WordPress sites to hide the true C2 server.</li>
<li>Using the Session field to differentiate requests, with HTTPS protocol to protect network traffic.</li>
<li>Commands issued by C2 are encrypted with AES and accompanied by an elliptic curve signature to prevent takeover.</li>
</ol>
<p>Wpeeper originated from repackaged applications in the UPtodown Store, where attackers embedded a small code snippet into regular APKs to download and execute the malicious ELF. Due to the minimal amount of added code, the modified APKs currently also show zero detections on VirusTotal. UPtodown is a third-party app store similar to Google Play, with a vast global user base, which is likely why attackers chose it. Due to limited visibility, we do not know if the attackers had other options.</p>
<p>On April 22, Wpeeper suddenly ceased activity; its C2 servers and downloaders stopped providing services. Currently, the relevant samples remain undetected by security firms, effectively deceiving them all. There appears to be no reason for this abrupt halt at this juncture, leading us to suspect that there might be a larger scheme at play.</p>
<h1 id="the-abrupt-halt-of-the-campaign">The Abrupt Halt of the Campaign</h1>
<p>We have a relatively comprehensive view of Wpeeper's recent activities.</p>
<ul>
<li>April 17: Wpeeper was first uploaded to VirusTotal.</li>
<li>April 18: The system alerted us, and we began analysis.</li>
<li>April 19: We started tracking commands and received 36 new C2 servers.</li>
<li>April 22 at 8:31 AM: We received the last command.</li>
</ul>
<p>The final command, with function number 12, was to delete itself. Initially, we thought our command tracking had been exposed, but changing tracking IPs proved ineffective; subsequently, the downloader also ceased providing sample downloads. The entire campaign seemed to have been abruptly halted.</p>
<p>Why would the creators of Wpeeper do this? Perhaps they decided to give up, but we consider another possibility: the repackaged APKs served as downloaders for the Wpeeper backdoor, successfully evading antivirus detection. However, as long as there is network activity, there's a chance of detection. It might be strategically better to voluntarily stop network services, allowing the APKs to maintain their "innocent" status in the eyes of antivirus software, increase their installation numbers, and only then reveal Wpeeper’s true capabilities.</p>
<h1 id="wild-scale-distribution">Wild-Scale Distribution</h1>
<p>We don't have direct data on the scale of Wpeeper's distribution, but based on Google and Passive DNS (PDNS) results, the infection seems to be at the thousand-level, without widespread propagation.</p>
<ul>
<li>
<p>APK Installation Numbers:</p>
<p>A search on Google for the MD5 hash of the repackaged UPtodown APK yielded some results: a website named <a href="https://aapks.com/apk/uptodown-com-uptodown/?ref=blog.xlab.qianxin.com">aapks.com</a> offered it for download; another site named <a href="https://android-apk.org/com.uptodown/67444750-uptodown-com-uptodown/?ref=blog.xlab.qianxin.com">Android-apk.org</a> appeared to have statistics, with the count on April 20 being 1,743, and the number of downloads continues to increase.<br>
<img src="https://blog.xlab.qianxin.com/content/images/2024/04/wpeeper_google.png" alt="wpeeper_google.png" loading="lazy"></p>
</li>
<li>
<p>Downloader's PDNS:<br>
The APK includes two downloader domain names, whose resolution counts in the PDNS system can indirectly reflect its wild-scale distribution.<br>
<img src="https://blog.xlab.qianxin.com/content/images/2024/04/wpeeper_pdns.png" alt="wpeeper_pdns.png" loading="lazy"></p>
</li>
</ul>
<h1 id="apk-analysis">APK Analysis:</h1>
<p>Currently, we have captured one repackaged Uptodown application, and its basic information is as follows:</p>
<pre><code>Family: Wpeeper Downloader
MD5: 3dab5a687ab46dbbd80189d727637542
Type: Android
Package Name: com.uptodown
Version: 5.92
</code></pre>
<p>The attackers added the following code in the APK's MainActivity to create a new thread (MainActivity.F3) for downloading the malicious ELF file.</p>
<p><img src="https://blog.xlab.qianxin.com/content/images/2024/04/wpeeper_inject.png" alt="wpeeper_inject.png" loading="lazy"></p>
<p>The MainActivity.F3 function eventually calls the MainActivity.h5 function. The code is not obfuscated, making its functionality clear: it downloads an ELF file named "android" from two domains, renames it to "com.uptodownload.libs," and finally initiates its execution.<br>
<img src="https://blog.xlab.qianxin.com/content/images/2024/04/wpeeper_download.png" alt="wpeeper_download.png" loading="lazy"></p>
<h1 id="elf-analysis">ELF Analysis</h1>
<p>The malicious Wpeeper samples downloaded from the two domains are identical, and their basic information is as follows:</p>
<pre><code>Family: Wpeeper
MD5: 8e28f482dab8c52864b0a73c3c5c7337
Magic: ELF 64-bit LSB pie executable, ARM aarch64, version 1 (SYSV), dynamically linked, interpreter /system/bin/linker64, BuildID[sha1]=9fa32612558fab9480496f6b31fa5426ae8885d4, stripped
     
Packer: None
</code></pre>
<p>Wpeeper does not employ anti-analysis techniques, making its reverse engineering relatively straightforward. Its functionality is quite simple. In summary, when it runs on a victim's device, it checks for the presence of a file named <code>store.lock</code> in the same directory, which contains configuration information including C2 servers, Cookie, Interval, etc. If the <code>store.lock</code> file exists, it uses AES CBC mode to decrypt the file to obtain the C2s. It then constructs a POST request using libcurl to establish communication with C2 server and awaits commands. If the <code>store.lock</code> file does not exist, it decodes the C2 servers embedded in the sample using Base64, encrypts them, and saves them to the <code>store.lock</code> file before proceeding to establish communication and execute commands in the same manner. The following discussion will delve into these aspects to dissect the functionality of Wpeeper.</p>
<h2 id="obtaining-c2">Obtaining C2</h2>
<p>Wpeeper uses an array known as <code>c2_list</code> to store the current C2 servers, supporting up to 30 entries, initially empty. Its primary task upon execution is to populate this <code>c2_list</code>, which can be filled from two sources:</p>
<h3 id="source-1-hardcoding">Source 1: Hardcoding</h3>
<p>The bot decodes the embedded C2 within the sample to populate the <code>c2_list</code>. The embedded C2 is base64 encoded and decodes to a total of nine entries (see IOC C2 Hardcoded for details).<br>
<img src="https://blog.xlab.qianxin.com/content/images/2024/04/wpeeper_setc2_hard.png" alt="wpeeper_setc2_hard.png" loading="lazy"></p>
<h3 id="source-2-storelock">Source 2: store.lock</h3>
<p>The bot reads and decrypts the <code>store.lock</code> file to fill the <code>c2_list</code>.<br>
<img src="https://blog.xlab.qianxin.com/content/images/2024/04/wpeeper_setc2_aes.png" alt="wpeeper_setc2_aes.png" loading="lazy"><br>
The first 32 bytes of <code>store.lock</code> are the AES key, with the remainder being ciphertext. For example, considering a <code>store.lock</code> generated after Wpeeper has run on a test device for some time, the decryption is as follows:<br>
<img src="https://blog.xlab.qianxin.com/content/images/2024/04/wpeeper_cipher.png" alt="wpeeper_cipher.png" loading="lazy"></p>
<p>In addition to C2, the PlainText contains other information such as id, cookie, and interval. The flag is a fixed value of 0x000004, interval controls the sleep duration, and cookie and id are used to construct the HTTP header Cookie field.</p>
<pre><code>struct c2info
{
uint32 lenOfC2;
char[lenOfC2] C2s;
uint32 lenOfCookie;
char[lenOfCookie] cookie;
uint32 flag;
uint32 id;
uint32 flag;
uint32 interval;
}
</code></pre>
<p>Besides these two filling methods, <code>c2_list</code> also supports runtime updates. When Wpeeper receives a command type 3, it updates the <code>c2_list</code> using the payload delivered by the C2.<br>
<img src="https://blog.xlab.qianxin.com/content/images/2024/04/wppeeper_setc2_deliv.png" alt="wppeeper_setc2_deliv.png" loading="lazy"></p>
<h2 id="network-communication">Network Communication</h2>
<p>Wpeeper employs the libcurl library to construct POST requests for interacting with the C2 server. Within the header, the Cookie and Session fields are particularly critical as they are used to identify different types of requests.</p>
<p>Consider the example of Bot communication with the server via <code>http[s]://snipsnack.com/T8Q2BN/</code>:</p>
<h3 id="botc2">BOT ---&gt; C2</h3>
<p><img src="https://blog.xlab.qianxin.com/content/images/2024/04/wpeeper_reg.png" alt="wpeeper_reg.png" loading="lazy"><br>
The value in the Cookie field, after base64 decoding, is "nrjzekrxohxw0", where "nrjzekrxohxw" is a randomly generated lowercase string of length 12, and "0" is the initial id. The Session, decoded, is <code>{"auth": 1, "type": "search"}</code>, a combination of id and session, indicating that this is the Bot's first network join, and the request is a beacon.</p>
<p>Wpeeper's server differentiates between types of requests precisely through the Session field.</p>
<table>
<thead>
<tr>
<th>id</th>
<th>Session</th>
<th>Body</th>
<th>purpose</th>
</tr>
</thead>
<tbody>
<tr>
<td>From Bot (fixed 0)</td>
<td>{ "auth": 1, "type": "search" }</td>
<td>None</td>
<td>beacon</td>
</tr>
<tr>
<td>From C2</td>
<td>{ "auth": 0, "type": "search" }</td>
<td>None</td>
<td>request cmd</td>
</tr>
<tr>
<td>From C2</td>
<td>{ ["auth":]  "type":  "login" }</td>
<td>cmd result</td>
<td>upload result</td>
</tr>
<tr>
<td>From C2</td>
<td>{"o": xx, "l": xx, "type": "avatar" }</td>
<td>file context</td>
<td>upload specific length content of file</td>
</tr>
<tr>
<td>From C2</td>
<td>{ "l":1, "type": "query" }</td>
<td>None</td>
<td>request payload length</td>
</tr>
<tr>
<td>From C2</td>
<td>{"o": xx, "l": xx, "type": "query" }</td>
<td>None</td>
<td>request specific length content of payload</td>
</tr>
</tbody>
</table>
<h3 id="c2bot">C2 ---&gt; BOT</h3>
<p>The C2 responds with a JSON object containing two fields: id and data. The id is used to generate a Cookie in conjunction with a random string, while the data contains commands issued by the C2.</p>
<p><img src="https://blog.xlab.qianxin.com/content/images/2024/04/wpeeper_back.png" alt="wpeeper_back.png" loading="lazy"></p>
<p>When the Bot receives the data, it first decodes it using base64 to obtain the raw_data. The first 64 bytes of the raw_data are the digital signature, followed by 32 bytes which are the AES key. The remaining part is the ciphertext.</p>
<pre><code>   struct raw_data
   {
   uint8[64] signature;
   uint8[32] key;
   uint8[..] ciphertext;
   }
</code></pre>
<p>The Bot proceeds with AES decryption and executes the corresponding commands only after the digital signature verification is successful.</p>
<p><img src="https://blog.xlab.qianxin.com/content/images/2024/04/wpeeper_ecc.png" alt="wpeeper_ecc.png" loading="lazy"></p>
<p>Wpeeper uses compromised WordPress sites as relay C2s, effectively concealing the true C2 server but also introducing reliability issues, as the relay C2s are not under direct control of the attackers.<br>
Suppose an administrator of a compromised site (relay C2) discovers traces of Wpeeper, they could potentially issue commands. If the Bot does not validate the "legitimacy" of commands, the entire network could be easily compromised. Wpeeper's <strong>signature verification mechanism</strong> eliminates this possibility, ensuring the network remains secure from <strong>poisoning, takeover, or destruction</strong>.</p>
<p>Upon successful decryption of the ciphertext using AES CBC mode, <code>cmd_context</code> is obtained, structured as follows:</p>
<pre><code>struct cmd_context
{
uint32 id;
uint32 cmd;
uint32 payload_len;
uint8[cmd_len] payload;
uint32 randstr_len;
uint8[randstr_len] cookie;
}
</code></pre>
<p>Finally, the Bot executes various commands based on the <code>cmd</code> value in <code>cmd_context</code> and returns the results to the C2.<br>
<img src="https://blog.xlab.qianxin.com/content/images/2024/04/wpeeper_cmd.png" alt="wpeeper_cmd.png" loading="lazy"></p>
<p>Currently, Wpeeper supports a total of 13 commands, listed below with their numbers and corresponding functionalities.</p>
<table>
<thead>
<tr>
<th>Cmd</th>
<th>Function</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>collect device info</td>
</tr>
<tr>
<td>2</td>
<td>collect pkg list</td>
</tr>
<tr>
<td>3</td>
<td>update c2</td>
</tr>
<tr>
<td>4</td>
<td>set interval</td>
</tr>
<tr>
<td>5</td>
<td>update pubkey</td>
</tr>
<tr>
<td>6</td>
<td>download</td>
</tr>
<tr>
<td>7</td>
<td>collect arbitrary file info</td>
</tr>
<tr>
<td>8</td>
<td>collect arbitrary dir info</td>
</tr>
<tr>
<td>9</td>
<td>exec arbitrary cmd via shell</td>
</tr>
<tr>
<td>10</td>
<td>download  from C2 , then exec</td>
</tr>
<tr>
<td>11</td>
<td>update and exec</td>
</tr>
<tr>
<td>12</td>
<td>self-destruction</td>
</tr>
<tr>
<td>13</td>
<td>download from arbitrary URL, then exec</td>
</tr>
</tbody>
</table>
<p>We have implemented Python and CyberChef scripts in the Appendix for decrypting raw data ( readers can directly copy the CyberChef script from the Appendix into their browser, which intuitively displays the decryption process). Taking the above message from C2 as an example, the decrypted plaintext reveals a <code>cmd</code> value of 3. When the Bot receives this message, it executes command 3 to update the <code>c2_list</code> with the domain names found in the payload.<br>
<img src="https://blog.xlab.qianxin.com/content/images/2024/04/wpeeper_updatec2.png" alt="wpeeper_updatec2.png" loading="lazy"></p>
<h1 id="command-tracking">Command Tracking</h1>
<p>Previous reverse engineering of Wpeeper answered the question of <strong>what it can do</strong>, but we were still in the dark about <strong>what it was actually doing</strong>. To address this, we implemented the Wpeeper network protocol within the <code>XLab Command Tracking System</code>, which soon provided some insights.</p>
<p>Although the volume of commands for Wpeeper is not extensive, deeper analysis revealed some interesting findings. Statistical data shows that Wpeeper's commands are heavily concentrated in commands 1, 2, 3, and 4, indicating that Wpeeper is actively collecting sensitive information from victim devices, updating C2 servers, among others. Additionally, command 13 allowed us to capture a new ELF file, <strong>AppInstallerEx</strong>, which also functions to gather device information.</p>
<h2 id="insight-1-new-c2">Insight 1: New C2</h2>
<p>By sending beacon requests to the nine hardcoded C2 servers within the Wpeeper sample, we received 3500 instances of command 3, capturing 3500 sets of new C2 servers, resulting in 36 unique entries after deduplication (details seen in IOC C2 NEW).</p>
<p><img src="https://blog.xlab.qianxin.com/content/images/2024/04/wpeeper_track.png" alt="wpeeper_track.png" loading="lazy"></p>
<h2 id="insight-2-appinstallerex">Insight 2: AppInstallerEx</h2>
<p>On April 21, we received command 13, which instructed the download and execution of a program named AppInstallerEx.<br>
<img src="https://blog.xlab.qianxin.com/content/images/2024/04/wpeeper_app.png" alt="wpeeper_app.png" loading="lazy"></p>
<p>AppInstallerEx functions to collect device information and report it to <code>eamdomai.com</code>.</p>
<p><img src="https://blog.xlab.qianxin.com/content/images/2024/04/wpeeper_collect.png" alt="wpeeper_collect.png" loading="lazy"></p>
<h1 id="c2-role-analysis">C2 Role Analysis</h1>
<p>In this operation, Wpeeper utilized 45 C2 servers. The design behind these servers suggests that the attackers are highly experienced and clearly follow the "best practices" of cyber attacks.</p>
<p>Most of the 45 C2s are various compromised WordPress sites covering themes like cuisine, medicine, sports, and adult content. It's highly unlikely that the C2 servers are directly deployed on these compromised sites due to the high risk of exposure. More accurately, these are not C2s but C2 Redirectors— their role is to forward the Bot's requests to the real C2, aimed at shielding the actual C2 from detection (for ease of discussion, we will still refer to these 45 domains as C2s).</p>
<p>Initially, we categorized both the hardcoded and new C2s as the same tier (Tier3). Over time, we observed that after executing command 3 to update C2s, the new C2s would respond to the Bot's "request cmd" with commands 1, 2, and 4, while the hardcoded C2s only responded to initial check-in messages with command 3. Their patterns are distinctly different; the hardcoded C2s merely serve to lead to the new C2s, which truly fit the Tier3 definition: Used for general commands, enumeration, scanning, data exfiltration, etc.</p>
<p>Since the hardcoded C2s are fixed in the malicious samples and cannot be changed, there's a risk of losing control if these C2s are solely compromised websites. Thus, among these nine hardcoded C2s, some are likely servers owned by the attackers themselves. By analyzing the registration dates and whether they host legitimate pages, we believe that tartarcusp.com is likely an asset of the attackers.</p>
<h1 id="conclusion">Conclusion</h1>
<p>The encryption, signature verification, C2 Redirectors, and other mechanisms employed by Wpeeper all reflect the creators' professional proficiency. Even its current mysterious "silence" could likely be part of their attack strategy, aiming to enter the AI learning sample set of antivirus software as a trusted entity. Once Wpeeper’s characteristics are learned by AI as normal behavior, such threats could remain hidden for longer.</p>
<p>This article represents the basic intelligence we currently hold on Wpeeper. We invite peers with unique perspectives and administrators of websites affected by this backdoor Trojan to provide further clues. Interested readers can also contact us through Twitter for more detailed information.</p>
<h1 id="ioc">IOC</h1>
<h2 id="md5">MD5</h2>
<pre><code>APK
3dab5a687ab46dbbd80189d727637542
ELF
003577a70748ab4ed18af5aecbd0b529
32e92509bc4a5e3eb2146fe119c45f55
</code></pre>
<h2 id="reporter">Reporter</h2>
<pre><code>https://eamdomai.com/e?token=Tp5D1nRiu3rFOaCbT4PVcewqIhqbQspd8/3550AI/b1MMJttn+xr4oEFJiGx1bCZztteCi5dG1gYFlNTL0Fp8UaMxROCw4cr225ENjOCmT8oQUyMTjjuTo10fAuFsz9j
</code></pre>
<h2 id="downloader">Downloader</h2>
<pre><code>https://appflyer.co/downloads/latest/device/android/
https://dn.jnipatch.com/downloads/latest/device/android
</code></pre>
<h2 id="c2-redirectors">C2 Redirectors</h2>
<pre><code>Hardcoded
    https://tartarcusp.com/BZRAWE/
    https://www.chasinglydie.com/7V5QT0/
    https://www.civitize.com/0SA67H/
    https://wyattotero.com/AQVLLY/
    https://web.rtekno.com/5XPOS2/
    https://dermocuidado.com/8QSCZP/
    https://ocalacommercialconstruction.com/WXFHF6/
    https://scatsexo.com/NVZ4L0/
    https://snipsnack.com/T8Q2BN/
   
New

    https://4devsolutions.com/4NUAK1/
    https://atba3li.com/Z99QQ6/
    https://avsecretarial.com/PYWDEL/
    https://barbeariadomarfim.com/BN2TTO/
    https://beanblisscafe.com/MX1OAS/
    https://carloadspry.com/SJI4C1/
    https://carshringaraligarh.com/TBHH4O/
    https://coexisthedge.com/ZF57OA/
    https://dibplumber.com/LCN9UJ/
    https://dodgeagonize.com/KJSLOT/
    https://essentialelearning.com/EVSKOT/
    https://focusframephoto.com/1J10V9/
    https://fontshown.com/4D69BN/
    https://gadeonclub.com/Q9DVGH/
    https://hhfus.com/CUGCCO/
    https://kiwisnowman.com/DC4O03/
    https://masterlogisticsfzco.com/5CBSYC/
    https://mrscanology.com/8GVHT3/
    https://naroyaldiamonds.com/WZJ236/
    https://nt-riccotech.com/Q4LQKN/
    https://nutrivital-in.com/7DB9BC/
    https://petintrip.com/QPNQSM/
    https://qualitygoodsforconfectioners.com/3QLS47/
    https://rastellimeeting.com/9Q4GOM/
    https://schatzrestaurant.com/J2WMA6/
    https://socktopiashop.com/4WYZ7I/
    https://speedyrent-sa.com/AIOFB2/
    https://stilesmcgraw.com/1WN2BH/
    https://toubainfo.com/G1ACF0/
    https://trashspringield.com/GYNH3A/
    https://vaticanojoyas.com/R5Q7G4/
    https://wendyllc.com/QD8490/
    https://www.cureoscitystaging.com/YKUCU8/
    https://www.elcomparadorseguros.com/A5FDX7/
    https://www.francescocutrupi.com/WJYP89/
    https://www.yitaichi.com/K7ODU6/

</code></pre>
<h2 id="appendix">Appendix</h2>
<h3 id="python-script">Python Script</h3>
<pre><code class="language-python">from Crypto.Cipher import AES
import json

import hexdump
import base64
rspdata='''
[{"id":34204,
"data":"xdzIhP7WDEGlhUq6OZGGBCmsftzOQqyt7zB2hJe4Dbcxlx0bwTX8jk+YW1R5Rtuspkn29hYjaUM1dy1zOHczzkFufpM4s4hCZgLba824ZI1ceyOD5b0+PDGviGFM75NVd5TsCci075VMKdpoHwJXgmHzcgHKDDx3DW4EqzrqWBOIvo\/fZx6P2K4mZsUqThL0HzaXayl6t4caaNJRgkARC6IapV4kx3nOFBegG1KFtwAE0mTpCguZjBK03PlAabxfh76E2U3adlFtsajlTvZzlyu7XCPNTJBE9uPC6GV3LyWC9x1DH+3Wq5LT0+SvCeD3aoGOWJfn\/4j6H1r6iiZlitVLLMqKJtJbhg\/BKAFEXYQc\/brfw4CdMlJVQ8nNwToo+TIMY96SxNpznbsXVasjyilzB1yZ5ScJokjHK3bjHIu56cOdfcbG28bQLRVhZhjJ9h9Wd+H8+afSsO6C\/zqX8hkXPddGbgbzNhs0vF76970XCEKLYhPWRvIuVDStxOCiv25\/t\/yhsdmheLBHDga1qYRJuhvrzTZZrgLBQTjtv8uZ+CnQWAYhAkgvCJfo6vjKkg98MkTQzCinNGRImrz5LqiCwaZw3nx612MzL4rJ4Dk="}]
'''



rsplist=json.loads(rspdata)
for itmp in rsplist:
    raw_data=base64.b64decode(itmp['data'])
    ciphertext=raw_data[96:]
    aeskey=raw_data[64:96]
    aesiv=b"\x00"*16

    aes=AES.new(key=aeskey,iv=aesiv,mode=AES.MODE_CBC)
    plaintext=aes.decrypt(ciphertext)
    hexdump.hexdump(plaintext)
</code></pre>
<h3 id="cyberchef-recipe">CyberChef Recipe</h3>
<pre><code>https://gchq.github.io/CyberChef/#recipe=JSON_Beautify('%20%20%20%20',false,true)Regular_expression('User%20defined','%5Ba-zA-Z0-9%2B/%3D%5D%7B30,%7D',true,true,false,false,false,false,'List%20matches')From_Base64('A-Za-z0-9%2B/%3D',true,false)Register('(%5C%5Cx41%5C%5Cx6e%5B%5C%5Cs%5C%5CS%5D%7B30%7D)',true,false,false)Regular_expression('User%20defined','(%5C%5Cx77%5C%5Cx94%5B%5C%5Cs%5C%5CS%5D%2B)',true,true,false,false,false,false,'List%20matches')AES_Decrypt(%7B'option':'Latin1','string':'$R0'%7D,%7B'option':'Hex','string':'00%2000%2000%2000%2000%2000%2000%2000%2000%2000%2000%2000%2000%2000%2000%2000'%7D,'CBC','Raw','Raw',%7B'option':'Hex','string':''%7D,%7B'option':'Hex','string':''%7D)To_Hexdump(16,false,false,false)&amp;input=W3siaWQiOjM0MjA0LCJkYXRhIjoieGR6SWhQN1dERUdsaFVxNk9aR0dCQ21zZnR6T1FxeXQ3ekIyaEplNERiY3hseDBid1RYOGprK1lXMVI1UnR1c3BrbjI5aFlqYVVNMWR5MXpPSGN6emtGdWZwTTRzNGhDWmdMYmE4MjRaSTFjZXlPRDViMCtQREd2aUdGTTc1TlZkNVRzQ2NpMDc1Vk1LZHBvSHdKWGdtSHpjZ0hLRER4M0RXNEVxenJxV0JPSXZvXC9mWng2UDJLNG1ac1VxVGhMMEh6YVhheWw2dDRjYWFOSlJna0FSQzZJYXBWNGt4M25PRkJlZ0cxS0Z0d0FFMG1UcENndVpqQkswM1BsQWFieGZoNzZFMlUzYWRsRnRzYWpsVHZaemx5dTdYQ1BOVEpCRTl1UEM2R1YzTHlXQzl4MURIKzNXcTVMVDArU3ZDZUQzYW9HT1dKZm5cLzRqNkgxcjZpaVpsaXRWTExNcUtKdEpiaGdcL0JLQUZFWFlRY1wvYnJmdzRDZE1sSlZROG5Od1RvbytUSU1ZOTZTeE5wem5ic1hWYXNqeWlsekIxeVo1U2NKb2tqSEszYmpISXU1NmNPZGZjYkcyOGJRTFJWaFpoako5aDlXZCtIOCthZlNzTzZDXC96cVg4aGtYUGRkR2JnYnpOaHMwdkY3Njk3MFhDRUtMWWhQV1J2SXVWRFN0eE9DaXYyNVwvdFwveWhzZG1oZUxCSERnYTFxWVJKdWh2cnpUWlpyZ0xCUVRqdHY4dVorQ25RV0FZaEFrZ3ZDSmZvNnZqS2tnOThNa1RRekNpbk5HUkltcno1THFpQ3dhWnczbng2MTJNekw0cko0RGs9In1d
</code></pre>

    </section>

    <section class="article-comments gh-canvas">
        <div id="disqus_thread"></div>
        <script>
            var disqus_config = function () {
                this.page.url = "https://blog.xlab.qianxin.com/playing-possum-whats-the-wpeeper-backdoor-up-to/";  
                this.page.identifier = "ghost-662dd72afd1b1b00010826d5"
            };
            (function() {
            var d = document, s = d.createElement('script');
            s.src = 'https://xlab-qax.disqus.com/embed.js';
            s.setAttribute('data-timestamp', +new Date());
            (d.head || d.body).appendChild(s);
            })();
        </script>
        <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
    </section>
</article>
</main>





    </div>

    <footer class="site-footer outer">
        <div class="inner">
            <section class="copyright"><a href="https://blog.xlab.qianxin.com">奇安信 X 实验室</a> &copy; 2024</section>
            <nav class="site-footer-nav">
                <ul class="nav">
    <li class="nav-rss"><a href="https://blog.xlab.qianxin.com/rss/">RSS</a></li>
</ul>

            </nav>
            <div class="gh-powered-by"><a href="https://ghost.org/" target="_blank" rel="noopener">Powered by Ghost</a></div>
        </div>
    </footer>

</div>

    <div class="pswp" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="pswp__bg"></div>

    <div class="pswp__scroll-wrap">
        <div class="pswp__container">
            <div class="pswp__item"></div>
            <div class="pswp__item"></div>
            <div class="pswp__item"></div>
        </div>

        <div class="pswp__ui pswp__ui--hidden">
            <div class="pswp__top-bar">
                <div class="pswp__counter"></div>

                <button class="pswp__button pswp__button--close" title="Close (Esc)"></button>
                <button class="pswp__button pswp__button--share" title="Share"></button>
                <button class="pswp__button pswp__button--fs" title="Toggle fullscreen"></button>
                <button class="pswp__button pswp__button--zoom" title="Zoom in/out"></button>

                <div class="pswp__preloader">
                    <div class="pswp__preloader__icn">
                        <div class="pswp__preloader__cut">
                            <div class="pswp__preloader__donut"></div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="pswp__share-modal pswp__share-modal--hidden pswp__single-tap">
                <div class="pswp__share-tooltip"></div>
            </div>

            <button class="pswp__button pswp__button--arrow--left" title="Previous (arrow left)"></button>
            <button class="pswp__button pswp__button--arrow--right" title="Next (arrow right)"></button>

            <div class="pswp__caption">
                <div class="pswp__caption__center"></div>
            </div>
        </div>
    </div>
</div>
<script
    src="https://code.jquery.com/jquery-3.5.1.min.js"
    integrity="sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0="
    crossorigin="anonymous">
</script>
<script src="/assets/built/casper.js?v=256e1729b4"></script>
<script>
$(document).ready(function () {
    // Mobile Menu Trigger
    $('.gh-burger').click(function () {
        $('body').toggleClass('gh-head-open');
    });
    // FitVids - Makes video embeds responsive
    $(".gh-content").fitVids();
});
</script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/tocbot/4.12.3/tocbot.min.js"></script>

<script>
    tocbot.init({
        // Where to render the table of contents.
        collapseDepth: 6,
        tocSelector: '.gh-toc',
        // Where to grab the headings to build the table of contents.
        contentSelector: '.gh-content',
        // Which headings to grab inside of the contentSelector element.
        headingSelector: 'h1, h2, h3',
        // Ensure correct positioning
        hasInnerContainers: true,
    });

    document.addEventListener('DOMContentLoaded', function() {
        // 获取所有包含srcset属性的元素
        var elementsWithSrcset = document.querySelectorAll('[srcset]');

        // 循环遍历每个元素并删除srcset属性
        elementsWithSrcset.forEach(function(element) {
            element.removeAttribute('srcset');
        });
    });
</script>



</body>
</html>
