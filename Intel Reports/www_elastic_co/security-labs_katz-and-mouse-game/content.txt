<!DOCTYPE html><html lang="en"><head><meta charSet="utf-8"/><meta name="viewport" content="width=device-width"/><title>Katz and Mouse Game:  MaaS Infostealers Adapt to Patched Chrome Defenses — Elastic Security Labs</title><meta name="description" content="Elastic Security Labs breaks down bypass implementations from the infostealer ecosystem’s reaction to Chrome 127&#x27;s Application-Bound Encryption scheme."/><meta property="og:title" content="Katz and Mouse Game:  MaaS Infostealers Adapt to Patched Chrome Defenses — Elastic Security Labs"/><meta property="og:description" content="Elastic Security Labs breaks down bypass implementations from the infostealer ecosystem’s reaction to Chrome 127&#x27;s Application-Bound Encryption scheme."/><meta property="og:image" content="https://www.elastic.co/security-labs/assets/images/katz-and-mouse-game/Security Labs Images 2.jpg?338eb8b7a878893043322f8cc4628a44"/><meta property="og:image:alt" content="Elastic Security Labs breaks down bypass implementations from the infostealer ecosystem’s reaction to Chrome 127&#x27;s Application-Bound Encryption scheme."/><meta property="og:site_name"/><meta property="og:url" content="https://www.elastic.co/security-labs/katz-and-mouse-game"/><meta property="og:type" content="website"/><meta name="twitter:card" content="summary_large_image"/><meta name="twitter:title" content="Katz and Mouse Game:  MaaS Infostealers Adapt to Patched Chrome Defenses — Elastic Security Labs"/><meta name="twitter:description" content="Elastic Security Labs breaks down bypass implementations from the infostealer ecosystem’s reaction to Chrome 127&#x27;s Application-Bound Encryption scheme."/><meta name="twitter:image" content="https://www.elastic.co/security-labs/assets/images/katz-and-mouse-game/Security Labs Images 2.jpg?338eb8b7a878893043322f8cc4628a44"/><meta name="twitter:image:alt" content="Elastic Security Labs breaks down bypass implementations from the infostealer ecosystem’s reaction to Chrome 127&#x27;s Application-Bound Encryption scheme."/><link rel="canonical" href="https://www.elastic.co/security-labs/katz-and-mouse-game"/><link rel="preload" href="/security-labs/logo.svg" as="image" fetchpriority="high"/><link rel="preload" as="image" imageSrcSet="/security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fkatz-and-mouse-game%2FSecurity%20Labs%20Images%202.jpg&amp;w=640&amp;q=75 640w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fkatz-and-mouse-game%2FSecurity%20Labs%20Images%202.jpg&amp;w=750&amp;q=75 750w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fkatz-and-mouse-game%2FSecurity%20Labs%20Images%202.jpg&amp;w=828&amp;q=75 828w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fkatz-and-mouse-game%2FSecurity%20Labs%20Images%202.jpg&amp;w=1080&amp;q=75 1080w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fkatz-and-mouse-game%2FSecurity%20Labs%20Images%202.jpg&amp;w=1200&amp;q=75 1200w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fkatz-and-mouse-game%2FSecurity%20Labs%20Images%202.jpg&amp;w=1920&amp;q=75 1920w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fkatz-and-mouse-game%2FSecurity%20Labs%20Images%202.jpg&amp;w=2048&amp;q=75 2048w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fkatz-and-mouse-game%2FSecurity%20Labs%20Images%202.jpg&amp;w=3840&amp;q=75 3840w" imageSizes="100vw" fetchpriority="high"/><meta name="next-head-count" content="19"/><script src="https://play.vidyard.com/embed/v4.js" type="text/javascript" async=""></script><link rel="icon" href="/security-labs/favicon.svg"/><link rel="mask-icon" href="/security-labs/favicon.svg" color="#1C1E23"/><link rel="apple-touch-icon" href="/security-labs/favicon.svg"/><meta name="theme-color" content="#1C1E23"/><link rel="preload" href="/security-labs/_next/static/media/6d93bde91c0c2823-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/a34f9d1faa5f3315-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/369c6e283c5acc6e-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/92f44bb82993d879-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/ee71530a747ff30b-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/9fac010bc1f02be0-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/cbf5fbad4d73afac-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><script id="google-tag-manager" data-nscript="beforeInteractive">
          (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
          new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
          j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
          'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
          })(window,document,'script','dataLayer','GTM-KNJMG2M');
          </script><link rel="preload" href="/security-labs/_next/static/css/265ed7605fd03477.css" as="style"/><link rel="stylesheet" href="/security-labs/_next/static/css/265ed7605fd03477.css" data-n-g=""/><link rel="preload" href="/security-labs/_next/static/css/1007ff9e696f6f88.css" as="style"/><link rel="stylesheet" href="/security-labs/_next/static/css/1007ff9e696f6f88.css" data-n-p=""/><noscript data-n-css=""></noscript><script defer="" nomodule="" src="/security-labs/_next/static/chunks/polyfills-78c92fac7aa8fdd8.js"></script><script src="/security-labs/_next/static/chunks/webpack-7987c6fda769d510.js" defer=""></script><script src="/security-labs/_next/static/chunks/framework-7a7e500878b44665.js" defer=""></script><script src="/security-labs/_next/static/chunks/main-ebd33a9f1cae5951.js" defer=""></script><script src="/security-labs/_next/static/chunks/pages/_app-cb8664d1d3df2511.js" defer=""></script><script src="/security-labs/_next/static/chunks/fec483df-43ee602fabdfe3a4.js" defer=""></script><script src="/security-labs/_next/static/chunks/877-34f408271ef44c22.js" defer=""></script><script src="/security-labs/_next/static/chunks/511-d08fe0fdd6f8a984.js" defer=""></script><script src="/security-labs/_next/static/chunks/683-a5053c37fe5bd0c9.js" defer=""></script><script src="/security-labs/_next/static/chunks/402-b514a74fd9a6984b.js" defer=""></script><script src="/security-labs/_next/static/chunks/616-0b017b9cfa597392.js" defer=""></script><script src="/security-labs/_next/static/chunks/pages/%5Bslug%5D-3d74e9a05863bcfd.js" defer=""></script><script src="/security-labs/_next/static/m_OEejq3Aq_N04b0RxUFZ/_buildManifest.js" defer=""></script><script src="/security-labs/_next/static/m_OEejq3Aq_N04b0RxUFZ/_ssgManifest.js" defer=""></script></head><body><noscript><iframe src="https://www.googletagmanager.com/ns.html?id=GTM-KNJMG2M" height="0" width="0" style="display:none;visibility:hidden"></iframe></noscript><div id="__next"><main class="__variable_0351a5 __variable_1f211e __variable_a5b5f5 flex flex-col min-h-screen"><div class="scroll-percentage-container"><div class="scroll-percentage-bar" style="width:0%"></div></div><nav class="fixed w-full z-40" data-headlessui-state=""><div class="bg-gradient-to-b from-zinc-900 from-20% h-[200%] to-transparent absolute inset-0 z-0 pointer-events-none"></div><div class="container relative z-10"><div class="flex h-16 items-center justify-between"><div class="flex items-center justify-start w-full"><div><a class="hover:opacity-50 transition" href="/security-labs"><img alt="elastic security labs logo" fetchpriority="high" width="200" height="30" decoding="async" data-nimg="1" style="color:transparent" src="/security-labs/logo.svg"/></a></div><div class="hidden lg:ml-6 lg:block"><div class="flex space-x-4"><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/about"><span>About</span></a><div class="relative" data-headlessui-state=""><div><button class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" id="headlessui-menu-button-:R2kpm:" type="button" aria-haspopup="menu" aria-expanded="false" data-headlessui-state="">Topics<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" class="ml-1 -mr-1 h-4 w-4 text-zinc-400 relative top-[1px]"><path fill-rule="evenodd" d="M5.23 7.21a.75.75 0 011.06.02L10 11.168l3.71-3.938a.75.75 0 111.08 1.04l-4.25 4.5a.75.75 0 01-1.08 0l-4.25-4.5a.75.75 0 01.02-1.06z" clip-rule="evenodd"></path></svg></button></div></div><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/category/vulnerability-updates"><span>Vulnerability updates</span></a><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/category/reports"><span>Reports</span></a><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/category/tools"><span>Tools</span></a></div></div><div class="hidden lg:ml-auto lg:block"><div class="flex items-center space-x-4"><a class="rounded flex items-center p-4 text-white focus:outline-none focus:ring-0 focus:ring-offset-1 focus:ring-offset-zinc-600 group" href="https://search.elastic.co/?location%5B0%5D=Security%20Labs&amp;referrer=https://www.elastic.co/security-labs/katz-and-mouse-game"><div class="flex items-center relative font-display"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-6 w-6"><path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z"></path></svg></div></a><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="https://www.elastic.co/security-labs/rss/feed.xml"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" class="h-4 w-4 mr-1"><path d="M3.75 3a.75.75 0 00-.75.75v.5c0 .414.336.75.75.75H4c6.075 0 11 4.925 11 11v.25c0 .414.336.75.75.75h.5a.75.75 0 00.75-.75V16C17 8.82 11.18 3 4 3h-.25z"></path><path d="M3 8.75A.75.75 0 013.75 8H4a8 8 0 018 8v.25a.75.75 0 01-.75.75h-.5a.75.75 0 01-.75-.75V16a6 6 0 00-6-6h-.25A.75.75 0 013 9.25v-.5zM7 15a2 2 0 11-4 0 2 2 0 014 0z"></path></svg><span class="hidden xl:block">Subscribe</span></a><a class="font-display inline-flex items-center justify-center rounded font-semibold disabled:!select-none disabled:!bg-gray-400 bg-blue-600 text-white hover:bg-blue-500 enabled:hover:text-white/80 transition-colors px-4 py-2 text-sm flex-1 lg:flex-auto" href="https://cloud.elastic.co/registration?cta=cloud-registration&amp;tech=trial&amp;plcmt=navigation&amp;pg=security-labs">Start free trial</a><a class="font-display inline-flex items-center justify-center rounded font-semibold text-white disabled:!select-none disabled:!bg-gray-400 button px-4 py-2 text-sm flex-1 lg:flex-auto" href="https://www.elastic.co/contact">Contact sales</a></div></div></div><div class="-mr-2 flex lg:hidden"><a class="rounded flex items-center p-4 text-white focus:outline-none focus:ring-0 focus:ring-offset-1 focus:ring-offset-zinc-600 group" href="https://search.elastic.co/?location%5B0%5D=Security%20Labs&amp;referrer=https://www.elastic.co/security-labs/katz-and-mouse-game"><div class="flex items-center relative font-display"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-6 w-6"><path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z"></path></svg></div></a><button class="inline-flex items-center justify-center rounded-md p-2 text-gray-400 hover:bg-gray-700 hover:text-white focus:outline-none focus:ring-2 focus:ring-inset focus:ring-white" id="headlessui-disclosure-button-:R59m:" type="button" aria-expanded="false" data-headlessui-state=""><span class="sr-only">Open navigation menu</span><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="block h-6 w-6"><path stroke-linecap="round" stroke-linejoin="round" d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5"></path></svg></button></div></div></div></nav><main class="mb-20 flex-1 flex flex-col"><div class="h-48 md:h-64"><div class="after:absolute after:block after:bg-blue-400 after:blur-3xl after:content-[&#x27; &#x27;] after:h-96 after:opacity-5 after:right-0 after:rounded-full after:top-20 after:w-1/2 after:z-0 before:absolute before:block before:blur-3xl before:bg-orange-400 before:content-[&#x27; &#x27;] before:h-96 before:left-0 before:opacity-5 before:rounded-full before:w-1/2 before:z-0 w-full h-full relative"><div class="relative z-10 w-full h-[125%] -top-[25%] bg-no-repeat bg-cover bg-bottom flex items-center justify-center" style="background-image:url(/security-labs/grid.svg)"></div></div></div><article class="px-4"><div class="max-w-7xl mx-auto relative z-10 flex flex-col space-y-4"><div class="eyebrow break-words"><time class="block mb-2 md:mb-0 md:inline-block article-published-date" dateTime="2024-10-28T00:00:00.000Z">28 October 2024</time><span class="hidden md:inline-block md:mx-2">•</span><a class="hover:text-blue-400 text-xs md:text-sm whitespace-nowrap author-name" href="/security-labs/author/jia-yu-chan">Jia Yu Chan</a><span class="mx-2">•</span><a class="hover:text-blue-400 text-xs md:text-sm whitespace-nowrap author-name" href="/security-labs/author/salim-bitam">Salim Bitam</a><span class="mx-2">•</span><a class="hover:text-blue-400 text-xs md:text-sm whitespace-nowrap author-name" href="/security-labs/author/daniel-stepanic">Daniel Stepanic</a><span class="mx-2">•</span><a class="hover:text-blue-400 text-xs md:text-sm whitespace-nowrap author-name" href="/security-labs/author/samir-bousseaden">Samir Bousseaden</a><span class="mx-2">•</span><a class="hover:text-blue-400 text-xs md:text-sm whitespace-nowrap author-name" href="/security-labs/author/cyril-francois">Cyril François</a><span class="mx-2">•</span><a class="hover:text-blue-400 text-xs md:text-sm whitespace-nowrap author-name" href="/security-labs/author/seth-goodwin">Seth Goodwin</a></div><h1 class="font-bold leading-tighter text-3xl md:text-5xl"><span>Katz and Mouse Game:  MaaS Infostealers Adapt to Patched Chrome&nbsp;Defenses</span></h1><p class="text-zinc-200 text-base md:text-xl">Elastic Security Labs breaks down bypass implementations from the infostealer ecosystem’s reaction to Chrome 127&#x27;s Application-Bound Encryption scheme.</p><div class="flex items-center mt-4 text-zinc-200 text-sm space-x-4 border-t border-white/25 pt-4"><span class="flex items-center space-x-1"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-4 w-4 text-zinc-400"><path stroke-linecap="round" stroke-linejoin="round" d="M12 6v6h4.5m4.5 0a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg><span>20 min read</span></span><span class="flex items-center space-x-1"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-4 w-4 text-zinc-400"><path stroke-linecap="round" stroke-linejoin="round" d="M9.568 3H5.25A2.25 2.25 0 003 5.25v4.318c0 .597.237 1.17.659 1.591l9.581 9.581c.699.699 1.78.872 2.607.33a18.095 18.095 0 005.223-5.223c.542-.827.369-1.908-.33-2.607L11.16 3.66A2.25 2.25 0 009.568 3z"></path><path stroke-linecap="round" stroke-linejoin="round" d="M6 6h.008v.008H6V6z"></path></svg><span><a class="hover:text-blue-400 whitespace-nowrap" href="/security-labs/category/malware-analysis">Malware analysis</a></span></span></div></div><div class="max-w-7xl mx-auto"><div class="bg-zinc-900 border border-zinc-800 drop-shadow-lg p-5 sm:p-8 md:p-10 rounded-3xl mt-5 md:mt-10"><div class="relative w-full rounded-lg overflow-hidden aspect-video"><img alt="Katz and Mouse Game:  MaaS Infostealers Adapt to Patched Chrome Defenses" fetchpriority="high" decoding="async" data-nimg="fill" class="object-cover absolute h-full w-full" style="position:absolute;height:100%;width:100%;left:0;top:0;right:0;bottom:0;color:transparent" sizes="100vw" srcSet="/security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fkatz-and-mouse-game%2FSecurity%20Labs%20Images%202.jpg&amp;w=640&amp;q=75 640w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fkatz-and-mouse-game%2FSecurity%20Labs%20Images%202.jpg&amp;w=750&amp;q=75 750w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fkatz-and-mouse-game%2FSecurity%20Labs%20Images%202.jpg&amp;w=828&amp;q=75 828w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fkatz-and-mouse-game%2FSecurity%20Labs%20Images%202.jpg&amp;w=1080&amp;q=75 1080w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fkatz-and-mouse-game%2FSecurity%20Labs%20Images%202.jpg&amp;w=1200&amp;q=75 1200w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fkatz-and-mouse-game%2FSecurity%20Labs%20Images%202.jpg&amp;w=1920&amp;q=75 1920w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fkatz-and-mouse-game%2FSecurity%20Labs%20Images%202.jpg&amp;w=2048&amp;q=75 2048w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fkatz-and-mouse-game%2FSecurity%20Labs%20Images%202.jpg&amp;w=3840&amp;q=75 3840w" src="/security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fkatz-and-mouse-game%2FSecurity%20Labs%20Images%202.jpg&amp;w=3840&amp;q=75"/><div class="absolute border border-white/50 inset-0 mix-blend-overlay rounded-lg z-10"></div></div></div></div><div class="lg:max-w-7xl mx-auto relative mt-12 lg:grid lg:grid-cols-4 lg:gap-8 items-start"><div class="flex justify-center lg:col-span-3"><div class="prose lg:prose-lg prose-invert w-full article-content"><div><h1 class="font-bold leading-tighter text-3xl md:text-5xl relative"><span id="introduction" class="absolute -top-32"></span>Introduction</h1>
<p>In July, Google <a href="https://security.googleblog.com/2024/07/improving-security-of-chrome-cookies-on.html">announced</a> a new protection mechanism for cookies stored within Chrome on Windows, known as Application-Bound Encryption. There is no doubt this security implementation has raised the bar and directly impacted the malware ecosystem. After months with this new feature, many infostealers have written new code to bypass this protection (as the Chrome Security Team predicted) in order to stay competitive in the market and deliver capabilities that reliably retrieve cookie data from Chrome browsers.</p>
<p>Elastic Security Labs has been tracking a subset of this activity, identifying multiple techniques used by different malware families to circumvent App-Bound Encryption. While the ecosystem is still evolving in light of this pressure, our goal is to share technical details that help organizations understand and defend against these techniques. In this article, we will cover the different methods used by the following infostealer families:</p>
<ul>
<li>STEALC/VIDAR</li>
<li>METASTEALER</li>
<li>PHEMEDRONE</li>
<li>XENOSTEALER</li>
<li>LUMMA</li>
</ul>
<h1 class="font-bold leading-tighter text-3xl md:text-5xl relative"><span id="key-takeaways" class="absolute -top-32"></span>Key takeaways</h1>
<ul>
<li>Latest versions of infostealers implement bypasses around Google’s recent cookie protection feature using Application-Bound Encryption</li>
<li>Techniques include integrating offensive security tool ChromeKatz, leveraging COM to interact with Chrome services and decrypt the app-bound encryption key, and using the remote debugging feature within Chrome</li>
<li>Defenders should actively monitor for different cookie bypass techniques against Chrome on Windows in anticipation of future mitigations and bypasses likely to emerge in the near- to mid-term</li>
<li>Elastic Security provides mitigations through memory signatures, behavioral rules, and hunting opportunities to enable faster identification and response to infostealer activity</li>
</ul>
<h1 class="font-bold leading-tighter text-3xl md:text-5xl relative"><span id="background" class="absolute -top-32"></span>Background</h1>
<p>Generically speaking, cookies are used by web applications to store visitor information in the browser the visitor uses to access that web app. This information helps the web app track that user, their preferences, and other information from location to location– even across devices.</p>
<p>The authentication token is one use of the client-side data storage structures that enables much of how modern web interactivity works. These tokens are stored by the browser after the user has successfully authenticated with a web application. After username and password, after multifactor authentication (MFA) via one-time passcodes or biometrics, the web application “remembers” your browser is you via the exchange of this token with each subsequent web request.</p>
<p>A malicious actor who gets access to a valid authentication token can reuse it to impersonate the user to that web service with the ability to take over accounts, steal personal or financial information, or perform other actions as that user such as transfer financial assets.</p>
<p>Cybercriminals use infostealers to steal and commoditize this type of information for their financial gain.</p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="google-chrome-cookie-security" class="absolute -top-32"></span>Google Chrome Cookie Security</h2>
<p>Legacy versions of Google Chrome on Windows used the Windows native <a href="https://learn.microsoft.com/en-us/dotnet/standard/security/how-to-use-data-protection">Data Protection API</a> (DPAPI) to encrypt cookies and protect them from other user contexts. This provided adequate protection against several attack scenarios, but any malicious software running in the targeted user’s context could decrypt these cookies using the DPAPI methods directly. Unfortunately, this context is exactly the niche that infostealers often find themselves in after social engineering for initial access. The DPAPI scheme is now <a href="https://posts.specterops.io/operational-guidance-for-offensive-user-dpapi-abuse-1fb7fac8b107">well known to attackers</a> with several attack vectors; from local decryption using the API, to stealing the masterkey and decrypting remotely, to abusing the domain-wide backup DPAPI key in an enterprise environment.</p>
<p>With the release of Chrome 127 in July 2024, Google <a href="https://developer.chrome.com/release-notes/127">implemented</a> Application-Bound Encryption of browser data. This mechanism directly addressed many common DPAPI attacks against Windows Chrome browser data–including cookies. It does this by storing the data in encrypted datafiles, and using a service running as SYSTEM to verify any decryption attempts are coming from the Chrome process before returning the key to that process for decryption of the stored data.</p>
<p></p>
<p>While it is our view that this encryption scheme is not a panacea to protect all browser data (as the Chrome Security Team acknowledges in their release) we do feel it has been successful in driving malware authors to TTPs that are more overtly malicious, and easier for defenders to identify and respond to.</p>
<h1 class="font-bold leading-tighter text-3xl md:text-5xl relative"><span id="stealer-bypass-techniques-summarized" class="absolute -top-32"></span>Stealer Bypass Techniques, Summarized</h1>
<p>The following sections will describe specific infostealer techniques used to bypass Google’s App-Bound Encryption feature as observed by Elastic. Although this isn’t an exhaustive compilation of bypasses, and development of these families is ongoing, they represent an interesting dynamic within the infostealer space showing how malware developers responded to Google’s recently updated security control. The techniques observed by our team include:</p>
<ul>
<li>Remote debugging via Chrome’s DevTools Protocol</li>
<li>Reading process memory of Chrome network service process (ChromeKatz and <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">ReadProcessMemory</code> (RPM))</li>
<li>Elevating to <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">SYSTEM</code> then decrypting <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">app_bound_encryption_key</code> with the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">DecryptData</code> method of <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">GoogleChromeElevationService</code> through COM</li>
</ul>
<p></p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="stealcvidar" class="absolute -top-32"></span>STEALC/VIDAR</h2>
<p>Our team observed new code introduced to STEALC/VIDAR related to the cookie bypass technique around September 20th. These were atypical samples that stood out from previous versions and were implemented as embedded 64-bit PE files along with conditional checks. Encrypted values in the SQLite databases where Chrome stores its data are now prefixed with v20, indicating that the values are now encrypted using application-bound encryption.</p>
<blockquote>
<p><a href="https://malpedia.caad.fkie.fraunhofer.de/details/win.stealc">STEALC</a> was introduced in 2023 and was developed with “heavy inspiration” from other more established stealers such as <a href="https://malpedia.caad.fkie.fraunhofer.de/details/win.raccoon">RACOON</a> and <a href="https://malpedia.caad.fkie.fraunhofer.de/details/win.vidar">VIDAR</a>. STEALC and VIDAR have continued concurrent development, and in the case of App-Bound Encryption bypasses have settled on the same implementation.</p>
</blockquote>
<p>During the extraction of encrypted data from the databases the malware checks for this prefix. If it begins with <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">v20</code>, a child process is spawned using the embedded PE file in the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">.data</code> section of the binary. This program is responsible for extracting unencrypted cookie values residing in one of Chrome&#x27;s child processes.</p>
<p></p>
<p>This embedded binary creates a hidden desktop via <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">OpenDesktopA</code> / <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">CreateDesktopA</code> then uses <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">CreateToolhelp32Snapshot</code> to scan and terminate all <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">chrome.exe</code> processes. A new <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">chrome.exe</code> process is then started with the new desktop object. Based on the installed version of Chrome, the malware selects a signature pattern for the Chromium feature <a href="https://www.chromium.org/developers/design-documents/network-stack/cookiemonster/">CookieMonster</a>, an internal component used to manage cookies.</p>
<p></p>
<p>We used the <a href="https://github.com/Meckazin/ChromeKatz/blob/9152004174e9a0b2d092c70ebc75efbf80fa1098/CookieKatz/Main.cpp#L123">signature patterns</a> to pivot to existing code developed for an offensive security tool called <a href="https://github.com/Meckazin/ChromeKatz">ChromeKatz</a>. At this time, the patterns have been removed from the ChromeKatz repository and replaced with a new technique. Based on our analysis, the malware author appears to have reimplemented ChromeKatz within STEALC in order to bypass the app-bound encryption protection feature.</p>
<p>Once the malware identifies a matching signature, it enumerates Chrome’s child processes to check for the presence of the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">--utility-sub-type=network.mojom.NetworkService</code> command-line flag. This flag indicates that the process is the network service responsible for handling all internet communication. It becomes a prime target as it holds the sensitive data the attacker seeks, as described in MDSec’s <a href="https://www.mdsec.co.uk/2021/01/breaking-the-browser-a-tale-of-ipc-credentials-and-backdoors/">post</a>. It then returns a handle for that specific child process.</p>
<p></p>
<p>Next, it enumerates each module in the network service child process to find and retrieve the base address and size of <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">chrome.dll</code> loaded into memory. STEALC uses <a href="https://github.com/Meckazin/ChromeKatz/blob/767047dcf8f53c70be5e3e0859c5eee3f129d758/CredentialKatz/Memory.cpp#L280"><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">CredentialKatz::FindDllPattern</code></a> and <a href="https://github.com/Meckazin/ChromeKatz/blob/767047dcf8f53c70be5e3e0859c5eee3f129d758/CookieKatz/Memory.cpp#L435"><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">CookieKatz::FindPattern</code></a> to locate the CookieMonster instances. There are 2 calls to <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">CredentialKatz::FindDllPattern</code>.</p>
<p></p>
<p>In the first call to <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">CredentialKatz::FindDllPattern</code>, it tries to locate one of the signature patterns (depending on the victim’s Chrome version) in <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">chrome.dll</code>. Once found, STEALC now has a reference pointer to that memory location where the byte sequence begins which is the function <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">net::CookieMonster::~CookieMonster</code>, destructor of the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">CookieMonster</code> class.</p>
<p></p>
<p>The second call to <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">CredentialKatz::FindDllPattern</code> passes in the function address for <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">net::CookieMonster::~CookieMonster(void)</code> as an argument for the byte sequence search, resulting in STEALC having a pointer to <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">CookieMonster</code>’s Virtual Function Pointer struct.</p>
<p></p>
<p>The following method used by STEALC is again, identical to ChromeKatz, where it locates <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">CookieMonster</code> instances by scanning memory chunks in the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">chrome.dll</code> module for pointers referencing the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">CookieMonster</code> vtable. Since the vtable is a constant across all objects of a given class, any <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">CookieMonster</code> object will have the same vtable pointer. When a match is identified, STEALC treats the memory location as a <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">CookieMonster</code> instance and stores its address in an array.</p>
<p></p>
<p>For each identified <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">CookieMonster</code> instance, STEALC accesses the internal <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">CookieMap</code> structure located at an offset of <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">+0x30</code>, and which is a binary tree. Each node within this tree contains pointers to <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">CanonicalCookieChrome</code> structures. <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">CanonicalCookieChrome</code> structures hold unencrypted cookie data, making it accessible for extraction. STEALC then initiates a tree traversal by passing the first node into a dedicated traversal function.</p>
<p></p>
<p>For each node, it calls <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">ReadProcessMemory</code> to access the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">CanonicalCookieChrome</code> structure from the target process’s memory, then further processing it in <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">jy::GenerateExfilString</code>.</p>
<p></p>
<p>STEALC formats the extracted cookie data by converting the expiration date to UNIX format and verifying the presence of the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">HttpOnly</code> and <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Secure</code> flags. It then appends details such as the cookie&#x27;s name, value, domain, path, and the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">HttpOnly</code> and <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Secure</code> into a final string for exfiltration. <a href="https://github.com/Meckazin/ChromeKatz/blob/9152004174e9a0b2d092c70ebc75efbf80fa1098/CookieKatz/Memory.cpp#L10"><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">OptimizedString</code></a> structs are used in place of strings, so string values can either be the string itself, or if the string length is greater than 23, it will point to the address storing the string.</p>
<p></p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="metastealer" class="absolute -top-32"></span>METASTEALER</h2>
<p><a href="https://malpedia.caad.fkie.fraunhofer.de/details/win.metastealer">METASTEALER</a>, first observed in 2022, recently upgraded its ability to steal Chrome data, bypassing Google’s latest mitigation efforts. On September 30th, the malware authors announced this update via their Telegram channel, highlighting its enhanced capability to extract sensitive information, including cookies, despite the security changes in Chrome&#x27;s version <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">129+</code>.</p>
<p></p>
<p></p>
<p>The <a href="https://www.virustotal.com/gui/file/973a9056040af402d6f92f436a287ea164fae09c263f80aba0b8d5366ed9957a">first sample</a> observed in the wild by our team was discovered on September 30th, the same day the authors promoted the update. Despite claims that the malware operates without needing <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Administrator</code> privileges, our testing revealed it does require elevated access, as it attempts to impersonate the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">SYSTEM</code> token during execution.</p>
<p></p>
<p>As shown in the screenshots above, the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">get_decryption</code> method now includes a new Boolean parameter. This value is set to <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">TRUE</code> if the encrypted data (cookie) begins with the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">v20</code> prefix, indicating that the cookie is encrypted using Chrome&#x27;s latest encryption method. The updated function retains backward compatibility, still supporting the decryption of cookies from older Chrome versions if present on the infected machine.</p>
<p>The malware then attempts to access the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Local State</code> or <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">LocalPrefs.json</code> files located in the Chrome profile directory. Both files are JSON formatted and store encryption keys (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">encrypted_key</code>) for older Chrome versions and <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">app_bound_encrypted_key</code> for newer ones. If the flag is set to <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">TRUE</code>, the malware specifically uses the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">app_bound_encrypted_key</code> to decrypt cookies in line with the updated Chrome encryption method.</p>
<p></p>
<p>In this case, the malware first impersonates the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">SYSTEM</code> token using a newly introduced class called <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">ContextSwitcher</code>.</p>
<p></p>
<p>It then decrypts the key by creating an instance via the COM of the Chrome service responsible for decryption, named <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">GoogleChromeElevationService</code>, using the CLSID <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">708860E0-F641-4611-8895-7D867DD3675B</code>. Once initialized, it invokes the <a href="https://github.com/chromium/chromium/blob/225f82f8025e4f93981310fd33daa71dc972bfa9/chrome/elevation_service/elevator.cc#L155"><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">DecryptData</code></a> method to decrypt the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">app_bound_encrypted_key</code> key which will be used to decrypt the encrypted cookies.</p>
<p></p>
<p>METASTEALER employs a technique similar to the one demonstrated in a <a href="https://gist.github.com/snovvcrash/caded55a318bbefcb6cc9ee30e82f824">gist</a> shared <a href="https://x.com/snovvcrash/status/1839715912812802162">on X</a> on September 27th, which may have served as inspiration for the malware authors. Both approaches leverage similar methods to bypass Chrome&#x27;s encryption mechanisms and extract sensitive data.</p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="phemedrone" class="absolute -top-32"></span>PHEMEDRONE</h2>
<p>This <a href="https://malpedia.caad.fkie.fraunhofer.de/details/win.phemedrone_stealer">open-source stealer</a> caught the world’s attention earlier in the year through its usage of a Windows SmartScreen vulnerability (CVE-2023-36025). While its development is still occurring on Telegram, our team found a recent <a href="https://www.virustotal.com/gui/file/1067d27007ea862ddd68e90ef68b6d17fa18f9305c09f72bad04d00102a60b8c">release</a> (2.3.2) submitted at the end of September including new cookie grabber functionality for Chrome.</p>
<p></p>
<p>The malware first enumerates the different profiles within Chrome, then performs a browser check using function (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">BrowserHelpers.NewEncryption</code>) checking for the Chrome browser with a version greater than or equal to <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">127</code>.</p>
<p></p>
<p>If the condition matches, PHEMEDRONE uses a combination of helper functions to extract the cookies.</p>
<p></p>
<p>By viewing the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">ChromeDevToolsWrapper</code> class and its different functions, we can see that PHEMEDRONE sets up a remote debugging session within Chrome to access the cookies. The default port (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">9222</code>) is used along with window-position set to <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">-2400</code>,<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">-2400</code> which is set off-screen preventing any visible window from alerting the victim.</p>
<p></p>
<p>Next, the malware establishes a WebSocket connection to Chrome’s debugging interface making a request using deprecated Chrome DevTools Protocol method (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Network.getAllCookies</code>).</p>
<p></p>
<p>The cookies are then returned from the previous request in plaintext, below is a network capture showing this behavior:</p>
<p></p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="xenostealer" class="absolute -top-32"></span>XENOSTEALER</h2>
<p><a href="https://github.com/moom825/XenoStealer/">XENOSTEALER</a> is an open-source infostealer hosted on GitHub. It appeared in July 2024 and is under active development at the time of this publication. Notably, the Chrome bypass feature was committed on September 26, 2024.</p>
<p>The approach taken by XENOSTEALER is similar to that of METASTEALER. It first parses the JSON file under a given Chrome profile to extract the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">app_bound_encrypted_key</code>. However, the decryption process occurs within a Chrome process. To achieve this, XENOSTEALER launches an instance of <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Chrome.exe</code>, then injects code using a helper class called <a href="https://github.com/moom825/XenoStealer/blob/d1c7e242183a2c8582c179a1b546f0a5cdff5f75/XenoStealer/Injector/SharpInjector.cs"><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">SharpInjector</code></a>, passing the encrypted key as a parameter.</p>
<p>The injected code subsequently calls the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">DecryptData</code> method from the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">GoogleChromeElevationService</code> to obtain the decrypted key.</p>
<p></p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="lumma" class="absolute -top-32"></span>LUMMA</h2>
<p>In mid-October, the latest version of <a href="https://malpedia.caad.fkie.fraunhofer.de/details/win.lumma">LUMMA</a> implemented a new method to bypass Chrome cookie protection, as reported by <a href="https://x.com/g0njxa">@g0njxa</a>.</p>
<p></p>
<p>We analyzed a recent version of LUMMA, confirming that it managed to successfully recover the cookie data from the latest version of Google Chrome (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">130.0.6723.70</code>). LUMMA first creates a visible Chrome process via <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Kernel32!CreateProcessW</code>.</p>
<p></p>
<p>This activity was followed up in the debugger with multiple calls to <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">NtReadVirtualMemory</code> where we identified LUMMA searching within the Chrome process for <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">chrome.dll</code>.</p>
<p></p>
<p>Once found, the malware copies the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">chrome.dll</code> image to its own process memory using <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">NtReadVirtualMemory</code>. In a similar fashion to the ChromeKatz technique, Lumma leverages pattern scanning to target Chrome’s <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">CookieMonster</code> component.</p>
<p></p>
<p>Lumma uses an obfuscated signature pattern to pinpoint the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">CookieMonster</code> functionality:</p>
<pre><code>3Rf5Zn7oFA2a????k4fAsdxx????l8xX5vJnm47AUJ8uXUv2bA0s34S6AfFA????kdamAY3?PdE????6G????L8v6D8MJ4uq????k70a?oAj7a3????????K3smA????maSd?3l4</code></pre>
<p>Below is the YARA rule after de-obfuscation:</p>
<pre><code>rule lumma_stealer
{
  meta:
    author = &quot;Elastic Security Labs&quot;
  strings:
    $lumma_pattern = { 56 57 48 83 EC 28 89 D7 48 89 CE E8 ?? ?? ?? ?? 85 FF 74 08 48 89 F1 E8 ?? ?? ?? ?? 48 89 F0 48 83 C4 28 5F 5E C3 CC CC CC CC CC CC CC CC CC CC 56 57 48 83 EC 38 48 89 CE 48 8B 05 ?? ?? ?? ?? 48 31 E0 48 89 44 24 ?? 48 8D 79 ?? ?? ?? ?? 28 E8 ?? ?? ?? ?? 48 8B 46 20 48 8B 4E 28 48 8B 96 ?? ?? ?? ?? 4C 8D 44 24 ?? 49 89 10 48 C7 86 ?? ?? ?? ?? ?? ?? ?? ?? 48 89 FA FF 15 ?? ?? ?? ?? 48 8B 4C 24 ?? 48 31 E1}
  condition:
    all of them
}</code></pre>
<p>After decoding and searching for the pattern in <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">chrome.dll</code>, this leads to the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">CookieMonster</code> destructor (<a href="https://chromium.googlesource.com/chromium/src/net/+/master/cookies/cookie_monster.cc#657"><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">net::CookieMonster::~CookieMonster</code></a>).</p>
<p></p>
<p>The cookies are then identified in memory and dumped out in clear text from the Chrome process.</p>
<p></p>
<p>Once completed, LUMMA sends out the cookies along with the other requested data as multiple zip files (xor encrypted and base64 encoded) to the C2 server.</p>
<p></p>
<h1 class="font-bold leading-tighter text-3xl md:text-5xl relative"><span id="detection" class="absolute -top-32"></span>Detection</h1>
<p>Below are the following behavioral detections that can be used to identify techniques used by information stealers:</p>
<ul>
<li><a href="https://github.com/elastic/protections-artifacts/blob/da25aa57994ee265583227dbe6fe02261b65415c/behavior/rules/windows/credential_access_web_browser_credential_access_via_unusual_process.toml#L8">Web Browser Credential Access via Unusual Process</a></li>
<li><a href="https://github.com/elastic/protections-artifacts/blob/da25aa57994ee265583227dbe6fe02261b65415c/behavior/rules/windows/credential_access_web_browser_credential_access_via_unsigned_process.toml#L8">Web Browser Credential Access via Unsigned Process</a></li>
<li><a href="https://github.com/elastic/protections-artifacts/blob/da25aa57994ee265583227dbe6fe02261b65415c/behavior/rules/windows/credential_access_access_to_browser_credentials_from_suspicious_memory.toml#L8">Access to Browser Credentials from Suspicious Memory</a></li>
<li><a href="https://github.com/elastic/protections-artifacts/blob/da25aa57994ee265583227dbe6fe02261b65415c/behavior/rules/windows/credential_access_failed_access_attempt_to_web_browser_files.toml#L8">Failed Access Attempt to Web Browser Files</a></li>
<li><a href="https://github.com/elastic/protections-artifacts/blob/da25aa57994ee265583227dbe6fe02261b65415c/behavior/rules/windows/credential_access_browser_debugging_from_unusual_parent.toml#L3">Browser Debugging from Unusual Parent</a></li>
<li><a href="https://github.com/elastic/protections-artifacts/blob/da25aa57994ee265583227dbe6fe02261b65415c/behavior/rules/windows/discovery_potential_browser_information_discovery.toml#L8">Potential Browser Information Discovery</a></li>
</ul>
<p>Additionally, the following queries can be used for hunting diverse related abnormal behaviors:</p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="cookies-access-by-an-unusual-process" class="absolute -top-32"></span>Cookies access by an unusual process</h2>
<p>This query uses file open events and aggregate accesses by process, then looks for ones that are observed in unique hosts and with a low total access count:</p>
<pre><code>FROM logs-endpoint.events.file-default*
| where event.category == &quot;file&quot; and event.action == &quot;open&quot; and file.name == &quot;Cookies&quot; and file.path like &quot;*Chrome*&quot;
| keep file.path, process.executable, agent.id
| eval process_path = replace(to_lower(process.executable), &quot;&quot;&quot;c:\\users\\[a-zA-Z0-9\.\-\_\$]+\\&quot;&quot;&quot;, &quot;c:\\\\users\\\\user\\\\&quot;)
| stats agents_count = COUNT_DISTINCT(agent.id), access_count= count(*) by process_path
| where agents_count &lt;= 2 and access_count &lt;=2</code></pre>
<p>Below example of matches from diverse information stealers including the updated ones with new Chrome cookies stealing capabilities:</p>
<p></p>
<p>METASTEALER behavior tends to first terminate all running chrome instances then calls <a href="https://learn.microsoft.com/en-us/windows/win32/api/combaseapi/nf-combaseapi-cocreateinstance"><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">CoCreateInstance</code></a> to instantiate the Google Chrome <a href="https://chromium.googlesource.com/chromium/src/+/main/chrome/elevation_service/">elevation service</a>, this series of events can be expressed with the following EQL query:</p>
<pre><code>sequence by host.id with maxspan=1s
[process where event.action == &quot;end&quot; and process.name == &quot;chrome.exe&quot;] with runs=5
[process where event.action == &quot;start&quot; and process.name == &quot;elevation_service.exe&quot;]</code></pre>
<p></p>
<p>The previous hunt indicates suspicious agents but doesn&#x27;t identify the source process. By <a href="https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-10/security/threat-protection/auditing/event-4663">enabling registry object access auditing through event 4663</a> on the Chrome Elevation service CLSID registry key <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">{708860E0-F641-4611-8895-7D867DD3675B}</code>, we can detect unusual processes attempting to access that key:</p>
<p></p>
<pre><code>FROM logs-system.security-default* | where event.code == &quot;4663&quot; and winlog.event_data.ObjectName == &quot;\\REGISTRY\\MACHINE\\SOFTWARE\\Classes\\CLSID\\{708860E0-F641-4611-8895-7D867DD3675B}&quot; and not winlog.event_data.ProcessName in (&quot;C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe&quot;, &quot;C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe&quot;) and not winlog.event_data.ProcessName like &quot;C:\\\\Program Files\\\\Google\\\\Chrome\\\\Application\\\\*\\\\elevation_service.exe&quot; | stats agents_count = COUNT_DISTINCT(agent.id), access_count= count(*) by winlog.event_data.ProcessName | where agents_count &lt;= 2 and access_count &lt;=2</code></pre>
<p>Below is an example of matches on the METASTEALER malware while calling <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">CoCreateInstance (CLSID_Elevator)</code>:</p>
<p></p>
<p>The <a href="https://malpedia.caad.fkie.fraunhofer.de/details/win.phemedrone_stealer">PHEMEDRONE</a> stealer uses the <a href="https://posts.specterops.io/hands-in-the-cookie-jar-dumping-cookies-with-chromiums-remote-debugger-port-34c4f468844e">known</a> browser debugging method to collect cookies via Chromium API, this can be observed in the following screenshot where we can see an instance of NodeJs communicating with a browser instance with debugging enabled over port <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">9222</code>:</p>
<p></p>
<p>The following EQL query can be used to look for unusual processes performing similar behavior:</p>
<pre><code>sequence by host.id, destination.port with maxspan=5s
[network where event.action == &quot;disconnect_received&quot; and
 network.direction == &quot;ingress&quot; and
 process.executable in~ (&quot;C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe&quot;,
&quot;C:\\Program Files\\Microsoft\\Edge\\Application\\msedge.exe&quot;) and
 source.address like &quot;127.*&quot; and destination.address like &quot;127.*&quot;]
[network where event.action == &quot;disconnect_received&quot; and network.direction == &quot;egress&quot; and not
 process.executable in~ (&quot;C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe&quot;,
&quot;C:\\Program Files\\Microsoft\\Edge\\Application\\msedge.exe&quot;) and source.address like &quot;127.*&quot; and destination.address like &quot;127.*&quot;]</code></pre>
<p></p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="chrome-browser-spawned-from-an-unusual-parent" class="absolute -top-32"></span>Chrome Browser Spawned from an Unusual Parent</h2>
<p>The STEALC sample that uses ChromeKatz implementation spawns an instance of Google Chrome to load the user default profile, while looking for normal parent executables, it turns out it’s limited to Chrome signed parents and Explorer.exe, the following ES|QL query can be used to find unusual parents:</p>
<pre><code>FROM logs-endpoint.events.process-*
| where event.category == &quot;process&quot; and event.type == &quot;start&quot; and to_lower(process.name) == &quot;chrome.exe&quot; and process.command_line like  &quot;*--profile-directory=Default*&quot;
| eval process_parent_path = replace(to_lower(process.parent.executable), &quot;&quot;&quot;c:\\users\\[a-zA-Z0-9\.\-\_\$]+\\&quot;&quot;&quot;, &quot;c:\\\\users\\\\user\\\\&quot;)
| stats agents_count = COUNT_DISTINCT(agent.id), total_executions = count(*) by process_parent_path
| where agents_count == 1 and total_executions &lt;= 10</code></pre>
<p></p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="untrusted-binaries-from-chrome-application-folder" class="absolute -top-32"></span>Untrusted Binaries from Chrome Application folder</h2>
<p>Since the Chrome elevation service <a href="https://github.com/chromium/chromium/blob/main/chrome/elevation_service/caller_validation.cc#L33-L56">trusts</a> binaries running from the Chrome <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">program files</code> folder, the following queries can be used to hunt for unsigned or untrusted binaries executed or loaded from there:</p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="unsigned-dlls-loaded-from-google-chrome-application-folder" class="absolute -top-32"></span>Unsigned DLLs loaded from google chrome application folder</h3>
<pre><code>FROM logs-endpoint.events.library*
| where event.category == &quot;library&quot; and event.action == &quot;load&quot; and to_lower(dll.path) like &quot;c:\\\\program files\\\\google\\\\chrome\\\\application\\\\*&quot; and not (dll.code_signature.trusted == true)
| keep process.executable, dll.path, dll.hash.sha256, agent.id
| stats agents_count = COUNT_DISTINCT(agent.id), total_executions = count(*) by process.executable, dll.path, dll.hash.sha256
| where agents_count == 1 and total_executions &lt;= 10</code></pre>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="unsigned-executable-launched-from-google-chrome-application-folder" class="absolute -top-32"></span>Unsigned executable launched from google chrome application folder</h3>
<pre><code>FROM logs-endpoint.events.process*
| where event.category == &quot;library&quot; and event.type == &quot;start&quot; and (to_lower(process.executable) like &quot;c:\\\\program files\\\\google\\\\chrome\\\\application\\\\*&quot; or to_lower(process.executable) like &quot;c:\\\\scoped_dir\\\\program files\\\\google\\\\chrome\\\\application\\\\*&quot;)
and not (process.code_signature.trusted == true and process.code_signature.subject_name == &quot;Goole LLC&quot;)
| keep process.executable,process.hash.sha256, agent.id
| stats agents_count = COUNT_DISTINCT(agent.id), total_executions = count(*) by process.executable, process.hash.sha256
| where agents_count == 1 and total_executions &lt;= 10</code></pre>
<p></p>
<h1 class="font-bold leading-tighter text-3xl md:text-5xl relative"><span id="conclusion" class="absolute -top-32"></span>Conclusion</h1>
<p>Google has raised the bar implementing new security controls to protect cookie data within Chrome. As expected, this has caused malware developers to develop or integrate their own bypasses. We hope Google will continue to innovate to provide stronger protection for user data.</p>
<p>Organizations and defenders should consistently monitor for unusual endpoint activity. While these new techniques may be successful, they are also noisy and detectable with the right security instrumentation, processes, and personnel.</p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="stealer-bypasses-and-mitre-attck" class="absolute -top-32"></span>Stealer Bypasses and MITRE ATT&amp;CK</h2>
<p>Elastic uses the <a href="https://attack.mitre.org/">MITRE ATT&amp;CK</a> framework to document common tactics, techniques, and procedures that threats use against enterprise networks.</p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="tactics" class="absolute -top-32"></span>Tactics</h3>
<p>Tactics represent the why of a technique or sub-technique. It is the adversary’s tactical goal: the reason for performing an action.</p>
<ul>
<li><a href="https://attack.mitre.org/tactics/TA0006/">Credential Access</a></li>
<li><a href="https://attack.mitre.org/tactics/TA0005/">Defense Evasion</a></li>
<li><a href="https://attack.mitre.org/tactics/TA0007/">Discovery</a></li>
<li><a href="https://attack.mitre.org/tactics/TA0002/">Execution</a></li>
</ul>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="techniques" class="absolute -top-32"></span>Techniques</h3>
<p>Techniques represent how an adversary achieves a tactical goal by performing an action.</p>
<ul>
<li><a href="https://attack.mitre.org/techniques/T1539/">Steal Web Session Cookie</a></li>
<li><a href="https://attack.mitre.org/techniques/T1055/">Process Injection</a></li>
<li><a href="https://attack.mitre.org/techniques/T1555/">Credentials from Password Stores</a></li>
<li><a href="https://attack.mitre.org/techniques/T1082/">System Information Discovery</a></li>
<li><a href="https://attack.mitre.org/techniques/T1057/">Process Discovery</a></li>
<li><a href="https://attack.mitre.org/techniques/T1559/001/">Inter-Process Communication: Component Object Model</a></li>
</ul>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="yara" class="absolute -top-32"></span>YARA</h2>
<p>Elastic Security has created YARA rules to identify this activity.</p>
<ul>
<li><a href="https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Windows_Trojan_Stealc.yar">Windows.Trojan.Stealc</a></li>
<li><a href="https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Windows_Infostealer_PhemedroneStealer.yar">Windows.Infostealer.PhemedroneStealer</a></li>
<li><a href="https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Windows_Trojan_MetaStealer.yar">Windows.Trojan.MetaStealer</a></li>
<li><a href="https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Windows_Trojan_Xeno.yar">Windows.Trojan.Xeno</a></li>
<li><a href="https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Windows_Trojan_Lumma.yar">Windows.Trojan.Lumma</a></li>
<li><a href="https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Windows_Infostealer_Generic.yar">Windows.Infostealer.Generic</a></li>
</ul>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="observations" class="absolute -top-32"></span>Observations</h2>
<p>All observables are also available for <a href="https://github.com/elastic/labs-releases/tree/main/indicators/app-bound_bypass">download</a> in both ECS and STIX format.</p>
<p>The following observables were discussed in this research.</p>
<div class="table-container"><table style="width:100%;table-layout:fixed;word-wrap:break-word"><thead><tr><th>Observable</th><th>Type</th><th>Name</th><th>Reference</th></tr></thead><tbody><tr><td>27e4a3627d7df2b22189dd4bebc559ae1986d49a8f4e35980b428fadb66cf23d</td><td>SHA-256</td><td>num.exe</td><td>STEALC</td></tr><tr><td>08d9d4e6489dc5b05a6caa434fc36ad6c1bd8c8eb08888f61cbed094eac6cb37</td><td>SHA-256</td><td>HardCoreCrack.exe</td><td>PHEMEDRONE</td></tr><tr><td>43cb70d31daa43d24e5b063f4309281753176698ad2aba9c557d80cf710f9b1d</td><td>SHA-256</td><td>Ranginess.exe</td><td>METASTEALER</td></tr><tr><td>84033def9ffa70c7b77ce9a7f6008600c0145c28fe5ea0e56dfafd8474fb8176</td><td>SHA-256</td><td></td><td>LUMMA</td></tr><tr><td>b74733d68e95220ab0630a68ddf973b0c959fd421628e639c1b91e465ba9299b</td><td>SHA-256</td><td>XenoStealer.exe</td><td>XENOSTEALER</td></tr></tbody></table></div>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="references" class="absolute -top-32"></span>References</h2>
<p>The following were referenced throughout the above research:</p>
<ul>
<li><a href="https://developer.chrome.com/release-notes/127">https://developer.chrome.com/release-notes/127</a></li>
<li><a href="https://security.googleblog.com/2024/07/improving-security-of-chrome-cookies-on.html">https://security.googleblog.com/2024/07/improving-security-of-chrome-cookies-on.html</a></li>
</ul></div></div></div><div class="hidden lg:flex lg:col-span-1 text-sm lg:flex-col lg:space-y-6"><div class="toc"><h4 class="font-bold leading-tight text-lg md:text-2xl mb-3">Jump to section</h4><ul class="flex flex-col space-y-2"><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/katz-and-mouse-game#google-chrome-cookie-security"><span>Google Chrome Cookie&nbsp;Security</span></a></li><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/katz-and-mouse-game#stealcvidar"><span>STEALC/VIDAR</span></a></li><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/katz-and-mouse-game#metastealer"><span>METASTEALER</span></a></li><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/katz-and-mouse-game#phemedrone"><span>PHEMEDRONE</span></a></li><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/katz-and-mouse-game#xenostealer"><span>XENOSTEALER</span></a></li><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/katz-and-mouse-game#lumma"><span>LUMMA</span></a></li><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/katz-and-mouse-game#cookies-access-by-an-unusual-process"><span>Cookies access by an unusual&nbsp;process</span></a></li><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/katz-and-mouse-game#chrome-browser-spawned-from-an-unusual-parent"><span>Chrome Browser Spawned from an Unusual&nbsp;Parent</span></a></li><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/katz-and-mouse-game#untrusted-binaries-from-chrome-application-folder"><span>Untrusted Binaries from Chrome Application&nbsp;folder</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-4" href="/security-labs/katz-and-mouse-game#unsigned-dlls-loaded-from-google-chrome-application-folder"><span>Unsigned DLLs loaded from google chrome application&nbsp;folder</span></a></li></ul><button class="border-t border-white/20 w-full mt-3 py-2 flex items-center space-x-1 text-xs font-medium uppercase tracking-wide hover:text-white"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" class="w-3 h-3"><path d="M10.75 4.75a.75.75 0 00-1.5 0v4.5h-4.5a.75.75 0 000 1.5h4.5v4.5a.75.75 0 001.5 0v-4.5h4.5a.75.75 0 000-1.5h-4.5v-4.5z"></path></svg><span>Show more</span></button></div><div class="bg-zinc-900 border border-zinc-800 drop-shadow-lg p-5 md:p-2 sm:p-4 md:px-6 md:py-4 rounded-xl"><h4 class="font-bold leading-tight text-lg md:text-2xl mb-3">Elastic Security Labs Newsletter</h4><div><a target="_blank" class="button inline-flex" href="https://www.elastic.co/security-labs/newsletter?utm_source=security-labs">Sign Up</a></div></div></div></div><div class="bg-zinc-900 border border-zinc-800 drop-shadow-lg p-5 md:p-2 sm:p-4 md:px-6 md:py-4 rounded-xl my-5 md:my-10 max-w-3xl mx-auto flex flex-col items-center shadow-2xl"><h4 class="font-bold leading-tight text-lg md:text-2xl">Share this article</h4><div class="flex flex-wrap items-center justify-center mt-4 space-x-4"><a class="flex items-center space-x-2 button" href="https://twitter.com/intent/tweet?text=Katz and Mouse Game:  MaaS Infostealers Adapt to Patched Chrome Defenses&amp;url=https://www.elastic.co/security-labs/katz-and-mouse-game" target="_blank" rel="noopener noreferrer" aria-label="Share this article on Twitter" title="Share this article on Twitter"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill="currentColor" d="M23.954 4.569c-.885.389-1.83.653-2.825.772a4.98 4.98 0 002.187-2.746 9.955 9.955 0 01-3.157 1.204 4.98 4.98 0 00-8.49 4.54A14.128 14.128 0 011.69 3.05a4.98 4.98 0 001.54 6.638A4.94 4.94 0 011.2 8.62v.06a4.98 4.98 0 004 4.87 4.94 4.94 0 01-2.24.086 4.98 4.98 0 004.64 3.45A9.97 9.97 0 010 20.35a14.075 14.075 0 007.59 2.22c9.16 0 14.17-7.583 14.17-14.17 0-.217-.005-.434-.015-.65a10.128 10.128 0 002.485-2.58l-.001-.001z"></path></svg><span>Twitter</span></a><a class="flex items-center space-x-2 button" href="https://www.facebook.com/sharer/sharer.php?u=https://www.elastic.co/security-labs/katz-and-mouse-game" target="_blank" rel="noopener noreferrer" aria-label="Share this article on Facebook" title="Share this article on Facebook"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill="currentColor" d="M22.5 12c0-5.799-4.701-10.5-10.5-10.5S1.5 6.201 1.5 12c0 5.301 3.901 9.699 9 10.401V14.4h-2.7v-2.7h2.7v-2.1c0-2.7 1.8-4.2 4.2-4.2 1.2 0 2.1.1 2.4.2v2.4h-1.5c-1.2 0-1.5.6-1.5 1.5v1.8h3l-.3 2.7h-2.7V22C18.599 21.3 22.5 17.301 22.5 12z"></path></svg><span>Facebook</span></a><a class="flex items-center space-x-2 button" href="https://www.linkedin.com/shareArticle?mini=true&amp;url=https://www.elastic.co/security-labs/katz-and-mouse-game&amp;title=Katz and Mouse Game:  MaaS Infostealers Adapt to Patched Chrome Defenses" target="_blank" rel="noopener noreferrer" aria-label="Share this article on LinkedIn" title="Share this article on LinkedIn"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill="currentColor" d="M19 0h-14c-2.761 0-5 2.239-5 5v14c0 2.761 2.239 5 5 5h14c2.762 0 5-2.239 5-5v-14c0-2.761-2.238-5-5-5zm-11 19h-3v-11h3v11zm-1.5-12.268c-.966 0-1.75-.79-1.75-1.764s.784-1.764 1.75-1.764 1.75.79 1.75 1.764-.783 1.764-1.75 1.764zm13.5 12.268h-3v-5.604c0-3.368-4-3.113-4 0v5.604h-3v-11h3v1.765c1.396-2.586 7-2.777 7 2.476v6.759z"></path></svg><span>LinkedIn</span></a><a class="flex items-center space-x-2 button" href="https://reddit.com/submit?url=https://www.elastic.co/security-labs/katz-and-mouse-game&amp;title=Katz and Mouse Game:  MaaS Infostealers Adapt to Patched Chrome Defenses" target="_blank" rel="noopener noreferrer" aria-label="Share this article on Reddit" title="Share this article on Reddit"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill-rule="evenodd" clip-rule="evenodd" d="M24 12C24 18.6274 18.6274 24 12 24C5.37258 24 0 18.6274 0 12C0 5.37258 5.37258 0 12 0C18.6274 0 24 5.37258 24 12ZM19.6879 11.0584C19.8819 11.3352 19.9916 11.6622 20.004 12C20.0091 12.3306 19.9205 12.656 19.7485 12.9384C19.5765 13.2208 19.3281 13.4488 19.032 13.596C19.0455 13.7717 19.0455 13.9483 19.032 14.124C19.032 16.812 15.9 18.996 12.036 18.996C8.172 18.996 5.04 16.812 5.04 14.124C5.02649 13.9483 5.02649 13.7717 5.04 13.596C4.80919 13.49 4.6042 13.335 4.43923 13.1419C4.27427 12.9487 4.15327 12.722 4.08462 12.4775C4.01598 12.2329 4.00133 11.9764 4.04169 11.7256C4.08205 11.4748 4.17646 11.2358 4.31837 11.0251C4.46028 10.8145 4.6463 10.6372 4.86354 10.5056C5.08078 10.3739 5.32404 10.2911 5.57646 10.2629C5.82889 10.2346 6.08444 10.2616 6.32541 10.3419C6.56638 10.4222 6.78701 10.5539 6.972 10.728C8.35473 9.79023 9.98146 9.27718 11.652 9.252L12.54 5.088C12.55 5.03979 12.5694 4.99405 12.5972 4.95341C12.625 4.91277 12.6605 4.87805 12.7018 4.85127C12.7431 4.82448 12.7894 4.80615 12.8378 4.79735C12.8862 4.78855 12.9359 4.78945 12.984 4.8L15.924 5.388C16.0676 5.14132 16.2944 4.9539 16.5637 4.85937C16.833 4.76484 17.1272 4.7694 17.3934 4.87222C17.6597 4.97505 17.8806 5.1694 18.0164 5.42041C18.1523 5.67141 18.1942 5.96262 18.1348 6.24177C18.0753 6.52092 17.9182 6.76972 17.6918 6.94352C17.4654 7.11732 17.1845 7.20473 16.8995 7.19006C16.6144 7.1754 16.3439 7.05962 16.1366 6.8635C15.9292 6.66738 15.7985 6.40378 15.768 6.12L13.2 5.58L12.42 9.324C14.0702 9.3594 15.6749 9.87206 17.04 10.8C17.2839 10.566 17.5902 10.4074 17.9221 10.3436C18.254 10.2797 18.5973 10.3132 18.9106 10.4401C19.2239 10.5669 19.4939 10.7817 19.6879 11.0584ZM8.20624 12.5333C8.07438 12.7307 8.004 12.9627 8.004 13.2C8.004 13.5183 8.13043 13.8235 8.35547 14.0485C8.58051 14.2736 8.88574 14.4 9.204 14.4C9.44134 14.4 9.67335 14.3296 9.87068 14.1978C10.068 14.0659 10.2218 13.8785 10.3127 13.6592C10.4035 13.4399 10.4272 13.1987 10.3809 12.9659C10.3346 12.7331 10.2204 12.5193 10.0525 12.3515C9.8847 12.1836 9.67089 12.0694 9.43811 12.0231C9.20533 11.9768 8.96405 12.0005 8.74478 12.0913C8.52551 12.1822 8.33809 12.336 8.20624 12.5333ZM12.012 17.424C13.0771 17.4681 14.1246 17.1416 14.976 16.5V16.548C15.0075 16.5173 15.0327 16.4806 15.05 16.4402C15.0674 16.3997 15.0766 16.3563 15.0772 16.3122C15.0777 16.2682 15.0696 16.2245 15.0533 16.1837C15.0369 16.1428 15.0127 16.1055 14.982 16.074C14.9513 16.0425 14.9146 16.0173 14.8742 16C14.8337 15.9826 14.7903 15.9734 14.7462 15.9728C14.7022 15.9723 14.6585 15.9804 14.6177 15.9967C14.5768 16.0131 14.5395 16.0373 14.508 16.068C13.7797 16.5904 12.895 16.8487 12 16.8C11.1061 16.8399 10.2255 16.5732 9.504 16.044C9.44182 15.993 9.36289 15.9669 9.28256 15.9708C9.20222 15.9748 9.12622 16.0085 9.06935 16.0653C9.01247 16.1222 8.97879 16.1982 8.97484 16.2786C8.97089 16.3589 8.99697 16.4378 9.048 16.5C9.89937 17.1416 10.9469 17.4681 12.012 17.424ZM14.0933 14.2458C14.2907 14.3776 14.5227 14.448 14.76 14.448L14.748 14.496C14.9107 14.4978 15.0721 14.4664 15.2223 14.4038C15.3725 14.3413 15.5084 14.2488 15.6218 14.1321C15.7352 14.0154 15.8236 13.8768 15.8818 13.7248C15.9399 13.5728 15.9665 13.4106 15.96 13.248C15.96 13.0107 15.8896 12.7787 15.7578 12.5813C15.6259 12.384 15.4385 12.2302 15.2192 12.1393C14.9999 12.0485 14.7587 12.0248 14.5259 12.0711C14.2931 12.1174 14.0793 12.2316 13.9115 12.3995C13.7436 12.5673 13.6294 12.7811 13.5831 13.0139C13.5368 13.2467 13.5605 13.4879 13.6513 13.7072C13.7422 13.9265 13.896 14.1139 14.0933 14.2458Z" fill="currentColor"></path></svg><span>Reddit</span></a></div></div></article></main><footer class="mt-auto text-xs md:text-sm"><div class="container py-6 flex flex-col md:flex-row gap-2 md:gap-0 justify-between items-center"><div class="text-zinc-300"><nav><ul class="flex space-x-4"><li><a class="hover:text-white font-medium" href="/security-labs/sitemap.xml">Sitemap</a></li><li><a class="hover:text-white font-medium flex items-center space-x-1" href="https://elastic.co?utm_source=elastic-search-labs&amp;utm_medium=referral&amp;utm_campaign=search-labs&amp;utm_content=footer"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="inline-block w-3 h-3"><path stroke-linecap="round" stroke-linejoin="round" d="M13.5 6H5.25A2.25 2.25 0 003 8.25v10.5A2.25 2.25 0 005.25 21h10.5A2.25 2.25 0 0018 18.75V10.5m-10.5 6L21 3m0 0h-5.25M21 3v5.25"></path></svg><span>Elastic.co</span></a></li><li><a class="hover:text-white font-medium flex items-center space-x-1" href="https://twitter.com/elasticseclabs"><svg class="w-4 h-4 inline-block w-3 h-3" viewBox="0 0 24 24"><path fill="currentColor" d="M23.954 4.569c-.885.389-1.83.653-2.825.772a4.98 4.98 0 002.187-2.746 9.955 9.955 0 01-3.157 1.204 4.98 4.98 0 00-8.49 4.54A14.128 14.128 0 011.69 3.05a4.98 4.98 0 001.54 6.638A4.94 4.94 0 011.2 8.62v.06a4.98 4.98 0 004 4.87 4.94 4.94 0 01-2.24.086 4.98 4.98 0 004.64 3.45A9.97 9.97 0 010 20.35a14.075 14.075 0 007.59 2.22c9.16 0 14.17-7.583 14.17-14.17 0-.217-.005-.434-.015-.65a10.128 10.128 0 002.485-2.58l-.001-.001z"></path></svg><span>@elasticseclabs</span></a></li></ul></nav></div><div class="flex flex-col space-y-1 text-zinc-300"><p>© <!-- -->2024<!-- -->. Elasticsearch B.V. All Rights Reserved.</p></div></div></footer></main></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"article":{"title":"Katz and Mouse Game:  MaaS Infostealers Adapt to Patched Chrome Defenses","slug":"katz-and-mouse-game","date":"2024-10-28","description":"Elastic Security Labs breaks down bypass implementations from the infostealer ecosystem’s reaction to Chrome 127's Application-Bound Encryption scheme.","image":"Security Labs Images 2.jpg","tags":["infostealer","chrome","cookie","VIDAR","STEALC","LUMMA","METASTEALER","PHEMEDRONE","XENOSTEALER"],"body":{"raw":"\n# Introduction\n\nIn July, Google [announced](https://security.googleblog.com/2024/07/improving-security-of-chrome-cookies-on.html) a new protection mechanism for cookies stored within Chrome on Windows, known as Application-Bound Encryption. There is no doubt this security implementation has raised the bar and directly impacted the malware ecosystem. After months with this new feature, many infostealers have written new code to bypass this protection (as the Chrome Security Team predicted) in order to stay competitive in the market and deliver capabilities that reliably retrieve cookie data from Chrome browsers.\n\nElastic Security Labs has been tracking a subset of this activity, identifying multiple techniques used by different malware families to circumvent App-Bound Encryption. While the ecosystem is still evolving in light of this pressure, our goal is to share technical details that help organizations understand and defend against these techniques. In this article, we will cover the different methods used by the following infostealer families:\n\n - STEALC/VIDAR\n - METASTEALER\n - PHEMEDRONE\n - XENOSTEALER\n - LUMMA\n\n# Key takeaways\n\n - Latest versions of infostealers implement bypasses around Google’s recent cookie protection feature using Application-Bound Encryption\n - Techniques include integrating offensive security tool ChromeKatz, leveraging COM to interact with Chrome services and decrypt the app-bound encryption key, and using the remote debugging feature within Chrome\n - Defenders should actively monitor for different cookie bypass techniques against Chrome on Windows in anticipation of future mitigations and bypasses likely to emerge in the near- to mid-term\n - Elastic Security provides mitigations through memory signatures, behavioral rules, and hunting opportunities to enable faster identification and response to infostealer activity\n\n# Background\n\nGenerically speaking, cookies are used by web applications to store visitor information in the browser the visitor uses to access that web app. This information helps the web app track that user, their preferences, and other information from location to location– even across devices.\n\nThe authentication token is one use of the client-side data storage structures that enables much of how modern web interactivity works. These tokens are stored by the browser after the user has successfully authenticated with a web application. After username and password, after multifactor authentication (MFA) via one-time passcodes or biometrics, the web application “remembers” your browser is you via the exchange of this token with each subsequent web request.\n\nA malicious actor who gets access to a valid authentication token can reuse it to impersonate the user to that web service with the ability to take over accounts, steal personal or financial information, or perform other actions as that user such as transfer financial assets.\n\nCybercriminals use infostealers to steal and commoditize this type of information for their financial gain.\n\n## Google Chrome Cookie Security\n\nLegacy versions of Google Chrome on Windows used the Windows native [Data Protection API](https://learn.microsoft.com/en-us/dotnet/standard/security/how-to-use-data-protection) (DPAPI) to encrypt cookies and protect them from other user contexts. This provided adequate protection against several attack scenarios, but any malicious software running in the targeted user’s context could decrypt these cookies using the DPAPI methods directly. Unfortunately, this context is exactly the niche that infostealers often find themselves in after social engineering for initial access. The DPAPI scheme is now [well known to attackers](https://posts.specterops.io/operational-guidance-for-offensive-user-dpapi-abuse-1fb7fac8b107) with several attack vectors; from local decryption using the API, to stealing the masterkey and decrypting remotely, to abusing the domain-wide backup DPAPI key in an enterprise environment.\n\nWith the release of Chrome 127 in July 2024, Google [implemented](https://developer.chrome.com/release-notes/127) Application-Bound Encryption of browser data. This mechanism directly addressed many common DPAPI attacks against Windows Chrome browser data–including cookies. It does this by storing the data in encrypted datafiles, and using a service running as SYSTEM to verify any decryption attempts are coming from the Chrome process before returning the key to that process for decryption of the stored data.\n\n![Chrome 127 Application-Bound Encryption Scheme. Source: https://security.googleblog.com/2024/07/improving-security-of-chrome-cookies-on.html](/assets/images/katz-and-mouse-game/image5.png)\n\n\n\nWhile it is our view that this encryption scheme is not a panacea to protect all browser data (as the Chrome Security Team acknowledges in their release) we do feel it has been successful in driving malware authors to TTPs that are more overtly malicious, and easier for defenders to identify and respond to.\n\n# Stealer Bypass Techniques, Summarized\n\nThe following sections will describe specific infostealer techniques used to bypass Google’s App-Bound Encryption feature as observed by Elastic. Although this isn’t an exhaustive compilation of bypasses, and development of these families is ongoing, they represent an interesting dynamic within the infostealer space showing how malware developers responded to Google’s recently updated security control. The techniques observed by our team include:\n\n - Remote debugging via Chrome’s DevTools Protocol\n - Reading process memory of Chrome network service process (ChromeKatz and ```ReadProcessMemory``` (RPM))\n - Elevating to ```SYSTEM``` then decrypting ```app_bound_encryption_key``` with the ```DecryptData``` method of ```GoogleChromeElevationService``` through COM\n\n![Timeline of events](/assets/images/katz-and-mouse-game/image30.png)\n\n## STEALC/VIDAR\n\nOur team observed new code introduced to STEALC/VIDAR related to the cookie bypass technique around September 20th. These were atypical samples that stood out from previous versions and were implemented as embedded 64-bit PE files along with conditional checks. Encrypted values in the SQLite databases where Chrome stores its data are now prefixed with v20, indicating that the values are now encrypted using application-bound encryption.\n\n\u003e [STEALC](https://malpedia.caad.fkie.fraunhofer.de/details/win.stealc) was introduced in 2023 and was developed with “heavy inspiration” from other more established stealers such as [RACOON](https://malpedia.caad.fkie.fraunhofer.de/details/win.raccoon) and [VIDAR](https://malpedia.caad.fkie.fraunhofer.de/details/win.vidar). STEALC and VIDAR have continued concurrent development, and in the case of App-Bound Encryption bypasses have settled on the same implementation.\n\nDuring the extraction of encrypted data from the databases the malware checks for this prefix. If it begins with ```v20```, a child process is spawned using the embedded PE file in the ```.data``` section of the binary. This program is responsible for extracting unencrypted cookie values residing in one of Chrome's child processes. \n\n![Embedded PE file](/assets/images/katz-and-mouse-game/image2.png)\n\nThis embedded binary creates a hidden desktop via ```OpenDesktopA``` / ```CreateDesktopA``` then uses ```CreateToolhelp32Snapshot``` to scan and terminate all ```chrome.exe``` processes. A new ```chrome.exe``` process is then started with the new desktop object. Based on the installed version of Chrome, the malware selects a signature pattern for the Chromium feature [CookieMonster](https://www.chromium.org/developers/design-documents/network-stack/cookiemonster/), an internal component used to manage cookies.\n\n![Signature pattern for ```CookieMonster```](/assets/images/katz-and-mouse-game/image38.png)\n\nWe used the [signature patterns](https://github.com/Meckazin/ChromeKatz/blob/9152004174e9a0b2d092c70ebc75efbf80fa1098/CookieKatz/Main.cpp#L123) to pivot to existing code developed for an offensive security tool called [ChromeKatz](https://github.com/Meckazin/ChromeKatz). At this time, the patterns have been removed from the ChromeKatz repository and replaced with a new technique. Based on our analysis, the malware author appears to have reimplemented ChromeKatz within STEALC in order to bypass the app-bound encryption protection feature. \n\nOnce the malware identifies a matching signature, it enumerates Chrome’s child processes to check for the presence of the ```--utility-sub-type=network.mojom.NetworkService``` command-line flag. This flag indicates that the process is the network service responsible for handling all internet communication. It becomes a prime target as it holds the sensitive data the attacker seeks, as described in MDSec’s [post](https://www.mdsec.co.uk/2021/01/breaking-the-browser-a-tale-of-ipc-credentials-and-backdoors/). It then returns a handle for that specific child process. \n\n![Enumerating for Chrome’s network service](/assets/images/katz-and-mouse-game/image37.png)\n\nNext, it enumerates each module in the network service child process to find and retrieve the base address and size of ```chrome.dll``` loaded into memory. STEALC uses [```CredentialKatz::FindDllPattern```](https://github.com/Meckazin/ChromeKatz/blob/767047dcf8f53c70be5e3e0859c5eee3f129d758/CredentialKatz/Memory.cpp#L280) and [```CookieKatz::FindPattern```](https://github.com/Meckazin/ChromeKatz/blob/767047dcf8f53c70be5e3e0859c5eee3f129d758/CookieKatz/Memory.cpp#L435) to locate the CookieMonster instances. There are 2 calls to ```CredentialKatz::FindDllPattern```.\n\n![Calls to ```CredentialKatz::FindDllPattern```](/assets/images/katz-and-mouse-game/image17.png)\n\nIn the first call to ```CredentialKatz::FindDllPattern```, it tries to locate one of the signature patterns (depending on the victim’s Chrome version) in ```chrome.dll```. Once found, STEALC now has a reference pointer to that memory location where the byte sequence begins which is the function ```net::CookieMonster::~CookieMonster```, destructor of the ```CookieMonster``` class.\n\n![Byte sequence for ```net::CookieMonster::~CookieMonster``` found in ```chrome.dll```](/assets/images/katz-and-mouse-game/image14.png)\n\nThe second call to ```CredentialKatz::FindDllPattern``` passes in the function address for ```net::CookieMonster::~CookieMonster(void)``` as an argument for the byte sequence search, resulting in STEALC having a pointer to ```CookieMonster```’s Virtual Function Pointer struct.\n\n![```CookieMonster```’s vtable in ```chrome.dll```](/assets/images/katz-and-mouse-game/image19.png)\n\nThe following method used by STEALC is again, identical to ChromeKatz, where it locates ```CookieMonster``` instances by scanning memory chunks in the ```chrome.dll``` module for pointers referencing the ```CookieMonster``` vtable. Since the vtable is a constant across all objects of a given class, any ```CookieMonster``` object will have the same vtable pointer. When a match is identified, STEALC treats the memory location as a ```CookieMonster``` instance and stores its address in an array.\n\n![Using ```CookieKatz::FindPattern``` to locate ```CookieMonster``` instances](/assets/images/katz-and-mouse-game/image16.png)\n\nFor each identified ```CookieMonster``` instance, STEALC accesses the internal ```CookieMap``` structure located at an offset of ```+0x30```, and which is a binary tree. Each node within this tree contains pointers to ```CanonicalCookieChrome``` structures. ```CanonicalCookieChrome``` structures hold unencrypted cookie data, making it accessible for extraction. STEALC then initiates a tree traversal by passing the first node into a dedicated traversal function.\n\n![Initiating ```CookieMap``` tree traversal for each ```CookieMonster``` instance found](/assets/images/katz-and-mouse-game/image20.png)\n\nFor each node, it calls ```ReadProcessMemory``` to access the ```CanonicalCookieChrome``` structure from the target process’s memory, then further processing it in ```jy::GenerateExfilString```. \n\n![```CookieMap``` traversal subroutine](/assets/images/katz-and-mouse-game/image31.png)\n\nSTEALC formats the extracted cookie data by converting the expiration date to UNIX format and verifying the presence of the ```HttpOnly``` and ```Secure``` flags. It then appends details such as the cookie's name, value, domain, path, and the ```HttpOnly``` and ```Secure``` into a final string for exfiltration. [```OptimizedString```](https://github.com/Meckazin/ChromeKatz/blob/9152004174e9a0b2d092c70ebc75efbf80fa1098/CookieKatz/Memory.cpp#L10) structs are used in place of strings, so string values can either be the string itself, or if the string length is greater than 23, it will point to the address storing the string. \n\n![Constructing string for data exfiltration](/assets/images/katz-and-mouse-game/image23.png)\n\n## METASTEALER\n\n[METASTEALER](https://malpedia.caad.fkie.fraunhofer.de/details/win.metastealer), first observed in 2022, recently upgraded its ability to steal Chrome data, bypassing Google’s latest mitigation efforts. On September 30th, the malware authors announced this update via their Telegram channel, highlighting its enhanced capability to extract sensitive information, including cookies, despite the security changes in Chrome's version ```129+```.\n\n![METASTEALER announcement and translation](/assets/images/katz-and-mouse-game/image26.png)\n\n![source: https://x.com/g0njxa/status/1840761619686568319/](/assets/images/katz-and-mouse-game/image28.png)\n\nThe [first sample](https://www.virustotal.com/gui/file/973a9056040af402d6f92f436a287ea164fae09c263f80aba0b8d5366ed9957a) observed in the wild by our team was discovered on September 30th, the same day the authors promoted the update. Despite claims that the malware operates without needing ```Administrator``` privileges, our testing revealed it does require elevated access, as it attempts to impersonate the ```SYSTEM``` token during execution.\n\n![Code comparison between an old and a new version of the family](/assets/images/katz-and-mouse-game/image11.png)\n\nAs shown in the screenshots above, the ```get_decryption``` method now includes a new Boolean parameter. This value is set to ```TRUE``` if the encrypted data (cookie) begins with the ```v20``` prefix, indicating that the cookie is encrypted using Chrome's latest encryption method. The updated function retains backward compatibility, still supporting the decryption of cookies from older Chrome versions if present on the infected machine.\n\nThe malware then attempts to access the ```Local State``` or ```LocalPrefs.json``` files located in the Chrome profile directory. Both files are JSON formatted and store encryption keys (```encrypted_key```) for older Chrome versions and ```app_bound_encrypted_key``` for newer ones. If the flag is set to ```TRUE```, the malware specifically uses the ```app_bound_encrypted_key``` to decrypt cookies in line with the updated Chrome encryption method.\n\n![```app_bound_encrypted_key``` extracted from Chrome json file](/assets/images/katz-and-mouse-game/image13.png)\n\nIn this case, the malware first impersonates the ```SYSTEM``` token using a newly introduced class called ```ContextSwitcher```.\n\n![New class for TOKEN impersonation](/assets/images/katz-and-mouse-game/image35.png)\n\nIt then decrypts the key by creating an instance via the COM of the Chrome service responsible for decryption, named ```GoogleChromeElevationService```, using the CLSID ```708860E0-F641-4611-8895-7D867DD3675B```. Once initialized, it invokes the [```DecryptData```](https://github.com/chromium/chromium/blob/225f82f8025e4f93981310fd33daa71dc972bfa9/chrome/elevation_service/elevator.cc#L155) method to decrypt the ```app_bound_encrypted_key``` key which will be used to decrypt the encrypted cookies.\n\n![New class ```ComInvoker``` to invoke methods from ```GoogleChromeElevationService``` service](/assets/images/katz-and-mouse-game/image8.png)\n\nMETASTEALER employs a technique similar to the one demonstrated in a [gist](https://gist.github.com/snovvcrash/caded55a318bbefcb6cc9ee30e82f824) shared [on X](https://x.com/snovvcrash/status/1839715912812802162) on September 27th, which may have served as inspiration for the malware authors. Both approaches leverage similar methods to bypass Chrome's encryption mechanisms and extract sensitive data.\n\n## PHEMEDRONE\n\nThis [open-source stealer](https://malpedia.caad.fkie.fraunhofer.de/details/win.phemedrone_stealer) caught the world’s attention earlier in the year through its usage of a Windows SmartScreen vulnerability (CVE-2023-36025). While its development is still occurring on Telegram, our team found a recent [release](https://www.virustotal.com/gui/file/1067d27007ea862ddd68e90ef68b6d17fa18f9305c09f72bad04d00102a60b8c) (2.3.2) submitted at the end of September including new cookie grabber functionality for Chrome.\n\n![```README.txt``` within PHEMEDRONE project](/assets/images/katz-and-mouse-game/image10.png)\n\nThe malware first enumerates the different profiles within Chrome, then performs a browser check using function (```BrowserHelpers.NewEncryption```) checking for the Chrome browser with a version greater than or equal to ```127```.\n\n![Chrome version verification in PHEMEDRONE](/assets/images/katz-and-mouse-game/image27.png)\n\nIf the condition matches, PHEMEDRONE uses a combination of helper functions to extract the cookies.\n\n![High-level functions used cookie extraction in PHEMEDRONE](/assets/images/katz-and-mouse-game/image34.png)\n\nBy viewing the ```ChromeDevToolsWrapper``` class and its different functions, we can see that PHEMEDRONE sets up a remote debugging session within Chrome to access the cookies. The default port (```9222```) is used along with window-position set to ```-2400```,```-2400``` which is set off-screen preventing any visible window from alerting the victim.\n\n![New Chrome process in remote debug mode](/assets/images/katz-and-mouse-game/image15.png)\n\nNext, the malware establishes a WebSocket connection to Chrome’s debugging interface making a request using deprecated Chrome DevTools Protocol method (```Network.getAllCookies```). \n\n![Chrome DevTools Protocol used to retrieve cookies](/assets/images/katz-and-mouse-game/image24.png)\n\nThe cookies are then returned from the previous request in plaintext, below is a network capture showing this behavior:\n\n![Cookie data within network capture](/assets/images/katz-and-mouse-game/image32.png)\n\n## XENOSTEALER\n\n[XENOSTEALER](https://github.com/moom825/XenoStealer/) is an open-source infostealer hosted on GitHub. It appeared in July 2024 and is under active development at the time of this publication. Notably, the Chrome bypass feature was committed on September 26, 2024.\n\nThe approach taken by XENOSTEALER is similar to that of METASTEALER. It first parses the JSON file under a given Chrome profile to extract the ```app_bound_encrypted_key```. However, the decryption process occurs within a Chrome process. To achieve this, XENOSTEALER launches an instance of ```Chrome.exe```, then injects code using a helper class called [```SharpInjector```](https://github.com/moom825/XenoStealer/blob/d1c7e242183a2c8582c179a1b546f0a5cdff5f75/XenoStealer/Injector/SharpInjector.cs), passing the encrypted key as a parameter.\n\nThe injected code subsequently calls the ```DecryptData``` method from the ```GoogleChromeElevationService``` to obtain the decrypted key.\n\n![Source code of the injected code](/assets/images/katz-and-mouse-game/image29.png) \n\n## LUMMA\n\nIn mid-October, the latest version of [LUMMA](https://malpedia.caad.fkie.fraunhofer.de/details/win.lumma) implemented a new method to bypass Chrome cookie protection, as reported by [@g0njxa](https://x.com/g0njxa).\n\n![](/assets/images/katz-and-mouse-game/image40.png)\n\nWe analyzed a recent version of LUMMA, confirming that it managed to successfully recover the cookie data from the latest version of Google Chrome (```130.0.6723.70```). LUMMA first creates a visible Chrome process via ```Kernel32!CreateProcessW```.\n\n![Dump of ```CreateProcessW lpApplicationName``` parameter](/assets/images/katz-and-mouse-game/image3.png)\n\nThis activity was followed up in the debugger with multiple calls to ```NtReadVirtualMemory``` where we identified LUMMA searching within the Chrome process for ```chrome.dll```.\n\n![LUMMA seeks ```chrome.dll``` in Chrome](/assets/images/katz-and-mouse-game/image7.png)\n\nOnce found, the malware copies the ```chrome.dll``` image to its own process memory using ```NtReadVirtualMemory```. In a similar fashion to the ChromeKatz technique, Lumma leverages pattern scanning to target Chrome’s ```CookieMonster``` component. \n\n![Lumma’s pattern scanning](/assets/images/katz-and-mouse-game/image36.png)\n\nLumma uses an obfuscated signature pattern to pinpoint the ```CookieMonster``` functionality:\n\n```\n3Rf5Zn7oFA2a????k4fAsdxx????l8xX5vJnm47AUJ8uXUv2bA0s34S6AfFA????kdamAY3?PdE????6G????L8v6D8MJ4uq????k70a?oAj7a3????????K3smA????maSd?3l4\n```\n\nBelow is the YARA rule after de-obfuscation:\n\n```\nrule lumma_stealer\n{\n  meta:\n    author = \"Elastic Security Labs\"\n  strings:\n    $lumma_pattern = { 56 57 48 83 EC 28 89 D7 48 89 CE E8 ?? ?? ?? ?? 85 FF 74 08 48 89 F1 E8 ?? ?? ?? ?? 48 89 F0 48 83 C4 28 5F 5E C3 CC CC CC CC CC CC CC CC CC CC 56 57 48 83 EC 38 48 89 CE 48 8B 05 ?? ?? ?? ?? 48 31 E0 48 89 44 24 ?? 48 8D 79 ?? ?? ?? ?? 28 E8 ?? ?? ?? ?? 48 8B 46 20 48 8B 4E 28 48 8B 96 ?? ?? ?? ?? 4C 8D 44 24 ?? 49 89 10 48 C7 86 ?? ?? ?? ?? ?? ?? ?? ?? 48 89 FA FF 15 ?? ?? ?? ?? 48 8B 4C 24 ?? 48 31 E1}\n  condition:\n    all of them\n}\n```\n\nAfter decoding and searching for the pattern in ```chrome.dll```, this leads to the ```CookieMonster``` destructor ([```net::CookieMonster::~CookieMonster```](https://chromium.googlesource.com/chromium/src/net/+/master/cookies/cookie_monster.cc#657)).\n\n![Lumma pattern match on ```CookieMonster```](/assets/images/katz-and-mouse-game/image25.png)\n\nThe cookies are then identified in memory and dumped out in clear text from the Chrome process.\n\n![LUMMA dumping the cookie in clear text from Chrome](/assets/images/katz-and-mouse-game/image21.png)\n\nOnce completed, LUMMA sends out the cookies along with the other requested data as multiple zip files (xor encrypted and base64 encoded) to the C2 server.\n\n![Received stolen cookies on the C2 side](/assets/images/katz-and-mouse-game/image12.png)\n\n# Detection\n\nBelow are the following behavioral detections that can be used to identify techniques used by information stealers: \n\n - [Web Browser Credential Access via Unusual Process](https://github.com/elastic/protections-artifacts/blob/da25aa57994ee265583227dbe6fe02261b65415c/behavior/rules/windows/credential_access_web_browser_credential_access_via_unusual_process.toml#L8)\n - [Web Browser Credential Access via Unsigned Process](https://github.com/elastic/protections-artifacts/blob/da25aa57994ee265583227dbe6fe02261b65415c/behavior/rules/windows/credential_access_web_browser_credential_access_via_unsigned_process.toml#L8)\n - [Access to Browser Credentials from Suspicious Memory](https://github.com/elastic/protections-artifacts/blob/da25aa57994ee265583227dbe6fe02261b65415c/behavior/rules/windows/credential_access_access_to_browser_credentials_from_suspicious_memory.toml#L8)\n - [Failed Access Attempt to Web Browser Files](https://github.com/elastic/protections-artifacts/blob/da25aa57994ee265583227dbe6fe02261b65415c/behavior/rules/windows/credential_access_failed_access_attempt_to_web_browser_files.toml#L8)\n - [Browser Debugging from Unusual Parent](https://github.com/elastic/protections-artifacts/blob/da25aa57994ee265583227dbe6fe02261b65415c/behavior/rules/windows/credential_access_browser_debugging_from_unusual_parent.toml#L3)\n - [Potential Browser Information Discovery](https://github.com/elastic/protections-artifacts/blob/da25aa57994ee265583227dbe6fe02261b65415c/behavior/rules/windows/discovery_potential_browser_information_discovery.toml#L8)\n\nAdditionally, the following queries can be used for hunting diverse related abnormal behaviors: \n\n## Cookies access by an unusual process\n\nThis query uses file open events and aggregate accesses by process, then looks for ones that are observed in unique hosts and with a low total access count:\n\n``` sql\nFROM logs-endpoint.events.file-default*\n| where event.category == \"file\" and event.action == \"open\" and file.name == \"Cookies\" and file.path like \"*Chrome*\"\n| keep file.path, process.executable, agent.id\n| eval process_path = replace(to_lower(process.executable), \"\"\"c:\\\\users\\\\[a-zA-Z0-9\\.\\-\\_\\$]+\\\\\"\"\", \"c:\\\\\\\\users\\\\\\\\user\\\\\\\\\")\n| stats agents_count = COUNT_DISTINCT(agent.id), access_count= count(*) by process_path\n| where agents_count \u003c= 2 and access_count \u003c=2\n```\n\nBelow example of matches from diverse information stealers including the updated ones with new Chrome cookies stealing capabilities: \n\n![ES|QL query results for suspicious browser cookies file access](/assets/images/katz-and-mouse-game/image22.png)\n\nMETASTEALER behavior tends to first terminate all running chrome instances then calls [```CoCreateInstance```](https://learn.microsoft.com/en-us/windows/win32/api/combaseapi/nf-combaseapi-cocreateinstance) to instantiate the Google Chrome [elevation service](https://chromium.googlesource.com/chromium/src/+/main/chrome/elevation_service/), this series of events can be expressed with the following EQL query: \n\n``` sql\nsequence by host.id with maxspan=1s\n[process where event.action == \"end\" and process.name == \"chrome.exe\"] with runs=5\n[process where event.action == \"start\" and process.name == \"elevation_service.exe\"]\n```\n\n![EQL query results for suspicious browser termination](/assets/images/katz-and-mouse-game/image4.png)\n\nThe previous hunt indicates suspicious agents but doesn't identify the source process. By [enabling registry object access auditing through event 4663](https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-10/security/threat-protection/auditing/event-4663) on the Chrome Elevation service CLSID registry key ```{708860E0-F641-4611-8895-7D867DD3675B}```, we can detect unusual processes attempting to access that key: \n\n![Google Chrome Elevation COM registry access](/assets/images/katz-and-mouse-game/image9.png)\n\n``` sql\nFROM logs-system.security-default* | where event.code == \"4663\" and winlog.event_data.ObjectName == \"\\\\REGISTRY\\\\MACHINE\\\\SOFTWARE\\\\Classes\\\\CLSID\\\\{708860E0-F641-4611-8895-7D867DD3675B}\" and not winlog.event_data.ProcessName in (\"C:\\\\Program Files\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe\", \"C:\\\\Program Files (x86)\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe\") and not winlog.event_data.ProcessName like \"C:\\\\\\\\Program Files\\\\\\\\Google\\\\\\\\Chrome\\\\\\\\Application\\\\\\\\*\\\\\\\\elevation_service.exe\" | stats agents_count = COUNT_DISTINCT(agent.id), access_count= count(*) by winlog.event_data.ProcessName | where agents_count \u003c= 2 and access_count \u003c=2\n```\n\nBelow is an example of matches on the METASTEALER malware while calling ```CoCreateInstance (CLSID_Elevator)```: \n\n![ES|QL query results for suspicious access to chrome elevation service registry](/assets/images/katz-and-mouse-game/image39.png)\n\nThe [PHEMEDRONE](https://malpedia.caad.fkie.fraunhofer.de/details/win.phemedrone_stealer) stealer uses the [known](https://posts.specterops.io/hands-in-the-cookie-jar-dumping-cookies-with-chromiums-remote-debugger-port-34c4f468844e) browser debugging method to collect cookies via Chromium API, this can be observed in the following screenshot where we can see an instance of NodeJs communicating with a browser instance with debugging enabled over port ```9222```:\n\n![PHEMEDRONE - network connection to chrome over port ```9222```](/assets/images/katz-and-mouse-game/image33.png)\n\nThe following EQL query can be used to look for unusual processes performing similar behavior: \n\n``` sql\nsequence by host.id, destination.port with maxspan=5s\n[network where event.action == \"disconnect_received\" and\n network.direction == \"ingress\" and\n process.executable in~ (\"C:\\\\Program Files\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe\",\n\"C:\\\\Program Files\\\\Microsoft\\\\Edge\\\\Application\\\\msedge.exe\") and\n source.address like \"127.*\" and destination.address like \"127.*\"]\n[network where event.action == \"disconnect_received\" and network.direction == \"egress\" and not\n process.executable in~ (\"C:\\\\Program Files\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe\",\n\"C:\\\\Program Files\\\\Microsoft\\\\Edge\\\\Application\\\\msedge.exe\") and source.address like \"127.*\" and destination.address like \"127.*\"]\n```\n\n![EQL query results for browser debugging activity](/assets/images/katz-and-mouse-game/image1.png)\n\n## Chrome Browser Spawned from an Unusual Parent\n\nThe STEALC sample that uses ChromeKatz implementation spawns an instance of Google Chrome to load the user default profile, while looking for normal parent executables, it turns out it’s limited to Chrome signed parents and Explorer.exe, the following ES|QL query can be used to find unusual parents: \n\n``` sql\nFROM logs-endpoint.events.process-*\n| where event.category == \"process\" and event.type == \"start\" and to_lower(process.name) == \"chrome.exe\" and process.command_line like  \"*--profile-directory=Default*\"\n| eval process_parent_path = replace(to_lower(process.parent.executable), \"\"\"c:\\\\users\\\\[a-zA-Z0-9\\.\\-\\_\\$]+\\\\\"\"\", \"c:\\\\\\\\users\\\\\\\\user\\\\\\\\\")\n| stats agents_count = COUNT_DISTINCT(agent.id), total_executions = count(*) by process_parent_path\n| where agents_count == 1 and total_executions \u003c= 10\n```\n\n![ES|QL query results for chrome browser spawned from an unusual parent](/assets/images/katz-and-mouse-game/image18.png)\n\n## Untrusted Binaries from Chrome Application folder\n\nSince the Chrome elevation service [trusts](https://github.com/chromium/chromium/blob/main/chrome/elevation_service/caller_validation.cc#L33-L56) binaries running from the Chrome ```program files``` folder, the following queries can be used to hunt for unsigned or untrusted binaries executed or loaded from there: \n\n### Unsigned DLLs loaded from google chrome application folder\n\n``` sql\nFROM logs-endpoint.events.library*\n| where event.category == \"library\" and event.action == \"load\" and to_lower(dll.path) like \"c:\\\\\\\\program files\\\\\\\\google\\\\\\\\chrome\\\\\\\\application\\\\\\\\*\" and not (dll.code_signature.trusted == true)\n| keep process.executable, dll.path, dll.hash.sha256, agent.id\n| stats agents_count = COUNT_DISTINCT(agent.id), total_executions = count(*) by process.executable, dll.path, dll.hash.sha256\n| where agents_count == 1 and total_executions \u003c= 10\n```\n\n### Unsigned executable launched from google chrome application folder\n\n``` sql\nFROM logs-endpoint.events.process*\n| where event.category == \"library\" and event.type == \"start\" and (to_lower(process.executable) like \"c:\\\\\\\\program files\\\\\\\\google\\\\\\\\chrome\\\\\\\\application\\\\\\\\*\" or to_lower(process.executable) like \"c:\\\\\\\\scoped_dir\\\\\\\\program files\\\\\\\\google\\\\\\\\chrome\\\\\\\\application\\\\\\\\*\")\nand not (process.code_signature.trusted == true and process.code_signature.subject_name == \"Goole LLC\")\n| keep process.executable,process.hash.sha256, agent.id\n| stats agents_count = COUNT_DISTINCT(agent.id), total_executions = count(*) by process.executable, process.hash.sha256\n| where agents_count == 1 and total_executions \u003c= 10\n```\n\n![ES|QL query results for malicious DLL loaded by Chrome](/assets/images/katz-and-mouse-game/image6.png)\n\n# Conclusion\n\nGoogle has raised the bar implementing new security controls to protect cookie data within Chrome. As expected, this has caused malware developers to develop or integrate their own bypasses. We hope Google will continue to innovate to provide stronger protection for user data. \n\nOrganizations and defenders should consistently monitor for unusual endpoint activity. While these new techniques may be successful, they are also noisy and detectable with the right security instrumentation, processes, and personnel.  \n\n## Stealer Bypasses and MITRE ATT\u0026CK\n\nElastic uses the [MITRE ATT\u0026CK](https://attack.mitre.org/) framework to document common tactics, techniques, and procedures that threats use against enterprise networks.\n\n### Tactics\n\nTactics represent the why of a technique or sub-technique. It is the adversary’s tactical goal: the reason for performing an action.\n\n - [Credential Access](https://attack.mitre.org/tactics/TA0006/)\n - [Defense Evasion](https://attack.mitre.org/tactics/TA0005/)\n - [Discovery](https://attack.mitre.org/tactics/TA0007/)\n - [Execution](https://attack.mitre.org/tactics/TA0002/)\n\n### Techniques\n\nTechniques represent how an adversary achieves a tactical goal by performing an action.\n\n - [Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539/)\n - [Process Injection](https://attack.mitre.org/techniques/T1055/)\n - [Credentials from Password Stores](https://attack.mitre.org/techniques/T1555/)\n - [System Information Discovery](https://attack.mitre.org/techniques/T1082/)\n - [Process Discovery](https://attack.mitre.org/techniques/T1057/)\n - [Inter-Process Communication: Component Object Model](https://attack.mitre.org/techniques/T1559/001/)\n\n## YARA\n\nElastic Security has created YARA rules to identify this activity. \n\n - [Windows.Trojan.Stealc](https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Windows_Trojan_Stealc.yar)\n - [Windows.Infostealer.PhemedroneStealer](https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Windows_Infostealer_PhemedroneStealer.yar)\n - [Windows.Trojan.MetaStealer](https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Windows_Trojan_MetaStealer.yar)\n - [Windows.Trojan.Xeno](https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Windows_Trojan_Xeno.yar)\n - [Windows.Trojan.Lumma](https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Windows_Trojan_Lumma.yar)\n - [Windows.Infostealer.Generic](https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Windows_Infostealer_Generic.yar)\n\n## Observations\n\nAll observables are also available for [download](https://github.com/elastic/labs-releases/tree/main/indicators/app-bound_bypass) in both ECS and STIX format.\n\nThe following observables were discussed in this research.\n\n| Observable | Type | Name | Reference |\n|-----|-----|-----|-----|\n| 27e4a3627d7df2b22189dd4bebc559ae1986d49a8f4e35980b428fadb66cf23d | SHA-256 | num.exe | STEALC |\n| 08d9d4e6489dc5b05a6caa434fc36ad6c1bd8c8eb08888f61cbed094eac6cb37 | SHA-256 | HardCoreCrack.exe | PHEMEDRONE |\n| 43cb70d31daa43d24e5b063f4309281753176698ad2aba9c557d80cf710f9b1d | SHA-256 | Ranginess.exe | METASTEALER |\n| 84033def9ffa70c7b77ce9a7f6008600c0145c28fe5ea0e56dfafd8474fb8176 | SHA-256 | | LUMMA |\n| b74733d68e95220ab0630a68ddf973b0c959fd421628e639c1b91e465ba9299b | SHA-256 | XenoStealer.exe | XENOSTEALER |\n\n\n## References\nThe following were referenced throughout the above research:\n\n - [https://developer.chrome.com/release-notes/127](https://developer.chrome.com/release-notes/127)\n- [https://security.googleblog.com/2024/07/improving-security-of-chrome-cookies-on.html](https://security.googleblog.com/2024/07/improving-security-of-chrome-cookies-on.html)\n","code":"var Component=(()=\u003e{var d=Object.create;var r=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var f=(n,e)=\u003e()=\u003e(e||n((e={exports:{}}).exports,e),e.exports),w=(n,e)=\u003e{for(var o in e)r(n,o,{get:e[o],enumerable:!0})},s=(n,e,o,a)=\u003e{if(e\u0026\u0026typeof e==\"object\"||typeof e==\"function\")for(let i of p(e))!g.call(n,i)\u0026\u0026i!==o\u0026\u0026r(n,i,{get:()=\u003ee[i],enumerable:!(a=m(e,i))||a.enumerable});return n};var b=(n,e,o)=\u003e(o=n!=null?d(u(n)):{},s(e||!n||!n.__esModule?r(o,\"default\",{value:n,enumerable:!0}):o,n)),y=n=\u003es(r({},\"__esModule\",{value:!0}),n);var l=f((_,c)=\u003e{c.exports=_jsx_runtime});var E={};w(E,{default:()=\u003eC,frontmatter:()=\u003ev});var t=b(l()),v={title:\"Katz and Mouse Game:  MaaS Infostealers Adapt to Patched Chrome Defenses\",slug:\"katz-and-mouse-game\",date:\"2024-10-28\",description:\"Elastic Security Labs breaks down bypass implementations from the infostealer ecosystem\\u2019s reaction to Chrome 127's Application-Bound Encryption scheme.\",author:[{slug:\"jia-yu-chan\"},{slug:\"salim-bitam\"},{slug:\"daniel-stepanic\"},{slug:\"samir-bousseaden\"},{slug:\"cyril-francois\"},{slug:\"seth-goodwin\"}],image:\"Security Labs Images 2.jpg\",category:[{slug:\"malware-analysis\"}],tags:[\"infostealer\",\"chrome\",\"cookie\",\"VIDAR\",\"STEALC\",\"LUMMA\",\"METASTEALER\",\"PHEMEDRONE\",\"XENOSTEALER\"]};function h(n){let e=Object.assign({h1:\"h1\",p:\"p\",a:\"a\",ul:\"ul\",li:\"li\",h2:\"h2\",img:\"img\",code:\"code\",blockquote:\"blockquote\",pre:\"pre\",h3:\"h3\",div:\"div\",table:\"table\",thead:\"thead\",tr:\"tr\",th:\"th\",tbody:\"tbody\",td:\"td\"},n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h1,{id:\"introduction\",children:\"Introduction\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"In July, Google \",(0,t.jsx)(e.a,{href:\"https://security.googleblog.com/2024/07/improving-security-of-chrome-cookies-on.html\",rel:\"nofollow\",children:\"announced\"}),\" a new protection mechanism for cookies stored within Chrome on Windows, known as Application-Bound Encryption. There is no doubt this security implementation has raised the bar and directly impacted the malware ecosystem. After months with this new feature, many infostealers have written new code to bypass this protection (as the Chrome Security Team predicted) in order to stay competitive in the market and deliver capabilities that reliably retrieve cookie data from Chrome browsers.\"]}),`\n`,(0,t.jsx)(e.p,{children:\"Elastic Security Labs has been tracking a subset of this activity, identifying multiple techniques used by different malware families to circumvent App-Bound Encryption. While the ecosystem is still evolving in light of this pressure, our goal is to share technical details that help organizations understand and defend against these techniques. In this article, we will cover the different methods used by the following infostealer families:\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:\"STEALC/VIDAR\"}),`\n`,(0,t.jsx)(e.li,{children:\"METASTEALER\"}),`\n`,(0,t.jsx)(e.li,{children:\"PHEMEDRONE\"}),`\n`,(0,t.jsx)(e.li,{children:\"XENOSTEALER\"}),`\n`,(0,t.jsx)(e.li,{children:\"LUMMA\"}),`\n`]}),`\n`,(0,t.jsx)(e.h1,{id:\"key-takeaways\",children:\"Key takeaways\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:\"Latest versions of infostealers implement bypasses around Google\\u2019s recent cookie protection feature using Application-Bound Encryption\"}),`\n`,(0,t.jsx)(e.li,{children:\"Techniques include integrating offensive security tool ChromeKatz, leveraging COM to interact with Chrome services and decrypt the app-bound encryption key, and using the remote debugging feature within Chrome\"}),`\n`,(0,t.jsx)(e.li,{children:\"Defenders should actively monitor for different cookie bypass techniques against Chrome on Windows in anticipation of future mitigations and bypasses likely to emerge in the near- to mid-term\"}),`\n`,(0,t.jsx)(e.li,{children:\"Elastic Security provides mitigations through memory signatures, behavioral rules, and hunting opportunities to enable faster identification and response to infostealer activity\"}),`\n`]}),`\n`,(0,t.jsx)(e.h1,{id:\"background\",children:\"Background\"}),`\n`,(0,t.jsx)(e.p,{children:\"Generically speaking, cookies are used by web applications to store visitor information in the browser the visitor uses to access that web app. This information helps the web app track that user, their preferences, and other information from location to location\\u2013 even across devices.\"}),`\n`,(0,t.jsx)(e.p,{children:\"The authentication token is one use of the client-side data storage structures that enables much of how modern web interactivity works. These tokens are stored by the browser after the user has successfully authenticated with a web application. After username and password, after multifactor authentication (MFA) via one-time passcodes or biometrics, the web application \\u201Cremembers\\u201D your browser is you via the exchange of this token with each subsequent web request.\"}),`\n`,(0,t.jsx)(e.p,{children:\"A malicious actor who gets access to a valid authentication token can reuse it to impersonate the user to that web service with the ability to take over accounts, steal personal or financial information, or perform other actions as that user such as transfer financial assets.\"}),`\n`,(0,t.jsx)(e.p,{children:\"Cybercriminals use infostealers to steal and commoditize this type of information for their financial gain.\"}),`\n`,(0,t.jsx)(e.h2,{id:\"google-chrome-cookie-security\",children:\"Google Chrome Cookie Security\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"Legacy versions of Google Chrome on Windows used the Windows native \",(0,t.jsx)(e.a,{href:\"https://learn.microsoft.com/en-us/dotnet/standard/security/how-to-use-data-protection\",rel:\"nofollow\",children:\"Data Protection API\"}),\" (DPAPI) to encrypt cookies and protect them from other user contexts. This provided adequate protection against several attack scenarios, but any malicious software running in the targeted user\\u2019s context could decrypt these cookies using the DPAPI methods directly. Unfortunately, this context is exactly the niche that infostealers often find themselves in after social engineering for initial access. The DPAPI scheme is now \",(0,t.jsx)(e.a,{href:\"https://posts.specterops.io/operational-guidance-for-offensive-user-dpapi-abuse-1fb7fac8b107\",rel:\"nofollow\",children:\"well known to attackers\"}),\" with several attack vectors; from local decryption using the API, to stealing the masterkey and decrypting remotely, to abusing the domain-wide backup DPAPI key in an enterprise environment.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"With the release of Chrome 127 in July 2024, Google \",(0,t.jsx)(e.a,{href:\"https://developer.chrome.com/release-notes/127\",rel:\"nofollow\",children:\"implemented\"}),\" Application-Bound Encryption of browser data. This mechanism directly addressed many common DPAPI attacks against Windows Chrome browser data\\u2013including cookies. It does this by storing the data in encrypted datafiles, and using a service running as SYSTEM to verify any decryption attempts are coming from the Chrome process before returning the key to that process for decryption of the stored data.\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/katz-and-mouse-game/image5.png\",alt:\"Chrome 127 Application-Bound Encryption Scheme. Source: https://security.googleblog.com/2024/07/improving-security-of-chrome-cookies-on.html\",width:\"1416\",height:\"919\"})}),`\n`,(0,t.jsx)(e.p,{children:\"While it is our view that this encryption scheme is not a panacea to protect all browser data (as the Chrome Security Team acknowledges in their release) we do feel it has been successful in driving malware authors to TTPs that are more overtly malicious, and easier for defenders to identify and respond to.\"}),`\n`,(0,t.jsx)(e.h1,{id:\"stealer-bypass-techniques-summarized\",children:\"Stealer Bypass Techniques, Summarized\"}),`\n`,(0,t.jsx)(e.p,{children:\"The following sections will describe specific infostealer techniques used to bypass Google\\u2019s App-Bound Encryption feature as observed by Elastic. Although this isn\\u2019t an exhaustive compilation of bypasses, and development of these families is ongoing, they represent an interesting dynamic within the infostealer space showing how malware developers responded to Google\\u2019s recently updated security control. The techniques observed by our team include:\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:\"Remote debugging via Chrome\\u2019s DevTools Protocol\"}),`\n`,(0,t.jsxs)(e.li,{children:[\"Reading process memory of Chrome network service process (ChromeKatz and \",(0,t.jsx)(e.code,{children:\"ReadProcessMemory\"}),\" (RPM))\"]}),`\n`,(0,t.jsxs)(e.li,{children:[\"Elevating to \",(0,t.jsx)(e.code,{children:\"SYSTEM\"}),\" then decrypting \",(0,t.jsx)(e.code,{children:\"app_bound_encryption_key\"}),\" with the \",(0,t.jsx)(e.code,{children:\"DecryptData\"}),\" method of \",(0,t.jsx)(e.code,{children:\"GoogleChromeElevationService\"}),\" through COM\"]}),`\n`]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/katz-and-mouse-game/image30.png\",alt:\"Timeline of events\",width:\"960\",height:\"540\"})}),`\n`,(0,t.jsx)(e.h2,{id:\"stealcvidar\",children:\"STEALC/VIDAR\"}),`\n`,(0,t.jsx)(e.p,{children:\"Our team observed new code introduced to STEALC/VIDAR related to the cookie bypass technique around September 20th. These were atypical samples that stood out from previous versions and were implemented as embedded 64-bit PE files along with conditional checks. Encrypted values in the SQLite databases where Chrome stores its data are now prefixed with v20, indicating that the values are now encrypted using application-bound encryption.\"}),`\n`,(0,t.jsxs)(e.blockquote,{children:[`\n`,(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.a,{href:\"https://malpedia.caad.fkie.fraunhofer.de/details/win.stealc\",rel:\"nofollow\",children:\"STEALC\"}),\" was introduced in 2023 and was developed with \\u201Cheavy inspiration\\u201D from other more established stealers such as \",(0,t.jsx)(e.a,{href:\"https://malpedia.caad.fkie.fraunhofer.de/details/win.raccoon\",rel:\"nofollow\",children:\"RACOON\"}),\" and \",(0,t.jsx)(e.a,{href:\"https://malpedia.caad.fkie.fraunhofer.de/details/win.vidar\",rel:\"nofollow\",children:\"VIDAR\"}),\". STEALC and VIDAR have continued concurrent development, and in the case of App-Bound Encryption bypasses have settled on the same implementation.\"]}),`\n`]}),`\n`,(0,t.jsxs)(e.p,{children:[\"During the extraction of encrypted data from the databases the malware checks for this prefix. If it begins with \",(0,t.jsx)(e.code,{children:\"v20\"}),\", a child process is spawned using the embedded PE file in the \",(0,t.jsx)(e.code,{children:\".data\"}),\" section of the binary. This program is responsible for extracting unencrypted cookie values residing in one of Chrome's child processes.\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/katz-and-mouse-game/image2.png\",alt:\"Embedded PE file\",width:\"1190\",height:\"835\"})}),`\n`,(0,t.jsxs)(e.p,{children:[\"This embedded binary creates a hidden desktop via \",(0,t.jsx)(e.code,{children:\"OpenDesktopA\"}),\" / \",(0,t.jsx)(e.code,{children:\"CreateDesktopA\"}),\" then uses \",(0,t.jsx)(e.code,{children:\"CreateToolhelp32Snapshot\"}),\" to scan and terminate all \",(0,t.jsx)(e.code,{children:\"chrome.exe\"}),\" processes. A new \",(0,t.jsx)(e.code,{children:\"chrome.exe\"}),\" process is then started with the new desktop object. Based on the installed version of Chrome, the malware selects a signature pattern for the Chromium feature \",(0,t.jsx)(e.a,{href:\"https://www.chromium.org/developers/design-documents/network-stack/cookiemonster/\",rel:\"nofollow\",children:\"CookieMonster\"}),\", an internal component used to manage cookies.\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/katz-and-mouse-game/image38.png\",alt:\"Signature pattern for CookieMonster\",width:\"1244\",height:\"485\"})}),`\n`,(0,t.jsxs)(e.p,{children:[\"We used the \",(0,t.jsx)(e.a,{href:\"https://github.com/Meckazin/ChromeKatz/blob/9152004174e9a0b2d092c70ebc75efbf80fa1098/CookieKatz/Main.cpp#L123\",rel:\"nofollow\",children:\"signature patterns\"}),\" to pivot to existing code developed for an offensive security tool called \",(0,t.jsx)(e.a,{href:\"https://github.com/Meckazin/ChromeKatz\",rel:\"nofollow\",children:\"ChromeKatz\"}),\". At this time, the patterns have been removed from the ChromeKatz repository and replaced with a new technique. Based on our analysis, the malware author appears to have reimplemented ChromeKatz within STEALC in order to bypass the app-bound encryption protection feature.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Once the malware identifies a matching signature, it enumerates Chrome\\u2019s child processes to check for the presence of the \",(0,t.jsx)(e.code,{children:\"--utility-sub-type=network.mojom.NetworkService\"}),\" command-line flag. This flag indicates that the process is the network service responsible for handling all internet communication. It becomes a prime target as it holds the sensitive data the attacker seeks, as described in MDSec\\u2019s \",(0,t.jsx)(e.a,{href:\"https://www.mdsec.co.uk/2021/01/breaking-the-browser-a-tale-of-ipc-credentials-and-backdoors/\",rel:\"nofollow\",children:\"post\"}),\". It then returns a handle for that specific child process.\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/katz-and-mouse-game/image37.png\",alt:\"Enumerating for Chrome\\u2019s network service\",width:\"1482\",height:\"633\"})}),`\n`,(0,t.jsxs)(e.p,{children:[\"Next, it enumerates each module in the network service child process to find and retrieve the base address and size of \",(0,t.jsx)(e.code,{children:\"chrome.dll\"}),\" loaded into memory. STEALC uses \",(0,t.jsx)(e.a,{href:\"https://github.com/Meckazin/ChromeKatz/blob/767047dcf8f53c70be5e3e0859c5eee3f129d758/CredentialKatz/Memory.cpp#L280\",rel:\"nofollow\",children:(0,t.jsx)(e.code,{children:\"CredentialKatz::FindDllPattern\"})}),\" and \",(0,t.jsx)(e.a,{href:\"https://github.com/Meckazin/ChromeKatz/blob/767047dcf8f53c70be5e3e0859c5eee3f129d758/CookieKatz/Memory.cpp#L435\",rel:\"nofollow\",children:(0,t.jsx)(e.code,{children:\"CookieKatz::FindPattern\"})}),\" to locate the CookieMonster instances. There are 2 calls to \",(0,t.jsx)(e.code,{children:\"CredentialKatz::FindDllPattern\"}),\".\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/katz-and-mouse-game/image17.png\",alt:\"Calls to CredentialKatz::FindDllPattern\",width:\"830\",height:\"763\"})}),`\n`,(0,t.jsxs)(e.p,{children:[\"In the first call to \",(0,t.jsx)(e.code,{children:\"CredentialKatz::FindDllPattern\"}),\", it tries to locate one of the signature patterns (depending on the victim\\u2019s Chrome version) in \",(0,t.jsx)(e.code,{children:\"chrome.dll\"}),\". Once found, STEALC now has a reference pointer to that memory location where the byte sequence begins which is the function \",(0,t.jsx)(e.code,{children:\"net::CookieMonster::~CookieMonster\"}),\", destructor of the \",(0,t.jsx)(e.code,{children:\"CookieMonster\"}),\" class.\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/katz-and-mouse-game/image14.png\",alt:\"Byte sequence for net::CookieMonster::~CookieMonster found in chrome.dll\",width:\"1368\",height:\"137\"})}),`\n`,(0,t.jsxs)(e.p,{children:[\"The second call to \",(0,t.jsx)(e.code,{children:\"CredentialKatz::FindDllPattern\"}),\" passes in the function address for \",(0,t.jsx)(e.code,{children:\"net::CookieMonster::~CookieMonster(void)\"}),\" as an argument for the byte sequence search, resulting in STEALC having a pointer to \",(0,t.jsx)(e.code,{children:\"CookieMonster\"}),\"\\u2019s Virtual Function Pointer struct.\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/katz-and-mouse-game/image19.png\",alt:\"CookieMonster\\u2019s vtable in chrome.dll\",width:\"1808\",height:\"377\"})}),`\n`,(0,t.jsxs)(e.p,{children:[\"The following method used by STEALC is again, identical to ChromeKatz, where it locates \",(0,t.jsx)(e.code,{children:\"CookieMonster\"}),\" instances by scanning memory chunks in the \",(0,t.jsx)(e.code,{children:\"chrome.dll\"}),\" module for pointers referencing the \",(0,t.jsx)(e.code,{children:\"CookieMonster\"}),\" vtable. Since the vtable is a constant across all objects of a given class, any \",(0,t.jsx)(e.code,{children:\"CookieMonster\"}),\" object will have the same vtable pointer. When a match is identified, STEALC treats the memory location as a \",(0,t.jsx)(e.code,{children:\"CookieMonster\"}),\" instance and stores its address in an array.\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/katz-and-mouse-game/image16.png\",alt:\"Using CookieKatz::FindPattern to locate CookieMonster instances\",width:\"1097\",height:\"249\"})}),`\n`,(0,t.jsxs)(e.p,{children:[\"For each identified \",(0,t.jsx)(e.code,{children:\"CookieMonster\"}),\" instance, STEALC accesses the internal \",(0,t.jsx)(e.code,{children:\"CookieMap\"}),\" structure located at an offset of \",(0,t.jsx)(e.code,{children:\"+0x30\"}),\", and which is a binary tree. Each node within this tree contains pointers to \",(0,t.jsx)(e.code,{children:\"CanonicalCookieChrome\"}),\" structures. \",(0,t.jsx)(e.code,{children:\"CanonicalCookieChrome\"}),\" structures hold unencrypted cookie data, making it accessible for extraction. STEALC then initiates a tree traversal by passing the first node into a dedicated traversal function.\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/katz-and-mouse-game/image20.png\",alt:\"Initiating CookieMap tree traversal for each CookieMonster instance found\",width:\"1583\",height:\"404\"})}),`\n`,(0,t.jsxs)(e.p,{children:[\"For each node, it calls \",(0,t.jsx)(e.code,{children:\"ReadProcessMemory\"}),\" to access the \",(0,t.jsx)(e.code,{children:\"CanonicalCookieChrome\"}),\" structure from the target process\\u2019s memory, then further processing it in \",(0,t.jsx)(e.code,{children:\"jy::GenerateExfilString\"}),\".\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/katz-and-mouse-game/image31.png\",alt:\"CookieMap traversal subroutine\",width:\"1745\",height:\"1243\"})}),`\n`,(0,t.jsxs)(e.p,{children:[\"STEALC formats the extracted cookie data by converting the expiration date to UNIX format and verifying the presence of the \",(0,t.jsx)(e.code,{children:\"HttpOnly\"}),\" and \",(0,t.jsx)(e.code,{children:\"Secure\"}),\" flags. It then appends details such as the cookie's name, value, domain, path, and the \",(0,t.jsx)(e.code,{children:\"HttpOnly\"}),\" and \",(0,t.jsx)(e.code,{children:\"Secure\"}),\" into a final string for exfiltration. \",(0,t.jsx)(e.a,{href:\"https://github.com/Meckazin/ChromeKatz/blob/9152004174e9a0b2d092c70ebc75efbf80fa1098/CookieKatz/Memory.cpp#L10\",rel:\"nofollow\",children:(0,t.jsx)(e.code,{children:\"OptimizedString\"})}),\" structs are used in place of strings, so string values can either be the string itself, or if the string length is greater than 23, it will point to the address storing the string.\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/katz-and-mouse-game/image23.png\",alt:\"Constructing string for data exfiltration\",width:\"1692\",height:\"977\"})}),`\n`,(0,t.jsx)(e.h2,{id:\"metastealer\",children:\"METASTEALER\"}),`\n`,(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.a,{href:\"https://malpedia.caad.fkie.fraunhofer.de/details/win.metastealer\",rel:\"nofollow\",children:\"METASTEALER\"}),\", first observed in 2022, recently upgraded its ability to steal Chrome data, bypassing Google\\u2019s latest mitigation efforts. On September 30th, the malware authors announced this update via their Telegram channel, highlighting its enhanced capability to extract sensitive information, including cookies, despite the security changes in Chrome's version \",(0,t.jsx)(e.code,{children:\"129+\"}),\".\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/katz-and-mouse-game/image26.png\",alt:\"METASTEALER announcement and translation\",width:\"510\",height:\"666\"})}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/katz-and-mouse-game/image28.png\",alt:\"source: https://x.com/g0njxa/status/1840761619686568319/\",width:\"642\",height:\"718\"})}),`\n`,(0,t.jsxs)(e.p,{children:[\"The \",(0,t.jsx)(e.a,{href:\"https://www.virustotal.com/gui/file/973a9056040af402d6f92f436a287ea164fae09c263f80aba0b8d5366ed9957a\",rel:\"nofollow\",children:\"first sample\"}),\" observed in the wild by our team was discovered on September 30th, the same day the authors promoted the update. Despite claims that the malware operates without needing \",(0,t.jsx)(e.code,{children:\"Administrator\"}),\" privileges, our testing revealed it does require elevated access, as it attempts to impersonate the \",(0,t.jsx)(e.code,{children:\"SYSTEM\"}),\" token during execution.\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/katz-and-mouse-game/image11.png\",alt:\"Code comparison between an old and a new version of the family\",width:\"1817\",height:\"1284\"})}),`\n`,(0,t.jsxs)(e.p,{children:[\"As shown in the screenshots above, the \",(0,t.jsx)(e.code,{children:\"get_decryption\"}),\" method now includes a new Boolean parameter. This value is set to \",(0,t.jsx)(e.code,{children:\"TRUE\"}),\" if the encrypted data (cookie) begins with the \",(0,t.jsx)(e.code,{children:\"v20\"}),\" prefix, indicating that the cookie is encrypted using Chrome's latest encryption method. The updated function retains backward compatibility, still supporting the decryption of cookies from older Chrome versions if present on the infected machine.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"The malware then attempts to access the \",(0,t.jsx)(e.code,{children:\"Local State\"}),\" or \",(0,t.jsx)(e.code,{children:\"LocalPrefs.json\"}),\" files located in the Chrome profile directory. Both files are JSON formatted and store encryption keys (\",(0,t.jsx)(e.code,{children:\"encrypted_key\"}),\") for older Chrome versions and \",(0,t.jsx)(e.code,{children:\"app_bound_encrypted_key\"}),\" for newer ones. If the flag is set to \",(0,t.jsx)(e.code,{children:\"TRUE\"}),\", the malware specifically uses the \",(0,t.jsx)(e.code,{children:\"app_bound_encrypted_key\"}),\" to decrypt cookies in line with the updated Chrome encryption method.\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/katz-and-mouse-game/image13.png\",alt:\"app_bound_encrypted_key extracted from Chrome json file\",width:\"1999\",height:\"582\"})}),`\n`,(0,t.jsxs)(e.p,{children:[\"In this case, the malware first impersonates the \",(0,t.jsx)(e.code,{children:\"SYSTEM\"}),\" token using a newly introduced class called \",(0,t.jsx)(e.code,{children:\"ContextSwitcher\"}),\".\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/katz-and-mouse-game/image35.png\",alt:\"New class for TOKEN impersonation\",width:\"1169\",height:\"454\"})}),`\n`,(0,t.jsxs)(e.p,{children:[\"It then decrypts the key by creating an instance via the COM of the Chrome service responsible for decryption, named \",(0,t.jsx)(e.code,{children:\"GoogleChromeElevationService\"}),\", using the CLSID \",(0,t.jsx)(e.code,{children:\"708860E0-F641-4611-8895-7D867DD3675B\"}),\". Once initialized, it invokes the \",(0,t.jsx)(e.a,{href:\"https://github.com/chromium/chromium/blob/225f82f8025e4f93981310fd33daa71dc972bfa9/chrome/elevation_service/elevator.cc#L155\",rel:\"nofollow\",children:(0,t.jsx)(e.code,{children:\"DecryptData\"})}),\" method to decrypt the \",(0,t.jsx)(e.code,{children:\"app_bound_encrypted_key\"}),\" key which will be used to decrypt the encrypted cookies.\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/katz-and-mouse-game/image8.png\",alt:\"New class ComInvoker to invoke methods from GoogleChromeElevationService service\",width:\"1999\",height:\"513\"})}),`\n`,(0,t.jsxs)(e.p,{children:[\"METASTEALER employs a technique similar to the one demonstrated in a \",(0,t.jsx)(e.a,{href:\"https://gist.github.com/snovvcrash/caded55a318bbefcb6cc9ee30e82f824\",rel:\"nofollow\",children:\"gist\"}),\" shared \",(0,t.jsx)(e.a,{href:\"https://x.com/snovvcrash/status/1839715912812802162\",rel:\"nofollow\",children:\"on X\"}),\" on September 27th, which may have served as inspiration for the malware authors. Both approaches leverage similar methods to bypass Chrome's encryption mechanisms and extract sensitive data.\"]}),`\n`,(0,t.jsx)(e.h2,{id:\"phemedrone\",children:\"PHEMEDRONE\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"This \",(0,t.jsx)(e.a,{href:\"https://malpedia.caad.fkie.fraunhofer.de/details/win.phemedrone_stealer\",rel:\"nofollow\",children:\"open-source stealer\"}),\" caught the world\\u2019s attention earlier in the year through its usage of a Windows SmartScreen vulnerability (CVE-2023-36025). While its development is still occurring on Telegram, our team found a recent \",(0,t.jsx)(e.a,{href:\"https://www.virustotal.com/gui/file/1067d27007ea862ddd68e90ef68b6d17fa18f9305c09f72bad04d00102a60b8c\",rel:\"nofollow\",children:\"release\"}),\" (2.3.2) submitted at the end of September including new cookie grabber functionality for Chrome.\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/katz-and-mouse-game/image10.png\",alt:\"README.txt within PHEMEDRONE project\",width:\"1082\",height:\"445\"})}),`\n`,(0,t.jsxs)(e.p,{children:[\"The malware first enumerates the different profiles within Chrome, then performs a browser check using function (\",(0,t.jsx)(e.code,{children:\"BrowserHelpers.NewEncryption\"}),\") checking for the Chrome browser with a version greater than or equal to \",(0,t.jsx)(e.code,{children:\"127\"}),\".\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/katz-and-mouse-game/image27.png\",alt:\"Chrome version verification in PHEMEDRONE\",width:\"658\",height:\"122\"})}),`\n`,(0,t.jsx)(e.p,{children:\"If the condition matches, PHEMEDRONE uses a combination of helper functions to extract the cookies.\"}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/katz-and-mouse-game/image34.png\",alt:\"High-level functions used cookie extraction in PHEMEDRONE\",width:\"877\",height:\"326\"})}),`\n`,(0,t.jsxs)(e.p,{children:[\"By viewing the \",(0,t.jsx)(e.code,{children:\"ChromeDevToolsWrapper\"}),\" class and its different functions, we can see that PHEMEDRONE sets up a remote debugging session within Chrome to access the cookies. The default port (\",(0,t.jsx)(e.code,{children:\"9222\"}),\") is used along with window-position set to \",(0,t.jsx)(e.code,{children:\"-2400\"}),\",\",(0,t.jsx)(e.code,{children:\"-2400\"}),\" which is set off-screen preventing any visible window from alerting the victim.\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/katz-and-mouse-game/image15.png\",alt:\"New Chrome process in remote debug mode\",width:\"1043\",height:\"275\"})}),`\n`,(0,t.jsxs)(e.p,{children:[\"Next, the malware establishes a WebSocket connection to Chrome\\u2019s debugging interface making a request using deprecated Chrome DevTools Protocol method (\",(0,t.jsx)(e.code,{children:\"Network.getAllCookies\"}),\").\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/katz-and-mouse-game/image24.png\",alt:\"Chrome DevTools Protocol used to retrieve cookies\",width:\"1112\",height:\"351\"})}),`\n`,(0,t.jsx)(e.p,{children:\"The cookies are then returned from the previous request in plaintext, below is a network capture showing this behavior:\"}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/katz-and-mouse-game/image32.png\",alt:\"Cookie data within network capture\",width:\"1012\",height:\"390\"})}),`\n`,(0,t.jsx)(e.h2,{id:\"xenostealer\",children:\"XENOSTEALER\"}),`\n`,(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.a,{href:\"https://github.com/moom825/XenoStealer/\",rel:\"nofollow\",children:\"XENOSTEALER\"}),\" is an open-source infostealer hosted on GitHub. It appeared in July 2024 and is under active development at the time of this publication. Notably, the Chrome bypass feature was committed on September 26, 2024.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"The approach taken by XENOSTEALER is similar to that of METASTEALER. It first parses the JSON file under a given Chrome profile to extract the \",(0,t.jsx)(e.code,{children:\"app_bound_encrypted_key\"}),\". However, the decryption process occurs within a Chrome process. To achieve this, XENOSTEALER launches an instance of \",(0,t.jsx)(e.code,{children:\"Chrome.exe\"}),\", then injects code using a helper class called \",(0,t.jsx)(e.a,{href:\"https://github.com/moom825/XenoStealer/blob/d1c7e242183a2c8582c179a1b546f0a5cdff5f75/XenoStealer/Injector/SharpInjector.cs\",rel:\"nofollow\",children:(0,t.jsx)(e.code,{children:\"SharpInjector\"})}),\", passing the encrypted key as a parameter.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"The injected code subsequently calls the \",(0,t.jsx)(e.code,{children:\"DecryptData\"}),\" method from the \",(0,t.jsx)(e.code,{children:\"GoogleChromeElevationService\"}),\" to obtain the decrypted key.\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/katz-and-mouse-game/image29.png\",alt:\"Source code of the injected code\",width:\"1710\",height:\"981\"})}),`\n`,(0,t.jsx)(e.h2,{id:\"lumma\",children:\"LUMMA\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"In mid-October, the latest version of \",(0,t.jsx)(e.a,{href:\"https://malpedia.caad.fkie.fraunhofer.de/details/win.lumma\",rel:\"nofollow\",children:\"LUMMA\"}),\" implemented a new method to bypass Chrome cookie protection, as reported by \",(0,t.jsx)(e.a,{href:\"https://x.com/g0njxa\",rel:\"nofollow\",children:\"@g0njxa\"}),\".\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/katz-and-mouse-game/image40.png\",alt:\"\",width:\"586\",height:\"351\"})}),`\n`,(0,t.jsxs)(e.p,{children:[\"We analyzed a recent version of LUMMA, confirming that it managed to successfully recover the cookie data from the latest version of Google Chrome (\",(0,t.jsx)(e.code,{children:\"130.0.6723.70\"}),\"). LUMMA first creates a visible Chrome process via \",(0,t.jsx)(e.code,{children:\"Kernel32!CreateProcessW\"}),\".\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/katz-and-mouse-game/image3.png\",alt:\"Dump of CreateProcessW lpApplicationName parameter\",width:\"420\",height:\"183\"})}),`\n`,(0,t.jsxs)(e.p,{children:[\"This activity was followed up in the debugger with multiple calls to \",(0,t.jsx)(e.code,{children:\"NtReadVirtualMemory\"}),\" where we identified LUMMA searching within the Chrome process for \",(0,t.jsx)(e.code,{children:\"chrome.dll\"}),\".\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/katz-and-mouse-game/image7.png\",alt:\"LUMMA seeks chrome.dll in Chrome\",width:\"690\",height:\"85\"})}),`\n`,(0,t.jsxs)(e.p,{children:[\"Once found, the malware copies the \",(0,t.jsx)(e.code,{children:\"chrome.dll\"}),\" image to its own process memory using \",(0,t.jsx)(e.code,{children:\"NtReadVirtualMemory\"}),\". In a similar fashion to the ChromeKatz technique, Lumma leverages pattern scanning to target Chrome\\u2019s \",(0,t.jsx)(e.code,{children:\"CookieMonster\"}),\" component.\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/katz-and-mouse-game/image36.png\",alt:\"Lumma\\u2019s pattern scanning\",width:\"983\",height:\"289\"})}),`\n`,(0,t.jsxs)(e.p,{children:[\"Lumma uses an obfuscated signature pattern to pinpoint the \",(0,t.jsx)(e.code,{children:\"CookieMonster\"}),\" functionality:\"]}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:`3Rf5Zn7oFA2a????k4fAsdxx????l8xX5vJnm47AUJ8uXUv2bA0s34S6AfFA????kdamAY3?PdE????6G????L8v6D8MJ4uq????k70a?oAj7a3????????K3smA????maSd?3l4\n`})}),`\n`,(0,t.jsx)(e.p,{children:\"Below is the YARA rule after de-obfuscation:\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:`rule lumma_stealer\n{\n  meta:\n    author = \"Elastic Security Labs\"\n  strings:\n    $lumma_pattern = { 56 57 48 83 EC 28 89 D7 48 89 CE E8 ?? ?? ?? ?? 85 FF 74 08 48 89 F1 E8 ?? ?? ?? ?? 48 89 F0 48 83 C4 28 5F 5E C3 CC CC CC CC CC CC CC CC CC CC 56 57 48 83 EC 38 48 89 CE 48 8B 05 ?? ?? ?? ?? 48 31 E0 48 89 44 24 ?? 48 8D 79 ?? ?? ?? ?? 28 E8 ?? ?? ?? ?? 48 8B 46 20 48 8B 4E 28 48 8B 96 ?? ?? ?? ?? 4C 8D 44 24 ?? 49 89 10 48 C7 86 ?? ?? ?? ?? ?? ?? ?? ?? 48 89 FA FF 15 ?? ?? ?? ?? 48 8B 4C 24 ?? 48 31 E1}\n  condition:\n    all of them\n}\n`})}),`\n`,(0,t.jsxs)(e.p,{children:[\"After decoding and searching for the pattern in \",(0,t.jsx)(e.code,{children:\"chrome.dll\"}),\", this leads to the \",(0,t.jsx)(e.code,{children:\"CookieMonster\"}),\" destructor (\",(0,t.jsx)(e.a,{href:\"https://chromium.googlesource.com/chromium/src/net/+/master/cookies/cookie_monster.cc#657\",rel:\"nofollow\",children:(0,t.jsx)(e.code,{children:\"net::CookieMonster::~CookieMonster\"})}),\").\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/katz-and-mouse-game/image25.png\",alt:\"Lumma pattern match on CookieMonster\",width:\"728\",height:\"339\"})}),`\n`,(0,t.jsx)(e.p,{children:\"The cookies are then identified in memory and dumped out in clear text from the Chrome process.\"}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/katz-and-mouse-game/image21.png\",alt:\"LUMMA dumping the cookie in clear text from Chrome\",width:\"659\",height:\"314\"})}),`\n`,(0,t.jsx)(e.p,{children:\"Once completed, LUMMA sends out the cookies along with the other requested data as multiple zip files (xor encrypted and base64 encoded) to the C2 server.\"}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/katz-and-mouse-game/image12.png\",alt:\"Received stolen cookies on the C2 side\",width:\"699\",height:\"357\"})}),`\n`,(0,t.jsx)(e.h1,{id:\"detection\",children:\"Detection\"}),`\n`,(0,t.jsx)(e.p,{children:\"Below are the following behavioral detections that can be used to identify techniques used by information stealers:\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/da25aa57994ee265583227dbe6fe02261b65415c/behavior/rules/windows/credential_access_web_browser_credential_access_via_unusual_process.toml#L8\",rel:\"nofollow\",children:\"Web Browser Credential Access via Unusual Process\"})}),`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/da25aa57994ee265583227dbe6fe02261b65415c/behavior/rules/windows/credential_access_web_browser_credential_access_via_unsigned_process.toml#L8\",rel:\"nofollow\",children:\"Web Browser Credential Access via Unsigned Process\"})}),`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/da25aa57994ee265583227dbe6fe02261b65415c/behavior/rules/windows/credential_access_access_to_browser_credentials_from_suspicious_memory.toml#L8\",rel:\"nofollow\",children:\"Access to Browser Credentials from Suspicious Memory\"})}),`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/da25aa57994ee265583227dbe6fe02261b65415c/behavior/rules/windows/credential_access_failed_access_attempt_to_web_browser_files.toml#L8\",rel:\"nofollow\",children:\"Failed Access Attempt to Web Browser Files\"})}),`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/da25aa57994ee265583227dbe6fe02261b65415c/behavior/rules/windows/credential_access_browser_debugging_from_unusual_parent.toml#L3\",rel:\"nofollow\",children:\"Browser Debugging from Unusual Parent\"})}),`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/da25aa57994ee265583227dbe6fe02261b65415c/behavior/rules/windows/discovery_potential_browser_information_discovery.toml#L8\",rel:\"nofollow\",children:\"Potential Browser Information Discovery\"})}),`\n`]}),`\n`,(0,t.jsx)(e.p,{children:\"Additionally, the following queries can be used for hunting diverse related abnormal behaviors:\"}),`\n`,(0,t.jsx)(e.h2,{id:\"cookies-access-by-an-unusual-process\",children:\"Cookies access by an unusual process\"}),`\n`,(0,t.jsx)(e.p,{children:\"This query uses file open events and aggregate accesses by process, then looks for ones that are observed in unique hosts and with a low total access count:\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-sql\",children:`FROM logs-endpoint.events.file-default*\n| where event.category == \"file\" and event.action == \"open\" and file.name == \"Cookies\" and file.path like \"*Chrome*\"\n| keep file.path, process.executable, agent.id\n| eval process_path = replace(to_lower(process.executable), \"\"\"c:\\\\\\\\users\\\\\\\\[a-zA-Z0-9\\\\.\\\\-\\\\_\\\\$]+\\\\\\\\\"\"\", \"c:\\\\\\\\\\\\\\\\users\\\\\\\\\\\\\\\\user\\\\\\\\\\\\\\\\\")\n| stats agents_count = COUNT_DISTINCT(agent.id), access_count= count(*) by process_path\n| where agents_count \u003c= 2 and access_count \u003c=2\n`})}),`\n`,(0,t.jsx)(e.p,{children:\"Below example of matches from diverse information stealers including the updated ones with new Chrome cookies stealing capabilities:\"}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/katz-and-mouse-game/image22.png\",alt:\"ES|QL query results for suspicious browser cookies file access\",width:\"1999\",height:\"1014\"})}),`\n`,(0,t.jsxs)(e.p,{children:[\"METASTEALER behavior tends to first terminate all running chrome instances then calls \",(0,t.jsx)(e.a,{href:\"https://learn.microsoft.com/en-us/windows/win32/api/combaseapi/nf-combaseapi-cocreateinstance\",rel:\"nofollow\",children:(0,t.jsx)(e.code,{children:\"CoCreateInstance\"})}),\" to instantiate the Google Chrome \",(0,t.jsx)(e.a,{href:\"https://chromium.googlesource.com/chromium/src/+/main/chrome/elevation_service/\",rel:\"nofollow\",children:\"elevation service\"}),\", this series of events can be expressed with the following EQL query:\"]}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-sql\",children:`sequence by host.id with maxspan=1s\n[process where event.action == \"end\" and process.name == \"chrome.exe\"] with runs=5\n[process where event.action == \"start\" and process.name == \"elevation_service.exe\"]\n`})}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/katz-and-mouse-game/image4.png\",alt:\"EQL query results for suspicious browser termination\",width:\"1999\",height:\"1014\"})}),`\n`,(0,t.jsxs)(e.p,{children:[\"The previous hunt indicates suspicious agents but doesn't identify the source process. By \",(0,t.jsx)(e.a,{href:\"https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-10/security/threat-protection/auditing/event-4663\",rel:\"nofollow\",children:\"enabling registry object access auditing through event 4663\"}),\" on the Chrome Elevation service CLSID registry key \",(0,t.jsx)(e.code,{children:\"{708860E0-F641-4611-8895-7D867DD3675B}\"}),\", we can detect unusual processes attempting to access that key:\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/katz-and-mouse-game/image9.png\",alt:\"Google Chrome Elevation COM registry access\",width:\"1999\",height:\"1384\"})}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-sql\",children:`FROM logs-system.security-default* | where event.code == \"4663\" and winlog.event_data.ObjectName == \"\\\\\\\\REGISTRY\\\\\\\\MACHINE\\\\\\\\SOFTWARE\\\\\\\\Classes\\\\\\\\CLSID\\\\\\\\{708860E0-F641-4611-8895-7D867DD3675B}\" and not winlog.event_data.ProcessName in (\"C:\\\\\\\\Program Files\\\\\\\\Google\\\\\\\\Chrome\\\\\\\\Application\\\\\\\\chrome.exe\", \"C:\\\\\\\\Program Files (x86)\\\\\\\\Google\\\\\\\\Chrome\\\\\\\\Application\\\\\\\\chrome.exe\") and not winlog.event_data.ProcessName like \"C:\\\\\\\\\\\\\\\\Program Files\\\\\\\\\\\\\\\\Google\\\\\\\\\\\\\\\\Chrome\\\\\\\\\\\\\\\\Application\\\\\\\\\\\\\\\\*\\\\\\\\\\\\\\\\elevation_service.exe\" | stats agents_count = COUNT_DISTINCT(agent.id), access_count= count(*) by winlog.event_data.ProcessName | where agents_count \u003c= 2 and access_count \u003c=2\n`})}),`\n`,(0,t.jsxs)(e.p,{children:[\"Below is an example of matches on the METASTEALER malware while calling \",(0,t.jsx)(e.code,{children:\"CoCreateInstance (CLSID_Elevator)\"}),\":\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/katz-and-mouse-game/image39.png\",alt:\"ES|QL query results for suspicious access to chrome elevation service registry\",width:\"1999\",height:\"1014\"})}),`\n`,(0,t.jsxs)(e.p,{children:[\"The \",(0,t.jsx)(e.a,{href:\"https://malpedia.caad.fkie.fraunhofer.de/details/win.phemedrone_stealer\",rel:\"nofollow\",children:\"PHEMEDRONE\"}),\" stealer uses the \",(0,t.jsx)(e.a,{href:\"https://posts.specterops.io/hands-in-the-cookie-jar-dumping-cookies-with-chromiums-remote-debugger-port-34c4f468844e\",rel:\"nofollow\",children:\"known\"}),\" browser debugging method to collect cookies via Chromium API, this can be observed in the following screenshot where we can see an instance of NodeJs communicating with a browser instance with debugging enabled over port \",(0,t.jsx)(e.code,{children:\"9222\"}),\":\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/katz-and-mouse-game/image33.png\",alt:\"PHEMEDRONE - network connection to chrome over port 9222\",width:\"1999\",height:\"826\"})}),`\n`,(0,t.jsx)(e.p,{children:\"The following EQL query can be used to look for unusual processes performing similar behavior:\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-sql\",children:`sequence by host.id, destination.port with maxspan=5s\n[network where event.action == \"disconnect_received\" and\n network.direction == \"ingress\" and\n process.executable in~ (\"C:\\\\\\\\Program Files\\\\\\\\Google\\\\\\\\Chrome\\\\\\\\Application\\\\\\\\chrome.exe\",\n\"C:\\\\\\\\Program Files\\\\\\\\Microsoft\\\\\\\\Edge\\\\\\\\Application\\\\\\\\msedge.exe\") and\n source.address like \"127.*\" and destination.address like \"127.*\"]\n[network where event.action == \"disconnect_received\" and network.direction == \"egress\" and not\n process.executable in~ (\"C:\\\\\\\\Program Files\\\\\\\\Google\\\\\\\\Chrome\\\\\\\\Application\\\\\\\\chrome.exe\",\n\"C:\\\\\\\\Program Files\\\\\\\\Microsoft\\\\\\\\Edge\\\\\\\\Application\\\\\\\\msedge.exe\") and source.address like \"127.*\" and destination.address like \"127.*\"]\n`})}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/katz-and-mouse-game/image1.png\",alt:\"EQL query results for browser debugging activity\",width:\"1999\",height:\"1026\"})}),`\n`,(0,t.jsx)(e.h2,{id:\"chrome-browser-spawned-from-an-unusual-parent\",children:\"Chrome Browser Spawned from an Unusual Parent\"}),`\n`,(0,t.jsx)(e.p,{children:\"The STEALC sample that uses ChromeKatz implementation spawns an instance of Google Chrome to load the user default profile, while looking for normal parent executables, it turns out it\\u2019s limited to Chrome signed parents and Explorer.exe, the following ES|QL query can be used to find unusual parents:\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-sql\",children:`FROM logs-endpoint.events.process-*\n| where event.category == \"process\" and event.type == \"start\" and to_lower(process.name) == \"chrome.exe\" and process.command_line like  \"*--profile-directory=Default*\"\n| eval process_parent_path = replace(to_lower(process.parent.executable), \"\"\"c:\\\\\\\\users\\\\\\\\[a-zA-Z0-9\\\\.\\\\-\\\\_\\\\$]+\\\\\\\\\"\"\", \"c:\\\\\\\\\\\\\\\\users\\\\\\\\\\\\\\\\user\\\\\\\\\\\\\\\\\")\n| stats agents_count = COUNT_DISTINCT(agent.id), total_executions = count(*) by process_parent_path\n| where agents_count == 1 and total_executions \u003c= 10\n`})}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/katz-and-mouse-game/image18.png\",alt:\"ES|QL query results for chrome browser spawned from an unusual parent\",width:\"1999\",height:\"845\"})}),`\n`,(0,t.jsx)(e.h2,{id:\"untrusted-binaries-from-chrome-application-folder\",children:\"Untrusted Binaries from Chrome Application folder\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"Since the Chrome elevation service \",(0,t.jsx)(e.a,{href:\"https://github.com/chromium/chromium/blob/main/chrome/elevation_service/caller_validation.cc#L33-L56\",rel:\"nofollow\",children:\"trusts\"}),\" binaries running from the Chrome \",(0,t.jsx)(e.code,{children:\"program files\"}),\" folder, the following queries can be used to hunt for unsigned or untrusted binaries executed or loaded from there:\"]}),`\n`,(0,t.jsx)(e.h3,{id:\"unsigned-dlls-loaded-from-google-chrome-application-folder\",children:\"Unsigned DLLs loaded from google chrome application folder\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-sql\",children:`FROM logs-endpoint.events.library*\n| where event.category == \"library\" and event.action == \"load\" and to_lower(dll.path) like \"c:\\\\\\\\\\\\\\\\program files\\\\\\\\\\\\\\\\google\\\\\\\\\\\\\\\\chrome\\\\\\\\\\\\\\\\application\\\\\\\\\\\\\\\\*\" and not (dll.code_signature.trusted == true)\n| keep process.executable, dll.path, dll.hash.sha256, agent.id\n| stats agents_count = COUNT_DISTINCT(agent.id), total_executions = count(*) by process.executable, dll.path, dll.hash.sha256\n| where agents_count == 1 and total_executions \u003c= 10\n`})}),`\n`,(0,t.jsx)(e.h3,{id:\"unsigned-executable-launched-from-google-chrome-application-folder\",children:\"Unsigned executable launched from google chrome application folder\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-sql\",children:`FROM logs-endpoint.events.process*\n| where event.category == \"library\" and event.type == \"start\" and (to_lower(process.executable) like \"c:\\\\\\\\\\\\\\\\program files\\\\\\\\\\\\\\\\google\\\\\\\\\\\\\\\\chrome\\\\\\\\\\\\\\\\application\\\\\\\\\\\\\\\\*\" or to_lower(process.executable) like \"c:\\\\\\\\\\\\\\\\scoped_dir\\\\\\\\\\\\\\\\program files\\\\\\\\\\\\\\\\google\\\\\\\\\\\\\\\\chrome\\\\\\\\\\\\\\\\application\\\\\\\\\\\\\\\\*\")\nand not (process.code_signature.trusted == true and process.code_signature.subject_name == \"Goole LLC\")\n| keep process.executable,process.hash.sha256, agent.id\n| stats agents_count = COUNT_DISTINCT(agent.id), total_executions = count(*) by process.executable, process.hash.sha256\n| where agents_count == 1 and total_executions \u003c= 10\n`})}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/katz-and-mouse-game/image6.png\",alt:\"ES|QL query results for malicious DLL loaded by Chrome\",width:\"1999\",height:\"845\"})}),`\n`,(0,t.jsx)(e.h1,{id:\"conclusion\",children:\"Conclusion\"}),`\n`,(0,t.jsx)(e.p,{children:\"Google has raised the bar implementing new security controls to protect cookie data within Chrome. As expected, this has caused malware developers to develop or integrate their own bypasses. We hope Google will continue to innovate to provide stronger protection for user data.\"}),`\n`,(0,t.jsx)(e.p,{children:\"Organizations and defenders should consistently monitor for unusual endpoint activity. While these new techniques may be successful, they are also noisy and detectable with the right security instrumentation, processes, and personnel.\"}),`\n`,(0,t.jsx)(e.h2,{id:\"stealer-bypasses-and-mitre-attck\",children:\"Stealer Bypasses and MITRE ATT\u0026CK\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"Elastic uses the \",(0,t.jsx)(e.a,{href:\"https://attack.mitre.org/\",rel:\"nofollow\",children:\"MITRE ATT\u0026CK\"}),\" framework to document common tactics, techniques, and procedures that threats use against enterprise networks.\"]}),`\n`,(0,t.jsx)(e.h3,{id:\"tactics\",children:\"Tactics\"}),`\n`,(0,t.jsx)(e.p,{children:\"Tactics represent the why of a technique or sub-technique. It is the adversary\\u2019s tactical goal: the reason for performing an action.\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://attack.mitre.org/tactics/TA0006/\",rel:\"nofollow\",children:\"Credential Access\"})}),`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://attack.mitre.org/tactics/TA0005/\",rel:\"nofollow\",children:\"Defense Evasion\"})}),`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://attack.mitre.org/tactics/TA0007/\",rel:\"nofollow\",children:\"Discovery\"})}),`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://attack.mitre.org/tactics/TA0002/\",rel:\"nofollow\",children:\"Execution\"})}),`\n`]}),`\n`,(0,t.jsx)(e.h3,{id:\"techniques\",children:\"Techniques\"}),`\n`,(0,t.jsx)(e.p,{children:\"Techniques represent how an adversary achieves a tactical goal by performing an action.\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1539/\",rel:\"nofollow\",children:\"Steal Web Session Cookie\"})}),`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1055/\",rel:\"nofollow\",children:\"Process Injection\"})}),`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1555/\",rel:\"nofollow\",children:\"Credentials from Password Stores\"})}),`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1082/\",rel:\"nofollow\",children:\"System Information Discovery\"})}),`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1057/\",rel:\"nofollow\",children:\"Process Discovery\"})}),`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1559/001/\",rel:\"nofollow\",children:\"Inter-Process Communication: Component Object Model\"})}),`\n`]}),`\n`,(0,t.jsx)(e.h2,{id:\"yara\",children:\"YARA\"}),`\n`,(0,t.jsx)(e.p,{children:\"Elastic Security has created YARA rules to identify this activity.\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Windows_Trojan_Stealc.yar\",rel:\"nofollow\",children:\"Windows.Trojan.Stealc\"})}),`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Windows_Infostealer_PhemedroneStealer.yar\",rel:\"nofollow\",children:\"Windows.Infostealer.PhemedroneStealer\"})}),`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Windows_Trojan_MetaStealer.yar\",rel:\"nofollow\",children:\"Windows.Trojan.MetaStealer\"})}),`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Windows_Trojan_Xeno.yar\",rel:\"nofollow\",children:\"Windows.Trojan.Xeno\"})}),`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Windows_Trojan_Lumma.yar\",rel:\"nofollow\",children:\"Windows.Trojan.Lumma\"})}),`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Windows_Infostealer_Generic.yar\",rel:\"nofollow\",children:\"Windows.Infostealer.Generic\"})}),`\n`]}),`\n`,(0,t.jsx)(e.h2,{id:\"observations\",children:\"Observations\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"All observables are also available for \",(0,t.jsx)(e.a,{href:\"https://github.com/elastic/labs-releases/tree/main/indicators/app-bound_bypass\",rel:\"nofollow\",children:\"download\"}),\" in both ECS and STIX format.\"]}),`\n`,(0,t.jsx)(e.p,{children:\"The following observables were discussed in this research.\"}),`\n`,(0,t.jsx)(e.div,{className:\"table-container\",children:(0,t.jsxs)(e.table,{children:[(0,t.jsx)(e.thead,{children:(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.th,{children:\"Observable\"}),(0,t.jsx)(e.th,{children:\"Type\"}),(0,t.jsx)(e.th,{children:\"Name\"}),(0,t.jsx)(e.th,{children:\"Reference\"})]})}),(0,t.jsxs)(e.tbody,{children:[(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"27e4a3627d7df2b22189dd4bebc559ae1986d49a8f4e35980b428fadb66cf23d\"}),(0,t.jsx)(e.td,{children:\"SHA-256\"}),(0,t.jsx)(e.td,{children:\"num.exe\"}),(0,t.jsx)(e.td,{children:\"STEALC\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"08d9d4e6489dc5b05a6caa434fc36ad6c1bd8c8eb08888f61cbed094eac6cb37\"}),(0,t.jsx)(e.td,{children:\"SHA-256\"}),(0,t.jsx)(e.td,{children:\"HardCoreCrack.exe\"}),(0,t.jsx)(e.td,{children:\"PHEMEDRONE\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"43cb70d31daa43d24e5b063f4309281753176698ad2aba9c557d80cf710f9b1d\"}),(0,t.jsx)(e.td,{children:\"SHA-256\"}),(0,t.jsx)(e.td,{children:\"Ranginess.exe\"}),(0,t.jsx)(e.td,{children:\"METASTEALER\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"84033def9ffa70c7b77ce9a7f6008600c0145c28fe5ea0e56dfafd8474fb8176\"}),(0,t.jsx)(e.td,{children:\"SHA-256\"}),(0,t.jsx)(e.td,{}),(0,t.jsx)(e.td,{children:\"LUMMA\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:\"b74733d68e95220ab0630a68ddf973b0c959fd421628e639c1b91e465ba9299b\"}),(0,t.jsx)(e.td,{children:\"SHA-256\"}),(0,t.jsx)(e.td,{children:\"XenoStealer.exe\"}),(0,t.jsx)(e.td,{children:\"XENOSTEALER\"})]})]})]})}),`\n`,(0,t.jsx)(e.h2,{id:\"references\",children:\"References\"}),`\n`,(0,t.jsx)(e.p,{children:\"The following were referenced throughout the above research:\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://developer.chrome.com/release-notes/127\",rel:\"nofollow\",children:\"https://developer.chrome.com/release-notes/127\"})}),`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://security.googleblog.com/2024/07/improving-security-of-chrome-cookies-on.html\",rel:\"nofollow\",children:\"https://security.googleblog.com/2024/07/improving-security-of-chrome-cookies-on.html\"})}),`\n`]})]})}function k(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(h,n)})):h(n)}var C=k;return y(E);})();\n;return Component;"},"_id":"articles/katz-and-mouse-game.mdx","_raw":{"sourceFilePath":"articles/katz-and-mouse-game.mdx","sourceFileName":"katz-and-mouse-game.mdx","sourceFileDir":"articles","contentType":"mdx","flattenedPath":"articles/katz-and-mouse-game"},"type":"Article","imageUrl":"/assets/images/katz-and-mouse-game/Security Labs Images 2.jpg","readingTime":"20 min read","series":"","url":"/katz-and-mouse-game","headings":[{"level":2,"title":"Google Chrome Cookie Security","href":"#google-chrome-cookie-security"},{"level":2,"title":"STEALC/VIDAR","href":"#stealcvidar"},{"level":2,"title":"METASTEALER","href":"#metastealer"},{"level":2,"title":"PHEMEDRONE","href":"#phemedrone"},{"level":2,"title":"XENOSTEALER","href":"#xenostealer"},{"level":2,"title":"LUMMA","href":"#lumma"},{"level":2,"title":"Cookies access by an unusual process","href":"#cookies-access-by-an-unusual-process"},{"level":2,"title":"Chrome Browser Spawned from an Unusual Parent","href":"#chrome-browser-spawned-from-an-unusual-parent"},{"level":2,"title":"Untrusted Binaries from Chrome Application folder","href":"#untrusted-binaries-from-chrome-application-folder"},{"level":3,"title":"Unsigned DLLs loaded from google chrome application folder","href":"#unsigned-dlls-loaded-from-google-chrome-application-folder"},{"level":3,"title":"Unsigned executable launched from google chrome application folder","href":"#unsigned-executable-launched-from-google-chrome-application-folder"},{"level":2,"title":"Stealer Bypasses and MITRE ATT\u0026CK","href":"#stealer-bypasses-and-mitre-attck"},{"level":3,"title":"Tactics","href":"#tactics"},{"level":3,"title":"Techniques","href":"#techniques"},{"level":2,"title":"YARA","href":"#yara"},{"level":2,"title":"Observations","href":"#observations"},{"level":2,"title":"References","href":"#references"}],"author":[{"title":"Jia Yu Chan","slug":"jia-yu-chan","description":"Elastic Security Labs Team Research Engineer, Malware","image":"jiayuchan.jpg","body":{"raw":"","code":"var Component=(()=\u003e{var g=Object.create;var i=Object.defineProperty;var j=Object.getOwnPropertyDescriptor;var x=Object.getOwnPropertyNames;var l=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var h=(t,e)=\u003e()=\u003e(e||t((e={exports:{}}).exports,e),e.exports),p=(t,e)=\u003e{for(var n in e)i(t,n,{get:e[n],enumerable:!0})},o=(t,e,n,c)=\u003e{if(e\u0026\u0026typeof e==\"object\"||typeof e==\"function\")for(let r of x(e))!f.call(t,r)\u0026\u0026r!==n\u0026\u0026i(t,r,{get:()=\u003ee[r],enumerable:!(c=j(e,r))||c.enumerable});return t};var _=(t,e,n)=\u003e(n=t!=null?g(l(t)):{},o(e||!t||!t.__esModule?i(n,\"default\",{value:t,enumerable:!0}):n,t)),d=t=\u003eo(i({},\"__esModule\",{value:!0}),t);var u=h((D,s)=\u003e{s.exports=_jsx_runtime});var b={};p(b,{default:()=\u003eC,frontmatter:()=\u003ey});var a=_(u()),y={title:\"Jia Yu Chan\",description:\"Elastic Security Labs Team Research Engineer, Malware\",slug:\"jia-yu-chan\",image:\"jiayuchan.jpg\"};function m(t){return(0,a.jsx)(a.Fragment,{})}function M(t={}){let{wrapper:e}=t.components||{};return e?(0,a.jsx)(e,Object.assign({},t,{children:(0,a.jsx)(m,t)})):m(t)}var C=M;return d(b);})();\n;return Component;"},"_id":"authors/jia-yu-chan.mdx","_raw":{"sourceFilePath":"authors/jia-yu-chan.mdx","sourceFileName":"jia-yu-chan.mdx","sourceFileDir":"authors","contentType":"mdx","flattenedPath":"authors/jia-yu-chan"},"type":"Author","imageUrl":"/assets/images/authors/jiayuchan.jpg","url":"/authors/jia-yu-chan"},{"title":"Salim Bitam","slug":"salim-bitam","description":"Elastic Security Labs Team Research Engineer II, Malware","body":{"raw":"","code":"var Component=(()=\u003e{var l=Object.create;var i=Object.defineProperty;var x=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,_=Object.prototype.hasOwnProperty;var d=(t,e)=\u003e()=\u003e(e||t((e={exports:{}}).exports,e),e.exports),j=(t,e)=\u003e{for(var n in e)i(t,n,{get:e[n],enumerable:!0})},o=(t,e,n,s)=\u003e{if(e\u0026\u0026typeof e==\"object\"||typeof e==\"function\")for(let a of f(e))!_.call(t,a)\u0026\u0026a!==n\u0026\u0026i(t,a,{get:()=\u003ee[a],enumerable:!(s=x(e,a))||s.enumerable});return t};var p=(t,e,n)=\u003e(n=t!=null?l(g(t)):{},o(e||!t||!t.__esModule?i(n,\"default\",{value:t,enumerable:!0}):n,t)),M=t=\u003eo(i({},\"__esModule\",{value:!0}),t);var m=d((D,c)=\u003e{c.exports=_jsx_runtime});var y={};j(y,{default:()=\u003ew,frontmatter:()=\u003eb});var r=p(m()),b={title:\"Salim Bitam\",description:\"Elastic Security Labs Team Research Engineer II, Malware\",slug:\"salim-bitam\"};function u(t){return(0,r.jsx)(r.Fragment,{})}function h(t={}){let{wrapper:e}=t.components||{};return e?(0,r.jsx)(e,Object.assign({},t,{children:(0,r.jsx)(u,t)})):u(t)}var w=h;return M(y);})();\n;return Component;"},"_id":"authors/salim-bitam.mdx","_raw":{"sourceFilePath":"authors/salim-bitam.mdx","sourceFileName":"salim-bitam.mdx","sourceFileDir":"authors","contentType":"mdx","flattenedPath":"authors/salim-bitam"},"type":"Author","imageUrl":"","url":"/authors/salim-bitam"},{"title":"Daniel Stepanic","slug":"daniel-stepanic","description":"Elastic Security Labs Team Principal Security Researcher, Malware","body":{"raw":"","code":"var Component=(()=\u003e{var m=Object.create;var i=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var x=Object.getOwnPropertyNames;var d=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var _=(t,e)=\u003e()=\u003e(e||t((e={exports:{}}).exports,e),e.exports),g=(t,e)=\u003e{for(var n in e)i(t,n,{get:e[n],enumerable:!0})},s=(t,e,n,c)=\u003e{if(e\u0026\u0026typeof e==\"object\"||typeof e==\"function\")for(let a of x(e))!f.call(t,a)\u0026\u0026a!==n\u0026\u0026i(t,a,{get:()=\u003ee[a],enumerable:!(c=p(e,a))||c.enumerable});return t};var j=(t,e,n)=\u003e(n=t!=null?m(d(t)):{},s(e||!t||!t.__esModule?i(n,\"default\",{value:t,enumerable:!0}):n,t)),M=t=\u003es(i({},\"__esModule\",{value:!0}),t);var u=_((w,o)=\u003e{o.exports=_jsx_runtime});var b={};g(b,{default:()=\u003eS,frontmatter:()=\u003ey});var r=j(u()),y={title:\"Daniel Stepanic\",description:\"Elastic Security Labs Team Principal Security Researcher, Malware\",slug:\"daniel-stepanic\"};function l(t){return(0,r.jsx)(r.Fragment,{})}function D(t={}){let{wrapper:e}=t.components||{};return e?(0,r.jsx)(e,Object.assign({},t,{children:(0,r.jsx)(l,t)})):l(t)}var S=D;return M(b);})();\n;return Component;"},"_id":"authors/daniel-stepanic.mdx","_raw":{"sourceFilePath":"authors/daniel-stepanic.mdx","sourceFileName":"daniel-stepanic.mdx","sourceFileDir":"authors","contentType":"mdx","flattenedPath":"authors/daniel-stepanic"},"type":"Author","imageUrl":"","url":"/authors/daniel-stepanic"},{"title":"Samir Bousseaden","slug":"samir-bousseaden","body":{"raw":"","code":"var Component=(()=\u003e{var x=Object.create;var s=Object.defineProperty;var d=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var _=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var j=(t,e)=\u003e()=\u003e(e||t((e={exports:{}}).exports,e),e.exports),l=(t,e)=\u003e{for(var n in e)s(t,n,{get:e[n],enumerable:!0})},u=(t,e,n,a)=\u003e{if(e\u0026\u0026typeof e==\"object\"||typeof e==\"function\")for(let o of f(e))!g.call(t,o)\u0026\u0026o!==n\u0026\u0026s(t,o,{get:()=\u003ee[o],enumerable:!(a=d(e,o))||a.enumerable});return t};var p=(t,e,n)=\u003e(n=t!=null?x(_(t)):{},u(e||!t||!t.__esModule?s(n,\"default\",{value:t,enumerable:!0}):n,t)),M=t=\u003eu(s({},\"__esModule\",{value:!0}),t);var m=j((h,i)=\u003e{i.exports=_jsx_runtime});var F={};l(F,{default:()=\u003eD,frontmatter:()=\u003eb});var r=p(m()),b={title:\"Samir Bousseaden\",slug:\"samir-bousseaden\"};function c(t){return(0,r.jsx)(r.Fragment,{})}function C(t={}){let{wrapper:e}=t.components||{};return e?(0,r.jsx)(e,Object.assign({},t,{children:(0,r.jsx)(c,t)})):c(t)}var D=C;return M(F);})();\n;return Component;"},"_id":"authors/samir-bousseaden.mdx","_raw":{"sourceFilePath":"authors/samir-bousseaden.mdx","sourceFileName":"samir-bousseaden.mdx","sourceFileDir":"authors","contentType":"mdx","flattenedPath":"authors/samir-bousseaden"},"type":"Author","imageUrl":"","url":"/authors/samir-bousseaden"},{"title":"Cyril François","slug":"cyril-francois","description":"Elastic Security Labs Team Senior Research Engineer, Malware","body":{"raw":"","code":"var Component=(()=\u003e{var m=Object.create;var i=Object.defineProperty;var x=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,_=Object.prototype.hasOwnProperty;var d=(t,e)=\u003e()=\u003e(e||t((e={exports:{}}).exports,e),e.exports),j=(t,e)=\u003e{for(var n in e)i(t,n,{get:e[n],enumerable:!0})},s=(t,e,n,o)=\u003e{if(e\u0026\u0026typeof e==\"object\"||typeof e==\"function\")for(let a of f(e))!_.call(t,a)\u0026\u0026a!==n\u0026\u0026i(t,a,{get:()=\u003ee[a],enumerable:!(o=x(e,a))||o.enumerable});return t};var p=(t,e,n)=\u003e(n=t!=null?m(g(t)):{},s(e||!t||!t.__esModule?i(n,\"default\",{value:t,enumerable:!0}):n,t)),y=t=\u003es(i({},\"__esModule\",{value:!0}),t);var u=d((w,c)=\u003e{c.exports=_jsx_runtime});var b={};j(b,{default:()=\u003eF,frontmatter:()=\u003eM});var r=p(u()),M={title:\"Cyril Fran\\xE7ois\",description:\"Elastic Security Labs Team Senior Research Engineer, Malware\",slug:\"cyril-francois\"};function l(t){return(0,r.jsx)(r.Fragment,{})}function C(t={}){let{wrapper:e}=t.components||{};return e?(0,r.jsx)(e,Object.assign({},t,{children:(0,r.jsx)(l,t)})):l(t)}var F=C;return y(b);})();\n;return Component;"},"_id":"authors/cyril-francois.mdx","_raw":{"sourceFilePath":"authors/cyril-francois.mdx","sourceFileName":"cyril-francois.mdx","sourceFileDir":"authors","contentType":"mdx","flattenedPath":"authors/cyril-francois"},"type":"Author","imageUrl":"","url":"/authors/cyril-francois"},{"title":"Seth Goodwin","slug":"seth-goodwin","description":"Elastic Security Labs Team Senior Research Engineer, Intelligence","body":{"raw":"","code":"var Component=(()=\u003e{var g=Object.create;var i=Object.defineProperty;var l=Object.getOwnPropertyDescriptor;var x=Object.getOwnPropertyNames;var d=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var _=(t,e)=\u003e()=\u003e(e||t((e={exports:{}}).exports,e),e.exports),h=(t,e)=\u003e{for(var n in e)i(t,n,{get:e[n],enumerable:!0})},a=(t,e,n,s)=\u003e{if(e\u0026\u0026typeof e==\"object\"||typeof e==\"function\")for(let o of x(e))!f.call(t,o)\u0026\u0026o!==n\u0026\u0026i(t,o,{get:()=\u003ee[o],enumerable:!(s=l(e,o))||s.enumerable});return t};var j=(t,e,n)=\u003e(n=t!=null?g(d(t)):{},a(e||!t||!t.__esModule?i(n,\"default\",{value:t,enumerable:!0}):n,t)),p=t=\u003ea(i({},\"__esModule\",{value:!0}),t);var u=_((C,c)=\u003e{c.exports=_jsx_runtime});var b={};h(b,{default:()=\u003eS,frontmatter:()=\u003ew});var r=j(u()),w={title:\"Seth Goodwin\",description:\"Elastic Security Labs Team Senior Research Engineer, Intelligence\",slug:\"seth-goodwin\"};function m(t){return(0,r.jsx)(r.Fragment,{})}function M(t={}){let{wrapper:e}=t.components||{};return e?(0,r.jsx)(e,Object.assign({},t,{children:(0,r.jsx)(m,t)})):m(t)}var S=M;return p(b);})();\n;return Component;"},"_id":"authors/seth-goodwin.mdx","_raw":{"sourceFilePath":"authors/seth-goodwin.mdx","sourceFileName":"seth-goodwin.mdx","sourceFileDir":"authors","contentType":"mdx","flattenedPath":"authors/seth-goodwin"},"type":"Author","imageUrl":"","url":"/authors/seth-goodwin"}],"category":[{"title":"Malware analysis","slug":"malware-analysis","body":{"raw":"","code":"var Component=(()=\u003e{var u=Object.create;var s=Object.defineProperty;var x=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var _=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var j=(t,n)=\u003e()=\u003e(n||t((n={exports:{}}).exports,n),n.exports),M=(t,n)=\u003e{for(var e in n)s(t,e,{get:n[e],enumerable:!0})},i=(t,n,e,o)=\u003e{if(n\u0026\u0026typeof n==\"object\"||typeof n==\"function\")for(let r of f(n))!g.call(t,r)\u0026\u0026r!==e\u0026\u0026s(t,r,{get:()=\u003en[r],enumerable:!(o=x(n,r))||o.enumerable});return t};var d=(t,n,e)=\u003e(e=t!=null?u(_(t)):{},i(n||!t||!t.__esModule?s(e,\"default\",{value:t,enumerable:!0}):e,t)),p=t=\u003ei(s({},\"__esModule\",{value:!0}),t);var l=j((X,c)=\u003e{c.exports=_jsx_runtime});var D={};M(D,{default:()=\u003eC,frontmatter:()=\u003ew});var a=d(l()),w={title:\"Malware analysis\",slug:\"malware-analysis\"};function m(t){return(0,a.jsx)(a.Fragment,{})}function y(t={}){let{wrapper:n}=t.components||{};return n?(0,a.jsx)(n,Object.assign({},t,{children:(0,a.jsx)(m,t)})):m(t)}var C=y;return p(D);})();\n;return Component;"},"_id":"categories/malware-analysis.mdx","_raw":{"sourceFilePath":"categories/malware-analysis.mdx","sourceFileName":"malware-analysis.mdx","sourceFileDir":"categories","contentType":"mdx","flattenedPath":"categories/malware-analysis"},"type":"Category","url":"/categories/malware-analysis"}]},"seriesArticles":null},"__N_SSG":true},"page":"/[slug]","query":{"slug":"katz-and-mouse-game"},"buildId":"m_OEejq3Aq_N04b0RxUFZ","assetPrefix":"/security-labs","isFallback":false,"gsp":true,"scriptLoader":[]}</script></body></html>