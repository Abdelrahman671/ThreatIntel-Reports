<!DOCTYPE html>
<html lang="pt">

  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->
    <title>Zeus Panda Webinjects: Don't trust your eyes | cyber.wtf</title>

    <!-- Bootstrap -->
    <link rel="stylesheet" href="/css/bootstrap-3.3.6/css/bootstrap.min.css">
    <link rel="stylesheet" href="/css/main.css">
    <link rel="stylesheet" href="/css/bootstrap-icons-1.5.0/bootstrap-icons.min.css">

    <link rel="shortcut icon" href="/images/favicon.png">

    <link rel="alternate" type="application/atom+xml" title="Atom Feed" href="/feed.xml"> 

</head>

    <body>
      <div class="container">

        <header class="row">
  <div class="col-lg-8 col-lg-offset-2">
    <a class="logo-link" href="/">
      <img src="/images/cyber-chrome_slim.png">
    </a>
  </div>
</header>

<div class="row">
  <div class="col-lg-8 col-lg-offset-2">
    <div class="menu">
      <ul>
          <li><a href="/">Home</a></li>
          |
          <li><a href="/category" title="Category List">Category List</a>
          <!--<li><a href="/casts">*casts</a></li>-->
          |
          <li><a href="/wtf">WTF?</a></li>
          |
          <li class="rss_feed"><a href="/feed.xml" title="Atom Feed Posts"><i class="bi bi-rss"></i></a></li>
      </ul>
    </div>
  </div>
</div>



        <div class="row">
          <div class="col-lg-8 col-lg-offset-2">
            <main>
            <div class="post">

  <header class="post-header">
    <h1>Zeus Panda Webinjects: Don't trust your eyes</h1>
  </header>

  <article class="post-content">
  <div class="post">

  <header class="post-header">
    <div class="meta">
        Mar 13, 2017
         â¢
            <div class="author-container">
                <span class="author-name">Manuel K.-B.</span><span>, </span>
                
                <div class="author-info deactive">
                  <img src="/images/authors/NA.png" alt="Manuel K.-B.'s Bild">
                  <div class="author-text">
                    <span><h4>Deactivated</h4>
                    <p><del>Manuel K.-B.</del></p>
                    <p><del>Manuel KÃ¶rber-Bilgard</del></p>
                    <p>Deactivated since: 2023 </p>
                  </div>
                </div>
                
            </div>
          
            <div class="author-container">
                <span class="author-name">Karsten Tellmann</span>
                
                <div class="author-info deactive">
                  <img src="/images/authors/NA.png" alt="Karsten Tellmann's Bild">
                  <div class="author-text">
                    <span><h4>Deactivated</h4>
                    <p><del>Karsten Tellmann</del></p>
                    <p><del></del></p>
                    <p>Deactivated since: 2023 </p>
                  </div>
                </div>
                
            </div>
          
        
        
        â¢ <span><a href="/category/#banking" class="reserved">banking</a>,</span><span><a href="/category/#javascript" class="reserved">javascript</a>,</span><span><a href="/category/#trojan" class="reserved">trojan</a>,</span><span><a href="/category/#webinject" class="reserved">webinject</a>,</span><span><a href="/category/#zeus panda" class="reserved">zeus panda</a></span>
    </div>
  </header>

  <article class="post-content">
  <p>In our last blog article <a href="http://cyber.wtf/2017/02/03/zeus-panda-webinjects-a-case-study/">Zeus Panda Webinjects: a case study</a>, we described the functionality of current Zeus Panda webinject stages and gave some insight into the corresponding administration panel. As we only scratched the surface of the target specific second webinject attack stage (in the following we reference this as 2nd attack stage), we would like to share more details about this part.</p>

<p>Basically, the 2nd attack stage already includes the complete code needed for the attack. The different code branches are triggered by setting status variables, especially theÂ <em>branch</em> variable already introduced in our previous article on that topic. Last time we also introduced the <em>send()</em> function, which is used to exfiltrate data. <em>send()</em> isnât entirely unidirectional: the HTTP response of this request includes further code that is evaluated as JavaScript. Thereby the backend is able to set the different status variables to trigger the existing code branches of the 2nd attack stage. Letâs dive into the details of this communication protocol:</p>

<h2 id="communication-protocol-and-status-variables">Communication protocol and status variables</h2>

<figure class="figure-posts" style="width: 70%; display:block; margin: auto; margin-bottom: 1em;">
  <div class="image-container" id="/images/posts/2017/03/sequence_zeus_panda.png"> 
    <a href="#img/images/posts/2017/03/sequence_zeus_panda.png">
      <img src="/images/posts/2017/03/sequence_zeus_panda.png" alt="Figure illustrating ZeusPanda's communication protocol." class="img-responsive" />
      </a>
      <a href="#/images/posts/2017/03/sequence_zeus_panda.png" class="lightbox" id="img/images/posts/2017/03/sequence_zeus_panda.png">
        <span style="background-image: url(/images/posts/2017/03/sequence_zeus_panda.png)"></span>
      </a>
      <figcaption class="figcaption-posts">Figure 1: Communication protocol</figcaption>
    </div>
  </figure>

<p>Figure 1 illustrates the communication protocol between the 2nd attack stage and the backend server. We see the different steps of the communication, the branchesÂ triggered, and the website on which the step occurs. Before going into details, the concept behind the communication is the following:</p>

<ol>
  <li>The current attack state is sent from the client to the backend server.</li>
  <li>The backend checks for the current attack state and sets the right response parameters to initiate the next attack stage.</li>
  <li>The backend response contains variables to notify the 2nd attack stage (client), which attack branch should be executed next.</li>
  <li>The 2nd attack stage evaluates the response variables and triggers the next branch.</li>
  <li>This procedureÂ is repeated until the final state of the protocol is reached.</li>
</ol>

<h2 id="time-to-branch">Time to branch</h2>

<p>Letâs take a detailed look into the different branches now.</p>

<figure>

  <table>
    <thead>
      <tr>
        <th style="text-align: center">Step</th>
        <th style="text-align: left">Action</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td style="text-align: center">1</td>
        <td style="text-align: left">The <em>SL</em> branch is triggered at the beginning of the attack, when an infected victim accesses the login page of the targeted online banking, inserts the login credentials and clicks on the submit button. (NOTE: The low level Trojan functions need to trigger an the initial webinject (generic loader) on that website and therefore the URL of the online banking website has to be listed in the trojan config file). The submitted login credentials are intercepted, exfiltrated to the backend (see <a href="http://cyber.wtf/2017/02/03/zeus-panda-webinjects-a-case-study/">previous blog post</a>), then the 2nd stage code calls the original login function of the banking or payment website. The backend now registers the new victim, identified by the botid. It returns an empty response to the webinject.</td>
      </tr>
      <tr>
        <td style="text-align: center">2</td>
        <td style="text-align: left">At this point, the victim has successfully logged in and has been redirected to the account balance overview page. This triggers the 2nd branch: <em>CP</em>. The <em>CP</em> branch is called multiple times during the attack and transmits general status information of the victim to the attacker. The response of the backend contains status flags to trigger the next step of the attack. At this point here, the backend signals to initiate the attack.</td>
      </tr>
      <tr>
        <td style="text-align: center">3</td>
        <td style="text-align: left">The attack signal triggers the 3rd step shown in Figure 1: The <em>TL</em> branch. This branch is used to collect details from all available accounts by using the grabber module. Furthermore, a flag is set to indicate a page reload after the response of the send function has been received. The collected data is then exfiltrated again.Â The botid is used to correlate transmitted data to existing victim entries in the backend and therefore works as unique identifier for the victim. The server response is empty, but the previously set reload flag now triggers the <em>CP</em> branch again.</td>
      </tr>
      <tr>
        <td style="text-align: center">4</td>
        <td style="text-align: left">The <em>CP</em> branch now sends the some information to the backend asÂ  described in Step 2. As the backend has stored a different state for the botid already, the response is different now. It signals the 2nd attack stage that the grabber module has finished and the ats module should start now. This module is used to manipulate account details like the account balance or transaction details. Also some status flags are set to trigger the next branch.</td>
      </tr>
      <tr>
        <td style="text-align: center">5</td>
        <td style="text-align: left">The <em>GD</em> branch: This branch is used to collect and exfiltrate account details of the victim. As already described in step 3, the reload flag is used to trigger the <em>CP</em> branch again.</td>
      </tr>
      <tr>
        <td style="text-align: center">6</td>
        <td style="text-align: left">The <em>CP</em> branch again submits status information, and the backend now triggers the next step of the attack. Besides some status flags, details about the target account and some fake data is provided. The data is used by the <em>CP</em> branch to display a fake overlay with a message and/or images, to trick the victim into starting a transaction. To that end, the fake overlay is used like in a normal phishing attack. We could observe different kinds of messages, which could be categorized into different modi operandi. (see below). If the victim fell for the scam, the previously provided data is used to pre-fill the transaction form. Naturally, this data contains a target account for the transaction. This account will be controlled by the attacker somehow, i.e., it most likely belongs to a money-mule. Additionally, the response from the backend contains fake information to be displayed. Depending on the modus operandi, this information is used to display different transaction details to the victim, then the ones used for the transaction in background.</td>
      </tr>
      <tr>
        <td style="text-align: center">7</td>
        <td style="text-align: left">Now the victim is redirected to the overview page for a successful transaction. In combination with the current flag state, this page visit triggers the <em>TL</em> branch of the 2nd stage code. The <em>TL</em> branch is used to collect details from the transaction overview page and exfiltrates them to the backend. This indicates a successful transaction to the attacker. The backend response is empty. The webinject transits into the next state, without the need for further communication with the backend.</td>
      </tr>
      <tr>
        <td style="text-align: center">8</td>
        <td style="text-align: left">The last triggered branch is called <em>CG</em>. It creates a copy of the complete DOM of the successful transaction overview page and exfiltrates it to the backend. There is no indication that this data is displayed in the admin panel, thus we assume it is transmitted for debug purposes only.</td>
      </tr>
    </tbody>
  </table>

  <figcaption>Table 1: Branches</figcaption>
</figure>

<h2 id="modi-operandi">Modi Operandi</h2>

<p>In the following we detail two different exemplary modi operandi, which we could observe during our analysis. The real visible appearance is different, as the webinject makes heavy use of the style-sheets provided by the target website. This is a very straight-forward way to properly brand fraudulent content to match the corporate design of target banks or payment providers. We focus on the content shipped to banking customers.</p>

<h3 id="charity-fraud-sos-kinder">Charity Fraud: SOS-Kinder</h3>

<figure class="figure-posts" style="width: 65%; display:block; margin: auto; margin-bottom: 1em;">
  <div class="image-container" id="/images/posts/2017/03/sos_kinder.png"> 
    <a href="#img/images/posts/2017/03/sos_kinder.png">
      <img src="/images/posts/2017/03/sos_kinder.png" alt="" class="img-responsive" />
      </a>
      <a href="#/images/posts/2017/03/sos_kinder.png" class="lightbox" id="img/images/posts/2017/03/sos_kinder.png">
        <span style="background-image: url(/images/posts/2017/03/sos_kinder.png)"></span>
      </a>
      <figcaption class="figcaption-posts"></figcaption>
    </div>
  </figure>

<p>The victim is asked to donate 1â¬ to an non-profit organization, in this case for SOS children. This mimics the well know internationally active âSOS-Kinderdorfâ organization. The German text is well written and does not contain the obvious indications for phishing that we all love and know from the occasional phishing mail, like contorted grammar and a more than flowery vocabulary. No Google Translate in sight, here. To leverage this scam vector, the webinject makes use of the data provided by the backed in Step 6 as detailed above. Using an overlay, the victim is made believe he/she is transferring 1â¬, but under the hood the amount is change to a much higher value.</p>

<p>The attackers follow a very classic social engineering approach for our part of the world and appeal to the victims helpfulness: Who doesnât want to help children in need by spending 1â¬? We refer to this kind of attack as charity fraud.</p>

<h3 id="refund-fraud-finanzpolizei">Refund Fraud: Finanzpolizei</h3>

<figure class="figure-posts" style="width: 80%; display:block; margin: auto; margin-bottom: 1em;">
  <div class="image-container" id="/images/posts/2017/03/finanzpolizei_edited.png"> 
    <a href="#img/images/posts/2017/03/finanzpolizei_edited.png">
      <img src="/images/posts/2017/03/finanzpolizei_edited.png" alt="" class="img-responsive" />
      </a>
      <a href="#/images/posts/2017/03/finanzpolizei_edited.png" class="lightbox" id="img/images/posts/2017/03/finanzpolizei_edited.png">
        <span style="background-image: url(/images/posts/2017/03/finanzpolizei_edited.png)"></span>
      </a>
      <figcaption class="figcaption-posts"></figcaption>
    </div>
  </figure>

<p>The overlay presents a message to the victim, indicating a transaction has been made to their account. As the victim sees a manipulated version of his account balance, he really believes the transaction has had happen. Furthermore the text indicates a preliminary investigation by the âFinanzpolizeiâ against the initiator of the transaction. If the victim is not transferring the money back, the text threatens with prosecution by law enforcement for participating in a money laundering scheme.</p>

<p>Finally, all the Google Translate and contextual cluelessness we came to love in the scams out there! Regrettably for the attacker, not all German-speaking countries are actually Germany. (We tried that once, partially, and it was a horrible idea.) An institution called âFinanzpolizeiâ does indeed exist â but not in Germany. The valid target audience for this scam is thus supposedly to be found in Austria, however, the scam is also actively used in Germany. The German text includes some mistakes and is not as well written as the first modus operandi we have shown above.</p>

<p>In the case at hand, the attackers try to make the victim follow through with a classic refund scam, by threatening legal consequences. As the story works without the need to manipulate the transferred amount under the hood, the fake data needed in the first described modus operandi is not used in this kind of attack. Nevertheless the attack is kind enough to prefill the transaction form with the correct details to ease the transaction for the victim.</p>

<h2 id="return-of-the-victim">Return of the victim</h2>

<p>Now letâs assume the victim has been tricked into initiating a transaction by themselves to send their money to the attacker. What happens, if the victim takes a look into his online banking account some time later? As expected, the 2nd attack stage is also prepared for that case: The user is presented the âtemporarily unavailableâ notification (see Figures 1 and 2 from our <a href="http://cyber.wtf/2017/02/03/zeus-panda-webinjects-a-case-study/">previous post</a>) and the login function of the target website is disabled. As long as the status variables are set to the finale state of the described communication protocol, the victim is thus unable to access their account again as long as the backend server is reachable. Even when disabling this blocking functionality, account information like transaction details and total balance are still manipulated. As this manipulations use the originally provided style cheets (CSS) from the target institute, a victim has no way to visibility distinguish between a fake entry and an original one.</p>

<h2 id="conclusion">Conclusion</h2>

<p>Nowadays almost all financial institutes make use of two-factor authentication to protect their users from fraud. The modi operandi used by current banking trojan attacks successfully circumvent this by using social engineering techniques. The victim is tricked into initiating the transaction willingly and happily provides all information needed to confirm the transaction. This is achieved by visible modifications of the website that are indistinguishable from the original website content. The success rate of these attacks is still quite high.</p>

<p>By using a multi-layered attack, itâs also cumbersome for analysts to get an complete insight into the technical details. As soon as the backend server is not available anymore, only the 1st stage of a webinject is accessible on an infected machine. Without the backend server, most of the attack code is not available and therefore some pieces of the puzzle are missing.</p>

<p>These kind of multi-layered attacks have become more and more complex and sophisticated. However, beyond the visual appearance, the code of the original website is modified heavily to make this attacks work and these modifications necessarily leave a footprint. In our fraud detection solutions, we provide our customers with instant visibility into these modification symptoms so they can fare better at protecting their customersâ assets.</p>

  </article>

  

</div>

  </article>

</div>

            </main>
          </div>
        </div>

        <div class="row">
  <div class="col-lg-8 col-lg-offset-2">
    <footer>
      <a href="https://www.gdata.de/business">G DATA Advanced Analytics</a>
      |
      <a href="/imprint">Imprint</a>
      |
      <a href="/privacy-policy">Privacy Policy</a>
    </footer>
  </div>
</div>


      </div>
    </body>
</html>
