<html xmlns="http://www.w3.org/1999/xhtml" xmlns:og="http://ogp.me/ns#">
  <head>
    <meta charset="UTF-8">
    
    <title>Objective-See's Blog</title>
    
    <link rel="shortcut icon" href="../images/logoApple.ico">
    
    <link href="../css/style.css" rel="stylesheet" />
    <script src="../js/analytics.js"></script>
    <script src="../js/sweetalert.min.js"></script>
    <script src="../js/donationPopup.js"></script>

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    
    <script type="text/javascript" src="//s3.amazonaws.com/downloads.mailchimp.com/js/signup-forms/popup/embed.js" data-dojo-config="usePlainJson: true, isDebug: false"></script>
    <script type="text/javascript">require(["mojo/signup-forms/Loader"], function(L) { L.start({"baseUrl":"mc.us13.list-manage.com","uuid":"ecee7516f567e712084cdb1d0","lid":"5fae6de946"}) })</script>
    
    
<meta name="twitter:card" content="summary_large_image" />
<meta name="twitter:site" content="@objective_see" />
<meta name="twitter:image" content=https://objective-see.com/images/blog/blog_0x62/kk.png />
<meta name="twitter:title" content=Arm&#39;d&#32;&amp;&#32;Dangerous />
<meta name="twitter:description" content=malicious&#32;code,&#32;now&#32;native&#32;on&#32;apple&#32;silicon />
    
<meta property="og:type" content="article" />
<meta property="og:title" content=Arm&#39;d&#32;&amp;&#32;Dangerous />
<meta property="og:image" content=https://objective-see.com/images/blog/blog_0x62/kk.png />

    </head>
    <body>

    <link rel="stylesheet" type="text/css" href="/css/menu.css">

<meta http-equiv="cache-control" content="max-age=0" />
<meta http-equiv="cache-control" content="no-cache" />
<meta http-equiv="expires" content="0" />
<meta http-equiv="expires" content="Tue, 01 Jan 1980 1:00:00 GMT" />
<meta http-equiv="pragma" content="no-cache" />

<nav role="main" style="padding-bottom:30px;">
<ul>
    
    <li>
    <div class="logo">
        <a href="/index.html">
            <figure class="logo">
                <img src="/images/logoApple.png" style="height:75px; width:75px;" />
                <br>
                <figcaption class="logo">
                    <span style="color: #95c02d;">Objective</span><span style="color: #798992;">-See</span>
                 
                    <div style="color: #798992; font-size: 18px; font-weight: 300; padding-left: 3px; margin-top: -2px;">
                     a non-profit 501(c)(3) foundation.
                    </div>
                
                </figcaption>
            </figure>
        </a>
    </div>
    </li>

    
    <li>  
        <div class="menuicon">
        <div style="position: relative; min-width:0px;">
        <input type="checkbox" class="toggler">
        <div class="hamburger"><div></div></div>
        <div class="menu">
        <div style="padding-right: 20px;">
            <ul>

                <li>
                    <a href="/news.html" style="display:block;">
                        <img style="vertical-align:middle" src="/images/newsIcon.png" height="24px;">
                        <span style="vertical-align:middle">News</span>
                    </a>
                </li>

                <li>
                    <a href="https://objective-see.myshopify.com/" target="_blank" style="display:block;">
                        <img style="vertical-align:middle" src="/images/storeIcon.png" height="24px;">
                        <span style="vertical-align:middle">Swag</span>
                    </a>
                </li>

                <li>
                    <a href="https://taomm.org/" target="_blank" style="display:block;">
                        <img style="vertical-align:middle" src="/images/bookIcon.png" height="24px;">
                        <span style="vertical-align:middle">Books</span>
                    </a>
                </li>

                <li>
                    <a href="https://objectivebythesea.com/" target="_blank" style="display:block;">
                        <img style="vertical-align:middle" src="/images/conferenceIcon.png" height="24px;">
                        <span style="vertical-align:middle">Conference</span>
                    </a>
                </li>

                 <li>
                    <a href="/malware.html" style="display:block;">
                        <img style="vertical-align:middle" src="/images/malwareIcon.png" height="24px;">
                        <span style="vertical-align:middle">Malware Collection</span>
                    </a>
                </li>

                <li style="border-bottom: none;">
                    <a href="/about.html" style="display:block;">
                        <img style="vertical-align:middle" src="/images/aboutIcon.png" height="24px;">
                        <span style="vertical-align:middle">About Objective-See</span>
                    </a>
                </li>

            </ul>
        </div>
    </div>
    </div>
    </div>

    </li>

    
    <li>
        <form action="/support.html" style="display: inline;">
            <button class="menuicon button-4" role="button">Support Us!</button>
        </form>
    </li>

    
    <li>
        <a href="/blog.html" class="menuicon">
        <figure class="item">
            <center>
                <img src="/images/blogIcon.png" class="item"/>
                <figcaption class="item">blog</figcaption>
            </center>
        </figure>
        </a>
    </li>
    
    
    <li>
        <a href="/products.html" class="menuicon">
        <figure class="item">
            <center>
                <img src="/images/productsIcon.png" class="item"/>
            </center>
            <figcaption class="item">tools</figcaption>
        </figure>
        </a>
    </li>

</ul>

<hr class="gradient">

</nav>
    
    <div class="pageContent">
      <br>
      
<section class="blogContent" style="padding-bottom:50px";>
  <div class="blogTitle">Arm&#39;d &amp; Dangerous</div>
  <div class="blogSubTitle">malicious code, now native on apple silicon</div>
  <div class="blogDate" style="padding-top:10px;">by: Patrick Wardle / February 14, 2021</div>
  <div style="border: 1px solid #95c02d; padding: 10px; margin-top:15px; border-radius: 10px;">
    <div style="text-align: left; padding-bottom: 10px;">Our research, tools, and writing, are supported by the "Friends of Objective-See" such as:</div>
    <center>
    <div class="download-link" style="padding: 10px; margin-right:30px;">
          <a href="https://1password.com/?utm_medium=parnter&utm_source=Objective-See&utm_campaign=gp&utm_content=sponsorship" style="border: 0px;">
              <img src="../images/friends/1Password.png" height="50px" border="0" style="margin-top: 10px; border-radius: 10%;">
          <div class="logo-title" style="text-align: center;">...the world’s most-loved password manager</div>
          </a>
      </div>
      <div class="download-link" style="padding: 10px;">
          <a href="https://www.jamf.com?utm_source=objective-see&utm_medium=sponsored-link&utm_campaign=next-gen-security&utm_content=2021-02-05_protect" style="border: 0px;">
              <img src="../images/friends/jamf.png" height="50px" border="0" style="margin-top: 10px; border-radius: 10%;">
          <div class="logo-title" style="text-align: center;">...the standard in apple enterprise management</div>
          </a>
      </div>
      </center>
      <br>
      <div align="right" style="padding-right:10px; padding-bottom:10px;">
        <a href="https://objective-see.com/friends.html" class="inlineLink">Become a Friend!</a>
    </div>
</div>
<br>
<div class="note">
&#x1F4DD; &#x1F47E; Want to play along?
<p>I&rsquo;ve uploaded a <a href="https://objective-see.com/downloads/blog/blog_0x62/GoSearch.zip">sample</a> (password: infect3d).</p>
<div align="right" style="padding-right:10px; padding-bottom:10px;">
...please don’t infect yourself! 
</div>
</div>
<h3 id="background">Background</h3>
<p>Thanks to the amazing support of the &ldquo;<a href="https://objective-see.com/friends.html">Friends of Objective-See</a>&rdquo; (such as <a href="https://www.jamf.com?utm_source=objective-see&amp;utm_medium=sponsored-link&amp;utm_campaign=next-gen-security&amp;utm_content=2021-02-05_protect">Jamf</a> and <a href="https://1password.com/?utm_medium=parnter&amp;utm_source=Objective-See&amp;utm_campaign=gp&amp;utm_content=sponsorship">1Password</a>) and my amazing <a href="https://www.patreon.com/bePatron?c=701171">patrons</a>, I recently was able to step down from my 9-5 job to focus exclusively on all things Objective-See, including:</p>
<ul>
<li>🛠 Objective-See&rsquo;s free, open-source <a href="https://objective-see.com/products.html">tools</a></li>
<li>📚 The free, &ldquo;<a href="https://taomm.org">The Art of Mac Malware</a>&rdquo; book series</li>
<li>👥 The community focused &ldquo;<a href="https://objectivebythesea.com/v4/">Objective by the Sea</a>&rdquo; Mac security conference</li>
</ul>
<p>One of my main focuses has been working to (re)build all of Objective-See&rsquo;s tools to run natively on Apple&rsquo;s new M1 systems. For example <a href="https://objective-see.com/products/lulu.html">LuLu</a> now runs natively on Apple Silicon:</p>
<img src="../images/blog/blog_0x62/lulu.jpeg"  width="100%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">LuLu, now native on Apple Silicon (M1).</center>

<p>M1 (aka &ldquo;Apple Silicon&rdquo;) is Apple&rsquo;s new (system on a) chip. As an arm-based SoC, the CPU supports an <code>arm64</code> (<code>AArch64</code>) instruction set architecture (ISA).</p>
<div class="note">
The arm64 binary file format has been used by Apple's iOS and tvOS for many years.
</div>
<p>Thus, in order for a binary to <em>natively</em> run on an M1 system (2021 MacBook Air, MacBook Pro, etc.) it must be compiled as an Mach-O 64-bit arm64 binary &hellip;which means developers must (re)compile their applications.</p>
<p>&ldquo;<em>But wait!</em>&rdquo; you might say, &ldquo;<em>I know can still run many older applications on my shiny new M1 system!?</em>&rdquo;. And you are correct! Apple (wisely) realized that &ldquo;backwards compatibility&rdquo; was essential to ensure wide-spread customer adoption of their new M1 Mac systems &hellip;and thus released Rosetta(2).</p>
<blockquote>
  "<i>Rosetta is a translation process that allows users to run apps that contain x86_64 instructions on Apple silicon. " 
  <br>
  <br>
  To the user, Rosetta is mostly transparent. If an executable contains only Intel instructions, macOS automatically launches Rosetta and begins the translation process. When translation finishes, the system launches the translated executable in place of the original. However, the translation process takes time, so users might perceive that translated apps launch or run more slowly at times.
  <br>
  <br>
  The system prefers to execute an app's arm64 instructions on Apple silicon.</i>" -Apple
</blockquote>
<p>As noted in the quotation above, Rosetta will transparently translate <code>x86_64</code> (Intel) instructions into native <code>arm64</code> instruction so older applications can run (almost) seamlessly on M1 systems.</p>
<p>However two points to note:</p>
<ul>
<li>Non-<code>arm64</code> code will not run natively on M1 systems (the CPU only &ldquo;speaks&rdquo; <code>arm64</code>) &hellip;it has to be translated first!</li>
<li>As <code>arm64</code> code does not have to be translated, applications (re)compiled for M1 will run natively, and thus faster. And won&rsquo;t be subject to any issues or nuances of Rosetta.</li>
</ul>
<div class="note">
For more information on M1 and Rosetta, see Apple's documentation:
<br><br>
<center>
  <a href="https://developer.apple.com/documentation/apple_silicon/about_the_rosetta_translation_environment" class="inlineLink">About the Rosetta Translation Environment</a>.
</center>
</div>
<p>Based on the fact that native (<code>arm64</code>) applications run faster (as they avoid the need for runtime translation), and that Rosetta (though amazing), has a few bugs (that may prevent certain older apps from running), developers are wise to (re)compile their applications for M1!</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-text" data-lang="text"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span>Process:               oahd-helper [36752]
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span>Path:                  /Library/Apple/*/oahd-helper
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span>Identifier:            oahd-helper
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span>Version:               203.13.2
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span>Code Type:             ARM-64 (Native)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span>Parent Process:        oahd [506]
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span>Responsible:           oahd [506]
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span>User ID:               441
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span>Date/Time:             2021-02-12 10:34:15.107 -1000
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11</span><span>OS Version:            macOS 11.1 (20C69)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13</span><span>Crashed Thread:        0  Dispatch queue: com.apple.main-thread</span></span></code></pre></div>
<center style="color:#787878;">Lost in Translation ...a Rosetta(2) Crash.</center>
<br>
...hence why I'm working on (re)compiling all of Objective-See's tools to natively run on M1! 
<h3 id="identifying-native-m1-code">Identifying Native M1 Code</h3>
<p>As I was working on rebuilding my tools to achieve native M1 compatibility, I pondered the possibility that malware writers were also spending their time in a similar manner. At the end of the day, malware is simply software (albeit malicious), so I figured it would make sense that (eventually) we&rsquo;d see malware built to execute natively on Apple new M1 systems.</p>
<p>Before going off hunting for native M1 malware, we need have to answer the question, &ldquo;<em>How can we determine if a program was compiled natively for M1?</em>&rdquo; Well, in short, it will contain <code>arm64</code> code! OK, and how do we ascertain this?</p>
<p>One simple way is via the macOS&rsquo;s built-in <code>file</code> tool (or <code>lipo -archs</code>). Using this tool, we can examine a binary to see if it contains compiled <code>arm64</code> code.</p>
<p>Let&rsquo;s look at Objective-See&rsquo;s <a href="https://objective-see.com/products/lulu.html">LuLu</a>:
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
% file /Applications/LuLu.app/Contents/MacOS/LuLu
LuLu.app/Contents/MacOS/LuLu: Mach-O universal binary with 2 architectures: 
  [x86_64:Mach-O 64-bit executable x86_64] [arm64:Mach-O 64-bit executable arm64]

LuLu.app/Contents/MacOS/LuLu (for architecture arm64):  Mach-O 64-bit executable arm64
LuLu.app/Contents/MacOS/LuLu (for architecture x86_64): Mach-O 64-bit executable x86_64
</pre>
</div></p>
<p>As LuLu has been rebuilt to natively run on M1 systems, we can see it contains <code>arm64</code> code (&quot;<code>Mach-O 64-bit executable arm64</code>&quot;).</p>
<div class="note">
In order to maintain compatibility with older non-M1 systems, LuLu also contains native Intel (x86_64) code. 
<br><br>
A binary that contains code to run on multiple architectures (e.g. Intel and Apple Silicon), is called a "Universal" or (more traditionally) a "fat" binary.
<br><br>
At run time, macOS will automatically select the correct (native) architecture.
</div>
<p>On the other hand, programs that have not been (re)built for M1 systems, will not have the any <code>arm64</code> code within them. For example, let&rsquo;s look at <a href="https://objective-see.com/products/blockblock.html">BlockBlock</a> (which I&rsquo;ve yet to recompile):</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
% file BlockBlock.app/Contents/MacOS/BlockBlock 
BlockBlock.app/Contents/MacOS/BlockBlock: Mach-O 64-bit executable x86_64
</pre>
</div>
<p>As BlockBlock currently on contains Intel (<code>x86_64</code>) code, it will not run natively on M1 systems &hellip;and instead will have to be translated at runtime via Rosetta(2) in order to execute.</p>
<p>Ok, so now we know what how to identify if program has been natively build to M1 systems. Time to go hunting!</p>
<h3 id="malicious-code-now-armd">Malicious Code &hellip;now Arm&rsquo;d?</h3>
<p>Since I&rsquo;m an independent macOS security researcher, I don&rsquo;t have access private or proprietary malware collections or feeds. Luckily <a href="https://www.virustotal.com/gui/home/search">VirusTotal</a> is generous enough to offer (free) researcher accounts. Mahalo! 🙏🏽</p>
<p>VirusTotal also supports a wide range of search modifiers, that will be essential in our hunt for malicious (native M1) code.</p>
<p>Consulting their <a href="https://support.virustotal.com/hc/en-us/articles/360001385897-File-search-modifiers">documentation</a>, we find several relevant search modifiers, including:</p>
<ul>
<li>
<p><code>macho</code> (type)
<br>
The file is a <code>Mach-O</code> (Apple) executable.</p>
</li>
<li>
<p><code>arm</code> (tag)
<br>
The file contains <code>ARM</code> code/instructions.</p>
</li>
<li>
<p><code>64bits</code> (tag)
<br>
The file contains <code>64-bit</code> code</p>
</li>
<li>
<p><code>multi-arch</code> (tag)
<br>
The file contains support for multiple architectures (i.e. its a universal/fat binary).</p>
</li>
<li>
<p><code>signed</code> (tag)
<br>
The file is signed.</p>
</li>
</ul>
<p>From these we can craft a query that should give us a list of candidate files.</p>
<div class="note">
Some of the aforementioned tags are used simply to pare down the list (but might incur false negatives). 
<p>For example, it seems reasonable to assume that if malware authors are natively compiling code for M1 systems this code will be found within a universal/fat binary such their malicious creations will retain compatibility with older (Intel-based). As such, we leverage the &ldquo;multi-arch&rdquo; tag. Similarly since M1 systems will be running Big Sur which requires code to be signed, we assume the malware will be signed (and thus leverage the &ldquo;signed&rdquo; tag).</p>
</div>
<p>Of course just combining these tags will yield tens of thousands of results, as there are a ton of legitimate multi-architecture <code>Mach-O</code> binaries! So, let&rsquo;s add another search query to look for binaries that are flagged by at least two anti-virus engines. (Yes, this will limit us to known malware, but the assumption is that as we&rsquo;re looking at universal binaries, the detection will likely be due to the Intel code).</p>
<p>As such, our final search query is: <code>type:macho tag:arm tag:64bits tag:multi-arch tag:signed positives:2+</code></p>
<p>&hellip;which results in 255 matches:
<img src="../images/blog/blog_0x62/results.png"  width="95%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">Candidate Matches.</center>
</p>
<p>Digging thru these, many are purely iOS binaries (that true, are universal binaries, but in the sense that they are compiled to run on multiple iOS architectures e.g. <code>armv7</code>, <code>armv64</code> &hellip;not macOS). A quick triage indicates these iOS files are largely flagged due to their relation to jailbreaks, and/or are known iOS malware:
<img src="../images/blog/blog_0x62/jailbreak.png"  width="95%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">A (known) iOS Jailbreak Sample.</center>

<br></p>
<div class="note">
I didn't find a way to create a search that would filter out iOS binaries. Though VirusTotal supports tags such as "iPhone" and "iOS" and inversion logic (e.g. "NOT tag:iPhone"), these weren't applicable as the files themselves had not been tagged with these tags. 
<p>If you have suggestion how to create a search query that ignores iOS files, I&rsquo;d love to learn how!</p>
</div>
<p>Skipping over the iOS binaries, we soon find a promising candidate, a file named <code>GoSearch22</code> (<code>SHA-256:</code> <code>b94e5666d0afc1fa49923c7a7faaa664f51f0581ec0192a08218d68fb079f3cf</code>):
<img src="../images/blog/blog_0x62/result.png"  width="95%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">A Promising Candidate!</center>
</p>
<p>&hellip;is this malicious code compiled to run natively on Apple&rsquo;s new M1 systems?</p>
<h3 id="triaging-gosearch22">Triaging <code>GoSearch22</code></h3>
<p>First, let&rsquo;s confirm this indeed is a macOS (vs. iOS) binary &hellip;that can run natively on M1 systems:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
$ file GoSearch 
GoSearch: Mach-O universal binary with 2 architectures: 
 [x86_64:Mach-O 64-bit executable x86_64] [arm64:Mach-O 64-bit executable arm64]

GoSearch (for architecture x86_64): Mach-O 64-bit executable x86_64
GoSearch (for architecture arm64):  Mach-O 64-bit executable arm64

</pre>
</div>
<p>So far, looks good! It&rsquo;s universal (fat) Mach-O binary, that supports both Intel (<code>x86_64</code>) and Apple Silicon (<code>arm64</code>). However to be sure, let&rsquo;s track down the full application bundle, and check its <code>Info.plist</code> file.</p>
<p>Thanks to VirusTotal&rsquo;s &lsquo;Relations&rsquo; logic, we can track down the binary&rsquo;s parent &hellip;a full application bundle, unsurprisingly named <a href="https://www.virustotal.com/gui/file/6a79efe8e690d18292c2f47b33f7001d9adde6439a4be981232a757c5d12f611/details"><code>GoSearch22.app</code></a>.</p>
<p>First, let&rsquo;s double check the standalone binary we uncovered matches the binary in the application bundle:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
% shasum -a256 GoSearch22.app/Contents/MacOS/GoSearch22 
b94e5666d0afc1fa49923c7a7faaa664f51f0581ec0192a08218d68fb079f3cf

% shasum -a256 GoSearch/GoSearch 
b94e5666d0afc1fa49923c7a7faaa664f51f0581ec0192a08218d68fb079f3cf

</pre>
</div>
<p>&hellip;as expected they match. This is good news, as having a full application bundle (vs. just the application&rsquo;s binary) provides a wealth of additional information.</p>
<p>For example in the application&rsquo;s <code>Info.plist</code> file, we can confirm that indeed this is an application, compatible with macOS (not iOS):</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
% cat GoSearch/GoSearch22.app/Contents/Info.plist 

&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;
&lt;plist version=&quot;1.0&quot;&gt;
&lt;dict&gt;
  &lt;key&gt;CFBundleExecutable&lt;/key&gt;
  &lt;string&gt;GoSearch22&lt;/string&gt;
  &lt;key&gt;CFBundleIdentifier&lt;/key&gt;
  &lt;string&gt;com.GoSearch22&lt;/string&gt;
  &lt;key&gt;CFBundleInfoDictionaryVersion&lt;/key&gt;
  &lt;string&gt;6.0&lt;/string&gt;
  &lt;key&gt;CFBundleName&lt;/key&gt;
  &lt;string&gt;GoSearch22&lt;/string&gt;
  &lt;key&gt;CFBundlePackageType&lt;/key&gt;
  &lt;string&gt;APPL&lt;/string&gt;
  &lt;key&gt;CFBundleShortVersionString&lt;/key&gt;
  &lt;string&gt;1.0&lt;/string&gt;
  <b>&lt;key&gt;CFBundleSupportedPlatforms&lt;/key&gt;
  &lt;array&gt;
    &lt;string&gt;MacOSX&lt;/string&gt;
  &lt;/array&gt;</b>
  &lt;key&gt;CFBundleVersion&lt;/key&gt;
  &lt;string&gt;146&lt;/string&gt;
  &lt;key&gt;LSMinimumSystemVersion&lt;/key&gt;
  &lt;string&gt;10.12&lt;/string&gt;
  &lt;key&gt;LSMultipleInstancesProhibited&lt;/key&gt;
  &lt;true/&gt;
  &lt;key&gt;LSUIElement&lt;/key&gt;
  &lt;true/&gt;
  &lt;key&gt;NSAppTransportSecurity&lt;/key&gt;
  &lt;dict&gt;
    &lt;key&gt;NSAllowsArbitraryLoads&lt;/key&gt;
    &lt;true/&gt;
  &lt;/dict&gt;
  &lt;key&gt;NSPrincipalClass&lt;/key&gt;
  &lt;string&gt;NSApplication&lt;/string&gt;
&lt;/dict&gt;
&lt;/plist&gt;

</pre>
</div>
<p>&hellip;specifically note that the <code>CFBundleSupportedPlatforms</code> key is set to an array containing (only) <code>MacOSX</code>.</p>
<p>Hooray, so we&rsquo;ve succeeding in finding a macOS program containing native M1 (<code>arm64</code>) code &hellip;that is detected as malicious! This confirms malware/adware authors are indeed working to ensure their malicious creations are natively compatible with Apple&rsquo;s latest hardware. 🥲</p>
<p>It is also important to note that <code>GoSearch22</code> was indeed signed with an Apple developer ID (<code>hongsheng yan</code>), on November 23rd, 2020:</p>
<img src="../images/blog/blog_0x62/signature.png"  width="95%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">Signed w/ an Apple Developer ID.</center>

<p>&hellip;what is not known is if Apple notarized that code. We cannot answer this question, because at this time Apple has (now) revoked the certificate:</p>
<img src="../images/blog/blog_0x62/revoked.png"  width="95%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">Certificate, now Revoked.</center>

<p>What we do know is as this binary was detected in the wild (and submitted by a user via an Objective-See tool) &hellip;so whether it was notarized or not, macOS users were infected.</p>
<div class="note">
As Apple has revoked the certificate, the malicious application will no longer run on macOS (unless of course, the attackers re-sign it with another certificate). 
</div>
<p>Looking at the (current) detection results (via the anti-virus engines on VirusTotal), it appears the <code>GoSearch22.app</code> is an instance of the prevalent, yet rather insidious, &lsquo;Pirrit&rsquo; adware:</p>
<img src="../images/blog/blog_0x62/detections.png"  width="95%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">Detections: Pirrit</center>

<br>
<div class="note">
<p>In a (guest) blog post in 2016, <a href="https://twitter.com/0xAmit" class="inlineLink">Amit Serper</a> dove into Pirrit:</p>
<center>
  <a href="https://objective-see.com/blog/blog_0x0E.html" class="inlineLink">Analysis of an Intrusive Cross-Platform Adware; OSX/Pirrit</a>.
</center>
<br>
<br>
...although it should be noted that since then, it has evolved significantly. 
</div>
<p>This version/variant of <code>Pirrit</code> appears to:</p>
<ul>
<li>persist a launch agent</li>
<li>install itself as a malicious Safari extension.</li>
</ul>
<p>As this adware is rather well known, we won&rsquo;t dig into it too much (today) &hellip;though we will note it implements various anti-analysis logic. For example, anti-debugging logic:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span><span style="color:#ae81ff">000000010005411</span><span style="color:#ae81ff">8</span>         movz       x0, <span style="color:#960050;background-color:#1e0010">#</span><span style="color:#ae81ff">0x1a</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2</span><span><span style="color:#ae81ff">000000010005411</span>c         movz       x1, <span style="color:#960050;background-color:#1e0010">#</span><span style="color:#ae81ff">0x1f</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3</span><span><span style="color:#ae81ff">0000000100054120</span>         movz       x2, <span style="color:#960050;background-color:#1e0010">#</span><span style="color:#ae81ff">0x0</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4</span><span><span style="color:#ae81ff">0000000100054124</span>         movz       x3, <span style="color:#960050;background-color:#1e0010">#</span><span style="color:#ae81ff">0x0</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5</span><span><span style="color:#ae81ff">000000010005412</span><span style="color:#ae81ff">8</span>         movz       x16, <span style="color:#960050;background-color:#1e0010">#</span><span style="color:#ae81ff">0x0</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6</span><span><span style="color:#ae81ff">000000010005412</span>c         svc        <span style="color:#960050;background-color:#1e0010">#</span><span style="color:#ae81ff">0x80</span></span></span></code></pre></div>
<p>In the above <code>arm64</code> disassembly, the malicious code is invoking <code>ptrace</code> (<code>0x1a</code>) via a supervisor call (<code>SVC #0x80</code>), with the <code>PT_DENY_ATTACH</code> (<code>0x1f</code>) flag. This attempts to prevent debugging, or if being debugged, will cause the program to terminate.</p>
<p>The malicious code also attempts to detect if its running in virtual machine by looking for various virtual machine &ldquo;artifacts&rdquo;:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
# ProcessMonitor.app/Contents/MacOS/ProcessMonitor -pretty
{
  "event": "ES_EVENT_TYPE_NOTIFY_EXEC",
  "process": {
    
    "name": "bash",
    "path": "/bin/bash",
    
    "arguments": ["/bin/sh", "-c", "readonly VM_LIST=\"VirtualBox\|Oracle\|VMware\|Parallels\|qemu\";is_hwmodel_vm(){ ! sysctl -n hw.model|grep \"Mac\">/dev/null;};is_ram_vm(){(($(($(sysctl -n hw.memsize)/ 1073741824))<4));};is_ped_vm(){ local -r ped=$(ioreg -rd1 -c IOPlatformExpertDevice);echo \"${ped}\"|grep -e \"board-id\" -e \"product-name\" -e \"model\"|grep -qi \"${VM_LIST}\"||echo \"${ped}\"|grep \"manufacturer\"|grep -v \"Apple\">/dev/null;};is_vendor_name_vm(){ ioreg -l|grep -e \"Manufacturer\" -e \"Vendor Name\"|grep -qi \"${VM_LIST}\";};is_hw_data_vm(){ system_profiler SPHardwareDataType 2>&1 /dev/null|grep -e \"Model Identifier\"|grep -qi \"${VM_LIST}\";};is_vm(){ is_hwmodel_vm||is_ram_vm||is_ped_vm||is_vendor_name_vm||is_hw_data_vm;};main(){ is_vm&&echo 1||echo 0;};main \"${@}\""],
    ...
  }
} 
</pre>
</div>
<p>Before wrapping up this section on triaging the malicious application, let&rsquo;s briefly focus on the browser extension component. First, note that application bundle contains a plugin, <code>GoSearch22 Extension.appex</code>:</p>
<img src="../images/blog/blog_0x62/extension.png"  width="" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">GoSearch22&#39;s Extension.</center>

<p>Below is the (abridged) the <code>Info.plist</code> file of the plugin (<code>GoSearch22 Extension.appex/Contents/Info.plist</code>):</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
% cat "GoSearch22 Extension.appex/Contents/Info.plist"

&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; ... &gt;
&lt;plist version=&quot;1.0&quot;&gt;
&lt;dict&gt;
  &lt;key&gt;CFBundleDisplayName&lt;/key&gt;
  &lt;string&gt;GoSearch22 Extension&lt;/string&gt;
  &lt;key&gt;CFBundleExecutable&lt;/key&gt;
  &lt;string&gt;GoSearch22 Extension&lt;/string&gt;
  &lt;key&gt;CFBundleIdentifier&lt;/key&gt;
  &lt;string&gt;com.GoSearch22.Extension&lt;/string&gt;
  ...
  &lt;key&gt;NSExtension&lt;/key&gt;
  &lt;dict&gt;
    &lt;key&gt;NSExtensionPointIdentifier&lt;/key&gt;
    &lt;string&gt;com.apple.Safari.extension&lt;/string&gt;
    &lt;key&gt;NSExtensionPrincipalClass&lt;/key&gt;
    &lt;string&gt;SafariExtensionHandler&lt;/string&gt;
    &lt;key&gt;SFSafariContentScript&lt;/key&gt;
    &lt;array&gt;
      &lt;dict&gt;
        &lt;key&gt;Script&lt;/key&gt;
        &lt;string&gt;script.js&lt;/string&gt;
      &lt;/dict&gt;
    &lt;/array&gt;
    ...
    &lt;key&gt;SFSafariWebsiteAccess&lt;/key&gt;
    &lt;dict&gt;
      &lt;key&gt;Allowed Domains&lt;/key&gt;
      &lt;array&gt;
        &lt;string&gt;*&lt;/string&gt;
      &lt;/array&gt;
      &lt;key&gt;Level&lt;/key&gt;
      &lt;string&gt;All&lt;/string&gt;
    &lt;/dict&gt;
  &lt;/dict&gt;
&lt;/dict&gt;
&lt;/plist&gt;

</pre>
</div>
<p>From the plugin&rsquo;s <code>Info.plist</code> file, it&rsquo;s clear it&rsquo;s a Safari browser extension. And looking at the value specified by the <code>SFSafariContentScript</code> key, we can see its logic is contained in the <code>script.js</code> file:</p>
<img src="../images/blog/blog_0x62/script.png"  width="" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">GoSearch22&#39;s Extension Script.</center>

<p>The script is unsurprisingly heavily obfuscated:
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
% cat "GoSearch22 Extension.appex/Contents/Resources/script.js"

var a0a=['wr0bRjtVP8KbeFo=','LMOPwqMwNg==','wpfDqMOtw4Rtw6s=','wrpFw5rDhMOG',
'XFtr','YcOmw41Mw6U=','wqAWwrHCryXDngUnw5fCrg==','CCo/biE=','w77DhiTDsV4=',
'wpdLw4jCv8Ok','w60Ow5fDrRA=','MsOIwqYPPn7DmnzDvMO8','a8OQw5low45iw4s=',
'wrhyw5jCusK1JSdfw5dy','wr1Jw6XCpMKS','w70QGMKowrk=','w44hw4/DkjU=',
'Zgd8wrnDgw==','AMKGHHbCvw==','wqoNw4xkwoU=','w4oSFmhE','AsKoY8Or','WsOTwo/D

...

f7;}else{if(a0b('0x169','Lv[Q')===a0b('0x106','uAqz')){f6['bDFeq'](f7,0x0);}
else{var fM=document[a0b('0x210','j]sZ')];fM&&f6[a0b('0x76','2PcE')](f6[a0b(
'0x21','TrXZ')],fM[a0b('0xf3','BKpl')][a0b('0x97','uAqz')])&&window[a0b('0xd'
,'tvLM')][a0b('0x1e3','[egw')](location[a0b('0x1bc','TpDR')]);}}}catch(fN){}}
</pre>
</div></p>
<p><a href="https://www.pcrisk.com/removal-guides/19782-gosearch22-virus-mac">Online sources</a>, note <code>GoSearch22</code> performs standard adware-type behaviors:</p>
<blockquote>
  "<i>When users have apps like GoSearch22 installed on a browser and/or the operating system, they are forced to occasionally see coupons, banners, pop-up ads, surveys, and/or ads of other types. Quite often ads by apps like GoSearch22 are designed to promote dubious websites or even download and/or install unwanted apps by executing certain scripts. Moreover, adware-type apps like GoSearch22 tend to be designed to collect browsing data. For instance, details like IP addresses, addresses of visited web pages, entered search queries, geolocations, and other browsing-related information.</i>" 
</blockquote>
<h3 id="gosearch22-in-the-wild"><code>GoSearch22</code> in the Wild</h3>
<p>In terms of this specific (M1-native) specimen, we can see it was originally submitted to VirusTotal at the end December 2020:</p>
<img src="../images/blog/blog_0x62/submission.png"  width="95%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">Initial Submission.</center>

<p>Rather awesomely, if we analyze details of the VirusTotal submission, it turns out this sample was submitted (by a user) directly through one of Objective-See&rsquo;s tools (likely <a href="https://objective-see.com/products/knockknock.html">KnockKnock</a>) &hellip;after the tool flagged the malicious code, due to its persistence mechanism:</p>
<img src="../images/blog/blog_0x62/kk.png"  width="95%" class="center" style="border-radius: 4px;">

<img src="../images/blog/blog_0x62/autostart.png"  width="95%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;">GoSearch22, Detected via Objective-See.</center>

<h3 id="why-this-all-matters">Why This All Matters</h3>
<p>Today we confirmed that malicious adversaries are indeed crafting multi-architecture applications, so that their code will natively run on M1 systems. The malicious <code>GoSearch22</code> application may be the first example of such natively M1 compatible code.</p>
<p>The creation of such applications is notable for two main reasons.</p>
<p>First, (and unsurprisingly), this illustrates that malicious code continues to evolve in direct response to both hardware and software changes coming out of Cupertino. There are a myriad of benefits to natively distributing native <code>arm64</code> binaries, so why would malware authors resist?</p>
<p>Secondly, and more worrisomely, (static) analysis tools or anti-virus engines may struggle with <code>arm64</code> binaries. In a simple experiment, I separated out the <code>x86_64</code> and <code>arm64</code> binaries from the universal <code>GoSearch22</code> binary (using macOS built-in <code>lipo</code> utility):</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
% lipo GoSearch22 -thin x86_64 -output GoSearch22_ARM64
% lipo GoSearch22 -thin arm64 -output GoSearch22_X86_64

% file ~/Desktop/GoSearch22_*                                                                      
GoSearch22_ARM64:  Mach-O 64-bit executable x86_64
GoSearch22_X86_64: Mach-O 64-bit executable arm64
</pre>
</div>
<p>I then uploaded both (the now separated) binaries to VirusTotal and initiated scans of each. In theory both binaries would be detected at the same rate, as they both contain the same logically equivalent malicious code.</p>
<p>Unfortunately detections of the <a href="https://www.virustotal.com/gui/file/a0d34d3f767078c34fbc72e8cb02aa99196e2136fa88d633f66f717892759e3b/detection"><code>arm64</code> version</a> dropped roughly 15% (when compared to the standalone <a href="https://www.virustotal.com/gui/file/e60ca9d6073dd942207bb8acaee980ed4284e6471a6de32a633a5ce26c9e8964/detection"><code>x86_64</code> version</a>).
<br>&hellip;several industry leading AV engines (who readily detected the <code>x86_64</code> version) failed to flag the malicious <code>arm64</code> binary. 😢</p>
<div class="note">
<p>Some AV engines that (correctly) flag both the x86_64 and arm64 binaries, however present differing names for their detections, of what logically is the same file.</p>
<p>For example, Trojan:MacOS/Bitrep.B vs. Trojan:Script/Wacatac.C!ml</p>
<div align="right" style="padding-right:10px; padding-bottom:10px;">
  ...such naming confusions, may indicate inconsistencies when processing the differing binary file formats.
</div>
</div>
<h3 id="conclusions">Conclusions</h3>
<p>Apple&rsquo;s new M1 systems offer a myriad of benefits, and natively compiled <code>arm64</code> code runs blazingly fast. Today, we highlighted the fact that malware authors have now joined the ranks of developers &hellip;(re)compiling their code to <code>arm64</code> to gain natively binary compatibility with Apple&rsquo;s latest hardware.</p>
<p>Specifically, we highlighted a <code>Pirrit</code> variant (<code>GoSearch22.app</code>) that was first discovered and submitted thanks to Objective-See&rsquo;s free, open-source tools!</p>
<p>And while the <code>x86_64</code> and <code>arm64</code> code appears logically identical (as expected), we showed that defensive security tools may struggle to detect the <code>arm64</code> binary 😥
<br></p>
<div style="border: 1px solid #95c02d; padding: 10px; margin-top:15px; border-radius: 10px;">
    <div style="text-align: left; padding-bottom: 10px;"><b><span style="font-size:20px"> 📚 The Art of Mac Malware</b></span></div>
    If this blog posts pique your interest, definitely check out my new book on the topic of Mac Malware Analysis: 
    <br><br>
    <center>
      "<a href="https://taomm.org" class="inlineLink">The Art Of Mac Malware: Analysis</a>"
    </center>
    <br><br>
    <div align="right" style="padding-right:10px; padding-bottom:10px;">
    ...it's free online, and new content is regularly added! 
    </div>
</div>
<br>
<h3 id="-support-us">💕 Support Us:</h3>
<div style="border: 1px solid #DCDCDC; border-radius:7px; padding: 10px; margin-top:15px; margin-bottom: 15px;">
    <center>Love these blog posts? You can support them via my <a href="https://www.patreon.com/bePatron?c=701171" class="inlineLink">Patreon</a> page!
    <br><br>
    <a href="https://www.patreon.com/bePatron?c=701171" style="text-decoration: none;">
      <img src="../images/patreon.png" style="display:block;margin:auto; padding-top:0px; width:100%"/>
    </a>
    </center>
</div>
</section>

    </div>

    
<script src="/js/cookies.js"></script>
<script src="/social/ss-social.js"></script>
<link href="/social/ss-social.css" rel="stylesheet" />

<script> 
    $(function(){
        
        
        
        if("" == getCookie("acceptedCookies")) 
        {
            console.log('ok showing!')

            document.getElementById("cookies").style.display = "block";
        }

    });
</script>

<script>
function acceptCookies() {

    
    setCookie("acceptedCookies", "yes", 365);

    
    document.getElementById("cookies").style.display = "none";
}
</script>

<br>
<br>
<div id="cookies" class="cookie" style="padding-left:20px;">
    This website uses cookies to improve your experience.
    <div class="cookieButton">
        
        <button class="menuicon button-4" role="button" onclick="acceptCookies()" style="margin-top: 12px; float: right; padding:3px; padding-left: 10px; padding-right: 10px;">Okay!</button>
    </div>
</div>
<nav role="footer">
<ul>

    <li>
        <a href="mailto:contact@objective-see.com" class="menubutton icon"><span class="ss-icon" style="overflow-y: hidden;">&#x2709;</span></a>
    </li>

     <li>
        <a href="rss.xml" class="menubutton icon"><span class="ss-icon" style="overflow-y: hidden;">&#xE310;</span></a>
    </li>

    <li>
        <a href="https://www.youtube.com/channel/UCQycc8VDhHuNkZlKSSTDHzw" class="menubutton icon"><span class="ss-icon" style="overflow-y: hidden;">&#xF630;</span></a>
    </li>
   
    <li>
        <a href="https://twitter.com/objective_see" class="menubutton icon"><span class="ss-icon">&#xF611;</span></a>
    </li>
    
    <li>
         <form action="support.html" style="display: inline;">
            <button class="menuicon button-4" role="button" style="margin-top: 7px; float: right; padding:3px; padding-left: 10px; padding-right: 10px;">Support Us!</button>
        </form>
        
    </li>

    <li>
        <div style="margin-top: 10px;">
        Signup for our <a class="inlineLink" target="_blank" href="http://eepurl.com/bXpXeT">newsletter </a> »
        </div>
    </li>

</ul>
</nav>

  </body>
</html>