<!doctype html><html lang="en"><head><title data-rh="true">Genetic Analysis of CryptoWall Ransomware | by Ryan Cornateanu | Medium</title><meta data-rh="true" charset="utf-8"/><meta data-rh="true" name="viewport" content="width=device-width,minimum-scale=1,initial-scale=1,maximum-scale=1"/><meta data-rh="true" name="theme-color" content="#000000"/><meta data-rh="true" name="twitter:app:name:iphone" content="Medium"/><meta data-rh="true" name="twitter:app:id:iphone" content="828256236"/><meta data-rh="true" property="al:ios:app_name" content="Medium"/><meta data-rh="true" property="al:ios:app_store_id" content="828256236"/><meta data-rh="true" property="al:android:package" content="com.medium.reader"/><meta data-rh="true" property="fb:app_id" content="542599432471018"/><meta data-rh="true" property="og:site_name" content="Medium"/><meta data-rh="true" property="og:type" content="article"/><meta data-rh="true" property="article:published_time" content="2020-11-24T05:26:31.073Z"/><meta data-rh="true" name="title" content="Genetic Analysis of CryptoWall Ransomware | by Ryan Cornateanu | Medium"/><meta data-rh="true" property="og:title" content="Genetic Analysis of CryptoWall Ransomware"/><meta data-rh="true" property="al:android:url" content="medium://p/843f86055c7f"/><meta data-rh="true" property="al:ios:url" content="medium://p/843f86055c7f"/><meta data-rh="true" property="al:android:app_name" content="Medium"/><meta data-rh="true" name="description" content="A strain of a Crowti ransomware emerged, the variant known as CryptoWall, was spotted by researchers in early 2013. Ransomware by nature is extraordinarily destructive but this one in particular was…"/><meta data-rh="true" property="og:description" content="A strain of a Crowti ransomware emerged, the variant known as CryptoWall, was spotted by researchers in early 2013. Ransomware by nature…"/><meta data-rh="true" property="og:url" content="https://ryancor.medium.com/genetic-analysis-of-cryptowall-ransomware-843f86055c7f"/><meta data-rh="true" property="al:web:url" content="https://ryancor.medium.com/genetic-analysis-of-cryptowall-ransomware-843f86055c7f"/><meta data-rh="true" property="og:image" content="https://miro.medium.com/v2/resize:fit:1200/1*ZCgluueIqRbBgNEjrvCeUQ.png"/><meta data-rh="true" property="article:author" content="https://ryancor.medium.com"/><meta data-rh="true" name="author" content="Ryan Cornateanu"/><meta data-rh="true" name="robots" content="index,noarchive,follow,max-image-preview:large"/><meta data-rh="true" name="referrer" content="unsafe-url"/><meta data-rh="true" property="twitter:title" content="Genetic Analysis of CryptoWall Ransomware"/><meta data-rh="true" name="twitter:site" content="@Medium"/><meta data-rh="true" name="twitter:app:url:iphone" content="medium://p/843f86055c7f"/><meta data-rh="true" property="twitter:description" content="A strain of a Crowti ransomware emerged, the variant known as CryptoWall, was spotted by researchers in early 2013. Ransomware by nature…"/><meta data-rh="true" name="twitter:image:src" content="https://miro.medium.com/v2/resize:fit:1200/1*ZCgluueIqRbBgNEjrvCeUQ.png"/><meta data-rh="true" name="twitter:card" content="summary_large_image"/><meta data-rh="true" name="twitter:label1" content="Reading time"/><meta data-rh="true" name="twitter:data1" content="26 min read"/><link data-rh="true" rel="icon" href="https://miro.medium.com/v2/5d8de952517e8160e40ef9841c781cdc14a5db313057fa3c3de41c6f5b494b19"/><link data-rh="true" rel="search" type="application/opensearchdescription+xml" title="Medium" href="/osd.xml"/><link data-rh="true" rel="apple-touch-icon" sizes="152x152" href="https://miro.medium.com/v2/resize:fill:304:304/10fd5c419ac61637245384e7099e131627900034828f4f386bdaa47a74eae156"/><link data-rh="true" rel="apple-touch-icon" sizes="120x120" href="https://miro.medium.com/v2/resize:fill:240:240/10fd5c419ac61637245384e7099e131627900034828f4f386bdaa47a74eae156"/><link data-rh="true" rel="apple-touch-icon" sizes="76x76" href="https://miro.medium.com/v2/resize:fill:152:152/10fd5c419ac61637245384e7099e131627900034828f4f386bdaa47a74eae156"/><link data-rh="true" rel="apple-touch-icon" sizes="60x60" href="https://miro.medium.com/v2/resize:fill:120:120/10fd5c419ac61637245384e7099e131627900034828f4f386bdaa47a74eae156"/><link data-rh="true" rel="mask-icon" href="https://miro.medium.com/v2/resize:fill:1000:1000/7*GAOKVe--MXbEJmV9230oOQ.png" color="#171717"/><link data-rh="true" rel="preconnect" href="https://glyph.medium.com" crossOrigin=""/><link data-rh="true" id="glyph_preload_link" rel="preload" as="style" type="text/css" href="https://glyph.medium.com/css/unbound.css"/><link data-rh="true" id="glyph_link" rel="stylesheet" type="text/css" href="https://glyph.medium.com/css/unbound.css"/><link data-rh="true" rel="author" href="https://ryancor.medium.com"/><link data-rh="true" rel="canonical" href="https://ryancor.medium.com/genetic-analysis-of-cryptowall-ransomware-843f86055c7f"/><link data-rh="true" rel="alternate" href="android-app://com.medium.reader/https/medium.com/p/843f86055c7f"/><script data-rh="true" type="application/ld+json">{"@context":"http:\u002F\u002Fschema.org","@type":"NewsArticle","image":["https:\u002F\u002Fmiro.medium.com\u002Fv2\u002Fresize:fit:1200\u002F1*ZCgluueIqRbBgNEjrvCeUQ.png"],"url":"https:\u002F\u002Fryancor.medium.com\u002Fgenetic-analysis-of-cryptowall-ransomware-843f86055c7f","dateCreated":"2020-11-23T17:56:58.160Z","datePublished":"2020-11-23T17:56:58.160Z","dateModified":"2021-12-16T18:17:19.820Z","headline":"Genetic Analysis of CryptoWall Ransomware - Ryan Cornateanu - Medium","name":"Genetic Analysis of CryptoWall Ransomware - Ryan Cornateanu - Medium","description":"A strain of a Crowti ransomware emerged, the variant known as CryptoWall, was spotted by researchers in early 2013. Ransomware by nature is extraordinarily destructive but this one in particular was…","identifier":"843f86055c7f","author":{"@type":"Person","name":"Ryan Cornateanu","url":"https:\u002F\u002Fryancor.medium.com"},"creator":["Ryan Cornateanu"],"publisher":{"@type":"Organization","name":"Medium","url":"https:\u002F\u002Fryancor.medium.com\u002F","logo":{"@type":"ImageObject","width":272,"height":60,"url":"https:\u002F\u002Fmiro.medium.com\u002Fv2\u002Fresize:fit:544\u002F7*V1_7XP4snlmqrc_0Njontw.png"}},"mainEntityOfPage":"https:\u002F\u002Fryancor.medium.com\u002Fgenetic-analysis-of-cryptowall-ransomware-843f86055c7f"}</script><style type="text/css" data-fela-rehydration="569" data-fela-type="STATIC">html{box-sizing:border-box;-webkit-text-size-adjust:100%}*, *:before, *:after{box-sizing:inherit}body{margin:0;padding:0;text-rendering:optimizeLegibility;-webkit-font-smoothing:antialiased;color:rgba(0,0,0,0.8);position:relative;min-height:100vh}h1, h2, h3, h4, h5, h6, dl, dd, ol, ul, menu, figure, blockquote, p, pre, form{margin:0}menu, ol, ul{padding:0;list-style:none;list-style-image:none}main{display:block}a{color:inherit;text-decoration:none}a, button, input{-webkit-tap-highlight-color:transparent}img, svg{vertical-align:middle}button{background:transparent;overflow:visible}button, input, optgroup, select, textarea{margin:0}:root{--reach-tabs:1;--reach-menu-button:1}#speechify-root{font-family:Sohne, sans-serif}div[data-popper-reference-hidden="true"]{visibility:hidden;pointer-events:none}.grecaptcha-badge{visibility:hidden}
/*XCode style (c) Angel Garcia <angelgarcia.mail@gmail.com>*/.hljs {background: #fff;color: black;
}/* Gray DOCTYPE selectors like WebKit */
.xml .hljs-meta {color: #c0c0c0;
}.hljs-comment,
.hljs-quote {color: #007400;
}.hljs-tag,
.hljs-attribute,
.hljs-keyword,
.hljs-selector-tag,
.hljs-literal,
.hljs-name {color: #aa0d91;
}.hljs-variable,
.hljs-template-variable {color: #3F6E74;
}.hljs-code,
.hljs-string,
.hljs-meta .hljs-string {color: #c41a16;
}.hljs-regexp,
.hljs-link {color: #0E0EFF;
}.hljs-title,
.hljs-symbol,
.hljs-bullet,
.hljs-number {color: #1c00cf;
}.hljs-section,
.hljs-meta {color: #643820;
}.hljs-title.class_,
.hljs-class .hljs-title,
.hljs-type,
.hljs-built_in,
.hljs-params {color: #5c2699;
}.hljs-attr {color: #836C28;
}.hljs-subst {color: #000;
}.hljs-formula {background-color: #eee;font-style: italic;
}.hljs-addition {background-color: #baeeba;
}.hljs-deletion {background-color: #ffc8bd;
}.hljs-selector-id,
.hljs-selector-class {color: #9b703f;
}.hljs-doctag,
.hljs-strong {font-weight: bold;
}.hljs-emphasis {font-style: italic;
}
</style><style type="text/css" data-fela-rehydration="569" data-fela-type="KEYFRAME">@-webkit-keyframes k1{0%{opacity:0.8}50%{opacity:0.5}100%{opacity:0.8}}@-moz-keyframes k1{0%{opacity:0.8}50%{opacity:0.5}100%{opacity:0.8}}@keyframes k1{0%{opacity:0.8}50%{opacity:0.5}100%{opacity:0.8}}</style><style type="text/css" data-fela-rehydration="569" data-fela-type="RULE">.a{font-family:medium-content-sans-serif-font, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen, Ubuntu, Cantarell, "Open Sans", "Helvetica Neue", sans-serif}.b{font-weight:400}.c{background-color:rgba(255, 255, 255, 1)}.l{display:block}.m{position:sticky}.n{top:0}.o{z-index:500}.p{padding:0 24px}.q{align-items:center}.r{border-bottom:solid 1px #F2F2F2}.y{height:41px}.z{line-height:20px}.ab{display:flex}.ac{height:57px}.ae{flex:1 0 auto}.af{color:inherit}.ag{fill:inherit}.ah{font-size:inherit}.ai{border:inherit}.aj{font-family:inherit}.ak{letter-spacing:inherit}.al{font-weight:inherit}.am{padding:0}.an{margin:0}.ao{cursor:pointer}.ap:disabled{cursor:not-allowed}.aq:disabled{color:#6B6B6B}.ar:disabled{fill:#6B6B6B}.au{width:auto}.av path{fill:#242424}.aw{height:25px}.ax{margin-left:16px}.ay{border:none}.az{border-radius:20px}.ba{width:240px}.bb{background:#F9F9F9}.bc path{fill:#6B6B6B}.be{outline:none}.bf{font-family:sohne, "Helvetica Neue", Helvetica, Arial, sans-serif}.bg{font-size:14px}.bh{width:100%}.bi{padding:10px 20px 10px 0}.bj{background-color:transparent}.bk{color:#242424}.bl::placeholder{color:#6B6B6B}.bm{display:inline-block}.bn{margin-left:12px}.bo{margin-right:12px}.bp{border-radius:4px}.bq{margin-left:24px}.br{height:24px}.bx{background-color:#F9F9F9}.by{border-radius:50%}.bz{height:32px}.ca{width:32px}.cb{justify-content:center}.ch{max-width:680px}.ci{min-width:0}.cj{animation:k1 1.2s ease-in-out infinite}.ck{height:100vh}.cl{margin-bottom:16px}.cm{margin-top:48px}.cn{align-items:flex-start}.co{flex-direction:column}.cp{justify-content:space-between}.cq{margin-bottom:24px}.cw{width:80%}.cx{background-color:#F2F2F2}.dd{height:44px}.de{width:44px}.df{margin:auto 0}.dg{margin-bottom:4px}.dh{height:16px}.di{width:120px}.dj{width:80px}.dp{margin-bottom:8px}.dq{width:96%}.dr{width:98%}.ds{width:81%}.dt{margin-left:8px}.du{color:#6B6B6B}.dv{font-size:13px}.dw{height:100%}.ep{color:#FFFFFF}.eq{fill:#FFFFFF}.er{background:#1A8917}.es{border-color:#1A8917}.ew:disabled{cursor:inherit !important}.ex:disabled{opacity:0.3}.ey:disabled:hover{background:#1A8917}.ez:disabled:hover{border-color:#1A8917}.fa{border-radius:99em}.fb{border-width:1px}.fc{border-style:solid}.fd{box-sizing:border-box}.fe{text-decoration:none}.ff{text-align:center}.fi{margin-right:32px}.fj{position:relative}.fk{fill:#6B6B6B}.fn{background:transparent}.fo svg{margin-left:4px}.fp svg{fill:#6B6B6B}.fr{box-shadow:inset 0 0 0 1px rgba(0, 0, 0, 0.05)}.fs{position:absolute}.fz{margin:0 24px}.gd{background:rgba(255, 255, 255, 1)}.ge{border:1px solid #F2F2F2}.gf{box-shadow:0 1px 4px #F2F2F2}.gg{max-height:100vh}.gh{overflow-y:auto}.gi{left:0}.gj{top:calc(100vh + 100px)}.gk{bottom:calc(100vh + 100px)}.gl{width:10px}.gm{pointer-events:none}.gn{word-break:break-word}.go{word-wrap:break-word}.gp:after{display:block}.gq:after{content:""}.gr:after{clear:both}.gs{line-height:1.23}.gt{letter-spacing:0}.gu{font-style:normal}.gv{font-weight:700}.ia{align-items:baseline}.ib{width:48px}.ic{height:48px}.id{border:2px solid rgba(255, 255, 255, 1)}.ie{z-index:0}.if{box-shadow:none}.ig{border:1px solid rgba(0, 0, 0, 0.05)}.ih{margin-bottom:2px}.ii{flex-wrap:nowrap}.ij{font-size:16px}.ik{line-height:24px}.im{margin:0 8px}.in{display:inline}.io{color:#1A8917}.ip{fill:#1A8917}.is{flex:0 0 auto}.iv{flex-wrap:wrap}.iw{padding-left:8px}.ix{padding-right:8px}.jy> *{flex-shrink:0}.jz{overflow-x:scroll}.ka::-webkit-scrollbar{display:none}.kb{scrollbar-width:none}.kc{-ms-overflow-style:none}.kd{width:74px}.ke{flex-direction:row}.kf{z-index:2}.kg{margin-right:4px}.kj{-webkit-user-select:none}.kk{border:0}.kl{fill:rgba(117, 117, 117, 1)}.ko{outline:0}.kp{user-select:none}.kq> svg{pointer-events:none}.kz{cursor:progress}.la{margin-left:4px}.lb{margin-top:0px}.lc{opacity:1}.ld{padding:4px 0}.lg{width:16px}.li{display:inline-flex}.lo{max-width:100%}.lp{padding:8px 2px}.lq svg{color:#6B6B6B}.mh{line-height:1.58}.mi{letter-spacing:-0.004em}.mj{font-family:source-serif-pro, Georgia, Cambria, "Times New Roman", Times, serif}.ne{margin-bottom:-0.46em}.nf{margin-left:auto}.ng{margin-right:auto}.nh{max-width:400px}.nn{clear:both}.no{height:auto}.np{margin-top:10px}.nq{max-width:728px}.nt{padding:2px 4px}.nu{font-size:75%}.nv> strong{font-family:inherit}.nw{font-family:source-code-pro, Menlo, Monaco, "Courier New", Courier, monospace}.nx{line-height:1.12}.ny{letter-spacing:-0.022em}.nz{font-weight:600}.ou{margin-bottom:-0.28em}.pa{overflow-x:auto}.pb{padding:20px}.pc{border-radius:0}.pd{background:#F2F2F2}.pe{line-height:1.18}.pf{margin-top:-0.09em}.pg{margin-bottom:-0.09em}.ph{white-space:pre-wrap}.pi{min-width:fit-content}.pj{text-decoration:underline}.pk{max-width:2352px}.pm{cursor:zoom-in}.pn{z-index:auto}.pp{max-width:2086px}.pq{max-width:2676px}.pr{max-width:3894px}.ps{margin-top:0.91em}.pt{max-width:2560px}.pu{max-width:1890px}.pv{max-width:1788px}.pw{max-width:942px}.px{max-width:1350px}.py{max-width:500px}.pz{font-style:italic}.qa{max-width:1532px}.qb{max-width:1020px}.qc{max-width:1068px}.qd{max-width:1130px}.qe{max-width:230px}.qf{max-width:1056px}.qg{max-width:1258px}.qh{max-width:1506px}.qi{max-width:2084px}.qj{max-width:2090px}.qk{margin-bottom:26px}.ql{margin-top:6px}.qm{margin-top:8px}.qn{margin-right:8px}.qo{padding:8px 16px}.qp{border-radius:100px}.qq{transition:background 300ms ease}.qs{white-space:nowrap}.qt{border-top:none}.qu{margin-bottom:14px}.qv{height:52px}.qw{max-height:52px}.qx{box-sizing:content-box}.qy{position:static}.qz{z-index:1}.rb{max-width:155px}.rh{margin-right:20px}.rn{height:0px}.ro{margin-bottom:40px}.sd{height:64px}.se{width:64px}.sf{align-self:flex-end}.sg{color:rgba(255, 255, 255, 1)}.sh{fill:rgba(255, 255, 255, 1)}.si{background:rgba(25, 25, 25, 1)}.sj{border-color:rgba(25, 25, 25, 1)}.sm:disabled{opacity:0.1}.sn:disabled:hover{background:rgba(25, 25, 25, 1)}.so:disabled:hover{border-color:rgba(25, 25, 25, 1)}.sp{flex:1 1 auto}.sv{padding-right:4px}.sw{font-weight:500}.tj{margin-top:16px}.ts{gap:18px}.tt{fill:rgba(61, 61, 61, 1)}.tv{padding-bottom:6px}.tw{border-bottom:1px solid #F2F2F2}.uc{margin-top:32px}.ud{fill:#242424}.ue{background:0}.uf{border-color:#242424}.ug:disabled:hover{color:#242424}.uh:disabled:hover{fill:#242424}.ui:disabled:hover{border-color:#242424}.ut{border-bottom:solid 1px #E5E5E5}.uu{margin-top:72px}.uv{padding:24px 0}.uw{margin-bottom:0px}.ux{margin-right:16px}.as:hover:not(:disabled){color:rgba(25, 25, 25, 1)}.at:hover:not(:disabled){fill:rgba(25, 25, 25, 1)}.et:hover{background:#156D12}.eu:hover{border-color:#156D12}.ev:hover{cursor:pointer}.fl:hover{color:#242424}.fm:hover{fill:#242424}.fq:hover svg{fill:#242424}.ft:hover{background-color:rgba(0, 0, 0, 0.1)}.il:hover{text-decoration:underline}.iq:hover:not(:disabled){color:#156D12}.ir:hover:not(:disabled){fill:#156D12}.kn:hover{fill:rgba(8, 8, 8, 1)}.le:hover{fill:#000000}.lf:hover p{color:#000000}.lh:hover{color:#000000}.lr:hover svg{color:#000000}.qr:hover{background-color:#F2F2F2}.sc:hover{background-color:none}.sk:hover{background:#000000}.sl:hover{border-color:#242424}.tu:hover{fill:rgba(25, 25, 25, 1)}.bd:focus-within path{fill:#242424}.km:focus{fill:rgba(8, 8, 8, 1)}.ls:focus svg{color:#000000}.po:focus{transform:scale(1.01)}.kr:active{border-style:none}</style><style type="text/css" data-fela-rehydration="569" data-fela-type="RULE" media="all and (min-width: 1080px)">.d{display:none}.bw{width:64px}.cg{margin:0 64px}.cv{height:48px}.dc{margin-bottom:52px}.do{margin-bottom:48px}.ef{font-size:14px}.eg{line-height:20px}.em{font-size:13px}.eo{padding:5px 12px}.fh{display:flex}.fy{margin-bottom:68px}.gc{max-width:680px}.hq{font-size:42px}.hr{margin-top:1.19em}.hs{margin-bottom:32px}.ht{line-height:52px}.hu{letter-spacing:-0.011em}.hz{align-items:center}.jk{border-top:solid 1px #F2F2F2}.jl{border-bottom:solid 1px #F2F2F2}.jm{margin:32px 0 0}.jn{padding:3px 8px}.jw> *{margin-right:24px}.jx> :last-child{margin-right:0}.ky{margin-top:0px}.ln{margin:0}.na{font-size:20px}.nb{margin-top:2.14em}.nc{line-height:32px}.nd{letter-spacing:-0.003em}.nm{margin-top:56px}.oq{font-size:24px}.or{margin-top:1.95em}.os{line-height:30px}.ot{letter-spacing:-0.016em}.oz{margin-top:0.94em}.rg{display:inline-block}.rm{margin-bottom:104px}.rp{flex-direction:row}.rs{margin-bottom:0}.rt{margin-right:20px}.sq{max-width:500px}.th{line-height:24px}.ti{letter-spacing:0}.to{margin-bottom:88px}.tr{margin-bottom:72px}.ub{margin:40px 0 16px}.un{width:min-width}.us{padding-top:72px}</style><style type="text/css" data-fela-rehydration="569" data-fela-type="RULE" media="all and (max-width: 1079.98px)">.e{display:none}.kx{margin-top:0px}.nr{margin-left:auto}.ns{text-align:center}.rf{display:inline-block}</style><style type="text/css" data-fela-rehydration="569" data-fela-type="RULE" media="all and (max-width: 903.98px)">.f{display:none}.kw{margin-top:0px}.re{display:inline-block}</style><style type="text/css" data-fela-rehydration="569" data-fela-type="RULE" media="all and (max-width: 727.98px)">.g{display:none}.ku{margin-top:0px}.kv{margin-right:0px}.rd{display:inline-block}</style><style type="text/css" data-fela-rehydration="569" data-fela-type="RULE" media="all and (max-width: 551.98px)">.h{display:none}.s{display:flex}.t{justify-content:space-between}.bs{width:24px}.cc{margin:0 24px}.cr{height:40px}.cy{margin-bottom:44px}.dk{margin-bottom:32px}.dx{font-size:13px}.dy{line-height:20px}.eh{padding:0px 8px 1px}.fu{margin-bottom:4px}.gw{font-size:32px}.gx{margin-top:1.01em}.gy{margin-bottom:24px}.gz{line-height:38px}.ha{letter-spacing:-0.014em}.hv{align-items:flex-start}.it{flex-direction:column}.iy{margin:24px -24px 0}.iz{padding:0}.jo> *{margin-right:8px}.jp> :last-child{margin-right:24px}.kh{margin-left:0px}.ks{margin-top:0px}.kt{margin-right:0px}.lj{margin:0}.lt{border:1px solid #F2F2F2}.lu{border-radius:99em}.lv{padding:0px 16px 0px 12px}.lw{height:38px}.lx{align-items:center}.lz svg{margin-right:8px}.mk{font-size:18px}.ml{margin-top:1.56em}.mm{line-height:28px}.mn{letter-spacing:-0.003em}.ni{margin-top:40px}.oa{font-size:20px}.ob{margin-top:1.2em}.oc{line-height:24px}.od{letter-spacing:0}.ov{margin-top:0.67em}.rc{display:inline-block}.ri{margin-bottom:96px}.sa{margin-bottom:20px}.sb{margin-right:0}.su{max-width:100%}.sx{font-size:24px}.sy{line-height:30px}.sz{letter-spacing:-0.016em}.tk{margin-bottom:64px}.tx{margin:32px 0 16px}.uj{width:100%}.uo{padding-top:48px}.ly:hover{border-color:#E5E5E5}</style><style type="text/css" data-fela-rehydration="569" data-fela-type="RULE" media="all and (min-width: 904px) and (max-width: 1079.98px)">.i{display:none}.bv{width:64px}.cf{margin:0 64px}.cu{height:48px}.db{margin-bottom:52px}.dn{margin-bottom:48px}.ed{font-size:14px}.ee{line-height:20px}.ek{font-size:13px}.el{padding:5px 12px}.fg{display:flex}.fx{margin-bottom:68px}.gb{max-width:680px}.hl{font-size:42px}.hm{margin-top:1.19em}.hn{margin-bottom:32px}.ho{line-height:52px}.hp{letter-spacing:-0.011em}.hy{align-items:center}.jg{border-top:solid 1px #F2F2F2}.jh{border-bottom:solid 1px #F2F2F2}.ji{margin:32px 0 0}.jj{padding:3px 8px}.ju> *{margin-right:24px}.jv> :last-child{margin-right:0}.lm{margin:0}.mw{font-size:20px}.mx{margin-top:2.14em}.my{line-height:32px}.mz{letter-spacing:-0.003em}.nl{margin-top:56px}.om{font-size:24px}.on{margin-top:1.95em}.oo{line-height:30px}.op{letter-spacing:-0.016em}.oy{margin-top:0.94em}.rl{margin-bottom:104px}.rq{flex-direction:row}.ru{margin-bottom:0}.rv{margin-right:20px}.sr{max-width:500px}.tf{line-height:24px}.tg{letter-spacing:0}.tn{margin-bottom:88px}.tq{margin-bottom:72px}.ua{margin:40px 0 16px}.um{width:min-width}.ur{padding-top:72px}</style><style type="text/css" data-fela-rehydration="569" data-fela-type="RULE" media="all and (min-width: 728px) and (max-width: 903.98px)">.j{display:none}.w{display:flex}.x{justify-content:space-between}.bu{width:64px}.ce{margin:0 48px}.ct{height:48px}.da{margin-bottom:52px}.dm{margin-bottom:48px}.eb{font-size:13px}.ec{line-height:20px}.ej{padding:0px 8px 1px}.fw{margin-bottom:68px}.ga{max-width:680px}.hg{font-size:42px}.hh{margin-top:1.19em}.hi{margin-bottom:32px}.hj{line-height:52px}.hk{letter-spacing:-0.011em}.hx{align-items:center}.jc{border-top:solid 1px #F2F2F2}.jd{border-bottom:solid 1px #F2F2F2}.je{margin:32px 0 0}.jf{padding:3px 8px}.js> *{margin-right:24px}.jt> :last-child{margin-right:0}.ll{margin:0}.ms{font-size:20px}.mt{margin-top:2.14em}.mu{line-height:32px}.mv{letter-spacing:-0.003em}.nk{margin-top:56px}.oi{font-size:24px}.oj{margin-top:1.95em}.ok{line-height:30px}.ol{letter-spacing:-0.016em}.ox{margin-top:0.94em}.rk{margin-bottom:104px}.rr{flex-direction:row}.rw{margin-bottom:0}.rx{margin-right:20px}.ss{max-width:500px}.td{line-height:24px}.te{letter-spacing:0}.tm{margin-bottom:88px}.tp{margin-bottom:72px}.tz{margin:40px 0 16px}.ul{width:min-width}.uq{padding-top:72px}</style><style type="text/css" data-fela-rehydration="569" data-fela-type="RULE" media="all and (min-width: 552px) and (max-width: 727.98px)">.k{display:none}.u{display:flex}.v{justify-content:space-between}.bt{width:24px}.cd{margin:0 24px}.cs{height:40px}.cz{margin-bottom:44px}.dl{margin-bottom:32px}.dz{font-size:13px}.ea{line-height:20px}.ei{padding:0px 8px 1px}.fv{margin-bottom:4px}.hb{font-size:32px}.hc{margin-top:1.01em}.hd{margin-bottom:24px}.he{line-height:38px}.hf{letter-spacing:-0.014em}.hw{align-items:flex-start}.iu{flex-direction:column}.ja{margin:24px 0 0}.jb{padding:0}.jq> *{margin-right:8px}.jr> :last-child{margin-right:8px}.ki{margin-left:0px}.lk{margin:0}.ma{border:1px solid #F2F2F2}.mb{border-radius:99em}.mc{padding:0px 16px 0px 12px}.md{height:38px}.me{align-items:center}.mg svg{margin-right:8px}.mo{font-size:18px}.mp{margin-top:1.56em}.mq{line-height:28px}.mr{letter-spacing:-0.003em}.nj{margin-top:40px}.oe{font-size:20px}.of{margin-top:1.2em}.og{line-height:24px}.oh{letter-spacing:0}.ow{margin-top:0.67em}.rj{margin-bottom:96px}.ry{margin-bottom:20px}.rz{margin-right:0}.st{max-width:100%}.ta{font-size:24px}.tb{line-height:30px}.tc{letter-spacing:-0.016em}.tl{margin-bottom:64px}.ty{margin:32px 0 16px}.uk{width:100%}.up{padding-top:48px}.mf:hover{border-color:#E5E5E5}</style><style type="text/css" data-fela-rehydration="569" data-fela-type="RULE" media="print">.ra{display:none}</style><style type="text/css" data-fela-rehydration="569" data-fela-type="RULE" media="(prefers-reduced-motion: no-preference)">.pl{transition:transform 300ms cubic-bezier(0.2, 0, 0.2, 1)}</style></head><body><div id="root"><div class="a b c"><div class="d e f g h i j k"></div><script>document.domain = document.domain;</script><div class="l c"><div class="l m n o c"><div class="p q r s t u v w x i d y z"><a class="du ag dv bf ak b am an ao ap aq ar as at s u w i d q dw z" href="https://rsci.app.link/?%24canonical_url=https%3A%2F%2Fmedium.com%2Fp%2F843f86055c7f&amp;%7Efeature=LoOpenInAppButton&amp;%7Echannel=ShowPostUnderUser&amp;source=---top_nav_layout_nav----------------------------------" rel="noopener follow">Open in app<svg xmlns="http://www.w3.org/2000/svg" width="10" height="10" fill="none" viewBox="0 0 10 10" class="dt"><path fill="currentColor" d="M.985 8.485a.375.375 0 1 0 .53.53zM8.75 1.25h.375A.375.375 0 0 0 8.75.875zM8.375 6.5a.375.375 0 1 0 .75 0zM3.5.875a.375.375 0 1 0 0 .75zm-1.985 8.14 7.5-7.5-.53-.53-7.5 7.5zm6.86-7.765V6.5h.75V1.25zM3.5 1.625h5.25v-.75H3.5z"></path></svg></a><div class="ab q"><p class="bf b dx dy dz ea eb ec ed ee ef eg du"><span><button class="bf b dx dy eh dz ea ei eb ec ej ek ee el em eg eo ep eq er es et eu ev ew ex ey ez fa fb fc fd bm fe ff" data-testid="headerSignUpButton">Sign up</button></span></p><div class="ax l"><p class="bf b dx dy dz ea eb ec ed ee ef eg du"><span><a class="af ag ah ai aj ak al am an ao ap aq ar as at" data-testid="headerSignInButton" href="https://medium.com/m/signin?operation=login&amp;redirect=https%3A%2F%2Fryancor.medium.com%2Fgenetic-analysis-of-cryptowall-ransomware-843f86055c7f&amp;source=post_page---top_nav_layout_nav-----------------------global_nav-----------" rel="noopener follow">Sign in</a></span></p></div></div></div><div class="p q r ab ac"><div class="ab q ae"><a class="af ag ah ai aj ak al am an ao ap aq ar as at ab" aria-label="Homepage" data-testid="headerMediumLogo" href="https://medium.com/?source=---top_nav_layout_nav----------------------------------" rel="noopener follow"><svg xmlns="http://www.w3.org/2000/svg" width="719" height="160" fill="none" viewBox="0 0 719 160" class="au av aw"><path fill="#242424" d="m174.104 9.734.215-.047V8.02H130.39L89.6 103.89 48.81 8.021H1.472v1.666l.212.047c8.018 1.81 12.09 4.509 12.09 14.242V137.93c0 9.734-4.087 12.433-12.106 14.243l-.212.047v1.671h32.118v-1.665l-.213-.048c-8.018-1.809-12.089-4.509-12.089-14.242V30.586l52.399 123.305h2.972l53.925-126.743V140.75c-.687 7.688-4.721 10.062-11.982 11.701l-.215.05v1.652h55.948v-1.652l-.215-.05c-7.269-1.639-11.4-4.013-12.087-11.701l-.037-116.774h.037c0-9.733 4.071-12.432 12.087-14.242m25.555 75.488c.915-20.474 8.268-35.252 20.606-35.507 3.806.063 6.998 1.312 9.479 3.714 5.272 5.118 7.751 15.812 7.368 31.793zm-.553 5.77h65.573v-.275c-.186-15.656-4.721-27.834-13.466-36.196-7.559-7.227-18.751-11.203-30.507-11.203h-.263c-6.101 0-13.584 1.48-18.909 4.16-6.061 2.807-11.407 7.003-15.855 12.511-7.161 8.874-11.499 20.866-12.554 34.343q-.05.606-.092 1.212a50 50 0 0 0-.065 1.151 85.807 85.807 0 0 0-.094 5.689c.71 30.524 17.198 54.917 46.483 54.917 25.705 0 40.675-18.791 44.407-44.013l-1.886-.664c-6.557 13.556-18.334 21.771-31.738 20.769-18.297-1.369-32.314-19.922-31.042-42.395m139.722 41.359c-2.151 5.101-6.639 7.908-12.653 7.908s-11.513-4.129-15.418-11.63c-4.197-8.053-6.405-19.436-6.405-32.92 0-28.067 8.729-46.22 22.24-46.22 5.657 0 10.111 2.807 12.236 7.704zm43.499 20.008c-8.019-1.897-12.089-4.722-12.089-14.951V1.309l-48.716 14.353v1.757l.299-.024c6.72-.543 11.278.386 13.925 2.83 2.072 1.915 3.082 4.853 3.082 8.987v18.66c-4.803-3.067-10.516-4.56-17.448-4.56-14.059 0-26.909 5.92-36.176 16.672-9.66 11.205-14.767 26.518-14.767 44.278-.003 31.72 15.612 53.039 38.851 53.039 13.595 0 24.533-7.449 29.54-20.013v16.865h43.711v-1.746zM424.1 19.819c0-9.904-7.468-17.374-17.375-17.374-9.859 0-17.573 7.632-17.573 17.374s7.721 17.374 17.573 17.374c9.907 0 17.375-7.47 17.375-17.374m11.499 132.546c-8.019-1.897-12.089-4.722-12.089-14.951h-.035V43.635l-43.714 12.551v1.705l.263.024c9.458.842 12.047 4.1 12.047 15.152v81.086h43.751v-1.746zm112.013 0c-8.018-1.897-12.089-4.722-12.089-14.951V43.635l-41.621 12.137v1.71l.246.026c7.733.813 9.967 4.257 9.967 15.36v59.279c-2.578 5.102-7.415 8.131-13.274 8.336-9.503 0-14.736-6.419-14.736-18.073V43.638l-43.714 12.55v1.703l.262.024c9.459.84 12.05 4.097 12.05 15.152v50.17a56.3 56.3 0 0 0 .91 10.444l.787 3.423c3.701 13.262 13.398 20.197 28.59 20.197 12.868 0 24.147-7.966 29.115-20.43v17.311h43.714v-1.747zm169.818 1.788v-1.749l-.213-.05c-8.7-2.006-12.089-5.789-12.089-13.49v-63.79c0-19.89-11.171-31.761-29.883-31.761-13.64 0-25.141 7.882-29.569 20.16-3.517-13.01-13.639-20.16-28.606-20.16-13.146 0-23.449 6.938-27.869 18.657V43.643L545.487 55.68v1.715l.263.024c9.345.829 12.047 4.181 12.047 14.95v81.784h40.787v-1.746l-.215-.053c-6.941-1.631-9.181-4.606-9.181-12.239V66.998c1.836-4.289 5.537-9.37 12.853-9.37 9.086 0 13.692 6.296 13.692 18.697v77.828h40.797v-1.746l-.215-.053c-6.94-1.631-9.18-4.606-9.18-12.239V75.066a42 42 0 0 0-.578-7.26c1.947-4.661 5.86-10.177 13.475-10.177 9.214 0 13.691 6.114 13.691 18.696v77.828z"></path></svg></a><div class="ax h"><div class="ab ay az ba bb q bc bd"><div class="bm" aria-hidden="false" aria-describedby="searchResults" aria-labelledby="searchResults"></div><div class="bn bo ab"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><path fill="currentColor" fill-rule="evenodd" d="M4.092 11.06a6.95 6.95 0 1 1 13.9 0 6.95 6.95 0 0 1-13.9 0m6.95-8.05a8.05 8.05 0 1 0 5.13 14.26l3.75 3.75a.56.56 0 1 0 .79-.79l-3.73-3.73A8.05 8.05 0 0 0 11.042 3z" clip-rule="evenodd"></path></svg></div><input role="combobox" aria-controls="searchResults" aria-expanded="false" aria-label="search" data-testid="headerSearchInput" tabindex="0" class="ay be bf bg z bh bi bj bk bl" placeholder="Search" value=""/></div></div></div><div class="h k w fg fh"><div class="fi ab"><span><a class="af ag ah ai aj ak al am an ao ap aq ar as at" data-testid="headerWriteButton" href="https://medium.com/m/signin?operation=register&amp;redirect=https%3A%2F%2Fmedium.com%2Fnew-story&amp;source=---top_nav_layout_nav-----------------------new_post_topnav-----------" rel="noopener follow"><div class="bf b bg z du fj fk ab q fl fm"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24" aria-label="Write"><path fill="currentColor" d="M14 4a.5.5 0 0 0 0-1zm7 6a.5.5 0 0 0-1 0zm-7-7H4v1h10zM3 4v16h1V4zm1 17h16v-1H4zm17-1V10h-1v10zm-1 1a1 1 0 0 0 1-1h-1zM3 20a1 1 0 0 0 1 1v-1zM4 3a1 1 0 0 0-1 1h1z"></path><path stroke="currentColor" d="m17.5 4.5-8.458 8.458a.25.25 0 0 0-.06.098l-.824 2.47a.25.25 0 0 0 .316.316l2.47-.823a.25.25 0 0 0 .098-.06L19.5 6.5m-2-2 2.323-2.323a.25.25 0 0 1 .354 0l1.646 1.646a.25.25 0 0 1 0 .354L19.5 6.5m-2-2 2 2"></path></svg><div class="dt l">Write</div></div></a></span></div></div><div class="k j i d"><div class="fi ab"><a class="af ag ah ai aj ak al am an ao ap aq ar as at" data-testid="headerSearchButton" href="https://medium.com/search?source=---top_nav_layout_nav----------------------------------" rel="noopener follow"><div class="bf b bg z du fj fk ab q fl fm"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24" aria-label="Search"><path fill="currentColor" fill-rule="evenodd" d="M4.092 11.06a6.95 6.95 0 1 1 13.9 0 6.95 6.95 0 0 1-13.9 0m6.95-8.05a8.05 8.05 0 1 0 5.13 14.26l3.75 3.75a.56.56 0 1 0 .79-.79l-3.73-3.73A8.05 8.05 0 0 0 11.042 3z" clip-rule="evenodd"></path></svg></div></a></div></div><div class="fi h k j"><div class="ab q"><p class="bf b dx dy dz ea eb ec ed ee ef eg du"><span><button class="bf b dx dy eh dz ea ei eb ec ej ek ee el em eg eo ep eq er es et eu ev ew ex ey ez fa fb fc fd bm fe ff" data-testid="headerSignUpButton">Sign up</button></span></p><div class="ax l"><p class="bf b dx dy dz ea eb ec ed ee ef eg du"><span><a class="af ag ah ai aj ak al am an ao ap aq ar as at" data-testid="headerSignInButton" href="https://medium.com/m/signin?operation=login&amp;redirect=https%3A%2F%2Fryancor.medium.com%2Fgenetic-analysis-of-cryptowall-ransomware-843f86055c7f&amp;source=post_page---top_nav_layout_nav-----------------------global_nav-----------" rel="noopener follow">Sign in</a></span></p></div></div></div><div class="l" aria-hidden="false"><button class="ay fn am ab q ao fo fp fq" aria-label="user options menu" data-testid="headerUserIcon"><div class="l fj"><img alt="" class="l fd by bz ca cx" src="https://miro.medium.com/v2/resize:fill:64:64/1*dmbNkD5D-u45r44go_cf0g.png" width="32" height="32" loading="lazy" role="presentation"/><div class="fr by l bz ca fs n ay ft"></div></div></button></div></div></div><div class="l"><div class="fu fv fw fx fy l"><div class="ab cb"><div class="ci bh fz ga gb gc"></div></div><article><div class="l"><div class="l"><span class="l"></span><section><div><div class="fs gi gj gk gl gm"></div><div class="gn go gp gq gr"><div class="ab cb"><div class="ci bh fz ga gb gc"><div><h1 id="3c7d" class="pw-post-title gs gt gu bf gv gw gx gy gz ha hb hc hd he hf hg hh hi hj hk hl hm hn ho hp hq hr hs ht hu bk" data-testid="storyTitle">Genetic Analysis of CryptoWall Ransomware</h1><div><div class="speechify-ignore ab cp"><div class="speechify-ignore bh l"><div class="hv hw hx hy hz ab"><div><div class="ab ia"><div><div class="bm" aria-hidden="false"><a rel="noopener follow" href="/?source=post_page---byline--843f86055c7f--------------------------------"><div class="l ib ic by id ie"><div class="l fj"><img alt="Ryan Cornateanu" class="l fd by dd de cx" src="https://miro.medium.com/v2/resize:fill:88:88/2*C-CaB_Tc2FWfSLM1qV14Gg.jpeg" width="44" height="44" loading="lazy" data-testid="authorPhoto"/><div class="if by l dd de fs n ig ft"></div></div></div></a></div></div></div></div><div class="bn bh l"><div class="ab"><div style="flex:1"><span class="bf b bg z bk"><div class="ih ab q"><div class="ab q ii"><div class="ab q"><div><div class="bm" aria-hidden="false"><p class="bf b ij ik bk"><a class="af ag ah ai aj ak al am an ao ap aq ar il" data-testid="authorName" rel="noopener follow" href="/?source=post_page---byline--843f86055c7f--------------------------------">Ryan Cornateanu</a></p></div></div></div><span class="im in" aria-hidden="true"><span class="bf b bg z du">·</span></span><p class="bf b ij ik du"><span><a class="io ip ah ai aj ak al am an ao ap aq ar ex iq ir" href="https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fsubscribe%2Fuser%2F239d5a05aa69&amp;operation=register&amp;redirect=https%3A%2F%2Fryancor.medium.com%2Fgenetic-analysis-of-cryptowall-ransomware-843f86055c7f&amp;user=Ryan+Cornateanu&amp;userId=239d5a05aa69&amp;source=post_page-239d5a05aa69--byline--843f86055c7f---------------------post_header-----------" rel="noopener follow">Follow</a></span></p></div></div></span></div></div><div class="l is"><span class="bf b bg z du"><div class="ab cn it iu iv"><span class="bf b bg z du"><div class="ab ae"><span data-testid="storyReadTime">26 min read</span><div class="iw ix l" aria-hidden="true"><span class="l" aria-hidden="true"><span class="bf b bg z du">·</span></span></div><span data-testid="storyPublishDate">Nov 23, 2020</span></div></span></div></span></div></div></div><div class="ab cp iy iz ja jb jc jd je jf jg jh ji jj jk jl jm jn"><div class="h k w fg fh q"><div class="kd l"><div class="ab q ke kf"><div class="pw-multi-vote-icon fj kg kh ki kj"><span><a class="af ag ah ai aj ak al am an ao ap aq ar as at" data-testid="headerClapButton" href="https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Fp%2F843f86055c7f&amp;operation=register&amp;redirect=https%3A%2F%2Fryancor.medium.com%2Fgenetic-analysis-of-cryptowall-ransomware-843f86055c7f&amp;user=Ryan+Cornateanu&amp;userId=239d5a05aa69&amp;source=---header_actions--843f86055c7f---------------------clap_footer-----------" rel="noopener follow"><div><div class="bm" aria-hidden="false"><div class="kk ao kl km kn ko am kp kq kr kj"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" aria-label="clap"><path fill-rule="evenodd" d="M11.37.828 12 3.282l.63-2.454zM13.916 3.953l1.523-2.112-1.184-.39zM8.589 1.84l1.522 2.112-.337-2.501zM18.523 18.92c-.86.86-1.75 1.246-2.62 1.33a6 6 0 0 0 .407-.372c2.388-2.389 2.86-4.951 1.399-7.623l-.912-1.603-.79-1.672c-.26-.56-.194-.98.203-1.288a.7.7 0 0 1 .546-.132c.283.046.546.231.728.5l2.363 4.157c.976 1.624 1.141 4.237-1.324 6.702m-10.999-.438L3.37 14.328a.828.828 0 0 1 .585-1.408.83.83 0 0 1 .585.242l2.158 2.157a.365.365 0 0 0 .516-.516l-2.157-2.158-1.449-1.449a.826.826 0 0 1 1.167-1.17l3.438 3.44a.363.363 0 0 0 .516 0 .364.364 0 0 0 0-.516L5.293 9.513l-.97-.97a.826.826 0 0 1 0-1.166.84.84 0 0 1 1.167 0l.97.968 3.437 3.436a.36.36 0 0 0 .517 0 .366.366 0 0 0 0-.516L6.977 7.83a.82.82 0 0 1-.241-.584.82.82 0 0 1 .824-.826c.219 0 .43.087.584.242l5.787 5.787a.366.366 0 0 0 .587-.415l-1.117-2.363c-.26-.56-.194-.98.204-1.289a.7.7 0 0 1 .546-.132c.283.046.545.232.727.501l2.193 3.86c1.302 2.38.883 4.59-1.277 6.75-1.156 1.156-2.602 1.627-4.19 1.367-1.418-.236-2.866-1.033-4.079-2.246M10.75 5.971l2.12 2.12c-.41.502-.465 1.17-.128 1.89l.22.465-3.523-3.523a.8.8 0 0 1-.097-.368c0-.22.086-.428.241-.584a.847.847 0 0 1 1.167 0m7.355 1.705c-.31-.461-.746-.758-1.23-.837a1.44 1.44 0 0 0-1.11.275c-.312.24-.505.543-.59.881a1.74 1.74 0 0 0-.906-.465 1.47 1.47 0 0 0-.82.106l-2.182-2.182a1.56 1.56 0 0 0-2.2 0 1.54 1.54 0 0 0-.396.701 1.56 1.56 0 0 0-2.21-.01 1.55 1.55 0 0 0-.416.753c-.624-.624-1.649-.624-2.237-.037a1.557 1.557 0 0 0 0 2.2c-.239.1-.501.238-.715.453a1.56 1.56 0 0 0 0 2.2l.516.515a1.556 1.556 0 0 0-.753 2.615L7.01 19c1.32 1.319 2.909 2.189 4.475 2.449q.482.08.971.08c.85 0 1.653-.198 2.393-.579.231.033.46.054.686.054 1.266 0 2.457-.52 3.505-1.567 2.763-2.763 2.552-5.734 1.439-7.586z" clip-rule="evenodd"></path></svg></div></div></div></a></span></div><div class="pw-multi-vote-count l ks kt ku kv kw kx ky"><p class="bf b dv z du"><span class="kz">--</span></p></div></div></div><div><div class="bm" aria-hidden="false"><button class="ao kk lc ld ab q fk le lf" aria-label="responses"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" class="lb"><path d="M18.006 16.803c1.533-1.456 2.234-3.325 2.234-5.321C20.24 7.357 16.709 4 12.191 4S4 7.357 4 11.482c0 4.126 3.674 7.482 8.191 7.482.817 0 1.622-.111 2.393-.327.231.2.48.391.744.559 1.06.693 2.203 1.044 3.399 1.044.224-.008.4-.112.486-.287a.49.49 0 0 0-.042-.518c-.495-.67-.845-1.364-1.04-2.057a4 4 0 0 1-.125-.598zm-3.122 1.055-.067-.223-.315.096a8 8 0 0 1-2.311.338c-4.023 0-7.292-2.955-7.292-6.587 0-3.633 3.269-6.588 7.292-6.588 4.014 0 7.112 2.958 7.112 6.593 0 1.794-.608 3.469-2.027 4.72l-.195.168v.255c0 .056 0 .151.016.295.025.231.081.478.154.733.154.558.398 1.117.722 1.659a5.3 5.3 0 0 1-2.165-.845c-.276-.176-.714-.383-.941-.59z"></path></svg><p class="bf b dv z du"><span class="pw-responses-count la lb">1</span></p></button></div></div></div><div class="ab q jo jp jq jr js jt ju jv jw jx jy jz ka kb kc"><div class="lg k j i d"></div><div class="h k"><div><div class="bm" aria-hidden="false"><span><a class="af ag ah ai aj ak al am an ao ap aq ar as at" data-testid="headerBookmarkButton" href="https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F843f86055c7f&amp;operation=register&amp;redirect=https%3A%2F%2Fryancor.medium.com%2Fgenetic-analysis-of-cryptowall-ransomware-843f86055c7f&amp;source=---header_actions--843f86055c7f---------------------bookmark_footer-----------" rel="noopener follow"><svg xmlns="http://www.w3.org/2000/svg" width="25" height="25" fill="none" viewBox="0 0 25 25" class="du lh" aria-label="Add to list bookmark button"><path fill="currentColor" d="M18 2.5a.5.5 0 0 1 1 0V5h2.5a.5.5 0 0 1 0 1H19v2.5a.5.5 0 1 1-1 0V6h-2.5a.5.5 0 0 1 0-1H18zM7 7a1 1 0 0 1 1-1h3.5a.5.5 0 0 0 0-1H8a2 2 0 0 0-2 2v14a.5.5 0 0 0 .805.396L12.5 17l5.695 4.396A.5.5 0 0 0 19 21v-8.5a.5.5 0 0 0-1 0v7.485l-5.195-4.012a.5.5 0 0 0-.61 0L7 19.985z"></path></svg></a></span></div></div></div><div class="fd li cn"><div class="l ae"><div class="ab cb"><div class="lj lk ll lm ln lo ci bh"><div class="ab"><div class="bm bh" aria-hidden="false"><div><div class="bm" aria-hidden="false"><button aria-label="Listen" data-testid="audioPlayButton" class="af fk ah ai aj ak al lp an ao ap ex lq lr lf ls lt lu lv lw s lx ly lz ma mb mc md u me mf mg"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><path fill="currentColor" fill-rule="evenodd" d="M3 12a9 9 0 1 1 18 0 9 9 0 0 1-18 0m9-10C6.477 2 2 6.477 2 12s4.477 10 10 10 10-4.477 10-10S17.523 2 12 2m3.376 10.416-4.599 3.066a.5.5 0 0 1-.777-.416V8.934a.5.5 0 0 1 .777-.416l4.599 3.066a.5.5 0 0 1 0 .832" clip-rule="evenodd"></path></svg><div class="j i d"><p class="bf b bg z du">Listen</p></div></button></div></div></div></div></div></div></div></div><div class="bm" aria-hidden="false" aria-describedby="postFooterSocialMenu" aria-labelledby="postFooterSocialMenu"><div><div class="bm" aria-hidden="false"><button aria-controls="postFooterSocialMenu" aria-expanded="false" aria-label="Share Post" data-testid="headerSocialShareButton" class="af fk ah ai aj ak al lp an ao ap ex lq lr lf ls lt lu lv lw s lx ly lz ma mb mc md u me mf mg"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><path fill="currentColor" fill-rule="evenodd" d="M15.218 4.931a.4.4 0 0 1-.118.132l.012.006a.45.45 0 0 1-.292.074.5.5 0 0 1-.3-.13l-2.02-2.02v7.07c0 .28-.23.5-.5.5s-.5-.22-.5-.5v-7.04l-2 2a.45.45 0 0 1-.57.04h-.02a.4.4 0 0 1-.16-.3.4.4 0 0 1 .1-.32l2.8-2.8a.5.5 0 0 1 .7 0l2.8 2.79a.42.42 0 0 1 .068.498m-.106.138.008.004v-.01zM16 7.063h1.5a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2h-11c-1.1 0-2-.9-2-2v-10a2 2 0 0 1 2-2H8a.5.5 0 0 1 .35.15.5.5 0 0 1 .15.35.5.5 0 0 1-.15.35.5.5 0 0 1-.35.15H6.4c-.5 0-.9.4-.9.9v10.2a.9.9 0 0 0 .9.9h11.2c.5 0 .9-.4.9-.9v-10.2c0-.5-.4-.9-.9-.9H16a.5.5 0 0 1 0-1" clip-rule="evenodd"></path></svg><div class="j i d"><p class="bf b bg z du">Share</p></div></button></div></div></div></div></div></div></div></div></div><p id="f3dd" class="pw-post-body-paragraph mh mi gu mj b mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd ne gn bk">A strain of a Crowti ransomware emerged, the variant known as CryptoWall, was spotted by researchers in early 2013. Ransomware by nature is extraordinarily destructive but this one in particular was a bit beyond that. Over the next 2 years, with over 5.25 billion files encrypted and 1 million+ systems infected, this virus has definitely made its mark in the pool of cyber weapons. Below you can find a list of the top ten infected countries:</p><figure class="ni nj nk nl nm nn nf ng paragraph-image"><div class="nf ng nh"><picture><source srcSet="https://miro.medium.com/v2/resize:fit:640/format:webp/1*tTctil7mmZ7ER7-CGbX3UQ.png 640w, https://miro.medium.com/v2/resize:fit:720/format:webp/1*tTctil7mmZ7ER7-CGbX3UQ.png 720w, https://miro.medium.com/v2/resize:fit:750/format:webp/1*tTctil7mmZ7ER7-CGbX3UQ.png 750w, https://miro.medium.com/v2/resize:fit:786/format:webp/1*tTctil7mmZ7ER7-CGbX3UQ.png 786w, https://miro.medium.com/v2/resize:fit:828/format:webp/1*tTctil7mmZ7ER7-CGbX3UQ.png 828w, https://miro.medium.com/v2/resize:fit:1100/format:webp/1*tTctil7mmZ7ER7-CGbX3UQ.png 1100w, https://miro.medium.com/v2/resize:fit:800/format:webp/1*tTctil7mmZ7ER7-CGbX3UQ.png 800w" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 400px" type="image/webp"/><source data-testid="og" srcSet="https://miro.medium.com/v2/resize:fit:640/1*tTctil7mmZ7ER7-CGbX3UQ.png 640w, https://miro.medium.com/v2/resize:fit:720/1*tTctil7mmZ7ER7-CGbX3UQ.png 720w, https://miro.medium.com/v2/resize:fit:750/1*tTctil7mmZ7ER7-CGbX3UQ.png 750w, https://miro.medium.com/v2/resize:fit:786/1*tTctil7mmZ7ER7-CGbX3UQ.png 786w, https://miro.medium.com/v2/resize:fit:828/1*tTctil7mmZ7ER7-CGbX3UQ.png 828w, https://miro.medium.com/v2/resize:fit:1100/1*tTctil7mmZ7ER7-CGbX3UQ.png 1100w, https://miro.medium.com/v2/resize:fit:800/1*tTctil7mmZ7ER7-CGbX3UQ.png 800w" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 400px"/><img alt="" class="bh lo no c" width="400" height="305" loading="eager" role="presentation"/></picture></div><figcaption class="np ff nq nf ng nr ns bf b bg z du">Source: Dell Secure Works</figcaption></figure><p id="f10b" class="pw-post-body-paragraph mh mi gu mj b mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd ne gn bk">CryptoWall is distinct in that its campaign ID initially gets sent back to their C2 servers for verification purposes. The motivation behind these ID’s are to track samples by the loader vectors. The one we will be analyzing in our laboratory experiment has the <code class="cx nt nu nv nw b">crypt1</code> ID that was first seen around February 26th, 2014. The infection vector is still unknown today but we will be showing how to unpack the loader, and extract the main ransomware file. Some of the contagions have been caused by Drive-by downloads, Cutwail/Upatre, Infinity/Goon exploit kit, Magnitude exploit kit, Nuclear exploit kit/Pony Loader, and Gozi/Neverquest.</p><h1 id="a181" class="nx ny gu bf nz oa ob oc od oe of og oh oi oj ok ol om on oo op oq or os ot ou bk">Initial Analysis</h1><p id="4cc7" class="pw-post-body-paragraph mh mi gu mj b mk ov mm mn mo ow mq mr ms ox mu mv mw oy my mz na oz nc nd ne gn bk">We will start by providing the hash of the packed loader file:</p><pre class="ni nj nk nl nm pa nw pb pc ay pd bk"><span id="08d2" class="pe ny gu nw b ij pf pg l ph pi">➜  CryptoWall git:(master) openssl md5 cryptowall.bin<br/>MD5(cryptowall.bin)= 47363b94cee907e2b8926c1be61150c7</span></pre><p id="a21c" class="pw-post-body-paragraph mh mi gu mj b mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd ne gn bk">Running the <code class="cx nt nu nv nw b">file</code> command on the bin executable, we can confirm that this is a <code class="cx nt nu nv nw b">PE32 executable (GUI) Intel 80386, for MS Windows</code>. Similar to the analysis we did on the <a class="af pj" href="https://medium.com/@ryancor/extracting-embedded-payloads-from-malware-aaca8e9aa1a9" rel="noopener">Cozy Bear’s Beacon Loader</a>, we will be using IDA Pro as our flavor of disassembler tools.</p><p id="dbe5" class="pw-post-body-paragraph mh mi gu mj b mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd ne gn bk">Loading the packed executable into our control flow graph view, it becomes apparent fairly quickly that this is packed loader code, and the real CryptoWall code is hiding somewhere within.</p><figure class="ni nj nk nl nm nn nf ng paragraph-image"><div role="button" tabindex="0" class="pl pm fj pn bh po"><div class="nf ng pk"><picture><source srcSet="https://miro.medium.com/v2/resize:fit:640/format:webp/1*ZCgluueIqRbBgNEjrvCeUQ.png 640w, https://miro.medium.com/v2/resize:fit:720/format:webp/1*ZCgluueIqRbBgNEjrvCeUQ.png 720w, https://miro.medium.com/v2/resize:fit:750/format:webp/1*ZCgluueIqRbBgNEjrvCeUQ.png 750w, https://miro.medium.com/v2/resize:fit:786/format:webp/1*ZCgluueIqRbBgNEjrvCeUQ.png 786w, https://miro.medium.com/v2/resize:fit:828/format:webp/1*ZCgluueIqRbBgNEjrvCeUQ.png 828w, https://miro.medium.com/v2/resize:fit:1100/format:webp/1*ZCgluueIqRbBgNEjrvCeUQ.png 1100w, https://miro.medium.com/v2/resize:fit:1400/format:webp/1*ZCgluueIqRbBgNEjrvCeUQ.png 1400w" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px" type="image/webp"/><source data-testid="og" srcSet="https://miro.medium.com/v2/resize:fit:640/1*ZCgluueIqRbBgNEjrvCeUQ.png 640w, https://miro.medium.com/v2/resize:fit:720/1*ZCgluueIqRbBgNEjrvCeUQ.png 720w, https://miro.medium.com/v2/resize:fit:750/1*ZCgluueIqRbBgNEjrvCeUQ.png 750w, https://miro.medium.com/v2/resize:fit:786/1*ZCgluueIqRbBgNEjrvCeUQ.png 786w, https://miro.medium.com/v2/resize:fit:828/1*ZCgluueIqRbBgNEjrvCeUQ.png 828w, https://miro.medium.com/v2/resize:fit:1100/1*ZCgluueIqRbBgNEjrvCeUQ.png 1100w, https://miro.medium.com/v2/resize:fit:1400/1*ZCgluueIqRbBgNEjrvCeUQ.png 1400w" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px"/><img alt="" class="bh lo no c" width="700" height="247" loading="lazy" role="presentation"/></picture></div></div><figcaption class="np ff nq nf ng nr ns bf b bg z du">WinMain CFG View</figcaption></figure><p id="c073" class="pw-post-body-paragraph mh mi gu mj b mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd ne gn bk">Checking the resource section of this binary only shows that it has two valid entries; the first one being a size of <code class="cx nt nu nv nw b">91,740</code> bytes. Maybe we will get lucky and the hidden PE will be here?</p><figure class="ni nj nk nl nm nn nf ng paragraph-image"><div role="button" tabindex="0" class="pl pm fj pn bh po"><div class="nf ng pp"><picture><source srcSet="https://miro.medium.com/v2/resize:fit:640/format:webp/1*MUobHY4FJVZaEom99RwgSg.png 640w, https://miro.medium.com/v2/resize:fit:720/format:webp/1*MUobHY4FJVZaEom99RwgSg.png 720w, https://miro.medium.com/v2/resize:fit:750/format:webp/1*MUobHY4FJVZaEom99RwgSg.png 750w, https://miro.medium.com/v2/resize:fit:786/format:webp/1*MUobHY4FJVZaEom99RwgSg.png 786w, https://miro.medium.com/v2/resize:fit:828/format:webp/1*MUobHY4FJVZaEom99RwgSg.png 828w, https://miro.medium.com/v2/resize:fit:1100/format:webp/1*MUobHY4FJVZaEom99RwgSg.png 1100w, https://miro.medium.com/v2/resize:fit:1400/format:webp/1*MUobHY4FJVZaEom99RwgSg.png 1400w" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px" type="image/webp"/><source data-testid="og" srcSet="https://miro.medium.com/v2/resize:fit:640/1*MUobHY4FJVZaEom99RwgSg.png 640w, https://miro.medium.com/v2/resize:fit:720/1*MUobHY4FJVZaEom99RwgSg.png 720w, https://miro.medium.com/v2/resize:fit:750/1*MUobHY4FJVZaEom99RwgSg.png 750w, https://miro.medium.com/v2/resize:fit:786/1*MUobHY4FJVZaEom99RwgSg.png 786w, https://miro.medium.com/v2/resize:fit:828/1*MUobHY4FJVZaEom99RwgSg.png 828w, https://miro.medium.com/v2/resize:fit:1100/1*MUobHY4FJVZaEom99RwgSg.png 1100w, https://miro.medium.com/v2/resize:fit:1400/1*MUobHY4FJVZaEom99RwgSg.png 1400w" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px"/><img alt="" class="bh lo no c" width="700" height="437" loading="lazy" role="presentation"/></picture></div></div><figcaption class="np ff nq nf ng nr ns bf b bg z du">Dumped resource section</figcaption></figure><p id="a296" class="pw-post-body-paragraph mh mi gu mj b mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd ne gn bk">Unfortunately not! This looks like some custom base64 encoded data that will hopefully get used later somewhere down the line in our dissection of the virus. If we scroll down to the end of <code class="cx nt nu nv nw b">WinMain()</code> you’ll notice a jump instruction that points to <code class="cx nt nu nv nw b">EAX</code>. It will look something like this in the decompiler view:</p><pre class="ni nj nk nl nm pa nw pb pc ay pd bk"><span id="f332" class="pe ny gu nw b ij pf pg l ph pi">JUMPOUT(eax=decrypted_code_segment);</span></pre><h1 id="a7f7" class="nx ny gu bf nz oa ob oc od oe of og oh oi oj ok ol om on oo op oq or os ot ou bk">Unpacking Binary Loaders</h1><p id="5ebb" class="pw-post-body-paragraph mh mi gu mj b mk ov mm mn mo ow mq mr ms ox mu mv mw oy my mz na oz nc nd ne gn bk">At this point, we have to open up a debugger, and view this area of code as it is being resolved dynamically. What you will want to do is a set a breakpoint at <code class="cx nt nu nv nw b">0x00402dda</code>, which is the location of the <code class="cx nt nu nv nw b">jmp</code> instruction. Once you hit this breakpoint after continuing execution, you’ll notice <code class="cx nt nu nv nw b">EAX</code> now points to a new segment of code. Dumping <code class="cx nt nu nv nw b">EAX</code> in the disassembler will lead you to the 2nd stage loader. Use the debugger’s <code class="cx nt nu nv nw b">step into</code> feature, and our instruction pointer should be safely inside the decrypted loader area.</p><figure class="ni nj nk nl nm nn nf ng paragraph-image"><div role="button" tabindex="0" class="pl pm fj pn bh po"><div class="nf ng pq"><picture><source srcSet="https://miro.medium.com/v2/resize:fit:640/format:webp/1*2WUl-S9PhPMvF25ej4Diwg.jpeg 640w, https://miro.medium.com/v2/resize:fit:720/format:webp/1*2WUl-S9PhPMvF25ej4Diwg.jpeg 720w, https://miro.medium.com/v2/resize:fit:750/format:webp/1*2WUl-S9PhPMvF25ej4Diwg.jpeg 750w, https://miro.medium.com/v2/resize:fit:786/format:webp/1*2WUl-S9PhPMvF25ej4Diwg.jpeg 786w, https://miro.medium.com/v2/resize:fit:828/format:webp/1*2WUl-S9PhPMvF25ej4Diwg.jpeg 828w, https://miro.medium.com/v2/resize:fit:1100/format:webp/1*2WUl-S9PhPMvF25ej4Diwg.jpeg 1100w, https://miro.medium.com/v2/resize:fit:1400/format:webp/1*2WUl-S9PhPMvF25ej4Diwg.jpeg 1400w" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px" type="image/webp"/><source data-testid="og" srcSet="https://miro.medium.com/v2/resize:fit:640/1*2WUl-S9PhPMvF25ej4Diwg.jpeg 640w, https://miro.medium.com/v2/resize:fit:720/1*2WUl-S9PhPMvF25ej4Diwg.jpeg 720w, https://miro.medium.com/v2/resize:fit:750/1*2WUl-S9PhPMvF25ej4Diwg.jpeg 750w, https://miro.medium.com/v2/resize:fit:786/1*2WUl-S9PhPMvF25ej4Diwg.jpeg 786w, https://miro.medium.com/v2/resize:fit:828/1*2WUl-S9PhPMvF25ej4Diwg.jpeg 828w, https://miro.medium.com/v2/resize:fit:1100/1*2WUl-S9PhPMvF25ej4Diwg.jpeg 1100w, https://miro.medium.com/v2/resize:fit:1400/1*2WUl-S9PhPMvF25ej4Diwg.jpeg 1400w" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px"/><img alt="" class="bh lo no c" width="700" height="218" loading="lazy" role="presentation"/></picture></div></div><figcaption class="np ff nq nf ng nr ns bf b bg z du">2nd Stage</figcaption></figure><p id="b4cd" class="pw-post-body-paragraph mh mi gu mj b mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd ne gn bk">Let’s go over what is happening at this stage of the malware. <code class="cx nt nu nv nw b">EBP+var_EA6E</code> gets loaded effectively into <code class="cx nt nu nv nw b">EDX</code>, <code class="cx nt nu nv nw b">EAX</code> then holds the index count incrementer to follow the next few bytes at data address <code class="cx nt nu nv nw b">302C9AEh</code>.</p><pre class="ni nj nk nl nm pa nw pb pc ay pd bk"><span id="b6fc" class="pe ny gu nw b ij pf pg l ph pi">.data:0302CA46   mov     bl, byte ptr (loc_302C9AE - 302C9AEh)[eax]<br/>.data:0302CA48   add     ebx, esi<br/>.data:0302CA4A   mov     [edx], bl</span></pre><p id="f522" class="pw-post-body-paragraph mh mi gu mj b mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd ne gn bk">All this snippet of code is doing is loading bytes from the address mentioned above and storing it at <code class="cx nt nu nv nw b">bl</code> (the lower 8 bits of <code class="cx nt nu nv nw b">EBX</code>). The byte from <code class="cx nt nu nv nw b">bl</code> is then moved into the pointer value of <code class="cx nt nu nv nw b">EDX</code>. At the end of this routine <code class="cx nt nu nv nw b">EBP+var_EA6E</code> will hold a valid address that gets called as <code class="cx nt nu nv nw b">EAX</code> (we can see the line highlighted in red in the image above). Stepping into <code class="cx nt nu nv nw b">EAX</code> will now bring us to the third stage of the loading process.</p><p id="05cb" class="pw-post-body-paragraph mh mi gu mj b mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd ne gn bk">A lot is going on at this point; this function has a couple thousand lines of assembly to go over, so at this point it’s better we open the decompiler view to see what is happening. After resolving some of the strings on the stack, there is some key information that starts to pop up on the resource section we viewed earlier.</p><pre class="ni nj nk nl nm pa nw pb pc ay pd bk"><span id="0a3f" class="pe ny gu nw b ij pf pg l ph pi">pLockRsrc = GetProcAddress(kernel32, &amp;LockResource);<br/>pSizeofResource = GetProcAddress(kernel32, &amp;SizeofResource);<br/>pLoadResource = GetProcAddress(kernel32, &amp;LoadResource);<br/>pGetModuleHandle = GetProcAddress(kernel32, &amp;GetModuleHandleA);<br/>pFindRsrc = GetProcAddress(kernel32, &amp;FindResourceA);<br/>pVirtualAlloc = GetProcAddress(kernel32, &amp;VirtualAlloc);</span></pre><p id="b1bc" class="pw-post-body-paragraph mh mi gu mj b mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd ne gn bk">The malware is loading all functions dynamically that have to do with our resource section. After the data gets loaded into memory, CryptoWall begins its custom base64 decoding technique and then continues to a decryption method as seen below.</p><figure class="ni nj nk nl nm nn nf ng paragraph-image"><div role="button" tabindex="0" class="pl pm fj pn bh po"><div class="nf ng pr"><picture><source srcSet="https://miro.medium.com/v2/resize:fit:640/format:webp/1*bLJzfTx0xopkx5Q0uzIj8A.jpeg 640w, https://miro.medium.com/v2/resize:fit:720/format:webp/1*bLJzfTx0xopkx5Q0uzIj8A.jpeg 720w, https://miro.medium.com/v2/resize:fit:750/format:webp/1*bLJzfTx0xopkx5Q0uzIj8A.jpeg 750w, https://miro.medium.com/v2/resize:fit:786/format:webp/1*bLJzfTx0xopkx5Q0uzIj8A.jpeg 786w, https://miro.medium.com/v2/resize:fit:828/format:webp/1*bLJzfTx0xopkx5Q0uzIj8A.jpeg 828w, https://miro.medium.com/v2/resize:fit:1100/format:webp/1*bLJzfTx0xopkx5Q0uzIj8A.jpeg 1100w, https://miro.medium.com/v2/resize:fit:1400/format:webp/1*bLJzfTx0xopkx5Q0uzIj8A.jpeg 1400w" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px" type="image/webp"/><source data-testid="og" srcSet="https://miro.medium.com/v2/resize:fit:640/1*bLJzfTx0xopkx5Q0uzIj8A.jpeg 640w, https://miro.medium.com/v2/resize:fit:720/1*bLJzfTx0xopkx5Q0uzIj8A.jpeg 720w, https://miro.medium.com/v2/resize:fit:750/1*bLJzfTx0xopkx5Q0uzIj8A.jpeg 750w, https://miro.medium.com/v2/resize:fit:786/1*bLJzfTx0xopkx5Q0uzIj8A.jpeg 786w, https://miro.medium.com/v2/resize:fit:828/1*bLJzfTx0xopkx5Q0uzIj8A.jpeg 828w, https://miro.medium.com/v2/resize:fit:1100/1*bLJzfTx0xopkx5Q0uzIj8A.jpeg 1100w, https://miro.medium.com/v2/resize:fit:1400/1*bLJzfTx0xopkx5Q0uzIj8A.jpeg 1400w" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px"/><img alt="" class="bh lo no c" width="700" height="150" loading="lazy" role="presentation"/></picture></div></div></figure><p id="5a12" class="pw-post-body-paragraph mh mi gu mj b mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd ne gn bk">Most of what is happening here can be explained in a <a class="af pj" href="https://github.com/ryancor/CryptoWall_Analysis/blob/master/decrypt_shellcode_loader.py" rel="noopener ugc nofollow" target="_blank">decryptor</a> I wrote that resolves the shellcode from the resource section. If you head over to the python script, you’ll notice the custom base64 decoder is fairly simple. It will use a hardcoded charset, and check to see if any of the bytes from the resource section match a byte from the charset; if it is a match, it breaks from the loop. The next character gets subtracted by one and compared to a value of zero, if greater, it will take that value and modulate by <code class="cx nt nu nv nw b">256</code>; that byte will then get stored in a buffer array. It will perform this in a loop <code class="cx nt nu nv nw b">89,268</code> times, as that is the size of the encoded string inside the resource section.</p><p id="297a" class="pw-post-body-paragraph mh mi gu mj b mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd ne gn bk">Secondary to this, another decryption process starts on our recently decoded data from the algorithm above. Looking at the python script again, we can see that <a class="af pj" href="https://github.com/ryancor/CryptoWall_Analysis/blob/master/decrypt_shellcode_loader.py#L61" rel="noopener ugc nofollow" target="_blank">hardcoded </a><code class="cx nt nu nv nw b"><a class="af pj" href="https://github.com/ryancor/CryptoWall_Analysis/blob/master/decrypt_shellcode_loader.py#L61" rel="noopener ugc nofollow" target="_blank">XOR</a></code><a class="af pj" href="https://github.com/ryancor/CryptoWall_Analysis/blob/master/decrypt_shellcode_loader.py#L61" rel="noopener ugc nofollow" target="_blank"> keys</a> were extracted in the debugger if you set a breakpoint inside the decryption loop. All that is happening here is each byte is getting decrypted by a rotating three byte key. Once the loop is finished, the code will return the address of the decrypted contents, which essentially just contains an address to another subroutine:</p><pre class="ni nj nk nl nm pa nw pb pc ay pd bk"><span id="91f8" class="pe ny gu nw b ij pf pg l ph pi">loop:<br/>    buffer = *(base_addr + idx) - (*n ^ (&amp;addr + 0xFFE6DF5F + idx));<br/>    *(base_addr + idx++) = buffer;<br/>…<br/>Fourth_Stage_Loader = base_addr;<br/>return (&amp;Fourth_Stage_Loader)(buffer, b64_decoded_str, a1);</span></pre><p id="cb85" class="pw-post-body-paragraph mh mi gu mj b mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd ne gn bk">The <code class="cx nt nu nv nw b">base_addr</code> transfers data to another variable that we named <code class="cx nt nu nv nw b">Fourth_Stage_Loader</code> which holds the address of the newest function, and can be used as a caller. If we dump the address at <code class="cx nt nu nv nw b">call dword ptr gs:(loc_1920A1–1920A1h)[eax]</code> into memory, you’ll see bytes that start with a generic x86 function prologue like <code class="cx nt nu nv nw b">55 8b ec 81</code>. Dump this to a file, and we can actually emulate this <a class="af pj" href="https://github.com/ryancor/CryptoWall_Analysis/blob/master/extractions/pe_process_injector_dump.asm" rel="noopener ugc nofollow" target="_blank">shellcode</a>. In doing so, we don’t have to step through all this code in the debugger; instead it will hopefully tell us how to unpack and get to the main CryptoWall file.</p><p id="1756" class="pw-post-body-paragraph mh mi gu mj b mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd ne gn bk"><strong class="mj gv">Side note:</strong> the python script I wrote will automatically decode &amp; decrypt the resource section, and dump it to a bin file by running =&gt; <code class="cx nt nu nv nw b"><a class="af pj" href="https://github.com/ryancor/CryptoWall_Analysis/blob/master/decrypt_shellcode_loader.py" rel="noopener ugc nofollow" target="_blank">python decrypt_shellcode_loader.py -e</a></code>.</p><pre class="ni nj nk nl nm pa nw pb pc ay pd bk"><span id="7510" class="pe ny gu nw b ij pf pg l ph pi">0x1000: push ebp<br/>0x1001: mov ebp, esp<br/>0x1003: add esp, 0xfffff004<br/>....</span></pre><p id="92af" class="pw-post-body-paragraph mh mi gu mj b mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd ne gn bk">An easy way to see what this next stage in the malware’s loader is doing is by using one of my favorite shellcode emulator tools called <a class="af pj" href="http://sandsprite.com/blogs/index.php?uid=7&amp;pid=152" rel="noopener ugc nofollow" target="_blank">ScDbg</a>. By using this tool, we can figure out exactly where we need to set our breakpoints in order to get to the main ransomware file. We are going to look for calls such as <code class="cx nt nu nv nw b">VirtualAlloc</code>, <code class="cx nt nu nv nw b">WriteProcessMemory</code>, <code class="cx nt nu nv nw b">CreateProcessA</code>, etc.</p><pre class="ni nj nk nl nm pa nw pb pc ay pd bk"><span id="682f" class="pe ny gu nw b ij pf pg l ph pi">C:\&gt; scdbg.exe /s 3200000 /bp WriteProcessMemory /f dump.bin</span><span id="7734" class="pe ny gu nw b ij ps pg l ph pi">Loaded 10587 bytes from file extractions/pe_process_injector_dump.bin<br/>Breakpoint 0 set at 7c802213<br/>Initialization Complete..<br/>Max Steps: 3200000<br/>Using base offset: 0x401000</span><span id="ad1d" class="pe ny gu nw b ij ps pg l ph pi">4011cf    GetProcAddress(LoadLibraryA)<br/>40165f    GetProcAddress(VirtualAlloc)<br/>401c46    GetProcAddress(GetCurrentProcessId)<br/>401c52    GetCurrentProcessId() = 29<br/>...<br/>401d46    CloseHandle(18be)<br/>401f40    VirtualAlloc(base=0 , sz=20400) = 600000<br/>4021e1 VirtualAllocEx(pid=1269, base=400000 , sz=25000) = 621000<br/> /* Breakpoint 0 hit at: 7c802213 */ <br/>4021fe WriteProcessMemory(pid=1269, base=400000 , buf=600000, sz=400, written=12fd70)<br/> /* Breakpoint 0 hit at: 7c802213 */<br/>40224e WriteProcessMemory(pid=1269, base=401000 , buf=600400, sz=16400, written=12fd70)</span></pre><p id="f02b" class="pw-post-body-paragraph mh mi gu mj b mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd ne gn bk">Interesting… it looks like the malware is allocating memory to its own process by using <code class="cx nt nu nv nw b">GetCurrentProcessId()</code> and allocating a large enough space to inject a PE file into itself. After memory allocation, CryptoWall injects the payload file twice, once for the header, and the second time for the rest of the file. If you set a breakpoint at <code class="cx nt nu nv nw b">WriteProcessMemory</code>, and continue execution twice, you can dump the second argument (<code class="cx nt nu nv nw b">ECX</code>) on the stack to see the hidden PE file.</p><figure class="ni nj nk nl nm nn nf ng paragraph-image"><div role="button" tabindex="0" class="pl pm fj pn bh po"><div class="nf ng pt"><picture><source srcSet="https://miro.medium.com/v2/resize:fit:640/format:webp/1*riTi2zDCDVeTMYT6s2Ek2A.png 640w, https://miro.medium.com/v2/resize:fit:720/format:webp/1*riTi2zDCDVeTMYT6s2Ek2A.png 720w, https://miro.medium.com/v2/resize:fit:750/format:webp/1*riTi2zDCDVeTMYT6s2Ek2A.png 750w, https://miro.medium.com/v2/resize:fit:786/format:webp/1*riTi2zDCDVeTMYT6s2Ek2A.png 786w, https://miro.medium.com/v2/resize:fit:828/format:webp/1*riTi2zDCDVeTMYT6s2Ek2A.png 828w, https://miro.medium.com/v2/resize:fit:1100/format:webp/1*riTi2zDCDVeTMYT6s2Ek2A.png 1100w, https://miro.medium.com/v2/resize:fit:1400/format:webp/1*riTi2zDCDVeTMYT6s2Ek2A.png 1400w" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px" type="image/webp"/><source data-testid="og" srcSet="https://miro.medium.com/v2/resize:fit:640/1*riTi2zDCDVeTMYT6s2Ek2A.png 640w, https://miro.medium.com/v2/resize:fit:720/1*riTi2zDCDVeTMYT6s2Ek2A.png 720w, https://miro.medium.com/v2/resize:fit:750/1*riTi2zDCDVeTMYT6s2Ek2A.png 750w, https://miro.medium.com/v2/resize:fit:786/1*riTi2zDCDVeTMYT6s2Ek2A.png 786w, https://miro.medium.com/v2/resize:fit:828/1*riTi2zDCDVeTMYT6s2Ek2A.png 828w, https://miro.medium.com/v2/resize:fit:1100/1*riTi2zDCDVeTMYT6s2Ek2A.png 1100w, https://miro.medium.com/v2/resize:fit:1400/1*riTi2zDCDVeTMYT6s2Ek2A.png 1400w" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px"/><img alt="" class="bh lo no c" width="700" height="428" loading="lazy" role="presentation"/></picture></div></div></figure><p id="ca8f" class="pw-post-body-paragraph mh mi gu mj b mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd ne gn bk">There is an Anti-VM trick along the way in the 3rd stage part of the loader process that needs to be patched in order to hit the injection process, so I wrote an <a class="af pj" href="https://github.com/ryancor/CryptoWall_Analysis/blob/master/EMU_Scripts/Unpacker-x64dbg.py" rel="noopener ugc nofollow" target="_blank">x32Dbg python plugin</a> to help automate the patching and dumping operation.</p><h1 id="095e" class="nx ny gu bf nz oa ob oc od oe of og oh oi oj ok ol om on oo op oq or os ot ou bk">Reversing the Main Crypto Binary</h1><p id="fd22" class="pw-post-body-paragraph mh mi gu mj b mk ov mm mn mo ow mq mr ms ox mu mv mw oy my mz na oz nc nd ne gn bk">CryptoWall’s entry point starts off by dynamically resolving all imports to obtain all of NTDLL’s offsets by using the process environment block.</p><figure class="ni nj nk nl nm nn nf ng paragraph-image"><div role="button" tabindex="0" class="pl pm fj pn bh po"><div class="nf ng pu"><picture><source srcSet="https://miro.medium.com/v2/resize:fit:640/format:webp/1*Y_g2dcStOrsCFwT3NhjWfw.png 640w, https://miro.medium.com/v2/resize:fit:720/format:webp/1*Y_g2dcStOrsCFwT3NhjWfw.png 720w, https://miro.medium.com/v2/resize:fit:750/format:webp/1*Y_g2dcStOrsCFwT3NhjWfw.png 750w, https://miro.medium.com/v2/resize:fit:786/format:webp/1*Y_g2dcStOrsCFwT3NhjWfw.png 786w, https://miro.medium.com/v2/resize:fit:828/format:webp/1*Y_g2dcStOrsCFwT3NhjWfw.png 828w, https://miro.medium.com/v2/resize:fit:1100/format:webp/1*Y_g2dcStOrsCFwT3NhjWfw.png 1100w, https://miro.medium.com/v2/resize:fit:1400/format:webp/1*Y_g2dcStOrsCFwT3NhjWfw.png 1400w" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px" type="image/webp"/><source data-testid="og" srcSet="https://miro.medium.com/v2/resize:fit:640/1*Y_g2dcStOrsCFwT3NhjWfw.png 640w, https://miro.medium.com/v2/resize:fit:720/1*Y_g2dcStOrsCFwT3NhjWfw.png 720w, https://miro.medium.com/v2/resize:fit:750/1*Y_g2dcStOrsCFwT3NhjWfw.png 750w, https://miro.medium.com/v2/resize:fit:786/1*Y_g2dcStOrsCFwT3NhjWfw.png 786w, https://miro.medium.com/v2/resize:fit:828/1*Y_g2dcStOrsCFwT3NhjWfw.png 828w, https://miro.medium.com/v2/resize:fit:1100/1*Y_g2dcStOrsCFwT3NhjWfw.png 1100w, https://miro.medium.com/v2/resize:fit:1400/1*Y_g2dcStOrsCFwT3NhjWfw.png 1400w" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px"/><img alt="" class="bh lo no c" width="700" height="305" loading="lazy" role="presentation"/></picture></div></div></figure><p id="d0b7" class="pw-post-body-paragraph mh mi gu mj b mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd ne gn bk">It will then call a subroutine that is responsible for using the base address of the loaded DLL and uses many hardcoded DWORD addresses to locate hundreds of functions.</p><p id="d415" class="pw-post-body-paragraph mh mi gu mj b mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd ne gn bk"><strong class="mj gv">Side Note:</strong> If you would like to make your life a whole lot easier with resolving the function names in each subroutine, I made a local type definition for IDA Pro over <a class="af pj" href="https://github.com/ryancor/CryptoWall_Analysis/blob/master/api_names.h" rel="noopener ugc nofollow" target="_blank">here</a>. The resolving import function table will look a lot cleaner than what you see above:</p><figure class="ni nj nk nl nm nn nf ng paragraph-image"><div role="button" tabindex="0" class="pl pm fj pn bh po"><div class="nf ng pv"><picture><source srcSet="https://miro.medium.com/v2/resize:fit:640/format:webp/1*pfiMaPp1IBS2A2Ui_2XqRQ.png 640w, https://miro.medium.com/v2/resize:fit:720/format:webp/1*pfiMaPp1IBS2A2Ui_2XqRQ.png 720w, https://miro.medium.com/v2/resize:fit:750/format:webp/1*pfiMaPp1IBS2A2Ui_2XqRQ.png 750w, https://miro.medium.com/v2/resize:fit:786/format:webp/1*pfiMaPp1IBS2A2Ui_2XqRQ.png 786w, https://miro.medium.com/v2/resize:fit:828/format:webp/1*pfiMaPp1IBS2A2Ui_2XqRQ.png 828w, https://miro.medium.com/v2/resize:fit:1100/format:webp/1*pfiMaPp1IBS2A2Ui_2XqRQ.png 1100w, https://miro.medium.com/v2/resize:fit:1400/format:webp/1*pfiMaPp1IBS2A2Ui_2XqRQ.png 1400w" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px" type="image/webp"/><source data-testid="og" srcSet="https://miro.medium.com/v2/resize:fit:640/1*pfiMaPp1IBS2A2Ui_2XqRQ.png 640w, https://miro.medium.com/v2/resize:fit:720/1*pfiMaPp1IBS2A2Ui_2XqRQ.png 720w, https://miro.medium.com/v2/resize:fit:750/1*pfiMaPp1IBS2A2Ui_2XqRQ.png 750w, https://miro.medium.com/v2/resize:fit:786/1*pfiMaPp1IBS2A2Ui_2XqRQ.png 786w, https://miro.medium.com/v2/resize:fit:828/1*pfiMaPp1IBS2A2Ui_2XqRQ.png 828w, https://miro.medium.com/v2/resize:fit:1100/1*pfiMaPp1IBS2A2Ui_2XqRQ.png 1100w, https://miro.medium.com/v2/resize:fit:1400/1*pfiMaPp1IBS2A2Ui_2XqRQ.png 1400w" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px"/><img alt="" class="bh lo no c" width="700" height="156" loading="lazy" role="presentation"/></picture></div></div></figure><p id="f017" class="pw-post-body-paragraph mh mi gu mj b mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd ne gn bk">After the function returns, the malware will proceed to generate a unique hash based on your system information, the resulting string will be MD5 hashed =&gt; <code class="cx nt nu nv nw b">DESKTOP-QR18J6QB0CBF8E8Intel64 Family 6 Model 70 Stepping 1, GenuineIntel</code>. After computing the hash, it will setup a handle to an existing named event object with the specified desired access that will be called as <code class="cx nt nu nv nw b">\\BaseNamedObjects\\C6B359277232C8E248AFD89C98E96D65</code>.</p><p id="0c1b" class="pw-post-body-paragraph mh mi gu mj b mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd ne gn bk">The main engine of the code starts a few routines after the malware checks for system information, events, anti-vm, and running processes.</p><figure class="ni nj nk nl nm nn nf ng paragraph-image"><div role="button" tabindex="0" class="pl pm fj pn bh po"><div class="nf ng pw"><picture><source srcSet="https://miro.medium.com/v2/resize:fit:640/format:webp/1*UskgVTbZpcHwnj7Yc8Q4sw.png 640w, https://miro.medium.com/v2/resize:fit:720/format:webp/1*UskgVTbZpcHwnj7Yc8Q4sw.png 720w, https://miro.medium.com/v2/resize:fit:750/format:webp/1*UskgVTbZpcHwnj7Yc8Q4sw.png 750w, https://miro.medium.com/v2/resize:fit:786/format:webp/1*UskgVTbZpcHwnj7Yc8Q4sw.png 786w, https://miro.medium.com/v2/resize:fit:828/format:webp/1*UskgVTbZpcHwnj7Yc8Q4sw.png 828w, https://miro.medium.com/v2/resize:fit:1100/format:webp/1*UskgVTbZpcHwnj7Yc8Q4sw.png 1100w, https://miro.medium.com/v2/resize:fit:1400/format:webp/1*UskgVTbZpcHwnj7Yc8Q4sw.png 1400w" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px" type="image/webp"/><source data-testid="og" srcSet="https://miro.medium.com/v2/resize:fit:640/1*UskgVTbZpcHwnj7Yc8Q4sw.png 640w, https://miro.medium.com/v2/resize:fit:720/1*UskgVTbZpcHwnj7Yc8Q4sw.png 720w, https://miro.medium.com/v2/resize:fit:750/1*UskgVTbZpcHwnj7Yc8Q4sw.png 750w, https://miro.medium.com/v2/resize:fit:786/1*UskgVTbZpcHwnj7Yc8Q4sw.png 786w, https://miro.medium.com/v2/resize:fit:828/1*UskgVTbZpcHwnj7Yc8Q4sw.png 828w, https://miro.medium.com/v2/resize:fit:1100/1*UskgVTbZpcHwnj7Yc8Q4sw.png 1100w, https://miro.medium.com/v2/resize:fit:1400/1*UskgVTbZpcHwnj7Yc8Q4sw.png 1400w" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px"/><img alt="" class="bh lo no c" width="700" height="115" loading="lazy" role="presentation"/></picture></div></div></figure><p id="2c28" class="pw-post-body-paragraph mh mi gu mj b mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd ne gn bk">Most of the time the ransomware will successfully inject its main thread into <code class="cx nt nu nv nw b">svchost</code> and not <code class="cx nt nu nv nw b">explorer</code>; so let’s follow that trail. Since this is a 32-bit binary its going to attempt to find <code class="cx nt nu nv nw b">svchost.exe</code> inside of <code class="cx nt nu nv nw b">SysWOW64</code> instead of <code class="cx nt nu nv nw b">System32</code>. After successfully locating the full path, it will create a new thread using the <code class="cx nt nu nv nw b">RtlCreateUserThread()</code> API call. Once the thread is created, <code class="cx nt nu nv nw b">NtResumeThread()</code> will be used on the process to start the <code class="cx nt nu nv nw b">ransomware_thread</code> code. Debugging these types of threads can be a little convoluted, and setting breakpoints doesn’t always work.</p><pre class="ni nj nk nl nm pa nw pb pc ay pd bk"><span id="6e3e" class="pe ny gu nw b ij pf pg l ph pi">.text:00416F40     ransomware_thread proc near             <br/>.text:00416F40     start+86↓o<br/>.text:00416F40<br/>.text:00416F40     var_14          = dword ptr -14h<br/>.text:00416F40     var_10          = dword ptr -10h<br/>.text:00416F40     var_C           = dword ptr -0Ch<br/>.text:00416F40     var_8           = dword ptr -8<br/>.text:00416F40     var_4           = dword ptr -4<br/>.text:00416F40<br/>.text:00416F40 000                 push    ebp<br/>.text:00416F41 004                 mov     ebp, esp<br/>.text:00416F43 004                 sub     esp, 14h<br/>.text:00416F46 018                 call    ResolveImportsFromDLL<br/>...</span></pre><p id="6fbb" class="pw-post-body-paragraph mh mi gu mj b mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd ne gn bk">Using x32Dbg, you can set the <code class="cx nt nu nv nw b">EIP</code> to address <code class="cx nt nu nv nw b">0x00416F40</code> since this thread is not resource dependent on any of the other code that has been executed up until this point; this thread even utilizes the <code class="cx nt nu nv nw b">ResolveImportsFromDLL</code> function we saw in the beginning of the program’s entry point… meaning, the forced instruction pointer jump will not damage the integrity of the ransomware.</p><pre class="ni nj nk nl nm pa nw pb pc ay pd bk"><span id="0234" class="pe ny gu nw b ij pf pg l ph pi">isHandleSet = SetSecurityHandle();<br/>if ( isHandleSet &amp;&amp; SetupC2String() )<br/>{<br/>   v8 = 0;<br/>   v6 = 0;<br/>   IsSuccess = WhichProcessToInject(&amp;v8, &amp;v6);<br/>   if ( IsSuccess )<br/>   {<br/>     IsSuccess = StartThreadFromProcess(-1, InjectedThread, <br/>                                        0, 0, 0);<br/>     FreeVirtualMemory(v8);<br/>   }<br/>}</span></pre><p id="aeb4" class="pw-post-body-paragraph mh mi gu mj b mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd ne gn bk">The thread will go through a series of configurations that involve setting up security attributes, MD5 hashing the hostname of the infected system, and then searching to either inject new code into <code class="cx nt nu nv nw b">svchost</code> or <code class="cx nt nu nv nw b">explorer</code>. In order to start a new thread, the function <code class="cx nt nu nv nw b">WhichProcessToInject</code> will query the registry path, and check permissions on what key values the malware has access to. Once chosen, the <code class="cx nt nu nv nw b">InjectedThread</code> process will resume. Stepping into that thread, we can see the module size is fairly small.</p><pre class="ni nj nk nl nm pa nw pb pc ay pd bk"><span id="d7a3" class="pe ny gu nw b ij pf pg l ph pi">.text:00412E80     InjectedThread  proc near               ; DATA <br/>.text:00412E80     <br/>.text:00412E80 000                 push    ebp<br/>.text:00412E81 004                 mov     ebp, esp<br/>.text:00412E83 004                 call    MainInjectedThread<br/>.text:00412E88 004                 push    0<br/>.text:00412E8A 008                 call    ReturnFunctionName<br/>.text:00412E8F 008                 mov     eax, [eax+0A4h]<br/>.text:00412E95 008                 call    eax<br/>.text:00412E97 004                 xor     eax, eax<br/>.text:00412E99 004                 pop     ebp<br/>.text:00412E9A 000                 retn<br/>.text:00412E9A     InjectedThread  endp</span></pre><p id="489b" class="pw-post-body-paragraph mh mi gu mj b mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd ne gn bk">At address <code class="cx nt nu nv nw b">0x00412E83</code>, a subroutine gets called that will bring the malware to start the next series of functions that involves the C2 server configuration callback, and the encryption of files. After the thread is finished executing, <code class="cx nt nu nv nw b">EAX</code> resolves a function at offset <code class="cx nt nu nv nw b">+0x0A4</code> which will show <code class="cx nt nu nv nw b">RtlExitUserThread</code> being invoked. Once we enter <code class="cx nt nu nv nw b">MainInjectedThread</code>, you’ll notice the first function at <code class="cx nt nu nv nw b">0x004011B40</code> is giving us the first clue of how the files will be encrypted.</p><pre class="ni nj nk nl nm pa nw pb pc ay pd bk"><span id="a486" class="pe ny gu nw b ij pf pg l ph pi">.text:00411D06 06C                 push    0F0000000h<br/>.text:00411D0B 070                 push    1<br/>.text:00411D0D 074                 lea     edx, [ebp+reg_crypt_path]<br/>.text:00411D10 074                 push    edx<br/>.text:00411D11 078                 push    0<br/>.text:00411D13 07C                 lea     eax, [ebp+var_8]<br/>.text:00411D16 07C                 push    eax<br/>.text:00411D17 080                 call    ReturnFunctionName<br/>.text:00411D1C 080                 mov     ecx, [eax+240h]<br/>.text:00411D22 080                 call    ecx ; CryptAcquireContext</span></pre><p id="6fdb" class="pw-post-body-paragraph mh mi gu mj b mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd ne gn bk"><code class="cx nt nu nv nw b">CryptAcquireContext</code> is used to acquire a handle to a particular key container within a particular cryptographic service provider (CSP). In our case, the CSP being used is <code class="cx nt nu nv nw b">Microsoft\Enhanced\Cryptographic\Provider\V1</code>, which coincides with algorithms such as DES, HMAC, MD5, and RSA.</p><figure class="ni nj nk nl nm nn nf ng paragraph-image"><div role="button" tabindex="0" class="pl pm fj pn bh po"><div class="nf ng px"><picture><source srcSet="https://miro.medium.com/v2/resize:fit:640/format:webp/1*-AREAxfEVc7jitqRWauAsw.png 640w, https://miro.medium.com/v2/resize:fit:720/format:webp/1*-AREAxfEVc7jitqRWauAsw.png 720w, https://miro.medium.com/v2/resize:fit:750/format:webp/1*-AREAxfEVc7jitqRWauAsw.png 750w, https://miro.medium.com/v2/resize:fit:786/format:webp/1*-AREAxfEVc7jitqRWauAsw.png 786w, https://miro.medium.com/v2/resize:fit:828/format:webp/1*-AREAxfEVc7jitqRWauAsw.png 828w, https://miro.medium.com/v2/resize:fit:1100/format:webp/1*-AREAxfEVc7jitqRWauAsw.png 1100w, https://miro.medium.com/v2/resize:fit:1400/format:webp/1*-AREAxfEVc7jitqRWauAsw.png 1400w" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px" type="image/webp"/><source data-testid="og" srcSet="https://miro.medium.com/v2/resize:fit:640/1*-AREAxfEVc7jitqRWauAsw.png 640w, https://miro.medium.com/v2/resize:fit:720/1*-AREAxfEVc7jitqRWauAsw.png 720w, https://miro.medium.com/v2/resize:fit:750/1*-AREAxfEVc7jitqRWauAsw.png 750w, https://miro.medium.com/v2/resize:fit:786/1*-AREAxfEVc7jitqRWauAsw.png 786w, https://miro.medium.com/v2/resize:fit:828/1*-AREAxfEVc7jitqRWauAsw.png 828w, https://miro.medium.com/v2/resize:fit:1100/1*-AREAxfEVc7jitqRWauAsw.png 1100w, https://miro.medium.com/v2/resize:fit:1400/1*-AREAxfEVc7jitqRWauAsw.png 1400w" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px"/><img alt="" class="bh lo no c" width="700" height="332" loading="lazy" role="presentation"/></picture></div></div></figure><p id="bf99" class="pw-post-body-paragraph mh mi gu mj b mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd ne gn bk">Once the <code class="cx nt nu nv nw b">CryptoContext</code> is populated, the ransomware will use the MD5 hash created to label the victim’s system information and register it as a key path as such → <code class="cx nt nu nv nw b">software\\C6B359277232C8E248AFD89C98E96D65</code>. The ransom note is processed by a few steps. The first step is to generate the TOR addresses which end up resolving four addresses: <code class="cx nt nu nv nw b">http[:]//torforall[.]com</code>, <code class="cx nt nu nv nw b">http[:]//torman2[.]com</code>, <code class="cx nt nu nv nw b">http[:]//torwoman[.]com</code>, and <code class="cx nt nu nv nw b">http[:]//torroadsters[.]com</code>. These DNS records will be used later on to inject into the ransomware HTML file. Next, the note gets produced by the use of the Win32 API function, <code class="cx nt nu nv nw b">RtlDecompressBuffer</code>, to decompress the data using <code class="cx nt nu nv nw b">COMPRESSION_FORMAT_LZNT1</code>. The compressed ransom note can be found in the <code class="cx nt nu nv nw b">.data</code> section and consists of <code class="cx nt nu nv nw b">0x52B8</code> bytes.</p><figure class="ni nj nk nl nm nn nf ng paragraph-image"><div class="nf ng py"><picture><source srcSet="https://miro.medium.com/v2/resize:fit:640/format:webp/1*hr-O6u_b0k_YFEBXtf07Kg.png 640w, https://miro.medium.com/v2/resize:fit:720/format:webp/1*hr-O6u_b0k_YFEBXtf07Kg.png 720w, https://miro.medium.com/v2/resize:fit:750/format:webp/1*hr-O6u_b0k_YFEBXtf07Kg.png 750w, https://miro.medium.com/v2/resize:fit:786/format:webp/1*hr-O6u_b0k_YFEBXtf07Kg.png 786w, https://miro.medium.com/v2/resize:fit:828/format:webp/1*hr-O6u_b0k_YFEBXtf07Kg.png 828w, https://miro.medium.com/v2/resize:fit:1100/format:webp/1*hr-O6u_b0k_YFEBXtf07Kg.png 1100w, https://miro.medium.com/v2/resize:fit:1000/format:webp/1*hr-O6u_b0k_YFEBXtf07Kg.png 1000w" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 500px" type="image/webp"/><source data-testid="og" srcSet="https://miro.medium.com/v2/resize:fit:640/1*hr-O6u_b0k_YFEBXtf07Kg.png 640w, https://miro.medium.com/v2/resize:fit:720/1*hr-O6u_b0k_YFEBXtf07Kg.png 720w, https://miro.medium.com/v2/resize:fit:750/1*hr-O6u_b0k_YFEBXtf07Kg.png 750w, https://miro.medium.com/v2/resize:fit:786/1*hr-O6u_b0k_YFEBXtf07Kg.png 786w, https://miro.medium.com/v2/resize:fit:828/1*hr-O6u_b0k_YFEBXtf07Kg.png 828w, https://miro.medium.com/v2/resize:fit:1100/1*hr-O6u_b0k_YFEBXtf07Kg.png 1100w, https://miro.medium.com/v2/resize:fit:1000/1*hr-O6u_b0k_YFEBXtf07Kg.png 1000w" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 500px"/><img alt="" class="bh lo no c" width="500" height="504" loading="lazy" role="presentation"/></picture></div></figure><p id="bb20" class="pw-post-body-paragraph mh mi gu mj b mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd ne gn bk">Decompressing the note is kind of a mess in python as there is no built in function that is able to do LZNT1 decompression. You can find the actual call at address <code class="cx nt nu nv nw b">0x004087F3</code>.</p><pre class="ni nj nk nl nm pa nw pb pc ay pd bk"><span id="0aab" class="pe ny gu nw b ij pf pg l ph pi">.text:004087CF 024                 lea     ecx, [ebp+var_8]<br/>.text:004087D2 024                 push    ecx<br/>.text:004087D3 028                 mov     edx, [ebp+arg_4]<br/>.text:004087D6 028                 push    edx<br/>.text:004087D7 02C                 mov     eax, [ebp+arg_6]<br/>.text:004087DA 02C                 push    eax<br/>.text:004087DB 030                 mov     ecx, [ebp+var_18]<br/>.text:004087DE 030                 push    ecx<br/>.text:004087DF 034                 mov     edx, [ebp+var_C]<br/>.text:004087E2 034                 push    edx<br/>.text:004087E3 038                 movzx   eax, [ebp+var_12]<br/>.text:004087E7 038                 push    eax<br/>.text:004087E8 03C                 call    ReturnFunctionName<br/>.text:004087ED 03C                 mov     ecx, [eax+178h]<br/>.text:004087F3 03C                 call    ecx<br/>// Decompiled below<br/>(*(RtlDecompressBuffer))(COMPRESSION_FORMAT_LZNT1,       <br/>                         uncompressed_buffer, <br/>                         UncompressedBufferSize, <br/>                         CompressedBuffer, <br/>                         CompressedBufferSize, <br/>                         FinalUncompressedSize) )</span></pre><p id="b5a6" class="pw-post-body-paragraph mh mi gu mj b mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd ne gn bk">After the function call, <code class="cx nt nu nv nw b">uncompressed_buffer</code> will be a data filled pointer to a caller-allocated buffer (allocated from a paged or non-paged pool) that receives the decompressed data from <em class="pz">CompressedBuffer</em>. This parameter is required and cannot be <strong class="mj gv">NULL</strong>, which is why there is an<strong class="mj gv"> </strong><code class="cx nt nu nv nw b">NtAllocateVirtualMemory()</code> call to this parameter before being passed to decompression. The <a class="af pj" href="https://github.com/ryancor/CryptoWall_Analysis/blob/master/decompress_ransomwarenote.py" rel="noopener ugc nofollow" target="_blank">script</a> I wrote will grab the compressed data from the PE file, and run a <a class="af pj" href="https://github.com/ryancor/CryptoWall_Analysis/blob/master/decompress_ransomwarenote.py#L30" rel="noopener ugc nofollow" target="_blank">LZNT1 decompression algorithm</a> then place the buffer in an HTML file. The resulting note will appear on the victims system as such:</p><figure class="ni nj nk nl nm nn nf ng paragraph-image"><div class="nf ng py"><picture><source srcSet="https://miro.medium.com/v2/resize:fit:640/format:webp/1*iDMgJ2PFTB8rX1IJOtj1bQ.png 640w, https://miro.medium.com/v2/resize:fit:720/format:webp/1*iDMgJ2PFTB8rX1IJOtj1bQ.png 720w, https://miro.medium.com/v2/resize:fit:750/format:webp/1*iDMgJ2PFTB8rX1IJOtj1bQ.png 750w, https://miro.medium.com/v2/resize:fit:786/format:webp/1*iDMgJ2PFTB8rX1IJOtj1bQ.png 786w, https://miro.medium.com/v2/resize:fit:828/format:webp/1*iDMgJ2PFTB8rX1IJOtj1bQ.png 828w, https://miro.medium.com/v2/resize:fit:1100/format:webp/1*iDMgJ2PFTB8rX1IJOtj1bQ.png 1100w, https://miro.medium.com/v2/resize:fit:1000/format:webp/1*iDMgJ2PFTB8rX1IJOtj1bQ.png 1000w" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 500px" type="image/webp"/><source data-testid="og" srcSet="https://miro.medium.com/v2/resize:fit:640/1*iDMgJ2PFTB8rX1IJOtj1bQ.png 640w, https://miro.medium.com/v2/resize:fit:720/1*iDMgJ2PFTB8rX1IJOtj1bQ.png 720w, https://miro.medium.com/v2/resize:fit:750/1*iDMgJ2PFTB8rX1IJOtj1bQ.png 750w, https://miro.medium.com/v2/resize:fit:786/1*iDMgJ2PFTB8rX1IJOtj1bQ.png 786w, https://miro.medium.com/v2/resize:fit:828/1*iDMgJ2PFTB8rX1IJOtj1bQ.png 828w, https://miro.medium.com/v2/resize:fit:1100/1*iDMgJ2PFTB8rX1IJOtj1bQ.png 1100w, https://miro.medium.com/v2/resize:fit:1000/1*iDMgJ2PFTB8rX1IJOtj1bQ.png 1000w" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 500px"/><img alt="" class="bh lo no c" width="500" height="430" loading="lazy" role="presentation"/></picture></div></figure><p id="d80b" class="pw-post-body-paragraph mh mi gu mj b mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd ne gn bk">Once the note is decompressed, the HTML fields will be populated with multiple TOR addresses at subroutine <code class="cx nt nu nv nw b">sub_00414160()</code>. The note is stored in memory then follows a few more checks before the malware sends its first C2 <em class="pz">POST</em> request. Stepping into <code class="cx nt nu nv nw b">SendRequestToC2</code> which is located at <code class="cx nt nu nv nw b">0x00416A50</code>, the first thing we notice is a buffer being allocated 60 bytes of memory.</p><pre class="ni nj nk nl nm pa nw pb pc ay pd bk"><span id="fdfb" class="pe ny gu nw b ij pf pg l ph pi">.text:00416A77 018                 push    3Ch<br/>.text:00416A79 01C                 call    AllocateSetMemory<br/>.text:00416A7E 01C                 add     esp, 4<br/>.text:00416A81 018                 mov     [ebp+campaign_str], eax</span></pre><p id="dace" class="pw-post-body-paragraph mh mi gu mj b mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd ne gn bk">All this information will eventually help us write a proper <a class="af pj" href="https://github.com/ryancor/CryptoWall_Analysis/blob/master/fake_c2_i2p_server.py" rel="noopener ugc nofollow" target="_blank">fake C2 server</a> that will allow us to communicate with the ransomware since CryptoWall’s I2P servers are no longer active. Around address <code class="cx nt nu nv nw b">0x004052E0</code>, which we labeled <code class="cx nt nu nv nw b">EncryptData_SendToC2</code> will be responsible for taking our generated campaign string and sending it as an initial ping.</p><figure class="ni nj nk nl nm nn nf ng paragraph-image"><div role="button" tabindex="0" class="pl pm fj pn bh po"><div class="nf ng qa"><picture><source srcSet="https://miro.medium.com/v2/resize:fit:640/format:webp/1*ljr9pCmMEbq1bRSwssdiMw.png 640w, https://miro.medium.com/v2/resize:fit:720/format:webp/1*ljr9pCmMEbq1bRSwssdiMw.png 720w, https://miro.medium.com/v2/resize:fit:750/format:webp/1*ljr9pCmMEbq1bRSwssdiMw.png 750w, https://miro.medium.com/v2/resize:fit:786/format:webp/1*ljr9pCmMEbq1bRSwssdiMw.png 786w, https://miro.medium.com/v2/resize:fit:828/format:webp/1*ljr9pCmMEbq1bRSwssdiMw.png 828w, https://miro.medium.com/v2/resize:fit:1100/format:webp/1*ljr9pCmMEbq1bRSwssdiMw.png 1100w, https://miro.medium.com/v2/resize:fit:1400/format:webp/1*ljr9pCmMEbq1bRSwssdiMw.png 1400w" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px" type="image/webp"/><source data-testid="og" srcSet="https://miro.medium.com/v2/resize:fit:640/1*ljr9pCmMEbq1bRSwssdiMw.png 640w, https://miro.medium.com/v2/resize:fit:720/1*ljr9pCmMEbq1bRSwssdiMw.png 720w, https://miro.medium.com/v2/resize:fit:750/1*ljr9pCmMEbq1bRSwssdiMw.png 750w, https://miro.medium.com/v2/resize:fit:786/1*ljr9pCmMEbq1bRSwssdiMw.png 786w, https://miro.medium.com/v2/resize:fit:828/1*ljr9pCmMEbq1bRSwssdiMw.png 828w, https://miro.medium.com/v2/resize:fit:1100/1*ljr9pCmMEbq1bRSwssdiMw.png 1100w, https://miro.medium.com/v2/resize:fit:1400/1*ljr9pCmMEbq1bRSwssdiMw.png 1400w" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px"/><img alt="" class="bh lo no c" width="700" height="112" loading="lazy" role="presentation"/></picture></div></div></figure><p id="f31d" class="pw-post-body-paragraph mh mi gu mj b mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd ne gn bk">If you set a breakpoint at this function, you can see what the parameter contains: <code class="cx nt nu nv nw b">{1|crypt1|C6B359277232C8E248AFD89C98E96D65}</code>. Once inside this module, you&#x27;ll notice three key functions; one responsible for byte swapping, a key scheduling algorithm, and the other doing the actual encryption. The generated RC4 encryption will end up as a hash string:</p><pre class="ni nj nk nl nm pa nw pb pc ay pd bk"><span id="4173" class="pe ny gu nw b ij pf pg l ph pi">85b088216433863bdb490295d5bd997b35998c027ed600c24d05a55cea4cb3deafdf4161e6781d2cd9aa243f5c12a717cf64944bc6ea596269871d29abd7e2</span></pre><h1 id="9507" class="nx ny gu bf nz oa ob oc od oe of og oh oi oj ok ol om on oo op oq or os ot ou bk">Command &amp; Control Communication</h1><p id="f5dd" class="pw-post-body-paragraph mh mi gu mj b mk ov mm mn mo ow mq mr ms ox mu mv mw oy my mz na oz nc nd ne gn bk">The malware sets itself up for a POST request to its I2P addresses that cycle between <code class="cx nt nu nv nw b">proxy1–1–1.i2p</code> &amp; <code class="cx nt nu nv nw b">proxy2–2–2.i2p</code>. The way this is done is by using the function at <code class="cx nt nu nv nw b">0x0040B880</code> to generate a random seed based on epoch time, and use that to create a string that ranges from 11 to 16 bytes. This PRNG (Pseudo-Random Number Generator) string will be used as the <a class="af pj" href="https://github.com/ryancor/CryptoWall_Analysis/blob/master/fake_c2_i2p_server.py#L56" rel="noopener ugc nofollow" target="_blank">POST request’s URI</a> and as the key used in the byte swapping function before the RC4 encryption.</p><figure class="ni nj nk nl nm nn nf ng paragraph-image"><div role="button" tabindex="0" class="pl pm fj pn bh po"><div class="nf ng qb"><picture><source srcSet="https://miro.medium.com/v2/resize:fit:640/format:webp/1*MvgMk77byL4V5NnXxEdytA.png 640w, https://miro.medium.com/v2/resize:fit:720/format:webp/1*MvgMk77byL4V5NnXxEdytA.png 720w, https://miro.medium.com/v2/resize:fit:750/format:webp/1*MvgMk77byL4V5NnXxEdytA.png 750w, https://miro.medium.com/v2/resize:fit:786/format:webp/1*MvgMk77byL4V5NnXxEdytA.png 786w, https://miro.medium.com/v2/resize:fit:828/format:webp/1*MvgMk77byL4V5NnXxEdytA.png 828w, https://miro.medium.com/v2/resize:fit:1100/format:webp/1*MvgMk77byL4V5NnXxEdytA.png 1100w, https://miro.medium.com/v2/resize:fit:1400/format:webp/1*MvgMk77byL4V5NnXxEdytA.png 1400w" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px" type="image/webp"/><source data-testid="og" srcSet="https://miro.medium.com/v2/resize:fit:640/1*MvgMk77byL4V5NnXxEdytA.png 640w, https://miro.medium.com/v2/resize:fit:720/1*MvgMk77byL4V5NnXxEdytA.png 720w, https://miro.medium.com/v2/resize:fit:750/1*MvgMk77byL4V5NnXxEdytA.png 750w, https://miro.medium.com/v2/resize:fit:786/1*MvgMk77byL4V5NnXxEdytA.png 786w, https://miro.medium.com/v2/resize:fit:828/1*MvgMk77byL4V5NnXxEdytA.png 828w, https://miro.medium.com/v2/resize:fit:1100/1*MvgMk77byL4V5NnXxEdytA.png 1100w, https://miro.medium.com/v2/resize:fit:1400/1*MvgMk77byL4V5NnXxEdytA.png 1400w" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px"/><img alt="" class="bh lo no c" width="700" height="493" loading="lazy" role="presentation"/></picture></div></div></figure><p id="72e0" class="pw-post-body-paragraph mh mi gu mj b mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd ne gn bk">To give us an example, if our generated string results in <code class="cx nt nu nv nw b">tfuzxqh6wf7mng</code>, then after the function call, that string will turn into <code class="cx nt nu nv nw b">67ffghmnqtuwxz</code>. That string gets used for a 256-generated key scheduling algorithm, and the POST request (I.E., <code class="cx nt nu nv nw b">http://proxy1–1–1.i2p/67ffghmnqtuwxz</code>). You can find the reverse engineered algorithm <a class="af pj" href="https://github.com/ryancor/CryptoWall_Analysis/blob/master/fake_c2_i2p_server.py#L15" rel="noopener ugc nofollow" target="_blank">here</a>.</p><figure class="ni nj nk nl nm nn nf ng paragraph-image"><div role="button" tabindex="0" class="pl pm fj pn bh po"><div class="nf ng qc"><picture><source srcSet="https://miro.medium.com/v2/resize:fit:640/format:webp/1*dnmr7VxbUMN7sKpITqNOKQ.png 640w, https://miro.medium.com/v2/resize:fit:720/format:webp/1*dnmr7VxbUMN7sKpITqNOKQ.png 720w, https://miro.medium.com/v2/resize:fit:750/format:webp/1*dnmr7VxbUMN7sKpITqNOKQ.png 750w, https://miro.medium.com/v2/resize:fit:786/format:webp/1*dnmr7VxbUMN7sKpITqNOKQ.png 786w, https://miro.medium.com/v2/resize:fit:828/format:webp/1*dnmr7VxbUMN7sKpITqNOKQ.png 828w, https://miro.medium.com/v2/resize:fit:1100/format:webp/1*dnmr7VxbUMN7sKpITqNOKQ.png 1100w, https://miro.medium.com/v2/resize:fit:1400/format:webp/1*dnmr7VxbUMN7sKpITqNOKQ.png 1400w" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px" type="image/webp"/><source data-testid="og" srcSet="https://miro.medium.com/v2/resize:fit:640/1*dnmr7VxbUMN7sKpITqNOKQ.png 640w, https://miro.medium.com/v2/resize:fit:720/1*dnmr7VxbUMN7sKpITqNOKQ.png 720w, https://miro.medium.com/v2/resize:fit:750/1*dnmr7VxbUMN7sKpITqNOKQ.png 750w, https://miro.medium.com/v2/resize:fit:786/1*dnmr7VxbUMN7sKpITqNOKQ.png 786w, https://miro.medium.com/v2/resize:fit:828/1*dnmr7VxbUMN7sKpITqNOKQ.png 828w, https://miro.medium.com/v2/resize:fit:1100/1*dnmr7VxbUMN7sKpITqNOKQ.png 1100w, https://miro.medium.com/v2/resize:fit:1400/1*dnmr7VxbUMN7sKpITqNOKQ.png 1400w" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px"/><img alt="" class="bh lo no c" width="700" height="343" loading="lazy" role="presentation"/></picture></div></div></figure><p id="2d02" class="pw-post-body-paragraph mh mi gu mj b mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd ne gn bk">The next part will take this byte swapped key, then RC4 encrypt some campaign information that the malware has gathered, which unencrypted, will look like this:</p><p id="92b9" class="pw-post-body-paragraph mh mi gu mj b mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd ne gn bk"><code class="cx nt nu nv nw b">{1|crypt1|C6B359277232C8E248AFD89C98E96D65|0|2|1||55.59.84.254}</code></p><p id="3fe5" class="pw-post-body-paragraph mh mi gu mj b mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd ne gn bk">This blob consists of the campaign ID, an MD5 hashed unique computer identifier, a CUUID, and the victims public IP address. After preparation of this campaign string, the ransomware will begin to resolve the two I2P addresses. Once CryptoWall sends its first ping to the C2 server, the malware expects back an RC4 encrypted string, which will contain a public key used to encrypt all the files on disk. The malware has the ability to decrypt this string using the same RC4 algorithm from earlier, and will parse the info from this block: <code class="cx nt nu nv nw b">{216|1pai7ycr7jxqkilp.onion|[pub_key]|US|[unique_id]}</code>. The onion route is for the ransom note, and is a personalized route that the victim can enter using a TOR browser. The site most likely contains further instructions on how to pay the ransom.</p><p id="4333" class="pw-post-body-paragraph mh mi gu mj b mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd ne gn bk">Since the C2 servers are no longer active; in order to actually know what our fake C2 server <strong class="mj gv">should</strong> send back to the malware; the parser logic had to be carefully dissected which is located at <code class="cx nt nu nv nw b">0x00405203</code>.</p><figure class="ni nj nk nl nm nn nf ng paragraph-image"><div role="button" tabindex="0" class="pl pm fj pn bh po"><div class="nf ng qd"><picture><source srcSet="https://miro.medium.com/v2/resize:fit:640/format:webp/1*SoJfYoBH3tlKRNS-O38fOA.png 640w, https://miro.medium.com/v2/resize:fit:720/format:webp/1*SoJfYoBH3tlKRNS-O38fOA.png 720w, https://miro.medium.com/v2/resize:fit:750/format:webp/1*SoJfYoBH3tlKRNS-O38fOA.png 750w, https://miro.medium.com/v2/resize:fit:786/format:webp/1*SoJfYoBH3tlKRNS-O38fOA.png 786w, https://miro.medium.com/v2/resize:fit:828/format:webp/1*SoJfYoBH3tlKRNS-O38fOA.png 828w, https://miro.medium.com/v2/resize:fit:1100/format:webp/1*SoJfYoBH3tlKRNS-O38fOA.png 1100w, https://miro.medium.com/v2/resize:fit:1400/format:webp/1*SoJfYoBH3tlKRNS-O38fOA.png 1400w" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px" type="image/webp"/><source data-testid="og" srcSet="https://miro.medium.com/v2/resize:fit:640/1*SoJfYoBH3tlKRNS-O38fOA.png 640w, https://miro.medium.com/v2/resize:fit:720/1*SoJfYoBH3tlKRNS-O38fOA.png 720w, https://miro.medium.com/v2/resize:fit:750/1*SoJfYoBH3tlKRNS-O38fOA.png 750w, https://miro.medium.com/v2/resize:fit:786/1*SoJfYoBH3tlKRNS-O38fOA.png 786w, https://miro.medium.com/v2/resize:fit:828/1*SoJfYoBH3tlKRNS-O38fOA.png 828w, https://miro.medium.com/v2/resize:fit:1100/1*SoJfYoBH3tlKRNS-O38fOA.png 1100w, https://miro.medium.com/v2/resize:fit:1400/1*SoJfYoBH3tlKRNS-O38fOA.png 1400w" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px"/><img alt="" class="bh lo no c" width="700" height="517" loading="lazy" role="presentation"/></picture></div></div></figure><p id="03c9" class="pw-post-body-paragraph mh mi gu mj b mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd ne gn bk">In this block, the malware decrypts the data it received from the C2 server. Once decrypted, it stores the first byte in <code class="cx nt nu nv nw b">ECX</code> and compares hex value to <code class="cx nt nu nv nw b">0x7B</code> (char: <code class="cx nt nu nv nw b">‘{‘</code>). Tracing this function call to the return value, the string returned back will remove brackets from start to end. At memory address <code class="cx nt nu nv nw b">0x00404E69</code>, a DWORD pointer at <code class="cx nt nu nv nw b">eax+2ch</code> holds our newly decrypted and somewhat parsed string, that will be checked for a length greater than 0. If the buffer holds weight, we move on over to the final processing of this string routine at <code class="cx nt nu nv nw b">0x00404B00</code>, that I dubbed <code class="cx nt nu nv nw b">ParseC2Data()</code>. This function takes four parameters, <code class="cx nt nu nv nw b">char* datain</code>, <code class="cx nt nu nv nw b">int datain_size</code>, <code class="cx nt nu nv nw b">char *dataout</code>, <code class="cx nt nu nv nw b">int dataout_size</code>. The first blob on <code class="cx nt nu nv nw b">datain</code> data gets parsed from the first <code class="cx nt nu nv nw b">0x7C</code> (char: <code class="cx nt nu nv nw b">‘|’</code>) and extracts the victim id.</p><pre class="ni nj nk nl nm pa nw pb pc ay pd bk"><span id="8f53" class="pe ny gu nw b ij pf pg l ph pi">victim_id = GetXBytesFromC2Data(decrypted_block_data_from_c2, &amp;hex_7c, &amp;ptr_to_data_out);</span></pre><p id="4366" class="pw-post-body-paragraph mh mi gu mj b mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd ne gn bk"><code class="cx nt nu nv nw b">ptr_to_data_out</code> and <code class="cx nt nu nv nw b">EAX</code> will now hold an ID number of 216 (we got that number since we placed it there in our fake C2). The next block of code will finish the rest of the data:</p><pre class="ni nj nk nl nm pa nw pb pc ay pd bk"><span id="9ce8" class="pe ny gu nw b ij pf pg l ph pi">while ( victim_id )<br/>{<br/>   if ( CopyMemoryToAnotherLocation(&amp;some_buffer_to_copy_too, <br/>     8 * idx + 8) )<br/>   {<br/>        CopyBlocksofMemory(victim_id, <br/>                          &amp;some_buffer_to_copy_too[2 * idx + 1], <br/>                          &amp;some_buffer_to_copy_too[2 * idx]);<br/>        ++idx;<br/>        if ( ptr_to_data_out )<br/>        {<br/>            for ( i = 0; *(i + ptr_to_data_out) == 0x7C; ++i )<br/>            {<br/>               if (<br/>               CopyMemoryToAnotherLocation(&amp;some_buffer_to_copy_too, <br/>                                           8 * idx + 8) )<br/>                {<br/>                   ++v9;<br/>                   ++idx;<br/>                }<br/>             }<br/>         }<br/>    }<br/>    victim_id = GetXBytesFromC2Data(0, &amp;hex_7c_0,       <br/>                                    &amp;ptr_to_data_out);<br/>    ++v5;<br/>    ++v9;<br/>}</span></pre><p id="8c75" class="pw-post-body-paragraph mh mi gu mj b mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd ne gn bk">What’s happening here is that by every iteration of the character <code class="cx nt nu nv nw b">‘|’</code> we grab the next chunk of data and place it in memory into some type structure. The data jumps X amount of times per loop until it reaches the last <code class="cx nt nu nv nw b">0x7C</code> byte. It will loop a total of four times. After this function returns, <code class="cx nt nu nv nw b">dataout</code> will contain a pointer in memory to this local type, which we reversed to look like this:</p><pre class="ni nj nk nl nm pa nw pb pc ay pd bk"><span id="2493" class="pe ny gu nw b ij pf pg l ph pi">struct _C2ResponseData<br/>{<br/>   int victim_id;<br/>   char *onion_route;<br/>   const char* szPemPubKey;<br/>   char country_code[2];<br/>   char unique_id[4];<br/>};</span></pre><p id="b0c5" class="pw-post-body-paragraph mh mi gu mj b mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd ne gn bk">Shortly after, there is a check to make sure the victim id generated is no greater than 0x3E8 or that it is not an unsigned value.</p><pre class="ni nj nk nl nm pa nw pb pc ay pd bk"><span id="d99e" class="pe ny gu nw b ij pf pg l ph pi">value_of_index = CheckID(*(*parsed_data_out-&gt;victim_id));<br/>if ( value_of_index &gt; 0x3E8 || value_of_index == 0xFFFFFFFF )<br/>    value_of_index = 0x78;</span></pre><p id="d036" class="pw-post-body-paragraph mh mi gu mj b mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd ne gn bk">I believe certain malware will often perform these checks throughout the parsing of the C2 response server to make sure the data being fed back is authentic. Over at <code class="cx nt nu nv nw b">0x00404F35</code>, there is another check to see how many times it tried to reach the command server. If the check reaches exactly 3 times then it will move to check if the onion route is valid; all CryptoWall variants hardcode the first string index with ascii <code class="cx nt nu nv nw b">‘1’</code>. If it does not start with this number, then it will try to reach back again for a different payload. The other anti-tamper check it makes for the onion route is a CRC32 hash against the payload, if the compressed route does not equal <code class="cx nt nu nv nw b">0x63680E35</code>, the malware will try one last time to compare against the DWORD value of <code class="cx nt nu nv nw b">0x30BBB749</code>. The variant has two hardcoded 256 byte arrays to which it compares the encrypted values against. Brute-forcing can take a long time but is possible with a python script that I made <a class="af pj" href="https://github.com/ryancor/CryptoWall_Analysis/blob/master/tor_site_checksum_finder.py" rel="noopener ugc nofollow" target="_blank">here</a>. The checksum is quite simple, it will take each letter of the site string and logical-XOR against an unsigned value:</p><pre class="ni nj nk nl nm pa nw pb pc ay pd bk"><span id="1892" class="pe ny gu nw b ij pf pg l ph pi">tmp = ord(site[i])) ^ (ret_value &amp; 0xffffff)</span></pre><p id="371f" class="pw-post-body-paragraph mh mi gu mj b mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd ne gn bk">It will take the <code class="cx nt nu nv nw b">tmp</code> value and use it as an index in the hardcoded byte array to perform another logical-XOR against :</p><pre class="ni nj nk nl nm pa nw pb pc ay pd bk"><span id="9c15" class="pe ny gu nw b ij pf pg l ph pi">ret_value = bytes_array[tmp*4:(tmp*4)+4] ^ (0xFFFFFFFF &gt;&gt; 8)</span></pre><p id="18a0" class="pw-post-body-paragraph mh mi gu mj b mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd ne gn bk">The return value then gets <a class="af pj" href="https://github.com/ryancor/CryptoWall_Analysis/blob/master/tor_site_checksum_finder.py#L47" rel="noopener ugc nofollow" target="_blank">inverted</a> giving us a 4 byte hash to verify against. Now the malware moves on over to the main thread responsible for encrypting the victims files at <code class="cx nt nu nv nw b">0x00412988</code>. The first function call in this thread is from <code class="cx nt nu nv nw b">CryptAcquireContextW</code>, and that will acquire a handle to a particular key container within a CSP. <code class="cx nt nu nv nw b">16</code> bytes will then be allocated to the stack using VirtualAlloc; which will be the buffer to the original key.</p><pre class="ni nj nk nl nm pa nw pb pc ay pd bk"><span id="62eb" class="pe ny gu nw b ij pf pg l ph pi">isDecompressed = CreateTextForRansomwareNote(0, 0, 0);<br/>if ( !isRequestSuccess || !isDecompressed )<br/>{<br/>   remaining_c2_data = 0;<br/>   while ( 1 )<br/>   {<br/>      isRequestSuccess = SecondRequestToC2(&amp;rsa_key, <br/>                                &amp;rsa_key_size, &amp;remaining_c2_data);<br/>      if ( isRequestSuccess )<br/>         break;<br/>      sleep(0x1388u);<br/>}</span></pre><p id="6285" class="pw-post-body-paragraph mh mi gu mj b mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd ne gn bk">Once the text for the ransom note is decompressed, CryptoWall will place this note as an HTML, PNG, and TXT file inside of every directory the virus went through to encrypt documents. After this point, it will go through another round of requests to the I2P C2 servers to request another RSA 2048-bit public key. This key will be the one used for encryption. This strain will do a number of particular hardcoded hash checks on the data it gets back from the C2.</p><h1 id="90bb" class="nx ny gu bf nz oa ob oc od oe of og oh oi oj ok ol om on oo op oq or os ot ou bk">Decoding the Key</h1><p id="2aff" class="pw-post-body-paragraph mh mi gu mj b mk ov mm mn mo ow mq mr ms ox mu mv mw oy my mz na oz nc nd ne gn bk">CryptoWall will use basic Win32 Crypto functions like <code class="cx nt nu nv nw b">CryptStringToBinaryA</code>, <code class="cx nt nu nv nw b">CryptDecodeObjectEx</code>, &amp; <code class="cx nt nu nv nw b">CryptImportPublicKeyInfo</code> to decode the RSA key returned. Then it will import the public key information into the provider which then returns a handle of the public key. After importing is finished, all stored data will go into a local type structure like this:</p><pre class="ni nj nk nl nm pa nw pb pc ay pd bk"><span id="a71d" class="pe ny gu nw b ij pf pg l ph pi">struct _KeyData<br/>{<br/>   char *key;<br/>   int key_size;<br/>   BYTE *hash_data_1;<br/>   BYTE *hash_data_2;<br/>};</span><span id="1aba" class="pe ny gu nw b ij ps pg l ph pi">// Gets used here at 0x00412B8C<br/>if ( ImportKey_And_EncryptKey(<br/>       cryptContext,<br/>       rsa_key,<br/>       rsa_key_size,<br/>       OriginalKey-&gt;key,<br/>       &amp;OriginalKey-&gt;key_size,<br/>       &amp;OriginalKey-&gt;hash_data_1,<br/>       &amp;OriginalKey-&gt;hash_data_2) )<br/>{</span></pre><p id="0c3c" class="pw-post-body-paragraph mh mi gu mj b mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd ne gn bk">The next actions the malware takes is pretty basic for ransomware.. it will loop through every available drive, and use <code class="cx nt nu nv nw b">GetDriveTypeW</code> to determine whether a disk drive is a removable, fixed, CD-ROM, RAM disk, or network drive. In our case, the C drive is the only open drive which falls under the category of <code class="cx nt nu nv nw b">DRIVE_FIXED</code>. CryptoWall will only check if the drive is CD-ROM because it will not try to spread in that case.</p><pre class="ni nj nk nl nm pa nw pb pc ay pd bk"><span id="e1f3" class="pe ny gu nw b ij pf pg l ph pi">.text:00412C1B      mov     ecx, [ebp+driver_letter]<br/>.text:00412C1E      push    ecx<br/>.text:00412C1F      call    GetDriveTypeW<br/>.text:00412C2C      cmp     eax, 5<br/>.text:00412C2F      jz      skip_drive</span></pre><p id="aaef" class="pw-post-body-paragraph mh mi gu mj b mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd ne gn bk"><code class="cx nt nu nv nw b">EAX</code> holds the integer value returned from the function call which represents the type of drive associated with that number (5 == <strong class="mj gv">DRIVE_CDROM</strong>). You can find the documentation <a class="af pj" href="https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-getdrivetypew" rel="noopener ugc nofollow" target="_blank">here</a>.</p><p id="5c72" class="pw-post-body-paragraph mh mi gu mj b mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd ne gn bk">The exciting part is near as we are about to head over to where the malware duplicates the key it retrieved from our <a class="af pj" href="https://github.com/ryancor/CryptoWall_Analysis/blob/master/fake_c2_i2p_server.py#L74" rel="noopener ugc nofollow" target="_blank">fake C2 server</a> at address <code class="cx nt nu nv nw b">0x00412C7A</code>. What is happening here is pretty straight forward, and we can show in pseudo-code:</p><pre class="ni nj nk nl nm pa nw pb pc ay pd bk"><span id="d24b" class="pe ny gu nw b ij pf pg l ph pi">if (OriginalKey)<br/>   DuplicatedKey = HeapAlloc(16)<br/>   if (DuplicatedKey)<br/>      CryptDuplicateKey(OriginalKey, 0, 0, DuplicatedKey)<br/>      memcpy(DuplicatedKey, OriginalKey, OrignalKey_size)<br/>      CryptDestroyKey(OriginalKey)</span></pre><p id="7349" class="pw-post-body-paragraph mh mi gu mj b mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd ne gn bk">Essentially <code class="cx nt nu nv nw b">CryptDuplicateKey</code> is making an exact copy of a key and the state of the key. The <code class="cx nt nu nv nw b">DuplicatedKey</code> variable ends up becoming a struct as we can see after the function call at <code class="cx nt nu nv nw b">0x00412C7A</code>, it gets used to store volume information about the drive its currently infecting.</p><pre class="ni nj nk nl nm pa nw pb pc ay pd bk"><span id="503c" class="pe ny gu nw b ij pf pg l ph pi">GetVolumeInformation(driver_letter, DuplicatedKey + 20);<br/>if ( MoveDriverLetterToDupKeyStruct(driver_letter, <br/>   (DuplicatedKey + 16), 0) {<br/>    ...</span></pre><p id="fb31" class="pw-post-body-paragraph mh mi gu mj b mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd ne gn bk">That is why 24 bytes was used to allocate to the heap when creating this variable instead of 16. Now we can define our struct from what we know so far:</p><pre class="ni nj nk nl nm pa nw pb pc ay pd bk"><span id="80d5" class="pe ny gu nw b ij pf pg l ph pi">struct _DupKey<br/>{<br/>   const char *key;<br/>   int key_size;<br/>   DWORD unknown1;<br/>   DWORD unknown2;<br/>   char *drive_letter;<br/>   LPDWORD lpVolumeSerialNumber;<br/>   DWORD unknown3;<br/>};</span><span id="9394" class="pe ny gu nw b ij ps pg l ph pi">// Now our code looks cleaner from above<br/>GetVolumeInformation(driver_letter, <br/>     &amp;DuplicatedKey-&gt;lpVolumeSerialNumber);<br/>if ( MoveDriverLetterToDupKeyStruct(driver_letter, <br/>     &amp;DuplicatedKey-&gt;drive_letter, 0) {<br/>      ...</span></pre><h1 id="79d9" class="nx ny gu bf nz oa ob oc od oe of og oh oi oj ok ol om on oo op oq or os ot ou bk">Encrypting of Files</h1><p id="5503" class="pw-post-body-paragraph mh mi gu mj b mk ov mm mn mo ow mq mr ms ox mu mv mw oy my mz na oz nc nd ne gn bk">After the malware is finished storing all pertinent information regarding how and where it will do its encryption, CryptoWall moves forward to the main encryption loop at <code class="cx nt nu nv nw b">0x00416780</code>.</p><figure class="ni nj nk nl nm nn nf ng paragraph-image"><div class="nf ng qe"><picture><source srcSet="https://miro.medium.com/v2/resize:fit:640/format:webp/1*NmFku65YhExkVnukJSijiQ.png 640w, https://miro.medium.com/v2/resize:fit:720/format:webp/1*NmFku65YhExkVnukJSijiQ.png 720w, https://miro.medium.com/v2/resize:fit:750/format:webp/1*NmFku65YhExkVnukJSijiQ.png 750w, https://miro.medium.com/v2/resize:fit:786/format:webp/1*NmFku65YhExkVnukJSijiQ.png 786w, https://miro.medium.com/v2/resize:fit:828/format:webp/1*NmFku65YhExkVnukJSijiQ.png 828w, https://miro.medium.com/v2/resize:fit:1100/format:webp/1*NmFku65YhExkVnukJSijiQ.png 1100w, https://miro.medium.com/v2/resize:fit:460/format:webp/1*NmFku65YhExkVnukJSijiQ.png 460w" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 230px" type="image/webp"/><source data-testid="og" srcSet="https://miro.medium.com/v2/resize:fit:640/1*NmFku65YhExkVnukJSijiQ.png 640w, https://miro.medium.com/v2/resize:fit:720/1*NmFku65YhExkVnukJSijiQ.png 720w, https://miro.medium.com/v2/resize:fit:750/1*NmFku65YhExkVnukJSijiQ.png 750w, https://miro.medium.com/v2/resize:fit:786/1*NmFku65YhExkVnukJSijiQ.png 786w, https://miro.medium.com/v2/resize:fit:828/1*NmFku65YhExkVnukJSijiQ.png 828w, https://miro.medium.com/v2/resize:fit:1100/1*NmFku65YhExkVnukJSijiQ.png 1100w, https://miro.medium.com/v2/resize:fit:460/1*NmFku65YhExkVnukJSijiQ.png 460w" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 230px"/><img alt="" class="bh lo no c" width="230" height="500" loading="lazy" role="presentation"/></picture></div><figcaption class="np ff nq nf ng nr ns bf b bg z du">Encryption Loop Control Flow Graph</figcaption></figure><p id="7251" class="pw-post-body-paragraph mh mi gu mj b mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd ne gn bk">As we can see, the control flow graph is fairly long in this subroutine, but nothing out of the ordinary when it comes to ransomware. A lot has to be done before encrypting files. At the start of this function, we see an immediate call to <code class="cx nt nu nv nw b">HeapAlloc</code> to allocate 260 bytes of memory. We can automatically assume this will be used to store the file’s absolute path, as Windows OS only allows a max of 260 bytes. Upon success, there is also an allocation of virtual memory with a size of 592 bytes that will later be used as the file buffer contents. Then the API call <code class="cx nt nu nv nw b">FindFirstFileW</code> uses this newly allocated buffer to store the first filename found on system. The pseudo-code below will explain the flow:</p><pre class="ni nj nk nl nm pa nw pb pc ay pd bk"><span id="4dd0" class="pe ny gu nw b ij pf pg l ph pi">lpFileName = Allocate260BlockOfMemory(); // HeapAlloc<br/>if ( lpFileName )<br/>{<br/>   (*(wcscpy + 292))(lpFileName, driver_letter);<br/>   ...<br/>   lpFindFileData = AllocateSetMemory(592); // VirtualAlloc<br/>   if ( lpFindFileData )<br/>   {<br/>      hFile = (*(FindFirstFileW + 504))(lpFileName, lpFindFileData);<br/>      if ( hFile != 0xFFFFFFFF )<br/>      {<br/>        v29 = 0;<br/>        do <br/>        {<br/>          // Continue down to further file actions</span></pre><p id="a8d1" class="pw-post-body-paragraph mh mi gu mj b mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd ne gn bk">Before the malware opens up the first victim file, it needs to make sure the file and file extension themselves are not part of their hardcoded blacklist of bytes. It does this check using a simple CRC-32 hash check. It will take the filename, and extension; compress it down to a DWORD, then compare that DWORD to a list of bytes that live in the <code class="cx nt nu nv nw b">.data</code> section.</p><figure class="ni nj nk nl nm nn nf ng paragraph-image"><div role="button" tabindex="0" class="pl pm fj pn bh po"><div class="nf ng qf"><picture><source srcSet="https://miro.medium.com/v2/resize:fit:640/format:webp/1*ReeUNefaq9G5FUOYWLip0g.png 640w, https://miro.medium.com/v2/resize:fit:720/format:webp/1*ReeUNefaq9G5FUOYWLip0g.png 720w, https://miro.medium.com/v2/resize:fit:750/format:webp/1*ReeUNefaq9G5FUOYWLip0g.png 750w, https://miro.medium.com/v2/resize:fit:786/format:webp/1*ReeUNefaq9G5FUOYWLip0g.png 786w, https://miro.medium.com/v2/resize:fit:828/format:webp/1*ReeUNefaq9G5FUOYWLip0g.png 828w, https://miro.medium.com/v2/resize:fit:1100/format:webp/1*ReeUNefaq9G5FUOYWLip0g.png 1100w, https://miro.medium.com/v2/resize:fit:1400/format:webp/1*ReeUNefaq9G5FUOYWLip0g.png 1400w" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px" type="image/webp"/><source data-testid="og" srcSet="https://miro.medium.com/v2/resize:fit:640/1*ReeUNefaq9G5FUOYWLip0g.png 640w, https://miro.medium.com/v2/resize:fit:720/1*ReeUNefaq9G5FUOYWLip0g.png 720w, https://miro.medium.com/v2/resize:fit:750/1*ReeUNefaq9G5FUOYWLip0g.png 750w, https://miro.medium.com/v2/resize:fit:786/1*ReeUNefaq9G5FUOYWLip0g.png 786w, https://miro.medium.com/v2/resize:fit:828/1*ReeUNefaq9G5FUOYWLip0g.png 828w, https://miro.medium.com/v2/resize:fit:1100/1*ReeUNefaq9G5FUOYWLip0g.png 1100w, https://miro.medium.com/v2/resize:fit:1400/1*ReeUNefaq9G5FUOYWLip0g.png 1400w" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px"/><img alt="" class="bh lo no c" width="700" height="352" loading="lazy" role="presentation"/></picture></div></div></figure><p id="8d01" class="pw-post-body-paragraph mh mi gu mj b mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd ne gn bk">To see how the algorithm works, I reversed it to python code, and wrote my own <a class="af pj" href="https://github.com/ryancor/CryptoWall_Analysis/blob/master/tor_site_checksum_finder.py#L69" rel="noopener ugc nofollow" target="_blank">file checker</a>.</p><pre class="ni nj nk nl nm pa nw pb pc ay pd bk"><span id="52c9" class="pe ny gu nw b ij pf pg l ph pi">➜  python tor_site_checksum_finder.py --check-file-ext &quot;dll&quot;<br/>[!] Searching PE sections for compressed .data<br/>[!] Searching PE sections for compressed extension .data<br/><br/>[-] &#x27;.dll&#x27; is not a valid file extension for Cryptowall<br/><br/>➜  python tor_site_checksum_finder.py --check-file-ext &quot;py&quot;<br/>[!] Searching PE sections for compressed .data<br/>[!] Searching PE sections for compressed extension .data<br/><br/>[+] &#x27;.py&#x27; is a valid file extension for Cryptowall</span></pre><p id="1726" class="pw-post-body-paragraph mh mi gu mj b mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd ne gn bk">Now we can easily tell what type of files CryptoWall will attack. Obvious extensions like <code class="cx nt nu nv nw b">.dll</code>, <code class="cx nt nu nv nw b">.exe</code>, and <code class="cx nt nu nv nw b">.sys</code> is a very common file type for ransomware to avoid.</p><figure class="ni nj nk nl nm nn nf ng paragraph-image"><div role="button" tabindex="0" class="pl pm fj pn bh po"><div class="nf ng qg"><picture><source srcSet="https://miro.medium.com/v2/resize:fit:640/format:webp/1*S_SE2QCFFUs9NxiVSBAmiA.png 640w, https://miro.medium.com/v2/resize:fit:720/format:webp/1*S_SE2QCFFUs9NxiVSBAmiA.png 720w, https://miro.medium.com/v2/resize:fit:750/format:webp/1*S_SE2QCFFUs9NxiVSBAmiA.png 750w, https://miro.medium.com/v2/resize:fit:786/format:webp/1*S_SE2QCFFUs9NxiVSBAmiA.png 786w, https://miro.medium.com/v2/resize:fit:828/format:webp/1*S_SE2QCFFUs9NxiVSBAmiA.png 828w, https://miro.medium.com/v2/resize:fit:1100/format:webp/1*S_SE2QCFFUs9NxiVSBAmiA.png 1100w, https://miro.medium.com/v2/resize:fit:1400/format:webp/1*S_SE2QCFFUs9NxiVSBAmiA.png 1400w" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px" type="image/webp"/><source data-testid="og" srcSet="https://miro.medium.com/v2/resize:fit:640/1*S_SE2QCFFUs9NxiVSBAmiA.png 640w, https://miro.medium.com/v2/resize:fit:720/1*S_SE2QCFFUs9NxiVSBAmiA.png 720w, https://miro.medium.com/v2/resize:fit:750/1*S_SE2QCFFUs9NxiVSBAmiA.png 750w, https://miro.medium.com/v2/resize:fit:786/1*S_SE2QCFFUs9NxiVSBAmiA.png 786w, https://miro.medium.com/v2/resize:fit:828/1*S_SE2QCFFUs9NxiVSBAmiA.png 828w, https://miro.medium.com/v2/resize:fit:1100/1*S_SE2QCFFUs9NxiVSBAmiA.png 1100w, https://miro.medium.com/v2/resize:fit:1400/1*S_SE2QCFFUs9NxiVSBAmiA.png 1400w" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px"/><img alt="" class="bh lo no c" width="700" height="288" loading="lazy" role="presentation"/></picture></div></div></figure><p id="5c70" class="pw-post-body-paragraph mh mi gu mj b mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd ne gn bk">If the file passes these two checks, then it moves on over to the last part of the equation; the actual encryption located at <code class="cx nt nu nv nw b">0x00412260</code>. We can skip the first few function calls as they are not pertinent to what is about to happen. If you take a look at address <code class="cx nt nu nv nw b">0x00412358</code>, there is a subroutine that takes in three parameters; a file handle, our DuplicateKeyStruct, and a file size. Stepping into the function, we can immediately tell what is happening:</p><pre class="ni nj nk nl nm pa nw pb pc ay pd bk"><span id="650e" class="pe ny gu nw b ij pf pg l ph pi">if(ReadFileA(hFile, lpBuffer, <br/>          DuplicateKeyStruct-&gt;file_hash_size, <br/>          &amp;lpNumberOfBytesRead, 0) &amp;&amp; lpNumberOfBytesRead) ==<br/>   DuplicateKeyStruct-&gt;file_hash_size<br/>{<br/>     if(memcmp(lpBuffer, DuplicateKeyStruct-&gt;file_hash, <br/>               DuplicateKeyStruct-&gt;file_hash_size))<br/>     {    <br/>         isCompare = 1;<br/>     }<br/>}</span></pre><p id="0399" class="pw-post-body-paragraph mh mi gu mj b mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd ne gn bk">The pseudo-code is telling us that if an MD5 hash of the file is present in the header, then its already been encrypted. If this function returns <code class="cx nt nu nv nw b">isCompared</code> to be true, then CryptoWall moves on to another file and will leave this one alone. If it returns false from the <code class="cx nt nu nv nw b">Compare16ByteHeader()</code> function call, the malware will append to the file’s extension by using a simple algorithm to generate a three lettered string to place at the end. The generation takes a timestamp, uses it as a seed, and takes that seed to then mod the first three bytes by 26 then added to 97.</p><pre class="ni nj nk nl nm pa nw pb pc ay pd bk"><span id="8c1d" class="pe ny gu nw b ij pf pg l ph pi">*(v8 + 2 * i) = DataSizeBasedOnSeed(0, 0x3E8u) % 26 + 97;</span></pre><p id="50b9" class="pw-post-body-paragraph mh mi gu mj b mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd ne gn bk">This is essentially a rotation cipher, where you have a numerical variable checked by a modulate to ensure it doesn’t go past alphanumeric values, then the addition to 97 rotates the ordinal 45 times. As an example, if we have the letter <code class="cx nt nu nv nw b">‘A’</code>, then after this cipher, it ends up becoming an <code class="cx nt nu nv nw b">’n’</code>. In conclusion, if the victim file is named <code class="cx nt nu nv nw b">hello.py</code>, this subroutine will rename it to <code class="cx nt nu nv nw b">hello.py.3xy</code>.</p><p id="e897" class="pw-post-body-paragraph mh mi gu mj b mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd ne gn bk">Next, around address <code class="cx nt nu nv nw b">0x004123F0</code>, the generation of an AES-256 key begins with another call to Win32’s <code class="cx nt nu nv nw b">CryptAcquireContextW</code>. The <code class="cx nt nu nv nw b">phProv</code> handler gets passed over to be used in <code class="cx nt nu nv nw b">CryptGenKey</code> and <code class="cx nt nu nv nw b">CryptGetKeyParam</code>.</p><pre class="ni nj nk nl nm pa nw pb pc ay pd bk"><span id="8baa" class="pe ny gu nw b ij pf pg l ph pi">if ( CryptGenKey(hProv, 0x6610, 1, &amp;hKey) ):<br/>    pbData_1 = 0;<br/>    pdwDataLen_1 = 4;<br/>    if ( CryptGetKeyParam(hKey, 8, &amp;pbData_1, &amp;pdwDataLen_1, 0, 4)</span></pre><p id="0bab" class="pw-post-body-paragraph mh mi gu mj b mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd ne gn bk">The hexadecimal value of <code class="cx nt nu nv nw b">0x6610</code> shown above tells us that the generated key is going to be AES-256 as seen in <a class="af pj" href="https://docs.microsoft.com/en-us/windows/win32/seccrypto/alg-id" rel="noopener ugc nofollow" target="_blank">MS-DOCS</a>. Once the <code class="cx nt nu nv nw b">hKey</code> address to which the function copies the handle of the newly generated key is populated, <code class="cx nt nu nv nw b">CryptGetKeyParam</code> will be used to make the key and transfer it into <code class="cx nt nu nv nw b">pbData</code>; a pointer to a buffer that receives the data. One last call in this function we labeled as <code class="cx nt nu nv nw b">GenerateAESKey()</code> gets called which is <code class="cx nt nu nv nw b">CryptExportKey</code>. This will take the handle to the key to be exported and pass it the function, and the function returns a key BLOB. The second parameter of the <code class="cx nt nu nv nw b">GenerateAESKey()</code> will hold the <code class="cx nt nu nv nw b">aes_key</code>.</p><figure class="ni nj nk nl nm nn nf ng paragraph-image"><div role="button" tabindex="0" class="pl pm fj pn bh po"><div class="nf ng qh"><picture><source srcSet="https://miro.medium.com/v2/resize:fit:640/format:webp/1*ikExErHFMPukGGP-Bw0g-w.png 640w, https://miro.medium.com/v2/resize:fit:720/format:webp/1*ikExErHFMPukGGP-Bw0g-w.png 720w, https://miro.medium.com/v2/resize:fit:750/format:webp/1*ikExErHFMPukGGP-Bw0g-w.png 750w, https://miro.medium.com/v2/resize:fit:786/format:webp/1*ikExErHFMPukGGP-Bw0g-w.png 786w, https://miro.medium.com/v2/resize:fit:828/format:webp/1*ikExErHFMPukGGP-Bw0g-w.png 828w, https://miro.medium.com/v2/resize:fit:1100/format:webp/1*ikExErHFMPukGGP-Bw0g-w.png 1100w, https://miro.medium.com/v2/resize:fit:1400/format:webp/1*ikExErHFMPukGGP-Bw0g-w.png 1400w" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px" type="image/webp"/><source data-testid="og" srcSet="https://miro.medium.com/v2/resize:fit:640/1*ikExErHFMPukGGP-Bw0g-w.png 640w, https://miro.medium.com/v2/resize:fit:720/1*ikExErHFMPukGGP-Bw0g-w.png 720w, https://miro.medium.com/v2/resize:fit:750/1*ikExErHFMPukGGP-Bw0g-w.png 750w, https://miro.medium.com/v2/resize:fit:786/1*ikExErHFMPukGGP-Bw0g-w.png 786w, https://miro.medium.com/v2/resize:fit:828/1*ikExErHFMPukGGP-Bw0g-w.png 828w, https://miro.medium.com/v2/resize:fit:1100/1*ikExErHFMPukGGP-Bw0g-w.png 1100w, https://miro.medium.com/v2/resize:fit:1400/1*ikExErHFMPukGGP-Bw0g-w.png 1400w" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px"/><img alt="" class="bh lo no c" width="700" height="445" loading="lazy" role="presentation"/></picture></div></div></figure><p id="0352" class="pw-post-body-paragraph mh mi gu mj b mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd ne gn bk">The next call is one of the most important ones to understand how eventually we can decrypt the files that CryptoWall infected. <code class="cx nt nu nv nw b">EncryptAESKey()</code> uses the pointer to <code class="cx nt nu nv nw b">DuplicateKeyStruct-&gt;rsa_key</code> to encrypt our AES key into a 256 byte blob. Exploring inside this function call is fairly simple; it uses <code class="cx nt nu nv nw b">CryptDuplicateKey</code> and <code class="cx nt nu nv nw b">CryptEncrypt</code> to take our public RSA 2048-bit key from earlier, our newly generated AES key to duplicate both keys to save for later, and encrypt the buffer. The fifth parameter is our data out in this case and once the function returns, what we labeled as <code class="cx nt nu nv nw b">encrypted_AESkey_buffer</code> will hold our RSA encrypted key.</p><p id="1e9e" class="pw-post-body-paragraph mh mi gu mj b mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd ne gn bk">At around address <code class="cx nt nu nv nw b">004124A5</code>, you will see two calls to <code class="cx nt nu nv nw b">WriteFileA</code>. The first call will move the <code class="cx nt nu nv nw b">16</code> byte MD5 hash at the top of the victim file, and the second call will write out the <code class="cx nt nu nv nw b">256</code> bytes of encrypted key buffer right below the hash.</p><figure class="ni nj nk nl nm nn nf ng paragraph-image"><div role="button" tabindex="0" class="pl pm fj pn bh po"><div class="nf ng qi"><picture><source srcSet="https://miro.medium.com/v2/resize:fit:640/format:webp/1*KWfCbeOGpctfMHoNtyI-Fw.png 640w, https://miro.medium.com/v2/resize:fit:720/format:webp/1*KWfCbeOGpctfMHoNtyI-Fw.png 720w, https://miro.medium.com/v2/resize:fit:750/format:webp/1*KWfCbeOGpctfMHoNtyI-Fw.png 750w, https://miro.medium.com/v2/resize:fit:786/format:webp/1*KWfCbeOGpctfMHoNtyI-Fw.png 786w, https://miro.medium.com/v2/resize:fit:828/format:webp/1*KWfCbeOGpctfMHoNtyI-Fw.png 828w, https://miro.medium.com/v2/resize:fit:1100/format:webp/1*KWfCbeOGpctfMHoNtyI-Fw.png 1100w, https://miro.medium.com/v2/resize:fit:1400/format:webp/1*KWfCbeOGpctfMHoNtyI-Fw.png 1400w" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px" type="image/webp"/><source data-testid="og" srcSet="https://miro.medium.com/v2/resize:fit:640/1*KWfCbeOGpctfMHoNtyI-Fw.png 640w, https://miro.medium.com/v2/resize:fit:720/1*KWfCbeOGpctfMHoNtyI-Fw.png 720w, https://miro.medium.com/v2/resize:fit:750/1*KWfCbeOGpctfMHoNtyI-Fw.png 750w, https://miro.medium.com/v2/resize:fit:786/1*KWfCbeOGpctfMHoNtyI-Fw.png 786w, https://miro.medium.com/v2/resize:fit:828/1*KWfCbeOGpctfMHoNtyI-Fw.png 828w, https://miro.medium.com/v2/resize:fit:1100/1*KWfCbeOGpctfMHoNtyI-Fw.png 1100w, https://miro.medium.com/v2/resize:fit:1400/1*KWfCbeOGpctfMHoNtyI-Fw.png 1400w" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px"/><img alt="" class="bh lo no c" width="700" height="477" loading="lazy" role="presentation"/></picture></div></div><figcaption class="np ff nq nf ng nr ns bf b bg z du">Screenshot shows 128 byte encrypted key buffer, but it was a copy mistake; Supposed to be 256 bytes of encrypted key text.</figcaption></figure><p id="666d" class="pw-post-body-paragraph mh mi gu mj b mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd ne gn bk">The picture above shows what an example file will look like up until this stage of the infection. The plaintext is still intact, but the headers now hold the hash of the file and the encrypted AES key used to encrypt the plaintext in the next phase. <code class="cx nt nu nv nw b">ReadFileA</code> will shortly get called at <code class="cx nt nu nv nw b">0x0041261B</code>, which will read out everything after the header of the file to start the encryption process.</p><figure class="ni nj nk nl nm nn nf ng paragraph-image"><div role="button" tabindex="0" class="pl pm fj pn bh po"><div class="nf ng qg"><picture><source srcSet="https://miro.medium.com/v2/resize:fit:640/format:webp/1*HN797MwKNLPqrF95p6FYHg.png 640w, https://miro.medium.com/v2/resize:fit:720/format:webp/1*HN797MwKNLPqrF95p6FYHg.png 720w, https://miro.medium.com/v2/resize:fit:750/format:webp/1*HN797MwKNLPqrF95p6FYHg.png 750w, https://miro.medium.com/v2/resize:fit:786/format:webp/1*HN797MwKNLPqrF95p6FYHg.png 786w, https://miro.medium.com/v2/resize:fit:828/format:webp/1*HN797MwKNLPqrF95p6FYHg.png 828w, https://miro.medium.com/v2/resize:fit:1100/format:webp/1*HN797MwKNLPqrF95p6FYHg.png 1100w, https://miro.medium.com/v2/resize:fit:1400/format:webp/1*HN797MwKNLPqrF95p6FYHg.png 1400w" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px" type="image/webp"/><source data-testid="og" srcSet="https://miro.medium.com/v2/resize:fit:640/1*HN797MwKNLPqrF95p6FYHg.png 640w, https://miro.medium.com/v2/resize:fit:720/1*HN797MwKNLPqrF95p6FYHg.png 720w, https://miro.medium.com/v2/resize:fit:750/1*HN797MwKNLPqrF95p6FYHg.png 750w, https://miro.medium.com/v2/resize:fit:786/1*HN797MwKNLPqrF95p6FYHg.png 786w, https://miro.medium.com/v2/resize:fit:828/1*HN797MwKNLPqrF95p6FYHg.png 828w, https://miro.medium.com/v2/resize:fit:1100/1*HN797MwKNLPqrF95p6FYHg.png 1100w, https://miro.medium.com/v2/resize:fit:1400/1*HN797MwKNLPqrF95p6FYHg.png 1400w" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px"/><img alt="" class="bh lo no c" width="700" height="525" loading="lazy" role="presentation"/></picture></div></div></figure><p id="f535" class="pw-post-body-paragraph mh mi gu mj b mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd ne gn bk">Now that <code class="cx nt nu nv nw b">272</code> bytes belong to the header, anything after that we can assume is free range for the next function to deal with. We don’t really need to deep dive too much into what <code class="cx nt nu nv nw b">DuplicateAESKey_And_Encrypt()</code> does as it is pretty self explanatory. The file contents are encrypted using the already generated AES key from above that was passed into the <code class="cx nt nu nv nw b">HCRYPTKEY *hKey</code> variable. The sixth parameter of this function is the pointer which will contain the encrypted buffer. At this point the ransomware will replace the plaintext with an encrypted blob, and the AES key is free’d from memory.</p><figure class="ni nj nk nl nm nn nf ng paragraph-image"><div role="button" tabindex="0" class="pl pm fj pn bh po"><div class="nf ng qj"><picture><source srcSet="https://miro.medium.com/v2/resize:fit:640/format:webp/1*vmAqzukEyLCdGVe1pmIgHQ.png 640w, https://miro.medium.com/v2/resize:fit:720/format:webp/1*vmAqzukEyLCdGVe1pmIgHQ.png 720w, https://miro.medium.com/v2/resize:fit:750/format:webp/1*vmAqzukEyLCdGVe1pmIgHQ.png 750w, https://miro.medium.com/v2/resize:fit:786/format:webp/1*vmAqzukEyLCdGVe1pmIgHQ.png 786w, https://miro.medium.com/v2/resize:fit:828/format:webp/1*vmAqzukEyLCdGVe1pmIgHQ.png 828w, https://miro.medium.com/v2/resize:fit:1100/format:webp/1*vmAqzukEyLCdGVe1pmIgHQ.png 1100w, https://miro.medium.com/v2/resize:fit:1400/format:webp/1*vmAqzukEyLCdGVe1pmIgHQ.png 1400w" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px" type="image/webp"/><source data-testid="og" srcSet="https://miro.medium.com/v2/resize:fit:640/1*vmAqzukEyLCdGVe1pmIgHQ.png 640w, https://miro.medium.com/v2/resize:fit:720/1*vmAqzukEyLCdGVe1pmIgHQ.png 720w, https://miro.medium.com/v2/resize:fit:750/1*vmAqzukEyLCdGVe1pmIgHQ.png 750w, https://miro.medium.com/v2/resize:fit:786/1*vmAqzukEyLCdGVe1pmIgHQ.png 786w, https://miro.medium.com/v2/resize:fit:828/1*vmAqzukEyLCdGVe1pmIgHQ.png 828w, https://miro.medium.com/v2/resize:fit:1100/1*vmAqzukEyLCdGVe1pmIgHQ.png 1100w, https://miro.medium.com/v2/resize:fit:1400/1*vmAqzukEyLCdGVe1pmIgHQ.png 1400w" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px"/><img alt="" class="bh lo no c" width="700" height="73" loading="lazy" role="presentation"/></picture></div></div><figcaption class="np ff nq nf ng nr ns bf b bg z du">Example of a fully encrypted file</figcaption></figure><p id="6df3" class="pw-post-body-paragraph mh mi gu mj b mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd ne gn bk">After the file is finished being processed, the loop will continue until every allow listed file type on disk is encrypted.</p><h1 id="780e" class="nx ny gu bf nz oa ob oc od oe of og oh oi oj ok ol om on oo op oq or os ot ou bk">Decrypting Victim Files</h1><p id="976d" class="pw-post-body-paragraph mh mi gu mj b mk ov mm mn mo ow mq mr ms ox mu mv mw oy my mz na oz nc nd ne gn bk">Unfortunately in this case, it is only possible to write a decryption algorithm if you know the private key used which is generated on the C2 side. This is going to be a two step process as in order to decrypt the file contents, we need to decrypt the AES key that has been RSA encrypted.</p><p id="a904" class="pw-post-body-paragraph mh mi gu mj b mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd ne gn bk">The <a class="af pj" href="https://github.com/ryancor/CryptoWall_Analysis/blob/master/fake_c2_i2p_server.py#L37" rel="noopener ugc nofollow" target="_blank">fake C2 server</a> I wrote also includes an area where a private key is generated at the same time that the public key is generated. So in my case, all encrypted files on my VM are able to be decrypted.</p><p id="dd35" class="pw-post-body-paragraph mh mi gu mj b mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd ne gn bk"><strong class="mj gv">Side Note:</strong> In order to run this C2 server, you have to place the malware’s hardcoded I2P addresses in <code class="cx nt nu nv nw b">/etc/hosts</code> on Windows. Then make sure the server has started before executing the malware as there will be a lot of initial verification going back and forth between the malware and ‘C2’ to ensure its legitimacy. Your file should look like this:</p><pre class="ni nj nk nl nm pa nw pb pc ay pd bk"><span id="b477" class="pe ny gu nw b ij pf pg l ph pi">127.0.0.1 proxy1-1-1.i2p<br/>127.0.0.1 proxy2-2-2.i2p</span></pre><p id="6511" class="pw-post-body-paragraph mh mi gu mj b mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd ne gn bk">Another reason why we un the fake C2 server before executing the malware is so we don’t end up in some dead lock state. The output from our server will look something like this:</p><pre class="ni nj nk nl nm pa nw pb pc ay pd bk"><span id="a4de" class="pe ny gu nw b ij pf pg l ph pi">C:\CryptoWall\&gt; python.exe fake_c2_i2p_server.py<br/><br/>* Serving Flask app &quot;fake_c2_server&quot; (lazy loading)<br/>127.0.0.1 - - [31/Mar/2020 15:10:06] &quot;�[33mGET / HTTP/1.1�[0m&quot; 404 -<br/><br/>Data Received from CryptoWall Binary:<br/>------------------------------<br/>[!] Found URI Header: 93n14chwb3qpm<br/>[+] Created key from URI: 13349bchmnpqw<br/>[!] Found ciphertext: ff977e974ca21f20a160ebb12bd99bd616d3690c3f4358e2b8168f54929728a189c8797bfa12cfa031ee9c2fe02e31f0762178b3b640837e34d18407ecbc33<br/>[+] Recovered plaintext: b&#x27;{1|crypt1|C6B359277232C8E248AFD89C98E96D65|0|2|1||55.59.84.254}&#x27;<br/><br/>[+] Sending encrypted data blob back to cryptowall process<br/>127.0.0.1 - - [31/Mar/2020 15:11:52] &quot;�[37mPOST /93n14chwb3qpm HTTP/1.1�[0m&quot; 200</span></pre><p id="87bf" class="pw-post-body-paragraph mh mi gu mj b mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd ne gn bk">Step by step, the first thing we have to do is write a program that imports the private key file. I used C++ for this portion because for the life of me I could not figure out how to mimic the <code class="cx nt nu nv nw b">CryptDecodeObjectEx</code> API call that decodes the key in a <code class="cx nt nu nv nw b">X509_ASN_ENCODING</code> and <code class="cx nt nu nv nw b">PKCS_7_ASN_ENCODING</code> format. Once you have the key blob from this function, we can use this function as the malware does and call <code class="cx nt nu nv nw b">CryptImportKey</code>, but this time it is a private key and not a public key ;). Since the first <code class="cx nt nu nv nw b">16</code> bytes of the victim file contains the MD5 hash of the unencrypted file, we know we can skip that part and focus on the <code class="cx nt nu nv nw b">256</code> bytes after that part of the header. The block size is going be <code class="cx nt nu nv nw b">256</code> bytes and AES offset will be <code class="cx nt nu nv nw b">272</code>, since that will be the last byte needed in the cryptographic equation. Once we get the blob, it is now okay to call <code class="cx nt nu nv nw b">CryptDecrypt</code> and print out the <code class="cx nt nu nv nw b">32</code> byte key blob:</p><pre class="ni nj nk nl nm pa nw pb pc ay pd bk"><span id="39cf" class="pe ny gu nw b ij pf pg l ph pi">if (!CryptDecrypt(hKey, NULL, FALSE, 0, keyBuffer, &amp;bytesRead))  <br/>{      <br/>   printf(&quot;[-] CryptDecrypt failed with error 0x%.8X\n&quot;,<br/>     GetLastError());      <br/>   return FALSE;  <br/>}   </span><span id="00c7" class="pe ny gu nw b ij ps pg l ph pi">printf(&quot;[+] Decrypted AES Key =&gt; &quot;);  <br/>for(int i = 0; i &lt; bytesRead; i++)  <br/>{    <br/>   printf(&quot;%02x&quot;, keyBuffer[i]);  <br/>}</span></pre><p id="f6e9" class="pw-post-body-paragraph mh mi gu mj b mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd ne gn bk">You can find the whole script <a class="af pj" href="https://github.com/ryancor/CryptoWall_Analysis/blob/master/In_Progress/decrypt_aes_key.cpp" rel="noopener ugc nofollow" target="_blank">here</a>. Now that we are half way there and we have an AES key, the last thing to do is write a simple python script that will take that key / encrypted file and decrypt all remaining contents of it after the 272nd byte.</p><pre class="ni nj nk nl nm pa nw pb pc ay pd bk"><span id="671f" class="pe ny gu nw b ij pf pg l ph pi">enc_data_remainder = file_data[272:]<br/>cipher = AES.new(aes_key, AES.MODE_ECB)        <br/>plaintext = cipher.decrypt(enc_data_remainder)</span></pre><p id="cd5f" class="pw-post-body-paragraph mh mi gu mj b mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd ne gn bk">The script to perform this action is in the same folder on <a class="af pj" href="https://github.com/ryancor/CryptoWall_Analysis/blob/master/In_Progress/decrypt_file.py" rel="noopener ugc nofollow" target="_blank">Github</a>. If you want to see how the whole thing looks from start to finish, it will go like this:</p><pre class="ni nj nk nl nm pa nw pb pc ay pd bk"><span id="3e51" class="pe ny gu nw b ij pf pg l ph pi">➜  decrypt_aes_key.exe priv_key_1.pem loveme.txt<br/>[+] Initialized crypto provider<br/>[+] Successfully imported private key from PEM file<br/>[!] Extracted encrypted AES keys from file<br/>[+] Decrypted AES Key =&gt; 08020000106600002000000040b4247954af27637ce4f7fabfe1ccfc6cd55fc724caa840f82848ea4800b320<br/>[+] Successfully decrypted key from file<br/><br/>➜  python decrypt_file.py loveme.txt 40b4247954af27637ce4f7fabfe1ccfc6cd55fc724caa840f82848ea4800b320<br/>[+] Decrypting file<br/>[+] Found hash header =&gt; e91049c35401f2b4a1a131bd992df7a6<br/>[+] Plaintext from file: b&#x27;&quot;hello world&quot; \r\n\&#x27;</span></pre><h1 id="5f8d" class="nx ny gu bf nz oa ob oc od oe of og oh oi oj ok ol om on oo op oq or os ot ou bk">Conclusion</h1><p id="6486" class="pw-post-body-paragraph mh mi gu mj b mk ov mm mn mo ow mq mr ms ox mu mv mw oy my mz na oz nc nd ne gn bk">Overall this was one of the biggest leading cyber threats back in 2013, and the threat actors behind this malicious virus have shown their years of experience when it comes to engineering a ransomware such as this.</p><p id="a4e6" class="pw-post-body-paragraph mh mi gu mj b mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd ne gn bk">Although this ransomware is over 6 years old, it still fascinated me so much to reverse engineer this virus that I wanted to share all the tooling I have wrote for it. Every step of the way their was another challenge to overcome, whether it was knowing what the malware expected the encrypted payload to look like coming back from the C2, figuring out how to decrypt their C2 I2P servers using RC4, decompressing the ransomware note using some hard to mimic LZNT1 algorithm, or even understanding their obscure way of generating domain URI paths… it was all around a gigantic puzzle for a completionist engineer like myself.</p><p id="63ec" class="pw-post-body-paragraph mh mi gu mj b mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd ne gn bk">Here is the repository that contains all the programs I wrote that helped me research <a class="af pj" href="https://github.com/ryancor/CryptoWall_Analysis" rel="noopener ugc nofollow" target="_blank">CryptoWall</a>.</p><p id="908f" class="pw-post-body-paragraph mh mi gu mj b mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd ne gn bk">Thank you for following along! I hope you enjoyed it as much as I did. If you have any questions on this article or where to find the challenge, please DM me at my Instagram: @hackersclub or Twitter: @ringoware</p><p id="8985" class="pw-post-body-paragraph mh mi gu mj b mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd ne gn bk">Happy Hunting :)</p></div></div></div></div></section></div></div></article></div><div class="ab cb"><div class="ci bh fz ga gb gc"><div class="qk ql ab iv"><div class="qm ab"><a class="qn ay am ao" href="https://medium.com/tag/programming?source=post_page-----843f86055c7f--------------------------------" rel="noopener follow"><div class="qo fj cx qp ge qq qr bf b bg z bk qs">Programming</div></a></div><div class="qm ab"><a class="qn ay am ao" href="https://medium.com/tag/reverse-engineering?source=post_page-----843f86055c7f--------------------------------" rel="noopener follow"><div class="qo fj cx qp ge qq qr bf b bg z bk qs">Reverse Engineering</div></a></div><div class="qm ab"><a class="qn ay am ao" href="https://medium.com/tag/malware?source=post_page-----843f86055c7f--------------------------------" rel="noopener follow"><div class="qo fj cx qp ge qq qr bf b bg z bk qs">Malware</div></a></div><div class="qm ab"><a class="qn ay am ao" href="https://medium.com/tag/computer-science?source=post_page-----843f86055c7f--------------------------------" rel="noopener follow"><div class="qo fj cx qp ge qq qr bf b bg z bk qs">Computer Science</div></a></div><div class="qm ab"><a class="qn ay am ao" href="https://medium.com/tag/cybersecurity?source=post_page-----843f86055c7f--------------------------------" rel="noopener follow"><div class="qo fj cx qp ge qq qr bf b bg z bk qs">Cybersecurity</div></a></div></div></div></div><div class="l"></div><footer class="qt qu qv qw qx ab q qy qz c"><div class="l ae"><div class="ab cb"><div class="ci bh fz ga gb gc"><div class="ab cp ra"><div class="ab q ke"><div class="rb l"><span class="l rc rd re e d"><div class="ab q ke kf"><div class="pw-multi-vote-icon fj kg kh ki kj"><span><a class="af ag ah ai aj ak al am an ao ap aq ar as at" data-testid="footerClapButton" href="https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Fp%2F843f86055c7f&amp;operation=register&amp;redirect=https%3A%2F%2Fryancor.medium.com%2Fgenetic-analysis-of-cryptowall-ransomware-843f86055c7f&amp;user=Ryan+Cornateanu&amp;userId=239d5a05aa69&amp;source=---footer_actions--843f86055c7f---------------------clap_footer-----------" rel="noopener follow"><div><div class="bm" aria-hidden="false"><div class="kk ao kl km kn ko am kp kq kr kj"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" aria-label="clap"><path fill-rule="evenodd" d="M11.37.828 12 3.282l.63-2.454zM13.916 3.953l1.523-2.112-1.184-.39zM8.589 1.84l1.522 2.112-.337-2.501zM18.523 18.92c-.86.86-1.75 1.246-2.62 1.33a6 6 0 0 0 .407-.372c2.388-2.389 2.86-4.951 1.399-7.623l-.912-1.603-.79-1.672c-.26-.56-.194-.98.203-1.288a.7.7 0 0 1 .546-.132c.283.046.546.231.728.5l2.363 4.157c.976 1.624 1.141 4.237-1.324 6.702m-10.999-.438L3.37 14.328a.828.828 0 0 1 .585-1.408.83.83 0 0 1 .585.242l2.158 2.157a.365.365 0 0 0 .516-.516l-2.157-2.158-1.449-1.449a.826.826 0 0 1 1.167-1.17l3.438 3.44a.363.363 0 0 0 .516 0 .364.364 0 0 0 0-.516L5.293 9.513l-.97-.97a.826.826 0 0 1 0-1.166.84.84 0 0 1 1.167 0l.97.968 3.437 3.436a.36.36 0 0 0 .517 0 .366.366 0 0 0 0-.516L6.977 7.83a.82.82 0 0 1-.241-.584.82.82 0 0 1 .824-.826c.219 0 .43.087.584.242l5.787 5.787a.366.366 0 0 0 .587-.415l-1.117-2.363c-.26-.56-.194-.98.204-1.289a.7.7 0 0 1 .546-.132c.283.046.545.232.727.501l2.193 3.86c1.302 2.38.883 4.59-1.277 6.75-1.156 1.156-2.602 1.627-4.19 1.367-1.418-.236-2.866-1.033-4.079-2.246M10.75 5.971l2.12 2.12c-.41.502-.465 1.17-.128 1.89l.22.465-3.523-3.523a.8.8 0 0 1-.097-.368c0-.22.086-.428.241-.584a.847.847 0 0 1 1.167 0m7.355 1.705c-.31-.461-.746-.758-1.23-.837a1.44 1.44 0 0 0-1.11.275c-.312.24-.505.543-.59.881a1.74 1.74 0 0 0-.906-.465 1.47 1.47 0 0 0-.82.106l-2.182-2.182a1.56 1.56 0 0 0-2.2 0 1.54 1.54 0 0 0-.396.701 1.56 1.56 0 0 0-2.21-.01 1.55 1.55 0 0 0-.416.753c-.624-.624-1.649-.624-2.237-.037a1.557 1.557 0 0 0 0 2.2c-.239.1-.501.238-.715.453a1.56 1.56 0 0 0 0 2.2l.516.515a1.556 1.556 0 0 0-.753 2.615L7.01 19c1.32 1.319 2.909 2.189 4.475 2.449q.482.08.971.08c.85 0 1.653-.198 2.393-.579.231.033.46.054.686.054 1.266 0 2.457-.52 3.505-1.567 2.763-2.763 2.552-5.734 1.439-7.586z" clip-rule="evenodd"></path></svg></div></div></div></a></span></div><div class="pw-multi-vote-count l ks kt ku kv kw kx ky"><p class="bf b dv z du"><span class="kz">--</span></p></div></div></span><span class="l h g f rf rg"><div class="ab q ke kf"><div class="pw-multi-vote-icon fj kg kh ki kj"><span><a class="af ag ah ai aj ak al am an ao ap aq ar as at" data-testid="footerClapButton" href="https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fvote%2Fp%2F843f86055c7f&amp;operation=register&amp;redirect=https%3A%2F%2Fryancor.medium.com%2Fgenetic-analysis-of-cryptowall-ransomware-843f86055c7f&amp;user=Ryan+Cornateanu&amp;userId=239d5a05aa69&amp;source=---footer_actions--843f86055c7f---------------------clap_footer-----------" rel="noopener follow"><div><div class="bm" aria-hidden="false"><div class="kk ao kl km kn ko am kp kq kr kj"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" aria-label="clap"><path fill-rule="evenodd" d="M11.37.828 12 3.282l.63-2.454zM13.916 3.953l1.523-2.112-1.184-.39zM8.589 1.84l1.522 2.112-.337-2.501zM18.523 18.92c-.86.86-1.75 1.246-2.62 1.33a6 6 0 0 0 .407-.372c2.388-2.389 2.86-4.951 1.399-7.623l-.912-1.603-.79-1.672c-.26-.56-.194-.98.203-1.288a.7.7 0 0 1 .546-.132c.283.046.546.231.728.5l2.363 4.157c.976 1.624 1.141 4.237-1.324 6.702m-10.999-.438L3.37 14.328a.828.828 0 0 1 .585-1.408.83.83 0 0 1 .585.242l2.158 2.157a.365.365 0 0 0 .516-.516l-2.157-2.158-1.449-1.449a.826.826 0 0 1 1.167-1.17l3.438 3.44a.363.363 0 0 0 .516 0 .364.364 0 0 0 0-.516L5.293 9.513l-.97-.97a.826.826 0 0 1 0-1.166.84.84 0 0 1 1.167 0l.97.968 3.437 3.436a.36.36 0 0 0 .517 0 .366.366 0 0 0 0-.516L6.977 7.83a.82.82 0 0 1-.241-.584.82.82 0 0 1 .824-.826c.219 0 .43.087.584.242l5.787 5.787a.366.366 0 0 0 .587-.415l-1.117-2.363c-.26-.56-.194-.98.204-1.289a.7.7 0 0 1 .546-.132c.283.046.545.232.727.501l2.193 3.86c1.302 2.38.883 4.59-1.277 6.75-1.156 1.156-2.602 1.627-4.19 1.367-1.418-.236-2.866-1.033-4.079-2.246M10.75 5.971l2.12 2.12c-.41.502-.465 1.17-.128 1.89l.22.465-3.523-3.523a.8.8 0 0 1-.097-.368c0-.22.086-.428.241-.584a.847.847 0 0 1 1.167 0m7.355 1.705c-.31-.461-.746-.758-1.23-.837a1.44 1.44 0 0 0-1.11.275c-.312.24-.505.543-.59.881a1.74 1.74 0 0 0-.906-.465 1.47 1.47 0 0 0-.82.106l-2.182-2.182a1.56 1.56 0 0 0-2.2 0 1.54 1.54 0 0 0-.396.701 1.56 1.56 0 0 0-2.21-.01 1.55 1.55 0 0 0-.416.753c-.624-.624-1.649-.624-2.237-.037a1.557 1.557 0 0 0 0 2.2c-.239.1-.501.238-.715.453a1.56 1.56 0 0 0 0 2.2l.516.515a1.556 1.556 0 0 0-.753 2.615L7.01 19c1.32 1.319 2.909 2.189 4.475 2.449q.482.08.971.08c.85 0 1.653-.198 2.393-.579.231.033.46.054.686.054 1.266 0 2.457-.52 3.505-1.567 2.763-2.763 2.552-5.734 1.439-7.586z" clip-rule="evenodd"></path></svg></div></div></div></a></span></div><div class="pw-multi-vote-count l ks kt ku kv kw kx ky"><p class="bf b dv z du"><span class="kz">--</span></p></div></div></span></div><div class="bq ab"><div><div class="bm" aria-hidden="false"><button class="ao kk lc ld ab q fk le lf" aria-label="responses"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" class="lb"><path d="M18.006 16.803c1.533-1.456 2.234-3.325 2.234-5.321C20.24 7.357 16.709 4 12.191 4S4 7.357 4 11.482c0 4.126 3.674 7.482 8.191 7.482.817 0 1.622-.111 2.393-.327.231.2.48.391.744.559 1.06.693 2.203 1.044 3.399 1.044.224-.008.4-.112.486-.287a.49.49 0 0 0-.042-.518c-.495-.67-.845-1.364-1.04-2.057a4 4 0 0 1-.125-.598zm-3.122 1.055-.067-.223-.315.096a8 8 0 0 1-2.311.338c-4.023 0-7.292-2.955-7.292-6.587 0-3.633 3.269-6.588 7.292-6.588 4.014 0 7.112 2.958 7.112 6.593 0 1.794-.608 3.469-2.027 4.72l-.195.168v.255c0 .056 0 .151.016.295.025.231.081.478.154.733.154.558.398 1.117.722 1.659a5.3 5.3 0 0 1-2.165-.845c-.276-.176-.714-.383-.941-.59z"></path></svg><p class="bf b bg z du"><span class="pw-responses-count la lb">1</span></p></button></div></div></div></div><div class="ab q"><div class="rh l is"><div><div class="bm" aria-hidden="false"><span><a class="af ag ah ai aj ak al am an ao ap aq ar as at" data-testid="footerBookmarkButton" href="https://medium.com/m/signin?actionUrl=https%3A%2F%2Fmedium.com%2F_%2Fbookmark%2Fp%2F843f86055c7f&amp;operation=register&amp;redirect=https%3A%2F%2Fryancor.medium.com%2Fgenetic-analysis-of-cryptowall-ransomware-843f86055c7f&amp;source=---footer_actions--843f86055c7f---------------------bookmark_footer-----------" rel="noopener follow"><svg xmlns="http://www.w3.org/2000/svg" width="25" height="25" fill="none" viewBox="0 0 25 25" class="du lh" aria-label="Add to list bookmark button"><path fill="currentColor" d="M18 2.5a.5.5 0 0 1 1 0V5h2.5a.5.5 0 0 1 0 1H19v2.5a.5.5 0 1 1-1 0V6h-2.5a.5.5 0 0 1 0-1H18zM7 7a1 1 0 0 1 1-1h3.5a.5.5 0 0 0 0-1H8a2 2 0 0 0-2 2v14a.5.5 0 0 0 .805.396L12.5 17l5.695 4.396A.5.5 0 0 0 19 21v-8.5a.5.5 0 0 0-1 0v7.485l-5.195-4.012a.5.5 0 0 0-.61 0L7 19.985z"></path></svg></a></span></div></div></div><div class="rh l is"><div class="bm" aria-hidden="false" aria-describedby="postFooterSocialMenu" aria-labelledby="postFooterSocialMenu"><div><div class="bm" aria-hidden="false"><button aria-controls="postFooterSocialMenu" aria-expanded="false" aria-label="Share Post" data-testid="footerSocialShareButton" class="af fk ah ai aj ak al lp an ao ap ex lq lr lf ls"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><path fill="currentColor" fill-rule="evenodd" d="M15.218 4.931a.4.4 0 0 1-.118.132l.012.006a.45.45 0 0 1-.292.074.5.5 0 0 1-.3-.13l-2.02-2.02v7.07c0 .28-.23.5-.5.5s-.5-.22-.5-.5v-7.04l-2 2a.45.45 0 0 1-.57.04h-.02a.4.4 0 0 1-.16-.3.4.4 0 0 1 .1-.32l2.8-2.8a.5.5 0 0 1 .7 0l2.8 2.79a.42.42 0 0 1 .068.498m-.106.138.008.004v-.01zM16 7.063h1.5a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2h-11c-1.1 0-2-.9-2-2v-10a2 2 0 0 1 2-2H8a.5.5 0 0 1 .35.15.5.5 0 0 1 .15.35.5.5 0 0 1-.15.35.5.5 0 0 1-.35.15H6.4c-.5 0-.9.4-.9.9v10.2a.9.9 0 0 0 .9.9h11.2c.5 0 .9-.4.9-.9v-10.2c0-.5-.4-.9-.9-.9H16a.5.5 0 0 1 0-1" clip-rule="evenodd"></path></svg></button></div></div></div></div></div></div></div></div></div></footer><div class="ri rj rk rl rm l"><div class="ab cb"><div class="ci bh fz ga gb gc"><div class="rn bh r ro"></div><div class="ab rp rq rr iu it"><div class="rs rt ru rv rw rx ry rz sa sb ab cp"><div class="h k"><a tabindex="0" rel="noopener follow" href="/?source=post_page---post_author_info--843f86055c7f--------------------------------"><div class="l fj"><img alt="Ryan Cornateanu" class="l fd by ic ib cx" src="https://miro.medium.com/v2/resize:fill:96:96/2*C-CaB_Tc2FWfSLM1qV14Gg.jpeg" width="48" height="48" loading="lazy"/><div class="fr by l ic ib fs n ay sc"></div></div></a></div><div class="j i d"><a tabindex="0" rel="noopener follow" href="/?source=post_page---post_author_info--843f86055c7f--------------------------------"><div class="l fj"><img alt="Ryan Cornateanu" class="l fd by sd se cx" src="https://miro.medium.com/v2/resize:fill:128:128/2*C-CaB_Tc2FWfSLM1qV14Gg.jpeg" width="64" height="64" loading="lazy"/><div class="fr by l sd se fs n ay sc"></div></div></a></div><div class="j i d sf is"><div class="ab"><span><button class="bf b bg z sg qo sh si sj sk sl ev ew sm sn so fa fb fc fd bm fe ff">Follow</button></span></div></div></div><div class="ab co sp"><div class="sq sr ss st su l"><a class="af ag ah aj ak al am an ao ap aq ar as at ab q" rel="noopener follow" href="/?source=post_page---post_author_info--843f86055c7f--------------------------------"><h2 class="pw-author-name bf sw sx sy sz ta tb tc ms td te mw tf tg na th ti bk"><span class="gn sv">Written by <!-- -->Ryan Cornateanu</span></h2></a><div class="qm ab ia"><div class="l is"><span class="pw-follower-count bf b bg z du"><a class="af ag ah ai aj ak al am an ao ap aq ar il" rel="noopener follow" href="/followers?source=post_page---post_author_info--843f86055c7f--------------------------------">450 Followers</a></span></div><div class="bf b bg z du ab ph"><span class="im l" aria-hidden="true"><span class="bf b bg z du">·</span></span><a class="af ag ah ai aj ak al am an ao ap aq ar il" rel="noopener follow" href="/following?source=post_page---post_author_info--843f86055c7f--------------------------------">5 Following</a></div></div><div class="tj l"><p class="bf b bg z bk"><span class="gn">Security Researcher | Reverse Engineer | Embedded Systems</span></p></div></div></div><div class="h k"><div class="ab"><span><button class="bf b bg z sg qo sh si sj sk sl ev ew sm sn so fa fb fc fd bm fe ff">Follow</button></span></div></div></div></div></div></div><div class="tk tl tm tn to l"><div class="rn bh r tk tl tp tq tr"></div><div class="ab cb"><div class="ci bh fz ga gb gc"><div class="ab q cp"><h2 class="bf sw oa oc od oe og oh oi ok ol om oo op oq os ot bk">Responses (<!-- -->1<!-- -->)</h2><div class="ab ts"><div><div class="bm" aria-hidden="false"><a class="tt tu" href="https://policy.medium.com/medium-rules-30e5502c4eb4?source=post_page---post_responses--843f86055c7f--------------------------------" rel="noopener follow" target="_blank"><svg xmlns="http://www.w3.org/2000/svg" width="25" height="25" viewBox="0 0 25 25"><path fill-rule="evenodd" d="M11.987 5.036a.754.754 0 0 1 .914-.01c.972.721 1.767 1.218 2.6 1.543.828.322 1.719.485 2.887.505a.755.755 0 0 1 .741.757c-.018 3.623-.43 6.256-1.449 8.21-1.034 1.984-2.662 3.209-4.966 4.083a.75.75 0 0 1-.537-.003c-2.243-.874-3.858-2.095-4.897-4.074-1.024-1.951-1.457-4.583-1.476-8.216a.755.755 0 0 1 .741-.757c1.195-.02 2.1-.182 2.923-.503.827-.322 1.6-.815 2.519-1.535m.468.903c-.897.69-1.717 1.21-2.623 1.564-.898.35-1.856.527-3.026.565.037 3.45.469 5.817 1.36 7.515.884 1.684 2.25 2.762 4.284 3.571 2.092-.81 3.465-1.89 4.344-3.575.886-1.698 1.299-4.065 1.334-7.512-1.149-.039-2.091-.217-2.99-.567-.906-.353-1.745-.873-2.683-1.561m-.009 9.155a2.672 2.672 0 1 0 0-5.344 2.672 2.672 0 0 0 0 5.344m0 1a3.672 3.672 0 1 0 0-7.344 3.672 3.672 0 0 0 0 7.344m-1.813-3.777.525-.526.916.917 1.623-1.625.526.526-2.149 2.152z" clip-rule="evenodd"></path></svg></a></div></div></div></div><div class="tv tw tx ty tz ua ub l"></div><div class="uc l"><button class="bf b bg z bk qo ud ue uf lh le sl ev ew ex ug uh ui fa uj uk ul um un fb fc fd bm fe ff">See all responses</button></div></div></div></div><div class="uo up uq ur us l bx"><div class="h k j"><div class="rn bh ut uu"></div><div class="ab cb"><div class="ci bh fz ga gb gc"><div class="uv ab ke iv"><div class="uw ux l"><a class="af ag ah ai aj ak al am an ao ap aq ar as at" href="https://help.medium.com/hc/en-us?source=post_page-----843f86055c7f--------------------------------" rel="noopener follow"><p class="bf b dv z du">Help</p></a></div><div class="uw ux l"><a class="af ag ah ai aj ak al am an ao ap aq ar as at" href="https://medium.statuspage.io/?source=post_page-----843f86055c7f--------------------------------" rel="noopener follow"><p class="bf b dv z du">Status</p></a></div><div class="uw ux l"><a class="af ag ah ai aj ak al am an ao ap aq ar as at" href="https://medium.com/about?autoplay=1&amp;source=post_page-----843f86055c7f--------------------------------" rel="noopener follow"><p class="bf b dv z du">About</p></a></div><div class="uw ux l"><a class="af ag ah ai aj ak al am an ao ap aq ar as at" href="https://medium.com/jobs-at-medium/work-at-medium-959d1a85284e?source=post_page-----843f86055c7f--------------------------------" rel="noopener follow"><p class="bf b dv z du">Careers</p></a></div><div class="uw ux l"><a class="af ag ah ai aj ak al am an ao ap aq ar as at" href="pressinquiries@medium.com?source=post_page-----843f86055c7f--------------------------------" rel="noopener follow"><p class="bf b dv z du">Press</p></a></div><div class="uw ux l"><a class="af ag ah ai aj ak al am an ao ap aq ar as at" href="https://blog.medium.com/?source=post_page-----843f86055c7f--------------------------------" rel="noopener follow"><p class="bf b dv z du">Blog</p></a></div><div class="uw ux l"><a class="af ag ah ai aj ak al am an ao ap aq ar as at" href="https://policy.medium.com/medium-privacy-policy-f03bf92035c9?source=post_page-----843f86055c7f--------------------------------" rel="noopener follow"><p class="bf b dv z du">Privacy</p></a></div><div class="uw ux l"><a class="af ag ah ai aj ak al am an ao ap aq ar as at" href="https://policy.medium.com/medium-terms-of-service-9db0094a1e0f?source=post_page-----843f86055c7f--------------------------------" rel="noopener follow"><p class="bf b dv z du">Terms</p></a></div><div class="uw ux l"><a class="af ag ah ai aj ak al am an ao ap aq ar as at" href="https://speechify.com/medium?source=post_page-----843f86055c7f--------------------------------" rel="noopener follow"><p class="bf b dv z du">Text to speech</p></a></div><div class="uw l"><a class="af ag ah ai aj ak al am an ao ap aq ar as at" href="https://medium.com/business?source=post_page-----843f86055c7f--------------------------------" rel="noopener follow"><p class="bf b dv z du">Teams</p></a></div></div></div></div></div></div></div></div></div></div><script>window.__BUILD_ID__="main-20241216-164309-0d4958d8a6"</script><script>window.__GRAPHQL_URI__ = "https://ryancor.medium.com/_/graphql"</script><script>window.__PRELOADED_STATE__ = {"algolia":{"queries":{}},"cache":{"experimentGroupSet":true,"reason":"","group":"enabled","tags":["group-edgeCachePosts","post-843f86055c7f","user-239d5a05aa69"],"serverVariantState":"44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a","middlewareEnabled":true,"cacheStatus":"DYNAMIC","shouldUseCache":true,"vary":[],"lohpSummerUpsellEnabled":false},"client":{"hydrated":false,"isUs":false,"isNativeMedium":false,"isSafariMobile":false,"isSafari":false,"isFirefox":false,"routingEntity":{"type":"USER","id":"239d5a05aa69","explicit":true},"viewerIsBot":false},"debug":{"requestId":"db710bef-5485-4c7a-94cc-226176c2f4ff","hybridDevServices":[],"originalSpanCarrier":{"traceparent":"00-ab80fc45d980f0159939703433d57651-8bdb4a7bb4cf1935-01"}},"multiVote":{"clapsPerPost":{}},"navigation":{"branch":{"show":null,"hasRendered":null,"blockedByCTA":false},"hideGoogleOneTap":false,"hasRenderedAlternateUserBanner":null,"currentLocation":"https:\u002F\u002Fryancor.medium.com\u002Fgenetic-analysis-of-cryptowall-ransomware-843f86055c7f","host":"ryancor.medium.com","hostname":"ryancor.medium.com","referrer":"","hasSetReferrer":false,"susiModal":{"step":null,"operation":"register"},"postRead":false,"partnerProgram":{"selectedCountryCode":null},"queryString":"","currentHash":""},"config":{"nodeEnv":"production","version":"main-20241216-164309-0d4958d8a6","target":"production","productName":"Medium","publicUrl":"https:\u002F\u002Fcdn-client.medium.com\u002Flite","authDomain":"medium.com","authGoogleClientId":"216296035834-k1k6qe060s2tp2a2jam4ljdcms00sttg.apps.googleusercontent.com","favicon":"production","glyphUrl":"https:\u002F\u002Fglyph.medium.com","branchKey":"key_live_ofxXr2qTrrU9NqURK8ZwEhknBxiI6KBm","algolia":{"appId":"MQ57UUUQZ2","apiKeySearch":"394474ced050e3911ae2249ecc774921","indexPrefix":"medium_","host":"-dsn.algolia.net"},"recaptchaKey":"6Lfc37IUAAAAAKGGtC6rLS13R1Hrw_BqADfS1LRk","recaptcha3Key":"6Lf8R9wUAAAAABMI_85Wb8melS7Zj6ziuf99Yot5","recaptchaEnterpriseKeyId":"6Le-uGgpAAAAAPprRaokM8AKthQ9KNGdoxaGUvVp","datadog":{"applicationId":"6702d87d-a7e0-42fe-bbcb-95b469547ea0","clientToken":"pub853ea8d17ad6821d9f8f11861d23dfed","rumToken":"pubf9cc52896502b9413b68ba36fc0c7162","context":{"deployment":{"target":"production","tag":"main-20241216-164309-0d4958d8a6","commit":"0d4958d8a6e728d0bc7ba6245eaad002411a6eb7"}},"datacenter":"us"},"googleAnalyticsCode":"G-7JY7T788PK","googlePay":{"apiVersion":"2","apiVersionMinor":"0","merchantId":"BCR2DN6TV7EMTGBM","merchantName":"Medium","instanceMerchantId":"13685562959212738550"},"applePay":{"version":3},"signInWallCustomDomainCollectionIds":["3a8144eabfe3","336d898217ee","61061eb0c96b","138adf9c44c","819cc2aaeee0"],"mediumMastodonDomainName":"me.dm","mediumOwnedAndOperatedCollectionIds":["8a9336e5bb4","b7e45b22fec3","193b68bd4fba","8d6b8a439e32","54c98c43354d","3f6ecf56618","d944778ce714","92d2092dc598","ae2a65f35510","1285ba81cada","544c7006046e","fc8964313712","40187e704f1c","88d9857e584e","7b6769f2748b","bcc38c8f6edf","cef6983b292","cb8577c9149e","444d13b52878","713d7dbc99b0","ef8e90590e66","191186aaafa0","55760f21cdc5","9dc80918cc93","bdc4052bbdba","8ccfed20cbb2"],"tierOneDomains":["medium.com","thebolditalic.com","arcdigital.media","towardsdatascience.com","uxdesign.cc","codeburst.io","psiloveyou.xyz","writingcooperative.com","entrepreneurshandbook.co","prototypr.io","betterhumans.coach.me","theascent.pub"],"topicsToFollow":["d61cf867d93f","8a146bc21b28","1eca0103fff3","4d562ee63426","aef1078a3ef5","e15e46793f8d","6158eb913466","55f1c20aba7a","3d18b94f6858","4861fee224fd","63c6f1f93ee","1d98b3a9a871","decb52b64abf","ae5d4995e225","830cded25262"],"topicToTagMappings":{"accessibility":"accessibility","addiction":"addiction","android-development":"android-development","art":"art","artificial-intelligence":"artificial-intelligence","astrology":"astrology","basic-income":"basic-income","beauty":"beauty","biotech":"biotech","blockchain":"blockchain","books":"books","business":"business","cannabis":"cannabis","cities":"cities","climate-change":"climate-change","comics":"comics","coronavirus":"coronavirus","creativity":"creativity","cryptocurrency":"cryptocurrency","culture":"culture","cybersecurity":"cybersecurity","data-science":"data-science","design":"design","digital-life":"digital-life","disability":"disability","economy":"economy","education":"education","equality":"equality","family":"family","feminism":"feminism","fiction":"fiction","film":"film","fitness":"fitness","food":"food","freelancing":"freelancing","future":"future","gadgets":"gadgets","gaming":"gaming","gun-control":"gun-control","health":"health","history":"history","humor":"humor","immigration":"immigration","ios-development":"ios-development","javascript":"javascript","justice":"justice","language":"language","leadership":"leadership","lgbtqia":"lgbtqia","lifestyle":"lifestyle","machine-learning":"machine-learning","makers":"makers","marketing":"marketing","math":"math","media":"media","mental-health":"mental-health","mindfulness":"mindfulness","money":"money","music":"music","neuroscience":"neuroscience","nonfiction":"nonfiction","outdoors":"outdoors","parenting":"parenting","pets":"pets","philosophy":"philosophy","photography":"photography","podcasts":"podcast","poetry":"poetry","politics":"politics","privacy":"privacy","product-management":"product-management","productivity":"productivity","programming":"programming","psychedelics":"psychedelics","psychology":"psychology","race":"race","relationships":"relationships","religion":"religion","remote-work":"remote-work","san-francisco":"san-francisco","science":"science","self":"self","self-driving-cars":"self-driving-cars","sexuality":"sexuality","social-media":"social-media","society":"society","software-engineering":"software-engineering","space":"space","spirituality":"spirituality","sports":"sports","startups":"startup","style":"style","technology":"technology","transportation":"transportation","travel":"travel","true-crime":"true-crime","tv":"tv","ux":"ux","venture-capital":"venture-capital","visual-design":"visual-design","work":"work","world":"world","writing":"writing"},"defaultImages":{"avatar":{"imageId":"1*dmbNkD5D-u45r44go_cf0g.png","height":150,"width":150},"orgLogo":{"imageId":"7*V1_7XP4snlmqrc_0Njontw.png","height":110,"width":500},"postLogo":{"imageId":"bd978bb536350a710e8efb012513429cabdc4c28700604261aeda246d0f980b7","height":810,"width":1440},"postPreviewImage":{"imageId":"1*hn4v1tCaJy7cWMyb0bpNpQ.png","height":386,"width":579}},"collectionStructuredData":{"8d6b8a439e32":{"name":"Elemental","data":{"@type":"NewsMediaOrganization","ethicsPolicy":"https:\u002F\u002Fhelp.medium.com\u002Fhc\u002Fen-us\u002Farticles\u002F360043290473","logo":{"@type":"ImageObject","url":"https:\u002F\u002Fcdn-images-1.medium.com\u002Fmax\u002F980\u002F1*9ygdqoKprhwuTVKUM0DLPA@2x.png","width":980,"height":159}}},"3f6ecf56618":{"name":"Forge","data":{"@type":"NewsMediaOrganization","ethicsPolicy":"https:\u002F\u002Fhelp.medium.com\u002Fhc\u002Fen-us\u002Farticles\u002F360043290473","logo":{"@type":"ImageObject","url":"https:\u002F\u002Fcdn-images-1.medium.com\u002Fmax\u002F596\u002F1*uULpIlImcO5TDuBZ6lm7Lg@2x.png","width":596,"height":183}}},"ae2a65f35510":{"name":"GEN","data":{"@type":"NewsMediaOrganization","ethicsPolicy":"https:\u002F\u002Fhelp.medium.com\u002Fhc\u002Fen-us\u002Farticles\u002F360043290473","logo":{"@type":"ImageObject","url":"https:\u002F\u002Fmiro.medium.com\u002Fmax\u002F264\u002F1*RdVZMdvfV3YiZTw6mX7yWA.png","width":264,"height":140}}},"88d9857e584e":{"name":"LEVEL","data":{"@type":"NewsMediaOrganization","ethicsPolicy":"https:\u002F\u002Fhelp.medium.com\u002Fhc\u002Fen-us\u002Farticles\u002F360043290473","logo":{"@type":"ImageObject","url":"https:\u002F\u002Fmiro.medium.com\u002Fmax\u002F540\u002F1*JqYMhNX6KNNb2UlqGqO2WQ.png","width":540,"height":108}}},"7b6769f2748b":{"name":"Marker","data":{"@type":"NewsMediaOrganization","ethicsPolicy":"https:\u002F\u002Fhelp.medium.com\u002Fhc\u002Fen-us\u002Farticles\u002F360043290473","logo":{"@type":"ImageObject","url":"https:\u002F\u002Fcdn-images-1.medium.com\u002Fmax\u002F383\u002F1*haCUs0wF6TgOOvfoY-jEoQ@2x.png","width":383,"height":92}}},"444d13b52878":{"name":"OneZero","data":{"@type":"NewsMediaOrganization","ethicsPolicy":"https:\u002F\u002Fhelp.medium.com\u002Fhc\u002Fen-us\u002Farticles\u002F360043290473","logo":{"@type":"ImageObject","url":"https:\u002F\u002Fmiro.medium.com\u002Fmax\u002F540\u002F1*cw32fIqCbRWzwJaoQw6BUg.png","width":540,"height":123}}},"8ccfed20cbb2":{"name":"Zora","data":{"@type":"NewsMediaOrganization","ethicsPolicy":"https:\u002F\u002Fhelp.medium.com\u002Fhc\u002Fen-us\u002Farticles\u002F360043290473","logo":{"@type":"ImageObject","url":"https:\u002F\u002Fmiro.medium.com\u002Fmax\u002F540\u002F1*tZUQqRcCCZDXjjiZ4bDvgQ.png","width":540,"height":106}}}},"embeddedPostIds":{"coronavirus":"cd3010f9d81f"},"sharedCdcMessaging":{"COVID_APPLICABLE_TAG_SLUGS":[],"COVID_APPLICABLE_TOPIC_NAMES":[],"COVID_APPLICABLE_TOPIC_NAMES_FOR_TOPIC_PAGE":[],"COVID_MESSAGES":{"tierA":{"text":"For more information on the novel coronavirus and Covid-19, visit cdc.gov.","markups":[{"start":66,"end":73,"href":"https:\u002F\u002Fwww.cdc.gov\u002Fcoronavirus\u002F2019-nCoV"}]},"tierB":{"text":"Anyone can publish on Medium per our Policies, but we don’t fact-check every story. For more info about the coronavirus, see cdc.gov.","markups":[{"start":37,"end":45,"href":"https:\u002F\u002Fhelp.medium.com\u002Fhc\u002Fen-us\u002Fcategories\u002F201931128-Policies-Safety"},{"start":125,"end":132,"href":"https:\u002F\u002Fwww.cdc.gov\u002Fcoronavirus\u002F2019-nCoV"}]},"paywall":{"text":"This article has been made free for everyone, thanks to Medium Members. For more information on the novel coronavirus and Covid-19, visit cdc.gov.","markups":[{"start":56,"end":70,"href":"https:\u002F\u002Fmedium.com\u002Fmembership"},{"start":138,"end":145,"href":"https:\u002F\u002Fwww.cdc.gov\u002Fcoronavirus\u002F2019-nCoV"}]},"unbound":{"text":"This article is free for everyone, thanks to Medium Members. For more information on the novel coronavirus and Covid-19, visit cdc.gov.","markups":[{"start":45,"end":59,"href":"https:\u002F\u002Fmedium.com\u002Fmembership"},{"start":127,"end":134,"href":"https:\u002F\u002Fwww.cdc.gov\u002Fcoronavirus\u002F2019-nCoV"}]}},"COVID_BANNER_POST_ID_OVERRIDE_WHITELIST":["3b31a67bff4a"]},"sharedVoteMessaging":{"TAGS":["politics","election-2020","government","us-politics","election","2020-presidential-race","trump","donald-trump","democrats","republicans","congress","republican-party","democratic-party","biden","joe-biden","maga"],"TOPICS":["politics","election"],"MESSAGE":{"text":"Find out more about the U.S. election results here.","markups":[{"start":46,"end":50,"href":"https:\u002F\u002Fcookpolitical.com\u002F2020-national-popular-vote-tracker"}]},"EXCLUDE_POSTS":["397ef29e3ca5"]},"embedPostRules":[],"recircOptions":{"v1":{"limit":3},"v2":{"limit":8}},"braintreeClientKey":"production_zjkj96jm_m56f8fqpf7ngnrd4","braintree":{"enabled":true,"merchantId":"m56f8fqpf7ngnrd4","merchantAccountId":{"usd":"AMediumCorporation_instant","eur":"amediumcorporation_EUR","cad":"amediumcorporation_CAD"},"publicKey":"ds2nn34bg2z7j5gd","braintreeEnvironment":"production","dashboardUrl":"https:\u002F\u002Fwww.braintreegateway.com\u002Fmerchants","gracePeriodDurationInDays":14,"mediumMembershipPlanId":{"monthly":"ce105f8c57a3","monthlyV2":"e8a5e126-792b-4ee6-8fba-d574c1b02fc5","monthlyWithTrial":"d5ee3dbe3db8","monthlyPremium":"fa741a9b47a2","yearly":"a40ad4a43185","yearlyV2":"3815d7d6-b8ca-4224-9b8c-182f9047866e","yearlyStaff":"d74fb811198a","yearlyWithTrial":"b3bc7350e5c7","yearlyPremium":"e21bd2c12166","monthlyOneYearFree":"e6c0637a-2bad-4171-ab4f-3c268633d83c","monthly25PercentOffFirstYear":"235ecc62-0cdb-49ae-9378-726cd21c504b","monthly20PercentOffFirstYear":"ba518864-9c13-4a99-91ca-411bf0cac756","monthly15PercentOffFirstYear":"594c029b-9f89-43d5-88f8-8173af4e070e","monthly10PercentOffFirstYear":"c6c7bc9a-40f2-4b51-8126-e28511d5bdb0","monthlyForStudents":"629ebe51-da7d-41fd-8293-34cd2f2030a8","yearlyOneYearFree":"78ba7be9-0d9f-4ece-aa3e-b54b826f2bf1","yearly25PercentOffFirstYear":"2dbb010d-bb8f-4eeb-ad5c-a08509f42d34","yearly20PercentOffFirstYear":"47565488-435b-47f8-bf93-40d5fbe0ebc8","yearly15PercentOffFirstYear":"8259809b-0881-47d9-acf7-6c001c7f720f","yearly10PercentOffFirstYear":"9dd694fb-96e1-472c-8d9e-3c868d5c1506","yearlyForStudents":"e29345ef-ab1c-4234-95c5-70e50fe6bc23","monthlyCad":"p52orjkaceei","yearlyCad":"h4q9g2up9ktt"},"braintreeDiscountId":{"oneMonthFree":"MONTHS_FREE_01","threeMonthsFree":"MONTHS_FREE_03","sixMonthsFree":"MONTHS_FREE_06","fiftyPercentOffOneYear":"FIFTY_PERCENT_OFF_ONE_YEAR"},"3DSecureVersion":"2","defaultCurrency":"usd","providerPlanIdCurrency":{"4ycw":"usd","rz3b":"usd","3kqm":"usd","jzw6":"usd","c2q2":"usd","nnsw":"usd","q8qw":"usd","d9y6":"usd","fx7w":"cad","nwf2":"cad"}},"paypalClientId":"AXj1G4fotC2GE8KzWX9mSxCH1wmPE3nJglf4Z2ig_amnhvlMVX87otaq58niAg9iuLktVNF_1WCMnN7v","paypal":{"host":"https:\u002F\u002Fapi.paypal.com:443","clientMode":"production","serverMode":"live","webhookId":"4G466076A0294510S","monthlyPlan":{"planId":"P-9WR0658853113943TMU5FDQA","name":"Medium Membership (Monthly) with setup fee","description":"Unlimited access to the best and brightest stories on Medium. Membership billed monthly."},"yearlyPlan":{"planId":"P-7N8963881P8875835MU5JOPQ","name":"Medium Membership (Annual) with setup fee","description":"Unlimited access to the best and brightest stories on Medium. Membership billed annually."},"oneYearGift":{"name":"Medium Membership (1 Year, Digital Gift Code)","description":"Unlimited access to the best and brightest stories on Medium. Gift codes can be redeemed at medium.com\u002Fredeem.","price":"50.00","currency":"USD","sku":"membership-gift-1-yr"},"oldMonthlyPlan":{"planId":"P-96U02458LM656772MJZUVH2Y","name":"Medium Membership (Monthly)","description":"Unlimited access to the best and brightest stories on Medium. Membership billed monthly."},"oldYearlyPlan":{"planId":"P-59P80963JF186412JJZU3SMI","name":"Medium Membership (Annual)","description":"Unlimited access to the best and brightest stories on Medium. Membership billed annually."},"monthlyPlanWithTrial":{"planId":"P-66C21969LR178604GJPVKUKY","name":"Medium Membership (Monthly) with setup fee","description":"Unlimited access to the best and brightest stories on Medium. Membership billed monthly."},"yearlyPlanWithTrial":{"planId":"P-6XW32684EX226940VKCT2MFA","name":"Medium Membership (Annual) with setup fee","description":"Unlimited access to the best and brightest stories on Medium. Membership billed annually."},"oldMonthlyPlanNoSetupFee":{"planId":"P-4N046520HR188054PCJC7LJI","name":"Medium Membership (Monthly)","description":"Unlimited access to the best and brightest stories on Medium. Membership billed monthly."},"oldYearlyPlanNoSetupFee":{"planId":"P-7A4913502Y5181304CJEJMXQ","name":"Medium Membership (Annual)","description":"Unlimited access to the best and brightest stories on Medium. Membership billed annually."},"sdkUrl":"https:\u002F\u002Fwww.paypal.com\u002Fsdk\u002Fjs"},"stripePublishableKey":"pk_live_7FReX44VnNIInZwrIIx6ghjl","log":{"json":true,"level":"info"},"imageUploadMaxSizeMb":25,"staffPicks":{"title":"Staff Picks","catalogId":"c7bc6e1ee00f"}},"session":{"xsrf":""}}</script><script>window.__APOLLO_STATE__ = {"ROOT_QUERY":{"__typename":"Query","viewer":null,"collectionByDomainOrSlug({\"domainOrSlug\":\"ryancor.medium.com\"})":null,"postResult({\"id\":\"843f86055c7f\"})":{"__ref":"Post:843f86055c7f"}},"LinkedAccounts:239d5a05aa69":{"__typename":"LinkedAccounts","mastodon":null,"id":"239d5a05aa69"},"User:239d5a05aa69":{"__typename":"User","id":"239d5a05aa69","linkedAccounts":{"__ref":"LinkedAccounts:239d5a05aa69"},"isSuspended":false,"name":"Ryan Cornateanu","imageId":"2*C-CaB_Tc2FWfSLM1qV14Gg.jpeg","customDomainState":{"__typename":"CustomDomainState","live":{"__typename":"CustomDomain","domain":"ryancor.medium.com"}},"hasSubdomain":true,"username":"ryancor","verifications":{"__typename":"VerifiedInfo","isBookAuthor":false},"socialStats":{"__typename":"SocialStats","followerCount":450,"followingCount":5,"collectionFollowingCount":0},"bio":"Security Researcher | Reverse Engineer | Embedded Systems","membership":null,"allowNotes":true,"viewerEdge":{"__ref":"UserViewerEdge:userId:239d5a05aa69-viewerId:lo_f1160abc5dcf"},"twitterScreenName":""},"Paragraph:96c4f07b4619_0":{"__typename":"Paragraph","id":"96c4f07b4619_0","name":"3c7d","type":"H3","href":null,"layout":null,"metadata":null,"text":"Genetic Analysis of CryptoWall Ransomware","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_1":{"__typename":"Paragraph","id":"96c4f07b4619_1","name":"f3dd","type":"P","href":null,"layout":null,"metadata":null,"text":"A strain of a Crowti ransomware emerged, the variant known as CryptoWall, was spotted by researchers in early 2013. Ransomware by nature is extraordinarily destructive but this one in particular was a bit beyond that. Over the next 2 years, with over 5.25 billion files encrypted and 1 million+ systems infected, this virus has definitely made its mark in the pool of cyber weapons. Below you can find a list of the top ten infected countries:","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"ImageMetadata:1*tTctil7mmZ7ER7-CGbX3UQ.png":{"__typename":"ImageMetadata","id":"1*tTctil7mmZ7ER7-CGbX3UQ.png","originalHeight":305,"originalWidth":400,"focusPercentX":null,"focusPercentY":null,"alt":null},"Paragraph:96c4f07b4619_2":{"__typename":"Paragraph","id":"96c4f07b4619_2","name":"3331","type":"IMG","href":null,"layout":"INSET_CENTER","metadata":{"__ref":"ImageMetadata:1*tTctil7mmZ7ER7-CGbX3UQ.png"},"text":"Source: Dell Secure Works","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_3":{"__typename":"Paragraph","id":"96c4f07b4619_3","name":"f10b","type":"P","href":null,"layout":null,"metadata":null,"text":"CryptoWall is distinct in that its campaign ID initially gets sent back to their C2 servers for verification purposes. The motivation behind these ID’s are to track samples by the loader vectors. The one we will be analyzing in our laboratory experiment has the crypt1 ID that was first seen around February 26th, 2014. The infection vector is still unknown today but we will be showing how to unpack the loader, and extract the main ransomware file. Some of the contagions have been caused by Drive-by downloads, Cutwail\u002FUpatre, Infinity\u002FGoon exploit kit, Magnitude exploit kit, Nuclear exploit kit\u002FPony Loader, and Gozi\u002FNeverquest.","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":262,"end":268,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_4":{"__typename":"Paragraph","id":"96c4f07b4619_4","name":"a181","type":"H3","href":null,"layout":null,"metadata":null,"text":"Initial Analysis","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_5":{"__typename":"Paragraph","id":"96c4f07b4619_5","name":"4cc7","type":"P","href":null,"layout":null,"metadata":null,"text":"We will start by providing the hash of the packed loader file:","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_6":{"__typename":"Paragraph","id":"96c4f07b4619_6","name":"08d2","type":"PRE","href":null,"layout":null,"metadata":null,"text":"➜  CryptoWall git:(master) openssl md5 cryptowall.bin\nMD5(cryptowall.bin)= 47363b94cee907e2b8926c1be61150c7","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_7":{"__typename":"Paragraph","id":"96c4f07b4619_7","name":"a21c","type":"P","href":null,"layout":null,"metadata":null,"text":"Running the file command on the bin executable, we can confirm that this is a PE32 executable (GUI) Intel 80386, for MS Windows. Similar to the analysis we did on the Cozy Bear’s Beacon Loader, we will be using IDA Pro as our flavor of disassembler tools.","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":12,"end":16,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":78,"end":127,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"A","start":167,"end":192,"href":"https:\u002F\u002Fmedium.com\u002F@ryancor\u002Fextracting-embedded-payloads-from-malware-aaca8e9aa1a9","anchorType":"LINK","userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_8":{"__typename":"Paragraph","id":"96c4f07b4619_8","name":"dbe5","type":"P","href":null,"layout":null,"metadata":null,"text":"Loading the packed executable into our control flow graph view, it becomes apparent fairly quickly that this is packed loader code, and the real CryptoWall code is hiding somewhere within.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"ImageMetadata:1*ZCgluueIqRbBgNEjrvCeUQ.png":{"__typename":"ImageMetadata","id":"1*ZCgluueIqRbBgNEjrvCeUQ.png","originalHeight":828,"originalWidth":2352,"focusPercentX":null,"focusPercentY":null,"alt":null},"Paragraph:96c4f07b4619_9":{"__typename":"Paragraph","id":"96c4f07b4619_9","name":"b7cb","type":"IMG","href":null,"layout":"INSET_CENTER","metadata":{"__ref":"ImageMetadata:1*ZCgluueIqRbBgNEjrvCeUQ.png"},"text":"WinMain CFG View","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_10":{"__typename":"Paragraph","id":"96c4f07b4619_10","name":"c073","type":"P","href":null,"layout":null,"metadata":null,"text":"Checking the resource section of this binary only shows that it has two valid entries; the first one being a size of 91,740 bytes. Maybe we will get lucky and the hidden PE will be here?","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":117,"end":123,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"ImageMetadata:1*MUobHY4FJVZaEom99RwgSg.png":{"__typename":"ImageMetadata","id":"1*MUobHY4FJVZaEom99RwgSg.png","originalHeight":1300,"originalWidth":2086,"focusPercentX":null,"focusPercentY":null,"alt":null},"Paragraph:96c4f07b4619_11":{"__typename":"Paragraph","id":"96c4f07b4619_11","name":"02bd","type":"IMG","href":null,"layout":"INSET_CENTER","metadata":{"__ref":"ImageMetadata:1*MUobHY4FJVZaEom99RwgSg.png"},"text":"Dumped resource section","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_12":{"__typename":"Paragraph","id":"96c4f07b4619_12","name":"a296","type":"P","href":null,"layout":null,"metadata":null,"text":"Unfortunately not! This looks like some custom base64 encoded data that will hopefully get used later somewhere down the line in our dissection of the virus. If we scroll down to the end of WinMain() you’ll notice a jump instruction that points to EAX. It will look something like this in the decompiler view:","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":190,"end":199,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":248,"end":251,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_13":{"__typename":"Paragraph","id":"96c4f07b4619_13","name":"f332","type":"PRE","href":null,"layout":null,"metadata":null,"text":"JUMPOUT(eax=decrypted_code_segment);","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_14":{"__typename":"Paragraph","id":"96c4f07b4619_14","name":"a7f7","type":"H3","href":null,"layout":null,"metadata":null,"text":"Unpacking Binary Loaders","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_15":{"__typename":"Paragraph","id":"96c4f07b4619_15","name":"5ebb","type":"P","href":null,"layout":null,"metadata":null,"text":"At this point, we have to open up a debugger, and view this area of code as it is being resolved dynamically. What you will want to do is a set a breakpoint at 0x00402dda, which is the location of the jmp instruction. Once you hit this breakpoint after continuing execution, you’ll notice EAX now points to a new segment of code. Dumping EAX in the disassembler will lead you to the 2nd stage loader. Use the debugger’s step into feature, and our instruction pointer should be safely inside the decrypted loader area.","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":160,"end":170,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":201,"end":204,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":289,"end":292,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":338,"end":341,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":420,"end":429,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"ImageMetadata:1*2WUl-S9PhPMvF25ej4Diwg.jpeg":{"__typename":"ImageMetadata","id":"1*2WUl-S9PhPMvF25ej4Diwg.jpeg","originalHeight":832,"originalWidth":2676,"focusPercentX":null,"focusPercentY":null,"alt":null},"Paragraph:96c4f07b4619_16":{"__typename":"Paragraph","id":"96c4f07b4619_16","name":"c833","type":"IMG","href":null,"layout":"INSET_CENTER","metadata":{"__ref":"ImageMetadata:1*2WUl-S9PhPMvF25ej4Diwg.jpeg"},"text":"2nd Stage","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_17":{"__typename":"Paragraph","id":"96c4f07b4619_17","name":"b4cd","type":"P","href":null,"layout":null,"metadata":null,"text":"Let’s go over what is happening at this stage of the malware. EBP+var_EA6E gets loaded effectively into EDX, EAX then holds the index count incrementer to follow the next few bytes at data address 302C9AEh.","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":62,"end":74,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":104,"end":107,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":109,"end":112,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":197,"end":205,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_18":{"__typename":"Paragraph","id":"96c4f07b4619_18","name":"b6fc","type":"PRE","href":null,"layout":null,"metadata":null,"text":".data:0302CA46   mov     bl, byte ptr (loc_302C9AE - 302C9AEh)[eax]\n.data:0302CA48   add     ebx, esi\n.data:0302CA4A   mov     [edx], bl","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_19":{"__typename":"Paragraph","id":"96c4f07b4619_19","name":"f522","type":"P","href":null,"layout":null,"metadata":null,"text":"All this snippet of code is doing is loading bytes from the address mentioned above and storing it at bl (the lower 8 bits of EBX). The byte from bl is then moved into the pointer value of EDX. At the end of this routine EBP+var_EA6E will hold a valid address that gets called as EAX (we can see the line highlighted in red in the image above). Stepping into EAX will now bring us to the third stage of the loading process.","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":102,"end":104,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":126,"end":129,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":146,"end":148,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":189,"end":192,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":221,"end":233,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":280,"end":283,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":359,"end":362,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_20":{"__typename":"Paragraph","id":"96c4f07b4619_20","name":"05cb","type":"P","href":null,"layout":null,"metadata":null,"text":"A lot is going on at this point; this function has a couple thousand lines of assembly to go over, so at this point it’s better we open the decompiler view to see what is happening. After resolving some of the strings on the stack, there is some key information that starts to pop up on the resource section we viewed earlier.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_21":{"__typename":"Paragraph","id":"96c4f07b4619_21","name":"0a3f","type":"PRE","href":null,"layout":null,"metadata":null,"text":"pLockRsrc = GetProcAddress(kernel32, &LockResource);\npSizeofResource = GetProcAddress(kernel32, &SizeofResource);\npLoadResource = GetProcAddress(kernel32, &LoadResource);\npGetModuleHandle = GetProcAddress(kernel32, &GetModuleHandleA);\npFindRsrc = GetProcAddress(kernel32, &FindResourceA);\npVirtualAlloc = GetProcAddress(kernel32, &VirtualAlloc);","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_22":{"__typename":"Paragraph","id":"96c4f07b4619_22","name":"b1bc","type":"P","href":null,"layout":null,"metadata":null,"text":"The malware is loading all functions dynamically that have to do with our resource section. After the data gets loaded into memory, CryptoWall begins its custom base64 decoding technique and then continues to a decryption method as seen below.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"ImageMetadata:1*bLJzfTx0xopkx5Q0uzIj8A.jpeg":{"__typename":"ImageMetadata","id":"1*bLJzfTx0xopkx5Q0uzIj8A.jpeg","originalHeight":830,"originalWidth":3894,"focusPercentX":null,"focusPercentY":null,"alt":null},"Paragraph:96c4f07b4619_23":{"__typename":"Paragraph","id":"96c4f07b4619_23","name":"626d","type":"IMG","href":null,"layout":"INSET_CENTER","metadata":{"__ref":"ImageMetadata:1*bLJzfTx0xopkx5Q0uzIj8A.jpeg"},"text":"","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_24":{"__typename":"Paragraph","id":"96c4f07b4619_24","name":"5a12","type":"P","href":null,"layout":null,"metadata":null,"text":"Most of what is happening here can be explained in a decryptor I wrote that resolves the shellcode from the resource section. If you head over to the python script, you’ll notice the custom base64 decoder is fairly simple. It will use a hardcoded charset, and check to see if any of the bytes from the resource section match a byte from the charset; if it is a match, it breaks from the loop. The next character gets subtracted by one and compared to a value of zero, if greater, it will take that value and modulate by 256; that byte will then get stored in a buffer array. It will perform this in a loop 89,268 times, as that is the size of the encoded string inside the resource section.","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":520,"end":523,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":606,"end":612,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"A","start":53,"end":62,"href":"https:\u002F\u002Fgithub.com\u002Fryancor\u002FCryptoWall_Analysis\u002Fblob\u002Fmaster\u002Fdecrypt_shellcode_loader.py","anchorType":"LINK","userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_25":{"__typename":"Paragraph","id":"96c4f07b4619_25","name":"297a","type":"P","href":null,"layout":null,"metadata":null,"text":"Secondary to this, another decryption process starts on our recently decoded data from the algorithm above. Looking at the python script again, we can see that hardcoded XOR keys were extracted in the debugger if you set a breakpoint inside the decryption loop. All that is happening here is each byte is getting decrypted by a rotating three byte key. Once the loop is finished, the code will return the address of the decrypted contents, which essentially just contains an address to another subroutine:","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":170,"end":173,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"A","start":160,"end":178,"href":"https:\u002F\u002Fgithub.com\u002Fryancor\u002FCryptoWall_Analysis\u002Fblob\u002Fmaster\u002Fdecrypt_shellcode_loader.py#L61","anchorType":"LINK","userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_26":{"__typename":"Paragraph","id":"96c4f07b4619_26","name":"91f8","type":"PRE","href":null,"layout":null,"metadata":null,"text":"loop:\n    buffer = *(base_addr + idx) - (*n ^ (&addr + 0xFFE6DF5F + idx));\n    *(base_addr + idx++) = buffer;\n…\nFourth_Stage_Loader = base_addr;\nreturn (&Fourth_Stage_Loader)(buffer, b64_decoded_str, a1);","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_27":{"__typename":"Paragraph","id":"96c4f07b4619_27","name":"cb85","type":"P","href":null,"layout":null,"metadata":null,"text":"The base_addr transfers data to another variable that we named Fourth_Stage_Loader which holds the address of the newest function, and can be used as a caller. If we dump the address at call dword ptr gs:(loc_1920A1–1920A1h)[eax] into memory, you’ll see bytes that start with a generic x86 function prologue like 55 8b ec 81. Dump this to a file, and we can actually emulate this shellcode. In doing so, we don’t have to step through all this code in the debugger; instead it will hopefully tell us how to unpack and get to the main CryptoWall file.","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":4,"end":13,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":63,"end":82,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":186,"end":229,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":313,"end":324,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"A","start":380,"end":389,"href":"https:\u002F\u002Fgithub.com\u002Fryancor\u002FCryptoWall_Analysis\u002Fblob\u002Fmaster\u002Fextractions\u002Fpe_process_injector_dump.asm","anchorType":"LINK","userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_28":{"__typename":"Paragraph","id":"96c4f07b4619_28","name":"1756","type":"P","href":null,"layout":null,"metadata":null,"text":"Side note: the python script I wrote will automatically decode & decrypt the resource section, and dump it to a bin file by running =\u003E python decrypt_shellcode_loader.py -e.","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":135,"end":172,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"A","start":135,"end":172,"href":"https:\u002F\u002Fgithub.com\u002Fryancor\u002FCryptoWall_Analysis\u002Fblob\u002Fmaster\u002Fdecrypt_shellcode_loader.py","anchorType":"LINK","userId":null,"linkMetadata":null},{"__typename":"Markup","type":"STRONG","start":0,"end":10,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_29":{"__typename":"Paragraph","id":"96c4f07b4619_29","name":"7510","type":"PRE","href":null,"layout":null,"metadata":null,"text":"0x1000: push ebp\n0x1001: mov ebp, esp\n0x1003: add esp, 0xfffff004\n....","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_30":{"__typename":"Paragraph","id":"96c4f07b4619_30","name":"92af","type":"P","href":null,"layout":null,"metadata":null,"text":"An easy way to see what this next stage in the malware’s loader is doing is by using one of my favorite shellcode emulator tools called ScDbg. By using this tool, we can figure out exactly where we need to set our breakpoints in order to get to the main ransomware file. We are going to look for calls such as VirtualAlloc, WriteProcessMemory, CreateProcessA, etc.","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":310,"end":322,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":324,"end":342,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":344,"end":358,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"A","start":136,"end":141,"href":"http:\u002F\u002Fsandsprite.com\u002Fblogs\u002Findex.php?uid=7&pid=152","anchorType":"LINK","userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_31":{"__typename":"Paragraph","id":"96c4f07b4619_31","name":"682f","type":"PRE","href":null,"layout":null,"metadata":null,"text":"C:\\\u003E scdbg.exe \u002Fs 3200000 \u002Fbp WriteProcessMemory \u002Ff dump.bin","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_32":{"__typename":"Paragraph","id":"96c4f07b4619_32","name":"7734","type":"PRE","href":null,"layout":null,"metadata":null,"text":"Loaded 10587 bytes from file extractions\u002Fpe_process_injector_dump.bin\nBreakpoint 0 set at 7c802213\nInitialization Complete..\nMax Steps: 3200000\nUsing base offset: 0x401000","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_33":{"__typename":"Paragraph","id":"96c4f07b4619_33","name":"ad1d","type":"PRE","href":null,"layout":null,"metadata":null,"text":"4011cf    GetProcAddress(LoadLibraryA)\n40165f    GetProcAddress(VirtualAlloc)\n401c46    GetProcAddress(GetCurrentProcessId)\n401c52    GetCurrentProcessId() = 29\n...\n401d46    CloseHandle(18be)\n401f40    VirtualAlloc(base=0 , sz=20400) = 600000\n4021e1 VirtualAllocEx(pid=1269, base=400000 , sz=25000) = 621000\n \u002F* Breakpoint 0 hit at: 7c802213 *\u002F \n4021fe WriteProcessMemory(pid=1269, base=400000 , buf=600000, sz=400, written=12fd70)\n \u002F* Breakpoint 0 hit at: 7c802213 *\u002F\n40224e WriteProcessMemory(pid=1269, base=401000 , buf=600400, sz=16400, written=12fd70)","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_34":{"__typename":"Paragraph","id":"96c4f07b4619_34","name":"f02b","type":"P","href":null,"layout":null,"metadata":null,"text":"Interesting… it looks like the malware is allocating memory to its own process by using GetCurrentProcessId() and allocating a large enough space to inject a PE file into itself. After memory allocation, CryptoWall injects the payload file twice, once for the header, and the second time for the rest of the file. If you set a breakpoint at WriteProcessMemory, and continue execution twice, you can dump the second argument (ECX) on the stack to see the hidden PE file.","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":88,"end":109,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":341,"end":359,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":425,"end":428,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"ImageMetadata:1*riTi2zDCDVeTMYT6s2Ek2A.png":{"__typename":"ImageMetadata","id":"1*riTi2zDCDVeTMYT6s2Ek2A.png","originalHeight":1562,"originalWidth":2560,"focusPercentX":null,"focusPercentY":null,"alt":null},"Paragraph:96c4f07b4619_35":{"__typename":"Paragraph","id":"96c4f07b4619_35","name":"b0f4","type":"IMG","href":null,"layout":"INSET_CENTER","metadata":{"__ref":"ImageMetadata:1*riTi2zDCDVeTMYT6s2Ek2A.png"},"text":"","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_36":{"__typename":"Paragraph","id":"96c4f07b4619_36","name":"ca8f","type":"P","href":null,"layout":null,"metadata":null,"text":"There is an Anti-VM trick along the way in the 3rd stage part of the loader process that needs to be patched in order to hit the injection process, so I wrote an x32Dbg python plugin to help automate the patching and dumping operation.","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"A","start":162,"end":182,"href":"https:\u002F\u002Fgithub.com\u002Fryancor\u002FCryptoWall_Analysis\u002Fblob\u002Fmaster\u002FEMU_Scripts\u002FUnpacker-x64dbg.py","anchorType":"LINK","userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_37":{"__typename":"Paragraph","id":"96c4f07b4619_37","name":"095e","type":"H3","href":null,"layout":null,"metadata":null,"text":"Reversing the Main Crypto Binary","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_38":{"__typename":"Paragraph","id":"96c4f07b4619_38","name":"fd22","type":"P","href":null,"layout":null,"metadata":null,"text":"CryptoWall’s entry point starts off by dynamically resolving all imports to obtain all of NTDLL’s offsets by using the process environment block.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"ImageMetadata:1*Y_g2dcStOrsCFwT3NhjWfw.png":{"__typename":"ImageMetadata","id":"1*Y_g2dcStOrsCFwT3NhjWfw.png","originalHeight":822,"originalWidth":1890,"focusPercentX":null,"focusPercentY":null,"alt":null},"Paragraph:96c4f07b4619_39":{"__typename":"Paragraph","id":"96c4f07b4619_39","name":"b836","type":"IMG","href":null,"layout":"INSET_CENTER","metadata":{"__ref":"ImageMetadata:1*Y_g2dcStOrsCFwT3NhjWfw.png"},"text":"","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_40":{"__typename":"Paragraph","id":"96c4f07b4619_40","name":"d0b7","type":"P","href":null,"layout":null,"metadata":null,"text":"It will then call a subroutine that is responsible for using the base address of the loaded DLL and uses many hardcoded DWORD addresses to locate hundreds of functions.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_41":{"__typename":"Paragraph","id":"96c4f07b4619_41","name":"d415","type":"P","href":null,"layout":null,"metadata":null,"text":"Side Note: If you would like to make your life a whole lot easier with resolving the function names in each subroutine, I made a local type definition for IDA Pro over here. The resolving import function table will look a lot cleaner than what you see above:","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"A","start":168,"end":172,"href":"https:\u002F\u002Fgithub.com\u002Fryancor\u002FCryptoWall_Analysis\u002Fblob\u002Fmaster\u002Fapi_names.h","anchorType":"LINK","userId":null,"linkMetadata":null},{"__typename":"Markup","type":"STRONG","start":0,"end":10,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"ImageMetadata:1*pfiMaPp1IBS2A2Ui_2XqRQ.png":{"__typename":"ImageMetadata","id":"1*pfiMaPp1IBS2A2Ui_2XqRQ.png","originalHeight":396,"originalWidth":1788,"focusPercentX":null,"focusPercentY":null,"alt":null},"Paragraph:96c4f07b4619_42":{"__typename":"Paragraph","id":"96c4f07b4619_42","name":"20a2","type":"IMG","href":null,"layout":"INSET_CENTER","metadata":{"__ref":"ImageMetadata:1*pfiMaPp1IBS2A2Ui_2XqRQ.png"},"text":"","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_43":{"__typename":"Paragraph","id":"96c4f07b4619_43","name":"f017","type":"P","href":null,"layout":null,"metadata":null,"text":"After the function returns, the malware will proceed to generate a unique hash based on your system information, the resulting string will be MD5 hashed =\u003E DESKTOP-QR18J6QB0CBF8E8Intel64 Family 6 Model 70 Stepping 1, GenuineIntel. After computing the hash, it will setup a handle to an existing named event object with the specified desired access that will be called as \\\\BaseNamedObjects\\\\C6B359277232C8E248AFD89C98E96D65.","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":156,"end":229,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":371,"end":423,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_44":{"__typename":"Paragraph","id":"96c4f07b4619_44","name":"0c1b","type":"P","href":null,"layout":null,"metadata":null,"text":"The main engine of the code starts a few routines after the malware checks for system information, events, anti-vm, and running processes.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"ImageMetadata:1*UskgVTbZpcHwnj7Yc8Q4sw.png":{"__typename":"ImageMetadata","id":"1*UskgVTbZpcHwnj7Yc8Q4sw.png","originalHeight":154,"originalWidth":942,"focusPercentX":null,"focusPercentY":null,"alt":null},"Paragraph:96c4f07b4619_45":{"__typename":"Paragraph","id":"96c4f07b4619_45","name":"30e3","type":"IMG","href":null,"layout":"INSET_CENTER","metadata":{"__ref":"ImageMetadata:1*UskgVTbZpcHwnj7Yc8Q4sw.png"},"text":"","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_46":{"__typename":"Paragraph","id":"96c4f07b4619_46","name":"2c28","type":"P","href":null,"layout":null,"metadata":null,"text":"Most of the time the ransomware will successfully inject its main thread into svchost and not explorer; so let’s follow that trail. Since this is a 32-bit binary its going to attempt to find svchost.exe inside of SysWOW64 instead of System32. After successfully locating the full path, it will create a new thread using the RtlCreateUserThread() API call. Once the thread is created, NtResumeThread() will be used on the process to start the ransomware_thread code. Debugging these types of threads can be a little convoluted, and setting breakpoints doesn’t always work.","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":78,"end":85,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":94,"end":102,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":191,"end":202,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":213,"end":221,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":233,"end":241,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":324,"end":345,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":384,"end":400,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":442,"end":459,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_47":{"__typename":"Paragraph","id":"96c4f07b4619_47","name":"6e3e","type":"PRE","href":null,"layout":null,"metadata":null,"text":".text:00416F40     ransomware_thread proc near             \n.text:00416F40     start+86↓o\n.text:00416F40\n.text:00416F40     var_14          = dword ptr -14h\n.text:00416F40     var_10          = dword ptr -10h\n.text:00416F40     var_C           = dword ptr -0Ch\n.text:00416F40     var_8           = dword ptr -8\n.text:00416F40     var_4           = dword ptr -4\n.text:00416F40\n.text:00416F40 000                 push    ebp\n.text:00416F41 004                 mov     ebp, esp\n.text:00416F43 004                 sub     esp, 14h\n.text:00416F46 018                 call    ResolveImportsFromDLL\n...","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_48":{"__typename":"Paragraph","id":"96c4f07b4619_48","name":"6fbb","type":"P","href":null,"layout":null,"metadata":null,"text":"Using x32Dbg, you can set the EIP to address 0x00416F40 since this thread is not resource dependent on any of the other code that has been executed up until this point; this thread even utilizes the ResolveImportsFromDLL function we saw in the beginning of the program’s entry point… meaning, the forced instruction pointer jump will not damage the integrity of the ransomware.","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":30,"end":33,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":45,"end":55,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":199,"end":220,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_49":{"__typename":"Paragraph","id":"96c4f07b4619_49","name":"0234","type":"PRE","href":null,"layout":null,"metadata":null,"text":"isHandleSet = SetSecurityHandle();\nif ( isHandleSet && SetupC2String() )\n{\n   v8 = 0;\n   v6 = 0;\n   IsSuccess = WhichProcessToInject(&v8, &v6);\n   if ( IsSuccess )\n   {\n     IsSuccess = StartThreadFromProcess(-1, InjectedThread, \n                                        0, 0, 0);\n     FreeVirtualMemory(v8);\n   }\n}","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_50":{"__typename":"Paragraph","id":"96c4f07b4619_50","name":"aeb4","type":"P","href":null,"layout":null,"metadata":null,"text":"The thread will go through a series of configurations that involve setting up security attributes, MD5 hashing the hostname of the infected system, and then searching to either inject new code into svchost or explorer. In order to start a new thread, the function WhichProcessToInject will query the registry path, and check permissions on what key values the malware has access to. Once chosen, the InjectedThread process will resume. Stepping into that thread, we can see the module size is fairly small.","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":198,"end":205,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":209,"end":217,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":264,"end":284,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":400,"end":414,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_51":{"__typename":"Paragraph","id":"96c4f07b4619_51","name":"d7a3","type":"PRE","href":null,"layout":null,"metadata":null,"text":".text:00412E80     InjectedThread  proc near               ; DATA \n.text:00412E80     \n.text:00412E80 000                 push    ebp\n.text:00412E81 004                 mov     ebp, esp\n.text:00412E83 004                 call    MainInjectedThread\n.text:00412E88 004                 push    0\n.text:00412E8A 008                 call    ReturnFunctionName\n.text:00412E8F 008                 mov     eax, [eax+0A4h]\n.text:00412E95 008                 call    eax\n.text:00412E97 004                 xor     eax, eax\n.text:00412E99 004                 pop     ebp\n.text:00412E9A 000                 retn\n.text:00412E9A     InjectedThread  endp","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_52":{"__typename":"Paragraph","id":"96c4f07b4619_52","name":"489b","type":"P","href":null,"layout":null,"metadata":null,"text":"At address 0x00412E83, a subroutine gets called that will bring the malware to start the next series of functions that involves the C2 server configuration callback, and the encryption of files. After the thread is finished executing, EAX resolves a function at offset +0x0A4 which will show RtlExitUserThread being invoked. Once we enter MainInjectedThread, you’ll notice the first function at 0x004011B40 is giving us the first clue of how the files will be encrypted.","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":11,"end":21,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":235,"end":238,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":269,"end":275,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":292,"end":309,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":339,"end":357,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":395,"end":406,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_53":{"__typename":"Paragraph","id":"96c4f07b4619_53","name":"a486","type":"PRE","href":null,"layout":null,"metadata":null,"text":".text:00411D06 06C                 push    0F0000000h\n.text:00411D0B 070                 push    1\n.text:00411D0D 074                 lea     edx, [ebp+reg_crypt_path]\n.text:00411D10 074                 push    edx\n.text:00411D11 078                 push    0\n.text:00411D13 07C                 lea     eax, [ebp+var_8]\n.text:00411D16 07C                 push    eax\n.text:00411D17 080                 call    ReturnFunctionName\n.text:00411D1C 080                 mov     ecx, [eax+240h]\n.text:00411D22 080                 call    ecx ; CryptAcquireContext","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_54":{"__typename":"Paragraph","id":"96c4f07b4619_54","name":"6fdb","type":"P","href":null,"layout":null,"metadata":null,"text":"CryptAcquireContext is used to acquire a handle to a particular key container within a particular cryptographic service provider (CSP). In our case, the CSP being used is Microsoft\\Enhanced\\Cryptographic\\Provider\\V1, which coincides with algorithms such as DES, HMAC, MD5, and RSA.","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":0,"end":19,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":171,"end":215,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"ImageMetadata:1*-AREAxfEVc7jitqRWauAsw.png":{"__typename":"ImageMetadata","id":"1*-AREAxfEVc7jitqRWauAsw.png","originalHeight":640,"originalWidth":1350,"focusPercentX":null,"focusPercentY":null,"alt":null},"Paragraph:96c4f07b4619_55":{"__typename":"Paragraph","id":"96c4f07b4619_55","name":"5474","type":"IMG","href":null,"layout":"INSET_CENTER","metadata":{"__ref":"ImageMetadata:1*-AREAxfEVc7jitqRWauAsw.png"},"text":"","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_56":{"__typename":"Paragraph","id":"96c4f07b4619_56","name":"bf99","type":"P","href":null,"layout":null,"metadata":null,"text":"Once the CryptoContext is populated, the ransomware will use the MD5 hash created to label the victim’s system information and register it as a key path as such → software\\\\C6B359277232C8E248AFD89C98E96D65. The ransom note is processed by a few steps. The first step is to generate the TOR addresses which end up resolving four addresses: http[:]\u002F\u002Ftorforall[.]com, http[:]\u002F\u002Ftorman2[.]com, http[:]\u002F\u002Ftorwoman[.]com, and http[:]\u002F\u002Ftorroadsters[.]com. These DNS records will be used later on to inject into the ransomware HTML file. Next, the note gets produced by the use of the Win32 API function, RtlDecompressBuffer, to decompress the data using COMPRESSION_FORMAT_LZNT1. The compressed ransom note can be found in the .data section and consists of 0x52B8 bytes.","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":9,"end":22,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":163,"end":205,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":339,"end":363,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":365,"end":387,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":389,"end":412,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":418,"end":445,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":595,"end":614,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":645,"end":669,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":718,"end":723,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":748,"end":754,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"ImageMetadata:1*hr-O6u_b0k_YFEBXtf07Kg.png":{"__typename":"ImageMetadata","id":"1*hr-O6u_b0k_YFEBXtf07Kg.png","originalHeight":504,"originalWidth":500,"focusPercentX":null,"focusPercentY":null,"alt":null},"Paragraph:96c4f07b4619_57":{"__typename":"Paragraph","id":"96c4f07b4619_57","name":"fe69","type":"IMG","href":null,"layout":"INSET_CENTER","metadata":{"__ref":"ImageMetadata:1*hr-O6u_b0k_YFEBXtf07Kg.png"},"text":"","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_58":{"__typename":"Paragraph","id":"96c4f07b4619_58","name":"bb20","type":"P","href":null,"layout":null,"metadata":null,"text":"Decompressing the note is kind of a mess in python as there is no built in function that is able to do LZNT1 decompression. You can find the actual call at address 0x004087F3.","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":164,"end":174,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_59":{"__typename":"Paragraph","id":"96c4f07b4619_59","name":"0aab","type":"PRE","href":null,"layout":null,"metadata":null,"text":".text:004087CF 024                 lea     ecx, [ebp+var_8]\n.text:004087D2 024                 push    ecx\n.text:004087D3 028                 mov     edx, [ebp+arg_4]\n.text:004087D6 028                 push    edx\n.text:004087D7 02C                 mov     eax, [ebp+arg_6]\n.text:004087DA 02C                 push    eax\n.text:004087DB 030                 mov     ecx, [ebp+var_18]\n.text:004087DE 030                 push    ecx\n.text:004087DF 034                 mov     edx, [ebp+var_C]\n.text:004087E2 034                 push    edx\n.text:004087E3 038                 movzx   eax, [ebp+var_12]\n.text:004087E7 038                 push    eax\n.text:004087E8 03C                 call    ReturnFunctionName\n.text:004087ED 03C                 mov     ecx, [eax+178h]\n.text:004087F3 03C                 call    ecx\n\u002F\u002F Decompiled below\n(*(RtlDecompressBuffer))(COMPRESSION_FORMAT_LZNT1,       \n                         uncompressed_buffer, \n                         UncompressedBufferSize, \n                         CompressedBuffer, \n                         CompressedBufferSize, \n                         FinalUncompressedSize) )","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_60":{"__typename":"Paragraph","id":"96c4f07b4619_60","name":"b5a6","type":"P","href":null,"layout":null,"metadata":null,"text":"After the function call, uncompressed_buffer will be a data filled pointer to a caller-allocated buffer (allocated from a paged or non-paged pool) that receives the decompressed data from CompressedBuffer. This parameter is required and cannot be NULL, which is why there is an NtAllocateVirtualMemory() call to this parameter before being passed to decompression. The script I wrote will grab the compressed data from the PE file, and run a LZNT1 decompression algorithm then place the buffer in an HTML file. The resulting note will appear on the victims system as such:","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":25,"end":44,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":278,"end":303,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"A","start":369,"end":375,"href":"https:\u002F\u002Fgithub.com\u002Fryancor\u002FCryptoWall_Analysis\u002Fblob\u002Fmaster\u002Fdecompress_ransomwarenote.py","anchorType":"LINK","userId":null,"linkMetadata":null},{"__typename":"Markup","type":"A","start":442,"end":471,"href":"https:\u002F\u002Fgithub.com\u002Fryancor\u002FCryptoWall_Analysis\u002Fblob\u002Fmaster\u002Fdecompress_ransomwarenote.py#L30","anchorType":"LINK","userId":null,"linkMetadata":null},{"__typename":"Markup","type":"STRONG","start":247,"end":251,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"STRONG","start":277,"end":278,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"EM","start":188,"end":204,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"ImageMetadata:1*iDMgJ2PFTB8rX1IJOtj1bQ.png":{"__typename":"ImageMetadata","id":"1*iDMgJ2PFTB8rX1IJOtj1bQ.png","originalHeight":430,"originalWidth":500,"focusPercentX":null,"focusPercentY":null,"alt":null},"Paragraph:96c4f07b4619_61":{"__typename":"Paragraph","id":"96c4f07b4619_61","name":"f95d","type":"IMG","href":null,"layout":"INSET_CENTER","metadata":{"__ref":"ImageMetadata:1*iDMgJ2PFTB8rX1IJOtj1bQ.png"},"text":"","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_62":{"__typename":"Paragraph","id":"96c4f07b4619_62","name":"d80b","type":"P","href":null,"layout":null,"metadata":null,"text":"Once the note is decompressed, the HTML fields will be populated with multiple TOR addresses at subroutine sub_00414160(). The note is stored in memory then follows a few more checks before the malware sends its first C2 POST request. Stepping into SendRequestToC2 which is located at 0x00416A50, the first thing we notice is a buffer being allocated 60 bytes of memory.","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":107,"end":121,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":249,"end":264,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":285,"end":295,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"EM","start":221,"end":225,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_63":{"__typename":"Paragraph","id":"96c4f07b4619_63","name":"fdfb","type":"PRE","href":null,"layout":null,"metadata":null,"text":".text:00416A77 018                 push    3Ch\n.text:00416A79 01C                 call    AllocateSetMemory\n.text:00416A7E 01C                 add     esp, 4\n.text:00416A81 018                 mov     [ebp+campaign_str], eax","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_64":{"__typename":"Paragraph","id":"96c4f07b4619_64","name":"dace","type":"P","href":null,"layout":null,"metadata":null,"text":"All this information will eventually help us write a proper fake C2 server that will allow us to communicate with the ransomware since CryptoWall’s I2P servers are no longer active. Around address 0x004052E0, which we labeled EncryptData_SendToC2 will be responsible for taking our generated campaign string and sending it as an initial ping.","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":197,"end":207,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":226,"end":246,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"A","start":60,"end":74,"href":"https:\u002F\u002Fgithub.com\u002Fryancor\u002FCryptoWall_Analysis\u002Fblob\u002Fmaster\u002Ffake_c2_i2p_server.py","anchorType":"LINK","userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"ImageMetadata:1*ljr9pCmMEbq1bRSwssdiMw.png":{"__typename":"ImageMetadata","id":"1*ljr9pCmMEbq1bRSwssdiMw.png","originalHeight":244,"originalWidth":1532,"focusPercentX":null,"focusPercentY":null,"alt":null},"Paragraph:96c4f07b4619_65":{"__typename":"Paragraph","id":"96c4f07b4619_65","name":"e38c","type":"IMG","href":null,"layout":"INSET_CENTER","metadata":{"__ref":"ImageMetadata:1*ljr9pCmMEbq1bRSwssdiMw.png"},"text":"","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_66":{"__typename":"Paragraph","id":"96c4f07b4619_66","name":"f31d","type":"P","href":null,"layout":null,"metadata":null,"text":"If you set a breakpoint at this function, you can see what the parameter contains: {1|crypt1|C6B359277232C8E248AFD89C98E96D65}. Once inside this module, you'll notice three key functions; one responsible for byte swapping, a key scheduling algorithm, and the other doing the actual encryption. The generated RC4 encryption will end up as a hash string:","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":83,"end":126,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_67":{"__typename":"Paragraph","id":"96c4f07b4619_67","name":"4173","type":"PRE","href":null,"layout":null,"metadata":null,"text":"85b088216433863bdb490295d5bd997b35998c027ed600c24d05a55cea4cb3deafdf4161e6781d2cd9aa243f5c12a717cf64944bc6ea596269871d29abd7e2","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_68":{"__typename":"Paragraph","id":"96c4f07b4619_68","name":"9507","type":"H3","href":null,"layout":null,"metadata":null,"text":"Command & Control Communication","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_69":{"__typename":"Paragraph","id":"96c4f07b4619_69","name":"f5dd","type":"P","href":null,"layout":null,"metadata":null,"text":"The malware sets itself up for a POST request to its I2P addresses that cycle between proxy1–1–1.i2p & proxy2–2–2.i2p. The way this is done is by using the function at 0x0040B880 to generate a random seed based on epoch time, and use that to create a string that ranges from 11 to 16 bytes. This PRNG (Pseudo-Random Number Generator) string will be used as the POST request’s URI and as the key used in the byte swapping function before the RC4 encryption.","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":86,"end":100,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":103,"end":117,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":168,"end":178,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"A","start":361,"end":379,"href":"https:\u002F\u002Fgithub.com\u002Fryancor\u002FCryptoWall_Analysis\u002Fblob\u002Fmaster\u002Ffake_c2_i2p_server.py#L56","anchorType":"LINK","userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"ImageMetadata:1*MvgMk77byL4V5NnXxEdytA.png":{"__typename":"ImageMetadata","id":"1*MvgMk77byL4V5NnXxEdytA.png","originalHeight":718,"originalWidth":1020,"focusPercentX":null,"focusPercentY":null,"alt":null},"Paragraph:96c4f07b4619_70":{"__typename":"Paragraph","id":"96c4f07b4619_70","name":"bad9","type":"IMG","href":null,"layout":"INSET_CENTER","metadata":{"__ref":"ImageMetadata:1*MvgMk77byL4V5NnXxEdytA.png"},"text":"","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_71":{"__typename":"Paragraph","id":"96c4f07b4619_71","name":"72e0","type":"P","href":null,"layout":null,"metadata":null,"text":"To give us an example, if our generated string results in tfuzxqh6wf7mng, then after the function call, that string will turn into 67ffghmnqtuwxz. That string gets used for a 256-generated key scheduling algorithm, and the POST request (I.E., http:\u002F\u002Fproxy1–1–1.i2p\u002F67ffghmnqtuwxz). You can find the reverse engineered algorithm here.","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":58,"end":72,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":131,"end":145,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":243,"end":279,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"A","start":328,"end":332,"href":"https:\u002F\u002Fgithub.com\u002Fryancor\u002FCryptoWall_Analysis\u002Fblob\u002Fmaster\u002Ffake_c2_i2p_server.py#L15","anchorType":"LINK","userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"ImageMetadata:1*dnmr7VxbUMN7sKpITqNOKQ.png":{"__typename":"ImageMetadata","id":"1*dnmr7VxbUMN7sKpITqNOKQ.png","originalHeight":522,"originalWidth":1068,"focusPercentX":null,"focusPercentY":null,"alt":null},"Paragraph:96c4f07b4619_72":{"__typename":"Paragraph","id":"96c4f07b4619_72","name":"5d53","type":"IMG","href":null,"layout":"INSET_CENTER","metadata":{"__ref":"ImageMetadata:1*dnmr7VxbUMN7sKpITqNOKQ.png"},"text":"","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_73":{"__typename":"Paragraph","id":"96c4f07b4619_73","name":"2d02","type":"P","href":null,"layout":null,"metadata":null,"text":"The next part will take this byte swapped key, then RC4 encrypt some campaign information that the malware has gathered, which unencrypted, will look like this:","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_74":{"__typename":"Paragraph","id":"96c4f07b4619_74","name":"92b9","type":"P","href":null,"layout":null,"metadata":null,"text":"{1|crypt1|C6B359277232C8E248AFD89C98E96D65|0|2|1||55.59.84.254}","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":0,"end":63,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_75":{"__typename":"Paragraph","id":"96c4f07b4619_75","name":"3fe5","type":"P","href":null,"layout":null,"metadata":null,"text":"This blob consists of the campaign ID, an MD5 hashed unique computer identifier, a CUUID, and the victims public IP address. After preparation of this campaign string, the ransomware will begin to resolve the two I2P addresses. Once CryptoWall sends its first ping to the C2 server, the malware expects back an RC4 encrypted string, which will contain a public key used to encrypt all the files on disk. The malware has the ability to decrypt this string using the same RC4 algorithm from earlier, and will parse the info from this block: {216|1pai7ycr7jxqkilp.onion|[pub_key]|US|[unique_id]}. The onion route is for the ransom note, and is a personalized route that the victim can enter using a TOR browser. The site most likely contains further instructions on how to pay the ransom.","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":539,"end":592,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_76":{"__typename":"Paragraph","id":"96c4f07b4619_76","name":"4333","type":"P","href":null,"layout":null,"metadata":null,"text":"Since the C2 servers are no longer active; in order to actually know what our fake C2 server should send back to the malware; the parser logic had to be carefully dissected which is located at 0x00405203.","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":193,"end":203,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"STRONG","start":93,"end":99,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"ImageMetadata:1*SoJfYoBH3tlKRNS-O38fOA.png":{"__typename":"ImageMetadata","id":"1*SoJfYoBH3tlKRNS-O38fOA.png","originalHeight":834,"originalWidth":1130,"focusPercentX":null,"focusPercentY":null,"alt":null},"Paragraph:96c4f07b4619_77":{"__typename":"Paragraph","id":"96c4f07b4619_77","name":"13db","type":"IMG","href":null,"layout":"INSET_CENTER","metadata":{"__ref":"ImageMetadata:1*SoJfYoBH3tlKRNS-O38fOA.png"},"text":"","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_78":{"__typename":"Paragraph","id":"96c4f07b4619_78","name":"03c9","type":"P","href":null,"layout":null,"metadata":null,"text":"In this block, the malware decrypts the data it received from the C2 server. Once decrypted, it stores the first byte in ECX and compares hex value to 0x7B (char: ‘{‘). Tracing this function call to the return value, the string returned back will remove brackets from start to end. At memory address 0x00404E69, a DWORD pointer at eax+2ch holds our newly decrypted and somewhat parsed string, that will be checked for a length greater than 0. If the buffer holds weight, we move on over to the final processing of this string routine at 0x00404B00, that I dubbed ParseC2Data(). This function takes four parameters, char* datain, int datain_size, char *dataout, int dataout_size. The first blob on datain data gets parsed from the first 0x7C (char: ‘|’) and extracts the victim id.","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":121,"end":124,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":151,"end":155,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":163,"end":166,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":300,"end":310,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":331,"end":338,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":537,"end":547,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":563,"end":576,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":615,"end":627,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":629,"end":644,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":646,"end":659,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":661,"end":677,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":697,"end":703,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":736,"end":740,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":748,"end":751,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_79":{"__typename":"Paragraph","id":"96c4f07b4619_79","name":"8f53","type":"PRE","href":null,"layout":null,"metadata":null,"text":"victim_id = GetXBytesFromC2Data(decrypted_block_data_from_c2, &hex_7c, &ptr_to_data_out);","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_80":{"__typename":"Paragraph","id":"96c4f07b4619_80","name":"4366","type":"P","href":null,"layout":null,"metadata":null,"text":"ptr_to_data_out and EAX will now hold an ID number of 216 (we got that number since we placed it there in our fake C2). The next block of code will finish the rest of the data:","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":0,"end":15,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":20,"end":23,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_81":{"__typename":"Paragraph","id":"96c4f07b4619_81","name":"9ce8","type":"PRE","href":null,"layout":null,"metadata":null,"text":"while ( victim_id )\n{\n   if ( CopyMemoryToAnotherLocation(&some_buffer_to_copy_too, \n     8 * idx + 8) )\n   {\n        CopyBlocksofMemory(victim_id, \n                          &some_buffer_to_copy_too[2 * idx + 1], \n                          &some_buffer_to_copy_too[2 * idx]);\n        ++idx;\n        if ( ptr_to_data_out )\n        {\n            for ( i = 0; *(i + ptr_to_data_out) == 0x7C; ++i )\n            {\n               if (\n               CopyMemoryToAnotherLocation(&some_buffer_to_copy_too, \n                                           8 * idx + 8) )\n                {\n                   ++v9;\n                   ++idx;\n                }\n             }\n         }\n    }\n    victim_id = GetXBytesFromC2Data(0, &hex_7c_0,       \n                                    &ptr_to_data_out);\n    ++v5;\n    ++v9;\n}","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_82":{"__typename":"Paragraph","id":"96c4f07b4619_82","name":"8c75","type":"P","href":null,"layout":null,"metadata":null,"text":"What’s happening here is that by every iteration of the character ‘|’ we grab the next chunk of data and place it in memory into some type structure. The data jumps X amount of times per loop until it reaches the last 0x7C byte. It will loop a total of four times. After this function returns, dataout will contain a pointer in memory to this local type, which we reversed to look like this:","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":66,"end":69,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":218,"end":222,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":294,"end":301,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_83":{"__typename":"Paragraph","id":"96c4f07b4619_83","name":"2493","type":"PRE","href":null,"layout":null,"metadata":null,"text":"struct _C2ResponseData\n{\n   int victim_id;\n   char *onion_route;\n   const char* szPemPubKey;\n   char country_code[2];\n   char unique_id[4];\n};","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_84":{"__typename":"Paragraph","id":"96c4f07b4619_84","name":"b0c5","type":"P","href":null,"layout":null,"metadata":null,"text":"Shortly after, there is a check to make sure the victim id generated is no greater than 0x3E8 or that it is not an unsigned value.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_85":{"__typename":"Paragraph","id":"96c4f07b4619_85","name":"d99e","type":"PRE","href":null,"layout":null,"metadata":null,"text":"value_of_index = CheckID(*(*parsed_data_out-\u003Evictim_id));\nif ( value_of_index \u003E 0x3E8 || value_of_index == 0xFFFFFFFF )\n    value_of_index = 0x78;","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_86":{"__typename":"Paragraph","id":"96c4f07b4619_86","name":"d036","type":"P","href":null,"layout":null,"metadata":null,"text":"I believe certain malware will often perform these checks throughout the parsing of the C2 response server to make sure the data being fed back is authentic. Over at 0x00404F35, there is another check to see how many times it tried to reach the command server. If the check reaches exactly 3 times then it will move to check if the onion route is valid; all CryptoWall variants hardcode the first string index with ascii ‘1’. If it does not start with this number, then it will try to reach back again for a different payload. The other anti-tamper check it makes for the onion route is a CRC32 hash against the payload, if the compressed route does not equal 0x63680E35, the malware will try one last time to compare against the DWORD value of 0x30BBB749. The variant has two hardcoded 256 byte arrays to which it compares the encrypted values against. Brute-forcing can take a long time but is possible with a python script that I made here. The checksum is quite simple, it will take each letter of the site string and logical-XOR against an unsigned value:","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":166,"end":176,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":421,"end":424,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":660,"end":670,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":745,"end":755,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"A","start":938,"end":942,"href":"https:\u002F\u002Fgithub.com\u002Fryancor\u002FCryptoWall_Analysis\u002Fblob\u002Fmaster\u002Ftor_site_checksum_finder.py","anchorType":"LINK","userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_87":{"__typename":"Paragraph","id":"96c4f07b4619_87","name":"1892","type":"PRE","href":null,"layout":null,"metadata":null,"text":"tmp = ord(site[i])) ^ (ret_value & 0xffffff)","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_88":{"__typename":"Paragraph","id":"96c4f07b4619_88","name":"371f","type":"P","href":null,"layout":null,"metadata":null,"text":"It will take the tmp value and use it as an index in the hardcoded byte array to perform another logical-XOR against :","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":17,"end":20,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_89":{"__typename":"Paragraph","id":"96c4f07b4619_89","name":"9c15","type":"PRE","href":null,"layout":null,"metadata":null,"text":"ret_value = bytes_array[tmp*4:(tmp*4)+4] ^ (0xFFFFFFFF \u003E\u003E 8)","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_90":{"__typename":"Paragraph","id":"96c4f07b4619_90","name":"18a0","type":"P","href":null,"layout":null,"metadata":null,"text":"The return value then gets inverted giving us a 4 byte hash to verify against. Now the malware moves on over to the main thread responsible for encrypting the victims files at 0x00412988. The first function call in this thread is from CryptAcquireContextW, and that will acquire a handle to a particular key container within a CSP. 16 bytes will then be allocated to the stack using VirtualAlloc; which will be the buffer to the original key.","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":176,"end":186,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":235,"end":255,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":332,"end":334,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"A","start":27,"end":35,"href":"https:\u002F\u002Fgithub.com\u002Fryancor\u002FCryptoWall_Analysis\u002Fblob\u002Fmaster\u002Ftor_site_checksum_finder.py#L47","anchorType":"LINK","userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_91":{"__typename":"Paragraph","id":"96c4f07b4619_91","name":"62eb","type":"PRE","href":null,"layout":null,"metadata":null,"text":"isDecompressed = CreateTextForRansomwareNote(0, 0, 0);\nif ( !isRequestSuccess || !isDecompressed )\n{\n   remaining_c2_data = 0;\n   while ( 1 )\n   {\n      isRequestSuccess = SecondRequestToC2(&rsa_key, \n                                &rsa_key_size, &remaining_c2_data);\n      if ( isRequestSuccess )\n         break;\n      sleep(0x1388u);\n}","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_92":{"__typename":"Paragraph","id":"96c4f07b4619_92","name":"6285","type":"P","href":null,"layout":null,"metadata":null,"text":"Once the text for the ransom note is decompressed, CryptoWall will place this note as an HTML, PNG, and TXT file inside of every directory the virus went through to encrypt documents. After this point, it will go through another round of requests to the I2P C2 servers to request another RSA 2048-bit public key. This key will be the one used for encryption. This strain will do a number of particular hardcoded hash checks on the data it gets back from the C2.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_93":{"__typename":"Paragraph","id":"96c4f07b4619_93","name":"90bb","type":"H3","href":null,"layout":null,"metadata":null,"text":"Decoding the Key","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_94":{"__typename":"Paragraph","id":"96c4f07b4619_94","name":"2aff","type":"P","href":null,"layout":null,"metadata":null,"text":"CryptoWall will use basic Win32 Crypto functions like CryptStringToBinaryA, CryptDecodeObjectEx, & CryptImportPublicKeyInfo to decode the RSA key returned. Then it will import the public key information into the provider which then returns a handle of the public key. After importing is finished, all stored data will go into a local type structure like this:","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":54,"end":74,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":76,"end":95,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":99,"end":123,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_95":{"__typename":"Paragraph","id":"96c4f07b4619_95","name":"a71d","type":"PRE","href":null,"layout":null,"metadata":null,"text":"struct _KeyData\n{\n   char *key;\n   int key_size;\n   BYTE *hash_data_1;\n   BYTE *hash_data_2;\n};","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_96":{"__typename":"Paragraph","id":"96c4f07b4619_96","name":"1aba","type":"PRE","href":null,"layout":null,"metadata":null,"text":"\u002F\u002F Gets used here at 0x00412B8C\nif ( ImportKey_And_EncryptKey(\n       cryptContext,\n       rsa_key,\n       rsa_key_size,\n       OriginalKey-\u003Ekey,\n       &OriginalKey-\u003Ekey_size,\n       &OriginalKey-\u003Ehash_data_1,\n       &OriginalKey-\u003Ehash_data_2) )\n{","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_97":{"__typename":"Paragraph","id":"96c4f07b4619_97","name":"0c3c","type":"P","href":null,"layout":null,"metadata":null,"text":"The next actions the malware takes is pretty basic for ransomware.. it will loop through every available drive, and use GetDriveTypeW to determine whether a disk drive is a removable, fixed, CD-ROM, RAM disk, or network drive. In our case, the C drive is the only open drive which falls under the category of DRIVE_FIXED. CryptoWall will only check if the drive is CD-ROM because it will not try to spread in that case.","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":120,"end":133,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":309,"end":320,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_98":{"__typename":"Paragraph","id":"96c4f07b4619_98","name":"e1f3","type":"PRE","href":null,"layout":null,"metadata":null,"text":".text:00412C1B      mov     ecx, [ebp+driver_letter]\n.text:00412C1E      push    ecx\n.text:00412C1F      call    GetDriveTypeW\n.text:00412C2C      cmp     eax, 5\n.text:00412C2F      jz      skip_drive","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_99":{"__typename":"Paragraph","id":"96c4f07b4619_99","name":"aaef","type":"P","href":null,"layout":null,"metadata":null,"text":"EAX holds the integer value returned from the function call which represents the type of drive associated with that number (5 == DRIVE_CDROM). You can find the documentation here.","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":0,"end":3,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"A","start":174,"end":178,"href":"https:\u002F\u002Fdocs.microsoft.com\u002Fen-us\u002Fwindows\u002Fwin32\u002Fapi\u002Ffileapi\u002Fnf-fileapi-getdrivetypew","anchorType":"LINK","userId":null,"linkMetadata":null},{"__typename":"Markup","type":"STRONG","start":129,"end":140,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_100":{"__typename":"Paragraph","id":"96c4f07b4619_100","name":"5c72","type":"P","href":null,"layout":null,"metadata":null,"text":"The exciting part is near as we are about to head over to where the malware duplicates the key it retrieved from our fake C2 server at address 0x00412C7A. What is happening here is pretty straight forward, and we can show in pseudo-code:","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":143,"end":153,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"A","start":117,"end":131,"href":"https:\u002F\u002Fgithub.com\u002Fryancor\u002FCryptoWall_Analysis\u002Fblob\u002Fmaster\u002Ffake_c2_i2p_server.py#L74","anchorType":"LINK","userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_101":{"__typename":"Paragraph","id":"96c4f07b4619_101","name":"d24b","type":"PRE","href":null,"layout":null,"metadata":null,"text":"if (OriginalKey)\n   DuplicatedKey = HeapAlloc(16)\n   if (DuplicatedKey)\n      CryptDuplicateKey(OriginalKey, 0, 0, DuplicatedKey)\n      memcpy(DuplicatedKey, OriginalKey, OrignalKey_size)\n      CryptDestroyKey(OriginalKey)","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_102":{"__typename":"Paragraph","id":"96c4f07b4619_102","name":"7349","type":"P","href":null,"layout":null,"metadata":null,"text":"Essentially CryptDuplicateKey is making an exact copy of a key and the state of the key. The DuplicatedKey variable ends up becoming a struct as we can see after the function call at 0x00412C7A, it gets used to store volume information about the drive its currently infecting.","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":12,"end":29,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":93,"end":106,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":183,"end":193,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_103":{"__typename":"Paragraph","id":"96c4f07b4619_103","name":"503c","type":"PRE","href":null,"layout":null,"metadata":null,"text":"GetVolumeInformation(driver_letter, DuplicatedKey + 20);\nif ( MoveDriverLetterToDupKeyStruct(driver_letter, \n   (DuplicatedKey + 16), 0) {\n    ...","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_104":{"__typename":"Paragraph","id":"96c4f07b4619_104","name":"fb31","type":"P","href":null,"layout":null,"metadata":null,"text":"That is why 24 bytes was used to allocate to the heap when creating this variable instead of 16. Now we can define our struct from what we know so far:","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_105":{"__typename":"Paragraph","id":"96c4f07b4619_105","name":"80d5","type":"PRE","href":null,"layout":null,"metadata":null,"text":"struct _DupKey\n{\n   const char *key;\n   int key_size;\n   DWORD unknown1;\n   DWORD unknown2;\n   char *drive_letter;\n   LPDWORD lpVolumeSerialNumber;\n   DWORD unknown3;\n};","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_106":{"__typename":"Paragraph","id":"96c4f07b4619_106","name":"9394","type":"PRE","href":null,"layout":null,"metadata":null,"text":"\u002F\u002F Now our code looks cleaner from above\nGetVolumeInformation(driver_letter, \n     &DuplicatedKey-\u003ElpVolumeSerialNumber);\nif ( MoveDriverLetterToDupKeyStruct(driver_letter, \n     &DuplicatedKey-\u003Edrive_letter, 0) {\n      ...","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_107":{"__typename":"Paragraph","id":"96c4f07b4619_107","name":"79d9","type":"H3","href":null,"layout":null,"metadata":null,"text":"Encrypting of Files","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_108":{"__typename":"Paragraph","id":"96c4f07b4619_108","name":"5503","type":"P","href":null,"layout":null,"metadata":null,"text":"After the malware is finished storing all pertinent information regarding how and where it will do its encryption, CryptoWall moves forward to the main encryption loop at 0x00416780.","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":171,"end":181,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"ImageMetadata:1*NmFku65YhExkVnukJSijiQ.png":{"__typename":"ImageMetadata","id":"1*NmFku65YhExkVnukJSijiQ.png","originalHeight":500,"originalWidth":230,"focusPercentX":null,"focusPercentY":null,"alt":null},"Paragraph:96c4f07b4619_109":{"__typename":"Paragraph","id":"96c4f07b4619_109","name":"7874","type":"IMG","href":null,"layout":"INSET_CENTER","metadata":{"__ref":"ImageMetadata:1*NmFku65YhExkVnukJSijiQ.png"},"text":"Encryption Loop Control Flow Graph","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_110":{"__typename":"Paragraph","id":"96c4f07b4619_110","name":"7251","type":"P","href":null,"layout":null,"metadata":null,"text":"As we can see, the control flow graph is fairly long in this subroutine, but nothing out of the ordinary when it comes to ransomware. A lot has to be done before encrypting files. At the start of this function, we see an immediate call to HeapAlloc to allocate 260 bytes of memory. We can automatically assume this will be used to store the file’s absolute path, as Windows OS only allows a max of 260 bytes. Upon success, there is also an allocation of virtual memory with a size of 592 bytes that will later be used as the file buffer contents. Then the API call FindFirstFileW uses this newly allocated buffer to store the first filename found on system. The pseudo-code below will explain the flow:","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":239,"end":248,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":565,"end":579,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_111":{"__typename":"Paragraph","id":"96c4f07b4619_111","name":"4dd0","type":"PRE","href":null,"layout":null,"metadata":null,"text":"lpFileName = Allocate260BlockOfMemory(); \u002F\u002F HeapAlloc\nif ( lpFileName )\n{\n   (*(wcscpy + 292))(lpFileName, driver_letter);\n   ...\n   lpFindFileData = AllocateSetMemory(592); \u002F\u002F VirtualAlloc\n   if ( lpFindFileData )\n   {\n      hFile = (*(FindFirstFileW + 504))(lpFileName, lpFindFileData);\n      if ( hFile != 0xFFFFFFFF )\n      {\n        v29 = 0;\n        do \n        {\n          \u002F\u002F Continue down to further file actions","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_112":{"__typename":"Paragraph","id":"96c4f07b4619_112","name":"a8d1","type":"P","href":null,"layout":null,"metadata":null,"text":"Before the malware opens up the first victim file, it needs to make sure the file and file extension themselves are not part of their hardcoded blacklist of bytes. It does this check using a simple CRC-32 hash check. It will take the filename, and extension; compress it down to a DWORD, then compare that DWORD to a list of bytes that live in the .data section.","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":348,"end":353,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"ImageMetadata:1*ReeUNefaq9G5FUOYWLip0g.png":{"__typename":"ImageMetadata","id":"1*ReeUNefaq9G5FUOYWLip0g.png","originalHeight":530,"originalWidth":1056,"focusPercentX":null,"focusPercentY":null,"alt":null},"Paragraph:96c4f07b4619_113":{"__typename":"Paragraph","id":"96c4f07b4619_113","name":"47be","type":"IMG","href":null,"layout":"INSET_CENTER","metadata":{"__ref":"ImageMetadata:1*ReeUNefaq9G5FUOYWLip0g.png"},"text":"","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_114":{"__typename":"Paragraph","id":"96c4f07b4619_114","name":"8d01","type":"P","href":null,"layout":null,"metadata":null,"text":"To see how the algorithm works, I reversed it to python code, and wrote my own file checker.","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"A","start":79,"end":91,"href":"https:\u002F\u002Fgithub.com\u002Fryancor\u002FCryptoWall_Analysis\u002Fblob\u002Fmaster\u002Ftor_site_checksum_finder.py#L69","anchorType":"LINK","userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_115":{"__typename":"Paragraph","id":"96c4f07b4619_115","name":"52c9","type":"PRE","href":null,"layout":null,"metadata":null,"text":"➜  python tor_site_checksum_finder.py --check-file-ext \"dll\"\n[!] Searching PE sections for compressed .data\n[!] Searching PE sections for compressed extension .data\n\n[-] '.dll' is not a valid file extension for Cryptowall\n\n➜  python tor_site_checksum_finder.py --check-file-ext \"py\"\n[!] Searching PE sections for compressed .data\n[!] Searching PE sections for compressed extension .data\n\n[+] '.py' is a valid file extension for Cryptowall","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":0,"end":438,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_116":{"__typename":"Paragraph","id":"96c4f07b4619_116","name":"1726","type":"P","href":null,"layout":null,"metadata":null,"text":"Now we can easily tell what type of files CryptoWall will attack. Obvious extensions like .dll, .exe, and .sys is a very common file type for ransomware to avoid.","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":90,"end":94,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":96,"end":100,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":106,"end":110,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"ImageMetadata:1*S_SE2QCFFUs9NxiVSBAmiA.png":{"__typename":"ImageMetadata","id":"1*S_SE2QCFFUs9NxiVSBAmiA.png","originalHeight":516,"originalWidth":1258,"focusPercentX":null,"focusPercentY":null,"alt":null},"Paragraph:96c4f07b4619_117":{"__typename":"Paragraph","id":"96c4f07b4619_117","name":"e25f","type":"IMG","href":null,"layout":"INSET_CENTER","metadata":{"__ref":"ImageMetadata:1*S_SE2QCFFUs9NxiVSBAmiA.png"},"text":"","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_118":{"__typename":"Paragraph","id":"96c4f07b4619_118","name":"5c70","type":"P","href":null,"layout":null,"metadata":null,"text":"If the file passes these two checks, then it moves on over to the last part of the equation; the actual encryption located at 0x00412260. We can skip the first few function calls as they are not pertinent to what is about to happen. If you take a look at address 0x00412358, there is a subroutine that takes in three parameters; a file handle, our DuplicateKeyStruct, and a file size. Stepping into the function, we can immediately tell what is happening:","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":126,"end":136,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":263,"end":273,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_119":{"__typename":"Paragraph","id":"96c4f07b4619_119","name":"650e","type":"PRE","href":null,"layout":null,"metadata":null,"text":"if(ReadFileA(hFile, lpBuffer, \n          DuplicateKeyStruct-\u003Efile_hash_size, \n          &lpNumberOfBytesRead, 0) && lpNumberOfBytesRead) ==\n   DuplicateKeyStruct-\u003Efile_hash_size\n{\n     if(memcmp(lpBuffer, DuplicateKeyStruct-\u003Efile_hash, \n               DuplicateKeyStruct-\u003Efile_hash_size))\n     {    \n         isCompare = 1;\n     }\n}","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_120":{"__typename":"Paragraph","id":"96c4f07b4619_120","name":"0399","type":"P","href":null,"layout":null,"metadata":null,"text":"The pseudo-code is telling us that if an MD5 hash of the file is present in the header, then its already been encrypted. If this function returns isCompared to be true, then CryptoWall moves on to another file and will leave this one alone. If it returns false from the Compare16ByteHeader() function call, the malware will append to the file’s extension by using a simple algorithm to generate a three lettered string to place at the end. The generation takes a timestamp, uses it as a seed, and takes that seed to then mod the first three bytes by 26 then added to 97.","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":146,"end":156,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":270,"end":291,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_121":{"__typename":"Paragraph","id":"96c4f07b4619_121","name":"8c1d","type":"PRE","href":null,"layout":null,"metadata":null,"text":"*(v8 + 2 * i) = DataSizeBasedOnSeed(0, 0x3E8u) % 26 + 97;","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_122":{"__typename":"Paragraph","id":"96c4f07b4619_122","name":"50b9","type":"P","href":null,"layout":null,"metadata":null,"text":"This is essentially a rotation cipher, where you have a numerical variable checked by a modulate to ensure it doesn’t go past alphanumeric values, then the addition to 97 rotates the ordinal 45 times. As an example, if we have the letter ‘A’, then after this cipher, it ends up becoming an ’n’. In conclusion, if the victim file is named hello.py, this subroutine will rename it to hello.py.3xy.","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":238,"end":241,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":290,"end":293,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":338,"end":346,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":382,"end":394,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_123":{"__typename":"Paragraph","id":"96c4f07b4619_123","name":"e897","type":"P","href":null,"layout":null,"metadata":null,"text":"Next, around address 0x004123F0, the generation of an AES-256 key begins with another call to Win32’s CryptAcquireContextW. The phProv handler gets passed over to be used in CryptGenKey and CryptGetKeyParam.","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":21,"end":31,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":102,"end":122,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":128,"end":134,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":174,"end":185,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":190,"end":206,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_124":{"__typename":"Paragraph","id":"96c4f07b4619_124","name":"8baa","type":"PRE","href":null,"layout":null,"metadata":null,"text":"if ( CryptGenKey(hProv, 0x6610, 1, &hKey) ):\n    pbData_1 = 0;\n    pdwDataLen_1 = 4;\n    if ( CryptGetKeyParam(hKey, 8, &pbData_1, &pdwDataLen_1, 0, 4)","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_125":{"__typename":"Paragraph","id":"96c4f07b4619_125","name":"0bab","type":"P","href":null,"layout":null,"metadata":null,"text":"The hexadecimal value of 0x6610 shown above tells us that the generated key is going to be AES-256 as seen in MS-DOCS. Once the hKey address to which the function copies the handle of the newly generated key is populated, CryptGetKeyParam will be used to make the key and transfer it into pbData; a pointer to a buffer that receives the data. One last call in this function we labeled as GenerateAESKey() gets called which is CryptExportKey. This will take the handle to the key to be exported and pass it the function, and the function returns a key BLOB. The second parameter of the GenerateAESKey() will hold the aes_key.","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":25,"end":31,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":128,"end":132,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":222,"end":238,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":289,"end":295,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":388,"end":404,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":426,"end":440,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":585,"end":601,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":616,"end":623,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"A","start":110,"end":117,"href":"https:\u002F\u002Fdocs.microsoft.com\u002Fen-us\u002Fwindows\u002Fwin32\u002Fseccrypto\u002Falg-id","anchorType":"LINK","userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"ImageMetadata:1*ikExErHFMPukGGP-Bw0g-w.png":{"__typename":"ImageMetadata","id":"1*ikExErHFMPukGGP-Bw0g-w.png","originalHeight":956,"originalWidth":1506,"focusPercentX":null,"focusPercentY":null,"alt":null},"Paragraph:96c4f07b4619_126":{"__typename":"Paragraph","id":"96c4f07b4619_126","name":"9756","type":"IMG","href":null,"layout":"INSET_CENTER","metadata":{"__ref":"ImageMetadata:1*ikExErHFMPukGGP-Bw0g-w.png"},"text":"","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_127":{"__typename":"Paragraph","id":"96c4f07b4619_127","name":"0352","type":"P","href":null,"layout":null,"metadata":null,"text":"The next call is one of the most important ones to understand how eventually we can decrypt the files that CryptoWall infected. EncryptAESKey() uses the pointer to DuplicateKeyStruct-\u003Ersa_key to encrypt our AES key into a 256 byte blob. Exploring inside this function call is fairly simple; it uses CryptDuplicateKey and CryptEncrypt to take our public RSA 2048-bit key from earlier, our newly generated AES key to duplicate both keys to save for later, and encrypt the buffer. The fifth parameter is our data out in this case and once the function returns, what we labeled as encrypted_AESkey_buffer will hold our RSA encrypted key.","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":128,"end":143,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":164,"end":191,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":299,"end":316,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":321,"end":333,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":577,"end":600,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_128":{"__typename":"Paragraph","id":"96c4f07b4619_128","name":"1e9e","type":"P","href":null,"layout":null,"metadata":null,"text":"At around address 004124A5, you will see two calls to WriteFileA. The first call will move the 16 byte MD5 hash at the top of the victim file, and the second call will write out the 256 bytes of encrypted key buffer right below the hash.","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":18,"end":26,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":54,"end":64,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":95,"end":97,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":182,"end":185,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"ImageMetadata:1*KWfCbeOGpctfMHoNtyI-Fw.png":{"__typename":"ImageMetadata","id":"1*KWfCbeOGpctfMHoNtyI-Fw.png","originalHeight":1418,"originalWidth":2084,"focusPercentX":null,"focusPercentY":null,"alt":null},"Paragraph:96c4f07b4619_129":{"__typename":"Paragraph","id":"96c4f07b4619_129","name":"78f9","type":"IMG","href":null,"layout":"INSET_CENTER","metadata":{"__ref":"ImageMetadata:1*KWfCbeOGpctfMHoNtyI-Fw.png"},"text":"Screenshot shows 128 byte encrypted key buffer, but it was a copy mistake; Supposed to be 256 bytes of encrypted key text.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_130":{"__typename":"Paragraph","id":"96c4f07b4619_130","name":"666d","type":"P","href":null,"layout":null,"metadata":null,"text":"The picture above shows what an example file will look like up until this stage of the infection. The plaintext is still intact, but the headers now hold the hash of the file and the encrypted AES key used to encrypt the plaintext in the next phase. ReadFileA will shortly get called at 0x0041261B, which will read out everything after the header of the file to start the encryption process.","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":250,"end":259,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":287,"end":297,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"ImageMetadata:1*HN797MwKNLPqrF95p6FYHg.png":{"__typename":"ImageMetadata","id":"1*HN797MwKNLPqrF95p6FYHg.png","originalHeight":942,"originalWidth":1258,"focusPercentX":null,"focusPercentY":null,"alt":null},"Paragraph:96c4f07b4619_131":{"__typename":"Paragraph","id":"96c4f07b4619_131","name":"11de","type":"IMG","href":null,"layout":"INSET_CENTER","metadata":{"__ref":"ImageMetadata:1*HN797MwKNLPqrF95p6FYHg.png"},"text":"","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_132":{"__typename":"Paragraph","id":"96c4f07b4619_132","name":"f535","type":"P","href":null,"layout":null,"metadata":null,"text":"Now that 272 bytes belong to the header, anything after that we can assume is free range for the next function to deal with. We don’t really need to deep dive too much into what DuplicateAESKey_And_Encrypt() does as it is pretty self explanatory. The file contents are encrypted using the already generated AES key from above that was passed into the HCRYPTKEY *hKey variable. The sixth parameter of this function is the pointer which will contain the encrypted buffer. At this point the ransomware will replace the plaintext with an encrypted blob, and the AES key is free’d from memory.","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":9,"end":12,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":178,"end":207,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":351,"end":366,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"ImageMetadata:1*vmAqzukEyLCdGVe1pmIgHQ.png":{"__typename":"ImageMetadata","id":"1*vmAqzukEyLCdGVe1pmIgHQ.png","originalHeight":216,"originalWidth":2090,"focusPercentX":null,"focusPercentY":null,"alt":null},"Paragraph:96c4f07b4619_133":{"__typename":"Paragraph","id":"96c4f07b4619_133","name":"957d","type":"IMG","href":null,"layout":"INSET_CENTER","metadata":{"__ref":"ImageMetadata:1*vmAqzukEyLCdGVe1pmIgHQ.png"},"text":"Example of a fully encrypted file","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_134":{"__typename":"Paragraph","id":"96c4f07b4619_134","name":"6df3","type":"P","href":null,"layout":null,"metadata":null,"text":"After the file is finished being processed, the loop will continue until every allow listed file type on disk is encrypted.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_135":{"__typename":"Paragraph","id":"96c4f07b4619_135","name":"780e","type":"H3","href":null,"layout":null,"metadata":null,"text":"Decrypting Victim Files","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_136":{"__typename":"Paragraph","id":"96c4f07b4619_136","name":"976d","type":"P","href":null,"layout":null,"metadata":null,"text":"Unfortunately in this case, it is only possible to write a decryption algorithm if you know the private key used which is generated on the C2 side. This is going to be a two step process as in order to decrypt the file contents, we need to decrypt the AES key that has been RSA encrypted.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_137":{"__typename":"Paragraph","id":"96c4f07b4619_137","name":"a904","type":"P","href":null,"layout":null,"metadata":null,"text":"The fake C2 server I wrote also includes an area where a private key is generated at the same time that the public key is generated. So in my case, all encrypted files on my VM are able to be decrypted.","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"A","start":4,"end":18,"href":"https:\u002F\u002Fgithub.com\u002Fryancor\u002FCryptoWall_Analysis\u002Fblob\u002Fmaster\u002Ffake_c2_i2p_server.py#L37","anchorType":"LINK","userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_138":{"__typename":"Paragraph","id":"96c4f07b4619_138","name":"dd35","type":"P","href":null,"layout":null,"metadata":null,"text":"Side Note: In order to run this C2 server, you have to place the malware’s hardcoded I2P addresses in \u002Fetc\u002Fhosts on Windows. Then make sure the server has started before executing the malware as there will be a lot of initial verification going back and forth between the malware and ‘C2’ to ensure its legitimacy. Your file should look like this:","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":102,"end":112,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"STRONG","start":0,"end":10,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_139":{"__typename":"Paragraph","id":"96c4f07b4619_139","name":"b477","type":"PRE","href":null,"layout":null,"metadata":null,"text":"127.0.0.1 proxy1-1-1.i2p\n127.0.0.1 proxy2-2-2.i2p","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_140":{"__typename":"Paragraph","id":"96c4f07b4619_140","name":"6511","type":"P","href":null,"layout":null,"metadata":null,"text":"Another reason why we un the fake C2 server before executing the malware is so we don’t end up in some dead lock state. The output from our server will look something like this:","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_141":{"__typename":"Paragraph","id":"96c4f07b4619_141","name":"a4de","type":"PRE","href":null,"layout":null,"metadata":null,"text":"C:\\CryptoWall\\\u003E python.exe fake_c2_i2p_server.py\n\n* Serving Flask app \"fake_c2_server\" (lazy loading)\n127.0.0.1 - - [31\u002FMar\u002F2020 15:10:06] \"�[33mGET \u002F HTTP\u002F1.1�[0m\" 404 -\n\nData Received from CryptoWall Binary:\n------------------------------\n[!] Found URI Header: 93n14chwb3qpm\n[+] Created key from URI: 13349bchmnpqw\n[!] Found ciphertext: ff977e974ca21f20a160ebb12bd99bd616d3690c3f4358e2b8168f54929728a189c8797bfa12cfa031ee9c2fe02e31f0762178b3b640837e34d18407ecbc33\n[+] Recovered plaintext: b'{1|crypt1|C6B359277232C8E248AFD89C98E96D65|0|2|1||55.59.84.254}'\n\n[+] Sending encrypted data blob back to cryptowall process\n127.0.0.1 - - [31\u002FMar\u002F2020 15:11:52] \"�[37mPOST \u002F93n14chwb3qpm HTTP\u002F1.1�[0m\" 200","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":0,"end":698,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_142":{"__typename":"Paragraph","id":"96c4f07b4619_142","name":"87bf","type":"P","href":null,"layout":null,"metadata":null,"text":"Step by step, the first thing we have to do is write a program that imports the private key file. I used C++ for this portion because for the life of me I could not figure out how to mimic the CryptDecodeObjectEx API call that decodes the key in a X509_ASN_ENCODING and PKCS_7_ASN_ENCODING format. Once you have the key blob from this function, we can use this function as the malware does and call CryptImportKey, but this time it is a private key and not a public key ;). Since the first 16 bytes of the victim file contains the MD5 hash of the unencrypted file, we know we can skip that part and focus on the 256 bytes after that part of the header. The block size is going be 256 bytes and AES offset will be 272, since that will be the last byte needed in the cryptographic equation. Once we get the blob, it is now okay to call CryptDecrypt and print out the 32 byte key blob:","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":193,"end":212,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":248,"end":265,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":270,"end":289,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":399,"end":413,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":490,"end":492,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":612,"end":615,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":680,"end":683,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":713,"end":716,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":834,"end":846,"href":null,"anchorType":null,"userId":null,"linkMetadata":null},{"__typename":"Markup","type":"CODE","start":865,"end":867,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_143":{"__typename":"Paragraph","id":"96c4f07b4619_143","name":"39cf","type":"PRE","href":null,"layout":null,"metadata":null,"text":"if (!CryptDecrypt(hKey, NULL, FALSE, 0, keyBuffer, &bytesRead))  \n{      \n   printf(\"[-] CryptDecrypt failed with error 0x%.8X\\n\",\n     GetLastError());      \n   return FALSE;  \n}   ","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_144":{"__typename":"Paragraph","id":"96c4f07b4619_144","name":"00c7","type":"PRE","href":null,"layout":null,"metadata":null,"text":"printf(\"[+] Decrypted AES Key =\u003E \");  \nfor(int i = 0; i \u003C bytesRead; i++)  \n{    \n   printf(\"%02x\", keyBuffer[i]);  \n}","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_145":{"__typename":"Paragraph","id":"96c4f07b4619_145","name":"f6e9","type":"P","href":null,"layout":null,"metadata":null,"text":"You can find the whole script here. Now that we are half way there and we have an AES key, the last thing to do is write a simple python script that will take that key \u002F encrypted file and decrypt all remaining contents of it after the 272nd byte.","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"A","start":30,"end":34,"href":"https:\u002F\u002Fgithub.com\u002Fryancor\u002FCryptoWall_Analysis\u002Fblob\u002Fmaster\u002FIn_Progress\u002Fdecrypt_aes_key.cpp","anchorType":"LINK","userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_146":{"__typename":"Paragraph","id":"96c4f07b4619_146","name":"671f","type":"PRE","href":null,"layout":null,"metadata":null,"text":"enc_data_remainder = file_data[272:]\ncipher = AES.new(aes_key, AES.MODE_ECB)        \nplaintext = cipher.decrypt(enc_data_remainder)","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_147":{"__typename":"Paragraph","id":"96c4f07b4619_147","name":"cd5f","type":"P","href":null,"layout":null,"metadata":null,"text":"The script to perform this action is in the same folder on Github. If you want to see how the whole thing looks from start to finish, it will go like this:","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"A","start":59,"end":65,"href":"https:\u002F\u002Fgithub.com\u002Fryancor\u002FCryptoWall_Analysis\u002Fblob\u002Fmaster\u002FIn_Progress\u002Fdecrypt_file.py","anchorType":"LINK","userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_148":{"__typename":"Paragraph","id":"96c4f07b4619_148","name":"3e51","type":"PRE","href":null,"layout":null,"metadata":null,"text":"➜  decrypt_aes_key.exe priv_key_1.pem loveme.txt\n[+] Initialized crypto provider\n[+] Successfully imported private key from PEM file\n[!] Extracted encrypted AES keys from file\n[+] Decrypted AES Key =\u003E 08020000106600002000000040b4247954af27637ce4f7fabfe1ccfc6cd55fc724caa840f82848ea4800b320\n[+] Successfully decrypted key from file\n\n➜  python decrypt_file.py loveme.txt 40b4247954af27637ce4f7fabfe1ccfc6cd55fc724caa840f82848ea4800b320\n[+] Decrypting file\n[+] Found hash header =\u003E e91049c35401f2b4a1a131bd992df7a6\n[+] Plaintext from file: b'\"hello world\" \\r\\n\\'","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"CODE","start":0,"end":559,"href":null,"anchorType":null,"userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_149":{"__typename":"Paragraph","id":"96c4f07b4619_149","name":"5f8d","type":"H3","href":null,"layout":null,"metadata":null,"text":"Conclusion","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_150":{"__typename":"Paragraph","id":"96c4f07b4619_150","name":"6486","type":"P","href":null,"layout":null,"metadata":null,"text":"Overall this was one of the biggest leading cyber threats back in 2013, and the threat actors behind this malicious virus have shown their years of experience when it comes to engineering a ransomware such as this.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_151":{"__typename":"Paragraph","id":"96c4f07b4619_151","name":"a4e6","type":"P","href":null,"layout":null,"metadata":null,"text":"Although this ransomware is over 6 years old, it still fascinated me so much to reverse engineer this virus that I wanted to share all the tooling I have wrote for it. Every step of the way their was another challenge to overcome, whether it was knowing what the malware expected the encrypted payload to look like coming back from the C2, figuring out how to decrypt their C2 I2P servers using RC4, decompressing the ransomware note using some hard to mimic LZNT1 algorithm, or even understanding their obscure way of generating domain URI paths… it was all around a gigantic puzzle for a completionist engineer like myself.","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_152":{"__typename":"Paragraph","id":"96c4f07b4619_152","name":"63ec","type":"P","href":null,"layout":null,"metadata":null,"text":"Here is the repository that contains all the programs I wrote that helped me research CryptoWall.","hasDropCap":null,"dropCapImage":null,"markups":[{"__typename":"Markup","type":"A","start":86,"end":96,"href":"https:\u002F\u002Fgithub.com\u002Fryancor\u002FCryptoWall_Analysis","anchorType":"LINK","userId":null,"linkMetadata":null}],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_153":{"__typename":"Paragraph","id":"96c4f07b4619_153","name":"908f","type":"P","href":null,"layout":null,"metadata":null,"text":"Thank you for following along! I hope you enjoyed it as much as I did. If you have any questions on this article or where to find the challenge, please DM me at my Instagram: @hackersclub or Twitter: @ringoware","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"Paragraph:96c4f07b4619_154":{"__typename":"Paragraph","id":"96c4f07b4619_154","name":"8985","type":"P","href":null,"layout":null,"metadata":null,"text":"Happy Hunting :)","hasDropCap":null,"dropCapImage":null,"markups":[],"codeBlockMetadata":null,"iframe":null,"mixtapeMetadata":null},"UserViewerEdge:userId:239d5a05aa69-viewerId:lo_f1160abc5dcf":{"__typename":"UserViewerEdge","id":"userId:239d5a05aa69-viewerId:lo_f1160abc5dcf","isMuting":false},"PostViewerEdge:postId:843f86055c7f-viewerId:lo_f1160abc5dcf":{"__typename":"PostViewerEdge","shouldIndexPostForExternalSearch":true,"id":"postId:843f86055c7f-viewerId:lo_f1160abc5dcf"},"Tag:programming":{"__typename":"Tag","id":"programming","displayTitle":"Programming","normalizedTagSlug":"programming"},"Tag:reverse-engineering":{"__typename":"Tag","id":"reverse-engineering","displayTitle":"Reverse Engineering","normalizedTagSlug":"reverse-engineering"},"Tag:malware":{"__typename":"Tag","id":"malware","displayTitle":"Malware","normalizedTagSlug":"malware"},"Tag:computer-science":{"__typename":"Tag","id":"computer-science","displayTitle":"Computer Science","normalizedTagSlug":"computer-science"},"Tag:cybersecurity":{"__typename":"Tag","id":"cybersecurity","displayTitle":"Cybersecurity","normalizedTagSlug":"cybersecurity"},"Post:843f86055c7f":{"__typename":"Post","id":"843f86055c7f","collection":null,"content({\"postMeteringOptions\":{}})":{"__typename":"PostContent","isLockedPreviewOnly":false,"bodyModel":{"__typename":"RichText","sections":[{"__typename":"Section","name":"e5d4","startIndex":0,"textLayout":null,"imageLayout":null,"backgroundImage":null,"videoLayout":null,"backgroundVideo":null}],"paragraphs":[{"__ref":"Paragraph:96c4f07b4619_0"},{"__ref":"Paragraph:96c4f07b4619_1"},{"__ref":"Paragraph:96c4f07b4619_2"},{"__ref":"Paragraph:96c4f07b4619_3"},{"__ref":"Paragraph:96c4f07b4619_4"},{"__ref":"Paragraph:96c4f07b4619_5"},{"__ref":"Paragraph:96c4f07b4619_6"},{"__ref":"Paragraph:96c4f07b4619_7"},{"__ref":"Paragraph:96c4f07b4619_8"},{"__ref":"Paragraph:96c4f07b4619_9"},{"__ref":"Paragraph:96c4f07b4619_10"},{"__ref":"Paragraph:96c4f07b4619_11"},{"__ref":"Paragraph:96c4f07b4619_12"},{"__ref":"Paragraph:96c4f07b4619_13"},{"__ref":"Paragraph:96c4f07b4619_14"},{"__ref":"Paragraph:96c4f07b4619_15"},{"__ref":"Paragraph:96c4f07b4619_16"},{"__ref":"Paragraph:96c4f07b4619_17"},{"__ref":"Paragraph:96c4f07b4619_18"},{"__ref":"Paragraph:96c4f07b4619_19"},{"__ref":"Paragraph:96c4f07b4619_20"},{"__ref":"Paragraph:96c4f07b4619_21"},{"__ref":"Paragraph:96c4f07b4619_22"},{"__ref":"Paragraph:96c4f07b4619_23"},{"__ref":"Paragraph:96c4f07b4619_24"},{"__ref":"Paragraph:96c4f07b4619_25"},{"__ref":"Paragraph:96c4f07b4619_26"},{"__ref":"Paragraph:96c4f07b4619_27"},{"__ref":"Paragraph:96c4f07b4619_28"},{"__ref":"Paragraph:96c4f07b4619_29"},{"__ref":"Paragraph:96c4f07b4619_30"},{"__ref":"Paragraph:96c4f07b4619_31"},{"__ref":"Paragraph:96c4f07b4619_32"},{"__ref":"Paragraph:96c4f07b4619_33"},{"__ref":"Paragraph:96c4f07b4619_34"},{"__ref":"Paragraph:96c4f07b4619_35"},{"__ref":"Paragraph:96c4f07b4619_36"},{"__ref":"Paragraph:96c4f07b4619_37"},{"__ref":"Paragraph:96c4f07b4619_38"},{"__ref":"Paragraph:96c4f07b4619_39"},{"__ref":"Paragraph:96c4f07b4619_40"},{"__ref":"Paragraph:96c4f07b4619_41"},{"__ref":"Paragraph:96c4f07b4619_42"},{"__ref":"Paragraph:96c4f07b4619_43"},{"__ref":"Paragraph:96c4f07b4619_44"},{"__ref":"Paragraph:96c4f07b4619_45"},{"__ref":"Paragraph:96c4f07b4619_46"},{"__ref":"Paragraph:96c4f07b4619_47"},{"__ref":"Paragraph:96c4f07b4619_48"},{"__ref":"Paragraph:96c4f07b4619_49"},{"__ref":"Paragraph:96c4f07b4619_50"},{"__ref":"Paragraph:96c4f07b4619_51"},{"__ref":"Paragraph:96c4f07b4619_52"},{"__ref":"Paragraph:96c4f07b4619_53"},{"__ref":"Paragraph:96c4f07b4619_54"},{"__ref":"Paragraph:96c4f07b4619_55"},{"__ref":"Paragraph:96c4f07b4619_56"},{"__ref":"Paragraph:96c4f07b4619_57"},{"__ref":"Paragraph:96c4f07b4619_58"},{"__ref":"Paragraph:96c4f07b4619_59"},{"__ref":"Paragraph:96c4f07b4619_60"},{"__ref":"Paragraph:96c4f07b4619_61"},{"__ref":"Paragraph:96c4f07b4619_62"},{"__ref":"Paragraph:96c4f07b4619_63"},{"__ref":"Paragraph:96c4f07b4619_64"},{"__ref":"Paragraph:96c4f07b4619_65"},{"__ref":"Paragraph:96c4f07b4619_66"},{"__ref":"Paragraph:96c4f07b4619_67"},{"__ref":"Paragraph:96c4f07b4619_68"},{"__ref":"Paragraph:96c4f07b4619_69"},{"__ref":"Paragraph:96c4f07b4619_70"},{"__ref":"Paragraph:96c4f07b4619_71"},{"__ref":"Paragraph:96c4f07b4619_72"},{"__ref":"Paragraph:96c4f07b4619_73"},{"__ref":"Paragraph:96c4f07b4619_74"},{"__ref":"Paragraph:96c4f07b4619_75"},{"__ref":"Paragraph:96c4f07b4619_76"},{"__ref":"Paragraph:96c4f07b4619_77"},{"__ref":"Paragraph:96c4f07b4619_78"},{"__ref":"Paragraph:96c4f07b4619_79"},{"__ref":"Paragraph:96c4f07b4619_80"},{"__ref":"Paragraph:96c4f07b4619_81"},{"__ref":"Paragraph:96c4f07b4619_82"},{"__ref":"Paragraph:96c4f07b4619_83"},{"__ref":"Paragraph:96c4f07b4619_84"},{"__ref":"Paragraph:96c4f07b4619_85"},{"__ref":"Paragraph:96c4f07b4619_86"},{"__ref":"Paragraph:96c4f07b4619_87"},{"__ref":"Paragraph:96c4f07b4619_88"},{"__ref":"Paragraph:96c4f07b4619_89"},{"__ref":"Paragraph:96c4f07b4619_90"},{"__ref":"Paragraph:96c4f07b4619_91"},{"__ref":"Paragraph:96c4f07b4619_92"},{"__ref":"Paragraph:96c4f07b4619_93"},{"__ref":"Paragraph:96c4f07b4619_94"},{"__ref":"Paragraph:96c4f07b4619_95"},{"__ref":"Paragraph:96c4f07b4619_96"},{"__ref":"Paragraph:96c4f07b4619_97"},{"__ref":"Paragraph:96c4f07b4619_98"},{"__ref":"Paragraph:96c4f07b4619_99"},{"__ref":"Paragraph:96c4f07b4619_100"},{"__ref":"Paragraph:96c4f07b4619_101"},{"__ref":"Paragraph:96c4f07b4619_102"},{"__ref":"Paragraph:96c4f07b4619_103"},{"__ref":"Paragraph:96c4f07b4619_104"},{"__ref":"Paragraph:96c4f07b4619_105"},{"__ref":"Paragraph:96c4f07b4619_106"},{"__ref":"Paragraph:96c4f07b4619_107"},{"__ref":"Paragraph:96c4f07b4619_108"},{"__ref":"Paragraph:96c4f07b4619_109"},{"__ref":"Paragraph:96c4f07b4619_110"},{"__ref":"Paragraph:96c4f07b4619_111"},{"__ref":"Paragraph:96c4f07b4619_112"},{"__ref":"Paragraph:96c4f07b4619_113"},{"__ref":"Paragraph:96c4f07b4619_114"},{"__ref":"Paragraph:96c4f07b4619_115"},{"__ref":"Paragraph:96c4f07b4619_116"},{"__ref":"Paragraph:96c4f07b4619_117"},{"__ref":"Paragraph:96c4f07b4619_118"},{"__ref":"Paragraph:96c4f07b4619_119"},{"__ref":"Paragraph:96c4f07b4619_120"},{"__ref":"Paragraph:96c4f07b4619_121"},{"__ref":"Paragraph:96c4f07b4619_122"},{"__ref":"Paragraph:96c4f07b4619_123"},{"__ref":"Paragraph:96c4f07b4619_124"},{"__ref":"Paragraph:96c4f07b4619_125"},{"__ref":"Paragraph:96c4f07b4619_126"},{"__ref":"Paragraph:96c4f07b4619_127"},{"__ref":"Paragraph:96c4f07b4619_128"},{"__ref":"Paragraph:96c4f07b4619_129"},{"__ref":"Paragraph:96c4f07b4619_130"},{"__ref":"Paragraph:96c4f07b4619_131"},{"__ref":"Paragraph:96c4f07b4619_132"},{"__ref":"Paragraph:96c4f07b4619_133"},{"__ref":"Paragraph:96c4f07b4619_134"},{"__ref":"Paragraph:96c4f07b4619_135"},{"__ref":"Paragraph:96c4f07b4619_136"},{"__ref":"Paragraph:96c4f07b4619_137"},{"__ref":"Paragraph:96c4f07b4619_138"},{"__ref":"Paragraph:96c4f07b4619_139"},{"__ref":"Paragraph:96c4f07b4619_140"},{"__ref":"Paragraph:96c4f07b4619_141"},{"__ref":"Paragraph:96c4f07b4619_142"},{"__ref":"Paragraph:96c4f07b4619_143"},{"__ref":"Paragraph:96c4f07b4619_144"},{"__ref":"Paragraph:96c4f07b4619_145"},{"__ref":"Paragraph:96c4f07b4619_146"},{"__ref":"Paragraph:96c4f07b4619_147"},{"__ref":"Paragraph:96c4f07b4619_148"},{"__ref":"Paragraph:96c4f07b4619_149"},{"__ref":"Paragraph:96c4f07b4619_150"},{"__ref":"Paragraph:96c4f07b4619_151"},{"__ref":"Paragraph:96c4f07b4619_152"},{"__ref":"Paragraph:96c4f07b4619_153"},{"__ref":"Paragraph:96c4f07b4619_154"}]},"validatedShareKey":"","shareKeyCreator":null},"creator":{"__ref":"User:239d5a05aa69"},"inResponseToEntityType":null,"isLocked":false,"isMarkedPaywallOnly":false,"lockedSource":"LOCKED_POST_SOURCE_NONE","mediumUrl":"https:\u002F\u002Fryancor.medium.com\u002Fgenetic-analysis-of-cryptowall-ransomware-843f86055c7f","primaryTopic":null,"topics":[],"isPublished":true,"latestPublishedVersion":"96c4f07b4619","visibility":"PUBLIC","postResponses":{"__typename":"PostResponses","count":1},"clapCount":114,"allowResponses":true,"isLimitedState":false,"title":"Genetic Analysis of CryptoWall Ransomware","isSeries":false,"sequence":null,"uniqueSlug":"genetic-analysis-of-cryptowall-ransomware-843f86055c7f","socialTitle":"","socialDek":"","canonicalUrl":"","metaDescription":"","latestPublishedAt":1606195591073,"readingTime":25.03207547169811,"previewContent":{"__typename":"PreviewContent","subtitle":"A strain of a Crowti ransomware emerged, the variant known as CryptoWall, was spotted by researchers in early 2013. Ransomware by nature…"},"previewImage":{"__ref":"ImageMetadata:1*ZCgluueIqRbBgNEjrvCeUQ.png"},"isShortform":false,"seoTitle":"","firstPublishedAt":1606154218160,"updatedAt":1639678639820,"shortformType":"SHORTFORM_TYPE_LINK","seoDescription":"","viewerEdge":{"__ref":"PostViewerEdge:postId:843f86055c7f-viewerId:lo_f1160abc5dcf"},"isSuspended":false,"license":"ALL_RIGHTS_RESERVED","tags":[{"__ref":"Tag:programming"},{"__ref":"Tag:reverse-engineering"},{"__ref":"Tag:malware"},{"__ref":"Tag:computer-science"},{"__ref":"Tag:cybersecurity"}],"isNewsletter":false,"statusForCollection":null,"pendingCollection":null,"detectedLanguage":"en","wordCount":6130,"layerCake":4,"responsesLocked":false}}</script><script>window.__MIDDLEWARE_STATE__={"session":{"xsrf":""},"cache":{"cacheStatus":"MISS"}}</script><script src="https://cdn-client.medium.com/lite/static/js/manifest.48bdf878.js"></script><script src="https://cdn-client.medium.com/lite/static/js/9865.1496d74a.js"></script><script src="https://cdn-client.medium.com/lite/static/js/main.872afbe3.js"></script><script src="https://cdn-client.medium.com/lite/static/js/instrumentation.d9108df7.chunk.js"></script>
<script src="https://cdn-client.medium.com/lite/static/js/reporting.ff22a7a5.chunk.js"></script>
<script src="https://cdn-client.medium.com/lite/static/js/5049.d1ead72d.chunk.js"></script>
<script src="https://cdn-client.medium.com/lite/static/js/4810.6318add7.chunk.js"></script>
<script src="https://cdn-client.medium.com/lite/static/js/6618.db187378.chunk.js"></script>
<script src="https://cdn-client.medium.com/lite/static/js/2707.a4e221ac.chunk.js"></script>
<script src="https://cdn-client.medium.com/lite/static/js/9977.933c1c9a.chunk.js"></script>
<script src="https://cdn-client.medium.com/lite/static/js/8599.73cb8339.chunk.js"></script>
<script src="https://cdn-client.medium.com/lite/static/js/5250.9f9e01d2.chunk.js"></script>
<script src="https://cdn-client.medium.com/lite/static/js/9898.d9e26c5e.chunk.js"></script>
<script src="https://cdn-client.medium.com/lite/static/js/2648.26563adf.chunk.js"></script>
<script src="https://cdn-client.medium.com/lite/static/js/8393.826a25fb.chunk.js"></script>
<script src="https://cdn-client.medium.com/lite/static/js/4863.28ab43f6.chunk.js"></script>
<script src="https://cdn-client.medium.com/lite/static/js/6589.247b1d02.chunk.js"></script>
<script src="https://cdn-client.medium.com/lite/static/js/5642.0f82ef97.chunk.js"></script>
<script src="https://cdn-client.medium.com/lite/static/js/6546.cd03f950.chunk.js"></script>
<script src="https://cdn-client.medium.com/lite/static/js/6834.8aa8d357.chunk.js"></script>
<script src="https://cdn-client.medium.com/lite/static/js/2420.2a5e2d95.chunk.js"></script>
<script src="https://cdn-client.medium.com/lite/static/js/839.1c286b32.chunk.js"></script>
<script src="https://cdn-client.medium.com/lite/static/js/7975.60bcefe8.chunk.js"></script>
<script src="https://cdn-client.medium.com/lite/static/js/2106.0350840b.chunk.js"></script>
<script src="https://cdn-client.medium.com/lite/static/js/7394.73a57633.chunk.js"></script>
<script src="https://cdn-client.medium.com/lite/static/js/5794.9e8ff5dd.chunk.js"></script>
<script src="https://cdn-client.medium.com/lite/static/js/8204.7749bc66.chunk.js"></script>
<script src="https://cdn-client.medium.com/lite/static/js/4391.59acaed3.chunk.js"></script>
<script src="https://cdn-client.medium.com/lite/static/js/PostPage.MainContent.2dc8b1c6.chunk.js"></script>
<script src="https://cdn-client.medium.com/lite/static/js/8414.6565ad5f.chunk.js"></script>
<script src="https://cdn-client.medium.com/lite/static/js/3974.8d3e0217.chunk.js"></script>
<script src="https://cdn-client.medium.com/lite/static/js/2527.d5e0c2f5.chunk.js"></script>
<script src="https://cdn-client.medium.com/lite/static/js/PostResponsesContent.7ad7ca92.chunk.js"></script>
<script src="https://cdn-client.medium.com/lite/static/js/responses.editor.5a11f4da.chunk.js"></script><script>window.main();</script><script>(function(){function c(){var b=a.contentDocument||a.contentWindow.document;if(b){var d=b.createElement('script');d.innerHTML="window.__CF$cv$params={r:'8f3db27d5f2d64e1',t:'MTczNDUwOTY0NS4wMDAwMDA='};var a=document.createElement('script');a.nonce='';a.src='/cdn-cgi/challenge-platform/scripts/jsd/main.js';document.getElementsByTagName('head')[0].appendChild(a);";b.getElementsByTagName('head')[0].appendChild(d)}}if(document.body){var a=document.createElement('iframe');a.height=1;a.width=1;a.style.position='absolute';a.style.top=0;a.style.left=0;a.style.border='none';a.style.visibility='hidden';document.body.appendChild(a);if('loading'!==document.readyState)c();else if(window.addEventListener)document.addEventListener('DOMContentLoaded',c);else{var e=document.onreadystatechange||function(){};document.onreadystatechange=function(b){e(b);'loading'!==document.readyState&&(document.onreadystatechange=e,c())}}}})();</script><script defer src="https://static.cloudflareinsights.com/beacon.min.js/vcd15cbe7772f49c399c6a5babf22c1241717689176015" integrity="sha512-ZpsOmlRQV6y907TI0dKBHq9Md29nnaEIPlkf84rnaERnq6zvWvPUqr2ft8M1aS28oN72PdrCzSjY4U6VaAw1EQ==" data-cf-beacon='{"rayId":"8f3db27d5f2d64e1","version":"2024.10.5","serverTiming":{"name":{"cfExtPri":true,"cfL4":true,"cfSpeedBrain":true,"cfCacheStatus":true}},"token":"0b5f665943484354a59c39c6833f7078","b":1}' crossorigin="anonymous"></script>
</body></html>