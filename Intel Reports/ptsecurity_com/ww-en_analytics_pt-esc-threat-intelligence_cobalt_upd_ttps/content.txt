<!DOCTYPE html><html lang="en"><head><meta charSet="utf-8"/><title>Cobalt: tactics and tools update</title><meta name="description" content="
	 Specialists from PT Expert Security Center has been monitoring the activity of the Cobalt group since 2016. Today, the group is attacking financial institutions around the world. Over the past year, the Cobalt group has not only modified its main CobInt tools and COM-DLL dropper in conjunction with the more_eggs JavaScript backdoor but also used new delivery methods and new techniques to bypass protection at the initial stage of the attack. In this article, we would like to talk about new group tactics, delivery methods, and changes mainly in malware.
"/><meta name="viewport" content="width=device-width, initial-scale=1"/><link rel="icon" href="/images/favicons/favicon.ico" sizes="any"/><link rel="icon" href="/images/favicons/icon.svg" type="image/svg+xml"/><link rel="apple-touch-icon" href="/images/favicons/apple-touch-icon.png"/><meta name="next-head-count" content="7"/><script type="text/javascript">
                   
    (function(m,e,t,r,i,k,a){m[i]=m[i]||function(){(m[i].a=m[i].a||[]).push(arguments)};
    m[i].l=1*new Date();
    for (var j = 0; j < document.scripts.length; j++) {if (document.scripts[j].src === r) { return; }}
    k=e.createElement(t),a=e.getElementsByTagName(t)[0],k.async=1,k.src=r,a.parentNode.insertBefore(k,a)})
    (window, document, "script", "https://mc.yandex.ru/metrika/tag.js", "ym");
  
                   ym(93900442, "init", {
                       clickmap: true,
                       trackLinks: true,
                       accurateTrackBounce: true,
                       webvisor: true
                   });
             </script><noscript><div><img src="https://mc.yandex.ru/watch/93900442" style="position:absolute;left:-9999px" alt=""/></div></noscript><script id="mindbox-init">
    mindbox = window.mindbox || function() { mindbox.queue.push(arguments); };
    mindbox.queue = mindbox.queue || [];

    mindbox('create', {
        endpointId: 'ptsec.global',
    });
</script><script async="" src="https://api.mindbox.ru/scripts/v1/tracker.js"></script><script async="" src="https://cdn.cookielaw.org/scripttemplates/otSDKStub.js" type="text/javascript" data-domain-script="0191d674-840f-7931-a533-9567b38dbd10" data-document-language="true"></script><script type="text/javascript">function OptanonWrapper() { }</script><link rel="preload" href="/_next/static/css/80c4a58119cf7c0b.css" as="style"/><link rel="stylesheet" href="/_next/static/css/80c4a58119cf7c0b.css" data-n-g=""/><link rel="preload" href="/_next/static/css/941fc73e0d448350.css" as="style"/><link rel="stylesheet" href="/_next/static/css/941fc73e0d448350.css" data-n-p=""/><link rel="preload" href="/_next/static/css/4c941d641ec34117.css" as="style"/><link rel="stylesheet" href="/_next/static/css/4c941d641ec34117.css" data-n-p=""/><link rel="preload" href="/_next/static/css/37c177beab301399.css" as="style"/><link rel="stylesheet" href="/_next/static/css/37c177beab301399.css" data-n-p=""/><link rel="preload" href="/_next/static/css/bb426d7648eb51ac.css" as="style"/><link rel="stylesheet" href="/_next/static/css/bb426d7648eb51ac.css" data-n-p=""/><noscript data-n-css=""></noscript><script defer="" nomodule="" src="/_next/static/chunks/polyfills-c67a75d1b6f99dc8.js"></script><script src="/_next/static/chunks/webpack-d6441674d4b92143.js" defer=""></script><script src="/_next/static/chunks/framework-ce84985cd166733a.js" defer=""></script><script src="/_next/static/chunks/main-2aa161cc193cdf0e.js" defer=""></script><script src="/_next/static/chunks/pages/_app-d2c16fc8222f5884.js" defer=""></script><script src="/_next/static/chunks/4b358913-e177b648ea0062d1.js" defer=""></script><script src="/_next/static/chunks/f10e284a-c46ff7024e963ef1.js" defer=""></script><script src="/_next/static/chunks/dff27125-edb64a536e668286.js" defer=""></script><script src="/_next/static/chunks/4322cd96-db9c9cbc97931387.js" defer=""></script><script src="/_next/static/chunks/5300-5d5240edfe5088d0.js" defer=""></script><script src="/_next/static/chunks/4028-70e0d285b32e5897.js" defer=""></script><script src="/_next/static/chunks/2580-447bcccef7567d77.js" defer=""></script><script src="/_next/static/chunks/8675-7126786e5e2e65c5.js" defer=""></script><script src="/_next/static/chunks/585-0d6245c6d60804bf.js" defer=""></script><script src="/_next/static/chunks/8973-5b086d43f68f9a0f.js" defer=""></script><script src="/_next/static/chunks/9381-dd4de4005cd3d545.js" defer=""></script><script src="/_next/static/chunks/254-dde07e0bcb3d5f5a.js" defer=""></script><script src="/_next/static/chunks/3330-13425461e8bb6bd9.js" defer=""></script><script src="/_next/static/chunks/4883-6aebae388f310771.js" defer=""></script><script src="/_next/static/chunks/9852-d3e7d7c2bf949d3a.js" defer=""></script><script src="/_next/static/chunks/9943-72218bdced5389b6.js" defer=""></script><script src="/_next/static/chunks/5363-fea1d2f79e1d9971.js" defer=""></script><script src="/_next/static/chunks/pages/analytics/pt-esc-threat-intelligence/%5Bslug%5D-debebc1698dc2505.js" defer=""></script><script src="/_next/static/Nk1PjZMd8HlCnZWDQcegj/_buildManifest.js" defer=""></script><script src="/_next/static/Nk1PjZMd8HlCnZWDQcegj/_ssgManifest.js" defer=""></script></head><body><div id="__next"><div class=""><header class="Header_header__Hd6K0" id="nav-bar"></header><main id="main" class="PageLayout_main__LUbC0"><div class="ArticleHeader_banner__enm6f"><section class="PageSection_section__GxaaG ArticleHeader_section__sve5w ArticleHeader_withBottomBar__d_wKA"><div class="ArticleHeader_header___PnMn"><div class="ArticleHeader_headerInner__2bYRI"><h2 class="Heading_base__MUnbH Heading_level_2__qXMBH"><span>Cobalt: tactics and tools update</span></h2></div></div><div class="ArticleHeader_bottomBar__EgyS1"><div class="ArticleHeader_leftSide__gAaId"><div class="ArticleBageLink_container__n25zS"><div class="ArticleBageLink_icon__Z9k9v"><svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M12.312 12.1358L8 14.7438L3.688 12.1358C3.1848 11.8491 2.76468 11.4366 2.46878 10.9388C2.17288 10.441 2.01135 9.8748 2 9.29577L2 2.50377C2 2.50377 2.04 2.39977 2.16 2.35177L7.808 1.21577C7.93487 1.19175 8.06513 1.19175 8.192 1.21577L13.84 2.35177C13.96 2.35177 14 2.46377 14 2.50377L14 9.29577C13.9887 9.8748 13.8271 10.441 13.5312 10.9388C13.2353 11.4366 12.8152 11.8491 12.312 12.1358Z" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"></path><path d="M6.40039 7.1999L8.00039 8.7999L10.4004 6.3999" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"></path></svg></div><a href="/analytics/pt-esc-threat-intelligence"><div class="Text_base__riB2c Text_type_pS__4RXUf Text_theme_dark__type_pS__jWlgX"><span>PT EXPERT SECURITY CENTER</span></div></a></div><div class="ArticleDate_dark__bQPEn Text_base__riB2c Text_type_pS__4RXUf Text_theme_dark__type_pS__jWlgX"></div></div><div class="ArticleHeader_rightSide__zUGU_"><button type="button" class="ButtonShareLink_extraButton__6pf3i ArticleHeader_extraButton__zTZOf Button_button__F7Ulc Button_button_size_s___Bpb6 Button_button_theme_dark__iuu3A"><span>Share<img alt="share" loading="lazy" width="16" height="16" decoding="async" data-nimg="1" style="color:transparent" src="/_next/static/media/sharing.472b5ae7.svg"/></span></button></div></div></section></div><section class="PageSection_section__GxaaG Card_section__QzdVO"><div class="Card_contentWrapper__45uLa Card_mode_light__02f7V Card_zIndex_1__NP_2j"><div class="ArticleLayout_grid__ARjhp"><div class="ArticleLayout_leftColumn___AQb_"><div class="SidebarWidgets_root__EIInZ"><div class="SidebarWidget_root__IWq9u" data-theme="light"><span class="SidebarWidget_badge__gm6Re" aria-hidden="true"></span><a href="/analytics"><h4 class="SidebarWidget_link__7lVne Heading_base__MUnbH Heading_level_4__vTL_m Heading_theme_light__level_4__u4aOM"><span>Analytics articles</span></h4></a><ul class="SidebarWidget_articles__wrBxg"><li class="ArticlesWidget_article__5hn4y"><div class="ArticlesWidget_article_date__LAjT6 ArticleDate_light__n8s4o Text_base__riB2c Text_type_pS__4RXUf Text_theme_light__type_pS__eERKe"></div><a target="_blank" href="/analytics/cyberthreats-to-industrial-iot"><div class="ArticlesWidget_article_text__Bx4ya Text_base__riB2c Text_type_pM__mE14b Text_clamp_3__8DSUm Text_theme_light__type_pM__2zLmc"><span>Cyberthreats to industrial IoT in the manufacturing sector</span></div></a></li><li class="ArticlesWidget_article__5hn4y"><div class="ArticlesWidget_article_date__LAjT6 ArticleDate_light__n8s4o Text_base__riB2c Text_type_pS__4RXUf Text_theme_light__type_pS__eERKe"></div><a target="_blank" href="/analytics/cyberthreats-evolve-while-forecasts-signal-more-sophisticated-risks-ahead"><div class="ArticlesWidget_article_text__Bx4ya Text_base__riB2c Text_type_pM__mE14b Text_clamp_3__8DSUm Text_theme_light__type_pM__2zLmc"><span>Cyberthreats evolve while forecasts signal more sophisticated risks ahead</span></div></a></li><li class="ArticlesWidget_article__5hn4y"><div class="ArticlesWidget_article_date__LAjT6 ArticleDate_light__n8s4o Text_base__riB2c Text_type_pS__4RXUf Text_theme_light__type_pS__eERKe"></div><a target="_blank" href="/analytics/trending-vulnerability-digest-november-2024"><div class="ArticlesWidget_article_text__Bx4ya Text_base__riB2c Text_type_pM__mE14b Text_clamp_3__8DSUm Text_theme_light__type_pM__2zLmc"><span>Trending vulnerability digest November 2024</span></div></a></li></ul></div><div class="AdBanner_banner__Phuq9"><img alt="" loading="lazy" decoding="async" data-nimg="fill" class="AdBanner_image__8dCJL" style="position:absolute;height:100%;width:100%;left:0;top:0;right:0;bottom:0;object-fit:cover;color:transparent" src="https://pt-global.storage.yandexcloud.net/PT_Network_Attack_Discovery_2x_0d8a5793c7.png"/><div class="AdBanner_detail__tt_BJ"><h4 class="Heading_base__MUnbH Heading_level_4__vTL_m Heading_theme_dark__level_4__5RqHy"><span>What are the security threats on your network?</span></h4><div class="Text_base__riB2c Text_type_pM__mE14b Text_theme_dark__type_pM__3GUPK"><span>Check your traffic-for free</span></div><a class="AdBanner_button__9I57f Button_button__F7Ulc Button_button_size_m__cmMD_ Button_button_theme_dark__iuu3A" href="/analytics/pt-esc-threat-intelligence/cobalt_upd_ttps#contacts"><span><span>Request pilot</span></span><img alt="" loading="lazy" width="20" height="20" decoding="async" data-nimg="1" class="Button_arrow__ZXQXI" style="color:transparent" src="/_next/static/media/arrows-right.1fc87099.svg"/></a></div></div></div></div><div class="ArticleLayout_rightColumns___55GM"><div class="ArticleLayout_rightColumn__c8u4z"><div class="HtmlContent_content__ajDaE esiArticle_bitrixContent__PCSBe"><article>
<p>
	 The PT Expert Security Center (PT ESC) has been monitoring the Cobalt group since <a href="https://www.ptsecurity.com/upload/corporate/ww-en/analytics/Cobalt-Snatch-eng.pdf" target="_blank">2016</a>. Currently the group targets financial organizations around the world. Two years ago, for example, their attacks caused over $14 million in damage. Over the last four years, we have <a href="https://www.ptsecurity.com/ww-en/analytics/cobalt-strikes-back-an-evolving-multinational-threat-to-finance/" target="_blank">released</a> several <a href="https://www.ptsecurity.com/ww-en/analytics/new-bank-attacks/" target="_blank">reports on attacks</a> linked to the group.
</p>
<p>
	 Over the last year, the group has not only modified its flagship tools CobInt and COM-DLL-Dropper in conjunction with the more_eggs JavaScript backdoor, but also started using new methods to deliver malware and bypass security in the initial stages of the kill chain. As a group whose activities have long been of interest to security researchers all over the world, the attackers are highly motivated to stay one step ahead.
</p>
 <figure> <img alt="Figure 1. Number of Cobalt attacks detected by PT ESC" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/cobalt-2020/01_en.PNG"/> <figcaption>Figure 1. Number of Cobalt attacks detected by PT ESC</figcaption></figure>
<p>
	 In 2019, the group conducted an average of three attacks per month. Although we do not know whether the attacks were successful, such frequency may indicate that the criminals possess substantial financial resources allowing them to maintain their infrastructure, update malware, and adopt new techniques.
</p>
<p>
	 The following histogram shows that in late 2019 the group started favoring CobInt over COM-DLL-Dropper.
</p>
 <figure> <img alt=" Figure 2. Number of attacks using COM-DLL-Dropper and CobInt in 2019" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/cobalt-2020/02_3_en.png"/> <figcaption> Figure 2. Number of attacks using COM-DLL-Dropper and CobInt in 2019</figcaption></figure>
<p>
	 The more_eggs JavaScript backdoor is detected by the ETPro ruleset, including in public sandboxes, whereas CobInt traffic does not trigger security mechanisms. In addition, CobInt downloads the main library from the command and control (C2) server directly to memory, while COM-DLL-Dropper saves to disk the obfuscated more_eggs, which is then executed in memory. Therefore, COM-DLL-Dropper leaves more artifacts on the infected machine.
</p>
<h2>1. European Central Bank phishing website</h2>
<p>
	 In late August 2019, we detected a CobInt attack that presumably targeted European financial institutions. We do not know whether the attack was successful. CobInt was dropped by a custom NSIS installer. We detected three versions of the dropper: for Chrome, Firefox, and Opera. Each dropper contained the same CobInt version and a browser-specific installer. Once launched, the dropper saved CobInt to the %TEMP% folder and then ran CobInt and the installer. Malware analysis proved that the droppers were distributed from the phishing website ecb-european[.]eu.
</p>
 <figure> <img alt="Figure 3. Phishing website main page" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/cobalt-2020/03.png"/> <figcaption>Figure 3. Phishing website main page</figcaption></figure>
<p>
	 The site was a copy of the European Central Bank website, except for a pop-up window that asked visitors to update the browser.
</p>
 <figure> <img alt="Figure 4. Pop-up window on the fake ECB website" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/cobalt-2020/04.png"/> <figcaption>Figure 4. Pop-up window on the fake ECB website</figcaption></figure>
<p>
	 Visitors who fell for the ruse downloaded the dropper to their computer. The page source code contained a link to the script that displayed the pop-up window.
</p>
 <figure> <img alt="Figure 5. Link to malicious script" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/cobalt-2020/05.png"/> <figcaption>Figure 5. Link to malicious script</figcaption></figure>
<p>
	 The configuration strings in the script contain links for four droppers (we could not obtain the first one) and allow creating links for Safari, Edge, and Internet Explorer. The strings also show the window start time after loading the page, how many times the window will be shown to a user, type of device on which the window will be displayed, and which banner will be shown to the user. In addition, the script detects bots, crawlers, and spiders.
</p>
 <figure> <img alt="Figure 6. Malicious script parameters" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/cobalt-2020/06.png"/> <figcaption>Figure 6. Malicious script parameters</figcaption></figure>
<p>
	 Here are alternative windows contained in the script:
</p>
 <figure> <img alt="Figure 7. Alternative window specified in the script parameters" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/cobalt-2020/07.png"/> <figcaption>Figure 7. Alternative window specified in the script parameters</figcaption></figure> <figure> <img alt="Figure 8. Alternative window specified in the script parameters" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/cobalt-2020/08.png"/> <figcaption>Figure 8. Alternative window specified in the script parameters</figcaption></figure>
<p>
	 We do not know how the user landed on this website. Most likely, the user would be a victim of a phishing attack like many of those performed by Cobalt.
</p>
<p>
	 The framework in question is not unique. We believe that Cobalt purchased it on a darkweb forum. In an <a href="https://www.zscaler.com/blogs/research/netsupport-rat-installed-fake-update-notices" target="_blank">article</a> from November 2019, Zscaler described a similar scenario for spreading NetSupport RAT. The framework was placed on compromised sites, which showed visitors a corresponding pop-up window.
</p>
<p>
	 In yet another case, the malicious file Login_Details.img was also distributed from the site ecb-european[.]eu. Our colleagues from Group-IB have provided a <a href="https://www.group-ib.com/blog/cobaltphishing" target="_blank">detailed analysis</a> of the malware.
</p>
<h2>2. Malicious VHD</h2>
<p>
	 In late December 2019, we detected another CobInt loader used by Cobalt. The loader container was unusual. It was a virtual hard disk (VHD), presumably distributed by email.
</p>
<p>
	 The VHD format was originally developed by Connectix for their Virtual PC product. Microsoft acquired the product in 2003 and renamed it Microsoft Virtual PC. In 2005, the format became available to the public. Microsoft started using the VHD format in Hyper-V, the hypervisor-based virtualization technology. A VHD file may contain anything found on a physical hard drive, such as disk partitions and a file system with folders and files.
</p>
<p>
	 Windows 7 and newer systems include the ability to manually mount VHD files, such as via the MMC console. Starting with Windows 8, a user can mount a VHD by simply double-clicking the file. A mounted VHD disk image appears to Windows just like a normal hard disk.
</p>
<p>
	 In September 2019, the CERT/CC Blog published an article about the danger of VHD files and their possible use as an attack <a href="https://insights.sei.cmu.edu/cert/2019/09/the-dangers-of-vhd-and-vhdx-files.html" target="_blank">vector</a>. The researcher Will Dorman showed that neither antivirus software nor the Mark of the Web alerts users about the potential harm of the contents of a VHD file downloaded from the Internet. Dorman created a malicious VHD container with EICAR inside and uploaded the result to VirusTotal. The malware was not detected by any antivirus engines. A VHD file is critical for operation of Hyper-V virtual machines. If this file is damaged or blocked, the virtual machine will not run. This may explain the rarity, or even absence, of antivirus detection. In documentation, Microsoft <a href="https://support.microsoft.com/en-gb/help/3105657/recommended-antivirus-exclusions-for-hyper-v-hosts" target="_blank">recommends</a> excluding VHD files from antivirus scanning (as automatically is the case in Windows Defender). Otherwise, Hyper-V is susceptible to issues.
</p>
<p>
	 It is possible that Cobalt used the findings of this research for their own purposes. Their VHD file was also not detected by any antivirus software when it first appeared on VirusTotal. Half a year later, the file was detected by just one antivirus engine, which is still very low.
</p>
 <figure> <img alt="Figure 9. Cobalt VHD detection level at the moment of attack" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/cobalt-2020/09.png"/> <figcaption>Figure 9. Cobalt VHD detection level at the moment of attack</figcaption></figure>
<p>
	 The VHD contains two CobInt files. One file has two invalid Google certificates appended to it in order to reduce the odds of detection.
</p>
 <figure> <img alt=" Figure 10. Certificates appended to a CobInt file" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/cobalt-2020/10_en.PNG"/> <figcaption> Figure 10. Certificates appended to a CobInt file</figcaption></figure>
<p>
	 Since VHD is in essence a container with a file system, one can search for artifacts inside VHD files. For example, we found an image with text of a fake HSBC antifraud message in the unallocated space of a VHD file.
</p>
 <figure> <img alt="Figure 11. Image in unallocated space of a VHD file" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/cobalt-2020/11.png"/> <figcaption>Figure 11. Image in unallocated space of a VHD file</figcaption></figure>
<p>
	 The attackers may have inadvertently left the artifact when reallocating space in the container: the same image was used as the CobInt icon and stored in the group&#x27;s resources.
</p>
<h3>2.1. CobInt analysis</h3>
<p>
	 Once the VHD is mounted, a user must manually run one of the files. The two files are identical in terms of functions. When run, either of the CobInt files downloads the main library from the C2 server as an HTML file.
</p>
<p>
	 There are a few changes in comparison to the algorithm <a href="https://www.proofpoint.com/us/threat-insight/post/new-modular-downloaders-fingerprint-systems-part-3-cobint" target="_blank">described by ProofPoint in 2018</a>:
</p>
 <figure> <img alt="Figure 12. Example of obfuscation of the main library" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/cobalt-2020/12.png"/> <figcaption>Figure 12. Example of obfuscation of the main library</figcaption></figure>
<p>
	 First, all tags are removed and their contents are ignored.
</p>
 <figure> <img alt="Figure 13. Tag removal" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/cobalt-2020/13.png"/> <figcaption>Figure 13. Tag removal</figcaption></figure>
<p>
	 Next, periods, commas, and spaces are processed. All characters after these symbols are uppercased (the value 0x20 is subtracted).
</p>
 <figure> <img alt="Figure 14. Removing unnecessary characters and switching letters to uppercase" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/cobalt-2020/14.png"/> <figcaption>Figure 14. Removing unnecessary characters and switching letters to uppercase</figcaption></figure>
<p>
	 Next, data is decoded from Base64 and decrypted by XOR with a 4-byte key that is initialized with the preceding value of the decrypted data at each iteration. At each iteration, the current round&#x27;s 4 bytes are subtracted from those of the previous round, after which the key is the 4-byte value of the input buffer of the previous round.
</p>
 <figure> <img alt="Figure 15. First XOR level" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/cobalt-2020/15.png"/> <figcaption>Figure 15. First XOR level</figcaption></figure>
<p>
	 Once decryption finishes, the second-stage decryptor takes over. In essence, it consists of an XOR decryption cycle using a 4-byte key that is the same for the entire stage. The output of this stage will be a .dll library, which is the payload.
</p>
<p>
	 Data decoded from Base64 is shown in Figure 16. A 4-byte preset for the first decryptor is highlighted in red and will remain the same during the second stage. The rest of the data is highlighted in yellow.
</p>
 <figure> <img alt="Figure 16. Data decoded from Base64" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/cobalt-2020/16.png"/> <figcaption>Figure 16. Data decoded from Base64</figcaption></figure>
<p>
	 The picture changes after decryption (Figure 17). The encryption key is clearly visible due to a long series of zeros in the executable file that, after encryption, contain the keystream in pure form.
</p>
 <figure> <img alt="Figure 17. Data after removal of the first XOR level" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/cobalt-2020/17.png"/> <figcaption>Figure 17. Data after removal of the first XOR level</figcaption></figure>
<p>
	 The second decryption gives us a valid PE file (Figure 18). We could not figure out the purpose of the first eight bytes: they are not used anywhere in the loader.
</p>
 <figure> <img alt="Figure 18. Deobfuscated library" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/cobalt-2020/18.png"/> <figcaption>Figure 18. Deobfuscated library</figcaption></figure>
<h3>2.2. Main library analysis</h3>
<p>
	 Once an event is created and the necessary parameters are initialized, the domain is decrypted. Then the function for generating the remaining part of the address is called.
</p>
 <figure> <img alt="Figure 19. Algorithm for generating remaining part of the address" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/cobalt-2020/19.png"/> <figcaption>Figure 19. Algorithm for generating remaining part of the address</figcaption></figure>
<p>
	 After the full C2 server address is generated, the library decrypts the necessary parameters to create HTTP fields, adds them to a request, and sends the request to the server. The server response contains plugins that the library loads into its address space using ReflectiveLoader.
</p>
<h3>2.3. Decryption of plugins</h3>
<p>
	 Like the main library, the plugins are sent by the server as HTML pages. The first stage of input transformation is similar to what happens during the library download. The difference is that all periods, commas, and spaces are ignored, and all characters are lowercased.
</p>
<p>
	 After the initial transformation, the obtained data is decoded from a–z to 0x00—0xff. For this, a previously unseen decoding procedure is used. It is based on transforming input values depending on the current value, previous value (in some cases), and values of the global counter.
</p>
 <figure> <img alt="Figure 20. Plugin decoding algorithm" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/cobalt-2020/20.png"/> <figcaption>Figure 20. Plugin decoding algorithm</figcaption></figure>
<p>
	 The decoding is followed by two decryption cycles.
</p>
 <figure> <img alt="Figure 21. First decryption cycle" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/cobalt-2020/21.png"/> <figcaption>Figure 21. First decryption cycle</figcaption></figure>
<p>
	 The first decryption key is in the application code, hard-coded at an offset that takes only two values.
</p>
<p>
	 To carry out the second decryption cycle, the last byte of data is read. This byte is the length of the encryption key for the second cycle. The file is read at this number of bytes (plus one) from the end. After the key is read, the data is decrypted, except for the key itself. In Figure 22, the key length is highlighted in red and the key itself is highlighted in yellow.
</p>
 <figure> <img alt="Figure 22. XOR key example" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/cobalt-2020/22.png"/> <figcaption>Figure 22. XOR key example</figcaption></figure>
<p>
	 The last stage is decryption with a 4-byte key, which is also easily obtained by analyzing the series of zeros in the PE header.
</p>
 <figure> <img alt="Figure 23. XOR key in encrypted data" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/cobalt-2020/23.png"/> <figcaption>Figure 23. XOR key in encrypted data</figcaption></figure>
<p>
	 Our analysis detected two types of downloaded plugins: one that steals the names of running processes plus a screen capture module. Both plugins use standard WinAPIs to obtain data, as well as the same function as the main library in the export for reflective process loading.
</p>
<h3>2.4. Traffic decryption</h3>
<p>
	 The library sends the data collected by the plugins to the server.
</p>
<p>
	 Here is an example of traffic:
</p>
 <figure> <img alt="Figure 24. Encoded data collected by plugin" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/cobalt-2020/24_1.png"/> <figcaption>Figure 24. Encoded data collected by plugin</figcaption></figure>
<p>
	 First, the traffic is encrypted by a randomly generated key of arbitrary length. The key is inserted into the packet with indication of its length.
</p>
<p>
	 Next, the data is encrypted with a hard-coded 64-byte key, the same one that was used to decrypt the library. After that, the same encoding algorithm is applied. An equals sign (=) and the generated sequence of 8 to 16 a–z characters are added to the beginning.
</p>
<p>
	 Example of decoded and decrypted traffic from the previous packet:
</p>
 <figure> <img alt="Figure 25. Decoded data" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/cobalt-2020/25_1.png"/> <figcaption>Figure 25. Decoded data</figcaption></figure>
<p>
	 Packet creation and transformation function:
</p>
 <figure> <img alt="Figure 26. Algorithm for creating packet with data" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/cobalt-2020/26.png"/> <figcaption>Figure 26. Algorithm for creating packet with data</figcaption></figure>
<h2>3. BIFF macro</h2>
<p>
	 In March 2020, we detected an XLS document from Cobalt that downloaded and ran the COM-DLL-Dropper. The document contained the rather old Excel 4.0 macro format and was almost invisible to antivirus software (1 positive verdict out of 60 on VirusTotal).
</p>
 <figure> <img alt="Figure 27. Number of antivirus verdicts on VirusTotal during first upload of the file with Excel 4.0 macro" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/cobalt-2020/27.png"/> <figcaption>Figure 27. Number of antivirus verdicts on VirusTotal during first upload of the file with Excel 4.0 macro</figcaption></figure>
<p>
	 This macro standard is 20 years old. The standard is peculiar in that the macro is stored in worksheet cells (not stored in a VBA project), and the worksheet itself can be hidden in Excel. The macro therefore will not be in a VBA stream, but in a BIFF (Binary Interchange File Format) record.
</p>
<p>
	 If we open the document in Excel, we see one worksheet and no VBA project macros. However, Excel all the same detects the macro and blocks it from running.
</p>
<p>
	 The olevba3.py utility from oletools can be used to detect this macro.
</p>
 <figure> <img alt="Figure 28. Result of olevba3.py executiona" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/cobalt-2020/28.png"/> <figcaption>Figure 28. Result of olevba3.py execution</figcaption></figure>
<p>
</p>
 By running the utility, we see that one of the document worksheets has the status &quot;very hidden&quot; and is of the Excel 4.0 macro type. Because of this status, the worksheet will be invisible in the Excel interface and, what&#x27;s more, it cannot be made visible from the interface either. It can only be made visible by Visual Basic or by manually modifying the document&#x27;s bytes.
<p>
</p>
<p>
 <a href="https://www.aldeid.com/wiki/BiffView" target="_blank">The BiffView utility</a> provides a more workable view of the BIFF structure. After parsing the initial document, we see that a page named sygfdfdfdesie has the attribute &quot;very hidden.&quot; We change this parameter to 1 or 0 in a hex editor.
</p>
 <figure> <img alt="Figure 29. Structure of malicious document worksheets" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/cobalt-2020/29_en.PNG"/> <figcaption>Figure 29. Structure of malicious document worksheets</figcaption></figure>
<p>
	 When the initial document is opened in the Name Manager, one of the formulas runs automatically:
</p>
 <figure> <img alt="Figure 30. Macro formula that runs when the document is opened" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/cobalt-2020/30_en.PNG"/> <figcaption>Figure 30. Macro formula that runs when the document is opened</figcaption></figure>
<p>
	 The initial formula launches a long chain of commands, such as CONCATENATE, RUN, CHAR, and CALL, which will lead to the loading and launch of COM-DLL-Dropper. The commands are scattered across the Excel cells, complicating analysis.
</p>
<p>
</p>
 <figure> <img alt="Figure 31. Macro formulas leading to loading and launch of COM-DLL-Dropper" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/cobalt-2020/26.png"/> <figcaption>Figure 31. Macro formulas leading to loading and launch of COM-DLL-Dropper</figcaption></figure>
<h2>4. COM-DLL-Dropper analysis</h2>
<p>
	 In early April 2020, we detected a new version of COM-DLL-Dropper. Its functions are different from everything we had seen before. However, the more_eggs JavaScript backdoor payload remained the same.
</p>
<p>
	 Cobalt first started using COM-DLL-Dropper in the summer of 2017 and is still using it to deliver more_eggs, which is contained in the dropper in encrypted and archived form.
</p>
<p>
	 A few facts about the dropper:
</p>
<ul>
	<li>It is written completely in PureBasic.</li>
	<li>It uses numerous anti-analysis techniques.</li>
	<li>It contains an encrypted and archived JavaScript loader, JavaScript backdoor, and a legitimate utility for modifying the command line to launch more_eggs.</li>
	<li>It has a built-in obfuscator for the hard-coded JavaScript backdoor and JavaScript loader</li>
</ul>
<h3>4.1. PE file external structure</h3>
<p>
	 All the studied items are PE-DLL files to be registered by regsvr32. In addition to exports called by regsvr32, each sample has different sets of exports typical of legitimate DLL files. Cobalt attempted to mask COM-DLL-Dropper by using third-party exports. Figure 32 shows the most popular exports used in the malware files (total of 249 unique exports).
</p>
 <figure> <img alt="Figure 32. Most popular COM-DLL dropper exports" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/cobalt-2020/32.png"/> <figcaption>Figure 32. Most popular COM-DLL dropper exports</figcaption></figure>
<p>
	 These exports contain stubs that generally do not actually do anything. Judging by the names of the exports, the droppers were masked to resemble media application libraries. In 2019, the malware was updated with the DllInstall export, which is also called by regsvr32, and the main dropper code was moved to the export.
</p>
<p>
	 Before describing the malware code, we should touch on the PureBasic code. The information we provide here is the result of analyzing malware samples. We did not study the compiler itself and therefore are forced to make certain assumptions. However, the described entities helped us in our analysis, which is why we are sharing them here. All the names in screenshots were made up for the purposes of interpreting the malware code.
</p>
<p>
	 Our analysis requires two entities: strings and object arrays. PureBasic strings are stored in a special buffer. They are allocated and released without using a system API. Figure 33 shows the process of string allocation. During program initialization, a separate heap is created for strings by calling HeapCreate().
</p>
 <figure> <img alt="Figure 33. String workings" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/cobalt-2020/33.png"/> <figcaption>Figure 33. String workings</figcaption></figure>
<p>
	 A common pattern for working with this entity is as follows:
</p>
<ol>
	<li>Allocate a string to storage from a constant.</li>
	<li>Operate on the string.</li>
	<li>Update the global string which is usually allocated on the heap. After the update is completed, move back the node index. This operation is somewhat similar to pop().</li>
</ol>
<p>
	 The string storage structures do not allow storing the size of the added string. Instead, before starting any operation with the string, the program saves the previous index of the node and then passes it to the update operation. The difference between the indices is the string size.
</p>
<p>
	 We will not describe object arrays here in detail; suffice it to say that a special header before each array stores information about the size, type, and number of elements. The header occupies 18h bytes. Therefore, the space allocated for the array of objects can be calculated as <em>size of element × number of elements + 18h</em>.
</p>
<p>
	 To get a clearer picture, refer to this description of functions that are presented in the screenshots a bit later.
</p>
<h4>Table 1 Function Description</h4>
<div class="table-container">
	<table class="table-article">
	<thead>
	<tr>
		<th>
			 Function
		</th>
		<th>
			 Description
		</th>
	</tr>
	</thead>
	<tbody>
	<tr>
		<td>
			<p>
				 ObjectManager::AllocateObjectArray
			</p>
		</td>
		<td>
			 Object array is allocated
		</td>
	</tr>
	<tr>
	</tr>
	<tr>
		<td>
			<p>
				 ObjectArray::ReleaseObjectArray
			</p>
			<p>
				 ObjectManager::FreeObject
			</p>
		</td>
		<td>
			 Object array is released
		</td>
	</tr>
	<tr>
	</tr>
	<tr>
		<td>
			<p>
				 ObjectManager::GetStringObject
			</p>
			<p>
				 ObjectManager::ConcatenationWithStringObject
			</p>
		</td>
		<td>
			 Create a string in storage
		</td>
	</tr>
	<tr>
	</tr>
	<tr>
		<td>
			<p>
				 ObjectManager::PopStringObject
			</p>
		</td>
		<td>
			 Update global string
		</td>
	</tr>
	</tbody>
	</table>
</div>
<h3>4.2. Anti-analysis</h3>
<p>
	 To find the needed API functions, non-standard hash sums obtained from the functions&#x27; names are used. Each hash sum is obtained by taking the CRC32 value and then performing XOR with a constant. The samples have different constants. This is why Table 3 also includes CRC32 values without the constant-value XOR.
</p>
<p>
	 The new version of COM-DLL-Dropper has strings encrypted with the RC4 algorithm, whereas the older version used XOR.
</p>
<h4>Table 2. Techniques used by the malware to complicate analysis</h4>
<div class="table-container">
	<table class="table-article">
	<thead>
	<tr>
		<th>
			 Technique
		</th>
		<th>
			 Description
		</th>
	</tr>
	</thead>
	<tbody>
	<tr>
		<td>
			<p>
				 Key bruteforce to decrypt strings
			</p>
		</td>
		<td>
			<p>
				 Starting in April 2020, RC4 has been used instead of XOR. This technique uses a non-standard implementation of the Sleep function, which may postpone launch of the main malware functions in a sandbox.
			</p>
		</td>
	</tr>
	<tr>
		<td>
			<p>
				 Checking for the /s /i string process in CommandLine
			</p>
		</td>
		<td>
			<p>
				 The check verifies that the process was launched via regsvr32.
			</p>
		</td>
	</tr>
	<tr>
		<td>
			<p>
				 Verifying the process name and the .ocx extension
			</p>
		</td>
		<td>
			<p>
				 The extension and the process name are also checked with a non-standard hash function.
			</p>
		</td>
	</tr>
	<tr>
		<td>
			<p>
				 Verifying the list of modules loaded into the process
			</p>
		</td>
		<td>
			<p>
				 The check is performed using a custom hash function.
			</p>
		</td>
	</tr>
	<tr>
		<td>
			<p>
				 Loading of additional NTDLL image into the process
			</p>
		</td>
		<td>
			<p>
				 This likely creates a trusted NTDLL image without NT API interception.
			</p>
		</td>
	</tr>
	<tr>
		<td>
			<p>
				 Checking the values of registers Dr0–Dr3
			</p>
		</td>
		<td>
			<p>
				 Non-zero values in these registers indicate hardware breakpoints, and therefore the debugger. The register values are accessed via NtGetContext().
			</p>
		</td>
	</tr>
	<tr>
		<td>
			<p>
				 ProcessDebugPort check
			</p>
		</td>
		<td>
			<p>
				 NtQueryInformationProcess with relevant value is called.
			</p>
		</td>
	</tr>
	<tr>
		<td>
			<p>
				 ProcessDebugObjectHandle check
			</p>
		</td>
		<td>
			<p>
				 NtQueryInformationProcess with relevant value is called.
			</p>
		</td>
	</tr>
	<tr>
		<td>
			<p>
				 ProcessDebugFlags check
			</p>
		</td>
		<td>
			<p>
				 NtQueryInformationProcess with relevant value is called.
			</p>
		</td>
	</tr>
	<tr>
		<td>
			<p>
				 Checking the parent process name
			</p>
		</td>
		<td>
			<p>
				 The check is performed using a non-standard hash function.
			</p>
		</td>
	</tr>
	<tr>
		<td>
			<p>
				 Checking the year set on the system
			</p>
		</td>
		<td>
			<p>
				 The current date is obtained by calling NtQuerySystemTime and RtlTimeToTimeFields.
			</p>
		</td>
	</tr>
	<tr>
		<td>
			<p>
				 Checking the value of the environment variable COMPUTERNAME
			</p>
		</td>
		<td>
			<p>
				 The computer name is checked for the hard-coded string <a href="https://www.fireeye.com/blog/threat-research/2017/07/flare-vm-the-windows-malware.html" target="_blank">&quot;FLAREVM&quot;</a>.
			</p>
		</td>
	</tr>
	</tbody>
	</table>
</div>
<h4>Table 3. Strings and corresponding hash sums used in techniques</h4>
<div class="table-container">
	<table class="table-article">
	<thead>
	<tr>
		<th>
			 Hash sum
		</th>
		<th>
			 CRC32
		</th>
		<th>
			 String
		</th>
	</tr>
	</thead>
	<tbody>
	<tr>
		<td>
			<p>
				 0x322CD34E
			</p>
		</td>
		<td>
			<p>
				 0x322C4A66
			</p>
		</td>
		<td>
			<p>
				 .ocx
			</p>
		</td>
	</tr>
	<tr>
		<td>
			<p>
				 0xF43AEA50
			</p>
		</td>
		<td>
			<p>
				 0xF43A7378
			</p>
		</td>
		<td>
			<p>
				 regsvr32.exe
			</p>
		</td>
	</tr>
	<tr>
		<td>
			<p>
				 0x6FECDEE9
			</p>
		</td>
		<td>
			<p>
				 0x6FEC47C1
			</p>
		</td>
		<td>
			<p>
				 sbiedll.dll
			</p>
		</td>
	</tr>
	<tr>
		<td>
			<p>
				 0x16430EDF
			</p>
		</td>
		<td>
			<p>
				 0x164397F7
			</p>
		</td>
		<td>
			<p>
				 cmdvrt64.dll
			</p>
		</td>
	</tr>
	<tr>
		<td>
			<p>
				 0x2B256AC8
			</p>
		</td>
		<td>
			<p>
				 0x2B25F3E0
			</p>
		</td>
		<td>
			<p>
				 cmd.exe
			</p>
		</td>
	</tr>
	<tr>
		<td>
			<p>
				 0xA82757CC
			</p>
		</td>
		<td>
			<p>
				 0xA827CEE4
			</p>
		</td>
		<td>
			<p>
				 cmstp.exe
			</p>
		</td>
	</tr>
	<tr>
		<td>
			<p>
				 0xB3C6B186
			</p>
		</td>
		<td>
			<p>
				 0xB3C628AE
			</p>
		</td>
		<td>
			<p>
				 msxsl.exe
			</p>
		</td>
	</tr>
	</tbody>
	</table>
</div>
<p>
	 Key bruteforcing for string decryption is not &quot;complete.&quot; In fact, most of the key consists of a hard-coded prefix found in the code. The end of the key is a decimal number. Therefore, <em>key = prefix + number.</em>
</p>
 <figure> <img alt="Figure 34. RC4 key bruteforce" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/cobalt-2020/34.png"/> <figcaption>Figure 34. RC4 key bruteforce</figcaption></figure>
<h3>4.3. JavaScript generators</h3>
<p>
	 The dropper creates two files. The first is a JavaScript loader, and the second is a scriptlet containing the encrypted more_eggs backdoor. Both scripts are generated.
</p>
<p>
	 The generation template is saved among malware samples. The inserted data varies. The template contains tokens and JavaScript parts that are concatenated in series. Figure 35 shows part of generation of the JavaScript loader and examples of the used JavaScript parts.
</p>
 <figure> <img alt="Figure 35. Generation of a part of the loader" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/cobalt-2020/35.png"/> <figcaption>Figure 35. Generation of a part of the loader</figcaption></figure>
<p>
	 Several obfuscation templates are built into the generator:
</p>
<ul>
	<li>Compensatory disguising of constants</li>
	<li>Generation of random variable names</li>
	<li>Insertion of encrypted strings</li>
</ul>
<p>
	 Each generator contains a pool of names that are generated prior to starting creation of the script. These names are then used in JavaScript. Figure 35 shows a local variable named lpbobj_arraywcs__JSObjectPool. Figure 36 shows the pool initialization cycle.
</p>
 <figure> <img alt="Figure 36. Example of filling the pool of names used in the script" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/cobalt-2020/36.png"/> <figcaption>Figure 36. Example of filling the pool of names used in the script&gt;</figcaption></figure>
<p>
	 Each name available to be used in the script contains two parts: a random prefix (which is created once for the entire script) and a random decimal number (limited to a set number of characters). Figure 37 shows the name generation scheme and the result obtained in the script.
</p>
 <figure> <img alt="Figure 37. Generation of names available to be used in the script" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/cobalt-2020/37.png"/> <figcaption>Figure 37. Generation of names available to be used in the script</figcaption></figure>
<p>
	 Numeric constants are obfuscated with a function that applies a random arithmetic operation from a set hard-coded in the program and then inserts the opposite operation in the script. Thus, the inserted expression balances out the obfuscated constant. The second arithmetic operation argument is also generated randomly from a hard-coded range of values.
</p>
 <figure> <img alt="Figure 38. Generation of obfuscated constants" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/cobalt-2020/38.png"/> <figcaption>Figure 38. Generation of obfuscated constants</figcaption></figure>
<p>
	 The payload is encoded using RC4 and Base91 and inserted in the script. The implementations of RC4 and the Base91 decoder are also inserted in the scripts.
</p>
<h3>4.4. Persistence</h3>
<p>
	 Depending on its rights in the system, the dropper entrenches itself on the infected machine using the following methods:
</p>
<ul>
	<li>By using Task Scheduler</li>
	<li>By using the registry key Environment\UserInitMprLogonScript</li>
	<li>By using the registry key Software\Microsoft\Windows\CurrentVersion\Run</li>
</ul>
<p>
	 For all three methods, the value written by the dropper is the same, containing the command for launching the JavaScript loader.
</p>
 <figure> <img alt="Figure 39. Example of persistence via UserInitMprLogonScript" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/cobalt-2020/39.png"/> <figcaption>Figure 39. Example of persistence via UserInitMprLogonScript</figcaption></figure>
<p>
	 To configure a task created by the dropper, a special XML file is generated. Part of it is stored in the dropper in encrypted form, and another part is generated while running.
</p>
 <figure> <img alt="Figure 40. Decrypted part of XML" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/cobalt-2020/40.png"/> <figcaption>Figure 40. Decrypted part of XML</figcaption></figure> <figure> <img alt="Figure 41. Creating end for the XML file" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/cobalt-2020/41.png"/> <figcaption>Figure 41. Creating end for the XML file</figcaption></figure>
<p>
	 The resulting XML file is saved with a random name consisting of hexadecimal characters. Subsequently, this XML file is passed to schtasks.exe as the /XML parameter value.
</p>
<h3>4.5. Running the payload</h3>
<p>
	 COM-DLL-Dropper saves three files to disk:
</p>
<ul>
	<li>Obfuscated JavaScript loader</li>
	<li>Obfuscated JavaScript backdoor</li>
	<li>Legitimate utility for modifying the command line in order to launch the more_eggs JavaScript backdoor</li>
</ul>
<p>
	 The main backdoor is launched with the help of a known <a href="https://pentestlab.blog/2017/07/06/applocker-bypass-msxsl/" target="_blank">AppLocker bypass technique</a> using the msxsl utility. The commands look as follows:
</p>
<ul>
	<li>“C:\Users\\AppData\Roaming\Microsoft\msxsl.exe”</li>
	<li>“C:\Users\\AppData\Roaming\Microsoft\[javascript_downloader_name].txt”</li>
	<li>“C:\Users\\AppData\Roaming\Microsoft\[javascript_backdoor_name].txt”</li>
</ul>
<h3>4.6. JavaScript backdoor functionality</h3>
<p>
	 The JavaScript backdoor saved to disk by the new COM-DLL-Dropper has version 6.6.
</p>
 <figure> <img alt="Figure 42. Backdoor header" loading="lazy" width="0" height="0" decoding="async" data-nimg="1" class="HtmlContent_image-next__g1zfK" style="color:transparent" src="https://www.ptsecurity.com/upload/corporate/ww-en/images/esc/cobalt-2020/42.png"/> <figcaption>Figure 42. Backdoor header</figcaption></figure>
<p>
	 This backdoor has been used by Cobalt since 2017. It is executed in memory and always has a low number of antivirus verdicts.
</p>
<p>
	 The main capabilities of the backdoor are as follows:
</p>
<ol>
	<li>Traffic encryption with RC4 and Base91</li>
	<li>Execution of operator commands (in this version, the more_eggs command that gave the backdoor its name was absent):</li>
	<ul>
		<li>exec: download and run file (.exe or .dll)</li>
		<li>gtfo: uninstall</li>
		<li>more_onion: run script</li>
		<li>via_c: execute command using &quot;cmd.exe /C&quot;</li>
		<li>more_time: execute command using &quot;cmd.exe /C&quot;, with the result being saved to a temporary file. After that, the file is read and deleted, and its contents are encoded with Base64 and sent to the server.</li>
	</ul>
	<li>Check of the process list for antivirus protection and researcher software by comparing CRC32 values (derived from the name of each process, without extension and in lower case) against hard-coded values.</li>
	<li>Reconnaissance:</li>
	<ul>
		<li>Date of system installation</li>
		<li>Infected machine&#x27;s IP address</li>
		<li>System type (server or desktop)</li>
		<li>Windows version (from XP to 10)</li>
	</ul>
</ol>
<h2>Conclusion</h2>
<p>
	 Cobalt keeps attacking financial organizations around the world, refining its TTPs, and inventing ever-more sophisticated ways to bypass defenses. Due to quarantine-related measures, many employees of financial companies are now working remotely, outside the protection offered by corporate security solutions. Moreover, many threat actors are using COVID-19 as a lure in their attacks, as <a href="https://www.ptsecurity.com/ww-en/analytics/pt-esc-threat-intelligence/covid-19-and-new-year-greetings-the-higaisa-group/" target="_blank">the Higaisa group</a> has done. It is possible that Cobalt, too, will try to weaponize such concern.
</p>
<p>
 <b>Authors</b>: Denis Kuvshinov, Sergey Tarasov, Daniil Koloskov, PT ESC
</p>
<h2>Indicators of compromise</h2>
<h3>ECB phishing</h3>
<div class="table-container">
	<table class="table-article">
	<thead>
	<tr>
		<th>
			 Type
		</th>
		<th>
			 MD5
		</th>
		<th>
			 SHA1
		</th>
		<th>
			 SHA256
		</th>
	</tr>
	</thead>
	<tbody>
	<tr>
		<td>
			<p>
				 Browser droppers
			</p>
		</td>
		<td>
			<p>
				 152cd7014811ae8980981a825e5843b0
			</p>
		</td>
		<td>
			<p>
				 90f7d0b0f90aeadaeff1adf45db5dcc598dec8c4
			</p>
		</td>
		<td>
			<p>
				 2d02bbae38f4dba5485fbc2e38640898907ecdd6b9ee43501d1ee951653ab36f
			</p>
		</td>
	</tr>
	<tr>
		<td>
			<p>
			</p>
		</td>
		<td>
			<p>
				 f2712de0c8575ff32828c83cfbf75d4b
			</p>
		</td>
		<td>
			<p>
				 e80ef396462fe651c3cdeb91651ac27799d2dab5
			</p>
		</td>
		<td>
			<p>
				 33ba8cd251512f90b7249930aee22d3f47255420a8d41e1326169e0f948cc7d0
			</p>
		</td>
	</tr>
	<tr>
		<td>
			<p>
			</p>
		</td>
		<td>
			<p>
				 a3391d1d3482553545d7c0111984abb6
			</p>
		</td>
		<td>
			<p>
				 1a371353c6a46ddea19d520d8ce3b5599a8ee9f1
			</p>
		</td>
		<td>
			<p>
				 9e8a99ad401ef5d2bb3aea3a463d85220f0e6724f91a3c2ffd195d0b8628bf9d
			</p>
		</td>
	</tr>
	<tr>
		<td>
			<p>
				 CobInt
			</p>
		</td>
		<td>
			<p>
				 f924c690f7bbaf60d56a446b7a66a43b
			</p>
		</td>
		<td>
			<p>
				 8ada87f00ed3afdd4dbdb07879ba6ebe4a2a9ffa
			</p>
		</td>
		<td>
			<p>
				 b83d2c4f5c2bb562981a104d4e49cf25291096d37a4161c32a76e369d1a931e8
			</p>
		</td>
	</tr>
	</tbody>
	</table>
</div>
<p>
 <em>C&amp;C</em>
</p>
<p>
	 ecb-european[.]eu
</p>
<p>
	 timeswindows[.]com
</p>
<h3>VHD</h3>
<div class="table-container">
	<table class="table-article">
	<thead>
	<tr>
		<th>
			 Type
		</th>
		<th>
			 MD5
		</th>
		<th>
			 SHA1
		</th>
		<th>
			 SHA256
		</th>
	</tr>
	</thead>
	<tbody>
	<tr>
		<td>
			<p>
				 VHD-file
			</p>
		</td>
		<td>
			<p>
				 fce9fcd5fa337d020bd6758008221b81
			</p>
		</td>
		<td>
			<p>
				 e288b0410fb95060ce8c5527673978cb2ceffe05
			</p>
		</td>
		<td>
			<p>
				 3382a75bd959d2194c4b1a8885df93e8770f4ebaeaff441a5180ceadf1656cd9
			</p>
		</td>
	</tr>
	<tr>
		<td>
			<p>
				 CobInt
			</p>
		</td>
		<td>
			<p>
				 600154fcb03e775f007ef7b1547b169c
			</p>
		</td>
		<td>
			<p>
				 384a13abe42d249e354cd415c4bcbf01086deafb
			</p>
		</td>
		<td>
			<p>
				 0c85c1045899291cba47c7171599446642b87015a76d5b22f8cc51f4a6e45a90
			</p>
		</td>
	</tr>
	<tr>
		<td>
			<p>
			</p>
		</td>
		<td>
			<p>
				 6ec0edd1889897ff9b4673600f40f92f
			</p>
		</td>
		<td>
			<p>
				 4d50f1cae2acc8c92ff1f678fc1fdfdd1e770f24
			</p>
		</td>
		<td>
			<p>
				 64d16900fce924da101744edce28b9ee648192486d9062c427c17589b5f204fb
			</p>
		</td>
	</tr>
	</tbody>
	</table>
</div>
<p>
 <em>C&amp;C</em>
</p>
<p>
	 telekom-support[.]info
</p>
<p>
	 45.80.69[.]34
</p>
<h3>BIFF</h3>
<div class="table-container">
	<table class="table-article">
	<thead>
	<tr>
		<th>
			 Type
		</th>
		<th>
			 MD5
		</th>
		<th>
			 SHA1
		</th>
		<th>
			 SHA256
		</th>
	</tr>
	</thead>
	<tbody>
	<tr>
		<td>
			<p>
				 XLS-File
			</p>
		</td>
		<td>
			<p>
				 36399ebf94f66529dc72d8b2844f43dd
			</p>
		</td>
		<td>
			<p>
				 b912f222e79feadbcefe2d6ead5fab74b15b1f40
			</p>
		</td>
		<td>
			<p>
				 0aee265a022ee84e9c8b653e960559c9761a7362e1c345019a552188114b7e80
			</p>
		</td>
	</tr>
	<tr>
		<td>
			<p>
				 COM-DLL
			</p>
		</td>
		<td>
			<p>
				 862c19b2b4b6a7c97fb8627303b8f5d7
			</p>
		</td>
		<td>
			<p>
				 d3fc5f848d630ca2dc8e99b0d4dfe704b8ec1832
			</p>
		</td>
		<td>
			<p>
				 7122cf59f8a59f9a44f20fd4c83451c5c4313e0021d3f1ba9c2b1a4f39801db1
			</p>
		</td>
	</tr>
	</tbody>
	</table>
</div>
<p>
 <em>C&amp;C</em>
</p>
<p>
	 download.sabaloo[.]com
</p>
<p>
	 origin.cdn77[.]kz
</p>
<h3>New COM-DLL dropper</h3>
<div class="table-container">
	<table class="table-article">
	<thead>
	<tr>
		<th>
			 Type
		</th>
		<th>
			 MD5
		</th>
		<th>
			 SHA1
		</th>
		<th>
			 SHA256
		</th>
	</tr>
	</thead>
	<tbody>
	<tr>
		<td>
			<p>
				 COM-DLL
			</p>
		</td>
		<td>
			<p>
				 47e7212b097b5cffa60903055e3c4d5a
			</p>
		</td>
		<td>
			<p>
				 dfcd5692729e859f074b95720505f711ba7d14ac
			</p>
		</td>
		<td>
			<p>
				 c1a633a940fc4c595ebbe36823fee1b02bfd755615c51799c9f4e4320b597af1
			</p>
		</td>
	</tr>
	</tbody>
	</table>
</div>
<p>
 <em>С&amp;C</em>
</p>
<p>
	 maps.doaglas[.]com
</p>
<h2>MITRE TTPs</h2>
<div class="table-container">
	<table class="table-article">
	<thead>
	<tr>
		<th>
			 Tactic
		</th>
		<th>
			 ID
		</th>
		<th>
			 Name
		</th>
	</tr>
	</thead>
	<tbody>
	<tr>
		<td>
			<p>
				 Initial Access
			</p>
		</td>
		<td>
			<p>
				 T1193
			</p>
		</td>
		<td>
			<p>
				 Spearphishing Attachment
			</p>
		</td>
	</tr>
	<tr>
		<td>
			<p>
			</p>
		</td>
		<td>
			<p>
				 T1192
			</p>
		</td>
		<td>
			<p>
				 Spearphishing Link
			</p>
		</td>
	</tr>
	<tr>
		<td>
			<p>
				 Execution
			</p>
		</td>
		<td>
			<p>
				 T1059
			</p>
		</td>
		<td>
			<p>
				 Command-Line Interface
			</p>
		</td>
	</tr>
	<tr>
		<td>
			<p>
			</p>
		</td>
		<td>
			<p>
				 T1117
			</p>
		</td>
		<td>
			<p>
				 Regsvr32
			</p>
		</td>
	</tr>
	<tr>
		<td>
			<p>
			</p>
		</td>
		<td>
			<p>
				 T1204
			</p>
		</td>
		<td>
			<p>
				 User Execution
			</p>
		</td>
	</tr>
	<tr>
		<td>
			<p>
			</p>
		</td>
		<td>
			<p>
				 T1064
			</p>
		</td>
		<td>
			<p>
				 Scripting
			</p>
		</td>
	</tr>
	<tr>
		<td>
			<p>
				 Persistence
			</p>
		</td>
		<td>
			<p>
				 T1037
			</p>
		</td>
		<td>
			<p>
				 Logon Scripts
			</p>
		</td>
	</tr>
	<tr>
		<td>
			<p>
			</p>
		</td>
		<td>
			<p>
				 T1050
			</p>
		</td>
		<td>
			<p>
				 New Service
			</p>
		</td>
	</tr>
	<tr>
		<td>
			<p>
			</p>
		</td>
		<td>
			<p>
				 T1053
			</p>
		</td>
		<td>
			<p>
				 Scheduled Task
			</p>
		</td>
	</tr>
	<tr>
		<td>
			<p>
			</p>
		</td>
		<td>
			<p>
				 T1060
			</p>
		</td>
		<td>
			<p>
				 Registry Run Keys / Startup Folder
			</p>
		</td>
	</tr>
	<tr>
		<td>
			<p>
				 Defense Evasion
			</p>
		</td>
		<td>
			<p>
				 T1027
			</p>
		</td>
		<td>
			<p>
				 Obfuscated Files or Information
			</p>
		</td>
	</tr>
	<tr>
		<td>
			<p>
			</p>
		</td>
		<td>
			<p>
				 T1220
			</p>
		</td>
		<td>
			<p>
				 XSL Script Processing
			</p>
		</td>
	</tr>
	<tr>
		<td>
			<p>
				 Discovery
			</p>
		</td>
		<td>
			<p>
				 T1063
			</p>
		</td>
		<td>
			<p>
				 Security Software Discovery
			</p>
		</td>
	</tr>
	<tr>
		<td>
			<p>
				 Command And Control
			</p>
		</td>
		<td>
			<p>
				 T1105
			</p>
		</td>
		<td>
			<p>
				 Remote File Copy
			</p>
		</td>
	</tr>
	</tbody>
	</table>
</div>
 </article></div></div><div class="ArticleLayout_rightColumn__c8u4z"><div class="ShareBlock_container__5nb7z"><div class="Text_base__riB2c Text_type_pM__mE14b Text_theme_light__type_pM__2zLmc"><span>Share this article</span><span>:</span></div><div class="ShareBlock_icons__vIJLT"><button type="button" class="Social_icon__pVcgR"><svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="none"><path stroke="currentColor" d="M8.39 10.805a4.024 4.024 0 0 0 4.628 1.36 4.023 4.023 0 0 0 1.44-.925l2.413-2.416A4.029 4.029 0 0 0 14.012 2a4.02 4.02 0 0 0-2.83 1.13L9.8 4.507m1.81 4.688a4.024 4.024 0 0 0-4.627-1.36 4.022 4.022 0 0 0-1.44.925L3.13 11.176A4.029 4.029 0 0 0 5.988 18a4.02 4.02 0 0 0 2.83-1.13l1.375-1.377"></path></svg></button></div></div></div></div></div><div class="ArticleLayout_grid__ARjhp"><div class="ArticleLayout_rightColumns___55GM"><div class="ArticleLayout_rightColumn__c8u4z"></div></div></div></div></section><section class="PageSection_section__GxaaG Card_section__QzdVO" id="contacts"><div class="Card_contentWrapper__45uLa Card_mode_light__02f7V Card_zIndex_1__NP_2j AnyQuestions_container__KVhzR"><div class="AnyQuestions_heading__pSibU"><h1 class="AnyQuestions_title__ScrF1 Heading_base__MUnbH Heading_level_1__oOibP Heading_theme_light__level_1__7KeY7"><span>Get in touch</span></h1><div class="Text_base__riB2c Text_type_pL__A_h0d Text_theme_light__type_pL___Cab8"><span>Fill in the form and our specialists<br> will contact you shortly</span></div></div><div class="AnyQuestions_content__rdK_e"><div class="CardsSlider_root__4cbz_ AnyQuestions_radioGroupWrapper__WrSuy"><div class="CardsSlider_scrollArea__LArfW AnyQuestions_radioGroup__DBJB4"><label style="--cards-count:3" data-testid="form-tab-feedback" class="CardRadio_mode_light__Fnmg8 CardRadio_container__9oMVF CardRadio_checked__7uYOJ AnyQuestions_cardLayout__p5bqj"><input name="type" type="radio" checked="" value="feedback"/><div class="CardRadio_title__SlAzv Text_base__riB2c Text_type_postscript__I0CC_ Text_theme_light__type_postscript__JvgMb"><span>General<br> questions</span></div><div class="CardRadio_description__rzM_f Text_base__riB2c Text_type_pM__mE14b Text_theme_light__type_pM__2zLmc"><span>We're happy to answer any questions you may have.</span></div></label><label style="--cards-count:3" data-testid="form-tab-partnership" class="CardRadio_mode_light__Fnmg8 CardRadio_container__9oMVF AnyQuestions_cardLayout__p5bqj"><input name="type" type="radio" value="partnership"/><div class="CardRadio_title__SlAzv Text_base__riB2c Text_type_postscript__I0CC_ Text_theme_light__type_postscript__JvgMb"><span>Partnership</span></div><div class="CardRadio_description__rzM_f Text_base__riB2c Text_type_pM__mE14b Text_theme_light__type_pM__2zLmc"><span>Join us in making the world a safer place.</span></div></label><label style="--cards-count:3" data-testid="form-tab-pilotApplication" class="CardRadio_mode_light__Fnmg8 CardRadio_container__9oMVF AnyQuestions_cardLayout__p5bqj"><input name="type" type="radio" value="pilotApplication"/><div class="CardRadio_title__SlAzv Text_base__riB2c Text_type_postscript__I0CC_ Text_theme_light__type_postscript__JvgMb"><span>Pilot<br> application</span></div><div class="CardRadio_description__rzM_f Text_base__riB2c Text_type_pM__mE14b Text_theme_light__type_pM__2zLmc"><span>Test drive our solutions with a customized pilot program.</span></div></label></div></div><form><div class="FeedbackForm_fields__NxBGh"><div class="FeedbackForm_field__GSf0c FeedbackForm_fullWidth__SPrCb"><label class="Input_container__CtV41 Input_mode_light__DDarT"><input class="Input_input__dAKAo" placeholder="Name" type="text" autoComplete="name" maxLength="250" name="fullName" value=""/></label></div><div class="FeedbackForm_field__GSf0c"><label class="Input_container__CtV41 Input_mode_light__DDarT"><input class="Input_input__dAKAo" placeholder="Phone number" type="text" autoComplete="tel" maxLength="20" name="phone" value=""/></label></div><div class="FeedbackForm_field__GSf0c"><label class="Input_container__CtV41 Input_mode_light__DDarT"><input class="Input_input__dAKAo" placeholder="Email" type="text" autoComplete="email" maxLength="250" name="email" value=""/></label></div><div class="FeedbackForm_field__GSf0c FeedbackForm_fullWidth__SPrCb"><div class="Autocomplete_root__of0uL Select_root__qV3jk Select_mode_light__6i67a"><div class="Select_select__Wgg4m"><div class="SearchField_container__r8UBy"><input placeholder="Country" class="Input_input__dAKAo SearchField_input__OhP5T" id="headlessui-combobox-input-:R1d8qkf6:" role="combobox" type="text" aria-expanded="false" aria-autocomplete="list" data-headlessui-state=""/><button class="SearchField_icon__n277G SearchField_icon_second__tgr0q SearchField_icon_action__K_KOk" id="headlessui-combobox-button-:R2d8qkf6:" type="button" tabindex="-1" aria-haspopup="listbox" aria-expanded="false" data-headlessui-state=""></button><button class="SearchField_icon__n277G SearchField_icon_grey__v_ngf" id="headlessui-combobox-button-:R3d8qkf6:" type="button" tabindex="-1" aria-haspopup="listbox" aria-expanded="false" data-headlessui-state=""><svg width="17" height="16" viewBox="0 0 17 16" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M10.7645 11.4123C12.0858 10.3117 12.9268 8.65406 12.9268 6.79999C12.9268 3.48628 10.2405 0.799988 6.92676 0.799988C3.61305 0.799988 0.926758 3.48628 0.926758 6.79999C0.926758 10.1137 3.61305 12.8 6.92676 12.8C8.3864 12.8 9.7243 12.2788 10.7645 11.4123ZM10.7645 11.4123L14.5522 15.2" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"></path></svg></button></div></div></div></div><div class="FeedbackForm_field__GSf0c FeedbackForm_fullWidth__SPrCb"><label class="Textarea_container__HPtza Textarea_mode_light__E0Y92"><textarea id="comment" class="Textarea_textarea__MapxB" placeholder="How can we help?" maxLength="1000" name="comment"></textarea></label></div></div><div class="FeedbackForm_agrees__062n_"><label class="InputCheckbox_mode_light__1Ed_W"><input class="InputCheckbox_input__x9X51" type="checkbox" name="consentsTerms" value="false"/><div class="InputCheckbox_checkboxLabel__hXRgu Text_base__riB2c Text_type_pS__4RXUf Text_theme_light__type_pS__eERKe"><span>I give <a data-sanitize-target="_blank" href="https://global.ptsecurity.com/policies/consent" target="_blank">my&nbsp;consent to&nbsp;the processing of&nbsp;my&nbsp;personal data</a> in&nbsp;accordance with the terms of&nbsp;the <a data-sanitize-target="_blank" href="https://global.ptsecurity.com/policies/privacy-policy" target="_blank">Privacy Notice</a></span></div></label><label class="InputCheckbox_mode_light__1Ed_W"><input class="InputCheckbox_input__x9X51" type="checkbox" name="subscription" value="false"/><div class="InputCheckbox_checkboxLabel__hXRgu Text_base__riB2c Text_type_pS__4RXUf Text_theme_light__type_pS__eERKe"><span>I&nbsp;give <a data-sanitize-target="_blank" href="https://global.ptsecurity.com/policies/consent-email" target="_blank">my&nbsp;consent to&nbsp;receive marketing and&nbsp;informational messages</a></span></div></label></div><div><div class="smart-captcha"></div><button type="submit" class="Button_button__F7Ulc Button_button_size_m__cmMD_ Button_button_theme_light__W9pGX"><span><span>SEND</span></span><img alt="" loading="lazy" width="20" height="20" decoding="async" data-nimg="1" class="Button_arrow__ZXQXI" style="color:transparent" src="/_next/static/media/arrows-right.1fc87099.svg"/></button></div></form></div></div></section><footer class="Footer_wrapper__igPy4"><div class="Footer_info__BLmy7"><div class="Footer_head__3m28S"><div class="Footer_copyright__JcWnj Text_base__riB2c Text_type_pM__mE14b"><span>Copyright <mark>©</mark> 2002–2025 Positive Technologies. All rights reserved.</span></div><h2 class="Footer_heading__mQ6QG Heading_base__MUnbH Heading_level_2__qXMBH"><span>Cybersecurity market leader</span></h2><div class="Footer_additionalLinks__KyguX"><a class="Footer_additionalLink__5ONRT" target="_blank" href="https://global.ptsecurity.com/policies/terms-of-use">Legal documents</a><a class="Footer_additionalLink__5ONRT" href="https://www.ptsecurity.com/choose-region/?return_url=/analytics/pt-esc-threat-intelligence/cobalt_upd_ttps">Change region</a></div></div><nav class="Footer_nav__LBYFW"><div class="Footer_nav_col__lYnPU"><div class="NavBlock_title__7sNY5 Text_base__riB2c Text_type_pL__A_h0d"><span>Products</span></div><a class="NavBlock_list_item__wGeXz" href="/products/network-attack-discovery"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>PT NAD</span></div></a><a class="NavBlock_list_item__wGeXz" href="/products/threat-intelligence-feeds"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>PT Threat Intelligence Feeds</span></div></a><a class="NavBlock_list_item__wGeXz" href="/products/sandbox"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>PT Sandbox</span></div></a><a class="NavBlock_list_item__wGeXz" href="/products/maxpatrol-vm"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>MaxPatrol VM</span></div></a><a class="NavBlock_list_item__wGeXz" href="/products/siem"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>MaxPatrol SIEM</span></div></a><a class="NavBlock_list_item__wGeXz" href="/products/ai"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>PT Application Inspector</span></div></a><a class="NavBlock_list_item__wGeXz" href="/products/blackbox"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>PT BlackBox</span></div></a><a class="NavBlock_list_item__wGeXz" href="/products/isim"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>PT ISIM</span></div></a><a class="NavBlock_list_item__wGeXz" href="/products/mp-o2"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>MaxPatrol O2</span></div></a><a class="NavBlock_list_item__wGeXz" href="/products/edr"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>MaxPatrol EDR</span></div></a><a class="NavBlock_list_item__wGeXz" href="/products/pt-af"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>PT Application Firewall</span></div></a><a class="NavBlock_list_item__wGeXz" href="/products/cs"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>PT Container Security</span></div></a><a class="NavBlock_list_item__wGeXz" href="/products/ics"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>PT Industrial Cybersecurity Suite</span></div></a></div><div class="Footer_nav_col__lYnPU"><div class="NavBlock_title__7sNY5 Text_base__riB2c Text_type_pL__A_h0d"><span>ANALYTICS</span></div><a class="NavBlock_list_item__wGeXz" href="/analytics"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>Analytics articles</span></div></a><a class="NavBlock_list_item__wGeXz" href="/analytics/knowledge-base"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>Knowledge base</span></div></a><a class="NavBlock_list_item__wGeXz" href="/analytics/pt-esc-threat-intelligence"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>PT ESC threat intelligence</span></div></a><a class="NavBlock_list_item__wGeXz" href="/analytics/threatscape"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>Threatscape</span></div></a><a class="NavBlock_list_item__wGeXz" href="/analytics/hacker-groups"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>Hacker groups</span></div></a></div><div class="Footer_nav_col__lYnPU"><div class="NavBlock_title__7sNY5 Text_base__riB2c Text_type_pL__A_h0d"><span>COMPANY</span></div><a class="NavBlock_list_item__wGeXz" href="/about"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>About us</span></div></a><a class="NavBlock_list_item__wGeXz" href="/about/clients"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>Clients</span></div></a><a class="NavBlock_list_item__wGeXz" href="/about/contacts"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>Contacts</span></div></a><a class="NavBlock_list_item__wGeXz" href="/about/pt-in-the-media"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>PT in the Media</span></div></a><a href="https://edu.ptsecurity.com/learning-space" target="_blank" class="NavBlock_list_item__wGeXz"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>Education</span></div></a><a href="https://www.youtube.com/channel/UC9hnMfdwfLd8V5qEc-6MXXQ" target="_blank" class="NavBlock_list_item__wGeXz"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>YouTube</span></div></a><a href="https://www.linkedin.com/company/positivetechnologies/" target="_blank" class="NavBlock_list_item__wGeXz"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>LinkedIn</span></div></a><a href="https://x.com/PTsecurity_EN" target="_blank" class="NavBlock_list_item__wGeXz"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>Х</span></div></a><a href="https://www.tiktok.com/@positivetechnologies" target="_blank" class="NavBlock_list_item__wGeXz"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>TikTok</span></div></a><a href="https://vacancy.global.ptsecurity.com/" target="_blank" class="NavBlock_list_item__wGeXz"><div class="Text_base__riB2c Text_type_pL__A_h0d"><span>Vacancy</span></div></a></div></nav></div><div><img alt="" loading="lazy" width="1200" height="100" decoding="async" data-nimg="1" class="Footer_logo__cDBuS" style="color:transparent" src="https://pt-global.storage.yandexcloud.net/logo_1d137588e3.svg"/></div></footer></main></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"seo":{"title":"Cobalt: tactics and tools update","description":"\r\n\t Specialists from PT Expert Security Center has been monitoring the activity of the Cobalt group since 2016. Today, the group is attacking financial institutions around the world. Over the past year, the Cobalt group has not only modified its main CobInt tools and COM-DLL dropper in conjunction with the more_eggs JavaScript backdoor but also used new delivery methods and new techniques to bypass protection at the initial stage of the attack. In this article, we would like to talk about new group tactics, delivery methods, and changes mainly in malware.\r\n"},"headerData":{"logoImage":{"src":"https://pt-global.storage.yandexcloud.net/logo_header_1bd424ccc4.svg","width":249,"height":22,"alt":""},"nav":[{"type":"product-menu","data":{"title":"Products","button":{"link":"/products","text":"Jump to section","targetBlank":false},"items":[{"description":"NDR system for detecting hidden threats on the perimeter and inside the network","link":"/products/network-attack-discovery","title":"PT NAD"},{"description":"Advanced sandbox with customizable virtual environments","link":"/products/sandbox","title":"PT Sandbox"},{"description":"Next-generation vulnerability management system","link":"/products/maxpatrol-vm","title":"MaxPatrol VM"},{"description":"Pinpoint threat detection solution for your infrastructure","link":"/products/siem","title":"MaxPatrol SIEM"},{"description":"Source-code analysis tool","link":"/products/ai","title":"PT Application Inspector"},{"description":"Dynamic application security testing tool","link":"/products/blackbox","title":"PT BlackBox"},{"description":"Cyberthreat detection and incident response in ICS","link":"/products/isim","title":"PT ISIM"},{"description":"Autopilot for result-driven cybersecurity","link":"/products/mp-o2/","title":"MaxPatrol O2"},{"description":"Protects your endpoints","link":"/products/edr","title":"MaxPatrol EDR"},{"description":"A web application firewall","link":"/products/pt-af","title":"PT Application Firewall"},{"description":"Innovative solution for the comprehensive protection","link":"/products/cs","title":"PT Container Security"},{"description":"The first comprehensive platform for cyberthreat detection and response in industrial systems","link":"/products/ics","title":"PT Industrial Cybersecurity Suite"},{"description":"Data feeds collected by Positive Technologies experts for threat detection","link":"/products/threat-intelligence-feeds","title":"PT Threat Intelligence Feeds"}]}},{"type":"product-menu","data":{"title":"Services","button":{"link":"/services","text":"Jump to section","targetBlank":false},"items":[{"description":"","link":"/services/esc","title":"ESC"}]}},{"type":"product-menu","data":{"title":"Education","button":null,"items":[{"description":"","link":"https://edu.ptsecurity.com/learning-space","title":"Positive Education Cybersecurity Academy"},{"description":"","link":"https://edu.ptsecurity.com/pros-programs","title":"Cybersecurity programs for Professionals"},{"description":"","link":"https://edu.ptsecurity.com/c-level-programs","title":"Cybersecurity programs for Executives"},{"description":"","link":"https://edu.ptsecurity.com/product-courses","title":"Product courses"}]}},{"type":"link","data":{"link":"/about/news/","title":"News \u0026 events"}},{"type":"product-menu","data":{"title":"Analytics","button":{"link":"/analytics","text":"Jump to section","targetBlank":false},"items":[{"description":"","link":"/analytics/knowledge-base","title":"Knowledge base"},{"description":"","link":"/analytics/pt-esc-threat-intelligence","title":"PT ESC threat intelligence"},{"description":"","link":"/analytics/threatscape","title":"Threatscape"},{"description":"","link":"/analytics/hacker-groups","title":"Hacker groups"}]}},{"type":"product-menu","data":{"title":"About us","button":{"link":"/about","text":"Jump to section","targetBlank":false},"items":[{"description":"","link":"/about/clients","title":"Clients"},{"description":"","link":"/about/contacts","title":"Contacts"},{"description":"","link":"/about/pt-in-the-media","title":"PT in the Media"},{"description":"","link":"https://vacancy.global.ptsecurity.com/","title":"Vacancy"}]}}],"searchInputPlaceholder":"Search on ptsecurity.com"},"articleData":{"content":[],"deprecatedDetailText":"\u003carticle\u003e\r\n\u003cp\u003e\r\n\t The PT Expert Security Center (PT ESC) has been monitoring the Cobalt group since \u003ca href=\"https://www.ptsecurity.com/upload/corporate/ww-en/analytics/Cobalt-Snatch-eng.pdf\" target=\"_blank\"\u003e2016\u003c/a\u003e. Currently the group targets financial organizations around the world. Two years ago, for example, their attacks caused over $14 million in damage. Over the last four years, we have \u003ca href=\"https://www.ptsecurity.com/ww-en/analytics/cobalt-strikes-back-an-evolving-multinational-threat-to-finance/\" target=\"_blank\"\u003ereleased\u003c/a\u003e several \u003ca href=\"https://www.ptsecurity.com/ww-en/analytics/new-bank-attacks/\" target=\"_blank\"\u003ereports on attacks\u003c/a\u003e linked to the group.\r\n\u003c/p\u003e\r\n\u003cp\u003e\r\n\t Over the last year, the group has not only modified its flagship tools CobInt and COM-DLL-Dropper in conjunction with the more_eggs JavaScript backdoor, but also started using new methods to deliver malware and bypass security in the initial stages of the kill chain. As a group whose activities have long been of interest to security researchers all over the world, the attackers are highly motivated to stay one step ahead.\r\n\u003c/p\u003e\r\n \u003cfigure\u003e \u003cimg alt=\"Figure 1. Number of Cobalt attacks detected by PT ESC\" src=\"/upload/corporate/ww-en/images/esc/cobalt-2020/01_en.PNG\"\u003e \u003cfigcaption\u003eFigure 1. Number of Cobalt attacks detected by PT ESC\u003c/figcaption\u003e\u003c/figure\u003e\r\n\u003cp\u003e\r\n\t In 2019, the group conducted an average of three attacks per month. Although we do not know whether the attacks were successful, such frequency may indicate that the criminals possess substantial financial resources allowing them to maintain their infrastructure, update malware, and adopt new techniques.\r\n\u003c/p\u003e\r\n\u003cp\u003e\r\n\t The following histogram shows that in late 2019 the group started favoring CobInt over COM-DLL-Dropper.\r\n\u003c/p\u003e\r\n \u003cfigure\u003e \u003cimg alt=\" Figure 2. Number of attacks using COM-DLL-Dropper and CobInt in 2019\" src=\"/upload/corporate/ww-en/images/esc/cobalt-2020/02_3_en.png\"\u003e \u003cfigcaption\u003e Figure 2. Number of attacks using COM-DLL-Dropper and CobInt in 2019\u003c/figcaption\u003e\u003c/figure\u003e\r\n\u003cp\u003e\r\n\t The more_eggs JavaScript backdoor is detected by the ETPro ruleset, including in public sandboxes, whereas CobInt traffic does not trigger security mechanisms. In addition, CobInt downloads the main library from the command and control (C2) server directly to memory, while COM-DLL-Dropper saves to disk the obfuscated more_eggs, which is then executed in memory. Therefore, COM-DLL-Dropper leaves more artifacts on the infected machine.\r\n\u003c/p\u003e\r\n\u003ch2\u003e1. European Central Bank phishing website\u003c/h2\u003e\r\n\u003cp\u003e\r\n\t In late August 2019, we detected a CobInt attack that presumably targeted European financial institutions. We do not know whether the attack was successful. CobInt was dropped by a custom NSIS installer. We detected three versions of the dropper: for Chrome, Firefox, and Opera. Each dropper contained the same CobInt version and a browser-specific installer. Once launched, the dropper saved CobInt to the %TEMP% folder and then ran CobInt and the installer. Malware analysis proved that the droppers were distributed from the phishing website ecb-european[.]eu.\r\n\u003c/p\u003e\r\n \u003cfigure\u003e \u003cimg alt=\"Figure 3. Phishing website main page\" src=\"/upload/corporate/ww-en/images/esc/cobalt-2020/03.png\"\u003e \u003cfigcaption\u003eFigure 3. Phishing website main page\u003c/figcaption\u003e\u003c/figure\u003e\r\n\u003cp\u003e\r\n\t The site was a copy of the European Central Bank website, except for a pop-up window that asked visitors to update the browser.\r\n\u003c/p\u003e\r\n \u003cfigure\u003e \u003cimg alt=\"Figure 4. Pop-up window on the fake ECB website\" src=\"/upload/corporate/ww-en/images/esc/cobalt-2020/04.png\"\u003e \u003cfigcaption\u003eFigure 4. Pop-up window on the fake ECB website\u003c/figcaption\u003e\u003c/figure\u003e\r\n\u003cp\u003e\r\n\t Visitors who fell for the ruse downloaded the dropper to their computer. The page source code contained a link to the script that displayed the pop-up window.\r\n\u003c/p\u003e\r\n \u003cfigure\u003e \u003cimg alt=\"Figure 5. Link to malicious script\" src=\"/upload/corporate/ww-en/images/esc/cobalt-2020/05.png\"\u003e \u003cfigcaption\u003eFigure 5. Link to malicious script\u003c/figcaption\u003e\u003c/figure\u003e\r\n\u003cp\u003e\r\n\t The configuration strings in the script contain links for four droppers (we could not obtain the first one) and allow creating links for Safari, Edge, and Internet Explorer. The strings also show the window start time after loading the page, how many times the window will be shown to a user, type of device on which the window will be displayed, and which banner will be shown to the user. In addition, the script detects bots, crawlers, and spiders.\r\n\u003c/p\u003e\r\n \u003cfigure\u003e \u003cimg alt=\"Figure 6. Malicious script parameters\" src=\"/upload/corporate/ww-en/images/esc/cobalt-2020/06.png\"\u003e \u003cfigcaption\u003eFigure 6. Malicious script parameters\u003c/figcaption\u003e\u003c/figure\u003e\r\n\u003cp\u003e\r\n\t Here are alternative windows contained in the script:\r\n\u003c/p\u003e\r\n \u003cfigure\u003e \u003cimg alt=\"Figure 7. Alternative window specified in the script parameters\" src=\"/upload/corporate/ww-en/images/esc/cobalt-2020/07.png\"\u003e \u003cfigcaption\u003eFigure 7. Alternative window specified in the script parameters\u003c/figcaption\u003e\u003c/figure\u003e \u003cfigure\u003e \u003cimg alt=\"Figure 8. Alternative window specified in the script parameters\" src=\"/upload/corporate/ww-en/images/esc/cobalt-2020/08.png\"\u003e \u003cfigcaption\u003eFigure 8. Alternative window specified in the script parameters\u003c/figcaption\u003e\u003c/figure\u003e\r\n\u003cp\u003e\r\n\t We do not know how the user landed on this website. Most likely, the user would be a victim of a phishing attack like many of those performed by Cobalt.\r\n\u003c/p\u003e\r\n\u003cp\u003e\r\n\t The framework in question is not unique. We believe that Cobalt purchased it on a darkweb forum. In an \u003ca href=\"https://www.zscaler.com/blogs/research/netsupport-rat-installed-fake-update-notices\" target=\"_blank\"\u003earticle\u003c/a\u003e from November 2019, Zscaler described a similar scenario for spreading NetSupport RAT. The framework was placed on compromised sites, which showed visitors a corresponding pop-up window.\r\n\u003c/p\u003e\r\n\u003cp\u003e\r\n\t In yet another case, the malicious file Login_Details.img was also distributed from the site ecb-european[.]eu. Our colleagues from Group-IB have provided a \u003ca href=\"https://www.group-ib.com/blog/cobaltphishing\" target=\"_blank\"\u003edetailed analysis\u003c/a\u003e of the malware.\r\n\u003c/p\u003e\r\n\u003ch2\u003e2. Malicious VHD\u003c/h2\u003e\r\n\u003cp\u003e\r\n\t In late December 2019, we detected another CobInt loader used by Cobalt. The loader container was unusual. It was a virtual hard disk (VHD), presumably distributed by email.\r\n\u003c/p\u003e\r\n\u003cp\u003e\r\n\t The VHD format was originally developed by Connectix for their Virtual PC product. Microsoft acquired the product in 2003 and renamed it Microsoft Virtual PC. In 2005, the format became available to the public. Microsoft started using the VHD format in Hyper-V, the hypervisor-based virtualization technology. A VHD file may contain anything found on a physical hard drive, such as disk partitions and a file system with folders and files.\r\n\u003c/p\u003e\r\n\u003cp\u003e\r\n\t Windows 7 and newer systems include the ability to manually mount VHD files, such as via the MMC console. Starting with Windows 8, a user can mount a VHD by simply double-clicking the file. A mounted VHD disk image appears to Windows just like a normal hard disk.\r\n\u003c/p\u003e\r\n\u003cp\u003e\r\n\t In September 2019, the CERT/CC Blog published an article about the danger of VHD files and their possible use as an attack \u003ca href=\"https://insights.sei.cmu.edu/cert/2019/09/the-dangers-of-vhd-and-vhdx-files.html\" target=\"_blank\"\u003evector\u003c/a\u003e. The researcher Will Dorman showed that neither antivirus software nor the Mark of the Web alerts users about the potential harm of the contents of a VHD file downloaded from the Internet. Dorman created a malicious VHD container with EICAR inside and uploaded the result to VirusTotal. The malware was not detected by any antivirus engines. A VHD file is critical for operation of Hyper-V virtual machines. If this file is damaged or blocked, the virtual machine will not run. This may explain the rarity, or even absence, of antivirus detection. In documentation, Microsoft \u003ca href=\"https://support.microsoft.com/en-gb/help/3105657/recommended-antivirus-exclusions-for-hyper-v-hosts\" target=\"_blank\"\u003erecommends\u003c/a\u003e excluding VHD files from antivirus scanning (as automatically is the case in Windows Defender). Otherwise, Hyper-V is susceptible to issues.\r\n\u003c/p\u003e\r\n\u003cp\u003e\r\n\t It is possible that Cobalt used the findings of this research for their own purposes. Their VHD file was also not detected by any antivirus software when it first appeared on VirusTotal. Half a year later, the file was detected by just one antivirus engine, which is still very low.\r\n\u003c/p\u003e\r\n \u003cfigure\u003e \u003cimg alt=\"Figure 9. Cobalt VHD detection level at the moment of attack\" src=\"/upload/corporate/ww-en/images/esc/cobalt-2020/09.png\"\u003e \u003cfigcaption\u003eFigure 9. Cobalt VHD detection level at the moment of attack\u003c/figcaption\u003e\u003c/figure\u003e\r\n\u003cp\u003e\r\n\t The VHD contains two CobInt files. One file has two invalid Google certificates appended to it in order to reduce the odds of detection.\r\n\u003c/p\u003e\r\n \u003cfigure\u003e \u003cimg alt=\" Figure 10. Certificates appended to a CobInt file\" src=\"/upload/corporate/ww-en/images/esc/cobalt-2020/10_en.PNG\"\u003e \u003cfigcaption\u003e Figure 10. Certificates appended to a CobInt file\u003c/figcaption\u003e\u003c/figure\u003e\r\n\u003cp\u003e\r\n\t Since VHD is in essence a container with a file system, one can search for artifacts inside VHD files. For example, we found an image with text of a fake HSBC antifraud message in the unallocated space of a VHD file.\r\n\u003c/p\u003e\r\n \u003cfigure\u003e \u003cimg alt=\"Figure 11. Image in unallocated space of a VHD file\" src=\"/upload/corporate/ww-en/images/esc/cobalt-2020/11.png\"\u003e \u003cfigcaption\u003eFigure 11. Image in unallocated space of a VHD file\u003c/figcaption\u003e\u003c/figure\u003e\r\n\u003cp\u003e\r\n\t The attackers may have inadvertently left the artifact when reallocating space in the container: the same image was used as the CobInt icon and stored in the group's resources.\r\n\u003c/p\u003e\r\n\u003ch3\u003e2.1. CobInt analysis\u003c/h3\u003e\r\n\u003cp\u003e\r\n\t Once the VHD is mounted, a user must manually run one of the files. The two files are identical in terms of functions. When run, either of the CobInt files downloads the main library from the C2 server as an HTML file.\r\n\u003c/p\u003e\r\n\u003cp\u003e\r\n\t There are a few changes in comparison to the algorithm \u003ca href=\"https://www.proofpoint.com/us/threat-insight/post/new-modular-downloaders-fingerprint-systems-part-3-cobint\" target=\"_blank\"\u003edescribed by ProofPoint in 2018\u003c/a\u003e:\r\n\u003c/p\u003e\r\n \u003cfigure\u003e \u003cimg alt=\"Figure 12. Example of obfuscation of the main library\" src=\"/upload/corporate/ww-en/images/esc/cobalt-2020/12.png\"\u003e \u003cfigcaption\u003eFigure 12. Example of obfuscation of the main library\u003c/figcaption\u003e\u003c/figure\u003e\r\n\u003cp\u003e\r\n\t First, all tags are removed and their contents are ignored.\r\n\u003c/p\u003e\r\n \u003cfigure\u003e \u003cimg alt=\"Figure 13. Tag removal\" src=\"/upload/corporate/ww-en/images/esc/cobalt-2020/13.png\"\u003e \u003cfigcaption\u003eFigure 13. Tag removal\u003c/figcaption\u003e\u003c/figure\u003e\r\n\u003cp\u003e\r\n\t Next, periods, commas, and spaces are processed. All characters after these symbols are uppercased (the value 0x20 is subtracted).\r\n\u003c/p\u003e\r\n \u003cfigure\u003e \u003cimg alt=\"Figure 14. Removing unnecessary characters and switching letters to uppercase\" src=\"/upload/corporate/ww-en/images/esc/cobalt-2020/14.png\"\u003e \u003cfigcaption\u003eFigure 14. Removing unnecessary characters and switching letters to uppercase\u003c/figcaption\u003e\u003c/figure\u003e\r\n\u003cp\u003e\r\n\t Next, data is decoded from Base64 and decrypted by XOR with a 4-byte key that is initialized with the preceding value of the decrypted data at each iteration. At each iteration, the current round's 4 bytes are subtracted from those of the previous round, after which the key is the 4-byte value of the input buffer of the previous round.\r\n\u003c/p\u003e\r\n \u003cfigure\u003e \u003cimg alt=\"Figure 15. First XOR level\" src=\"/upload/corporate/ww-en/images/esc/cobalt-2020/15.png\"\u003e \u003cfigcaption\u003eFigure 15. First XOR level\u003c/figcaption\u003e\u003c/figure\u003e\r\n\u003cp\u003e\r\n\t Once decryption finishes, the second-stage decryptor takes over. In essence, it consists of an XOR decryption cycle using a 4-byte key that is the same for the entire stage. The output of this stage will be a .dll library, which is the payload.\r\n\u003c/p\u003e\r\n\u003cp\u003e\r\n\t Data decoded from Base64 is shown in Figure 16. A 4-byte preset for the first decryptor is highlighted in red and will remain the same during the second stage. The rest of the data is highlighted in yellow.\r\n\u003c/p\u003e\r\n \u003cfigure\u003e \u003cimg alt=\"Figure 16. Data decoded from Base64\" src=\"/upload/corporate/ww-en/images/esc/cobalt-2020/16.png\"\u003e \u003cfigcaption\u003eFigure 16. Data decoded from Base64\u003c/figcaption\u003e\u003c/figure\u003e\r\n\u003cp\u003e\r\n\t The picture changes after decryption (Figure 17). The encryption key is clearly visible due to a long series of zeros in the executable file that, after encryption, contain the keystream in pure form.\r\n\u003c/p\u003e\r\n \u003cfigure\u003e \u003cimg alt=\"Figure 17. Data after removal of the first XOR level\" src=\"/upload/corporate/ww-en/images/esc/cobalt-2020/17.png\"\u003e \u003cfigcaption\u003eFigure 17. Data after removal of the first XOR level\u003c/figcaption\u003e\u003c/figure\u003e\r\n\u003cp\u003e\r\n\t The second decryption gives us a valid PE file (Figure 18). We could not figure out the purpose of the first eight bytes: they are not used anywhere in the loader.\r\n\u003c/p\u003e\r\n \u003cfigure\u003e \u003cimg alt=\"Figure 18. Deobfuscated library\" src=\"/upload/corporate/ww-en/images/esc/cobalt-2020/18.png\"\u003e \u003cfigcaption\u003eFigure 18. Deobfuscated library\u003c/figcaption\u003e\u003c/figure\u003e\r\n\u003ch3\u003e2.2. Main library analysis\u003c/h3\u003e\r\n\u003cp\u003e\r\n\t Once an event is created and the necessary parameters are initialized, the domain is decrypted. Then the function for generating the remaining part of the address is called.\r\n\u003c/p\u003e\r\n \u003cfigure\u003e \u003cimg alt=\"Figure 19. Algorithm for generating remaining part of the address\" src=\"/upload/corporate/ww-en/images/esc/cobalt-2020/19.png\"\u003e \u003cfigcaption\u003eFigure 19. Algorithm for generating remaining part of the address\u003c/figcaption\u003e\u003c/figure\u003e\r\n\u003cp\u003e\r\n\t After the full C2 server address is generated, the library decrypts the necessary parameters to create HTTP fields, adds them to a request, and sends the request to the server. The server response contains plugins that the library loads into its address space using ReflectiveLoader.\r\n\u003c/p\u003e\r\n\u003ch3\u003e2.3. Decryption of plugins\u003c/h3\u003e\r\n\u003cp\u003e\r\n\t Like the main library, the plugins are sent by the server as HTML pages. The first stage of input transformation is similar to what happens during the library download. The difference is that all periods, commas, and spaces are ignored, and all characters are lowercased.\r\n\u003c/p\u003e\r\n\u003cp\u003e\r\n\t After the initial transformation, the obtained data is decoded from a–z to 0x00—0xff. For this, a previously unseen decoding procedure is used. It is based on transforming input values depending on the current value, previous value (in some cases), and values of the global counter.\r\n\u003c/p\u003e\r\n \u003cfigure\u003e \u003cimg alt=\"Figure 20. Plugin decoding algorithm\" src=\"/upload/corporate/ww-en/images/esc/cobalt-2020/20.png\"\u003e \u003cfigcaption\u003eFigure 20. Plugin decoding algorithm\u003c/figcaption\u003e\u003c/figure\u003e\r\n\u003cp\u003e\r\n\t The decoding is followed by two decryption cycles.\r\n\u003c/p\u003e\r\n \u003cfigure\u003e \u003cimg alt=\"Figure 21. First decryption cycle\" src=\"/upload/corporate/ww-en/images/esc/cobalt-2020/21.png\"\u003e \u003cfigcaption\u003eFigure 21. First decryption cycle\u003c/figcaption\u003e\u003c/figure\u003e\r\n\u003cp\u003e\r\n\t The first decryption key is in the application code, hard-coded at an offset that takes only two values.\r\n\u003c/p\u003e\r\n\u003cp\u003e\r\n\t To carry out the second decryption cycle, the last byte of data is read. This byte is the length of the encryption key for the second cycle. The file is read at this number of bytes (plus one) from the end. After the key is read, the data is decrypted, except for the key itself. In Figure 22, the key length is highlighted in red and the key itself is highlighted in yellow.\r\n\u003c/p\u003e\r\n \u003cfigure\u003e \u003cimg alt=\"Figure 22. XOR key example\" src=\"/upload/corporate/ww-en/images/esc/cobalt-2020/22.png\"\u003e \u003cfigcaption\u003eFigure 22. XOR key example\u003c/figcaption\u003e\u003c/figure\u003e\r\n\u003cp\u003e\r\n\t The last stage is decryption with a 4-byte key, which is also easily obtained by analyzing the series of zeros in the PE header.\r\n\u003c/p\u003e\r\n \u003cfigure\u003e \u003cimg alt=\"Figure 23. XOR key in encrypted data\" src=\"/upload/corporate/ww-en/images/esc/cobalt-2020/23.png\"\u003e \u003cfigcaption\u003eFigure 23. XOR key in encrypted data\u003c/figcaption\u003e\u003c/figure\u003e\r\n\u003cp\u003e\r\n\t Our analysis detected two types of downloaded plugins: one that steals the names of running processes plus a screen capture module. Both plugins use standard WinAPIs to obtain data, as well as the same function as the main library in the export for reflective process loading.\r\n\u003c/p\u003e\r\n\u003ch3\u003e2.4. Traffic decryption\u003c/h3\u003e\r\n\u003cp\u003e\r\n\t The library sends the data collected by the plugins to the server.\r\n\u003c/p\u003e\r\n\u003cp\u003e\r\n\t Here is an example of traffic:\r\n\u003c/p\u003e\r\n \u003cfigure\u003e \u003cimg alt=\"Figure 24. Encoded data collected by plugin\" src=\"/upload/corporate/ww-en/images/esc/cobalt-2020/24_1.png\"\u003e \u003cfigcaption\u003eFigure 24. Encoded data collected by plugin\u003c/figcaption\u003e\u003c/figure\u003e\r\n\u003cp\u003e\r\n\t First, the traffic is encrypted by a randomly generated key of arbitrary length. The key is inserted into the packet with indication of its length.\r\n\u003c/p\u003e\r\n\u003cp\u003e\r\n\t Next, the data is encrypted with a hard-coded 64-byte key, the same one that was used to decrypt the library. After that, the same encoding algorithm is applied. An equals sign (=) and the generated sequence of 8 to 16 a–z characters are added to the beginning.\r\n\u003c/p\u003e\r\n\u003cp\u003e\r\n\t Example of decoded and decrypted traffic from the previous packet:\r\n\u003c/p\u003e\r\n \u003cfigure\u003e \u003cimg alt=\"Figure 25. Decoded data\" src=\"/upload/corporate/ww-en/images/esc/cobalt-2020/25_1.png\"\u003e \u003cfigcaption\u003eFigure 25. Decoded data\u003c/figcaption\u003e\u003c/figure\u003e\r\n\u003cp\u003e\r\n\t Packet creation and transformation function:\r\n\u003c/p\u003e\r\n \u003cfigure\u003e \u003cimg alt=\"Figure 26. Algorithm for creating packet with data\" src=\"/upload/corporate/ww-en/images/esc/cobalt-2020/26.png\"\u003e \u003cfigcaption\u003eFigure 26. Algorithm for creating packet with data\u003c/figcaption\u003e\u003c/figure\u003e\r\n\u003ch2\u003e3. BIFF macro\u003c/h2\u003e\r\n\u003cp\u003e\r\n\t In March 2020, we detected an XLS document from Cobalt that downloaded and ran the COM-DLL-Dropper. The document contained the rather old Excel 4.0 macro format and was almost invisible to antivirus software (1 positive verdict out of 60 on VirusTotal).\r\n\u003c/p\u003e\r\n \u003cfigure\u003e \u003cimg alt=\"Figure 27. Number of antivirus verdicts on VirusTotal during first upload of the file with Excel 4.0 macro\" src=\"/upload/corporate/ww-en/images/esc/cobalt-2020/27.png\"\u003e \u003cfigcaption\u003eFigure 27. Number of antivirus verdicts on VirusTotal during first upload of the file with Excel 4.0 macro\u003c/figcaption\u003e\u003c/figure\u003e\r\n\u003cp\u003e\r\n\t This macro standard is 20 years old. The standard is peculiar in that the macro is stored in worksheet cells (not stored in a VBA project), and the worksheet itself can be hidden in Excel. The macro therefore will not be in a VBA stream, but in a BIFF (Binary Interchange File Format) record.\r\n\u003c/p\u003e\r\n\u003cp\u003e\r\n\t If we open the document in Excel, we see one worksheet and no VBA project macros. However, Excel all the same detects the macro and blocks it from running.\r\n\u003c/p\u003e\r\n\u003cp\u003e\r\n\t The olevba3.py utility from oletools can be used to detect this macro.\r\n\u003c/p\u003e\r\n \u003cfigure\u003e \u003cimg alt=\"Figure 28. Result of olevba3.py executiona\" src=\"/upload/corporate/ww-en/images/esc/cobalt-2020/28.png\"\u003e \u003cfigcaption\u003eFigure 28. Result of olevba3.py execution\u003c/figcaption\u003e\u003c/figure\u003e\r\n\u003cp\u003e\r\n\u003c/p\u003e\r\n By running the utility, we see that one of the document worksheets has the status \"very hidden\" and is of the Excel 4.0 macro type. Because of this status, the worksheet will be invisible in the Excel interface and, what's more, it cannot be made visible from the interface either. It can only be made visible by Visual Basic or by manually modifying the document's bytes.\r\n\u003cp\u003e\r\n\u003c/p\u003e\r\n\u003cp\u003e\r\n \u003ca href=\"https://www.aldeid.com/wiki/BiffView\" target=\"_blank\"\u003eThe BiffView utility\u003c/a\u003e provides a more workable view of the BIFF structure. After parsing the initial document, we see that a page named sygfdfdfdesie has the attribute \"very hidden.\" We change this parameter to 1 or 0 in a hex editor.\r\n\u003c/p\u003e\r\n \u003cfigure\u003e \u003cimg alt=\"Figure 29. Structure of malicious document worksheets\" src=\"/upload/corporate/ww-en/images/esc/cobalt-2020/29_en.PNG\"\u003e \u003cfigcaption\u003eFigure 29. Structure of malicious document worksheets\u003c/figcaption\u003e\u003c/figure\u003e\r\n\u003cp\u003e\r\n\t When the initial document is opened in the Name Manager, one of the formulas runs automatically:\r\n\u003c/p\u003e\r\n \u003cfigure\u003e \u003cimg alt=\"Figure 30. Macro formula that runs when the document is opened\" src=\"/upload/corporate/ww-en/images/esc/cobalt-2020/30_en.PNG\"\u003e \u003cfigcaption\u003eFigure 30. Macro formula that runs when the document is opened\u003c/figcaption\u003e\u003c/figure\u003e\r\n\u003cp\u003e\r\n\t The initial formula launches a long chain of commands, such as CONCATENATE, RUN, CHAR, and CALL, which will lead to the loading and launch of COM-DLL-Dropper. The commands are scattered across the Excel cells, complicating analysis.\r\n\u003c/p\u003e\r\n\u003cp\u003e\r\n\u003c/p\u003e\r\n \u003cfigure\u003e \u003cimg alt=\"Figure 31. Macro formulas leading to loading and launch of COM-DLL-Dropper\" src=\"/upload/corporate/ww-en/images/esc/cobalt-2020/26.png\"\u003e \u003cfigcaption\u003eFigure 31. Macro formulas leading to loading and launch of COM-DLL-Dropper\u003c/figcaption\u003e\u003c/figure\u003e\r\n\u003ch2\u003e4. COM-DLL-Dropper analysis\u003c/h2\u003e\r\n\u003cp\u003e\r\n\t In early April 2020, we detected a new version of COM-DLL-Dropper. Its functions are different from everything we had seen before. However, the more_eggs JavaScript backdoor payload remained the same.\r\n\u003c/p\u003e\r\n\u003cp\u003e\r\n\t Cobalt first started using COM-DLL-Dropper in the summer of 2017 and is still using it to deliver more_eggs, which is contained in the dropper in encrypted and archived form.\r\n\u003c/p\u003e\r\n\u003cp\u003e\r\n\t A few facts about the dropper:\r\n\u003c/p\u003e\r\n\u003cul\u003e\r\n\t\u003cli\u003eIt is written completely in PureBasic.\u003c/li\u003e\r\n\t\u003cli\u003eIt uses numerous anti-analysis techniques.\u003c/li\u003e\r\n\t\u003cli\u003eIt contains an encrypted and archived JavaScript loader, JavaScript backdoor, and a legitimate utility for modifying the command line to launch more_eggs.\u003c/li\u003e\r\n\t\u003cli\u003eIt has a built-in obfuscator for the hard-coded JavaScript backdoor and JavaScript loader\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003e4.1. PE file external structure\u003c/h3\u003e\r\n\u003cp\u003e\r\n\t All the studied items are PE-DLL files to be registered by regsvr32. In addition to exports called by regsvr32, each sample has different sets of exports typical of legitimate DLL files. Cobalt attempted to mask COM-DLL-Dropper by using third-party exports. Figure 32 shows the most popular exports used in the malware files (total of 249 unique exports).\r\n\u003c/p\u003e\r\n \u003cfigure\u003e \u003cimg alt=\"Figure 32. Most popular COM-DLL dropper exports\" src=\"/upload/corporate/ww-en/images/esc/cobalt-2020/32.png\"\u003e \u003cfigcaption\u003eFigure 32. Most popular COM-DLL dropper exports\u003c/figcaption\u003e\u003c/figure\u003e\r\n\u003cp\u003e\r\n\t These exports contain stubs that generally do not actually do anything. Judging by the names of the exports, the droppers were masked to resemble media application libraries. In 2019, the malware was updated with the DllInstall export, which is also called by regsvr32, and the main dropper code was moved to the export.\r\n\u003c/p\u003e\r\n\u003cp\u003e\r\n\t Before describing the malware code, we should touch on the PureBasic code. The information we provide here is the result of analyzing malware samples. We did not study the compiler itself and therefore are forced to make certain assumptions. However, the described entities helped us in our analysis, which is why we are sharing them here. All the names in screenshots were made up for the purposes of interpreting the malware code.\r\n\u003c/p\u003e\r\n\u003cp\u003e\r\n\t Our analysis requires two entities: strings and object arrays. PureBasic strings are stored in a special buffer. They are allocated and released without using a system API. Figure 33 shows the process of string allocation. During program initialization, a separate heap is created for strings by calling HeapCreate().\r\n\u003c/p\u003e\r\n \u003cfigure\u003e \u003cimg alt=\"Figure 33. String workings\" src=\"/upload/corporate/ww-en/images/esc/cobalt-2020/33.png\"\u003e \u003cfigcaption\u003eFigure 33. String workings\u003c/figcaption\u003e\u003c/figure\u003e\r\n\u003cp\u003e\r\n\t A common pattern for working with this entity is as follows:\r\n\u003c/p\u003e\r\n\u003col\u003e\r\n\t\u003cli\u003eAllocate a string to storage from a constant.\u003c/li\u003e\r\n\t\u003cli\u003eOperate on the string.\u003c/li\u003e\r\n\t\u003cli\u003eUpdate the global string which is usually allocated on the heap. After the update is completed, move back the node index. This operation is somewhat similar to pop().\u003c/li\u003e\r\n\u003c/ol\u003e\r\n\u003cp\u003e\r\n\t The string storage structures do not allow storing the size of the added string. Instead, before starting any operation with the string, the program saves the previous index of the node and then passes it to the update operation. The difference between the indices is the string size.\r\n\u003c/p\u003e\r\n\u003cp\u003e\r\n\t We will not describe object arrays here in detail; suffice it to say that a special header before each array stores information about the size, type, and number of elements. The header occupies 18h bytes. Therefore, the space allocated for the array of objects can be calculated as \u003cem\u003esize of element × number of elements + 18h\u003c/em\u003e.\r\n\u003c/p\u003e\r\n\u003cp\u003e\r\n\t To get a clearer picture, refer to this description of functions that are presented in the screenshots a bit later.\r\n\u003c/p\u003e\r\n\u003ch4\u003eTable 1 Function Description\u003c/h4\u003e\r\n\u003cdiv class=\"table-container\"\u003e\r\n\t\u003ctable class=\"table-article\"\u003e\r\n\t\u003cthead\u003e\r\n\t\u003ctr\u003e\r\n\t\t\u003cth\u003e\r\n\t\t\t Function\r\n\t\t\u003c/th\u003e\r\n\t\t\u003cth\u003e\r\n\t\t\t Description\r\n\t\t\u003c/th\u003e\r\n\t\u003c/tr\u003e\r\n\t\u003c/thead\u003e\r\n\t\u003ctbody\u003e\r\n\t\u003ctr\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t ObjectManager::AllocateObjectArray\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t Object array is allocated\r\n\t\t\u003c/td\u003e\r\n\t\u003c/tr\u003e\r\n\t\u003ctr\u003e\r\n\t\u003c/tr\u003e\r\n\t\u003ctr\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t ObjectArray::ReleaseObjectArray\r\n\t\t\t\u003c/p\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t ObjectManager::FreeObject\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t Object array is released\r\n\t\t\u003c/td\u003e\r\n\t\u003c/tr\u003e\r\n\t\u003ctr\u003e\r\n\t\u003c/tr\u003e\r\n\t\u003ctr\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t ObjectManager::GetStringObject\r\n\t\t\t\u003c/p\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t ObjectManager::ConcatenationWithStringObject\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t Create a string in storage\r\n\t\t\u003c/td\u003e\r\n\t\u003c/tr\u003e\r\n\t\u003ctr\u003e\r\n\t\u003c/tr\u003e\r\n\t\u003ctr\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t ObjectManager::PopStringObject\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t Update global string\r\n\t\t\u003c/td\u003e\r\n\t\u003c/tr\u003e\r\n\t\u003c/tbody\u003e\r\n\t\u003c/table\u003e\r\n\u003c/div\u003e\r\n\u003ch3\u003e4.2. Anti-analysis\u003c/h3\u003e\r\n\u003cp\u003e\r\n\t To find the needed API functions, non-standard hash sums obtained from the functions' names are used. Each hash sum is obtained by taking the CRC32 value and then performing XOR with a constant. The samples have different constants. This is why Table 3 also includes CRC32 values without the constant-value XOR.\r\n\u003c/p\u003e\r\n\u003cp\u003e\r\n\t The new version of COM-DLL-Dropper has strings encrypted with the RC4 algorithm, whereas the older version used XOR.\r\n\u003c/p\u003e\r\n\u003ch4\u003eTable 2. Techniques used by the malware to complicate analysis\u003c/h4\u003e\r\n\u003cdiv class=\"table-container\"\u003e\r\n\t\u003ctable class=\"table-article\"\u003e\r\n\t\u003cthead\u003e\r\n\t\u003ctr\u003e\r\n\t\t\u003cth\u003e\r\n\t\t\t Technique\r\n\t\t\u003c/th\u003e\r\n\t\t\u003cth\u003e\r\n\t\t\t Description\r\n\t\t\u003c/th\u003e\r\n\t\u003c/tr\u003e\r\n\t\u003c/thead\u003e\r\n\t\u003ctbody\u003e\r\n\t\u003ctr\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t Key bruteforce to decrypt strings\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t Starting in April 2020, RC4 has been used instead of XOR. This technique uses a non-standard implementation of the Sleep function, which may postpone launch of the main malware functions in a sandbox.\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\u003c/tr\u003e\r\n\t\u003ctr\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t Checking for the /s /i string process in CommandLine\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t The check verifies that the process was launched via regsvr32.\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\u003c/tr\u003e\r\n\t\u003ctr\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t Verifying the process name and the .ocx extension\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t The extension and the process name are also checked with a non-standard hash function.\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\u003c/tr\u003e\r\n\t\u003ctr\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t Verifying the list of modules loaded into the process\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t The check is performed using a custom hash function.\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\u003c/tr\u003e\r\n\t\u003ctr\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t Loading of additional NTDLL image into the process\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t This likely creates a trusted NTDLL image without NT API interception.\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\u003c/tr\u003e\r\n\t\u003ctr\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t Checking the values of registers Dr0–Dr3\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t Non-zero values in these registers indicate hardware breakpoints, and therefore the debugger. The register values are accessed via NtGetContext().\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\u003c/tr\u003e\r\n\t\u003ctr\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t ProcessDebugPort check\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t NtQueryInformationProcess with relevant value is called.\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\u003c/tr\u003e\r\n\t\u003ctr\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t ProcessDebugObjectHandle check\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t NtQueryInformationProcess with relevant value is called.\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\u003c/tr\u003e\r\n\t\u003ctr\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t ProcessDebugFlags check\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t NtQueryInformationProcess with relevant value is called.\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\u003c/tr\u003e\r\n\t\u003ctr\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t Checking the parent process name\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t The check is performed using a non-standard hash function.\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\u003c/tr\u003e\r\n\t\u003ctr\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t Checking the year set on the system\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t The current date is obtained by calling NtQuerySystemTime and RtlTimeToTimeFields.\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\u003c/tr\u003e\r\n\t\u003ctr\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t Checking the value of the environment variable COMPUTERNAME\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t The computer name is checked for the hard-coded string \u003ca href=\"https://www.fireeye.com/blog/threat-research/2017/07/flare-vm-the-windows-malware.html\" target=\"_blank\"\u003e\"FLAREVM\"\u003c/a\u003e.\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\u003c/tr\u003e\r\n\t\u003c/tbody\u003e\r\n\t\u003c/table\u003e\r\n\u003c/div\u003e\r\n\u003ch4\u003eTable 3. Strings and corresponding hash sums used in techniques\u003c/h4\u003e\r\n\u003cdiv class=\"table-container\"\u003e\r\n\t\u003ctable class=\"table-article\"\u003e\r\n\t\u003cthead\u003e\r\n\t\u003ctr\u003e\r\n\t\t\u003cth\u003e\r\n\t\t\t Hash sum\r\n\t\t\u003c/th\u003e\r\n\t\t\u003cth\u003e\r\n\t\t\t CRC32\r\n\t\t\u003c/th\u003e\r\n\t\t\u003cth\u003e\r\n\t\t\t String\r\n\t\t\u003c/th\u003e\r\n\t\u003c/tr\u003e\r\n\t\u003c/thead\u003e\r\n\t\u003ctbody\u003e\r\n\t\u003ctr\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t 0x322CD34E\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t 0x322C4A66\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t .ocx\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\u003c/tr\u003e\r\n\t\u003ctr\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t 0xF43AEA50\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t 0xF43A7378\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t regsvr32.exe\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\u003c/tr\u003e\r\n\t\u003ctr\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t 0x6FECDEE9\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t 0x6FEC47C1\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t sbiedll.dll\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\u003c/tr\u003e\r\n\t\u003ctr\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t 0x16430EDF\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t 0x164397F7\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t cmdvrt64.dll\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\u003c/tr\u003e\r\n\t\u003ctr\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t 0x2B256AC8\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t 0x2B25F3E0\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t cmd.exe\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\u003c/tr\u003e\r\n\t\u003ctr\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t 0xA82757CC\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t 0xA827CEE4\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t cmstp.exe\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\u003c/tr\u003e\r\n\t\u003ctr\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t 0xB3C6B186\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t 0xB3C628AE\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t msxsl.exe\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\u003c/tr\u003e\r\n\t\u003c/tbody\u003e\r\n\t\u003c/table\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003e\r\n\t Key bruteforcing for string decryption is not \"complete.\" In fact, most of the key consists of a hard-coded prefix found in the code. The end of the key is a decimal number. Therefore, \u003cem\u003ekey = prefix + number.\u003c/em\u003e\r\n\u003c/p\u003e\r\n \u003cfigure\u003e \u003cimg alt=\"Figure 34. RC4 key bruteforce\" src=\"/upload/corporate/ww-en/images/esc/cobalt-2020/34.png\"\u003e \u003cfigcaption\u003eFigure 34. RC4 key bruteforce\u003c/figcaption\u003e\u003c/figure\u003e\r\n\u003ch3\u003e4.3. JavaScript generators\u003c/h3\u003e\r\n\u003cp\u003e\r\n\t The dropper creates two files. The first is a JavaScript loader, and the second is a scriptlet containing the encrypted more_eggs backdoor. Both scripts are generated.\r\n\u003c/p\u003e\r\n\u003cp\u003e\r\n\t The generation template is saved among malware samples. The inserted data varies. The template contains tokens and JavaScript parts that are concatenated in series. Figure 35 shows part of generation of the JavaScript loader and examples of the used JavaScript parts.\r\n\u003c/p\u003e\r\n \u003cfigure\u003e \u003cimg alt=\"Figure 35. Generation of a part of the loader\" src=\"/upload/corporate/ww-en/images/esc/cobalt-2020/35.png\"\u003e \u003cfigcaption\u003eFigure 35. Generation of a part of the loader\u003c/figcaption\u003e\u003c/figure\u003e\r\n\u003cp\u003e\r\n\t Several obfuscation templates are built into the generator:\r\n\u003c/p\u003e\r\n\u003cul\u003e\r\n\t\u003cli\u003eCompensatory disguising of constants\u003c/li\u003e\r\n\t\u003cli\u003eGeneration of random variable names\u003c/li\u003e\r\n\t\u003cli\u003eInsertion of encrypted strings\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e\r\n\t Each generator contains a pool of names that are generated prior to starting creation of the script. These names are then used in JavaScript. Figure 35 shows a local variable named lpbobj_arraywcs__JSObjectPool. Figure 36 shows the pool initialization cycle.\r\n\u003c/p\u003e\r\n \u003cfigure\u003e \u003cimg alt=\"Figure 36. Example of filling the pool of names used in the script\" src=\"/upload/corporate/ww-en/images/esc/cobalt-2020/36.png\"\u003e \u003cfigcaption\u003eFigure 36. Example of filling the pool of names used in the script\u0026gt;\u003c/figcaption\u003e\u003c/figure\u003e\r\n\u003cp\u003e\r\n\t Each name available to be used in the script contains two parts: a random prefix (which is created once for the entire script) and a random decimal number (limited to a set number of characters). Figure 37 shows the name generation scheme and the result obtained in the script.\r\n\u003c/p\u003e\r\n \u003cfigure\u003e \u003cimg alt=\"Figure 37. Generation of names available to be used in the script\" src=\"/upload/corporate/ww-en/images/esc/cobalt-2020/37.png\"\u003e \u003cfigcaption\u003eFigure 37. Generation of names available to be used in the script\u003c/figcaption\u003e\u003c/figure\u003e\r\n\u003cp\u003e\r\n\t Numeric constants are obfuscated with a function that applies a random arithmetic operation from a set hard-coded in the program and then inserts the opposite operation in the script. Thus, the inserted expression balances out the obfuscated constant. The second arithmetic operation argument is also generated randomly from a hard-coded range of values.\r\n\u003c/p\u003e\r\n \u003cfigure\u003e \u003cimg alt=\"Figure 38. Generation of obfuscated constants\" src=\"/upload/corporate/ww-en/images/esc/cobalt-2020/38.png\"\u003e \u003cfigcaption\u003eFigure 38. Generation of obfuscated constants\u003c/figcaption\u003e\u003c/figure\u003e\r\n\u003cp\u003e\r\n\t The payload is encoded using RC4 and Base91 and inserted in the script. The implementations of RC4 and the Base91 decoder are also inserted in the scripts.\r\n\u003c/p\u003e\r\n\u003ch3\u003e4.4. Persistence\u003c/h3\u003e\r\n\u003cp\u003e\r\n\t Depending on its rights in the system, the dropper entrenches itself on the infected machine using the following methods:\r\n\u003c/p\u003e\r\n\u003cul\u003e\r\n\t\u003cli\u003eBy using Task Scheduler\u003c/li\u003e\r\n\t\u003cli\u003eBy using the registry key Environment\\UserInitMprLogonScript\u003c/li\u003e\r\n\t\u003cli\u003eBy using the registry key Software\\Microsoft\\Windows\\CurrentVersion\\Run\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e\r\n\t For all three methods, the value written by the dropper is the same, containing the command for launching the JavaScript loader.\r\n\u003c/p\u003e\r\n \u003cfigure\u003e \u003cimg alt=\"Figure 39. Example of persistence via UserInitMprLogonScript\" src=\"/upload/corporate/ww-en/images/esc/cobalt-2020/39.png\"\u003e \u003cfigcaption\u003eFigure 39. Example of persistence via UserInitMprLogonScript\u003c/figcaption\u003e\u003c/figure\u003e\r\n\u003cp\u003e\r\n\t To configure a task created by the dropper, a special XML file is generated. Part of it is stored in the dropper in encrypted form, and another part is generated while running.\r\n\u003c/p\u003e\r\n \u003cfigure\u003e \u003cimg alt=\"Figure 40. Decrypted part of XML\" src=\"/upload/corporate/ww-en/images/esc/cobalt-2020/40.png\"\u003e \u003cfigcaption\u003eFigure 40. Decrypted part of XML\u003c/figcaption\u003e\u003c/figure\u003e \u003cfigure\u003e \u003cimg alt=\"Figure 41. Creating end for the XML file\" src=\"/upload/corporate/ww-en/images/esc/cobalt-2020/41.png\"\u003e \u003cfigcaption\u003eFigure 41. Creating end for the XML file\u003c/figcaption\u003e\u003c/figure\u003e\r\n\u003cp\u003e\r\n\t The resulting XML file is saved with a random name consisting of hexadecimal characters. Subsequently, this XML file is passed to schtasks.exe as the /XML parameter value.\r\n\u003c/p\u003e\r\n\u003ch3\u003e4.5. Running the payload\u003c/h3\u003e\r\n\u003cp\u003e\r\n\t COM-DLL-Dropper saves three files to disk:\r\n\u003c/p\u003e\r\n\u003cul\u003e\r\n\t\u003cli\u003eObfuscated JavaScript loader\u003c/li\u003e\r\n\t\u003cli\u003eObfuscated JavaScript backdoor\u003c/li\u003e\r\n\t\u003cli\u003eLegitimate utility for modifying the command line in order to launch the more_eggs JavaScript backdoor\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003cp\u003e\r\n\t The main backdoor is launched with the help of a known \u003ca href=\"https://pentestlab.blog/2017/07/06/applocker-bypass-msxsl/\" target=\"_blank\"\u003eAppLocker bypass technique\u003c/a\u003e using the msxsl utility. The commands look as follows:\r\n\u003c/p\u003e\r\n\u003cul\u003e\r\n\t\u003cli\u003e“C:\\Users\\\\AppData\\Roaming\\Microsoft\\msxsl.exe”\u003c/li\u003e\r\n\t\u003cli\u003e“C:\\Users\\\\AppData\\Roaming\\Microsoft\\[javascript_downloader_name].txt”\u003c/li\u003e\r\n\t\u003cli\u003e“C:\\Users\\\\AppData\\Roaming\\Microsoft\\[javascript_backdoor_name].txt”\u003c/li\u003e\r\n\u003c/ul\u003e\r\n\u003ch3\u003e4.6. JavaScript backdoor functionality\u003c/h3\u003e\r\n\u003cp\u003e\r\n\t The JavaScript backdoor saved to disk by the new COM-DLL-Dropper has version 6.6.\r\n\u003c/p\u003e\r\n \u003cfigure\u003e \u003cimg alt=\"Figure 42. Backdoor header\" src=\"/upload/corporate/ww-en/images/esc/cobalt-2020/42.png\"\u003e \u003cfigcaption\u003eFigure 42. Backdoor header\u003c/figcaption\u003e\u003c/figure\u003e\r\n\u003cp\u003e\r\n\t This backdoor has been used by Cobalt since 2017. It is executed in memory and always has a low number of antivirus verdicts.\r\n\u003c/p\u003e\r\n\u003cp\u003e\r\n\t The main capabilities of the backdoor are as follows:\r\n\u003c/p\u003e\r\n\u003col\u003e\r\n\t\u003cli\u003eTraffic encryption with RC4 and Base91\u003c/li\u003e\r\n\t\u003cli\u003eExecution of operator commands (in this version, the more_eggs command that gave the backdoor its name was absent):\u003c/li\u003e\r\n\t\u003cul\u003e\r\n\t\t\u003cli\u003eexec: download and run file (.exe or .dll)\u003c/li\u003e\r\n\t\t\u003cli\u003egtfo: uninstall\u003c/li\u003e\r\n\t\t\u003cli\u003emore_onion: run script\u003c/li\u003e\r\n\t\t\u003cli\u003evia_c: execute command using \"cmd.exe /C\"\u003c/li\u003e\r\n\t\t\u003cli\u003emore_time: execute command using \"cmd.exe /C\", with the result being saved to a temporary file. After that, the file is read and deleted, and its contents are encoded with Base64 and sent to the server.\u003c/li\u003e\r\n\t\u003c/ul\u003e\r\n\t\u003cli\u003eCheck of the process list for antivirus protection and researcher software by comparing CRC32 values (derived from the name of each process, without extension and in lower case) against hard-coded values.\u003c/li\u003e\r\n\t\u003cli\u003eReconnaissance:\u003c/li\u003e\r\n\t\u003cul\u003e\r\n\t\t\u003cli\u003eDate of system installation\u003c/li\u003e\r\n\t\t\u003cli\u003eInfected machine's IP address\u003c/li\u003e\r\n\t\t\u003cli\u003eSystem type (server or desktop)\u003c/li\u003e\r\n\t\t\u003cli\u003eWindows version (from XP to 10)\u003c/li\u003e\r\n\t\u003c/ul\u003e\r\n\u003c/ol\u003e\r\n\u003ch2\u003eConclusion\u003c/h2\u003e\r\n\u003cp\u003e\r\n\t Cobalt keeps attacking financial organizations around the world, refining its TTPs, and inventing ever-more sophisticated ways to bypass defenses. Due to quarantine-related measures, many employees of financial companies are now working remotely, outside the protection offered by corporate security solutions. Moreover, many threat actors are using COVID-19 as a lure in their attacks, as \u003ca href=\"https://www.ptsecurity.com/ww-en/analytics/pt-esc-threat-intelligence/covid-19-and-new-year-greetings-the-higaisa-group/\" target=\"_blank\"\u003ethe Higaisa group\u003c/a\u003e has done. It is possible that Cobalt, too, will try to weaponize such concern.\r\n\u003c/p\u003e\r\n\u003cp\u003e\r\n \u003cb\u003eAuthors\u003c/b\u003e: Denis Kuvshinov, Sergey Tarasov, Daniil Koloskov, PT ESC\r\n\u003c/p\u003e\r\n\u003ch2\u003eIndicators of compromise\u003c/h2\u003e\r\n\u003ch3\u003eECB phishing\u003c/h3\u003e\r\n\u003cdiv class=\"table-container\"\u003e\r\n\t\u003ctable class=\"table-article\"\u003e\r\n\t\u003cthead\u003e\r\n\t\u003ctr\u003e\r\n\t\t\u003cth\u003e\r\n\t\t\t Type\r\n\t\t\u003c/th\u003e\r\n\t\t\u003cth\u003e\r\n\t\t\t MD5\r\n\t\t\u003c/th\u003e\r\n\t\t\u003cth\u003e\r\n\t\t\t SHA1\r\n\t\t\u003c/th\u003e\r\n\t\t\u003cth\u003e\r\n\t\t\t SHA256\r\n\t\t\u003c/th\u003e\r\n\t\u003c/tr\u003e\r\n\t\u003c/thead\u003e\r\n\t\u003ctbody\u003e\r\n\t\u003ctr\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t Browser droppers\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t 152cd7014811ae8980981a825e5843b0\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t 90f7d0b0f90aeadaeff1adf45db5dcc598dec8c4\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t 2d02bbae38f4dba5485fbc2e38640898907ecdd6b9ee43501d1ee951653ab36f\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\u003c/tr\u003e\r\n\t\u003ctr\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t f2712de0c8575ff32828c83cfbf75d4b\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t e80ef396462fe651c3cdeb91651ac27799d2dab5\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t 33ba8cd251512f90b7249930aee22d3f47255420a8d41e1326169e0f948cc7d0\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\u003c/tr\u003e\r\n\t\u003ctr\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t a3391d1d3482553545d7c0111984abb6\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t 1a371353c6a46ddea19d520d8ce3b5599a8ee9f1\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t 9e8a99ad401ef5d2bb3aea3a463d85220f0e6724f91a3c2ffd195d0b8628bf9d\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\u003c/tr\u003e\r\n\t\u003ctr\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t CobInt\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t f924c690f7bbaf60d56a446b7a66a43b\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t 8ada87f00ed3afdd4dbdb07879ba6ebe4a2a9ffa\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t b83d2c4f5c2bb562981a104d4e49cf25291096d37a4161c32a76e369d1a931e8\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\u003c/tr\u003e\r\n\t\u003c/tbody\u003e\r\n\t\u003c/table\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003e\r\n \u003cem\u003eC\u0026amp;C\u003c/em\u003e\r\n\u003c/p\u003e\r\n\u003cp\u003e\r\n\t ecb-european[.]eu\r\n\u003c/p\u003e\r\n\u003cp\u003e\r\n\t timeswindows[.]com\r\n\u003c/p\u003e\r\n\u003ch3\u003eVHD\u003c/h3\u003e\r\n\u003cdiv class=\"table-container\"\u003e\r\n\t\u003ctable class=\"table-article\"\u003e\r\n\t\u003cthead\u003e\r\n\t\u003ctr\u003e\r\n\t\t\u003cth\u003e\r\n\t\t\t Type\r\n\t\t\u003c/th\u003e\r\n\t\t\u003cth\u003e\r\n\t\t\t MD5\r\n\t\t\u003c/th\u003e\r\n\t\t\u003cth\u003e\r\n\t\t\t SHA1\r\n\t\t\u003c/th\u003e\r\n\t\t\u003cth\u003e\r\n\t\t\t SHA256\r\n\t\t\u003c/th\u003e\r\n\t\u003c/tr\u003e\r\n\t\u003c/thead\u003e\r\n\t\u003ctbody\u003e\r\n\t\u003ctr\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t VHD-file\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t fce9fcd5fa337d020bd6758008221b81\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t e288b0410fb95060ce8c5527673978cb2ceffe05\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t 3382a75bd959d2194c4b1a8885df93e8770f4ebaeaff441a5180ceadf1656cd9\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\u003c/tr\u003e\r\n\t\u003ctr\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t CobInt\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t 600154fcb03e775f007ef7b1547b169c\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t 384a13abe42d249e354cd415c4bcbf01086deafb\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t 0c85c1045899291cba47c7171599446642b87015a76d5b22f8cc51f4a6e45a90\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\u003c/tr\u003e\r\n\t\u003ctr\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t 6ec0edd1889897ff9b4673600f40f92f\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t 4d50f1cae2acc8c92ff1f678fc1fdfdd1e770f24\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t 64d16900fce924da101744edce28b9ee648192486d9062c427c17589b5f204fb\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\u003c/tr\u003e\r\n\t\u003c/tbody\u003e\r\n\t\u003c/table\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003e\r\n \u003cem\u003eC\u0026amp;C\u003c/em\u003e\r\n\u003c/p\u003e\r\n\u003cp\u003e\r\n\t telekom-support[.]info\r\n\u003c/p\u003e\r\n\u003cp\u003e\r\n\t 45.80.69[.]34\r\n\u003c/p\u003e\r\n\u003ch3\u003eBIFF\u003c/h3\u003e\r\n\u003cdiv class=\"table-container\"\u003e\r\n\t\u003ctable class=\"table-article\"\u003e\r\n\t\u003cthead\u003e\r\n\t\u003ctr\u003e\r\n\t\t\u003cth\u003e\r\n\t\t\t Type\r\n\t\t\u003c/th\u003e\r\n\t\t\u003cth\u003e\r\n\t\t\t MD5\r\n\t\t\u003c/th\u003e\r\n\t\t\u003cth\u003e\r\n\t\t\t SHA1\r\n\t\t\u003c/th\u003e\r\n\t\t\u003cth\u003e\r\n\t\t\t SHA256\r\n\t\t\u003c/th\u003e\r\n\t\u003c/tr\u003e\r\n\t\u003c/thead\u003e\r\n\t\u003ctbody\u003e\r\n\t\u003ctr\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t XLS-File\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t 36399ebf94f66529dc72d8b2844f43dd\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t b912f222e79feadbcefe2d6ead5fab74b15b1f40\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t 0aee265a022ee84e9c8b653e960559c9761a7362e1c345019a552188114b7e80\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\u003c/tr\u003e\r\n\t\u003ctr\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t COM-DLL\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t 862c19b2b4b6a7c97fb8627303b8f5d7\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t d3fc5f848d630ca2dc8e99b0d4dfe704b8ec1832\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t 7122cf59f8a59f9a44f20fd4c83451c5c4313e0021d3f1ba9c2b1a4f39801db1\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\u003c/tr\u003e\r\n\t\u003c/tbody\u003e\r\n\t\u003c/table\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003e\r\n \u003cem\u003eC\u0026amp;C\u003c/em\u003e\r\n\u003c/p\u003e\r\n\u003cp\u003e\r\n\t download.sabaloo[.]com\r\n\u003c/p\u003e\r\n\u003cp\u003e\r\n\t origin.cdn77[.]kz\r\n\u003c/p\u003e\r\n\u003ch3\u003eNew COM-DLL dropper\u003c/h3\u003e\r\n\u003cdiv class=\"table-container\"\u003e\r\n\t\u003ctable class=\"table-article\"\u003e\r\n\t\u003cthead\u003e\r\n\t\u003ctr\u003e\r\n\t\t\u003cth\u003e\r\n\t\t\t Type\r\n\t\t\u003c/th\u003e\r\n\t\t\u003cth\u003e\r\n\t\t\t MD5\r\n\t\t\u003c/th\u003e\r\n\t\t\u003cth\u003e\r\n\t\t\t SHA1\r\n\t\t\u003c/th\u003e\r\n\t\t\u003cth\u003e\r\n\t\t\t SHA256\r\n\t\t\u003c/th\u003e\r\n\t\u003c/tr\u003e\r\n\t\u003c/thead\u003e\r\n\t\u003ctbody\u003e\r\n\t\u003ctr\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t COM-DLL\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t 47e7212b097b5cffa60903055e3c4d5a\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t dfcd5692729e859f074b95720505f711ba7d14ac\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t c1a633a940fc4c595ebbe36823fee1b02bfd755615c51799c9f4e4320b597af1\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\u003c/tr\u003e\r\n\t\u003c/tbody\u003e\r\n\t\u003c/table\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003e\r\n \u003cem\u003eС\u0026amp;C\u003c/em\u003e\r\n\u003c/p\u003e\r\n\u003cp\u003e\r\n\t maps.doaglas[.]com\r\n\u003c/p\u003e\r\n\u003ch2\u003eMITRE TTPs\u003c/h2\u003e\r\n\u003cdiv class=\"table-container\"\u003e\r\n\t\u003ctable class=\"table-article\"\u003e\r\n\t\u003cthead\u003e\r\n\t\u003ctr\u003e\r\n\t\t\u003cth\u003e\r\n\t\t\t Tactic\r\n\t\t\u003c/th\u003e\r\n\t\t\u003cth\u003e\r\n\t\t\t ID\r\n\t\t\u003c/th\u003e\r\n\t\t\u003cth\u003e\r\n\t\t\t Name\r\n\t\t\u003c/th\u003e\r\n\t\u003c/tr\u003e\r\n\t\u003c/thead\u003e\r\n\t\u003ctbody\u003e\r\n\t\u003ctr\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t Initial Access\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t T1193\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t Spearphishing Attachment\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\u003c/tr\u003e\r\n\t\u003ctr\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t T1192\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t Spearphishing Link\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\u003c/tr\u003e\r\n\t\u003ctr\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t Execution\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t T1059\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t Command-Line Interface\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\u003c/tr\u003e\r\n\t\u003ctr\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t T1117\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t Regsvr32\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\u003c/tr\u003e\r\n\t\u003ctr\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t T1204\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t User Execution\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\u003c/tr\u003e\r\n\t\u003ctr\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t T1064\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t Scripting\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\u003c/tr\u003e\r\n\t\u003ctr\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t Persistence\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t T1037\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t Logon Scripts\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\u003c/tr\u003e\r\n\t\u003ctr\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t T1050\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t New Service\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\u003c/tr\u003e\r\n\t\u003ctr\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t T1053\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t Scheduled Task\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\u003c/tr\u003e\r\n\t\u003ctr\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t T1060\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t Registry Run Keys / Startup Folder\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\u003c/tr\u003e\r\n\t\u003ctr\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t Defense Evasion\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t T1027\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t Obfuscated Files or Information\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\u003c/tr\u003e\r\n\t\u003ctr\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t T1220\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t XSL Script Processing\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\u003c/tr\u003e\r\n\t\u003ctr\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t Discovery\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t T1063\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t Security Software Discovery\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\u003c/tr\u003e\r\n\t\u003ctr\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t Command And Control\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t T1105\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\t\u003ctd\u003e\r\n\t\t\t\u003cp\u003e\r\n\t\t\t\t Remote File Copy\r\n\t\t\t\u003c/p\u003e\r\n\t\t\u003c/td\u003e\r\n\t\u003c/tr\u003e\r\n\t\u003c/tbody\u003e\r\n\t\u003c/table\u003e\r\n\u003c/div\u003e\r\n \u003c/article\u003e","title":"Cobalt: tactics and tools update","date":"2020-06-15T21:00:00.000Z","slug":"cobalt_upd_ttps","file":"","titleOfHelpfulFiles":"","helpfulFiles":[]},"footerData":{"title":"Cybersecurity market leader","copyright":"Copyright \u003cmark\u003e©\u003c/mark\u003e 2002–2025 Positive Technologies. All rights reserved.","products":{"title":"Products","navItems":[{"name":"PT NAD","link":"/products/network-attack-discovery"},{"name":"PT Threat Intelligence Feeds","link":"/products/threat-intelligence-feeds"},{"name":"PT Sandbox","link":"/products/sandbox"},{"name":"MaxPatrol VM","link":"/products/maxpatrol-vm"},{"name":"MaxPatrol SIEM","link":"/products/siem"},{"name":"PT Application Inspector","link":"/products/ai"},{"name":"PT BlackBox","link":"/products/blackbox"},{"name":"PT ISIM","link":"/products/isim"},{"name":"MaxPatrol O2","link":"/products/mp-o2"},{"name":"MaxPatrol EDR","link":"/products/edr"},{"name":"PT Application Firewall","link":"/products/pt-af"},{"name":"PT Container Security","link":"/products/cs"},{"name":"PT Industrial Cybersecurity Suite","link":"/products/ics"}]},"company":{"title":"ANALYTICS","navItems":[{"name":"Analytics articles","link":"/analytics"},{"name":"Knowledge base","link":"/analytics/knowledge-base"},{"name":"PT ESC threat intelligence","link":"/analytics/pt-esc-threat-intelligence"},{"name":"Threatscape","link":"/analytics/threatscape"},{"name":"Hacker groups","link":"/analytics/hacker-groups"}]},"social":{"title":"COMPANY","navItems":[{"name":"About us","link":"/about"},{"name":"Clients","link":"/about/clients"},{"name":"Contacts","link":"/about/contacts"},{"name":"PT in the Media","link":"/about/pt-in-the-media"},{"name":"Education","link":"https://edu.ptsecurity.com/learning-space"},{"name":"YouTube","link":"https://www.youtube.com/channel/UC9hnMfdwfLd8V5qEc-6MXXQ"},{"name":"LinkedIn","link":"https://www.linkedin.com/company/positivetechnologies/"},{"name":"Х","link":"https://x.com/PTsecurity_EN"},{"name":"TikTok","link":"https://www.tiktok.com/@positivetechnologies"},{"name":"Vacancy","link":"https://vacancy.global.ptsecurity.com/"}]},"logoImage":{"src":"https://pt-global.storage.yandexcloud.net/logo_1d137588e3.svg","width":1200,"height":100,"alt":""},"legalDocsLink":{"id":61,"text":"Legal documents","link":"https://global.ptsecurity.com/policies/terms-of-use","targetBlank":true}},"anyQuestionsData":{"selectProductOptions":[{"value":"network-attack-discovery","label":"PT NAD","crmId":"3212ea27-d047-42f9-9da3-9ef5233634bb"},{"value":"threat-intelligence-feeds","label":"PT Threat Intelligence Feeds","crmId":""},{"value":"sandbox","label":"PT Sandbox","crmId":"5addae27-2762-4a89-8b58-e247ab1e71dc"},{"value":"maxpatrol-vm","label":"MaxPatrol VM","crmId":"e5ffe330-69bf-4344-b0b0-c228de0f6f83"},{"value":"siem","label":"MaxPatrol SIEM","crmId":"0c54a201-09a7-4dc9-b3ca-1ce61715388b"},{"value":"ai","label":"PT Application Inspector","crmId":"4c2c50e6-2b8c-4c1e-a2da-f6423ece496b"},{"value":"blackbox","label":"PT BlackBox","crmId":"081eb4e2-54c2-4ce5-b171-d7dcaecc1c1f"},{"value":"isim","label":"PT ISIM","crmId":"67a72950-2d9c-47a1-8bb8-49540356da8f"},{"value":"mp-o2","label":"MaxPatrol O2","crmId":"29563721-4ec7-4e5b-8a48-f3674ab70749"},{"value":"edr","label":"MaxPatrol EDR","crmId":"c667eb61-0b7a-457c-991c-43b83504a7ed"},{"value":"pt-af","label":"PT Application Firewall","crmId":"b6b16deb-0ceb-4318-b947-fd238d7a9935"},{"value":"cs","label":"PT Container Security","crmId":"2df38b89-5d1f-4a0d-8be4-76ea9f8d2e30"},{"value":"ics","label":"PT Industrial Cybersecurity Suite","crmId":""}],"title":"Get in touch","description":"Fill in the form and our specialists\u003cbr/\u003e will contact you shortly","feedback":{"title":"General\u003cbr/\u003e questions","description":"We're happy to answer any questions you may have.","fieldName":"Name","fieldPhone":"Phone number","fieldEmail":"Email","fieldComment":"How can we help?","fieldCountry":"Country","checkboxConsentsTerms":"I give \u003ca href=\"https://global.ptsecurity.com/policies/consent\" target=\"_blank\"\u003emy consent to the processing of my personal data\u003c/a\u003e in accordance with the terms of the \u003ca href=\"https://global.ptsecurity.com/policies/privacy-policy\" target=\"_blank\"\u003ePrivacy Notice\u003c/a\u003e","checkboxSubscription":"I give \u003ca href=\"https://global.ptsecurity.com/policies/consent-email\" target=\"_blank\"\u003emy consent to receive marketing and informational messages\u003c/a\u003e","buttonSubmit":"SEND","successTitle":"Thank you, your application has been sent","successDescription":"Our specialists will contact you soon."},"partnership":{"title":"Partnership","description":"Join us in making the world a safer place.","fieldName":"Name","fieldCompanyName":"Company name","fieldPhone":"Phone number","fieldEmail":"Email","fieldComment":"How can we help?","fieldAddress":"Address","fieldCountry":"Country","checkboxConsentsTerms":"I give \u003ca href=\"https://global.ptsecurity.com/policies/consent\" target=\"_blank\"\u003emy consent to the processing of my personal data\u003c/a\u003e in accordance with the terms of the \u003ca href=\"https://global.ptsecurity.com/policies/privacy-policy\" target=\"_blank\"\u003ePrivacy Notice\u003c/a\u003e","checkboxSubscription":"I give \u003ca href=\"https://global.ptsecurity.com/policies/consent-email\" target=\"_blank\"\u003emy consent to receive marketing and informational messages\u003c/a\u003e","buttonSubmit":"SEND","successTitle":"Thank you, your application has been sent","successDescription":"Our specialists will contact you shortly."},"pilotApplication":{"title":"Pilot\u003cbr/\u003e application","description":"Test drive our solutions with a customized pilot program.","fieldProduct":"Select a product","fieldName":"Name","fieldCompanyName":"Company name","fieldPhone":"Phone number","fieldEmail":"Email","fieldComment":"How can we help?","fieldCountry":"Country","checkboxConsentsTerms":"I give \u003ca href=\"https://global.ptsecurity.com/policies/consent\" target=\"_blank\"\u003emy consent to the processing of my personal data\u003c/a\u003e in accordance with the terms of the \u003ca href=\"https://global.ptsecurity.com/policies/privacy-policy\" target=\"_blank\"\u003ePrivacy Notice\u003c/a\u003e","checkboxSubscription":"I give \u003ca href=\"https://global.ptsecurity.com/policies/consent-email\" target=\"_blank\"\u003emy consent to receive marketing and informational messages\u003c/a\u003e","buttonSubmit":"SEND","successTitle":"Thank you, your application has been sent","successDescription":"Our specialists will contact you shortly."}},"sidebarData":{"widgets":[{"kind":"analytics-articles","data":{"title":"Analytics articles","link":"/analytics","withFlag":true,"items":[{"text":"Cyberthreats to industrial IoT in the manufacturing sector","link":"/analytics/cyberthreats-to-industrial-iot","targetBlank":true,"publishedDate":"2025-01-28T00:00:00.000Z"},{"text":"Cyberthreats evolve while forecasts signal more sophisticated risks ahead","link":"/analytics/cyberthreats-evolve-while-forecasts-signal-more-sophisticated-risks-ahead","targetBlank":true,"publishedDate":"2025-01-07T00:00:00.000Z"},{"text":"Trending vulnerability digest November 2024","link":"/analytics/trending-vulnerability-digest-november-2024","targetBlank":true,"publishedDate":"2024-12-26T00:00:00.000Z"}]}},{"kind":"ad-banner","data":{"title":"What are the security threats on your network?","subtitle":"Check your traffic-for free","backgroundColor":null,"image":{"src":"https://pt-global.storage.yandexcloud.net/PT_Network_Attack_Discovery_2x_0d8a5793c7.png","width":542,"height":822,"alt":""},"actionProps":{"label":"Request pilot","href":"#contacts","isExternal":false}}}]},"_sentryTraceData":"e9756fc95091433da539c72be2f39d6c-b171c44551059444-1","_sentryBaggage":"sentry-environment=production,sentry-release=Nk1PjZMd8HlCnZWDQcegj,sentry-public_key=98e9d1bba200933ad4e97a71f2de0390,sentry-trace_id=e9756fc95091433da539c72be2f39d6c,sentry-sample_rate=1,sentry-transaction=%2Fanalytics%2Fpt-esc-threat-intelligence%2F%5Bslug%5D,sentry-sampled=true"},"__N_SSP":true},"page":"/analytics/pt-esc-threat-intelligence/[slug]","query":{"slug":"cobalt_upd_ttps"},"buildId":"Nk1PjZMd8HlCnZWDQcegj","isFallback":false,"gssp":true,"locale":"en","locales":["en","es","pt"],"defaultLocale":"en","scriptLoader":[]}</script></body></html>