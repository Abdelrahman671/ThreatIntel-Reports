<!DOCTYPE html>
<html lang="en">

<!-- Head tag -->
<head>
    
    <title>Exploring Mimikatz - Part 1 - WDigest - XPN InfoSec Blog</title>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />

    <!--Description-->
    
        <meta name="description" content="We’ve packed it, we’ve wrapped it, we’ve injected it and powershell’d it, and now we&#39;ve settled on feeding it a memory dump, and still Mimikatz remains the tool of choice when extracting credentials from lsass on Windows systems. Of course this is due to the fact that with each new security control introduced by Microsoft, GentilKiwi always has a trick or two up his sleeve. If you have ever looked at the effort that goes into Mimikatz, this is no easy task, with">
    

    <!--Author-->
    
        <meta name="author" content="Adam Chester">
    

    <!--Favicon-->
    
      <link rel="icon" href="/images/favicon.ico">
    

    <!--Open Graph Title-->
    
        <meta property="og:title" content="Exploring Mimikatz - Part 1 - WDigest"/>
    

    <!--Open Graph Site Name-->
    <meta property="og:site_name" content="XPN InfoSec Blog"/>

    <!--Page Cover-->
    
        <meta property="og:image" content="https://assets.xpnsec.com/exploring-mimikatz-part-1/Screenshot-2019-06-01-at-13.45.59.png" />
    

    <meta name="twitter:site" content="@_xpn_"/>
<meta name="twitter:creator" content="@_xpn_"/>

    <meta name="twitter:card" content="summary_large_image"/>
    <meta name="twitter:title" content="@_xpn_ - Exploring Mimikatz - Part 1 - WDigest"/>
    <meta name="twitter:image" content="https://assets.xpnsec.com/exploring-mimikatz-part-1/Screenshot-2019-06-01-at-13.45.59.png"/>

<meta name="twitter:url" content="https://blog.xpnsec.com/exploring-mimikatz-part-1/index.html"/>

    <meta name="theme-color" content="#ffffff">
    <link href='https://fonts.googleapis.com/css?family=Roboto:400,300,700|Noto+Serif:400,400italic,700,700italic' rel='stylesheet' type='text/css'>
    <link href="https://fonts.googleapis.com/css?family=Open+Sans:300,400,700" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.17.1/themes/prism.min.css" rel="stylesheet" />
    <!-- Custom CSS -->
    
<link rel="stylesheet" href="/sass/main.css">


    <!-- Google Analytics -->
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-X2JVQCPYBP"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-X2JVQCPYBP');
</script>

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.11.0/styles/default.min.css" integrity="sha384-zhIsEafzyQWHSoMCQ4BfT8ZlRXQyIFwAHAJn32PNdsb8n6tVysGZSLpEEIvCskw4" crossorigin="anonymous">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.11.0/highlight.min.js" integrity="sha384-vG5ueWbnY1VP7nl03G97FIV56vNtYfp+rm3tvRLHeQZhRzq1kLd1nZZhYeQ+00u7" crossorigin="anonymous"></script>
    <script>hljs.initHighlightingOnLoad();</script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/modernizr/2.8.3/modernizr.min.js" integrity="sha256-0rguYS0qgS6L4qVzANq4kjxPLtvnp5nn2nB5G1lWRv4=" crossorigin="anonymous"></script>
    <script src="https://kit.fontawesome.com/26753e0838.js"></script>
<meta name="generator" content="Hexo 7.1.1"><link rel="alternate" href="/rss.xml" title="XPN InfoSec Blog" type="application/rss+xml">
</head>


<body id="top">
  <div class="lateral">
    <aside class="author">
      <a href="https://blog.xpnsec.com"><img class="profile-image" src="/images/profile-image.jpg" alt="avatar" /></a>
      <a href="https://blog.xpnsec.com"><p class="title">XPN's InfoSec Blog</p></a>
      <p class="name">Adam Chester</p>
      <p class="about">Hacker and Infosec Researcher</p>
      <ul class="social">
        <li><a href="https://blog.xpnsec.com/tags" data-description="Blog Tags"><i class="fas fa-tags" aria-hidden="true"></i></a></li>
        <li><a href="https://blog.xpnsec.com/about" data-description="About Me"><i class="fas fa-address-card" aria-hidden="true"></i></a></li>
        <li><a href="https://twitter.com/_xpn_" target="_blank" data-description="Twitter"><i class="fab fa-twitter" aria-hidden="true"></i></a></li>
        <li><a href="https://www.linkedin.com/in/xpn" target="_blank" data-description="LinkedIn"><i class="fab fa-linkedin" aria-hidden="true"></i></a></li>
        <li><a href="mailto:xpnsec[at]protonmail.com" target="_blank" data-description="Email"><i class="fas fa-envelope" aria-hidden="true"></i></a></li>
        <li><a href="https://github.com/xpn" target="_blank" data-description="GitHub"><i class="fab fa-github" aria-hidden="true"></i></a></li>
        <li><a href="https://blog.xpnsec.com/rss/" target="_blank" data-description="RSS"><i class="fas fa-rss"></i></a></li>
      </ul>
      <div id="link-info"></div>
    </aside>
  </div>
  <div class="home-template home">
    <!--[if lt IE 8]>
      <p class="browsehappy">You are using an <strong>outdated</strong> browser. Please <a target="_blank" rel="noopener" href="http://browsehappy.com/">upgrade your browser</a> to improve your experience.</p>
    <![endif]-->
    <header class="site-header"> 
      <h2><a class="logo ir" href="https://blog.xpnsec.com" title="XPN InfoSec Blog">XPN InfoSec Blog</a></h2>
    </header>
    <div class="container clearfix">
      <main class="content" role="main">
        <div  class="post-template">
  <article class="post">
    <a class="btn" href="https://blog.xpnsec.com" title="Back to homepage">« Back to home</a>


      <h1 itemprop="name">
        <a href="/exploring-mimikatz-part-1/">Exploring Mimikatz - Part 1 - WDigest</a>
      </h1>


<footer class="post-info">
  Posted on 
      <span class="post-meta">
        <time>
          2019-05-10
        </time>
        
          <span>Tagged in </span>
        
        
        <a href="/tags#low-level" class="button small">low-level</a>, <a href="/tags#mimikatz" class="button small">mimikatz</a>
      </span>

  

  </footer>


<p>We’ve packed it, we’ve wrapped it, we’ve injected it and powershell’d it, and now we’ve settled on feeding it a memory dump, and still Mimikatz remains the tool of choice when extracting credentials from lsass on Windows systems. Of course this is due to the fact that with each new security control introduced by Microsoft, <a target="_blank" rel="noopener" href="https://twitter.com/gentilkiwi">GentilKiwi</a> always has a trick or two up his sleeve. If you have ever looked at the effort that goes into Mimikatz, this is no easy task, with all versions of Windows x86 and x64 supported (and more recently, additions to support Windows on ARM arch). And of course with the success of Mimikatz over the years, BlueTeam are now very adept at detecting its use in its many forms. Essentially, execute Mimikatz on a host, and if the environment has any maturity at all you’re likely to be flagged.</p>
<p>Through my many online and offline rants conversations, people likely know by now my thoughts on RedTeam understanding their tooling beyond just executing a script. And with security vendors reducing and monitoring the attack surface of common tricks often faster than we can discover fresh methods, knowing how a particular technique works down to the API calls can offer a lot of benefits when avoiding detection in well protected environments.</p>
<p>This being said, Mimikatz is a tool that is carried along with most post-exploitation toolkits in one form or another. And while some security vendors are monitoring for process interaction with lsass, many more have settled on attempting to identify Mimikatz itself.</p>
<p>I’ve been toying with the idea of stripping down Mimikatz for certain engagements (mainly those where exfiltrating a memory dump isn’t feasible or permitted), but it has been bugging me for a while that I’ve spent so long working with a tool that I’ve rarely reviewed low-level.</p>
<p>So over a few posts I wanted to change this and explore some of its magic, starting with where it all began…. WDigest. Specifically, looking at how cleartext credentials are actually cached in lsass, and how they are extracted out of memory with <code>&quot;sekurlsa::wdigest&quot;</code>. This will mean disassembly and debugging, but hopefully by the end you will see that while its difficult to duplicate the amount of effort that has gone into Mimikatz, if your aim is to only use a small portion of the available functionality, it may be worth crafting a custom tool based on the Mimikatz source code, rather than opting to take along the full suite.</p>
<p>To finish off the post I will also explore some additional methods of loading arbitrary DLL’s within lsass, which can hopefully be combined with the code examples demonstrated.</p>
<p><em>Note: This post uses Mimikatz source code heavily as well as the countless hours dedicated to it by its developer(s). This effort should become more apparent as you see undocumented structures which are suddenly revealed when browsing through code. Thanks to Mimikatz, <a target="_blank" rel="noopener" href="https://twitter.com/gentilkiwi">Benjamin Delpy</a> and <a target="_blank" rel="noopener" href="https://twitter.com/mysmartlogon">Vincent Le Toux</a> for their awesome work.</em></p>
<h2 id="So-how-does-this-“sekurlsa-wdigest”-magic-actually-work"><a href="#So-how-does-this-“sekurlsa-wdigest”-magic-actually-work" class="headerlink" title="So, how does this “sekurlsa::wdigest” magic actually work?"></a>So, how does this “sekurlsa::wdigest” magic actually work?</h2><p>So as mentioned, in this post we will look at is WDigest, arguably the feature that Mimikatz became most famous for. WDigest credential caching was of course enabled by default up until Windows Server 2008 R2, after which caching of plain-text credentials was disabled.</p>
<p>When reversing an OS component, I usually like to attach a debugger and review how it interacts with the OS during runtime. Unfortunately in this case this isn’t going to be just as simple as attaching WinDBG to lsass, as pretty quickly you’ll see Windows grind to a halt before warning you of a pending reboot. Instead we’ll have to attach to the kernel and switch over to the lsass process from Ring-0. If you have never attached WinDBG to the kernel before, check out one of my previous posts on how to go about setting up a kernel debugger <a href="/windows-warbird-privesc/">here</a>.</p>
<p>With a kernel debugger attached, we need to grab the <code>EPROCESS</code> address of the lsass process, which is found with the <code>!process 0 0 lsass.exe</code> command:</p>
<p><img src="https://assets.xpnsec.com/exploring-mimikatz-part-1/Untitled-e50adc63-b0af-4cf9-9ebe-2082541b7501.png" alt=""></p>
<p>With the <code>EPROCESS</code> address identified (<code>ffff9d01325a7080</code> above), we can request that our debug session is switched to the lsass process context:</p>
<p><img src="https://assets.xpnsec.com/exploring-mimikatz-part-1/Untitled-0c71b9dd-6e40-4cfb-a95f-2d52bb25dc5b.png" alt=""></p>
<p>A simple <code>lm</code> will show that we now have access to the WDigest DLL memory space:</p>
<p><img src="https://assets.xpnsec.com/exploring-mimikatz-part-1/Untitled-8e8ceb2e-ba3c-49bd-8786-565f9678eb26.png" alt=""></p>
<p>If at this point you find that symbols are not processed correctly, a <code>.reload /user</code> will normally help.</p>
<p>With the debugger attached, let’s dig into WDigest.</p>
<h2 id="Diving-into-wdigest-dll-and-a-little-lsasrv-dll"><a href="#Diving-into-wdigest-dll-and-a-little-lsasrv-dll" class="headerlink" title="Diving into wdigest.dll (and a little lsasrv.dll)"></a><strong>Diving into wdigest.dll (and a little lsasrv.dll)</strong></h2><p>If we look at Mimikatz source code, we can see that the process of identifying credentials in memory is to scan for signatures. Let’s take the opportunity to use a tool which appears to be in vogue at the minute, <a target="_blank" rel="noopener" href="https://ghidra-sre.org/">Ghidra</a>, and see what Mimikatz is hunting for.</p>
<p>As I’m currently working on Windows 10 x64, I’ll focus on the <code>PTRN_WIN6_PasswdSet</code> signature seen below:</p>
<p><img src="https://assets.xpnsec.com/exploring-mimikatz-part-1/Untitled-f74c5c18-b692-4067-8973-57a0b8f0f689.png" alt=""></p>
<p>After providing this search signature to Ghidra, we reveal what Mimikatz is scanning memory for:</p>
<p><img src="https://assets.xpnsec.com/exploring-mimikatz-part-1/Untitled-9c63afc2-2415-483e-9908-08bb7ef10b58.png" alt=""></p>
<p><img src="https://assets.xpnsec.com/exploring-mimikatz-part-1/Untitled-91f13f3a-5459-4016-bba2-de6222b810ef.png" alt=""></p>
<p>Above we have the function <code>LogSessHandlerPasswdSet</code>. Specifically the signature references just beyond the <code>l_LogSessList</code> pointer. This pointer is key to extracting credentials from WDigest, but before we get ahead of ourselves, let’s back up and figure out what exactly is calling this function by checking for cross references, which lands us here:</p>
<p><img src="https://assets.xpnsec.com/exploring-mimikatz-part-1/Untitled-c6b137f7-427f-4ea2-9ecc-351052f0d94b.png" alt=""></p>
<p>Here we have <code>SpAcceptCredentials</code> which is an exported function from WDigest.dll, but what does this do?</p>
<p><img src="https://assets.xpnsec.com/exploring-mimikatz-part-1/Untitled-aba9e16d-d9b7-4fdd-b42e-85492c91bfa9.png" alt=""></p>
<p>This looks promising as we can see that credentials are passed via this callback function. Let’s confirm that we are in the right place. In WinDBG we can add a breakpoint with <code>bp wdigest!SpAcceptCredentials</code> after which we use the <code>runas</code> command on Windows to spawn a shell:</p>
<p><img src="https://assets.xpnsec.com/exploring-mimikatz-part-1/Untitled-f6c900fb-1f18-4e31-8786-c6eaaaef2d4a.png" alt=""></p>
<p>This should be enough to trigger the breakpoint. Inspecting the arguments to the call, we can now see credentials being passed in:</p>
<p><img src="https://assets.xpnsec.com/exploring-mimikatz-part-1/Untitled-4025fcab-c6da-4da6-8d72-b21a3e78af27.png" alt=""></p>
<p>If we continue with our execution and add another breakpoint on <code>wdigest!LogSessHandlerPasswdSet</code>, we find that although our username is passed, a parameter representing our password cannot be seen. However, if we look just before the call to <code>LogSessHandlerPasswdSet</code>, what we find is this:</p>
<p><img src="https://assets.xpnsec.com/exploring-mimikatz-part-1/Untitled-5293ba7e-9621-420e-aa5d-622edaeca2dd.png" alt=""></p>
<p>This is actually a stub used for Control Flow Guard (<a target="_blank" rel="noopener" href="https://github.com/NationalSecurityAgency/ghidra/issues/318">Ghidra 9.0.3 looks like it has an improvement for displaying CFG stubs</a>), but following along in a debugger shows us that the call is actually to <code>LsaProtectMemory</code>:</p>
<p><img src="https://assets.xpnsec.com/exploring-mimikatz-part-1/Untitled-fe1f19cf-2236-4213-a453-b133f1446f35.png" alt=""></p>
<p>This is expected as we know that credentials are stored encrypted within memory. Unfortunately <code>LsaProtectMemory</code> isn’t exposed outside of lsass, so we need to know how we can recreate its functionality to decrypt extracted credentials. Following with our disassembler shows that this call is actually just a wrapper around <code>LsaEncryptMemory</code>:</p>
<p><img src="https://assets.xpnsec.com/exploring-mimikatz-part-1/Untitled-c8db10dd-bb88-4ffa-8098-46be9f4f7eb5.png" alt=""></p>
<p>And <code>LsaEncryptMemory</code> is actually just wrapping calls to <code>BCryptEncrypt</code>:</p>
<p><img src="https://assets.xpnsec.com/exploring-mimikatz-part-1/Untitled-bb3478e8-cb6e-412d-bdcb-6e09674d8dd3.png" alt=""></p>
<p>Interestingly, the encryption/decryption function is chosen based on the length of the provided blob of data to be encrypted. If the length of the buffer provided is divisible by 8 (donated by the “param_2 &amp; 7” bitwise operation in the screenshot above), then AES is used. Failing this, 3Des is used.</p>
<p>So we now know that our password is encrypted by <code>BCryptEncrypt</code>, but what about the key? Well if we look above, we actually see references to <code>lsasrv!h3DesKey</code> and <code>lsasrv!hAesKey</code>. Tracing references to these addresses shows that <code>lsasrv!LsaInitializeProtectedMemory</code> is used to assign each an initial value. Specifically each key is generated based on calls to <code>BCryptGenRandom</code>:</p>
<p><img src="https://assets.xpnsec.com/exploring-mimikatz-part-1/Untitled-0c5f199f-2046-4c48-8300-4c24e140d6b0.png" alt=""></p>
<p>This means that a new key is generated randomly each time lsass starts, which will have to be extracted before we can decrypt any cached WDigest credentials.</p>
<p>Back to the Mimikatz source code to confirm that we are not going too far off track, we see that there is indeed a hunt for the <code>LsaInitializeProtectedMemory</code> function, again with a comprehensive list of signatures for differing Windows versions and architectures:</p>
<p><img src="https://assets.xpnsec.com/exploring-mimikatz-part-1/Untitled-66752c73-e0a7-455e-a002-20c6090e4993.png" alt=""></p>
<p>And if we search for this within Ghidra, we see that it lands us here:</p>
<p><img src="https://assets.xpnsec.com/exploring-mimikatz-part-1/Untitled-29cd0ff6-ec72-4810-b30c-52c766f875fd.png" alt=""></p>
<p>Here we see a reference to the <code>hAesKey</code> address. So, similar to the above signature search, Mimikatz is hunting for cryptokeys in memory.</p>
<p>Next we need to understand just how Mimikatz goes about pulling the keys out of memory. For this we need to refer to <code>kuhl_m_sekurlsa_nt6_acquireKey</code> within Mimikatz, which highlights the lengths that this tool goes to in supporting different OS versions. We see that <code>hAesKey</code> and <code>h3DesKey</code> (which are of the type <code>BCRYPT_KEY_HANDLE</code> returned from <code>BCryptGenerateSymmetricKey</code>) actually point to a struct in memory consisting of fields including the generated symmetric AES and 3DES keys. This struct can be found documented within Mimikatz:</p>
<pre><code>typedef struct _KIWI_BCRYPT_HANDLE_KEY &#123;
    ULONG size;
    ULONG tag;    // &apos;UUUR&apos;
    PVOID hAlgorithm;
    PKIWI_BCRYPT_KEY key;
    PVOID unk0;
&#125; KIWI_BCRYPT_HANDLE_KEY, *PKIWI_BCRYPT_HANDLE_KEY; </code></pre><p>We can correlate this with WinDBG to make sure we are on the right path by checking for the “UUUR” tag referenced above:</p>
<p><img src="https://assets.xpnsec.com/exploring-mimikatz-part-1/Untitled-64743155-8828-4e0e-8240-3a0a5b4539bd.png" alt=""></p>
<p>At offset 0x10 we see that Mimikatz is referencing <code>PKIWI_BCRYPT_KEY</code> which has the following structure:</p>
<pre><code>typedef struct _KIWI_BCRYPT_KEY81 &#123;
    ULONG size;
    ULONG tag;    // &apos;MSSK&apos;
    ULONG type;
    ULONG unk0;
    ULONG unk1;
    ULONG unk2; 
    ULONG unk3;
    ULONG unk4;
    PVOID unk5;    // before, align in x64
    ULONG unk6;
    ULONG unk7;
    ULONG unk8;
    ULONG unk9;
    KIWI_HARD_KEY hardkey;
&#125; KIWI_BCRYPT_KEY81, *PKIWI_BCRYPT_KEY81;</code></pre><p>And sure enough, following along with WinDBG reveals the same referenced tag:</p>
<p><img src="https://assets.xpnsec.com/exploring-mimikatz-part-1/Untitled-e0e0ae42-19e9-480e-9b34-5347139c6437.png" alt=""></p>
<p>The final member of this struct is a reference to the Mimikatz named <code>KIWI_HARD_KEY</code>, which contains the following:</p>
<pre><code>typedef struct _KIWI_HARD_KEY &#123;
    ULONG cbSecret;
    BYTE data[ANYSIZE_ARRAY]; // etc...
&#125; KIWI_HARD_KEY, *PKIWI_HARD_KEY;</code></pre><p>This struct consists of the the size of the key as <code>cbSecret</code>, followed by the actual key within the <code>data</code> field. This means we can use WinDBG to extract this key with:</p>
<p><img src="https://assets.xpnsec.com/exploring-mimikatz-part-1/Untitled-88d5d07a-e7b6-4af9-a54f-eaa36a5b5eff.png" alt=""></p>
<p>This gives us our <code>h3DesKey</code> which is 0x18 bytes long consisting of<br><code>b9 a8 b6 10 ee 85 f3 4f d3 cb 50 a6 a4 88 dc 6e ee b3 88 68 32 9a ec 5a</code>.</p>
<p>Knowing this, we can follow the same process to extract  <code>hAesKey</code>:</p>
<p><img src="https://assets.xpnsec.com/exploring-mimikatz-part-1/Untitled-b124536e-a86a-4f98-8031-b34eef0c13d2.png" alt=""></p>
<p>Now that we understand just how keys are extracted, we need to hunt for the actual credentials cached by WDigest. Let’s go back to the <code>l_LogSessList</code> pointer we discussed earlier. This field corresponds to a linked list, which we can walk through using the WinDBG command <code>!list -x &quot;dq @$extret&quot; poi(wdigest!l_LogSessList)</code>:</p>
<p><img src="https://assets.xpnsec.com/exploring-mimikatz-part-1/Untitled-e9d0d43b-a5d0-451f-b7a7-92fbfbb4ca39.png" alt=""></p>
<p>The structure of these entries contain the following fields:</p>
<pre><code>typedef struct _KIWI_WDIGEST_LIST_ENTRY &#123;
    struct _KIWI_WDIGEST_LIST_ENTRY *Flink;
    struct _KIWI_WDIGEST_LIST_ENTRY *Blink;
    ULONG    UsageCount;
    struct _KIWI_WDIGEST_LIST_ENTRY *This;
    LUID LocallyUniqueIdentifier;
&#125; KIWI_WDIGEST_LIST_ENTRY, *PKIWI_WDIGEST_LIST_ENTRY;</code></pre><p>Following this struct are three <code>LSA_UNICODE_STRING</code> fields found at the following offsets:</p>
<ul>
<li>0x30 - Username</li>
<li>0x40 - Hostname</li>
<li>0x50 - Encrypted Password</li>
</ul>
<p>Again we can check that we are on the right path with WinDBG using a command such as:</p>
<pre><code>!list -x &quot;dS @$extret+0x30&quot; poi(wdigest!l_LogSessList)</code></pre><p>This will dump cached usernames as:</p>
<p><img src="https://assets.xpnsec.com/exploring-mimikatz-part-1/Untitled-7b58b4e1-db00-4e71-8202-8e16778dcd66.png" alt=""></p>
<p>And finally we can dump encrypted password using a similar command:</p>
<pre><code>!list -x &quot;db poi(@$extret+0x58)&quot; poi(wdigest!l_LogSessList)</code></pre><p><img src="https://assets.xpnsec.com/exploring-mimikatz-part-1/Untitled-2740579b-207f-4b1a-b40f-073d0d5ed539.png" alt=""></p>
<p>And there we have it, all the pieces required to extract WDigest credentials from memory.</p>
<p>So now that we have all the information needed for the extraction and decryption process, how feasible would it be to piece this together into a small standalone tool outside of Mimikatz? To explore this I’ve created a heavily commented POC which is <a target="_blank" rel="noopener" href="https://gist.github.com/xpn/e3837a4fdee8ea1b05f7fea5e7ea9444">available here</a>. When executed on Windows 10 x64 (build 1809), it provides verbose information on the process of extracting creds:</p>
<p><img src="https://assets.xpnsec.com/exploring-mimikatz-part-1/Untitled-28f0f5e6-0b77-48ab-97cc-67a1400043a1.png" alt=""></p>
<p>By no means should this be considered OpSec safe, but it will hopefully give an example of how we can go about crafting alternative tooling.</p>
<p>Now that we understand how WDigest cached credentials are grabbed and decrypted, we can move onto another area affecting the collection of plain-text credentials, “UseLogonCredential”.</p>
<h2 id="But-UseLogonCredential-is-0"><a href="#But-UseLogonCredential-is-0" class="headerlink" title="But UseLogonCredential is 0"></a>But UseLogonCredential is 0</h2><p>So as we know, with everyone running around dumping cleartext credentials, Microsoft decided to disable support for this legacy protocol by default. Of course there will be some users who may be using WDigest, so to provide the option of re-enabling this, Microsoft pointed to a registry key of <code>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\SecurityProviders\WDigest\UseLogonCredential</code>. Toggling this from ‘0’ to ‘1’ forces WDigest to start caching credentials again, which of course meant that pentesters were back in the game… however there was a catch, toggling this setting required a reboot of the OS, and I’ve yet to meet a client who would allow this outside of a test environment.</p>
<p>The obvious question is… why do you need to reboot the machine for this to take effect?</p>
<p>Edit: As pointed out by GentilKiwi, a reboot isn’t required for this change to take effect. I’ve added a review of why this is at the end of this section.</p>
<p>Let’s take a look at <code>SpAcceptCredentials</code> again, and after a bit of hunting we find this:</p>
<p><img src="https://assets.xpnsec.com/exploring-mimikatz-part-1/Untitled-bbad509e-989c-4fd7-b4fc-3207f0482e2f.png" alt=""></p>
<p>Here we can clearly see that there is a check for two conditions using global variables. If <code>g_IsCredGuardEnabled</code> is set to <code>1</code>, or <code>g_fParameter_UseLogonCredential</code> is set to <code>0</code>, we find that the code path taken is via <code>LogSessHandlerNoPasswordInsert</code> rather than the above <code>LogSessHandlerPasswdSet</code> call. As the name suggests, this function caches the session but not the password, resulting in the behaviour we normally encounter when popping Windows 2012+ boxes. It’s therefore reasonable to assume that this variable is controlled by the above registry key value based on its name, and we find this to be the case by tracing its assignment:</p>
<p><img src="https://assets.xpnsec.com/exploring-mimikatz-part-1/Untitled-699fd294-e5a8-4b24-a9e4-0956efaf0c68.png" alt=""></p>
<p>By understanding what variables within WDigest.dll control credential caching, can we subvert this without updating the registry? What if we update that <code>g_fParameter_UseLogonCredential</code> parameter during runtime with our debugger?</p>
<p><img src="https://assets.xpnsec.com/exploring-mimikatz-part-1/Untitled-28074429-8e66-44d8-b6dd-5701c4e66424.png" alt=""></p>
<p>Resuming execution, we see that cached credentials are stored again:</p>
<p><img src="https://assets.xpnsec.com/exploring-mimikatz-part-1/Untitled-c5d5b8f0-73f4-4806-aba2-b6e07afe2715.png" alt=""></p>
<p>Of course most things are possible when you have a kernel debugger hooked up, but if you have a way to manipulate lsass memory without triggering AV/EDR (see our earlier <a target="_blank" rel="noopener" href="https://www.mdsec.co.uk/2019/03/silencing-cylance-a-case-study-in-modern-edrs/">Cylance blog post</a> for one example of how you would do this), then there is nothing stopping you from crafting a tool to manipulate this variable. Again I’ve created a heavily verbose tool to demonstrate how this can be done which can be <a target="_blank" rel="noopener" href="https://gist.github.com/xpn/163360379f3cce2443a7b074f0a173b8">found here</a>.</p>
<p>This example will hunt for and update the <code>g_fParameter_UseLogonCredential</code> value in memory. If you are operating against a system protected with Credential Guard, the modifications required to also update this value are trivial and left as an exercise to the reader.</p>
<p>With our POC executed, we find that WDigest has now been re-enabled without having to set the registry key, allowing us to pull out credentials as they are cached:</p>
<p><img src="https://assets.xpnsec.com/exploring-mimikatz-part-1/Untitled-9ece2a3e-d953-4e9e-8407-c4d51e61ad0f.png" alt=""></p>
<p>Again this POC should not be considered as OpSec safe, but used as a verbose example of how you can craft your own.</p>
<p>Now of course this method of enabling WDigest comes with risks, mainly the <code>WriteProcessMemory</code> call into lsass, but if suited to the environment it offers a nice way to enable WDigest without setting a registry value. There are also other methods of acquiring plain-text credentials which may be more suited to your target outside of WDigest (memssp for one, which we will review in a further post).</p>
<p>Edit: As pointed out by GentilKiwi, a reboot is not required for <code>UseLogonCredential</code> to take effect… so back to the disassembler we go.</p>
<p>Reviewing other locations referencing the registry value, we find <code>wdigest!DigestWatchParamKey</code> which monitors a number of keys including:</p>
<p><img src="https://assets.xpnsec.com/exploring-mimikatz-part-1/Screenshot-2019-05-12-at-15.05.59.png" alt="Screenshot-2019-05-12-at-15.05.59"></p>
<p>The Win32 API used to trigger this function on update is <a target="_blank" rel="noopener" href="https://docs.microsoft.com/en-us/windows/desktop/api/winreg/nf-winreg-regnotifychangekeyvalue"><code>RegNotifyKeyChangeValue</code></a>:</p>
<p><img src="https://assets.xpnsec.com/exploring-mimikatz-part-1/Screenshot-2019-05-12-at-15.15.43.png" alt="Screenshot-2019-05-12-at-15.15.43"></p>
<p>And if we add a breakpoint on <code>wdigest!DigestWatchParamKey</code> in WinDBG, we see that this is triggered as we attempt to add a <code>UseLogonCredential</code>:</p>
<p><img src="https://assets.xpnsec.com/exploring-mimikatz-part-1/Screenshot-2019-05-12-at-15.21.38.png" alt="Screenshot-2019-05-12-at-15.21.38"></p>
<h2 id="Bonus-Round-Loading-an-arbitrary-DLL-into-LSASS"><a href="#Bonus-Round-Loading-an-arbitrary-DLL-into-LSASS" class="headerlink" title="Bonus Round - Loading an arbitrary DLL into LSASS"></a>Bonus Round - Loading an arbitrary DLL into LSASS</h2><p>So while digging around with a disassemler I wanted to look for an alternative way to load code into lsass while avoiding potentially hooked Win32 API calls, or by loading an SSP. After a bit of disassembly, I came across the following within <code>lsasrv.dll</code>:</p>
<p><img src="https://assets.xpnsec.com/exploring-mimikatz-part-1/Untitled-39102256-da86-4c51-b72c-2b23350cf58c.png" alt=""></p>
<p>This attempt to call <code>LoadLibraryExW</code> on a user provided value can be found within the function <code>LsapLoadLsaDbExtensionDll</code> and allows us to craft a DLL to be loaded into the lsass process, for example:</p>
<pre><code>BOOL APIENTRY DllMain( HMODULE hModule,
                       DWORD  ul_reason_for_call,
                       LPVOID lpReserved
                     )
&#123;
    switch (ul_reason_for_call)
    &#123;
    case DLL_PROCESS_ATTACH:

        // Insert l33t payload here

        break;
    &#125;

    // Important to avoid BSOD
    return FALSE;
&#125;</code></pre><p>It is important that at the end of the <code>DllMain</code> function, we return <code>FALSE</code> to force an error on <code>LoadLibraryEx</code>. This is to avoid the subsequent call to <code>GetProcAddress</code>. Failing to do this will result in a BSOD on reboot until the DLL or registry key is removed.</p>
<p>With a DLL crafted, all that we then need to do is create the above registry key:</p>
<pre><code>New-ItemProperty -Path HKLM:\SYSTEM\CurrentControlSet\Services\NTDS -Name LsaDbExtPt -Value &quot;C:\xpnsec.dll&quot;</code></pre><p>Loading of the DLL will occur on system reboot, which makes it a potential persistence technique for privileged compromises, pushing your payload straight into lsass (as long as PPL isn’t enabled of course).</p>
<h2 id="Bonus-Round-2-Loading-arbitrary-DLL-into-LSASS-remotely"><a href="#Bonus-Round-2-Loading-arbitrary-DLL-into-LSASS-remotely" class="headerlink" title="Bonus Round 2 - Loading arbitrary DLL into LSASS remotely"></a>Bonus Round 2 - Loading arbitrary DLL into LSASS remotely</h2><p>After some further hunting, a similar vector to that above was found within samsrv.dll. Again a controlled registry value is loaded into lsass by a <code>LoadLibraryEx</code> call:</p>
<p><img src="https://assets.xpnsec.com/exploring-mimikatz-part-1/Untitled-ce543b8c-48b1-4b02-882d-2a037fe453e9.png" alt=""></p>
<p>Again we can leverage this by adding a registry key and rebooting, however triggering this case is a lot simpler as it can be fired using SAMR RPC calls.</p>
<p>Let’s have a bit of fun by using our above WDigest credential extraction code to craft a DLL which will dump credentials for us.</p>
<p>To load our DLL, we can use a very simple Impacket Python script to modify the registry and add a key to <code>HKLM\SYSTEM\CurrentControlSet\Services\NTDS\DirectoryServiceExtPt</code> pointing to our DLL hosted on an open SMB share, and then trigger the loading of the DLL using a call to <code>hSamConnect</code> RPC call. The code looks like this:</p>

<script src="https://gist.github.com/xpn/000209543cec5c60fab3b2096875e0e1.js"></script>


<p>And in practice, we can see credentials pulled from memory:</p>
<p><a target="_blank" rel="noopener" href="https://asciinema.org/a/VwaStfgka8FHmHWhXjmBmu8zV"><img src="https://asciinema.org/a/VwaStfgka8FHmHWhXjmBmu8zV.svg" alt="asciicast"></a></p>
<p>The code for the DLL used can be found <a target="_blank" rel="noopener" href="https://gist.github.com/xpn/12a6907a2fce97296428221b3bd3b394">here</a>, which is a modification of the earlier example.</p>
<p>So hopefully this post has given you an idea as to how WDigest credential caching works and how Mimikatz goes about pulling and decrypting passwords during <code>&quot;sekurlsa::wdigest&quot;</code>. More importantly I hope that it will help anyone looking to craft something custom for their next assessment. I’ll be continuing by looking at other areas which are commonly used during an engagement, but if you have any questions or suggestions, give me a shout at the usual places.</p>

  </article>
</div>

      </main> 
    </div>
    <footer class="main-footer">
  <div class="container clearfix">
    <a href="https://blog.xpnsec.com/rss/" title="RSS Feed"><i class="fa fa-rss"></i></a>
  </div>
</footer>

    <script src="https://code.jquery.com/jquery-1.12.4.min.js" integrity="sha256-ZosEbRLbNQzLpnKIkEdrPv7lOy9C27hHQ+Xp8a4MxAQ=" crossorigin="anonymous"></script>
    
<script src="/js/skel.min.js"></script>

    
<script src="/js/main.js"></script>

    </div>
  </body>
</html>
