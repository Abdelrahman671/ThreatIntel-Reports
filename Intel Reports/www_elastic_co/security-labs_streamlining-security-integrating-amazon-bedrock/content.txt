<!DOCTYPE html><html lang="en"><head><meta charSet="utf-8"/><meta name="viewport" content="width=device-width"/><title>Streamlining Security: Integrating Amazon Bedrock with Elastic — Elastic Security Labs</title><meta name="description" content="This article will guide you through the process of setting up the Amazon Bedrock integration and enabling Elastic&#x27;s prebuilt detection rules to streamline your security operations."/><meta property="og:title" content="Streamlining Security: Integrating Amazon Bedrock with Elastic — Elastic Security Labs"/><meta property="og:description" content="This article will guide you through the process of setting up the Amazon Bedrock integration and enabling Elastic&#x27;s prebuilt detection rules to streamline your security operations."/><meta property="og:image" content="https://www.elastic.co/security-labs/assets/images/streamlining-security-integrating-amazon-bedrock/Security Labs Images 36.jpg?99b105896857b2164bd20d95e730d289"/><meta property="og:image:alt" content="This article will guide you through the process of setting up the Amazon Bedrock integration and enabling Elastic&#x27;s prebuilt detection rules to streamline your security operations."/><meta property="og:site_name"/><meta property="og:url" content="https://www.elastic.co/security-labs/streamlining-security-integrating-amazon-bedrock"/><meta property="og:type" content="website"/><meta name="twitter:card" content="summary_large_image"/><meta name="twitter:title" content="Streamlining Security: Integrating Amazon Bedrock with Elastic — Elastic Security Labs"/><meta name="twitter:description" content="This article will guide you through the process of setting up the Amazon Bedrock integration and enabling Elastic&#x27;s prebuilt detection rules to streamline your security operations."/><meta name="twitter:image" content="https://www.elastic.co/security-labs/assets/images/streamlining-security-integrating-amazon-bedrock/Security Labs Images 36.jpg?99b105896857b2164bd20d95e730d289"/><meta name="twitter:image:alt" content="This article will guide you through the process of setting up the Amazon Bedrock integration and enabling Elastic&#x27;s prebuilt detection rules to streamline your security operations."/><link rel="canonical" href="https://www.elastic.co/security-labs/streamlining-security-integrating-amazon-bedrock"/><link rel="preload" href="/security-labs/logo.svg" as="image" fetchpriority="high"/><link rel="preload" as="image" imageSrcSet="/security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fstreamlining-security-integrating-amazon-bedrock%2FSecurity%20Labs%20Images%2036.jpg&amp;w=640&amp;q=75 640w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fstreamlining-security-integrating-amazon-bedrock%2FSecurity%20Labs%20Images%2036.jpg&amp;w=750&amp;q=75 750w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fstreamlining-security-integrating-amazon-bedrock%2FSecurity%20Labs%20Images%2036.jpg&amp;w=828&amp;q=75 828w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fstreamlining-security-integrating-amazon-bedrock%2FSecurity%20Labs%20Images%2036.jpg&amp;w=1080&amp;q=75 1080w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fstreamlining-security-integrating-amazon-bedrock%2FSecurity%20Labs%20Images%2036.jpg&amp;w=1200&amp;q=75 1200w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fstreamlining-security-integrating-amazon-bedrock%2FSecurity%20Labs%20Images%2036.jpg&amp;w=1920&amp;q=75 1920w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fstreamlining-security-integrating-amazon-bedrock%2FSecurity%20Labs%20Images%2036.jpg&amp;w=2048&amp;q=75 2048w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fstreamlining-security-integrating-amazon-bedrock%2FSecurity%20Labs%20Images%2036.jpg&amp;w=3840&amp;q=75 3840w" imageSizes="100vw" fetchpriority="high"/><meta name="next-head-count" content="19"/><script src="https://play.vidyard.com/embed/v4.js" type="text/javascript" async=""></script><link rel="icon" href="/security-labs/favicon.svg"/><link rel="mask-icon" href="/security-labs/favicon.svg" color="#1C1E23"/><link rel="apple-touch-icon" href="/security-labs/favicon.svg"/><meta name="theme-color" content="#1C1E23"/><link rel="preload" href="/security-labs/_next/static/media/6d93bde91c0c2823-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/a34f9d1faa5f3315-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/369c6e283c5acc6e-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/92f44bb82993d879-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/ee71530a747ff30b-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/9fac010bc1f02be0-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/cbf5fbad4d73afac-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><script id="google-tag-manager" data-nscript="beforeInteractive">
          (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
          new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
          j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
          'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
          })(window,document,'script','dataLayer','GTM-KNJMG2M');
          </script><link rel="preload" href="/security-labs/_next/static/css/265ed7605fd03477.css" as="style"/><link rel="stylesheet" href="/security-labs/_next/static/css/265ed7605fd03477.css" data-n-g=""/><link rel="preload" href="/security-labs/_next/static/css/1007ff9e696f6f88.css" as="style"/><link rel="stylesheet" href="/security-labs/_next/static/css/1007ff9e696f6f88.css" data-n-p=""/><noscript data-n-css=""></noscript><script defer="" nomodule="" src="/security-labs/_next/static/chunks/polyfills-78c92fac7aa8fdd8.js"></script><script src="/security-labs/_next/static/chunks/webpack-7987c6fda769d510.js" defer=""></script><script src="/security-labs/_next/static/chunks/framework-7a7e500878b44665.js" defer=""></script><script src="/security-labs/_next/static/chunks/main-ebd33a9f1cae5951.js" defer=""></script><script src="/security-labs/_next/static/chunks/pages/_app-cb8664d1d3df2511.js" defer=""></script><script src="/security-labs/_next/static/chunks/fec483df-43ee602fabdfe3a4.js" defer=""></script><script src="/security-labs/_next/static/chunks/877-34f408271ef44c22.js" defer=""></script><script src="/security-labs/_next/static/chunks/511-d08fe0fdd6f8a984.js" defer=""></script><script src="/security-labs/_next/static/chunks/683-a5053c37fe5bd0c9.js" defer=""></script><script src="/security-labs/_next/static/chunks/402-8f632e261e10d103.js" defer=""></script><script src="/security-labs/_next/static/chunks/616-0b017b9cfa597392.js" defer=""></script><script src="/security-labs/_next/static/chunks/pages/%5Bslug%5D-b0c191de1a3710e4.js" defer=""></script><script src="/security-labs/_next/static/kahZ-cxorFKvHlgt0NoHQ/_buildManifest.js" defer=""></script><script src="/security-labs/_next/static/kahZ-cxorFKvHlgt0NoHQ/_ssgManifest.js" defer=""></script></head><body><noscript><iframe src="https://www.googletagmanager.com/ns.html?id=GTM-KNJMG2M" height="0" width="0" style="display:none;visibility:hidden"></iframe></noscript><div id="__next"><main class="__variable_0351a5 __variable_1f211e __variable_a5b5f5 flex flex-col min-h-screen"><div class="scroll-percentage-container"><div class="scroll-percentage-bar" style="width:0%"></div></div><nav class="fixed w-full z-40" data-headlessui-state=""><div class="bg-gradient-to-b from-zinc-900 from-20% h-[200%] to-transparent absolute inset-0 z-0 pointer-events-none"></div><div class="container relative z-10"><div class="flex h-16 items-center justify-between"><div class="flex items-center justify-start w-full"><div><a class="hover:opacity-50 transition" href="/security-labs"><img alt="elastic security labs logo" fetchpriority="high" width="200" height="30" decoding="async" data-nimg="1" style="color:transparent" src="/security-labs/logo.svg"/></a></div><div class="hidden lg:ml-6 lg:block"><div class="flex space-x-4"><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/about"><span>About</span></a><div class="relative" data-headlessui-state=""><div><button class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" id="headlessui-menu-button-:R2kpm:" type="button" aria-haspopup="menu" aria-expanded="false" data-headlessui-state="">Topics<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" class="ml-1 -mr-1 h-4 w-4 text-zinc-400 relative top-[1px]"><path fill-rule="evenodd" d="M5.23 7.21a.75.75 0 011.06.02L10 11.168l3.71-3.938a.75.75 0 111.08 1.04l-4.25 4.5a.75.75 0 01-1.08 0l-4.25-4.5a.75.75 0 01.02-1.06z" clip-rule="evenodd"></path></svg></button></div></div><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/category/vulnerability-updates"><span>Vulnerability updates</span></a><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/category/reports"><span>Reports</span></a><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/category/tools"><span>Tools</span></a></div></div><div class="hidden lg:ml-auto lg:block"><div class="flex items-center space-x-4"><a class="rounded flex items-center p-4 text-white focus:outline-none focus:ring-0 focus:ring-offset-1 focus:ring-offset-zinc-600 group" href="https://search.elastic.co/?location%5B0%5D=Security%20Labs&amp;referrer=https://www.elastic.co/security-labs/streamlining-security-integrating-amazon-bedrock"><div class="flex items-center relative font-display"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-6 w-6"><path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z"></path></svg></div></a><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="https://www.elastic.co/security-labs/rss/feed.xml"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" class="h-4 w-4 mr-1"><path d="M3.75 3a.75.75 0 00-.75.75v.5c0 .414.336.75.75.75H4c6.075 0 11 4.925 11 11v.25c0 .414.336.75.75.75h.5a.75.75 0 00.75-.75V16C17 8.82 11.18 3 4 3h-.25z"></path><path d="M3 8.75A.75.75 0 013.75 8H4a8 8 0 018 8v.25a.75.75 0 01-.75.75h-.5a.75.75 0 01-.75-.75V16a6 6 0 00-6-6h-.25A.75.75 0 013 9.25v-.5zM7 15a2 2 0 11-4 0 2 2 0 014 0z"></path></svg><span class="hidden xl:block">Subscribe</span></a><a class="font-display inline-flex items-center justify-center rounded font-semibold disabled:!select-none disabled:!bg-gray-400 bg-blue-600 text-white hover:bg-blue-500 enabled:hover:text-white/80 transition-colors px-4 py-2 text-sm flex-1 lg:flex-auto" href="https://cloud.elastic.co/registration?cta=cloud-registration&amp;tech=trial&amp;plcmt=navigation&amp;pg=security-labs">Start free trial</a><a class="font-display inline-flex items-center justify-center rounded font-semibold text-white disabled:!select-none disabled:!bg-gray-400 button px-4 py-2 text-sm flex-1 lg:flex-auto" href="https://www.elastic.co/contact">Contact sales</a></div></div></div><div class="-mr-2 flex lg:hidden"><a class="rounded flex items-center p-4 text-white focus:outline-none focus:ring-0 focus:ring-offset-1 focus:ring-offset-zinc-600 group" href="https://search.elastic.co/?location%5B0%5D=Security%20Labs&amp;referrer=https://www.elastic.co/security-labs/streamlining-security-integrating-amazon-bedrock"><div class="flex items-center relative font-display"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-6 w-6"><path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z"></path></svg></div></a><button class="inline-flex items-center justify-center rounded-md p-2 text-gray-400 hover:bg-gray-700 hover:text-white focus:outline-none focus:ring-2 focus:ring-inset focus:ring-white" id="headlessui-disclosure-button-:R59m:" type="button" aria-expanded="false" data-headlessui-state=""><span class="sr-only">Open navigation menu</span><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="block h-6 w-6"><path stroke-linecap="round" stroke-linejoin="round" d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5"></path></svg></button></div></div></div></nav><main class="mb-20 flex-1 flex flex-col"><div class="h-48 md:h-64"><div class="after:absolute after:block after:bg-blue-400 after:blur-3xl after:content-[&#x27; &#x27;] after:h-96 after:opacity-5 after:right-0 after:rounded-full after:top-20 after:w-1/2 after:z-0 before:absolute before:block before:blur-3xl before:bg-orange-400 before:content-[&#x27; &#x27;] before:h-96 before:left-0 before:opacity-5 before:rounded-full before:w-1/2 before:z-0 w-full h-full relative"><div class="relative z-10 w-full h-[125%] -top-[25%] bg-no-repeat bg-cover bg-bottom flex items-center justify-center" style="background-image:url(/security-labs/grid.svg)"></div></div></div><article class="px-4"><div class="max-w-7xl mx-auto relative z-10 flex flex-col space-y-4"><div class="eyebrow break-words"><time class="block mb-2 md:mb-0 md:inline-block article-published-date" dateTime="2024-11-14T00:00:00.000Z">14 November 2024</time><span class="hidden md:inline-block md:mx-2">•</span><a class="hover:text-blue-400 text-xs md:text-sm whitespace-nowrap author-name" href="/security-labs/author/shashank-k-s">Shashank K S</a></div><h1 class="font-bold leading-tighter text-3xl md:text-5xl"><span>Streamlining Security: Integrating Amazon Bedrock with&nbsp;Elastic</span></h1><p class="text-zinc-200 text-base md:text-xl">This article will guide you through the process of setting up the Amazon Bedrock integration and enabling Elastic&#x27;s prebuilt detection rules to streamline your security operations.</p><div class="flex items-center mt-4 text-zinc-200 text-sm space-x-4 border-t border-white/25 pt-4"><span class="flex items-center space-x-1"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-4 w-4 text-zinc-400"><path stroke-linecap="round" stroke-linejoin="round" d="M12 6v6h4.5m4.5 0a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg><span>15 min read</span></span><span class="flex items-center space-x-1"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-4 w-4 text-zinc-400"><path stroke-linecap="round" stroke-linejoin="round" d="M9.568 3H5.25A2.25 2.25 0 003 5.25v4.318c0 .597.237 1.17.659 1.591l9.581 9.581c.699.699 1.78.872 2.607.33a18.095 18.095 0 005.223-5.223c.542-.827.369-1.908-.33-2.607L11.16 3.66A2.25 2.25 0 009.568 3z"></path><path stroke-linecap="round" stroke-linejoin="round" d="M6 6h.008v.008H6V6z"></path></svg><span><a class="hover:text-blue-400 whitespace-nowrap" href="/security-labs/category/security-research">Security research</a></span></span></div></div><div class="max-w-7xl mx-auto"><div class="bg-zinc-900 border border-zinc-800 drop-shadow-lg p-5 sm:p-8 md:p-10 rounded-3xl mt-5 md:mt-10"><div class="relative w-full rounded-lg overflow-hidden aspect-video"><img alt="Streamlining Security: Integrating Amazon Bedrock with Elastic" fetchpriority="high" decoding="async" data-nimg="fill" class="object-cover absolute h-full w-full" style="position:absolute;height:100%;width:100%;left:0;top:0;right:0;bottom:0;color:transparent" sizes="100vw" srcSet="/security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fstreamlining-security-integrating-amazon-bedrock%2FSecurity%20Labs%20Images%2036.jpg&amp;w=640&amp;q=75 640w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fstreamlining-security-integrating-amazon-bedrock%2FSecurity%20Labs%20Images%2036.jpg&amp;w=750&amp;q=75 750w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fstreamlining-security-integrating-amazon-bedrock%2FSecurity%20Labs%20Images%2036.jpg&amp;w=828&amp;q=75 828w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fstreamlining-security-integrating-amazon-bedrock%2FSecurity%20Labs%20Images%2036.jpg&amp;w=1080&amp;q=75 1080w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fstreamlining-security-integrating-amazon-bedrock%2FSecurity%20Labs%20Images%2036.jpg&amp;w=1200&amp;q=75 1200w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fstreamlining-security-integrating-amazon-bedrock%2FSecurity%20Labs%20Images%2036.jpg&amp;w=1920&amp;q=75 1920w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fstreamlining-security-integrating-amazon-bedrock%2FSecurity%20Labs%20Images%2036.jpg&amp;w=2048&amp;q=75 2048w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fstreamlining-security-integrating-amazon-bedrock%2FSecurity%20Labs%20Images%2036.jpg&amp;w=3840&amp;q=75 3840w" src="/security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fstreamlining-security-integrating-amazon-bedrock%2FSecurity%20Labs%20Images%2036.jpg&amp;w=3840&amp;q=75"/><div class="absolute border border-white/50 inset-0 mix-blend-overlay rounded-lg z-10"></div></div></div></div><div class="lg:max-w-7xl mx-auto relative mt-12 lg:grid lg:grid-cols-4 lg:gap-8 items-start"><div class="flex justify-center lg:col-span-3"><div class="prose lg:prose-lg prose-invert w-full article-content"><div><h1 class="font-bold leading-tighter text-3xl md:text-5xl relative"><span id="preamble" class="absolute -top-32"></span>Preamble</h1>
<p>In the ever-evolving landscape of cloud computing, maintaining robust security while ensuring compliance is a critical challenge for organizations of all sizes. As businesses increasingly adopt the cloud, the complexity of managing and securing data across various platforms grows exponentially.</p>
<p><a href="https://docs.aws.amazon.com/bedrock/latest/userguide/what-is-bedrock.html">Amazon Bedrock</a>, with its powerful foundation of machine learning and AI services, offers a scalable, secure environment for organizations to develop and deploy intelligent applications. However, to fully harness the potential of these innovations, it’s essential to implement a streamlined approach to security and compliance.</p>
<p>Integrating Elastic with Amazon Bedrock can significantly enhance security monitoring and compliance management within your cloud environment. This integration leverages Elastic’s search, observability, and security capabilities to optimize how you manage and secure applications and data hosted on Amazon Bedrock.</p>
<p>Elastic’s <a href="https://www.elastic.co/security/siem">security information and event management (SIEM) capabilities</a> can be used to analyze logs and monitor events generated by applications running on Amazon Bedrock. This allows for the detection of potential security threats in real-time and automated response actions to mitigate risks.</p>
<p>This article will guide you through the process of setting up Amazon Bedrock integration and enabling our prebuilt detection rules to streamline your security operations. We will cover the following key aspects:</p>
<ol>
<li><strong>Prerequisites for Elastic Amazon Bedrock Integration:</strong> Understanding the core requirements for setting up Elastic Amazon Bedrock integration for cloud security.</li>
<li><strong>Setting Up Amazon Bedrock Integration</strong>: Step-by-step instructions to set up Amazon Bedrock in your existing AWS infrastructure.</li>
<li><strong>Enabling Prebuilt Security Rules</strong>: How to leverage <a href="https://www.elastic.co/guide/en/security/current/rules-ui-management.html">prebuilt rules</a> to detect high-confidence policy violations and other security threats.</li>
<li><strong>Exploring High-Confidence Misconduct Blocks Detection:</strong> An in-depth look at a specific prebuilt rule designed to detect high-confidence misconduct blocks within Amazon Bedrocklogs.</li>
<li><strong>Demonstrate an Exploit Case Scenario for Amazon Bedrock:</strong>  Using a sample python script to simulate interactions with an Amazon Bedrock model for testing exploit scenarios that could trigger Elastic prebuilt detection rules.</li>
</ol>
<h1 class="font-bold leading-tighter text-3xl md:text-5xl relative"><span id="prerequisites-for-elastic-amazon-bedrock-integration" class="absolute -top-32"></span>Prerequisites for Elastic Amazon Bedrock Integration</h1>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="elastic-integration-for-amazon-bedrock" class="absolute -top-32"></span>Elastic Integration for Amazon Bedrock</h2>
<p>The Amazon Bedrock integration collects Amazon Bedrock model invocation logs and runtime metrics with Elastic Agent. For a deeper dive on the integration, documentation can be found in our <a href="https://www.elastic.co/docs/current/integrations/aws_bedrock">documentation.</a></p>
<p>Below are the list of prerequisites to have a complete and successful configuration of Amazon Bedrock Elastic Integration:</p>
<ul>
<li>AWS Account Setup</li>
<li>Elastic Cloud Requirements</li>
<li>Terraform (Optional)</li>
</ul>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="aws-account-setup" class="absolute -top-32"></span>AWS Account Setup</h3>
<ul>
<li><strong>Active AWS Account</strong>: Ensure you have an active AWS account with the appropriate permissions to deploy and manage resources on Amazon Bedrock.</li>
<li><strong>Amazon Bedrock Setup</strong>: Confirm that Amazon Bedrock is correctly configured and operational within your AWS environment. This includes setting up AI models, datasets, and other resources necessary for your applications. Refer to <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/getting-started.html">Getting started with Amazon Bedrock</a> for additional information on the setup.</li>
<li><strong>IAM Roles and Permissions</strong>: Create or configure Identity and Access Management (IAM) roles with the necessary permissions to allow Elastic to access Amazon Bedrock resources. These roles should have sufficient privileges to read logs, metrics, and traces from AWS services. Additional details of the requirements can be found in our <a href="https://www.elastic.co/docs/current/integrations/aws#requirements">AWS documentation</a>.</li>
</ul>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="elastic-cloud-requirements" class="absolute -top-32"></span>Elastic Cloud Requirements</h3>
<div class="table-container"><table style="width:100%;table-layout:fixed;word-wrap:break-word"><thead><tr><th align="left"><a href="https://www.elastic.co/docs/current/integrations/aws_bedrock#changelog">Version</a></th><th align="left">0.7.0 (Beta)</th></tr></thead><tbody><tr><td align="left"><strong>Compatible Kibana version(s)</strong></td><td align="left">8.13.0 or higher for integration version 0.2.0 and above.Minimum Kibana Version 8.12.0</td></tr><tr><td align="left"><a href="https://www.elastic.co/docs/current/integrations/serverless/support"><strong>Supported Serverless project types</strong></a></td><td align="left">Security Observability</td></tr><tr><td align="left"><a href="https://www.elastic.co/subscriptions"><strong>Subscription level</strong></a></td><td align="left">Basic</td></tr><tr><td align="left"><a href="https://www.elastic.co/docs/current/integrations/support"><strong>Level of support</strong></a></td><td align="left">Elastic</td></tr></tbody></table></div>
<p><strong>Note:</strong>  Since the integration is in Beta Release Stage, please enable <em><strong>Display Beta Integrations in the browse integration section of the Management pane in your Elastic stack.</strong></em></p>
<p></p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="terraform" class="absolute -top-32"></span>Terraform</h3>
<p><a href="https://www.terraform.io/">Terraform</a> is an open source infrastructure-as-code (IaC) tool created by HashiCorp that allows you to define, provision, and manage cloud and on-premises infrastructure in a consistent and repeatable way.</p>
<p>This is an optional step, but good to have as the next sections of the article we use this tool to set up the required AWS Infrastructure. Deep dive on installation and docs can be found <a href="https://developer.hashicorp.com/terraform/tutorials/aws-get-started/install-cli">here</a>.</p>
<h1 class="font-bold leading-tighter text-3xl md:text-5xl relative"><span id="setting-up-amazon-bedrock-integration" class="absolute -top-32"></span>Setting Up Amazon Bedrock Integration</h1>
<p>In this section of the article, we will walk through the steps to set up Amazon Bedrock integration with Elastic in two parts:</p>
<ol>
<li><strong>Setting Up AWS Infrastructure with Terraform</strong>: In this section, we&#x27;ll walk through the steps to set up an AWS infrastructure using Terraform. We&#x27;ll create an S3 bucket, an EC2 instance with the necessary IAM roles and policies to access the S3 bucket, and configure security groups to allow SSH access. This setup is ideal for scenarios where you need an EC2 instance to interact with S3, such as for data processing or storage.</li>
<li><strong>Elastic Agent and Integration Setup</strong>: In this section, we&#x27;ll walk through the steps to install Elastic Agent on the AWS EC2 instance and Configure the Amazon Bedrock Integration.</li>
</ol>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="setting-up-aws-infrastructure-with-terraform" class="absolute -top-32"></span>Setting Up AWS Infrastructure with Terraform</h3>
<p>The high-level configuration process will involve the following steps:</p>
<ol>
<li>Configuring <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">providers.tf</code></li>
<li>Configuring <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">variables.tf</code></li>
<li>Configuring <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">outputs.tf</code></li>
<li>Configuring <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">main.tf</code></li>
</ol>
<p>The <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">providers.tf</code> file typically contains the configuration for any Terraform providers you are using in your project. In our example, it includes the configuration for the AWS provider. Here is the <a href="https://gist.github.com/shashank-elastic/290218cd4e787f65fbcbfd6423a0ca85#file-providers-tf">sample content</a> of our <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">providers.tf</code> file. The <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">profile</code> mentioned in the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">providers.tf</code> should be configured in the user’s space of the AWS credentials file <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">(~/.aws/credentials)</code>. Refer to <a href="https://docs.aws.amazon.com/cli/v1/userguide/cli-configure-files.html#cli-configure-files-format-profile">Configuration and credential file settings - AWS Command Line Interface</a>, which is also highlighted in the credential section of Elastic’s <a href="https://www.elastic.co/docs/current/integrations/aws#aws-credentials">AWS documentation</a>.</p>
<p>The <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">variables.tf</code> file contains the variable definitions used throughout your Terraform configuration. For our scenario, it includes the definition for the aws_region and resource_labels. Here is the <a href="https://gist.github.com/shashank-elastic/290218cd4e787f65fbcbfd6423a0ca85#file-variables-tf">sample content</a> of our <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">variables.tf</code> file.</p>
<p>The <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">outputs.tf</code> file typically contains the output definitions for your Terraform configuration. These outputs can be used to display useful information after your infrastructure is provisioned. Here is the <a href="https://gist.github.com/shashank-elastic/290218cd4e787f65fbcbfd6423a0ca85#file-outputs-tf">sample content</a> of our <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">outputs.tf</code> file</p>
<p>The <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">main.tf</code> file typically contains the collection of all of these resources such as data sources, S3 bucket and bucket policy, Amazon Bedrock Model Invocation Log configuration, SQS Queue configuration, IAM Role and Policies required by the EC2 instance that would install Elastic Agent and stream logs and Amazon Bedrock Guardrail configuration. Here is the <a href="https://gist.github.com/shashank-elastic/290218cd4e787f65fbcbfd6423a0ca85#file-main-tf">sample content</a> of our <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">main.tf</code> file.</p>
<p>Once the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">main.tf</code> is configured according to the requirements we can then initialize, plan and apply the terraform configuration.</p>
<pre><code>terraform init // initializes the directory and sets up state files in backend
terraform plan // command creates an execution plan
terraform apply // command applies the configuration aka execution step</code></pre>
<p>To tear down the infrastructure that terraform has previously created one can use the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">terraform destroy</code> command.</p>
<p>Once the infrastructure setup is completed, necessary resource identifiers are provided via <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">outputs.tf.</code> We can conduct a basic verification of the infrastructure created using the following steps:</p>
<ol>
<li>Verify the S3 Bucket created from the Terraform, one can either use aws cli command reference <a href="https://docs.aws.amazon.com/cli/latest/reference/s3api/list-buckets.html">list-buckets — AWS CLI 1.34.10 Command Reference</a> or navigate via AWS console to verify the same. 2. Verify the SQS Queue created from the terraform, one can either use aws cli command reference <a href="https://docs.aws.amazon.com/cli/latest/reference/sqs/list-queues.html">list-queues — AWS CLI 1.34.10 Command Reference</a> or navigate via AWS console to verify the same.</li>
<li>Verify the EC2 Instance created from the AWS console and connect to the ec2-instance via <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-connect-methods.html#ec2-instance-connect-connecting-console">Connect using EC2 Instance Connect - Amazon Elastic Compute Cloud</a> and run <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">aws s3 ls example-bucket-name</code> to check if the instance has access to the created S3 bucket.</li>
<li>Verify the Amazon Bedrock Guardrail created from the Terraform, once can either use Amazon Bedrock API <a href="https://docs.aws.amazon.com/bedrock/latest/APIReference/API_ListGuardrails.html">ListGuardrails - Amazon Bedrock</a> or navigate via AWS console to verify the same.</li>
</ol>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="setting-up-elastic-agent-and-integration-setup" class="absolute -top-32"></span>Setting Up Elastic Agent and Integration Setup</h3>
<p>To install Elastic Agent on the AWS EC2 instance and configure the Amazon Bedrock integration, create an agent policy using the guided steps in <a href="https://www.elastic.co/guide/en/fleet/current/agent-policy.html">Elastic Agent policies | Fleet and Elastic Agent Guide [8.15]</a>. Then log into to the ec2-instance created in the infrastructure setup steps via <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-connect-methods.html#ec2-instance-connect-connecting-console">Connect using EC2 Instance Connect - Amazon Elastic Compute Cloud</a>, and install the elastic agent using the guided steps in <a href="https://www.elastic.co/guide/en/fleet/current/elastic-agent-installation.html">Install Elastic Agents | Fleet and Elastic Agent Guide [8.15]</a>. During the agent installation, remember to select the agent policy created at the beginning of this setup process and use the relevant agent installation method depending on the instance created. Finally, ensure the agent is properly configured and there is incoming data from the agent.</p>
<p>To configure the Amazon Bedrock integration in the newly-created policy, add the Amazon Bedrock integration using the guided steps: <a href="https://www.elastic.co/guide/en/fleet/current/add-integration-to-policy.html">Add an Elastic Agent integration to a policy</a>. Enable Beta Integrations to use Amazon Bedrock integration as displayed in the image below.</p>
<p></p>
<p>Configure the Integration with AWS Access Keys to access the AWS account where Amazon Bedrock is configured. Use the Collect Logs from S3 bucket and specify the Bucket ARN created in the setup step. Please note to use either the S3 Bucket or the SQS Queue URL during the setup and <em>not both</em>. Add this integration to the existing policy where the ec2-instance is configured.</p>
<p></p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="verify-amazon-bedrock-model-invocation-log-ingestions" class="absolute -top-32"></span>Verify Amazon Bedrock Model Invocation Log Ingestions</h3>
<p>Once the Elastic Agent and integration setup is completed, we can conduct a basic verification of the integration to determine if the logs are being ingested as expected  by using the following example API call:</p>
<pre><code>aws bedrock-runtime converse \
--model-id &quot;anthropic.claude-3-5-sonnet-20240620-v1:0&quot; \
--messages &#x27;[{&quot;role&quot;:&quot;user&quot;,&quot;content&quot;:[{&quot;text&quot;:&quot;Hello &quot;}]}]&#x27; \
--inference-config &#x27;{&quot;maxTokens&quot;:2000,&quot;stopSequences&quot;:[],&quot;temperature&quot;:1,&quot;topP&quot;:0.999}&#x27; \
--additional-model-request-fields &#x27;{&quot;top_k&quot;:250}&#x27; \
--region us-east-1</code></pre>
<p>The example API call assumes a working setup with aws cli and there is access for the foundational model <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/model-parameters-anthropic-claude-messages.html">Anthropic Claude Messages API - Amazon Bedrock</a>. If the user does not have access to the model one can simply request access for models from the model-access page as suggested in <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/model-access.html">Access Amazon Bedrock foundation models</a>, or we can optionally change the API call to any existing model the user can access.</p>
<p>On successful execution of the above API call, the Amazon Bedrock Model invocation logs are populated and in Kibana <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">logs-aws_bedrock.invocation-default</code> should be populated with those invocation logs. We can use the following simple ES|QL query to return recently ingested events.</p>
<pre><code>from logs-aws_bedrock.invocation-* | LIMIT 10</code></pre>
<h1 class="font-bold leading-tighter text-3xl md:text-5xl relative"><span id="enable-prebuilt-detection-rules" class="absolute -top-32"></span>Enable Prebuilt Detection Rules</h1>
<p>To enable prebuilt detection rules, first login to the elastic instance and from the left pane navigation navigate to Security → Rules → Detection rules (SIEM). Filter for “Data Source: Amazon Bedrock” from the tags section.</p>
<p>Enable the available prebuilt rules. For prebuilt rules, the Setup information contains a helper guide to setup AWS Guardrails for Amazon Bedrock, which is accomplished in the <a href="/security-labs/[slug]?tab=t.0#bookmark=id.5wbf10usmxhz">Setting Up AWS Infrastructure with Terraform</a> step if the example is followed correctly and the terraform has the Amazon Bedrock Guardrail configuration. Please note this setup is vital for some of the rules to generate alerts–we need to ensure the guardrail is set up accordingly if skipped in the infrastructure setup stage.</p>
<p></p>
<h1 class="font-bold leading-tighter text-3xl md:text-5xl relative"><span id="exploring-high-confidence-misconduct-blocks-detection" class="absolute -top-32"></span>Exploring High-Confidence Misconduct Blocks Detection</h1>
<p>Let’s simulate a real world scenario in which a user queries a topic denied to the Amazon Bedrock model. Navigate to the Amazon Bedrock section in the Amazon UI Console, and use the left navigation pane to navigate to the Guardrails subsection under Safeguards. Use the sample guardrail created during our setup instructions for this exercise, and use the test option to run a model invocation with the guardrails and query the denied topic configured.</p>
<p></p>
<p>Repeat the query at least 6 times as the prebuilt rule is designed to alert on greater than 5 high confidence blocks. When the Alert schedule runs, we can see an alert populate for <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">Unusual High Confidence Misconduct Blocks Detected.</code></p>
<p></p>
<h1 class="font-bold leading-tighter text-3xl md:text-5xl relative"><span id="demonstrate-an-exploit-case-scenario-for-amazon-bedrock" class="absolute -top-32"></span>Demonstrate an Exploit Case Scenario for Amazon Bedrock</h1>
<p>To simulate an Amazon Bedrock Security bypass, we need an exploit simulation script to interact with Amazon Bedrock models. The exploit script example we provide simulates the following attack pattern:</p>
<ul>
<li>Attempts multiple successive requests to use denied model resources within AWS Bedrock</li>
<li>Generates multiple successive validation exception errors within Amazon Bedrock</li>
<li>User consistently generates high input token counts, submits numerous requests, and receives large responses that mimic patterns of resource exhaustion</li>
<li>Combines repeated high-confidence &#x27;BLOCKED&#x27; actions coupled with specific violation codes such as &#x27;MISCONDUCT&#x27;, indicating persistent misuse or attempts to probe the model&#x27;s ethical boundaries</li>
</ul>
<pre><code>class BedrockModelSimulator:
   def __init__(self, profile_name, region_name):
       // Create a Boto3 Session Client for Ineration 
   def generate_args_invoke_model(self, model_id, user_message, tokens): 	// Generate Model Invocation parameters
       guardrail_id = &lt;&lt;GUARDRAIL_ID&gt;&gt;
       guardrail_version = &lt;&lt;GUARDRAIL_VERSION&gt;&gt;

       guardrail_config = {
           &quot;guardrailIdentifier&quot;: guardrail_id,
           &quot;guardrailVersion&quot;: guardrail_version,
           &quot;trace&quot;: &quot;enabled&quot;
       }
       conversation = [
           {
               &quot;role&quot;: &quot;user&quot;,
               &quot;content&quot;: [{&quot;text&quot;: user_message}],
           }
       ]
       inference_config = {&quot;maxTokens&quot;: tokens, &quot;temperature&quot;: 0.7, &quot;topP&quot;: 1}
       additional_model_request_fields = {}

       kwargs = {
           &quot;modelId&quot;: model_id,
           &quot;messages&quot;: conversation,
           &quot;inferenceConfig&quot;: inference_config,
           &quot;additionalModelRequestFields&quot;: additional_model_request_fields
	    &quot;guardrailConfig&quot; : guardrail_config
       }
       return kwargs
  
   def invoke_model(self, invocation_arguments):
       for _ in range(count):
           try:
               // Invoke Model With right invocation_arguments
           except ClientError as e:
               // Error meesage

def main():
   profile_name = &lt;&lt;AWS Profile&gt;&gt;
   region_name = &#x27;us-east-1&#x27;
   denied_model_id = // Use a denied model   
   denied_model_user_message = // Sample Message 
   available_model_id = // Use an available model  
   validation_exception_user_message = // Sample Message 
   resource_exploit_user_message = // A very big message for resource exhuastion
   denied_topic_user_message = // Sample Message that can query denied topic configured
   simulator = BedrockModelSimulator(profile_name, region_name)
   denied_model_invocation_arguments = simulator.generate_args_invoke_model(denied_model_id, denied_model_user_message, 200)
   simulator.invoke_model(denied_model_invocation_arguments)
   validation_exception_invocation_arguments = simulator.generate_args_invoke_model(available_model_id, validation_exception_user_message, 6000)
   simulator.invoke_model(validation_exception_invocation_arguments)
   resource_exhaustion_invocation_arguments = simulator.generate_args_invoke_available_model(available_model_id, resource_exploit_user_message, 4096)
   simulator.invoke_model(resource_exhaustion_invocation_arguments)
   denied_topic_invocation_arguments = simulator.generate_args_invoke_available_model_guardrail(available_model_id, denied_topic_user_message, 4096)
   simulator.invoke_model(denied_topic_invocation_arguments)

if __name__ == &quot;__main__&quot;:
   main()</code></pre>
<p><strong>Note:</strong> The GUARDRAIL_ID and GUARDRAIL_VERSION can be found in <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">outputs.tf</code></p>
<p>When executed in a controlled environment, the provided script simulates an exploit scenario that would generate detection alerts in Elastic Security. When analyzing these alerts using the Elastic Attack Discovery feature, the script creates attack chains that show the relationships between various alerts, giving analysts a clear understanding of how multiple alerts might be part of a larger attack.</p>
<p></p>
<h1 class="font-bold leading-tighter text-3xl md:text-5xl relative"><span id="conclusion" class="absolute -top-32"></span>Conclusion</h1>
<p>Integrating Elastic with Amazon Bedrock empowers organizations to maintain a secure and compliant cloud environment while maximizing the benefits of AI and machine learning. By leveraging Elastic’s advanced security and observability tools, businesses can proactively detect threats, automate compliance reporting, and gain deeper insights into their cloud operations. Increasingly, enterprises rely on opaque data sources and technologies to reveal the most serious threats-- our commitment to transparent security is evident in our open artifacts, integrations, and source code.</p></div></div></div><div class="hidden lg:flex lg:col-span-1 text-sm lg:flex-col lg:space-y-6"><div class="toc"><h4 class="font-bold leading-tight text-lg md:text-2xl mb-3">Jump to section</h4><ul class="flex flex-col space-y-2"><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/streamlining-security-integrating-amazon-bedrock#elastic-integration-for-amazon-bedrock"><span>Elastic Integration for Amazon&nbsp;Bedrock</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-4" href="/security-labs/streamlining-security-integrating-amazon-bedrock#aws-account-setup"><span>AWS Account&nbsp;Setup</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-4" href="/security-labs/streamlining-security-integrating-amazon-bedrock#elastic-cloud-requirements"><span>Elastic Cloud&nbsp;Requirements</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-4" href="/security-labs/streamlining-security-integrating-amazon-bedrock#terraform"><span>Terraform</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-4" href="/security-labs/streamlining-security-integrating-amazon-bedrock#setting-up-aws-infrastructure-with-terraform"><span>Setting Up AWS Infrastructure with&nbsp;Terraform</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-4" href="/security-labs/streamlining-security-integrating-amazon-bedrock#setting-up-elastic-agent-and-integration-setup"><span>Setting Up Elastic Agent and Integration&nbsp;Setup</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-4" href="/security-labs/streamlining-security-integrating-amazon-bedrock#verify-amazon-bedrock-model-invocation-log-ingestions"><span>Verify Amazon Bedrock Model Invocation Log&nbsp;Ingestions</span></a></li></ul></div><div class="bg-zinc-900 border border-zinc-800 drop-shadow-lg p-5 md:p-2 sm:p-4 md:px-6 md:py-4 rounded-xl"><h4 class="font-bold leading-tight text-lg md:text-2xl mb-3">Elastic Security Labs Newsletter</h4><div><a target="_blank" class="button inline-flex" href="https://www.elastic.co/elastic-security-labs/newsletter?utm_source=security-labs">Sign Up</a></div></div></div></div><div class="bg-zinc-900 border border-zinc-800 drop-shadow-lg p-5 md:p-2 sm:p-4 md:px-6 md:py-4 rounded-xl my-5 md:my-10 max-w-3xl mx-auto flex flex-col items-center shadow-2xl"><h4 class="font-bold leading-tight text-lg md:text-2xl">Share this article</h4><div class="flex flex-wrap items-center justify-center mt-4 space-x-4"><a class="flex items-center space-x-2 button" href="https://twitter.com/intent/tweet?text=Streamlining Security: Integrating Amazon Bedrock with Elastic&amp;url=https://www.elastic.co/security-labs/streamlining-security-integrating-amazon-bedrock" target="_blank" rel="noopener noreferrer" aria-label="Share this article on Twitter" title="Share this article on Twitter"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill="currentColor" d="M23.954 4.569c-.885.389-1.83.653-2.825.772a4.98 4.98 0 002.187-2.746 9.955 9.955 0 01-3.157 1.204 4.98 4.98 0 00-8.49 4.54A14.128 14.128 0 011.69 3.05a4.98 4.98 0 001.54 6.638A4.94 4.94 0 011.2 8.62v.06a4.98 4.98 0 004 4.87 4.94 4.94 0 01-2.24.086 4.98 4.98 0 004.64 3.45A9.97 9.97 0 010 20.35a14.075 14.075 0 007.59 2.22c9.16 0 14.17-7.583 14.17-14.17 0-.217-.005-.434-.015-.65a10.128 10.128 0 002.485-2.58l-.001-.001z"></path></svg><span>Twitter</span></a><a class="flex items-center space-x-2 button" href="https://www.facebook.com/sharer/sharer.php?u=https://www.elastic.co/security-labs/streamlining-security-integrating-amazon-bedrock" target="_blank" rel="noopener noreferrer" aria-label="Share this article on Facebook" title="Share this article on Facebook"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill="currentColor" d="M22.5 12c0-5.799-4.701-10.5-10.5-10.5S1.5 6.201 1.5 12c0 5.301 3.901 9.699 9 10.401V14.4h-2.7v-2.7h2.7v-2.1c0-2.7 1.8-4.2 4.2-4.2 1.2 0 2.1.1 2.4.2v2.4h-1.5c-1.2 0-1.5.6-1.5 1.5v1.8h3l-.3 2.7h-2.7V22C18.599 21.3 22.5 17.301 22.5 12z"></path></svg><span>Facebook</span></a><a class="flex items-center space-x-2 button" href="https://www.linkedin.com/shareArticle?mini=true&amp;url=https://www.elastic.co/security-labs/streamlining-security-integrating-amazon-bedrock&amp;title=Streamlining Security: Integrating Amazon Bedrock with Elastic" target="_blank" rel="noopener noreferrer" aria-label="Share this article on LinkedIn" title="Share this article on LinkedIn"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill="currentColor" d="M19 0h-14c-2.761 0-5 2.239-5 5v14c0 2.761 2.239 5 5 5h14c2.762 0 5-2.239 5-5v-14c0-2.761-2.238-5-5-5zm-11 19h-3v-11h3v11zm-1.5-12.268c-.966 0-1.75-.79-1.75-1.764s.784-1.764 1.75-1.764 1.75.79 1.75 1.764-.783 1.764-1.75 1.764zm13.5 12.268h-3v-5.604c0-3.368-4-3.113-4 0v5.604h-3v-11h3v1.765c1.396-2.586 7-2.777 7 2.476v6.759z"></path></svg><span>LinkedIn</span></a><a class="flex items-center space-x-2 button" href="https://reddit.com/submit?url=https://www.elastic.co/security-labs/streamlining-security-integrating-amazon-bedrock&amp;title=Streamlining Security: Integrating Amazon Bedrock with Elastic" target="_blank" rel="noopener noreferrer" aria-label="Share this article on Reddit" title="Share this article on Reddit"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill-rule="evenodd" clip-rule="evenodd" d="M24 12C24 18.6274 18.6274 24 12 24C5.37258 24 0 18.6274 0 12C0 5.37258 5.37258 0 12 0C18.6274 0 24 5.37258 24 12ZM19.6879 11.0584C19.8819 11.3352 19.9916 11.6622 20.004 12C20.0091 12.3306 19.9205 12.656 19.7485 12.9384C19.5765 13.2208 19.3281 13.4488 19.032 13.596C19.0455 13.7717 19.0455 13.9483 19.032 14.124C19.032 16.812 15.9 18.996 12.036 18.996C8.172 18.996 5.04 16.812 5.04 14.124C5.02649 13.9483 5.02649 13.7717 5.04 13.596C4.80919 13.49 4.6042 13.335 4.43923 13.1419C4.27427 12.9487 4.15327 12.722 4.08462 12.4775C4.01598 12.2329 4.00133 11.9764 4.04169 11.7256C4.08205 11.4748 4.17646 11.2358 4.31837 11.0251C4.46028 10.8145 4.6463 10.6372 4.86354 10.5056C5.08078 10.3739 5.32404 10.2911 5.57646 10.2629C5.82889 10.2346 6.08444 10.2616 6.32541 10.3419C6.56638 10.4222 6.78701 10.5539 6.972 10.728C8.35473 9.79023 9.98146 9.27718 11.652 9.252L12.54 5.088C12.55 5.03979 12.5694 4.99405 12.5972 4.95341C12.625 4.91277 12.6605 4.87805 12.7018 4.85127C12.7431 4.82448 12.7894 4.80615 12.8378 4.79735C12.8862 4.78855 12.9359 4.78945 12.984 4.8L15.924 5.388C16.0676 5.14132 16.2944 4.9539 16.5637 4.85937C16.833 4.76484 17.1272 4.7694 17.3934 4.87222C17.6597 4.97505 17.8806 5.1694 18.0164 5.42041C18.1523 5.67141 18.1942 5.96262 18.1348 6.24177C18.0753 6.52092 17.9182 6.76972 17.6918 6.94352C17.4654 7.11732 17.1845 7.20473 16.8995 7.19006C16.6144 7.1754 16.3439 7.05962 16.1366 6.8635C15.9292 6.66738 15.7985 6.40378 15.768 6.12L13.2 5.58L12.42 9.324C14.0702 9.3594 15.6749 9.87206 17.04 10.8C17.2839 10.566 17.5902 10.4074 17.9221 10.3436C18.254 10.2797 18.5973 10.3132 18.9106 10.4401C19.2239 10.5669 19.4939 10.7817 19.6879 11.0584ZM8.20624 12.5333C8.07438 12.7307 8.004 12.9627 8.004 13.2C8.004 13.5183 8.13043 13.8235 8.35547 14.0485C8.58051 14.2736 8.88574 14.4 9.204 14.4C9.44134 14.4 9.67335 14.3296 9.87068 14.1978C10.068 14.0659 10.2218 13.8785 10.3127 13.6592C10.4035 13.4399 10.4272 13.1987 10.3809 12.9659C10.3346 12.7331 10.2204 12.5193 10.0525 12.3515C9.8847 12.1836 9.67089 12.0694 9.43811 12.0231C9.20533 11.9768 8.96405 12.0005 8.74478 12.0913C8.52551 12.1822 8.33809 12.336 8.20624 12.5333ZM12.012 17.424C13.0771 17.4681 14.1246 17.1416 14.976 16.5V16.548C15.0075 16.5173 15.0327 16.4806 15.05 16.4402C15.0674 16.3997 15.0766 16.3563 15.0772 16.3122C15.0777 16.2682 15.0696 16.2245 15.0533 16.1837C15.0369 16.1428 15.0127 16.1055 14.982 16.074C14.9513 16.0425 14.9146 16.0173 14.8742 16C14.8337 15.9826 14.7903 15.9734 14.7462 15.9728C14.7022 15.9723 14.6585 15.9804 14.6177 15.9967C14.5768 16.0131 14.5395 16.0373 14.508 16.068C13.7797 16.5904 12.895 16.8487 12 16.8C11.1061 16.8399 10.2255 16.5732 9.504 16.044C9.44182 15.993 9.36289 15.9669 9.28256 15.9708C9.20222 15.9748 9.12622 16.0085 9.06935 16.0653C9.01247 16.1222 8.97879 16.1982 8.97484 16.2786C8.97089 16.3589 8.99697 16.4378 9.048 16.5C9.89937 17.1416 10.9469 17.4681 12.012 17.424ZM14.0933 14.2458C14.2907 14.3776 14.5227 14.448 14.76 14.448L14.748 14.496C14.9107 14.4978 15.0721 14.4664 15.2223 14.4038C15.3725 14.3413 15.5084 14.2488 15.6218 14.1321C15.7352 14.0154 15.8236 13.8768 15.8818 13.7248C15.9399 13.5728 15.9665 13.4106 15.96 13.248C15.96 13.0107 15.8896 12.7787 15.7578 12.5813C15.6259 12.384 15.4385 12.2302 15.2192 12.1393C14.9999 12.0485 14.7587 12.0248 14.5259 12.0711C14.2931 12.1174 14.0793 12.2316 13.9115 12.3995C13.7436 12.5673 13.6294 12.7811 13.5831 13.0139C13.5368 13.2467 13.5605 13.4879 13.6513 13.7072C13.7422 13.9265 13.896 14.1139 14.0933 14.2458Z" fill="currentColor"></path></svg><span>Reddit</span></a></div></div></article></main><footer class="mt-auto text-xs md:text-sm"><div class="container py-6 flex flex-col md:flex-row gap-2 md:gap-0 justify-between items-center"><div class="text-zinc-300"><nav><ul class="flex space-x-4"><li><a class="hover:text-white font-medium" href="/security-labs/sitemap.xml">Sitemap</a></li><li><a class="hover:text-white font-medium flex items-center space-x-1" href="https://elastic.co?utm_source=elastic-search-labs&amp;utm_medium=referral&amp;utm_campaign=search-labs&amp;utm_content=footer"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="inline-block w-3 h-3"><path stroke-linecap="round" stroke-linejoin="round" d="M13.5 6H5.25A2.25 2.25 0 003 8.25v10.5A2.25 2.25 0 005.25 21h10.5A2.25 2.25 0 0018 18.75V10.5m-10.5 6L21 3m0 0h-5.25M21 3v5.25"></path></svg><span>Elastic.co</span></a></li><li><a class="hover:text-white font-medium flex items-center space-x-1" href="https://twitter.com/elasticseclabs"><svg class="w-4 h-4 inline-block w-3 h-3" viewBox="0 0 24 24"><path fill="currentColor" d="M23.954 4.569c-.885.389-1.83.653-2.825.772a4.98 4.98 0 002.187-2.746 9.955 9.955 0 01-3.157 1.204 4.98 4.98 0 00-8.49 4.54A14.128 14.128 0 011.69 3.05a4.98 4.98 0 001.54 6.638A4.94 4.94 0 011.2 8.62v.06a4.98 4.98 0 004 4.87 4.94 4.94 0 01-2.24.086 4.98 4.98 0 004.64 3.45A9.97 9.97 0 010 20.35a14.075 14.075 0 007.59 2.22c9.16 0 14.17-7.583 14.17-14.17 0-.217-.005-.434-.015-.65a10.128 10.128 0 002.485-2.58l-.001-.001z"></path></svg><span>@elasticseclabs</span></a></li></ul></nav></div><div class="flex flex-col space-y-1 text-zinc-300"><p>© <!-- -->2024<!-- -->. Elasticsearch B.V. All Rights Reserved.</p></div></div></footer></main></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"article":{"title":"Streamlining Security: Integrating Amazon Bedrock with Elastic","slug":"streamlining-security-integrating-amazon-bedrock","date":"2024-11-14","description":"This article will guide you through the process of setting up the Amazon Bedrock integration and enabling Elastic's prebuilt detection rules to streamline your security operations.","image":"Security Labs Images 36.jpg","body":{"raw":"\n# Preamble\n\nIn the ever-evolving landscape of cloud computing, maintaining robust security while ensuring compliance is a critical challenge for organizations of all sizes. As businesses increasingly adopt the cloud, the complexity of managing and securing data across various platforms grows exponentially. \n\n[Amazon Bedrock](https://docs.aws.amazon.com/bedrock/latest/userguide/what-is-bedrock.html), with its powerful foundation of machine learning and AI services, offers a scalable, secure environment for organizations to develop and deploy intelligent applications. However, to fully harness the potential of these innovations, it’s essential to implement a streamlined approach to security and compliance.\n\nIntegrating Elastic with Amazon Bedrock can significantly enhance security monitoring and compliance management within your cloud environment. This integration leverages Elastic’s search, observability, and security capabilities to optimize how you manage and secure applications and data hosted on Amazon Bedrock.  \n\t  \nElastic’s [security information and event management (SIEM) capabilities](https://www.elastic.co/security/siem) can be used to analyze logs and monitor events generated by applications running on Amazon Bedrock. This allows for the detection of potential security threats in real-time and automated response actions to mitigate risks.\n\nThis article will guide you through the process of setting up Amazon Bedrock integration and enabling our prebuilt detection rules to streamline your security operations. We will cover the following key aspects:\n\n 1. **Prerequisites for Elastic Amazon Bedrock Integration:** Understanding the core requirements for setting up Elastic Amazon Bedrock integration for cloud security.  \n 2. **Setting Up Amazon Bedrock Integration**: Step-by-step instructions to set up Amazon Bedrock in your existing AWS infrastructure.  \n 3. **Enabling Prebuilt Security Rules**: How to leverage [prebuilt rules](https://www.elastic.co/guide/en/security/current/rules-ui-management.html) to detect high-confidence policy violations and other security threats.  \n 4. **Exploring High-Confidence Misconduct Blocks Detection:** An in-depth look at a specific prebuilt rule designed to detect high-confidence misconduct blocks within Amazon Bedrocklogs.  \n 5. **Demonstrate an Exploit Case Scenario for Amazon Bedrock:**  Using a sample python script to simulate interactions with an Amazon Bedrock model for testing exploit scenarios that could trigger Elastic prebuilt detection rules.\n\n# Prerequisites for Elastic Amazon Bedrock Integration\n\n## Elastic Integration for Amazon Bedrock\n\nThe Amazon Bedrock integration collects Amazon Bedrock model invocation logs and runtime metrics with Elastic Agent. For a deeper dive on the integration, documentation can be found in our [documentation.](https://www.elastic.co/docs/current/integrations/aws_bedrock)\n\nBelow are the list of prerequisites to have a complete and successful configuration of Amazon Bedrock Elastic Integration:\n\n * AWS Account Setup  \n * Elastic Cloud Requirements  \n * Terraform (Optional)\n\n### AWS Account Setup\n\n * **Active AWS Account**: Ensure you have an active AWS account with the appropriate permissions to deploy and manage resources on Amazon Bedrock.  \n * **Amazon Bedrock Setup**: Confirm that Amazon Bedrock is correctly configured and operational within your AWS environment. This includes setting up AI models, datasets, and other resources necessary for your applications. Refer to [Getting started with Amazon Bedrock](https://docs.aws.amazon.com/bedrock/latest/userguide/getting-started.html) for additional information on the setup.   \n * **IAM Roles and Permissions**: Create or configure Identity and Access Management (IAM) roles with the necessary permissions to allow Elastic to access Amazon Bedrock resources. These roles should have sufficient privileges to read logs, metrics, and traces from AWS services. Additional details of the requirements can be found in our [AWS documentation](https://www.elastic.co/docs/current/integrations/aws#requirements). \n\n### Elastic Cloud Requirements\n\n| [Version](https://www.elastic.co/docs/current/integrations/aws_bedrock#changelog) | 0.7.0 (Beta) |\n| :---- | :---- |\n| **Compatible Kibana version(s)** | 8.13.0 or higher for integration version 0.2.0 and above.\u000b\u000bMinimum Kibana Version 8.12.0 |\n| [**Supported Serverless project types**](https://www.elastic.co/docs/current/integrations/serverless/support) | Security Observability |\n| [**Subscription level**](https://www.elastic.co/subscriptions) | Basic |\n| [**Level of support**](https://www.elastic.co/docs/current/integrations/support) | Elastic |\n\n**Note:**  Since the integration is in Beta Release Stage, please enable ***Display Beta Integrations in the browse integration section of the Management pane in your Elastic stack.***\n\n![](/assets/images/streamlining-security-integrating-amazon-bedrock/image1.png)\n\n### Terraform\n\n[Terraform](https://www.terraform.io/) is an open source infrastructure-as-code (IaC) tool created by HashiCorp that allows you to define, provision, and manage cloud and on-premises infrastructure in a consistent and repeatable way.   \n\t  \nThis is an optional step, but good to have as the next sections of the article we use this tool to set up the required AWS Infrastructure. Deep dive on installation and docs can be found [here](https://developer.hashicorp.com/terraform/tutorials/aws-get-started/install-cli).\n\n# Setting Up Amazon Bedrock Integration\n\nIn this section of the article, we will walk through the steps to set up Amazon Bedrock integration with Elastic in two parts: \n\n 1. **Setting Up AWS Infrastructure with Terraform**: In this section, we'll walk through the steps to set up an AWS infrastructure using Terraform. We'll create an S3 bucket, an EC2 instance with the necessary IAM roles and policies to access the S3 bucket, and configure security groups to allow SSH access. This setup is ideal for scenarios where you need an EC2 instance to interact with S3, such as for data processing or storage.  \n 2. **Elastic Agent and Integration Setup**: In this section, we'll walk through the steps to install Elastic Agent on the AWS EC2 instance and Configure the Amazon Bedrock Integration. \n\n### Setting Up AWS Infrastructure with Terraform\n\nThe high-level configuration process will involve the following steps:\n\n 1. Configuring ```providers.tf```  \n 2. Configuring ```variables.tf``` \n 3. Configuring ```outputs.tf```  \n 4. Configuring ```main.tf```\n\nThe ```providers.tf``` file typically contains the configuration for any Terraform providers you are using in your project. In our example, it includes the configuration for the AWS provider. Here is the [sample content](https://gist.github.com/shashank-elastic/290218cd4e787f65fbcbfd6423a0ca85#file-providers-tf) of our ```providers.tf``` file. The ```profile``` mentioned in the ```providers.tf``` should be configured in the user’s space of the AWS credentials file ```(~/.aws/credentials)```. Refer to [Configuration and credential file settings \\- AWS Command Line Interface](https://docs.aws.amazon.com/cli/v1/userguide/cli-configure-files.html#cli-configure-files-format-profile), which is also highlighted in the credential section of Elastic’s [AWS documentation](https://www.elastic.co/docs/current/integrations/aws#aws-credentials).\n\nThe ```variables.tf``` file contains the variable definitions used throughout your Terraform configuration. For our scenario, it includes the definition for the aws\\_region and resource\\_labels. Here is the [sample content](https://gist.github.com/shashank-elastic/290218cd4e787f65fbcbfd6423a0ca85#file-variables-tf) of our ```variables.tf``` file.\n\nThe ```outputs.tf``` file typically contains the output definitions for your Terraform configuration. These outputs can be used to display useful information after your infrastructure is provisioned. Here is the [sample content](https://gist.github.com/shashank-elastic/290218cd4e787f65fbcbfd6423a0ca85#file-outputs-tf) of our ```outputs.tf``` file\n\nThe ```main.tf``` file typically contains the collection of all of these resources such as data sources, S3 bucket and bucket policy, Amazon Bedrock Model Invocation Log configuration, SQS Queue configuration, IAM Role and Policies required by the EC2 instance that would install Elastic Agent and stream logs and Amazon Bedrock Guardrail configuration. Here is the [sample content](https://gist.github.com/shashank-elastic/290218cd4e787f65fbcbfd6423a0ca85#file-main-tf) of our ```main.tf``` file.\n\nOnce the ```main.tf``` is configured according to the requirements we can then initialize, plan and apply the terraform configuration.\n\n```\nterraform init // initializes the directory and sets up state files in backend\nterraform plan // command creates an execution plan\nterraform apply // command applies the configuration aka execution step\n```\n\nTo tear down the infrastructure that terraform has previously created one can use the ```terraform destroy``` command.\n\nOnce the infrastructure setup is completed, necessary resource identifiers are provided via ```outputs.tf.``` We can conduct a basic verification of the infrastructure created using the following steps: \n\n 1. Verify the S3 Bucket created from the Terraform, one can either use aws cli command reference [list-buckets — AWS CLI 1.34.10 Command Reference](https://docs.aws.amazon.com/cli/latest/reference/s3api/list-buckets.html) or navigate via AWS console to verify the same. 2. Verify the SQS Queue created from the terraform, one can either use aws cli command reference [list-queues — AWS CLI 1.34.10 Command Reference](https://docs.aws.amazon.com/cli/latest/reference/sqs/list-queues.html) or navigate via AWS console to verify the same.  \n 3. Verify the EC2 Instance created from the AWS console and connect to the ec2-instance via [Connect using EC2 Instance Connect \\- Amazon Elastic Compute Cloud](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-connect-methods.html#ec2-instance-connect-connecting-console) and run ```aws s3 ls example-bucket-name``` to check if the instance has access to the created S3 bucket.  \n 4. Verify the Amazon Bedrock Guardrail created from the Terraform, once can either use Amazon Bedrock API [ListGuardrails \\- Amazon Bedrock](https://docs.aws.amazon.com/bedrock/latest/APIReference/API_ListGuardrails.html) or navigate via AWS console to verify the same.\n\n### Setting Up Elastic Agent and Integration Setup\n\nTo install Elastic Agent on the AWS EC2 instance and configure the Amazon Bedrock integration, create an agent policy using the guided steps in [Elastic Agent policies | Fleet and Elastic Agent Guide \\[8.15\\]](https://www.elastic.co/guide/en/fleet/current/agent-policy.html). Then log into to the ec2-instance created in the infrastructure setup steps via [Connect using EC2 Instance Connect \\- Amazon Elastic Compute Cloud](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-connect-methods.html#ec2-instance-connect-connecting-console), and install the elastic agent using the guided steps in [Install Elastic Agents | Fleet and Elastic Agent Guide \\[8.15\\]](https://www.elastic.co/guide/en/fleet/current/elastic-agent-installation.html). During the agent installation, remember to select the agent policy created at the beginning of this setup process and use the relevant agent installation method depending on the instance created. Finally, ensure the agent is properly configured and there is incoming data from the agent.\n\nTo configure the Amazon Bedrock integration in the newly-created policy, add the Amazon Bedrock integration using the guided steps: [Add an Elastic Agent integration to a policy](https://www.elastic.co/guide/en/fleet/current/add-integration-to-policy.html). Enable Beta Integrations to use Amazon Bedrock integration as displayed in the image below. \n\n![](/assets/images/streamlining-security-integrating-amazon-bedrock/image4.png)\n\nConfigure the Integration with AWS Access Keys to access the AWS account where Amazon Bedrock is configured. Use the Collect Logs from S3 bucket and specify the Bucket ARN created in the setup step. Please note to use either the S3 Bucket or the SQS Queue URL during the setup and *not both*. Add this integration to the existing policy where the ec2-instance is configured.   \n\n![](/assets/images/streamlining-security-integrating-amazon-bedrock/image8.png)\n\n### Verify Amazon Bedrock Model Invocation Log Ingestions\n\nOnce the Elastic Agent and integration setup is completed, we can conduct a basic verification of the integration to determine if the logs are being ingested as expected  by using the following example API call: \n\n```\naws bedrock-runtime converse \\\n--model-id \"anthropic.claude-3-5-sonnet-20240620-v1:0\" \\\n--messages '[{\"role\":\"user\",\"content\":[{\"text\":\"Hello \"}]}]' \\\n--inference-config '{\"maxTokens\":2000,\"stopSequences\":[],\"temperature\":1,\"topP\":0.999}' \\\n--additional-model-request-fields '{\"top_k\":250}' \\\n--region us-east-1\n```\n\nThe example API call assumes a working setup with aws cli and there is access for the foundational model [Anthropic Claude Messages API \\- Amazon Bedrock](https://docs.aws.amazon.com/bedrock/latest/userguide/model-parameters-anthropic-claude-messages.html). If the user does not have access to the model one can simply request access for models from the model-access page as suggested in [Access Amazon Bedrock foundation models](https://docs.aws.amazon.com/bedrock/latest/userguide/model-access.html), or we can optionally change the API call to any existing model the user can access. \n\nOn successful execution of the above API call, the Amazon Bedrock Model invocation logs are populated and in Kibana ```logs-aws_bedrock.invocation-default``` should be populated with those invocation logs. We can use the following simple ES|QL query to return recently ingested events.\n\n```\nfrom logs-aws_bedrock.invocation-* | LIMIT 10\n```\n\n# Enable Prebuilt Detection Rules\n\nTo enable prebuilt detection rules, first login to the elastic instance and from the left pane navigation navigate to Security → Rules → Detection rules (SIEM). Filter for “Data Source: Amazon Bedrock” from the tags section. \n\nEnable the available prebuilt rules. For prebuilt rules, the Setup information contains a helper guide to setup AWS Guardrails for Amazon Bedrock, which is accomplished in the [Setting Up AWS Infrastructure with Terraform](?tab=t.0#bookmark=id.5wbf10usmxhz) step if the example is followed correctly and the terraform has the Amazon Bedrock Guardrail configuration. Please note this setup is vital for some of the rules to generate alerts–we need to ensure the guardrail is set up accordingly if skipped in the infrastructure setup stage.\n\n![](/assets/images/streamlining-security-integrating-amazon-bedrock/image3.png)\n\n# Exploring High-Confidence Misconduct Blocks Detection\n\nLet’s simulate a real world scenario in which a user queries a topic denied to the Amazon Bedrock model. Navigate to the Amazon Bedrock section in the Amazon UI Console, and use the left navigation pane to navigate to the Guardrails subsection under Safeguards. Use the sample guardrail created during our setup instructions for this exercise, and use the test option to run a model invocation with the guardrails and query the denied topic configured.\n\n![](/assets/images/streamlining-security-integrating-amazon-bedrock/image6.png)\n\nRepeat the query at least 6 times as the prebuilt rule is designed to alert on greater than 5 high confidence blocks. When the Alert schedule runs, we can see an alert populate for ```Unusual High Confidence Misconduct Blocks Detected.```\n\n![](/assets/images/streamlining-security-integrating-amazon-bedrock/image7.png)\n\n# Demonstrate an Exploit Case Scenario for Amazon Bedrock\n\nTo simulate an Amazon Bedrock Security bypass, we need an exploit simulation script to interact with Amazon Bedrock models. The exploit script example we provide simulates the following attack pattern: \n\n * Attempts multiple successive requests to use denied model resources within AWS Bedrock   \n * Generates multiple successive validation exception errors within Amazon Bedrock  \n * User consistently generates high input token counts, submits numerous requests, and receives large responses that mimic patterns of resource exhaustion  \n * Combines repeated high-confidence 'BLOCKED' actions coupled with specific violation codes such as 'MISCONDUCT', indicating persistent misuse or attempts to probe the model's ethical boundaries\n\n```py\nclass BedrockModelSimulator:\n   def __init__(self, profile_name, region_name):\n       // Create a Boto3 Session Client for Ineration \u000b\n   def generate_args_invoke_model(self, model_id, user_message, tokens):\u000b \t// Generate Model Invocation parameters\n       guardrail_id = \u003c\u003cGUARDRAIL_ID\u003e\u003e\n       guardrail_version = \u003c\u003cGUARDRAIL_VERSION\u003e\u003e\n\n       guardrail_config = {\n           \"guardrailIdentifier\": guardrail_id,\n           \"guardrailVersion\": guardrail_version,\n           \"trace\": \"enabled\"\n       }\n       conversation = [\n           {\n               \"role\": \"user\",\n               \"content\": [{\"text\": user_message}],\n           }\n       ]\n       inference_config = {\"maxTokens\": tokens, \"temperature\": 0.7, \"topP\": 1}\n       additional_model_request_fields = {}\n\n       kwargs = {\n           \"modelId\": model_id,\n           \"messages\": conversation,\n           \"inferenceConfig\": inference_config,\n           \"additionalModelRequestFields\": additional_model_request_fields\n\t    \"guardrailConfig\" : guardrail_config\n       }\n       return kwargs\n  \n   def invoke_model(self, invocation_arguments):\n       for _ in range(count):\n           try:\n               // Invoke Model With right invocation_arguments\n           except ClientError as e:\n               // Error meesage\n\ndef main():\n   profile_name = \u003c\u003cAWS Profile\u003e\u003e\n   region_name = 'us-east-1'\n   denied_model_id = // Use a denied model   \n   denied_model_user_message = // Sample Message \n   available_model_id = // Use an available model  \n   validation_exception_user_message = // Sample Message \n   resource_exploit_user_message = // A very big message for resource exhuastion\n   denied_topic_user_message = // Sample Message that can query denied topic configured\n   simulator = BedrockModelSimulator(profile_name, region_name)\n   denied_model_invocation_arguments = simulator.generate_args_invoke_model(denied_model_id, denied_model_user_message, 200)\n   simulator.invoke_model(denied_model_invocation_arguments)\n   validation_exception_invocation_arguments = simulator.generate_args_invoke_model(available_model_id, validation_exception_user_message, 6000)\n   simulator.invoke_model(validation_exception_invocation_arguments)\n   resource_exhaustion_invocation_arguments = simulator.generate_args_invoke_available_model(available_model_id, resource_exploit_user_message, 4096)\n   simulator.invoke_model(resource_exhaustion_invocation_arguments)\n   denied_topic_invocation_arguments = simulator.generate_args_invoke_available_model_guardrail(available_model_id, denied_topic_user_message, 4096)\n   simulator.invoke_model(denied_topic_invocation_arguments)\n\nif __name__ == \"__main__\":\n   main()\n```\n\n**Note:** The GUARDRAIL\\_ID and GUARDRAIL\\_VERSION can be found in ```outputs.tf``` \n\nWhen executed in a controlled environment, the provided script simulates an exploit scenario that would generate detection alerts in Elastic Security. When analyzing these alerts using the Elastic Attack Discovery feature, the script creates attack chains that show the relationships between various alerts, giving analysts a clear understanding of how multiple alerts might be part of a larger attack.\n\n![](/assets/images/streamlining-security-integrating-amazon-bedrock/image2.png)\n\n# Conclusion\n\nIntegrating Elastic with Amazon Bedrock empowers organizations to maintain a secure and compliant cloud environment while maximizing the benefits of AI and machine learning. By leveraging Elastic’s advanced security and observability tools, businesses can proactively detect threats, automate compliance reporting, and gain deeper insights into their cloud operations. Increasingly, enterprises rely on opaque data sources and technologies to reveal the most serious threats-- our commitment to transparent security is evident in our open artifacts, integrations, and source code.","code":"var Component=(()=\u003e{var h=Object.create;var r=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,p=Object.prototype.hasOwnProperty;var f=(t,e)=\u003e()=\u003e(e||t((e={exports:{}}).exports,e),e.exports),w=(t,e)=\u003e{for(var i in e)r(t,i,{get:e[i],enumerable:!0})},s=(t,e,i,a)=\u003e{if(e\u0026\u0026typeof e==\"object\"||typeof e==\"function\")for(let o of g(e))!p.call(t,o)\u0026\u0026o!==i\u0026\u0026r(t,o,{get:()=\u003ee[o],enumerable:!(a=u(e,o))||a.enumerable});return t};var b=(t,e,i)=\u003e(i=t!=null?h(m(t)):{},s(e||!t||!t.__esModule?r(i,\"default\",{value:t,enumerable:!0}):i,t)),v=t=\u003es(r({},\"__esModule\",{value:!0}),t);var l=f((z,c)=\u003e{c.exports=_jsx_runtime});var A={};w(A,{default:()=\u003ek,frontmatter:()=\u003e_});var n=b(l()),_={title:\"Streamlining Security: Integrating Amazon Bedrock with Elastic\",slug:\"streamlining-security-integrating-amazon-bedrock\",date:\"2024-11-14\",description:\"This article will guide you through the process of setting up the Amazon Bedrock integration and enabling Elastic's prebuilt detection rules to streamline your security operations.\",author:[{slug:\"shashank-k-s\"}],image:\"Security Labs Images 36.jpg\",category:[{slug:\"security-research\"}]};function d(t){let e=Object.assign({h1:\"h1\",p:\"p\",a:\"a\",ol:\"ol\",li:\"li\",strong:\"strong\",h2:\"h2\",ul:\"ul\",h3:\"h3\",div:\"div\",table:\"table\",thead:\"thead\",tr:\"tr\",th:\"th\",tbody:\"tbody\",td:\"td\",em:\"em\",img:\"img\",code:\"code\",pre:\"pre\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h1,{id:\"preamble\",children:\"Preamble\"}),`\n`,(0,n.jsx)(e.p,{children:\"In the ever-evolving landscape of cloud computing, maintaining robust security while ensuring compliance is a critical challenge for organizations of all sizes. As businesses increasingly adopt the cloud, the complexity of managing and securing data across various platforms grows exponentially.\"}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.a,{href:\"https://docs.aws.amazon.com/bedrock/latest/userguide/what-is-bedrock.html\",rel:\"nofollow\",children:\"Amazon Bedrock\"}),\", with its powerful foundation of machine learning and AI services, offers a scalable, secure environment for organizations to develop and deploy intelligent applications. However, to fully harness the potential of these innovations, it\\u2019s essential to implement a streamlined approach to security and compliance.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Integrating Elastic with Amazon Bedrock can significantly enhance security monitoring and compliance management within your cloud environment. This integration leverages Elastic\\u2019s search, observability, and security capabilities to optimize how you manage and secure applications and data hosted on Amazon Bedrock.\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Elastic\\u2019s \",(0,n.jsx)(e.a,{href:\"https://www.elastic.co/security/siem\",rel:\"nofollow\",children:\"security information and event management (SIEM) capabilities\"}),\" can be used to analyze logs and monitor events generated by applications running on Amazon Bedrock. This allows for the detection of potential security threats in real-time and automated response actions to mitigate risks.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"This article will guide you through the process of setting up Amazon Bedrock integration and enabling our prebuilt detection rules to streamline your security operations. We will cover the following key aspects:\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Prerequisites for Elastic Amazon Bedrock Integration:\"}),\" Understanding the core requirements for setting up Elastic Amazon Bedrock integration for cloud security.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Setting Up Amazon Bedrock Integration\"}),\": Step-by-step instructions to set up Amazon Bedrock in your existing AWS infrastructure.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Enabling Prebuilt Security Rules\"}),\": How to leverage \",(0,n.jsx)(e.a,{href:\"https://www.elastic.co/guide/en/security/current/rules-ui-management.html\",rel:\"nofollow\",children:\"prebuilt rules\"}),\" to detect high-confidence policy violations and other security threats.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Exploring High-Confidence Misconduct Blocks Detection:\"}),\" An in-depth look at a specific prebuilt rule designed to detect high-confidence misconduct blocks within Amazon Bedrocklogs.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Demonstrate an Exploit Case Scenario for Amazon Bedrock:\"}),\"  Using a sample python script to simulate interactions with an Amazon Bedrock model for testing exploit scenarios that could trigger Elastic prebuilt detection rules.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h1,{id:\"prerequisites-for-elastic-amazon-bedrock-integration\",children:\"Prerequisites for Elastic Amazon Bedrock Integration\"}),`\n`,(0,n.jsx)(e.h2,{id:\"elastic-integration-for-amazon-bedrock\",children:\"Elastic Integration for Amazon Bedrock\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The Amazon Bedrock integration collects Amazon Bedrock model invocation logs and runtime metrics with Elastic Agent. For a deeper dive on the integration, documentation can be found in our \",(0,n.jsx)(e.a,{href:\"https://www.elastic.co/docs/current/integrations/aws_bedrock\",rel:\"nofollow\",children:\"documentation.\"})]}),`\n`,(0,n.jsx)(e.p,{children:\"Below are the list of prerequisites to have a complete and successful configuration of Amazon Bedrock Elastic Integration:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"AWS Account Setup\"}),`\n`,(0,n.jsx)(e.li,{children:\"Elastic Cloud Requirements\"}),`\n`,(0,n.jsx)(e.li,{children:\"Terraform (Optional)\"}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{id:\"aws-account-setup\",children:\"AWS Account Setup\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Active AWS Account\"}),\": Ensure you have an active AWS account with the appropriate permissions to deploy and manage resources on Amazon Bedrock.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Amazon Bedrock Setup\"}),\": Confirm that Amazon Bedrock is correctly configured and operational within your AWS environment. This includes setting up AI models, datasets, and other resources necessary for your applications. Refer to \",(0,n.jsx)(e.a,{href:\"https://docs.aws.amazon.com/bedrock/latest/userguide/getting-started.html\",rel:\"nofollow\",children:\"Getting started with Amazon Bedrock\"}),\" for additional information on the setup.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"IAM Roles and Permissions\"}),\": Create or configure Identity and Access Management (IAM) roles with the necessary permissions to allow Elastic to access Amazon Bedrock resources. These roles should have sufficient privileges to read logs, metrics, and traces from AWS services. Additional details of the requirements can be found in our \",(0,n.jsx)(e.a,{href:\"https://www.elastic.co/docs/current/integrations/aws#requirements\",rel:\"nofollow\",children:\"AWS documentation\"}),\".\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{id:\"elastic-cloud-requirements\",children:\"Elastic Cloud Requirements\"}),`\n`,(0,n.jsx)(e.div,{className:\"table-container\",children:(0,n.jsxs)(e.table,{children:[(0,n.jsx)(e.thead,{children:(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.th,{align:\"left\",children:(0,n.jsx)(e.a,{href:\"https://www.elastic.co/docs/current/integrations/aws_bedrock#changelog\",rel:\"nofollow\",children:\"Version\"})}),(0,n.jsx)(e.th,{align:\"left\",children:\"0.7.0 (Beta)\"})]})}),(0,n.jsxs)(e.tbody,{children:[(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{align:\"left\",children:(0,n.jsx)(e.strong,{children:\"Compatible Kibana version(s)\"})}),(0,n.jsx)(e.td,{align:\"left\",children:\"8.13.0 or higher for integration version 0.2.0 and above.\\v\\vMinimum Kibana Version 8.12.0\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{align:\"left\",children:(0,n.jsx)(e.a,{href:\"https://www.elastic.co/docs/current/integrations/serverless/support\",rel:\"nofollow\",children:(0,n.jsx)(e.strong,{children:\"Supported Serverless project types\"})})}),(0,n.jsx)(e.td,{align:\"left\",children:\"Security Observability\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{align:\"left\",children:(0,n.jsx)(e.a,{href:\"https://www.elastic.co/subscriptions\",rel:\"nofollow\",children:(0,n.jsx)(e.strong,{children:\"Subscription level\"})})}),(0,n.jsx)(e.td,{align:\"left\",children:\"Basic\"})]}),(0,n.jsxs)(e.tr,{children:[(0,n.jsx)(e.td,{align:\"left\",children:(0,n.jsx)(e.a,{href:\"https://www.elastic.co/docs/current/integrations/support\",rel:\"nofollow\",children:(0,n.jsx)(e.strong,{children:\"Level of support\"})})}),(0,n.jsx)(e.td,{align:\"left\",children:\"Elastic\"})]})]})]})}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Note:\"}),\"  Since the integration is in Beta Release Stage, please enable \",(0,n.jsx)(e.em,{children:(0,n.jsx)(e.strong,{children:\"Display Beta Integrations in the browse integration section of the Management pane in your Elastic stack.\"})})]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/assets/images/streamlining-security-integrating-amazon-bedrock/image1.png\",alt:\"\",width:\"1091\",height:\"581\"})}),`\n`,(0,n.jsx)(e.h3,{id:\"terraform\",children:\"Terraform\"}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.a,{href:\"https://www.terraform.io/\",rel:\"nofollow\",children:\"Terraform\"}),\" is an open source infrastructure-as-code (IaC) tool created by HashiCorp that allows you to define, provision, and manage cloud and on-premises infrastructure in a consistent and repeatable way.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"This is an optional step, but good to have as the next sections of the article we use this tool to set up the required AWS Infrastructure. Deep dive on installation and docs can be found \",(0,n.jsx)(e.a,{href:\"https://developer.hashicorp.com/terraform/tutorials/aws-get-started/install-cli\",rel:\"nofollow\",children:\"here\"}),\".\"]}),`\n`,(0,n.jsx)(e.h1,{id:\"setting-up-amazon-bedrock-integration\",children:\"Setting Up Amazon Bedrock Integration\"}),`\n`,(0,n.jsx)(e.p,{children:\"In this section of the article, we will walk through the steps to set up Amazon Bedrock integration with Elastic in two parts:\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Setting Up AWS Infrastructure with Terraform\"}),\": In this section, we'll walk through the steps to set up an AWS infrastructure using Terraform. We'll create an S3 bucket, an EC2 instance with the necessary IAM roles and policies to access the S3 bucket, and configure security groups to allow SSH access. This setup is ideal for scenarios where you need an EC2 instance to interact with S3, such as for data processing or storage.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Elastic Agent and Integration Setup\"}),\": In this section, we'll walk through the steps to install Elastic Agent on the AWS EC2 instance and Configure the Amazon Bedrock Integration.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{id:\"setting-up-aws-infrastructure-with-terraform\",children:\"Setting Up AWS Infrastructure with Terraform\"}),`\n`,(0,n.jsx)(e.p,{children:\"The high-level configuration process will involve the following steps:\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"Configuring \",(0,n.jsx)(e.code,{children:\"providers.tf\"})]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Configuring \",(0,n.jsx)(e.code,{children:\"variables.tf\"})]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Configuring \",(0,n.jsx)(e.code,{children:\"outputs.tf\"})]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Configuring \",(0,n.jsx)(e.code,{children:\"main.tf\"})]}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"providers.tf\"}),\" file typically contains the configuration for any Terraform providers you are using in your project. In our example, it includes the configuration for the AWS provider. Here is the \",(0,n.jsx)(e.a,{href:\"https://gist.github.com/shashank-elastic/290218cd4e787f65fbcbfd6423a0ca85#file-providers-tf\",rel:\"nofollow\",children:\"sample content\"}),\" of our \",(0,n.jsx)(e.code,{children:\"providers.tf\"}),\" file. The \",(0,n.jsx)(e.code,{children:\"profile\"}),\" mentioned in the \",(0,n.jsx)(e.code,{children:\"providers.tf\"}),\" should be configured in the user\\u2019s space of the AWS credentials file \",(0,n.jsx)(e.code,{children:\"(~/.aws/credentials)\"}),\". Refer to \",(0,n.jsx)(e.a,{href:\"https://docs.aws.amazon.com/cli/v1/userguide/cli-configure-files.html#cli-configure-files-format-profile\",rel:\"nofollow\",children:\"Configuration and credential file settings - AWS Command Line Interface\"}),\", which is also highlighted in the credential section of Elastic\\u2019s \",(0,n.jsx)(e.a,{href:\"https://www.elastic.co/docs/current/integrations/aws#aws-credentials\",rel:\"nofollow\",children:\"AWS documentation\"}),\".\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"variables.tf\"}),\" file contains the variable definitions used throughout your Terraform configuration. For our scenario, it includes the definition for the aws_region and resource_labels. Here is the \",(0,n.jsx)(e.a,{href:\"https://gist.github.com/shashank-elastic/290218cd4e787f65fbcbfd6423a0ca85#file-variables-tf\",rel:\"nofollow\",children:\"sample content\"}),\" of our \",(0,n.jsx)(e.code,{children:\"variables.tf\"}),\" file.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"outputs.tf\"}),\" file typically contains the output definitions for your Terraform configuration. These outputs can be used to display useful information after your infrastructure is provisioned. Here is the \",(0,n.jsx)(e.a,{href:\"https://gist.github.com/shashank-elastic/290218cd4e787f65fbcbfd6423a0ca85#file-outputs-tf\",rel:\"nofollow\",children:\"sample content\"}),\" of our \",(0,n.jsx)(e.code,{children:\"outputs.tf\"}),\" file\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"main.tf\"}),\" file typically contains the collection of all of these resources such as data sources, S3 bucket and bucket policy, Amazon Bedrock Model Invocation Log configuration, SQS Queue configuration, IAM Role and Policies required by the EC2 instance that would install Elastic Agent and stream logs and Amazon Bedrock Guardrail configuration. Here is the \",(0,n.jsx)(e.a,{href:\"https://gist.github.com/shashank-elastic/290218cd4e787f65fbcbfd6423a0ca85#file-main-tf\",rel:\"nofollow\",children:\"sample content\"}),\" of our \",(0,n.jsx)(e.code,{children:\"main.tf\"}),\" file.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Once the \",(0,n.jsx)(e.code,{children:\"main.tf\"}),\" is configured according to the requirements we can then initialize, plan and apply the terraform configuration.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`terraform init // initializes the directory and sets up state files in backend\nterraform plan // command creates an execution plan\nterraform apply // command applies the configuration aka execution step\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"To tear down the infrastructure that terraform has previously created one can use the \",(0,n.jsx)(e.code,{children:\"terraform destroy\"}),\" command.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Once the infrastructure setup is completed, necessary resource identifiers are provided via \",(0,n.jsx)(e.code,{children:\"outputs.tf.\"}),\" We can conduct a basic verification of the infrastructure created using the following steps:\"]}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"Verify the S3 Bucket created from the Terraform, one can either use aws cli command reference \",(0,n.jsx)(e.a,{href:\"https://docs.aws.amazon.com/cli/latest/reference/s3api/list-buckets.html\",rel:\"nofollow\",children:\"list-buckets \\u2014 AWS CLI 1.34.10 Command Reference\"}),\" or navigate via AWS console to verify the same. 2. Verify the SQS Queue created from the terraform, one can either use aws cli command reference \",(0,n.jsx)(e.a,{href:\"https://docs.aws.amazon.com/cli/latest/reference/sqs/list-queues.html\",rel:\"nofollow\",children:\"list-queues \\u2014 AWS CLI 1.34.10 Command Reference\"}),\" or navigate via AWS console to verify the same.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Verify the EC2 Instance created from the AWS console and connect to the ec2-instance via \",(0,n.jsx)(e.a,{href:\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-connect-methods.html#ec2-instance-connect-connecting-console\",rel:\"nofollow\",children:\"Connect using EC2 Instance Connect - Amazon Elastic Compute Cloud\"}),\" and run \",(0,n.jsx)(e.code,{children:\"aws s3 ls example-bucket-name\"}),\" to check if the instance has access to the created S3 bucket.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Verify the Amazon Bedrock Guardrail created from the Terraform, once can either use Amazon Bedrock API \",(0,n.jsx)(e.a,{href:\"https://docs.aws.amazon.com/bedrock/latest/APIReference/API_ListGuardrails.html\",rel:\"nofollow\",children:\"ListGuardrails - Amazon Bedrock\"}),\" or navigate via AWS console to verify the same.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{id:\"setting-up-elastic-agent-and-integration-setup\",children:\"Setting Up Elastic Agent and Integration Setup\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"To install Elastic Agent on the AWS EC2 instance and configure the Amazon Bedrock integration, create an agent policy using the guided steps in \",(0,n.jsx)(e.a,{href:\"https://www.elastic.co/guide/en/fleet/current/agent-policy.html\",rel:\"nofollow\",children:\"Elastic Agent policies | Fleet and Elastic Agent Guide [8.15]\"}),\". Then log into to the ec2-instance created in the infrastructure setup steps via \",(0,n.jsx)(e.a,{href:\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-connect-methods.html#ec2-instance-connect-connecting-console\",rel:\"nofollow\",children:\"Connect using EC2 Instance Connect - Amazon Elastic Compute Cloud\"}),\", and install the elastic agent using the guided steps in \",(0,n.jsx)(e.a,{href:\"https://www.elastic.co/guide/en/fleet/current/elastic-agent-installation.html\",rel:\"nofollow\",children:\"Install Elastic Agents | Fleet and Elastic Agent Guide [8.15]\"}),\". During the agent installation, remember to select the agent policy created at the beginning of this setup process and use the relevant agent installation method depending on the instance created. Finally, ensure the agent is properly configured and there is incoming data from the agent.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"To configure the Amazon Bedrock integration in the newly-created policy, add the Amazon Bedrock integration using the guided steps: \",(0,n.jsx)(e.a,{href:\"https://www.elastic.co/guide/en/fleet/current/add-integration-to-policy.html\",rel:\"nofollow\",children:\"Add an Elastic Agent integration to a policy\"}),\". Enable Beta Integrations to use Amazon Bedrock integration as displayed in the image below.\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/assets/images/streamlining-security-integrating-amazon-bedrock/image4.png\",alt:\"\",width:\"638\",height:\"542\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Configure the Integration with AWS Access Keys to access the AWS account where Amazon Bedrock is configured. Use the Collect Logs from S3 bucket and specify the Bucket ARN created in the setup step. Please note to use either the S3 Bucket or the SQS Queue URL during the setup and \",(0,n.jsx)(e.em,{children:\"not both\"}),\". Add this integration to the existing policy where the ec2-instance is configured.\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/assets/images/streamlining-security-integrating-amazon-bedrock/image8.png\",alt:\"\",width:\"1650\",height:\"884\"})}),`\n`,(0,n.jsx)(e.h3,{id:\"verify-amazon-bedrock-model-invocation-log-ingestions\",children:\"Verify Amazon Bedrock Model Invocation Log Ingestions\"}),`\n`,(0,n.jsx)(e.p,{children:\"Once the Elastic Agent and integration setup is completed, we can conduct a basic verification of the integration to determine if the logs are being ingested as expected  by using the following example API call:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`aws bedrock-runtime converse \\\\\n--model-id \"anthropic.claude-3-5-sonnet-20240620-v1:0\" \\\\\n--messages '[{\"role\":\"user\",\"content\":[{\"text\":\"Hello \"}]}]' \\\\\n--inference-config '{\"maxTokens\":2000,\"stopSequences\":[],\"temperature\":1,\"topP\":0.999}' \\\\\n--additional-model-request-fields '{\"top_k\":250}' \\\\\n--region us-east-1\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"The example API call assumes a working setup with aws cli and there is access for the foundational model \",(0,n.jsx)(e.a,{href:\"https://docs.aws.amazon.com/bedrock/latest/userguide/model-parameters-anthropic-claude-messages.html\",rel:\"nofollow\",children:\"Anthropic Claude Messages API - Amazon Bedrock\"}),\". If the user does not have access to the model one can simply request access for models from the model-access page as suggested in \",(0,n.jsx)(e.a,{href:\"https://docs.aws.amazon.com/bedrock/latest/userguide/model-access.html\",rel:\"nofollow\",children:\"Access Amazon Bedrock foundation models\"}),\", or we can optionally change the API call to any existing model the user can access.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"On successful execution of the above API call, the Amazon Bedrock Model invocation logs are populated and in Kibana \",(0,n.jsx)(e.code,{children:\"logs-aws_bedrock.invocation-default\"}),\" should be populated with those invocation logs. We can use the following simple ES|QL query to return recently ingested events.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`from logs-aws_bedrock.invocation-* | LIMIT 10\n`})}),`\n`,(0,n.jsx)(e.h1,{id:\"enable-prebuilt-detection-rules\",children:\"Enable Prebuilt Detection Rules\"}),`\n`,(0,n.jsx)(e.p,{children:\"To enable prebuilt detection rules, first login to the elastic instance and from the left pane navigation navigate to Security \\u2192 Rules \\u2192 Detection rules (SIEM). Filter for \\u201CData Source: Amazon Bedrock\\u201D from the tags section.\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Enable the available prebuilt rules. For prebuilt rules, the Setup information contains a helper guide to setup AWS Guardrails for Amazon Bedrock, which is accomplished in the \",(0,n.jsx)(e.a,{href:\"?tab=t.0#bookmark=id.5wbf10usmxhz\",children:\"Setting Up AWS Infrastructure with Terraform\"}),\" step if the example is followed correctly and the terraform has the Amazon Bedrock Guardrail configuration. Please note this setup is vital for some of the rules to generate alerts\\u2013we need to ensure the guardrail is set up accordingly if skipped in the infrastructure setup stage.\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/assets/images/streamlining-security-integrating-amazon-bedrock/image3.png\",alt:\"\",width:\"1999\",height:\"706\"})}),`\n`,(0,n.jsx)(e.h1,{id:\"exploring-high-confidence-misconduct-blocks-detection\",children:\"Exploring High-Confidence Misconduct Blocks Detection\"}),`\n`,(0,n.jsx)(e.p,{children:\"Let\\u2019s simulate a real world scenario in which a user queries a topic denied to the Amazon Bedrock model. Navigate to the Amazon Bedrock section in the Amazon UI Console, and use the left navigation pane to navigate to the Guardrails subsection under Safeguards. Use the sample guardrail created during our setup instructions for this exercise, and use the test option to run a model invocation with the guardrails and query the denied topic configured.\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/assets/images/streamlining-security-integrating-amazon-bedrock/image6.png\",alt:\"\",width:\"1999\",height:\"1259\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Repeat the query at least 6 times as the prebuilt rule is designed to alert on greater than 5 high confidence blocks. When the Alert schedule runs, we can see an alert populate for \",(0,n.jsx)(e.code,{children:\"Unusual High Confidence Misconduct Blocks Detected.\"})]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/assets/images/streamlining-security-integrating-amazon-bedrock/image7.png\",alt:\"\",width:\"1999\",height:\"1059\"})}),`\n`,(0,n.jsx)(e.h1,{id:\"demonstrate-an-exploit-case-scenario-for-amazon-bedrock\",children:\"Demonstrate an Exploit Case Scenario for Amazon Bedrock\"}),`\n`,(0,n.jsx)(e.p,{children:\"To simulate an Amazon Bedrock Security bypass, we need an exploit simulation script to interact with Amazon Bedrock models. The exploit script example we provide simulates the following attack pattern:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Attempts multiple successive requests to use denied model resources within AWS Bedrock\"}),`\n`,(0,n.jsx)(e.li,{children:\"Generates multiple successive validation exception errors within Amazon Bedrock\"}),`\n`,(0,n.jsx)(e.li,{children:\"User consistently generates high input token counts, submits numerous requests, and receives large responses that mimic patterns of resource exhaustion\"}),`\n`,(0,n.jsx)(e.li,{children:\"Combines repeated high-confidence 'BLOCKED' actions coupled with specific violation codes such as 'MISCONDUCT', indicating persistent misuse or attempts to probe the model's ethical boundaries\"}),`\n`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-py\",children:`class BedrockModelSimulator:\n   def __init__(self, profile_name, region_name):\n       // Create a Boto3 Session Client for Ineration \\v\n   def generate_args_invoke_model(self, model_id, user_message, tokens):\\v \t// Generate Model Invocation parameters\n       guardrail_id = \u003c\u003cGUARDRAIL_ID\u003e\u003e\n       guardrail_version = \u003c\u003cGUARDRAIL_VERSION\u003e\u003e\n\n       guardrail_config = {\n           \"guardrailIdentifier\": guardrail_id,\n           \"guardrailVersion\": guardrail_version,\n           \"trace\": \"enabled\"\n       }\n       conversation = [\n           {\n               \"role\": \"user\",\n               \"content\": [{\"text\": user_message}],\n           }\n       ]\n       inference_config = {\"maxTokens\": tokens, \"temperature\": 0.7, \"topP\": 1}\n       additional_model_request_fields = {}\n\n       kwargs = {\n           \"modelId\": model_id,\n           \"messages\": conversation,\n           \"inferenceConfig\": inference_config,\n           \"additionalModelRequestFields\": additional_model_request_fields\n\t    \"guardrailConfig\" : guardrail_config\n       }\n       return kwargs\n  \n   def invoke_model(self, invocation_arguments):\n       for _ in range(count):\n           try:\n               // Invoke Model With right invocation_arguments\n           except ClientError as e:\n               // Error meesage\n\ndef main():\n   profile_name = \u003c\u003cAWS Profile\u003e\u003e\n   region_name = 'us-east-1'\n   denied_model_id = // Use a denied model   \n   denied_model_user_message = // Sample Message \n   available_model_id = // Use an available model  \n   validation_exception_user_message = // Sample Message \n   resource_exploit_user_message = // A very big message for resource exhuastion\n   denied_topic_user_message = // Sample Message that can query denied topic configured\n   simulator = BedrockModelSimulator(profile_name, region_name)\n   denied_model_invocation_arguments = simulator.generate_args_invoke_model(denied_model_id, denied_model_user_message, 200)\n   simulator.invoke_model(denied_model_invocation_arguments)\n   validation_exception_invocation_arguments = simulator.generate_args_invoke_model(available_model_id, validation_exception_user_message, 6000)\n   simulator.invoke_model(validation_exception_invocation_arguments)\n   resource_exhaustion_invocation_arguments = simulator.generate_args_invoke_available_model(available_model_id, resource_exploit_user_message, 4096)\n   simulator.invoke_model(resource_exhaustion_invocation_arguments)\n   denied_topic_invocation_arguments = simulator.generate_args_invoke_available_model_guardrail(available_model_id, denied_topic_user_message, 4096)\n   simulator.invoke_model(denied_topic_invocation_arguments)\n\nif __name__ == \"__main__\":\n   main()\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Note:\"}),\" The GUARDRAIL_ID and GUARDRAIL_VERSION can be found in \",(0,n.jsx)(e.code,{children:\"outputs.tf\"})]}),`\n`,(0,n.jsx)(e.p,{children:\"When executed in a controlled environment, the provided script simulates an exploit scenario that would generate detection alerts in Elastic Security. When analyzing these alerts using the Elastic Attack Discovery feature, the script creates attack chains that show the relationships between various alerts, giving analysts a clear understanding of how multiple alerts might be part of a larger attack.\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/assets/images/streamlining-security-integrating-amazon-bedrock/image2.png\",alt:\"\",width:\"1999\",height:\"966\"})}),`\n`,(0,n.jsx)(e.h1,{id:\"conclusion\",children:\"Conclusion\"}),`\n`,(0,n.jsx)(e.p,{children:\"Integrating Elastic with Amazon Bedrock empowers organizations to maintain a secure and compliant cloud environment while maximizing the benefits of AI and machine learning. By leveraging Elastic\\u2019s advanced security and observability tools, businesses can proactively detect threats, automate compliance reporting, and gain deeper insights into their cloud operations. Increasingly, enterprises rely on opaque data sources and technologies to reveal the most serious threats-- our commitment to transparent security is evident in our open artifacts, integrations, and source code.\"})]})}function y(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(d,t)})):d(t)}var k=y;return v(A);})();\n;return Component;"},"_id":"articles/streamlining-security-integrating-amazon-bedrock.mdx","_raw":{"sourceFilePath":"articles/streamlining-security-integrating-amazon-bedrock.mdx","sourceFileName":"streamlining-security-integrating-amazon-bedrock.mdx","sourceFileDir":"articles","contentType":"mdx","flattenedPath":"articles/streamlining-security-integrating-amazon-bedrock"},"type":"Article","imageUrl":"/assets/images/streamlining-security-integrating-amazon-bedrock/Security Labs Images 36.jpg","readingTime":"15 min read","series":"","url":"/streamlining-security-integrating-amazon-bedrock","headings":[{"level":2,"title":"Elastic Integration for Amazon Bedrock","href":"#elastic-integration-for-amazon-bedrock"},{"level":3,"title":"AWS Account Setup","href":"#aws-account-setup"},{"level":3,"title":"Elastic Cloud Requirements","href":"#elastic-cloud-requirements"},{"level":3,"title":"Terraform","href":"#terraform"},{"level":3,"title":"Setting Up AWS Infrastructure with Terraform","href":"#setting-up-aws-infrastructure-with-terraform"},{"level":3,"title":"Setting Up Elastic Agent and Integration Setup","href":"#setting-up-elastic-agent-and-integration-setup"},{"level":3,"title":"Verify Amazon Bedrock Model Invocation Log Ingestions","href":"#verify-amazon-bedrock-model-invocation-log-ingestions"}],"author":[{"title":"Shashank K S","slug":"shashank-k-s","body":{"raw":"","code":"var Component=(()=\u003e{var x=Object.create;var s=Object.defineProperty;var f=Object.getOwnPropertyDescriptor;var h=Object.getOwnPropertyNames;var _=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var j=(t,n)=\u003e()=\u003e(n||t((n={exports:{}}).exports,n),n.exports),l=(t,n)=\u003e{for(var e in n)s(t,e,{get:n[e],enumerable:!0})},c=(t,n,e,o)=\u003e{if(n\u0026\u0026typeof n==\"object\"||typeof n==\"function\")for(let a of h(n))!g.call(t,a)\u0026\u0026a!==e\u0026\u0026s(t,a,{get:()=\u003en[a],enumerable:!(o=f(n,a))||o.enumerable});return t};var d=(t,n,e)=\u003e(e=t!=null?x(_(t)):{},c(n||!t||!t.__esModule?s(e,\"default\",{value:t,enumerable:!0}):e,t)),k=t=\u003ec(s({},\"__esModule\",{value:!0}),t);var i=j((S,u)=\u003e{u.exports=_jsx_runtime});var D={};l(D,{default:()=\u003eC,frontmatter:()=\u003ep});var r=d(i()),p={title:\"Shashank K S\",slug:\"shashank-k-s\"};function m(t){return(0,r.jsx)(r.Fragment,{})}function M(t={}){let{wrapper:n}=t.components||{};return n?(0,r.jsx)(n,Object.assign({},t,{children:(0,r.jsx)(m,t)})):m(t)}var C=M;return k(D);})();\n;return Component;"},"_id":"authors/shashank-k-s.mdx","_raw":{"sourceFilePath":"authors/shashank-k-s.mdx","sourceFileName":"shashank-k-s.mdx","sourceFileDir":"authors","contentType":"mdx","flattenedPath":"authors/shashank-k-s"},"type":"Author","imageUrl":"","url":"/authors/shashank-k-s"}],"category":[{"title":"Security research","slug":"security-research","body":{"raw":"","code":"var Component=(()=\u003e{var x=Object.create;var s=Object.defineProperty;var f=Object.getOwnPropertyDescriptor;var _=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,j=Object.prototype.hasOwnProperty;var l=(t,e)=\u003e()=\u003e(e||t((e={exports:{}}).exports,e),e.exports),d=(t,e)=\u003e{for(var r in e)s(t,r,{get:e[r],enumerable:!0})},c=(t,e,r,a)=\u003e{if(e\u0026\u0026typeof e==\"object\"||typeof e==\"function\")for(let o of _(e))!j.call(t,o)\u0026\u0026o!==r\u0026\u0026s(t,o,{get:()=\u003ee[o],enumerable:!(a=f(e,o))||a.enumerable});return t};var h=(t,e,r)=\u003e(r=t!=null?x(g(t)):{},c(e||!t||!t.__esModule?s(r,\"default\",{value:t,enumerable:!0}):r,t)),p=t=\u003ec(s({},\"__esModule\",{value:!0}),t);var i=l((X,u)=\u003e{u.exports=_jsx_runtime});var D={};d(D,{default:()=\u003eC,frontmatter:()=\u003ey});var n=h(i()),y={title:\"Security research\",slug:\"security-research\"};function m(t){return(0,n.jsx)(n.Fragment,{})}function M(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(m,t)})):m(t)}var C=M;return p(D);})();\n;return Component;"},"_id":"categories/security-research.mdx","_raw":{"sourceFilePath":"categories/security-research.mdx","sourceFileName":"security-research.mdx","sourceFileDir":"categories","contentType":"mdx","flattenedPath":"categories/security-research"},"type":"Category","url":"/categories/security-research"}]},"seriesArticles":null},"__N_SSG":true},"page":"/[slug]","query":{"slug":"streamlining-security-integrating-amazon-bedrock"},"buildId":"kahZ-cxorFKvHlgt0NoHQ","assetPrefix":"/security-labs","isFallback":false,"gsp":true,"scriptLoader":[]}</script></body></html>