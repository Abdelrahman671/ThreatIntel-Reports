<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="chrome=1">
    <meta name="theme-color" content="#94bd5a"/>
    <title>Building a DGA Classifier: Part 2, FeatureÂ Engineering</title>

    <link rel="stylesheet" href="https://datadrivensecurity.info/blog/theme/css/main.css">
    <link rel="stylesheet" href="https://datadrivensecurity.info/blog/theme/css/pygment_trac.css">
		
		<!-- Computer Modern Bright -->
		<link rel="stylesheet" href="/fonts/Bright/cmun-bright.css"></link>
		<!-- Computer Modern Bright Semibold-->
		<link rel="stylesheet" href="/fonts/Bright Semibold/cmun-bright-semibold.css"></link>
		<!-- Computer Modern Classical Serif Italic-->
		<link rel="stylesheet" href="/fonts/Classical Serif Italic/cmun-classical-serif-italic.css"></link>
		<!-- Computer Modern Concrete-->
		<link rel="stylesheet" href="/fonts/Concrete/cmun-concrete.css"></link>
		<!-- Computer Modern Sans-->
		<link rel="stylesheet" href="/fonts/Sans/cmun-sans.css"></link>
		<!-- Computer Modern Sans Demi-Condensed-->
		<link rel="stylesheet" href="/fonts/Sans Demi-Condensed/cmun-sans-demicondensed.css"></link>
		<!-- Computer Modern Serif-->
		<link rel="stylesheet" href="/fonts/Serif/cmun-serif.css"></link>
		<!-- Computer Modern Serif Slanted-->
		<link rel="stylesheet" href="/fonts/Serif Slanted/cmun-serif-slanted.css"></link>
		<!-- Computer Modern Typewriter-->
		<link rel="stylesheet" href="/fonts/Typewriter/cmun-typewriter.css"></link>
		<!-- Computer Modern Typewriter Light-->
		<link rel="stylesheet" href="/fonts/Typewriter Light/cmun-typewriter-light.css"></link>
		<!-- Computer Modern Typewriter Variable-->
		<link rel="stylesheet" href="/fonts/Typewriter Variable/cmun-typewriter-variable.css"></link>
		<!-- Computer Modern Upright Italic-->
		<link rel="stylesheet" href="/fonts/Upright Italic/cmun-upright-italic.css"></link>
    
    <link rel="stylesheet" href="/blog/extra/magnific-popup.css"></link>
    
		<script type="text/javascript" charset="utf8" src="/js/vendor/d3.v3.min.js"></script>
		<script type="text/javascript" charset="utf8" src="/js/vendor/topojson.v1.min.js"></script>
		<script type="text/javascript" charset="utf8" src="/js/vendor/d3.tip.min.js"></script>
		<script type="text/javascript" charset="utf8" src="/js/vendor/jquery-1.10.2.min.js"></script>
		<script type="text/javascript" charset="utf8" src="/js/vendor/jquery-migrate-1.2.1.min.js"></script>
		<script type="text/javascript" charset="utf8" src="/js/vendor/jquery.tinysort.min.js"></script>
		<script type="text/javascript" charset="utf8" src="/blog/extra/magnific.js"></script>
    

    <script>
    $(document).ready(function() {
      $('.mag').magnificPopup({ 
        type: 'image'
      });
    });
    </script>
    
    <meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=no">
    <!--[if lt IE 9]>
    <script src="//html5shiv.googlecode.com/svn/trunk/html5.js"></script>
    <![endif]-->
  </head>
  <body>
    <div class="wrapper">
      <header>
        <div><img src="" class="grv-img"/></div>
        <!-- <div class="title"><a href="https://datadrivensecurity.info/blog/">Data Driven Security </a></div> -->
        <div class="title"><a href="https://datadrivensecurity.info/blog/"><img alt="Data Driven Security" height="269" width="269" src="/blog/images/dds-header-image.png"/> </a></div>
        <div class="sub-title"></div>

<p>
    <div class="view"><a href="https://datadrivensecurity.info/blog/pages/about-dds.html">About&nbsp;<span class="caps">DDS</span></a></div>
    <div class="view"><a href="https://datadrivensecurity.info/blog/pages/dds-dataset-collection.html"><span class="caps">DDS</span> Dataset&nbsp;Collection</a></div>
    <div class="view"><a href="https://datadrivensecurity.info/blog/pages/license.html">License/Use</a></div>
    <div class="view"><a href="https://datadrivensecurity.info/blog/pages/musings.html">Book Reviews and&nbsp;Interviews</a></div>
    <div class="view"><a href="https://datadrivensecurity.info/blog/pages/resources.html">Resources</a></div>
    <div class="view"><a href="https://datadrivensecurity.info/blog/pages/subscribe.html">Subscribe&nbsp;(Newsletter)</a></div>
    <div class="view"><a href="https://datadrivensecurity.info/blog/pages/the-book-and-podcast.html"><span class="caps">DDS</span>: The Book and&nbsp;Podcast</a></div>
    <div class="view"><a href="https://datadrivensecurity.info/blog/pages/topic-request.html">Topic&nbsp;Request</a></div>
  <div class="view"><a href="https://datadrivensecurity.info/blog/archives.html">Archives</a></div>
</p>

<!-- Social links -->
<div class="social">
<h4>Follow DDS</h4>
<ul>
    <li><a href="https://twitter.com/ddsecblog">ddsecblog</a></li>
    <li><a href="https://twitter.com/ddsecbook">ddsecbook</a></li>
    <li><a href="https://twitter.com/ddsecpodcast">ddsecpodcast</a></li>
    <li><a href="https://twitter.com/jayjacobs">jayjacobs</a></li>
    <li><a href="https://twitter.com/hrbrmstr">hrbrmstr</a></li>
    <li><a href="https://datadrivensecurity.info/blog/feeds/all.atom.xml">Blog RSS</a></li>
    <li><a href="https://github.com/hrbrmstr">hrbrmstr</a></li>
    <li><a href="https://github.com/jayjacobs">jayjacobs</a></li>
    <li><a href="https://plus.google.com/+DatadrivensecurityInfo1">+dds</a></li>
</ul>
</div>
<!-- blogroll links 
<br style="clear:both"/>
<div class="links">
<h4>Blogroll</h4>
<ul>
    <li><a href="https://rud.is/b">Bob's blog</a></li>
    <li><a href="https://beechplane.wordpress.com/">Jay's blog</a></li>
</ul>
</div>
-->
      </header>
      <section>

<meta property="og:title" content="Building a DGA Classifier: Part 2, FeatureÂ Engineering"/>
<meta property="og:type" content="article"/>
<meta property="og:image" content="https://datadrivensecurity.info/blog/images/dds-header-image.png"/>
<meta property="og:url" content="https://datadrivensecurity.info/blog/posts/2014/Oct/dga-part2/" />
<meta property="og:description" content="This is part two of a three-part blog series on building a DGA classifier and it is split into the three phases of building a classifier: 1) Data preperation 2) Feature engineering and 3) ModelÂ selection. Back in part 1, we prepared the data and we are starting with a ..." />
<meta property="og:site_name" content="Data Driven Security" />
<meta property="og:article:author" content="âJay Jacobs (@jayjacobs)"" />
<meta property="og:article:published_time" content="2014-10-02T08:56:03" />

<meta name="twitter:card" content="summary">
<meta name="twitter:site" content="@ddsecblog">
<meta name="twitter:title" content="Building a DGA Classifier: Part 2, FeatureÂ Engineering"/>
<meta name="twitter:description" content="This is part two of a three-part blog series on building a DGA classifier and it is split into the three phases of building a classifier: 1) Data preperation 2) Feature engineering and 3) ModelÂ selection. Back in part 1, we prepared the data and we are starting with a ... "/>
<meta name="twitter:creator" content="@ddsecblog">
<meta name="twitter:image:src" content="https://datadrivensecurity.info/blog/images/dds-header-image.png">
<meta name="twitter:domain" content="datadrivensecurity.info">


<section id="content" class="body">
  <article>
      <div class="article-title">
        Building a <span class="caps">DGA</span> Classifier: Part 2, Feature&nbsp;Engineering
      </div>

    <div class="entry-content">
<p>
<small>
By âJay Jacobs (@jayjacobs)"<br/><abbr class="published" title="2014-10-02T08:56:03">
  Thu 02 October 2014
</abbr> | 
  tags: 
    <a href="https://datadrivensecurity.info/blog/tag/blog.html">blog</a>, 
    <a href="https://datadrivensecurity.info/blog/tag/r.html">r</a>, 
    <a href="https://datadrivensecurity.info/blog/tag/rstats.html">rstats</a>, 
 -- (<a href="https://datadrivensecurity.info/blog/posts/2014/Oct/dga-part2/" rel="bookmark">permalink</a>)
</small>
</p>      <p>This is part two of a three-part blog series on building a <span class="caps">DGA</span>
classifier and it is split into the three phases of building a
classifier: 1) <a href="https://datadrivensecurity.info/blog/posts/2014/Sep/dga-part1/">Data preperation</a> 2) Feature engineering and 3) Model&nbsp;selection.</p>
<p>Back in <a href="https://datadrivensecurity.info/blog/posts/2014/Sep/dga-part1/">part 1</a>, we prepared the data and we are starting with a nice
clean list of domains labeled as either legitamate (&#8220;legit&#8221;) or
generated by an algorithm&nbsp;(&#8220;dga&#8221;).</p>
<div class="highlight"><pre>library<span class="p">(</span>dga<span class="p">)</span>
data<span class="p">(</span>sampledga<span class="p">)</span>
</pre></div>


<p>In any machine learning approach, you will want to construct a set of
&#8220;features&#8221; that help describe each class or outcome you are attempting
to predict. Now the challenge with selecting features is that different
models have different assumptions and restrictions on the type of data
fed into them. For example, a linear regression model is very picky
about correlated features while a random forest model will handle those
without much of a hiccup. But that&#8217;s something we&#8217;ll have to face in
when we are selecting a model. For now, we will want to gather up all
the features we can think of (and have time for) and then we can sort
them out in the final&nbsp;model.</p>
<p>In our case, all we have to go off of is a domain name: a string of
letters, numbers and maybe a dash. We have to think of what makes the
domains generated by an algorithm that much different from a normal
domain. For example, in the <a href="https://github.com/ClickSecurity/data_hacking/tree/master/dga_detection">Click Security
example</a>
they calculate the following features for each&nbsp;domain:</p>
<ul>
<li>Length in&nbsp;characters</li>
<li>Entropy (range of&nbsp;characters)</li>
<li>n-grams (3,4,5) and the &#8220;distance&#8221; from the n-grams of known legit&nbsp;domains</li>
<li>n-grams (3,4,5) and the &#8220;distance&#8221; from the n-grams of dictionary&nbsp;words</li>
<li>difference between the two distance&nbsp;calculations</li>
</ul>
<p>There is an almost endless list of other features you could come up with
beyond&nbsp;those:</p>
<ul>
<li>ratio of numbers to&nbsp;(length/vowels|consonants/non-numbers)</li>
<li>ratio of vowels to&nbsp;(length/numbers/etc)</li>
<li>proportion matching dictionary&nbsp;words</li>
<li>largest dictionary word&nbsp;match</li>
<li>all the combinations of n-grams (mentioned&nbsp;above)</li>
<li>Markov chain of probable combinations of&nbsp;characters</li>
</ul>
<h3 id="simplicity-is-the-name-of-the-game">Simplicity is the name of the&nbsp;game</h3>
<p>I know it may seem a bit counter-intuitive, but simplicity is the name
of the game when doing feature selection. At first thought, you may
think you should try every feature (and combinations of features) so you
can build the very best model you can, but there are many reasons to not
do that. First, no model or algorithm is going to be perfect and the
more robust solutions will employ a variety of solutions (not just a
single algorithm). So striving for perfection has diminishing&nbsp;returns.  </p>
<p>Second, adding too many features may cause you to
overfit to your training data. That means you culd build a model that
appears to be very accurate in your tests, but stinks with any new data
(or new domain generating algorithms in our case). Finally, every
feature will take some level of time and effort to generate and process,
and these add up quickly. The end result is that <strong>you should have just
enough features to be helpful, and no more than that</strong>. The Click
Security example, in my opinion, does an excellent job at this balance
with just a handful of&nbsp;features.</p>
<p>Also, there isn&#8217;t any exact science to selecting features, so get that
notion that science is structured, clean and orderly right out of your
head. Feature seelction will, at least at this state, rely heavily on
domain expertise. As we get to the model selection, we will be weeding
out variables that don&#8217;t help, are too slow or contradict the model we
are&nbsp;testing. </p>
<p>For now, think of what makes a domain name usable. For example, when
people create a domain name the focus on readability so they may include
one set of digits together &#8220;host55&#8221; and rarely would they do &#8220;h5os5t&#8221;,
so perhaps looking at number usage could be good. Or you could assume
that randomly selecting from 26 charcters and 10 numbers will create
some very strange combinations of characters not typically found in a
language. Therefor, in legitimate domains, you expect to see more
combinations like &#8220;est&#8221; and less &#8220;0zq&#8221;. The task when doing feature
selection is to find attributes that indicate the difference. Just as in
real life, if you want to classify a car from a motorcycle a good
feature may be number of tires on the road, you want to find attributes
to measure that seperate legitimate domains from those generated by an&nbsp;algorithm.</p>
<h3 id="n-grams">N-Grams</h3>
<p>I hinted at n-grams in the previous paragraph and they may be a little
difficult to grasp if you&#8217;ve never thought about it. But they are built
on the premise that there are frequent character patterns in natural
language. Anyone who&#8217;s watched &#8220;Wheel of Fortune&#8221; knows that consonants
like r, s, t, n and l appear a lot more often than m, w, and q and
nobody guesses &#8220;q&#8221; as their first choice letter. One of the features you
could include is a simple count of the characters like that (could be
called a &#8220;1-gram&#8221;, &#8220;n-gram of 1&#8221;, &#8220;unigram&#8221; or simply &#8220;charater
frequency&#8221; since it&#8217;s single charaters). Randomly generated domains
would have a much different distribution of characters than those
generated based on natural language. That difference should help an
algorithm correctly classify between the&nbsp;two.</p>
<p>But you can get fancier than that and look at the frequency of the
combination of characters, the &#8220;n&#8221; in &#8220;n-grams&#8221; represents a variable
length. You could look for the combination of 3-characters, so let&#8217;s
take a look at how that looks with the <code>stringdist</code> package and the
<code>qgrams()</code> function.</p>
<div class="highlight"><pre>library<span class="p">(</span>stringdist<span class="p">)</span>

qgrams<span class="p">(</span><span class="s">&quot;facebook&quot;</span><span class="p">,</span> q<span class="o">=</span><span class="m">3</span><span class="p">)</span>

<span class="c1">##    fac ook ace ceb ebo boo</span>
<span class="c1">## V1   1   1   1   1   1   1</span>

qgrams<span class="p">(</span><span class="s">&quot;sandbandcandy&quot;</span><span class="p">,</span> q<span class="o">=</span><span class="m">3</span><span class="p">)</span>

<span class="c1">##    san and ndb ndc ndy dba dca ban can</span>
<span class="c1">## V1   1   3   1   1   1   1   1   1   1</span>

qgrams<span class="p">(</span><span class="s">&quot;kykwdvibps&quot;</span><span class="p">,</span> q<span class="o">=</span><span class="m">3</span><span class="p">)</span>

<span class="c1">##    kyk ykw wdv vib kwd dvi ibp bps</span>
<span class="c1">## V1   1   1   1   1   1   1   1   1</span>
</pre></div>


<p>See how the function pulls out groups of 3 characters that appear
contiguously? Also, look at the difference in the collection of trigrams
from the first two, they don&#8217;t look too weird, but the output from
<code>kykwdvibps</code> probably doesn&#8217;t match your expectation of character
combinations you are used to in the english langauge. That is what we
want to capitalize on. All we have to do is teach the algorithm
everything about the english language, easy right? Actually, we just
have to teach it what should be &#8220;expected&#8221; as far as character
combinations, and we can do that by figuring out what n-grams appear in
legitimate domains and then calculate the&nbsp;difference.</p>
<div class="highlight"><pre><span class="c1"># pull domains where class is &quot;legit&quot;</span>
legitgram3 <span class="o">&lt;-</span> qgrams<span class="p">(</span>sampledga<span class="o">$</span>domain<span class="p">[</span>sampledga<span class="o">$</span>class<span class="o">==</span><span class="s">&quot;legit&quot;</span><span class="p">],</span> q<span class="o">=</span><span class="m">3</span><span class="p">)</span>
<span class="c1"># what&#39;s at the top?</span>
legitgram3<span class="p">[</span><span class="m">1</span><span class="p">,</span> head<span class="p">(</span>order<span class="p">(</span><span class="o">-</span>legitgram3<span class="p">),</span> <span class="m">10</span><span class="p">),</span> drop<span class="o">=</span><span class="k-Variable">F</span><span class="p">]</span>

<span class="c1">##    ing ter ine the lin ion est ent ers and</span>
<span class="c1">## V1 161 138 130 113 111 106 103 102 100  93</span>
</pre></div>


<p>Notice how we have over 7,000 trigrams here with many of them appearing
in a very small proportion, let&#8217;s clean those up so the
oddities/outliers don&#8217;t throw the training. We have 5,000 legit domains,
we should be cutting off the infrequent occurances, and we could
experiment with what that cutoff should be. But let&#8217;s create the n-grams
of length 1, 2, 3, 4 and 5, but I will use the function in the <code>dga</code>
package called <code>ngram</code> and I&#8217;ll recreate the 3-gram above. I&#8217;ll also
include the ngram of lengths 3, 4 and&nbsp;5.</p>
<div class="highlight"><pre>legitname <span class="o">&lt;-</span> sampledga<span class="o">$</span>domain<span class="p">[</span>sampledga<span class="o">$</span>class<span class="o">==</span><span class="s">&quot;legit&quot;</span><span class="p">]</span>
onegood <span class="o">&lt;-</span> ngram<span class="p">(</span>legitname<span class="p">,</span> <span class="m">1</span><span class="p">)</span>
twogood <span class="o">&lt;-</span> ngram<span class="p">(</span>legitname<span class="p">,</span> <span class="m">2</span><span class="p">)</span>
threegood <span class="o">&lt;-</span> ngram<span class="p">(</span>legitname<span class="p">,</span> <span class="m">3</span><span class="p">)</span>
fourgood <span class="o">&lt;-</span> ngram<span class="p">(</span>legitname<span class="p">,</span> <span class="m">4</span><span class="p">)</span>
fivegood <span class="o">&lt;-</span> ngram<span class="p">(</span>legitname<span class="p">,</span> <span class="m">5</span><span class="p">)</span>
good345 <span class="o">&lt;-</span> ngram<span class="p">(</span>legitname<span class="p">,</span> c<span class="p">(</span><span class="m">3</span><span class="p">,</span><span class="m">4</span><span class="p">,</span><span class="m">5</span><span class="p">))</span>
</pre></div>


<p>Let&#8217;s just do a quick smell test here and look at some values with the
<code>getngram</code> function in the <code>dga</code> package and how they compare with
various&nbsp;n-grams.</p>
<div class="highlight"><pre>good <span class="o">&lt;-</span> c<span class="p">(</span><span class="s">&quot;facebook&quot;</span><span class="p">,</span> <span class="s">&quot;google&quot;</span><span class="p">,</span> <span class="s">&quot;youtube&quot;</span><span class="p">,</span>
           <span class="s">&quot;yahoo&quot;</span><span class="p">,</span> <span class="s">&quot;baidu&quot;</span><span class="p">,</span> <span class="s">&quot;wikipedia&quot;</span><span class="p">)</span>
getngram<span class="p">(</span>threegood<span class="p">,</span> good<span class="p">)</span>

<span class="c1">##  facebook    google   youtube     yahoo     baidu wikipedia </span>
<span class="c1">##     7.264     7.550     6.674     2.593     0.699     7.568</span>

bad <span class="o">&lt;-</span> c<span class="p">(</span><span class="s">&quot;hwenbesxjwrwa&quot;</span><span class="p">,</span> <span class="s">&quot;oovftsaempntpx&quot;</span><span class="p">,</span> <span class="s">&quot;uipgqhfrojbnjo&quot;</span><span class="p">,</span> 
           <span class="s">&quot;igpjponmegrxjtr&quot;</span><span class="p">,</span> <span class="s">&quot;eoitadcdyaeqh&quot;</span><span class="p">,</span> <span class="s">&quot;bqadfgvmxmypkr&quot;</span><span class="p">)</span>
getngram<span class="p">(</span>threegood<span class="p">,</span> bad<span class="p">)</span>

<span class="c1">##   hwenbesxjwrwa  oovftsaempntpx  uipgqhfrojbnjo igpjponmegrxjtr </span>
<span class="c1">##          2.6812          4.1216          2.9499          2.7482 </span>
<span class="c1">##   eoitadcdyaeqh  bqadfgvmxmypkr </span>
<span class="c1">##          3.7638          0.6021</span>
</pre></div>


<p>Notice these aren&#8217;t perfect and that&#8217;s okay, the algorithms you will try
out in Part 3 of the series won&#8217;t use just one varaible. The strength of
the classifier will come from the use all the variables together. So
let&#8217;s go ahead and construct all the features that we want to use here
and prepare for step 3 where you will you will select a model by trying
varius classifiers. In a real application, there is a relationship
between feature generation and model selection. Algorithms will act
differently on different features and after trying a few you may want to
go back to feature selection and add or remove some&nbsp;features.</p>
<p>For the sake of simplicity, we will go with these 5 sets of n-grams and
the multiple length set used in the the Click Security&nbsp;model.</p>
<h3 id="prepping-the-rest-of-the-features">Prepping the rest of the&nbsp;features</h3>
<p>Now that you understand n-grams, you can go ahead and generate the rest
of the features and save them off for later. Note that everytime you
will want to classify a new domain, you will need to generate the list
of features. So the reference n-grams generated above will have to be
saved to generate the features that rely on&nbsp;them.</p>
<div class="highlight"><pre><span class="c1"># dga package has &quot;entropy&quot; to calculate entropy</span>
sampledga<span class="o">$</span>entropy<span class="o">=</span>entropy<span class="p">(</span>sampledga<span class="o">$</span>domain<span class="p">)</span>
<span class="c1"># get length (number of characters) in domain name</span>
sampledga<span class="o">$</span>length<span class="o">=</span>nchar<span class="p">(</span>sampledga<span class="o">$</span>domain<span class="p">)</span>

<span class="c1"># calc distances for each domain</span>
sampledga<span class="o">$</span>onegram <span class="o">&lt;-</span> getngram<span class="p">(</span>onegood<span class="p">,</span> sampledga<span class="o">$</span>domain<span class="p">)</span>
sampledga<span class="o">$</span>twogram <span class="o">&lt;-</span> getngram<span class="p">(</span>twogood<span class="p">,</span> sampledga<span class="o">$</span>domain<span class="p">)</span>
sampledga<span class="o">$</span>threegram <span class="o">&lt;-</span> getngram<span class="p">(</span>threegood<span class="p">,</span> sampledga<span class="o">$</span>domain<span class="p">)</span>
sampledga<span class="o">$</span>fourgram <span class="o">&lt;-</span> getngram<span class="p">(</span>fourgood<span class="p">,</span> sampledga<span class="o">$</span>domain<span class="p">)</span>
sampledga<span class="o">$</span>fivegram <span class="o">&lt;-</span> getngram<span class="p">(</span>fivegood<span class="p">,</span> sampledga<span class="o">$</span>domain<span class="p">)</span>
sampledga<span class="o">$</span>gram345 <span class="o">&lt;-</span> getngram<span class="p">(</span>good345<span class="p">,</span> sampledga<span class="o">$</span>domain<span class="p">)</span>
</pre></div>


<p>Note that I am just tossing in every n-gram from 1 to 5 characters and 
the merging of 3, 4, and 5 n-grams.  I doubt that all of these will be
helpful and I fully expect that many of these will be dropped in the
final model, which I will cover in part&nbsp;3.</p>
<h3 id="dictionary-matching">Dictionary&nbsp;matching</h3>
<p>There is one last feature I want to add and that will try to answer the
question of &#8220;How much of the string can be explained by a dictionary?&#8221;
I&#8217;m adding it because I&#8217;ve already created several models and found
myself getting frustrated seeing a domain like &#8220;oxfordlawtrove&#8221; being
classified as a &#8220;dga&#8221;, but any human can look at that and see three
distinct words. Therfore, I created the function <code>wmatch</code> in the <span class="caps">DGA</span>
package to return the percentage of characters that are in the
dictionary. I also am using the dictionary that was included in Click
Security&#8217;s code and it seems to be a little loose about what is a valid
word. At some point that dictionary could be rebuilt and cleaned up.  But,
for the sake of time, we can just go with it how it&nbsp;is.</p>
<div class="highlight"><pre>wmatch<span class="p">(</span>c<span class="p">(</span><span class="s">&quot;facebook&quot;</span><span class="p">,</span> <span class="s">&quot;oxfordlawtrove&quot;</span><span class="p">,</span> <span class="s">&quot;uipgqhfrojbnjo&quot;</span><span class="p">))</span>

<span class="c1">## [1] 1.0000 1.0000 0.4286</span>

<span class="c1"># calculate it for every word in the sample</span>
sampledga<span class="o">$</span>dict <span class="o">&lt;-</span> wmatch<span class="p">(</span>sampledga<span class="o">$</span>domain<span class="p">)</span>

<span class="c1"># and let&#39;s look at a few randomly (3 legit, 3 dga)</span>
sampledga<span class="p">[</span>c<span class="p">(</span>sample<span class="p">(</span><span class="m">5000</span><span class="p">,</span> <span class="m">3</span><span class="p">),</span> sample<span class="p">(</span><span class="m">5000</span><span class="p">,</span> <span class="m">3</span><span class="p">)</span><span class="m">+5000</span><span class="p">),</span> c<span class="p">(</span><span class="m">6</span><span class="o">:</span><span class="m">14</span><span class="p">)]</span>

<span class="c1">##       entropy length onegram twogram threegram fourgram fivegram gram345</span>
<span class="c1">## 162     2.725      9   28.52  14.494     6.552   3.6444     1.69  11.887</span>
<span class="c1">## 291     1.922      5   16.02   8.868     2.924   0.6021     0.00   3.526</span>
<span class="c1">## 473     2.922     10   34.29  20.179     8.397   1.4771     0.00   9.875</span>
<span class="c1">## 6519    3.027     13   43.00  19.517     3.085   0.0000     0.00   3.085</span>
<span class="c1">## 39999   3.804     24   71.32  21.617     1.833   0.0000     0.00   1.833</span>
<span class="c1">## 34989   3.852     28   83.38  22.578     0.699   0.0000     0.00   0.699</span>
<span class="c1">##         dict</span>
<span class="c1">## 162   0.8889</span>
<span class="c1">## 291   1.0000</span>
<span class="c1">## 473   1.0000</span>
<span class="c1">## 6519  0.4615</span>
<span class="c1">## 39999 0.3750</span>
<span class="c1">## 34989 0.2143</span>
</pre></div>


<p>And because what we want in the features is a seperation in our classes,
we can use the fun package <code>GGally</code> to visualize the interaction between
some of our varibles (this graphic takes a while to&nbsp;generate).</p>
<div class="highlight"><pre>library<span class="p">(</span>GGally<span class="p">)</span>
library<span class="p">(</span>ggplot2<span class="p">)</span>
gg <span class="o">&lt;-</span> ggpairs<span class="p">(</span>sampledga<span class="p">,</span> 
        columns <span class="o">=</span> c<span class="p">(</span><span class="s">&quot;entropy&quot;</span><span class="p">,</span> <span class="s">&quot;length&quot;</span><span class="p">,</span> <span class="s">&quot;onegram&quot;</span><span class="p">,</span> <span class="s">&quot;threegram&quot;</span><span class="p">,</span> <span class="s">&quot;dict&quot;</span><span class="p">,</span> <span class="s">&quot;class&quot;</span><span class="p">),</span>
        color<span class="o">=</span><span class="s">&quot;class&quot;</span><span class="p">,</span>
        lower<span class="o">=</span>list<span class="p">(</span>continuous<span class="o">=</span><span class="s">&quot;smooth&quot;</span><span class="p">,</span> params<span class="o">=</span>c<span class="p">(</span>alpha<span class="o">=</span><span class="m">0.5</span><span class="p">)),</span>
        diag<span class="o">=</span>list<span class="p">(</span>continuous<span class="o">=</span><span class="s">&quot;bar&quot;</span><span class="p">,</span> combo<span class="o">=</span><span class="s">&quot;bar&quot;</span><span class="p">,</span> params<span class="o">=</span>c<span class="p">(</span>alpha<span class="o">=</span><span class="m">0.5</span><span class="p">)),</span>
        upper <span class="o">=</span> list<span class="p">(</span>continuous <span class="o">=</span> <span class="s">&quot;density&quot;</span><span class="p">,</span> combo <span class="o">=</span> <span class="s">&quot;box&quot;</span><span class="p">,</span> params<span class="o">=</span>c<span class="p">(</span>alpha<span class="o">=</span><span class="m">0.5</span><span class="p">)),</span>
        axisLabels<span class="o">=</span><span class="s">&#39;show&#39;</span><span class="p">)</span>
print<span class="p">(</span>gg<span class="p">)</span>
</pre></div>


<p><img alt="ggally plot" src="/blog/images/2014/09/dga-ggally.png" /></p>
<p>It&#8217;s pretty clear in the picture that the last dictionary matching
feature I added creates quite a large seperator for the two datasets.
Now let&#8217;s save off the sample object for use in part 3 of the blog&nbsp;series.</p>
<div class="highlight"><pre>save<span class="p">(</span>sampledga<span class="p">,</span> file<span class="o">=</span><span class="s">&quot;data/sampledga.rda&quot;</span><span class="p">,</span> compress<span class="o">=</span><span class="s">&quot;xz&quot;</span><span class="p">)</span>
</pre></div>
<a href="https://twitter.com/share" class="twitter-share-button" data-count="horizontal" data-via="ddsecblog">Tweet</a><script type="text/javascript" src="https://platform.twitter.com/widgets.js"></script>
    </div><!-- /.entry-content -->
<div id="disqus_thread"></div>
    <script type="text/javascript">
        /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
        var disqus_shortname = 'datadrivensecurity'; // required: replace example with your forum shortname
        var disqus_identifier = "posts/2014/Oct/dga-part2/";

        /* * * DON'T EDIT BELOW THIS LINE * * */
        (function() {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
    </script>
    <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
    <a href="https://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>
  </article>
</section>
      </section>
      <footer>
        <!-- p><small>&copy; Data Driven Security &mdash; Theme based on <a href="https://github.com/orderedlist">Sundown</a></small></p -->
      </footer>
    </div>
    <!-- Scale fix -->
    <script>
      var metas = document.getElementsByTagName('meta');
      var i;
      
      if (navigator.userAgent.match(/iPhone/i)) {
        for (i=0; i<metas.length; i++) {
          if (metas[i].name == "viewport") {
            metas[i].content = "width=device-width, minimum-scale=1.0, maximum-scale=1.0";
          }
        }
      
        document.addEventListener("gesturestart", gestureStart, false);
      }

      function gestureStart() {
        for (i=0; i<metas.length; i++) {
          if (metas[i].name == "viewport") {
            metas[i].content = "width=device-width, minimum-scale=0.25, maximum-scale=1.6";
          }
        }
      }
    </script>

<script>
(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
})(window,document,'script','//www.google-analytics.com/analytics.js','ga');
ga('create', 'UA-79740-6', 'datadrivensecurity.info');
ga('require', 'displayfeatures');
ga('send', 'pageview');
</script>

		<!-- Piwik -->
		<script type="text/javascript"> 
		  var _paq = _paq || [];
		  _paq.push(['trackPageView']);
		  _paq.push(['enableLinkTracking']);
		  (function() {
		    var u=(("https:" == document.location.protocol) ? "https" : "http") + "://rud.is/piwik//";
		    _paq.push(['setTrackerUrl', u+'piwik.php']);
		    _paq.push(['setSiteId', 1]);
		    var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0]; g.type='text/javascript';
		    g.defer=true; g.async=true; g.src=u+'piwik.js'; s.parentNode.insertBefore(g,s);
		  })();

		</script>
		<noscript><p><img src="https://rud.is/piwik/piwik.php?idsite=1" style="border:0" alt="" /></p></noscript>
		<!-- End Piwik Code -->
		
		
  </body>
</html>