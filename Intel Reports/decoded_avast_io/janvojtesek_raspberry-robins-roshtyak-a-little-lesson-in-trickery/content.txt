<!DOCTYPE html>
<html lang="en-US" class="no-js no-svg">

	<head>
	    <meta charset="UTF-8">
	    <meta name="viewport" content="width=device-width, initial-scale=1">
	    <link rel="profile" href="https://gmpg.org/xfn/11" />
	    <meta name='robots' content='index, follow, max-image-preview:large, max-snippet:-1, max-video-preview:-1' />

	<!-- This site is optimized with the Yoast SEO plugin v23.6 - https://yoast.com/wordpress/plugins/seo/ -->
	<title>Raspberry Robin’s Roshtyak: A Little Lesson in Trickery - Avast Threat Labs</title>
	<meta name="description" content="We take a deep dive into Roshtyak, the DLL backdoor payload associated with Raspberry Robin. Roshtyak is full of anti-analysis tricks. Some are well-known, and some we have never seen before. From a technical perspective, the lengths Roshtyak takes to protect itself are extremely interesting. Roshtyak belongs to one of the best-protected malware strains we have ever seen. We hope by publishing our research and analysis of the malware and its protection tricks we will help fellow researchers recognize and respond to similar tricks, and harden their analysis environments, making them more resistant to the evasion techniques described." />
	<link rel="canonical" href="https://decoded.avast.io/janvojtesek/raspberry-robins-roshtyak-a-little-lesson-in-trickery/" />
	<meta property="og:locale" content="en_US" />
	<meta property="og:type" content="article" />
	<meta property="og:title" content="Raspberry Robin’s Roshtyak: A Little Lesson in Trickery - Avast Threat Labs" />
	<meta property="og:description" content="We take a deep dive into Roshtyak, the DLL backdoor payload associated with Raspberry Robin. Roshtyak is full of anti-analysis tricks. Some are well-known, and some we have never seen before. From a technical perspective, the lengths Roshtyak takes to protect itself are extremely interesting. Roshtyak belongs to one of the best-protected malware strains we have ever seen. We hope by publishing our research and analysis of the malware and its protection tricks we will help fellow researchers recognize and respond to similar tricks, and harden their analysis environments, making them more resistant to the evasion techniques described." />
	<meta property="og:url" content="https://decoded.avast.io/janvojtesek/raspberry-robins-roshtyak-a-little-lesson-in-trickery/" />
	<meta property="og:site_name" content="Avast Threat Labs" />
	<meta property="article:published_time" content="2022-09-22T10:48:46+00:00" />
	<meta property="article:modified_time" content="2022-09-22T10:48:49+00:00" />
	<meta property="og:image" content="https://decoded.avast.io/wp-content/uploads/sites/2/2022/09/GettyImages-888813778_edited-scaled.jpg" />
	<meta property="og:image:width" content="2560" />
	<meta property="og:image:height" content="1123" />
	<meta property="og:image:type" content="image/jpeg" />
	<meta name="author" content="Jan Vojtěšek" />
	<meta name="twitter:card" content="summary_large_image" />
	<meta name="twitter:creator" content="@AvastThreatLabs" />
	<meta name="twitter:site" content="@AvastThreatLabs" />
	<meta name="twitter:label1" content="Written by" />
	<meta name="twitter:data1" content="Jan Vojtěšek" />
	<meta name="twitter:label2" content="Est. reading time" />
	<meta name="twitter:data2" content="40 minutes" />
	<script type="application/ld+json" class="yoast-schema-graph">{"@context":"https://schema.org","@graph":[{"@type":"Article","@id":"https://decoded.avast.io/janvojtesek/raspberry-robins-roshtyak-a-little-lesson-in-trickery/#article","isPartOf":{"@id":"https://decoded.avast.io/janvojtesek/raspberry-robins-roshtyak-a-little-lesson-in-trickery/"},"author":{"name":"Jan Vojtěšek","@id":"https://decoded.avast.io/#/schema/person/8419161d94556dbf3e643bfd7bc46ab4"},"headline":"Raspberry Robin’s Roshtyak: A Little Lesson in Trickery","datePublished":"2022-09-22T10:48:46+00:00","dateModified":"2022-09-22T10:48:49+00:00","mainEntityOfPage":{"@id":"https://decoded.avast.io/janvojtesek/raspberry-robins-roshtyak-a-little-lesson-in-trickery/"},"wordCount":7945,"publisher":{"@id":"https://decoded.avast.io/#organization"},"image":{"@id":"https://decoded.avast.io/janvojtesek/raspberry-robins-roshtyak-a-little-lesson-in-trickery/#primaryimage"},"thumbnailUrl":"https://decoded.avast.io/wp-content/uploads/sites/2/2022/09/GettyImages-888813778_edited-scaled.jpg","keywords":["CVE-2020-1054","CVE-2021-1732","Rapsberry Robin","Roshtyak"],"articleSection":["PC"],"inLanguage":"en-US"},{"@type":"WebPage","@id":"https://decoded.avast.io/janvojtesek/raspberry-robins-roshtyak-a-little-lesson-in-trickery/","url":"https://decoded.avast.io/janvojtesek/raspberry-robins-roshtyak-a-little-lesson-in-trickery/","name":"Raspberry Robin’s Roshtyak: A Little Lesson in Trickery - Avast Threat Labs","isPartOf":{"@id":"https://decoded.avast.io/#website"},"primaryImageOfPage":{"@id":"https://decoded.avast.io/janvojtesek/raspberry-robins-roshtyak-a-little-lesson-in-trickery/#primaryimage"},"image":{"@id":"https://decoded.avast.io/janvojtesek/raspberry-robins-roshtyak-a-little-lesson-in-trickery/#primaryimage"},"thumbnailUrl":"https://decoded.avast.io/wp-content/uploads/sites/2/2022/09/GettyImages-888813778_edited-scaled.jpg","datePublished":"2022-09-22T10:48:46+00:00","dateModified":"2022-09-22T10:48:49+00:00","description":"We take a deep dive into Roshtyak, the DLL backdoor payload associated with Raspberry Robin. Roshtyak is full of anti-analysis tricks. Some are well-known, and some we have never seen before. From a technical perspective, the lengths Roshtyak takes to protect itself are extremely interesting. Roshtyak belongs to one of the best-protected malware strains we have ever seen. We hope by publishing our research and analysis of the malware and its protection tricks we will help fellow researchers recognize and respond to similar tricks, and harden their analysis environments, making them more resistant to the evasion techniques described.","breadcrumb":{"@id":"https://decoded.avast.io/janvojtesek/raspberry-robins-roshtyak-a-little-lesson-in-trickery/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https://decoded.avast.io/janvojtesek/raspberry-robins-roshtyak-a-little-lesson-in-trickery/"]}]},{"@type":"ImageObject","inLanguage":"en-US","@id":"https://decoded.avast.io/janvojtesek/raspberry-robins-roshtyak-a-little-lesson-in-trickery/#primaryimage","url":"https://decoded.avast.io/wp-content/uploads/sites/2/2022/09/GettyImages-888813778_edited-scaled.jpg","contentUrl":"https://decoded.avast.io/wp-content/uploads/sites/2/2022/09/GettyImages-888813778_edited-scaled.jpg","width":2560,"height":1123},{"@type":"BreadcrumbList","@id":"https://decoded.avast.io/janvojtesek/raspberry-robins-roshtyak-a-little-lesson-in-trickery/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https://decoded.avast.io/"},{"@type":"ListItem","position":2,"name":"Raspberry Robin’s Roshtyak: A Little Lesson in Trickery"}]},{"@type":"WebSite","@id":"https://decoded.avast.io/#website","url":"https://decoded.avast.io/","name":"Avast Threat Labs","description":"Uncovering Tactics, Techniques and Procedures of malicious actors","publisher":{"@id":"https://decoded.avast.io/#organization"},"potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https://decoded.avast.io/?s={search_term_string}"},"query-input":{"@type":"PropertyValueSpecification","valueRequired":true,"valueName":"search_term_string"}}],"inLanguage":"en-US"},{"@type":"Organization","@id":"https://decoded.avast.io/#organization","name":"Avast","url":"https://decoded.avast.io/","logo":{"@type":"ImageObject","inLanguage":"en-US","@id":"https://decoded.avast.io/#/schema/logo/image/","url":"","contentUrl":"","caption":"Avast"},"image":{"@id":"https://decoded.avast.io/#/schema/logo/image/"},"sameAs":["https://x.com/AvastThreatLabs"]},{"@type":"Person","@id":"https://decoded.avast.io/#/schema/person/8419161d94556dbf3e643bfd7bc46ab4","name":"Jan Vojtěšek","image":{"@type":"ImageObject","inLanguage":"en-US","@id":"https://decoded.avast.io/#/schema/person/image/","url":"https://secure.gravatar.com/avatar/5cebfa2c9881aaefbfebdb3a9e80ca1f?s=96&d=mm&r=g","contentUrl":"https://secure.gravatar.com/avatar/5cebfa2c9881aaefbfebdb3a9e80ca1f?s=96&d=mm&r=g","caption":"Jan Vojtěšek"},"url":"https://decoded.avast.io/author/janvojtesek/"}]}</script>
	<!-- / Yoast SEO plugin. -->


<link rel='dns-prefetch' href='//decoded.avast.io' />
<link rel='dns-prefetch' href='//kit.fontawesome.com' />
<link rel='dns-prefetch' href='//fonts.googleapis.com' />
<link rel="alternate" type="application/rss+xml" title="Avast Threat Labs &raquo; Feed" href="https://decoded.avast.io/feed/" />
<link rel="alternate" type="application/rss+xml" title="Avast Threat Labs &raquo; Comments Feed" href="https://decoded.avast.io/comments/feed/" />
		<!-- This site uses the Google Analytics by MonsterInsights plugin v9.1.1 - Using Analytics tracking - https://www.monsterinsights.com/ -->
							<script src="//www.googletagmanager.com/gtag/js?id=G-GSVBRGE9D6"  data-cfasync="false" data-wpfc-render="false" type="text/javascript" async></script>
			<script data-cfasync="false" data-wpfc-render="false" type="text/javascript">
				var mi_version = '9.1.1';
				var mi_track_user = true;
				var mi_no_track_reason = '';
								var MonsterInsightsDefaultLocations = {"page_location":"https:\/\/decoded.avast.io\/janvojtesek\/raspberry-robins-roshtyak-a-little-lesson-in-trickery\/"};
				if ( typeof MonsterInsightsPrivacyGuardFilter === 'function' ) {
					var MonsterInsightsLocations = (typeof MonsterInsightsExcludeQuery === 'object') ? MonsterInsightsPrivacyGuardFilter( MonsterInsightsExcludeQuery ) : MonsterInsightsPrivacyGuardFilter( MonsterInsightsDefaultLocations );
				} else {
					var MonsterInsightsLocations = (typeof MonsterInsightsExcludeQuery === 'object') ? MonsterInsightsExcludeQuery : MonsterInsightsDefaultLocations;
				}

								var disableStrs = [
										'ga-disable-G-GSVBRGE9D6',
									];

				/* Function to detect opted out users */
				function __gtagTrackerIsOptedOut() {
					for (var index = 0; index < disableStrs.length; index++) {
						if (document.cookie.indexOf(disableStrs[index] + '=true') > -1) {
							return true;
						}
					}

					return false;
				}

				/* Disable tracking if the opt-out cookie exists. */
				if (__gtagTrackerIsOptedOut()) {
					for (var index = 0; index < disableStrs.length; index++) {
						window[disableStrs[index]] = true;
					}
				}

				/* Opt-out function */
				function __gtagTrackerOptout() {
					for (var index = 0; index < disableStrs.length; index++) {
						document.cookie = disableStrs[index] + '=true; expires=Thu, 31 Dec 2099 23:59:59 UTC; path=/';
						window[disableStrs[index]] = true;
					}
				}

				if ('undefined' === typeof gaOptout) {
					function gaOptout() {
						__gtagTrackerOptout();
					}
				}
								window.dataLayer = window.dataLayer || [];

				window.MonsterInsightsDualTracker = {
					helpers: {},
					trackers: {},
				};
				if (mi_track_user) {
					function __gtagDataLayer() {
						dataLayer.push(arguments);
					}

					function __gtagTracker(type, name, parameters) {
						if (!parameters) {
							parameters = {};
						}

						if (parameters.send_to) {
							__gtagDataLayer.apply(null, arguments);
							return;
						}

						if (type === 'event') {
														parameters.send_to = monsterinsights_frontend.v4_id;
							var hookName = name;
							if (typeof parameters['event_category'] !== 'undefined') {
								hookName = parameters['event_category'] + ':' + name;
							}

							if (typeof MonsterInsightsDualTracker.trackers[hookName] !== 'undefined') {
								MonsterInsightsDualTracker.trackers[hookName](parameters);
							} else {
								__gtagDataLayer('event', name, parameters);
							}
							
						} else {
							__gtagDataLayer.apply(null, arguments);
						}
					}

					__gtagTracker('js', new Date());
					__gtagTracker('set', {
						'developer_id.dZGIzZG': true,
											});
					if ( MonsterInsightsLocations.page_location ) {
						__gtagTracker('set', MonsterInsightsLocations);
					}
										__gtagTracker('config', 'G-GSVBRGE9D6', {"forceSSL":"true","link_attribution":"true"} );
															window.gtag = __gtagTracker;										(function () {
						/* https://developers.google.com/analytics/devguides/collection/analyticsjs/ */
						/* ga and __gaTracker compatibility shim. */
						var noopfn = function () {
							return null;
						};
						var newtracker = function () {
							return new Tracker();
						};
						var Tracker = function () {
							return null;
						};
						var p = Tracker.prototype;
						p.get = noopfn;
						p.set = noopfn;
						p.send = function () {
							var args = Array.prototype.slice.call(arguments);
							args.unshift('send');
							__gaTracker.apply(null, args);
						};
						var __gaTracker = function () {
							var len = arguments.length;
							if (len === 0) {
								return;
							}
							var f = arguments[len - 1];
							if (typeof f !== 'object' || f === null || typeof f.hitCallback !== 'function') {
								if ('send' === arguments[0]) {
									var hitConverted, hitObject = false, action;
									if ('event' === arguments[1]) {
										if ('undefined' !== typeof arguments[3]) {
											hitObject = {
												'eventAction': arguments[3],
												'eventCategory': arguments[2],
												'eventLabel': arguments[4],
												'value': arguments[5] ? arguments[5] : 1,
											}
										}
									}
									if ('pageview' === arguments[1]) {
										if ('undefined' !== typeof arguments[2]) {
											hitObject = {
												'eventAction': 'page_view',
												'page_path': arguments[2],
											}
										}
									}
									if (typeof arguments[2] === 'object') {
										hitObject = arguments[2];
									}
									if (typeof arguments[5] === 'object') {
										Object.assign(hitObject, arguments[5]);
									}
									if ('undefined' !== typeof arguments[1].hitType) {
										hitObject = arguments[1];
										if ('pageview' === hitObject.hitType) {
											hitObject.eventAction = 'page_view';
										}
									}
									if (hitObject) {
										action = 'timing' === arguments[1].hitType ? 'timing_complete' : hitObject.eventAction;
										hitConverted = mapArgs(hitObject);
										__gtagTracker('event', action, hitConverted);
									}
								}
								return;
							}

							function mapArgs(args) {
								var arg, hit = {};
								var gaMap = {
									'eventCategory': 'event_category',
									'eventAction': 'event_action',
									'eventLabel': 'event_label',
									'eventValue': 'event_value',
									'nonInteraction': 'non_interaction',
									'timingCategory': 'event_category',
									'timingVar': 'name',
									'timingValue': 'value',
									'timingLabel': 'event_label',
									'page': 'page_path',
									'location': 'page_location',
									'title': 'page_title',
									'referrer' : 'page_referrer',
								};
								for (arg in args) {
																		if (!(!args.hasOwnProperty(arg) || !gaMap.hasOwnProperty(arg))) {
										hit[gaMap[arg]] = args[arg];
									} else {
										hit[arg] = args[arg];
									}
								}
								return hit;
							}

							try {
								f.hitCallback();
							} catch (ex) {
							}
						};
						__gaTracker.create = newtracker;
						__gaTracker.getByName = newtracker;
						__gaTracker.getAll = function () {
							return [];
						};
						__gaTracker.remove = noopfn;
						__gaTracker.loaded = true;
						window['__gaTracker'] = __gaTracker;
					})();
									} else {
										console.log("");
					(function () {
						function __gtagTracker() {
							return null;
						}

						window['__gtagTracker'] = __gtagTracker;
						window['gtag'] = __gtagTracker;
					})();
									}
			</script>
				<!-- / Google Analytics by MonsterInsights -->
		<script type="text/javascript">
/* <![CDATA[ */
window._wpemojiSettings = {"baseUrl":"https:\/\/s.w.org\/images\/core\/emoji\/15.0.3\/72x72\/","ext":".png","svgUrl":"https:\/\/s.w.org\/images\/core\/emoji\/15.0.3\/svg\/","svgExt":".svg","source":{"concatemoji":"https:\/\/decoded.avast.io\/wp-includes\/js\/wp-emoji-release.min.js?ver=6.6.2"}};
/*! This file is auto-generated */
!function(i,n){var o,s,e;function c(e){try{var t={supportTests:e,timestamp:(new Date).valueOf()};sessionStorage.setItem(o,JSON.stringify(t))}catch(e){}}function p(e,t,n){e.clearRect(0,0,e.canvas.width,e.canvas.height),e.fillText(t,0,0);var t=new Uint32Array(e.getImageData(0,0,e.canvas.width,e.canvas.height).data),r=(e.clearRect(0,0,e.canvas.width,e.canvas.height),e.fillText(n,0,0),new Uint32Array(e.getImageData(0,0,e.canvas.width,e.canvas.height).data));return t.every(function(e,t){return e===r[t]})}function u(e,t,n){switch(t){case"flag":return n(e,"\ud83c\udff3\ufe0f\u200d\u26a7\ufe0f","\ud83c\udff3\ufe0f\u200b\u26a7\ufe0f")?!1:!n(e,"\ud83c\uddfa\ud83c\uddf3","\ud83c\uddfa\u200b\ud83c\uddf3")&&!n(e,"\ud83c\udff4\udb40\udc67\udb40\udc62\udb40\udc65\udb40\udc6e\udb40\udc67\udb40\udc7f","\ud83c\udff4\u200b\udb40\udc67\u200b\udb40\udc62\u200b\udb40\udc65\u200b\udb40\udc6e\u200b\udb40\udc67\u200b\udb40\udc7f");case"emoji":return!n(e,"\ud83d\udc26\u200d\u2b1b","\ud83d\udc26\u200b\u2b1b")}return!1}function f(e,t,n){var r="undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope?new OffscreenCanvas(300,150):i.createElement("canvas"),a=r.getContext("2d",{willReadFrequently:!0}),o=(a.textBaseline="top",a.font="600 32px Arial",{});return e.forEach(function(e){o[e]=t(a,e,n)}),o}function t(e){var t=i.createElement("script");t.src=e,t.defer=!0,i.head.appendChild(t)}"undefined"!=typeof Promise&&(o="wpEmojiSettingsSupports",s=["flag","emoji"],n.supports={everything:!0,everythingExceptFlag:!0},e=new Promise(function(e){i.addEventListener("DOMContentLoaded",e,{once:!0})}),new Promise(function(t){var n=function(){try{var e=JSON.parse(sessionStorage.getItem(o));if("object"==typeof e&&"number"==typeof e.timestamp&&(new Date).valueOf()<e.timestamp+604800&&"object"==typeof e.supportTests)return e.supportTests}catch(e){}return null}();if(!n){if("undefined"!=typeof Worker&&"undefined"!=typeof OffscreenCanvas&&"undefined"!=typeof URL&&URL.createObjectURL&&"undefined"!=typeof Blob)try{var e="postMessage("+f.toString()+"("+[JSON.stringify(s),u.toString(),p.toString()].join(",")+"));",r=new Blob([e],{type:"text/javascript"}),a=new Worker(URL.createObjectURL(r),{name:"wpTestEmojiSupports"});return void(a.onmessage=function(e){c(n=e.data),a.terminate(),t(n)})}catch(e){}c(n=f(s,u,p))}t(n)}).then(function(e){for(var t in e)n.supports[t]=e[t],n.supports.everything=n.supports.everything&&n.supports[t],"flag"!==t&&(n.supports.everythingExceptFlag=n.supports.everythingExceptFlag&&n.supports[t]);n.supports.everythingExceptFlag=n.supports.everythingExceptFlag&&!n.supports.flag,n.DOMReady=!1,n.readyCallback=function(){n.DOMReady=!0}}).then(function(){return e}).then(function(){var e;n.supports.everything||(n.readyCallback(),(e=n.source||{}).concatemoji?t(e.concatemoji):e.wpemoji&&e.twemoji&&(t(e.twemoji),t(e.wpemoji)))}))}((window,document),window._wpemojiSettings);
/* ]]> */
</script>
<style id='wp-emoji-styles-inline-css' type='text/css'>

	img.wp-smiley, img.emoji {
		display: inline !important;
		border: none !important;
		box-shadow: none !important;
		height: 1em !important;
		width: 1em !important;
		margin: 0 0.07em !important;
		vertical-align: -0.1em !important;
		background: none !important;
		padding: 0 !important;
	}
</style>
<link rel='stylesheet' id='wp-block-library-css' href='https://decoded.avast.io/wp-includes/css/dist/block-library/style.min.css?ver=6.6.2' type='text/css' media='all' />
<link rel='stylesheet' id='syntax-highlighting-code-block-theme-css' href='https://decoded.avast.io/wp-content/plugins/syntax-highlighting-code-block/vendor/scrivo/highlight-php/styles/default.css?ver=1.5.0' type='text/css' media='all' />
<style id='syntax-highlighting-code-block-inline-css' type='text/css'>
.wp-block-code {
	border: 0;
	padding: 0;
	-webkit-text-size-adjust: 100%;
	text-size-adjust: 100%;
}

.wp-block-code > span {
	display: block;
	overflow: auto;
}

.shcb-language {
	border: 0;
	clip: rect(1px, 1px, 1px, 1px);
	-webkit-clip-path: inset(50%);
	clip-path: inset(50%);
	height: 1px;
	margin: -1px;
	overflow: hidden;
	padding: 0;
	position: absolute;
	width: 1px;
	word-wrap: normal;
	word-break: normal;
}

.hljs {
	box-sizing: border-box;
}

.hljs.shcb-code-table {
	display: table;
	width: 100%;
}

.hljs.shcb-code-table > .shcb-loc {
	color: inherit;
	display: table-row;
	width: 100%;
}

.hljs.shcb-code-table .shcb-loc > span {
	display: table-cell;
}

.wp-block-code code.hljs:not(.shcb-wrap-lines) {
	white-space: pre;
}

.wp-block-code code.hljs.shcb-wrap-lines {
	white-space: pre-wrap;
}

.hljs.shcb-line-numbers {
	border-spacing: 0;
	counter-reset: line;
}

.hljs.shcb-line-numbers > .shcb-loc {
	counter-increment: line;
}

.hljs.shcb-line-numbers .shcb-loc > span {
	padding-left: 0.75em;
}

.hljs.shcb-line-numbers .shcb-loc::before {
	border-right: 1px solid #ddd;
	content: counter(line);
	display: table-cell;
	padding: 0 0.75em;
	text-align: right;
	-webkit-user-select: none;
	-moz-user-select: none;
	-ms-user-select: none;
	user-select: none;
	white-space: nowrap;
	width: 1%;
}

.hljs > mark.shcb-loc { background-color: #ddf6ff; }
</style>
<style id='classic-theme-styles-inline-css' type='text/css'>
/*! This file is auto-generated */
.wp-block-button__link{color:#fff;background-color:#32373c;border-radius:9999px;box-shadow:none;text-decoration:none;padding:calc(.667em + 2px) calc(1.333em + 2px);font-size:1.125em}.wp-block-file__button{background:#32373c;color:#fff;text-decoration:none}
</style>
<style id='global-styles-inline-css' type='text/css'>
:root{--wp--preset--aspect-ratio--square: 1;--wp--preset--aspect-ratio--4-3: 4/3;--wp--preset--aspect-ratio--3-4: 3/4;--wp--preset--aspect-ratio--3-2: 3/2;--wp--preset--aspect-ratio--2-3: 2/3;--wp--preset--aspect-ratio--16-9: 16/9;--wp--preset--aspect-ratio--9-16: 9/16;--wp--preset--color--black: #000000;--wp--preset--color--cyan-bluish-gray: #abb8c3;--wp--preset--color--white: #ffffff;--wp--preset--color--pale-pink: #f78da7;--wp--preset--color--vivid-red: #cf2e2e;--wp--preset--color--luminous-vivid-orange: #ff6900;--wp--preset--color--luminous-vivid-amber: #fcb900;--wp--preset--color--light-green-cyan: #7bdcb5;--wp--preset--color--vivid-green-cyan: #00d084;--wp--preset--color--pale-cyan-blue: #8ed1fc;--wp--preset--color--vivid-cyan-blue: #0693e3;--wp--preset--color--vivid-purple: #9b51e0;--wp--preset--color--johannes-acc: #ff7900;--wp--preset--color--johannes-meta: #ffffff;--wp--preset--color--johannes-bg: #1c1c1c;--wp--preset--color--johannes-bg-alt-1: #252525;--wp--preset--color--johannes-bg-alt-2: #333333;--wp--preset--gradient--vivid-cyan-blue-to-vivid-purple: linear-gradient(135deg,rgba(6,147,227,1) 0%,rgb(155,81,224) 100%);--wp--preset--gradient--light-green-cyan-to-vivid-green-cyan: linear-gradient(135deg,rgb(122,220,180) 0%,rgb(0,208,130) 100%);--wp--preset--gradient--luminous-vivid-amber-to-luminous-vivid-orange: linear-gradient(135deg,rgba(252,185,0,1) 0%,rgba(255,105,0,1) 100%);--wp--preset--gradient--luminous-vivid-orange-to-vivid-red: linear-gradient(135deg,rgba(255,105,0,1) 0%,rgb(207,46,46) 100%);--wp--preset--gradient--very-light-gray-to-cyan-bluish-gray: linear-gradient(135deg,rgb(238,238,238) 0%,rgb(169,184,195) 100%);--wp--preset--gradient--cool-to-warm-spectrum: linear-gradient(135deg,rgb(74,234,220) 0%,rgb(151,120,209) 20%,rgb(207,42,186) 40%,rgb(238,44,130) 60%,rgb(251,105,98) 80%,rgb(254,248,76) 100%);--wp--preset--gradient--blush-light-purple: linear-gradient(135deg,rgb(255,206,236) 0%,rgb(152,150,240) 100%);--wp--preset--gradient--blush-bordeaux: linear-gradient(135deg,rgb(254,205,165) 0%,rgb(254,45,45) 50%,rgb(107,0,62) 100%);--wp--preset--gradient--luminous-dusk: linear-gradient(135deg,rgb(255,203,112) 0%,rgb(199,81,192) 50%,rgb(65,88,208) 100%);--wp--preset--gradient--pale-ocean: linear-gradient(135deg,rgb(255,245,203) 0%,rgb(182,227,212) 50%,rgb(51,167,181) 100%);--wp--preset--gradient--electric-grass: linear-gradient(135deg,rgb(202,248,128) 0%,rgb(113,206,126) 100%);--wp--preset--gradient--midnight: linear-gradient(135deg,rgb(2,3,129) 0%,rgb(40,116,252) 100%);--wp--preset--font-size--small: 12.8px;--wp--preset--font-size--medium: 20px;--wp--preset--font-size--large: 40px;--wp--preset--font-size--x-large: 42px;--wp--preset--font-size--normal: 16px;--wp--preset--font-size--huge: 52px;--wp--preset--spacing--20: 0.44rem;--wp--preset--spacing--30: 0.67rem;--wp--preset--spacing--40: 1rem;--wp--preset--spacing--50: 1.5rem;--wp--preset--spacing--60: 2.25rem;--wp--preset--spacing--70: 3.38rem;--wp--preset--spacing--80: 5.06rem;--wp--preset--shadow--natural: 6px 6px 9px rgba(0, 0, 0, 0.2);--wp--preset--shadow--deep: 12px 12px 50px rgba(0, 0, 0, 0.4);--wp--preset--shadow--sharp: 6px 6px 0px rgba(0, 0, 0, 0.2);--wp--preset--shadow--outlined: 6px 6px 0px -3px rgba(255, 255, 255, 1), 6px 6px rgba(0, 0, 0, 1);--wp--preset--shadow--crisp: 6px 6px 0px rgba(0, 0, 0, 1);}:where(.is-layout-flex){gap: 0.5em;}:where(.is-layout-grid){gap: 0.5em;}body .is-layout-flex{display: flex;}.is-layout-flex{flex-wrap: wrap;align-items: center;}.is-layout-flex > :is(*, div){margin: 0;}body .is-layout-grid{display: grid;}.is-layout-grid > :is(*, div){margin: 0;}:where(.wp-block-columns.is-layout-flex){gap: 2em;}:where(.wp-block-columns.is-layout-grid){gap: 2em;}:where(.wp-block-post-template.is-layout-flex){gap: 1.25em;}:where(.wp-block-post-template.is-layout-grid){gap: 1.25em;}.has-black-color{color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-color{color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-color{color: var(--wp--preset--color--white) !important;}.has-pale-pink-color{color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-color{color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-color{color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-color{color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-color{color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-color{color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-color{color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-color{color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-color{color: var(--wp--preset--color--vivid-purple) !important;}.has-black-background-color{background-color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-background-color{background-color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-background-color{background-color: var(--wp--preset--color--white) !important;}.has-pale-pink-background-color{background-color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-background-color{background-color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-background-color{background-color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-background-color{background-color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-background-color{background-color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-background-color{background-color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-background-color{background-color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-background-color{background-color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-background-color{background-color: var(--wp--preset--color--vivid-purple) !important;}.has-black-border-color{border-color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-border-color{border-color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-border-color{border-color: var(--wp--preset--color--white) !important;}.has-pale-pink-border-color{border-color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-border-color{border-color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-border-color{border-color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-border-color{border-color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-border-color{border-color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-border-color{border-color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-border-color{border-color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-border-color{border-color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-border-color{border-color: var(--wp--preset--color--vivid-purple) !important;}.has-vivid-cyan-blue-to-vivid-purple-gradient-background{background: var(--wp--preset--gradient--vivid-cyan-blue-to-vivid-purple) !important;}.has-light-green-cyan-to-vivid-green-cyan-gradient-background{background: var(--wp--preset--gradient--light-green-cyan-to-vivid-green-cyan) !important;}.has-luminous-vivid-amber-to-luminous-vivid-orange-gradient-background{background: var(--wp--preset--gradient--luminous-vivid-amber-to-luminous-vivid-orange) !important;}.has-luminous-vivid-orange-to-vivid-red-gradient-background{background: var(--wp--preset--gradient--luminous-vivid-orange-to-vivid-red) !important;}.has-very-light-gray-to-cyan-bluish-gray-gradient-background{background: var(--wp--preset--gradient--very-light-gray-to-cyan-bluish-gray) !important;}.has-cool-to-warm-spectrum-gradient-background{background: var(--wp--preset--gradient--cool-to-warm-spectrum) !important;}.has-blush-light-purple-gradient-background{background: var(--wp--preset--gradient--blush-light-purple) !important;}.has-blush-bordeaux-gradient-background{background: var(--wp--preset--gradient--blush-bordeaux) !important;}.has-luminous-dusk-gradient-background{background: var(--wp--preset--gradient--luminous-dusk) !important;}.has-pale-ocean-gradient-background{background: var(--wp--preset--gradient--pale-ocean) !important;}.has-electric-grass-gradient-background{background: var(--wp--preset--gradient--electric-grass) !important;}.has-midnight-gradient-background{background: var(--wp--preset--gradient--midnight) !important;}.has-small-font-size{font-size: var(--wp--preset--font-size--small) !important;}.has-medium-font-size{font-size: var(--wp--preset--font-size--medium) !important;}.has-large-font-size{font-size: var(--wp--preset--font-size--large) !important;}.has-x-large-font-size{font-size: var(--wp--preset--font-size--x-large) !important;}
:where(.wp-block-post-template.is-layout-flex){gap: 1.25em;}:where(.wp-block-post-template.is-layout-grid){gap: 1.25em;}
:where(.wp-block-columns.is-layout-flex){gap: 2em;}:where(.wp-block-columns.is-layout-grid){gap: 2em;}
:root :where(.wp-block-pullquote){font-size: 1.5em;line-height: 1.6;}
</style>
<link rel='stylesheet' id='johannes-main-css' href='https://decoded.avast.io/wp-content/themes/johannes/assets/css/min.css?ver=1.1.3' type='text/css' media='all' />
<style id='johannes-main-inline-css' type='text/css'>
:root {--color_header_top_bg: #424851;--color_header_top_txt: #989da2;--color_header_top_acc: #ffffff;--color_header_middle_bg: #2d364c;--color_header_middle_txt: #ffffff;--color_header_middle_acc: #ff8000;--color_header_middle_bg_multi: #424851;--color_header_bottom_bg: #ffffff;--color_header_bottom_txt: #424851;--color_header_bottom_acc: #f13b3b;--color_header_sticky_bg: ;--color_header_sticky_txt: ;--color_header_sticky_acc: ;--color_bg: #1c1c1c;--color_bg_dark: #1b1b1b;--color_h: #ffffff;--color_txt: #ffffff;--color_acc: #ff7900;--color_meta: #ffffff;--color_bg_alt_1: #252525;--color_bg_alt_2: #333333;--color_footer_bg: #ffffff;--color_footer_txt: #424851;--color_footer_acc: #f13b3b;--color_footer_meta: #989da2;--color_dark_txt: #1c1c1c;--color_button_txt: #fff;--color_button_hover: #1c1c1c;--color_border: #444;--color_border_light: #7d7d7d;--color_category_events: #ffffff;--color_category_events_dark: #b3b3b3;--color_category_events_light: #ffffff;--color_category_iot: #37eb34;--color_category_iot_dark: #27a525;--color_category_iot_light: #73f171;--color_category_mobile: #066dce;--color_category_mobile_dark: #054d91;--color_category_mobile_light: #5199dd;--color_category_network: #d32b47;--color_category_network_dark: #941f32;--color_category_network_light: #e16b7f;--color_category_other-research: #e5eb34;--color_category_other-research_dark: #a1a525;--color_category_other-research_light: #edf171;--color_category_pc: #f87934;--color_category_pc_dark: #ae5525;--color_category_pc_light: #fba271;--color_category_reports: #858585;--color_category_reports_dark: #5e5e5e;--color_category_reports_light: #aaaaaa;--color_category_uncategorized: #ffffff;--color_category_uncategorized_dark: #b3b3b3;--color_category_uncategorized_light: #ffffff;}.category-pill.johannes-layout-g .entry-category a.category-events {background: linear-gradient(-45deg, var(--color_category_events), var(--color_category_events_dark));border-bottom: solid 2px var(--color_category_events_light);border-top: solid 2px var(--color_category_events_light);border-radius: 10px 0px 10px 0px;font-size: 1.25rem;box-shadow: 0px 0px 6px 0px rgb(0 0 0 / 30%);}.category-pill.johannes-layout-g.category-events .entry-title a {border-left: 3px solid var(--color_category_events);padding: 15px;font-weight:bolder;font-size: 2.5rem;}article.category-pill.johannes-layout-g.category-events:hover .entry-title a,.widget_categories li.category-events a {color: var(--color_category_events_light);}.header-layout-11 .slot-r>div>nav>ul>li.category-events,.header-layout-11 .slot-r>nav>ul>li.category-events,.header-layout-11 .slot-r-top .johannes-hamburger li.category-events,.widget_categories li.category-events a {border: 2px solid var(--color_category_events_light);background: linear-gradient(-45deg, var(--color_category_events), var(--color_category_events_dark));}.header-layout-11 .slot-r>div>nav>ul>li.category-events:hover,.header-layout-11 .slot-r>nav>ul>li.category-events:hover,.header-layout-11 .slot-r-top .johannes-hamburger li.category-events:hover,.widget_categories li.category-events a:hover {background: var(--color_bg_alt_1);color: var(--color_txt) !important;border: 2px solid var(--color_category_events_light);}.category-pill.johannes-layout-g .entry-category a.category-iot {background: linear-gradient(-45deg, var(--color_category_iot), var(--color_category_iot_dark));border-bottom: solid 2px var(--color_category_iot_light);border-top: solid 2px var(--color_category_iot_light);border-radius: 10px 0px 10px 0px;font-size: 1.25rem;box-shadow: 0px 0px 6px 0px rgb(0 0 0 / 30%);}.category-pill.johannes-layout-g.category-iot .entry-title a {border-left: 3px solid var(--color_category_iot);padding: 15px;font-weight:bolder;font-size: 2.5rem;}article.category-pill.johannes-layout-g.category-iot:hover .entry-title a,.widget_categories li.category-iot a {color: var(--color_category_iot_light);}.header-layout-11 .slot-r>div>nav>ul>li.category-iot,.header-layout-11 .slot-r>nav>ul>li.category-iot,.header-layout-11 .slot-r-top .johannes-hamburger li.category-iot,.widget_categories li.category-iot a {border: 2px solid var(--color_category_iot_light);background: linear-gradient(-45deg, var(--color_category_iot), var(--color_category_iot_dark));}.header-layout-11 .slot-r>div>nav>ul>li.category-iot:hover,.header-layout-11 .slot-r>nav>ul>li.category-iot:hover,.header-layout-11 .slot-r-top .johannes-hamburger li.category-iot:hover,.widget_categories li.category-iot a:hover {background: var(--color_bg_alt_1);color: var(--color_txt) !important;border: 2px solid var(--color_category_iot_light);}.category-pill.johannes-layout-g .entry-category a.category-mobile {background: linear-gradient(-45deg, var(--color_category_mobile), var(--color_category_mobile_dark));border-bottom: solid 2px var(--color_category_mobile_light);border-top: solid 2px var(--color_category_mobile_light);border-radius: 10px 0px 10px 0px;font-size: 1.25rem;box-shadow: 0px 0px 6px 0px rgb(0 0 0 / 30%);}.category-pill.johannes-layout-g.category-mobile .entry-title a {border-left: 3px solid var(--color_category_mobile);padding: 15px;font-weight:bolder;font-size: 2.5rem;}article.category-pill.johannes-layout-g.category-mobile:hover .entry-title a,.widget_categories li.category-mobile a {color: var(--color_category_mobile_light);}.header-layout-11 .slot-r>div>nav>ul>li.category-mobile,.header-layout-11 .slot-r>nav>ul>li.category-mobile,.header-layout-11 .slot-r-top .johannes-hamburger li.category-mobile,.widget_categories li.category-mobile a {border: 2px solid var(--color_category_mobile_light);background: linear-gradient(-45deg, var(--color_category_mobile), var(--color_category_mobile_dark));}.header-layout-11 .slot-r>div>nav>ul>li.category-mobile:hover,.header-layout-11 .slot-r>nav>ul>li.category-mobile:hover,.header-layout-11 .slot-r-top .johannes-hamburger li.category-mobile:hover,.widget_categories li.category-mobile a:hover {background: var(--color_bg_alt_1);color: var(--color_txt) !important;border: 2px solid var(--color_category_mobile_light);}.category-pill.johannes-layout-g .entry-category a.category-network {background: linear-gradient(-45deg, var(--color_category_network), var(--color_category_network_dark));border-bottom: solid 2px var(--color_category_network_light);border-top: solid 2px var(--color_category_network_light);border-radius: 10px 0px 10px 0px;font-size: 1.25rem;box-shadow: 0px 0px 6px 0px rgb(0 0 0 / 30%);}.category-pill.johannes-layout-g.category-network .entry-title a {border-left: 3px solid var(--color_category_network);padding: 15px;font-weight:bolder;font-size: 2.5rem;}article.category-pill.johannes-layout-g.category-network:hover .entry-title a,.widget_categories li.category-network a {color: var(--color_category_network_light);}.header-layout-11 .slot-r>div>nav>ul>li.category-network,.header-layout-11 .slot-r>nav>ul>li.category-network,.header-layout-11 .slot-r-top .johannes-hamburger li.category-network,.widget_categories li.category-network a {border: 2px solid var(--color_category_network_light);background: linear-gradient(-45deg, var(--color_category_network), var(--color_category_network_dark));}.header-layout-11 .slot-r>div>nav>ul>li.category-network:hover,.header-layout-11 .slot-r>nav>ul>li.category-network:hover,.header-layout-11 .slot-r-top .johannes-hamburger li.category-network:hover,.widget_categories li.category-network a:hover {background: var(--color_bg_alt_1);color: var(--color_txt) !important;border: 2px solid var(--color_category_network_light);}.category-pill.johannes-layout-g .entry-category a.category-other-research {background: linear-gradient(-45deg, var(--color_category_other-research), var(--color_category_other-research_dark));border-bottom: solid 2px var(--color_category_other-research_light);border-top: solid 2px var(--color_category_other-research_light);border-radius: 10px 0px 10px 0px;font-size: 1.25rem;box-shadow: 0px 0px 6px 0px rgb(0 0 0 / 30%);}.category-pill.johannes-layout-g.category-other-research .entry-title a {border-left: 3px solid var(--color_category_other-research);padding: 15px;font-weight:bolder;font-size: 2.5rem;}article.category-pill.johannes-layout-g.category-other-research:hover .entry-title a,.widget_categories li.category-other-research a {color: var(--color_category_other-research_light);}.header-layout-11 .slot-r>div>nav>ul>li.category-other-research,.header-layout-11 .slot-r>nav>ul>li.category-other-research,.header-layout-11 .slot-r-top .johannes-hamburger li.category-other-research,.widget_categories li.category-other-research a {border: 2px solid var(--color_category_other-research_light);background: linear-gradient(-45deg, var(--color_category_other-research), var(--color_category_other-research_dark));}.header-layout-11 .slot-r>div>nav>ul>li.category-other-research:hover,.header-layout-11 .slot-r>nav>ul>li.category-other-research:hover,.header-layout-11 .slot-r-top .johannes-hamburger li.category-other-research:hover,.widget_categories li.category-other-research a:hover {background: var(--color_bg_alt_1);color: var(--color_txt) !important;border: 2px solid var(--color_category_other-research_light);}.category-pill.johannes-layout-g .entry-category a.category-pc {background: linear-gradient(-45deg, var(--color_category_pc), var(--color_category_pc_dark));border-bottom: solid 2px var(--color_category_pc_light);border-top: solid 2px var(--color_category_pc_light);border-radius: 10px 0px 10px 0px;font-size: 1.25rem;box-shadow: 0px 0px 6px 0px rgb(0 0 0 / 30%);}.category-pill.johannes-layout-g.category-pc .entry-title a {border-left: 3px solid var(--color_category_pc);padding: 15px;font-weight:bolder;font-size: 2.5rem;}article.category-pill.johannes-layout-g.category-pc:hover .entry-title a,.widget_categories li.category-pc a {color: var(--color_category_pc_light);}.header-layout-11 .slot-r>div>nav>ul>li.category-pc,.header-layout-11 .slot-r>nav>ul>li.category-pc,.header-layout-11 .slot-r-top .johannes-hamburger li.category-pc,.widget_categories li.category-pc a {border: 2px solid var(--color_category_pc_light);background: linear-gradient(-45deg, var(--color_category_pc), var(--color_category_pc_dark));}.header-layout-11 .slot-r>div>nav>ul>li.category-pc:hover,.header-layout-11 .slot-r>nav>ul>li.category-pc:hover,.header-layout-11 .slot-r-top .johannes-hamburger li.category-pc:hover,.widget_categories li.category-pc a:hover {background: var(--color_bg_alt_1);color: var(--color_txt) !important;border: 2px solid var(--color_category_pc_light);}.category-pill.johannes-layout-g .entry-category a.category-reports {background: linear-gradient(-45deg, var(--color_category_reports), var(--color_category_reports_dark));border-bottom: solid 2px var(--color_category_reports_light);border-top: solid 2px var(--color_category_reports_light);border-radius: 10px 0px 10px 0px;font-size: 1.25rem;box-shadow: 0px 0px 6px 0px rgb(0 0 0 / 30%);}.category-pill.johannes-layout-g.category-reports .entry-title a {border-left: 3px solid var(--color_category_reports);padding: 15px;font-weight:bolder;font-size: 2.5rem;}article.category-pill.johannes-layout-g.category-reports:hover .entry-title a,.widget_categories li.category-reports a {color: var(--color_category_reports_light);}.header-layout-11 .slot-r>div>nav>ul>li.category-reports,.header-layout-11 .slot-r>nav>ul>li.category-reports,.header-layout-11 .slot-r-top .johannes-hamburger li.category-reports,.widget_categories li.category-reports a {border: 2px solid var(--color_category_reports_light);background: linear-gradient(-45deg, var(--color_category_reports), var(--color_category_reports_dark));}.header-layout-11 .slot-r>div>nav>ul>li.category-reports:hover,.header-layout-11 .slot-r>nav>ul>li.category-reports:hover,.header-layout-11 .slot-r-top .johannes-hamburger li.category-reports:hover,.widget_categories li.category-reports a:hover {background: var(--color_bg_alt_1);color: var(--color_txt) !important;border: 2px solid var(--color_category_reports_light);}.category-pill.johannes-layout-g .entry-category a.category-uncategorized {background: linear-gradient(-45deg, var(--color_category_uncategorized), var(--color_category_uncategorized_dark));border-bottom: solid 2px var(--color_category_uncategorized_light);border-top: solid 2px var(--color_category_uncategorized_light);border-radius: 10px 0px 10px 0px;font-size: 1.25rem;box-shadow: 0px 0px 6px 0px rgb(0 0 0 / 30%);}.category-pill.johannes-layout-g.category-uncategorized .entry-title a {border-left: 3px solid var(--color_category_uncategorized);padding: 15px;font-weight:bolder;font-size: 2.5rem;}article.category-pill.johannes-layout-g.category-uncategorized:hover .entry-title a,.widget_categories li.category-uncategorized a {color: var(--color_category_uncategorized_light);}.header-layout-11 .slot-r>div>nav>ul>li.category-uncategorized,.header-layout-11 .slot-r>nav>ul>li.category-uncategorized,.header-layout-11 .slot-r-top .johannes-hamburger li.category-uncategorized,.widget_categories li.category-uncategorized a {border: 2px solid var(--color_category_uncategorized_light);background: linear-gradient(-45deg, var(--color_category_uncategorized), var(--color_category_uncategorized_dark));}.header-layout-11 .slot-r>div>nav>ul>li.category-uncategorized:hover,.header-layout-11 .slot-r>nav>ul>li.category-uncategorized:hover,.header-layout-11 .slot-r-top .johannes-hamburger li.category-uncategorized:hover,.widget_categories li.category-uncategorized a:hover {background: var(--color_bg_alt_1);color: var(--color_txt) !important;border: 2px solid var(--color_category_uncategorized_light);}body{font-family: 'Muli', Arial, sans-serif;font-weight: 400;font-style: normal;color: var( --color_txt );background: var( --color_bg );}.johannes-header{font-family: 'Muli', Arial, sans-serif;font-weight: 700;font-style: normal;}h1,h2,h3,h4,h5,h6,.h1,.h2,.h3,.h4,.h5,.h6,.h0,.display-1,.wp-block-cover .wp-block-cover-image-text, .wp-block-cover .wp-block-cover-text, .wp-block-cover h2, .wp-block-cover-image .wp-block-cover-image-text, .wp-block-cover-image .wp-block-cover-text, .wp-block-cover-image h2,.entry-category a,.single-md-content .entry-summary,p.has-drop-cap:not(:focus)::first-letter,.johannes_posts_widget .entry-header > a {font-family: 'Muli', Arial, sans-serif;font-weight: 900;font-style: normal;}b,strong,.entry-tags a,.entry-category a,.entry-meta a,.wp-block-tag-cloud a{font-weight: 900; }.entry-content strong{font-weight: bold;}.header-top{background: var( --color_header_top_bg );color: var( --color_header_top_txt );}.header-top nav > ul > li > a,.header-top .johannes-menu-social a{color: var( --color_header_top_txt );}.header-top nav > ul > li:hover > a,.header-top nav > ul > li.current-menu-item > a,.header-top .johannes-menu-social li:hover a{color: var( --color_header_top_acc );}.header-middle,.header-mobile{color: var( --color_header_middle_txt );background: var( --color_header_middle_bg );}.header-middle > .container {height: 130px;}.header-middle a,.johannes-mega-menu .sub-menu li:hover a,.header-mobile a{color: var( --color_header_middle_txt );}.header-middle li:hover > a,.header-middle .current-menu-item > a,.header-middle .johannes-mega-menu .sub-menu li a:hover,.header-middle .johannes-site-branding .site-title a:hover,.header-mobile .site-title a,.header-mobile a:hover{color: var( --color_header_middle_acc );}.header-middle .johannes-site-branding .site-title a{color: var( --color_header_middle_txt );}.header-middle .sub-menu{background: var( --color_header_middle_bg );}.johannes-cover-indent .header-middle .johannes-menu>li>a:hover,.johannes-cover-indent .header-middle .johannes-menu-action a:hover{color: var( --color_header_middle_acc );}.header-sticky-main{color: var( --color_header_middle_txt );background: var( --color_header_middle_bg );}.header-sticky-main a,.header-sticky-main .johannes-mega-menu .sub-menu li:hover a,.header-sticky-main .johannes-mega-menu .has-arrows .owl-nav > div{color: var( --color_header_middle_txt );}.header-sticky-main li:hover > a,.header-sticky-main .current-menu-item > a,.header-sticky-main .johannes-mega-menu .sub-menu li a:hover,.header-sticky-main .johannes-site-branding .site-title a:hover{color: var( --color_header_middle_acc );}.header-sticky-main .johannes-site-branding .site-title a{color: var( --color_header_middle_txt );}.header-sticky-main .sub-menu{background: var( --color_header_middle_bg );}.header-sticky-contextual{color: var( --color_header_middle_bg );background: var( --color_header_middle_txt );}.header-sticky-contextual,.header-sticky-contextual a{font-family: 'Muli', Arial, sans-serif;font-weight: 400;font-style: normal;}.header-sticky-contextual a{color: var( --color_header_middle_bg );}.header-sticky-contextual .meta-comments:after{background: var( --color_header_middle_bg );}.header-sticky-contextual .meks_ess a:hover{color: var( --color_header_middle_acc );background: transparent;}.header-bottom{color: var( --color_header_bottom_txt );background: var( --color_header_bottom_bg );border-top: 1px solid rgba(66,72,81,0.1);border-bottom: 1px solid rgba(66,72,81,0.1);}.johannes-header-bottom-boxed .header-bottom{background: transparent;border: none;}.johannes-header-bottom-boxed .header-bottom-slots{background: var( --color_header_bottom_bg );border-top: 1px solid rgba(66,72,81,0.1);border-bottom: 1px solid rgba(66,72,81,0.1);}.header-bottom-slots{height: 70px;}.header-bottom a,.johannes-mega-menu .sub-menu li:hover a,.johannes-mega-menu .has-arrows .owl-nav > div{color: var( --color_header_bottom_txt );}.header-bottom li:hover > a,.header-bottom .current-menu-item > a,.header-bottom .johannes-mega-menu .sub-menu li a:hover,.header-bottom .johannes-site-branding .site-title a:hover{color: var( --color_header_bottom_acc );}.header-bottom .johannes-site-branding .site-title a{color: var( --color_header_bottom_txt );}.header-bottom .sub-menu{background: var( --color_header_bottom_bg );}.johannes-menu-action .search-form input[type=text]{background: var( --color_bg );}.johannes-header-multicolor .header-middle .slot-l,.johannes-header-multicolor .header-sticky .header-sticky-main .container > .slot-l,.johannes-header-multicolor .header-mobile .slot-l,.johannes-header-multicolor .slot-l .johannes-site-branding:after{background: var( --color_header_middle_bg_multi );}.johannes-cover-indent .johannes-cover{min-height: 450px;}.page.johannes-cover-indent .johannes-cover{min-height: 250px;}.single.johannes-cover-indent .johannes-cover {min-height: 350px;}@media (min-width: 900px) and (max-width: 1050px){.header-middle > .container {height: 100px;}.header-bottom > .container,.header-bottom-slots {height: 50px;}}.johannes-modal{background: var( --color_bg );}.johannes-modal .johannes-menu-social li a:hover,.meks_ess a:hover{background: var( --color_txt );}.johannes-modal .johannes-menu-social li:hover a{color: var( --color_button_hover );}.johannes-modal .johannes-modal-close{color: var( --color_txt );}.johannes-modal .johannes-modal-close:hover{color: var( --color_acc );}.meks_ess a:hover{color: var( --color_bg );}h1,h2,h3,h4,h5,h6,.h1,.h2,.h3,.h4,.h5,.h6,.h0,.display-1,.has-large-font-size {color: var( --color_h );}.entry-title a,a{color: var( --color_txt );}.johannes-post .entry-title a{color: var( --color_h );}.entry-content a:not([class*=button]),.comment-content a:not([class*=button]){color: var( --color_acc );}.entry-content a:not([class*=button]):hover,.comment-content a:not([class*=button]):hover{color: var( --color_txt );}.entry-title a:hover,a:hover,.entry-meta a,.written-by a,.johannes-overlay .entry-meta a:hover,body .johannes-cover .section-bg+.container .johannes-breadcrumbs a:hover,.johannes-cover .section-bg+.container .section-head a:not(.johannes-button):not(.cat-item):hover,.entry-content .wp-block-tag-cloud a:hover{color: var( --color_acc );}.entry-meta,.entry-content .entry-tags a,.entry-content .fn a,.comment-metadata,.entry-content .comment-metadata a,.written-by > span,.johannes-breadcrumbs{color: var( --color_meta );}.entry-meta a:hover,.written-by a:hover,.entry-content .wp-block-tag-cloud a{color: var( --color_txt );}.entry-meta .meta-item + .meta-item:before{background:var( --color_txt );}.entry-format i{color: var( --color_bg );background:var( --color_txt );}.category-pill .entry-category a{background-color: var( --color_acc );color: var( --color_button_txt );}.category-pill .entry-category a:hover{background-color: var( --color_txt );color: var( --color_button_hover );}.johannes-overlay.category-pill .entry-category a:hover,.johannes-cover.category-pill .entry-category a:hover {background-color: #ffffff;color: var( --color_dark_txt );}.white-bg-alt-2 .johannes-bg-alt-2 .category-pill .entry-category a:hover,.white-bg-alt-2 .johannes-bg-alt-2 .entry-format i{background-color: #ffffff;color: var( --color_dark_txt );}.media-shadow:after{background: rgba(255,255,255,0.1);}.entry-content .entry-tags a:hover,.entry-content .fn a:hover{color: var( --color_acc );}.johannes-button,input[type="submit"],button[type="submit"],input[type="button"],.wp-block-button .wp-block-button__link,.comment-reply-link,#cancel-comment-reply-link,.johannes-pagination a,.johannes-pagination,.meks-instagram-follow-link .meks-widget-cta,.mks_autor_link_wrap a,.mks_read_more a,.category-pill .entry-category a{font-family: 'Muli', Arial, sans-serif;font-weight: 900;font-style: normal;}.johannes-bg-alt-1,.has-arrows .owl-nav,.has-arrows .owl-stage-outer:after,.media-shadow:after {background-color: #252525}.johannes-bg-alt-2 {background-color: #333333}.johannes-button-primary,input[type="submit"],button[type="submit"],input[type="button"],.johannes-pagination a{box-shadow: 0 10px 15px 0 rgba(255,121,0,0.2);background: var( --color_acc );color: var( --color_button_txt );}.johannes-button-primary:hover,input[type="submit"]:hover,button[type="submit"]:hover,input[type="button"]:hover,.johannes-pagination a:hover{box-shadow: 0 0 0 0 rgba(255,121,0,0);color: var( --color_button_txt );}.johannes-button.disabled{background: var( --color_bg_alt_1 );color: var( --color_txt ); box-shadow: none;}.johannes-button-secondary,.comment-reply-link,#cancel-comment-reply-link,.meks-instagram-follow-link .meks-widget-cta,.mks_autor_link_wrap a,.mks_read_more a{box-shadow: inset 0 0px 0px 1px var( --color_txt );color: var( --color_txt );opacity: .5;}.johannes-button-secondary:hover,.comment-reply-link:hover,#cancel-comment-reply-link:hover,.meks-instagram-follow-link .meks-widget-cta:hover,.mks_autor_link_wrap a:hover,.mks_read_more a:hover{box-shadow: inset 0 0px 0px 1px var( --color_acc ); opacity: 1;color: var( --color_acc );}.johannes-breadcrumbs a,.johannes-action-close:hover,.single-md-content .entry-summary span,form label .required{color: var( --color_acc );}.johannes-breadcrumbs a:hover{color: var( --color_txt );}.section-title:after{background-color: var( --color_acc );}hr{background: rgba(255,255,255,0.2);}.wp-block-preformatted,.wp-block-verse,pre,code, kbd, pre, samp, address{background:var( --color_bg_alt_1 );}.entry-content ul li:before,.wp-block-quote:before,.comment-content ul li:before{color: var( --color_txt );}.wp-block-quote.is-large:before{color: var( --color_acc );}.wp-block-table.is-style-stripes tr:nth-child(odd){background:var( --color_bg_alt_1 );}.wp-block-table.is-style-regular tbody tr,.entry-content table tr,.comment-content table tr{border-bottom: 1px solid rgba(255,255,255,0.1);}.wp-block-pullquote:not(.is-style-solid-color){color: var( --color_txt );border-color: var( --color_acc );}.wp-block-pullquote{background: var( --color_acc );color: var( --color_bg );}.johannes-sidebar-none .wp-block-pullquote.alignfull.is-style-solid-color{box-shadow: -526px 0 0 #ff7900, -1052px 0 0 #ff7900,526px 0 0 #ff7900, 1052px 0 0 var( --color_acc );}.wp-block-button .wp-block-button__link{background: var( --color_acc );color: var( --color_button_txt );box-shadow: 0 10px 15px 0 rgba(255,121,0,0.2);}.wp-block-button .wp-block-button__link:hover{box-shadow: 0 0 0 0 rgba(255,121,0,0);}.is-style-outline .wp-block-button__link {background: 0 0;color:var( --color_acc );border: 2px solid currentcolor;}.entry-content .is-style-solid-color a:not([class*=button]){color:var( --color_bg );}.entry-content .is-style-solid-color a:not([class*=button]):hover{color:var( --color_txt );}input[type=color], input[type=date], input[type=datetime-local], input[type=datetime], input[type=email], input[type=month], input[type=number], input[type=password], input[type=range], input[type=search], input[type=tel], input[type=text], input[type=time], input[type=url], input[type=week], select, textarea{border: 1px solid rgba(255,255,255,0.3);}body .johannes-wrapper .meks_ess{border-color: rgba(255,255,255,0.1); }.widget_eu_cookie_law_widget #eu-cookie-law input, .widget_eu_cookie_law_widget #eu-cookie-law input:focus, .widget_eu_cookie_law_widget #eu-cookie-law input:hover{background: var( --color_acc );color: var( --color_button_txt );}.double-bounce1, .double-bounce2{background-color: var( --color_acc );}.johannes-pagination .page-numbers.current,.paginated-post-wrapper span{background: var( --color_bg_alt_1 );color: var( --color_txt );}.widget li{color: rgba(255,255,255,0.8);}.widget_calendar #today a{color: #fff;}.widget_calendar #today a{background: var( --color_acc );}.tagcloud a{border-color: rgba(255,255,255,0.5);color: rgba(255,255,255,0.8);}.tagcloud a:hover{color: var( --color_acc );border-color: var( --color_acc );}.rssSummary,.widget p{color: var( --color_txt );}.johannes-bg-alt-1 .count,.johannes-bg-alt-1 li a,.johannes-bg-alt-1 .johannes-accordion-nav{background-color: var( --color_bg_alt_1 );}.johannes-bg-alt-2 .count,.johannes-bg-alt-2 li a,.johannes-bg-alt-2 .johannes-accordion-nav,.johannes-bg-alt-2 .cat-item .count, .johannes-bg-alt-2 .rss-date, .widget .johannes-bg-alt-2 .post-date, .widget .johannes-bg-alt-2 cite{background-color: var( --color_bg_alt_2 );color: #FFF;}.white-bg-alt-1 .widget .johannes-bg-alt-1 select option,.white-bg-alt-2 .widget .johannes-bg-alt-2 select option{background: var( --color_bg_alt_2 );}.widget .johannes-bg-alt-2 li a:hover{color: var( --color_acc );}.widget_categories .johannes-bg-alt-1 ul li .dots:before,.widget_archive .johannes-bg-alt-1 ul li .dots:before{color: var( --color_txt );}.widget_categories .johannes-bg-alt-2 ul li .dots:before,.widget_archive .johannes-bg-alt-2 ul li .dots:before{color: #FFF;}.search-alt input[type=search], .search-alt input[type=text], .widget_search input[type=search], .widget_search input[type=text],.mc-field-group input[type=email], .mc-field-group input[type=text]{border-bottom: 1px solid rgba(255,255,255,0.2);}.johannes-sidebar-hidden{background: var( --color_bg );}.johannes-footer{background: var( --color_footer_bg );color: var( --color_footer_txt );}.johannes-footer a,.johannes-footer .widget-title{color: var( --color_footer_txt );}.johannes-footer a:hover{color: var( --color_footer_acc );}.johannes-footer-widgets + .johannes-copyright{border-top: 1px solid rgba(66,72,81,0.1);}.johannes-footer .widget .count,.johannes-footer .widget_categories li a,.johannes-footer .widget_archive li a,.johannes-footer .widget .johannes-accordion-nav{background-color: var( --color_footer_bg );}.footer-divider{border-top: 1px solid rgba(66,72,81,0.1);}.johannes-footer .rssSummary,.johannes-footer .widget p{color: var( --color_footer_txt );}.johannes-empty-message{background: var( --color_bg_alt_1 );}.error404 .h0{color: var( --color_acc );}.johannes-goto-top,.johannes-goto-top:hover{background: var( --color_txt );color: var( --color_bg );}.johannes-ellipsis div{background: var( --color_acc );}.white-bg-alt-2 .johannes-bg-alt-2 .section-subnav .johannes-button-secondary:hover{color: var( --color_acc );}.section-subnav a{color: var( --color_txt );}.johannes-cover .section-subnav a{color: var( --color_button_txt );}.section-subnav a:hover{color: var( --color_acc );}@media(min-width: 600px){.size-johannes-fa-a{ height: 450px !important;}.size-johannes-single-3{ height: 450px !important;}.size-johannes-single-4{ height: 540px !important;}.size-johannes-page-3{ height: 360px !important;}.size-johannes-page-4{ height: 405px !important;}.size-johannes-wa-3{ height: 405px !important;}.size-johannes-wa-4{ height: 567px !important;}.size-johannes-archive-2{ height: 405px !important;}.size-johannes-archive-3{ height: 405px !important;}}@media(min-width: 900px){.size-johannes-a{ height: 484px !important;}.size-johannes-b{ height: 491px !important;}.size-johannes-c{ height: 304px !important;}.size-johannes-d{ height: 194px !important;}.size-johannes-e{ height: 304px !important;}.size-johannes-f{ height: 214px !important;}.size-johannes-fa-a{ height: 500px !important;}.size-johannes-fa-b{ height: 635px !important;}.size-johannes-fa-c{ height: 540px !important;}.size-johannes-fa-d{ height: 344px !important;}.size-johannes-fa-e{ height: 442px !important;}.size-johannes-single-1{ height: 484px !important;}.size-johannes-single-2{ height: 484px !important;}.size-johannes-single-3{ height: 500px !important;}.size-johannes-single-4{ height: 600px !important;}.size-johannes-single-5{ height: 442px !important;}.size-johannes-page-1{ height: 484px !important;}.size-johannes-page-2{ height: 484px !important;}.size-johannes-page-3{ height: 400px !important;}.size-johannes-page-4{ height: 450px !important;}.size-johannes-wa-1{ height: 442px !important;}.size-johannes-wa-2{ height: 304px !important;}.size-johannes-wa-3{ height: 450px !important;}.size-johannes-wa-4{ height: 630px !important;}.size-johannes-archive-2{ height: 450px !important;}.size-johannes-archive-3{ height: 450px !important;}}@media(min-width: 900px){.has-small-font-size{ font-size: 1.3rem;}.has-normal-font-size{ font-size: 1.6rem;}.has-large-font-size{ font-size: 4.0rem;}.has-huge-font-size{ font-size: 5.2rem;}}.has-johannes-acc-background-color{ background-color: #ff7900;}.has-johannes-acc-color{ color: #ff7900;}.has-johannes-meta-background-color{ background-color: #ffffff;}.has-johannes-meta-color{ color: #ffffff;}.has-johannes-bg-background-color{ background-color: #1c1c1c;}.has-johannes-bg-color{ color: #1c1c1c;}.has-johannes-bg-alt-1-background-color{ background-color: #252525;}.has-johannes-bg-alt-1-color{ color: #252525;}.has-johannes-bg-alt-2-background-color{ background-color: #333333;}.has-johannes-bg-alt-2-color{ color: #333333;}body{font-size:1.6rem;}.johannes-header{font-size:1.4rem;}.display-1{font-size:3rem;}h1, .h1{font-size:2.6rem;}h2, .h2{font-size:2.4rem;}h3, .h3{font-size:2.2rem;}h4, .h4,.wp-block-cover .wp-block-cover-image-text,.wp-block-cover .wp-block-cover-text,.wp-block-cover h2,.wp-block-cover-image .wp-block-cover-image-text,.wp-block-cover-image .wp-block-cover-text,.wp-block-cover-image h2{font-size:2rem;}h5, .h5{font-size:1.8rem;}h6, .h6{font-size:1.6rem;}.entry-meta{font-size:1.2rem;}.section-title {font-size:2.4rem;}.widget-title{font-size:2.0rem;}.mks_author_widget h3{font-size:2.2rem;}.widget,.johannes-breadcrumbs{font-size:1.4rem;}.wp-block-quote.is-large p, .wp-block-quote.is-style-large p{font-size:2.2rem;}.johannes-site-branding .site-title.logo-img-none{font-size: 2.6rem;}.johannes-cover-indent .johannes-cover{margin-top: -70px;}.johannes-menu-social li a:after, .menu-social-container li a:after{font-size:1.6rem;}.johannes-modal .johannes-menu-social li>a:after,.johannes-menu-action .jf{font-size:2.4rem;}.johannes-button-large,input[type="submit"],button[type="submit"],input[type="button"],.johannes-pagination a,.page-numbers.current,.johannes-button-medium,.meks-instagram-follow-link .meks-widget-cta,.mks_autor_link_wrap a,.mks_read_more a,.wp-block-button .wp-block-button__link{font-size:1.3rem;}.johannes-button-small,.comment-reply-link,#cancel-comment-reply-link{font-size:1.2rem;}.category-pill .entry-category a,.category-pill-small .entry-category a{font-size:1.1rem;}@media (min-width: 600px){ .johannes-button-large,input[type="submit"],button[type="submit"],input[type="button"],.johannes-pagination a,.page-numbers.current,.wp-block-button .wp-block-button__link{font-size:1.4rem;}.category-pill .entry-category a{font-size:1.4rem;}.category-pill-small .entry-category a{font-size:1.1rem;}}@media (max-width: 374px){.johannes-overlay .h1,.johannes-overlay .h2,.johannes-overlay .h3,.johannes-overlay .h4,.johannes-overlay .h5{font-size: 2.2rem;}}@media (max-width: 600px){ .johannes-layout-fa-d .h5{font-size: 2.4rem;}.johannes-layout-f.category-pill .entry-category a{background-color: transparent;color: var( --color_acc );}.johannes-layout-c .h3,.johannes-layout-d .h5{font-size: 2.4rem;}.johannes-layout-f .h3{font-size: 1.8rem;}}@media (min-width: 600px) and (max-width: 1050px){ .johannes-layout-fa-c .h2{font-size:3.6rem;}.johannes-layout-fa-d .h5{font-size:2.4rem;}.johannes-layout-fa-e .display-1,.section-head-alt .display-1{font-size:5.2rem;}}@media (max-width: 1050px){ body.single-post .single-md-content{max-width: 766px;width: 100%;}body.page .single-md-content.col-lg-6,body.page .single-md-content.col-lg-6{flex: 0 0 100%}body.page .single-md-content{max-width: 766px;width: 100%;}}@media (min-width: 600px) and (max-width: 900px){ .display-1{font-size:4.6rem;}h1, .h1{font-size:4rem;}h2, .h2,.johannes-layout-fa-e .display-1,.section-head-alt .display-1{font-size:3.2rem;}h3, .h3,.johannes-layout-fa-c .h2,.johannes-layout-fa-d .h5,.johannes-layout-d .h5,.johannes-layout-e .h2{font-size:2.8rem;}h4, .h4,.wp-block-cover .wp-block-cover-image-text,.wp-block-cover .wp-block-cover-text,.wp-block-cover h2,.wp-block-cover-image .wp-block-cover-image-text,.wp-block-cover-image .wp-block-cover-text,.wp-block-cover-image h2{font-size:2.4rem;}h5, .h5{font-size:2rem;}h6, .h6{font-size:1.8rem;}.section-title {font-size:3.2rem;}.johannes-section.wa-layout .display-1{font-size: 3rem;}.johannes-layout-f .h3{font-size: 3.2rem}.johannes-site-branding .site-title.logo-img-none{font-size: 3rem;}}@media (min-width: 900px){ body{font-size:1.6rem;}.johannes-header{font-size:1.4rem;}.display-1{font-size:5.2rem;}h1, .h1 {font-size:5.2rem;}h2, .h2 {font-size:4.0rem;}h3, .h3 {font-size:3.6rem;}h4, .h4,.wp-block-cover .wp-block-cover-image-text,.wp-block-cover .wp-block-cover-text,.wp-block-cover h2,.wp-block-cover-image .wp-block-cover-image-text,.wp-block-cover-image .wp-block-cover-text,.wp-block-cover-image h2 {font-size:3.2rem;}h5, .h5 {font-size:2.8rem;}h6, .h6 {font-size:2.4rem;}.widget-title{font-size:2.0rem;}.section-title{font-size:4.0rem;}.wp-block-quote.is-large p, .wp-block-quote.is-style-large p{font-size:2.6rem;}.johannes-section-instagram .h2{font-size: 3rem;}.johannes-site-branding .site-title.logo-img-none{font-size: 4rem;}.entry-meta{font-size:1.4rem;}.johannes-cover-indent .johannes-cover {margin-top: -130px;}.johannes-cover-indent .johannes-cover .section-head{top: 32.5px;}}.section-description .search-alt input[type=text],.search-alt input[type=text]{color: var( --color_txt );}::-webkit-input-placeholder {color: rgba(255,255,255,0.5);}::-moz-placeholder {color: rgba(255,255,255,0.5);}:-ms-input-placeholder {color: rgba(255,255,255,0.5);}:-moz-placeholder{color: rgba(255,255,255,0.5);}.section-description .search-alt input[type=text]::-webkit-input-placeholder {color: var( --color_txt );}.section-description .search-alt input[type=text]::-moz-placeholder {color: var( --color_txt );}.section-description .search-alt input[type=text]:-ms-input-placeholder {color: var( --color_txt );}.section-description .search-alt input[type=text]:-moz-placeholder{color: var( --color_txt );}.section-description .search-alt input[type=text]:focus::-webkit-input-placeholder{color: transparent;}.section-description .search-alt input[type=text]:focus::-moz-placeholder {color: transparent;}.section-description .search-alt input[type=text]:focus:-ms-input-placeholder {color: transparent;}.section-description .search-alt input[type=text]:focus:-moz-placeholder{color: transparent;}
</style>
<link rel='stylesheet' id='avast-common-css' href='https://decoded.avast.io/wp-content/themes/johannes-avast/css/common.css?ver=1.0.2' type='text/css' media='all' />
<link rel='stylesheet' id='avast-theme-css' href='https://decoded.avast.io/wp-content/themes/johannes-avast/css/dark.css?ver=1.0.2' type='text/css' media='all' />
<link rel='stylesheet' id='font_awesome-css' href='https://kit.fontawesome.com/a2abe1aedb.js?ver=6.6.2' type='text/css' media='all' />
<link rel='stylesheet' id='johannes-fonts-css' href='https://fonts.googleapis.com/css?family=Muli%3Aregular%2C900%2C700&#038;ver=1.1.3' type='text/css' media='all' />
<link rel='stylesheet' id='meks_ess-main-css' href='https://decoded.avast.io/wp-content/plugins/meks-easy-social-share/assets/css/main.css?ver=1.3' type='text/css' media='all' />
<script type="text/javascript">
            window._nslDOMReady = function (callback) {
                if ( document.readyState === "complete" || document.readyState === "interactive" ) {
                    callback();
                } else {
                    document.addEventListener( "DOMContentLoaded", callback );
                }
            };
            </script><script type="text/javascript" src="https://decoded.avast.io/wp-content/plugins/google-analytics-for-wordpress/assets/js/frontend-gtag.min.js?ver=9.1.1" id="monsterinsights-frontend-script-js" async="async" data-wp-strategy="async"></script>
<script data-cfasync="false" data-wpfc-render="false" type="text/javascript" id='monsterinsights-frontend-script-js-extra'>/* <![CDATA[ */
var monsterinsights_frontend = {"js_events_tracking":"true","download_extensions":"doc,pdf,ppt,zip,xls,docx,pptx,xlsx","inbound_paths":"[{\"path\":\"\\\/go\\\/\",\"label\":\"affiliate\"},{\"path\":\"\\\/recommend\\\/\",\"label\":\"affiliate\"}]","home_url":"https:\/\/decoded.avast.io","hash_tracking":"false","v4_id":"G-GSVBRGE9D6"};/* ]]> */
</script>
<script type="text/javascript" src="https://decoded.avast.io/wp-includes/js/jquery/jquery.min.js?ver=3.7.1" id="jquery-core-js"></script>
<script type="text/javascript" src="https://decoded.avast.io/wp-includes/js/jquery/jquery-migrate.min.js?ver=3.4.1" id="jquery-migrate-js"></script>
<link rel="https://api.w.org/" href="https://decoded.avast.io/wp-json/" /><link rel="alternate" title="JSON" type="application/json" href="https://decoded.avast.io/wp-json/wp/v2/posts/6201" /><link rel="EditURI" type="application/rsd+xml" title="RSD" href="https://decoded.avast.io/xmlrpc.php?rsd" />
<meta name="generator" content="WordPress 6.6.2" />
<link rel='shortlink' href='https://decoded.avast.io/?p=6201' />
<link rel="alternate" title="oEmbed (JSON)" type="application/json+oembed" href="https://decoded.avast.io/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fdecoded.avast.io%2Fjanvojtesek%2Fraspberry-robins-roshtyak-a-little-lesson-in-trickery%2F" />
<link rel="alternate" title="oEmbed (XML)" type="text/xml+oembed" href="https://decoded.avast.io/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fdecoded.avast.io%2Fjanvojtesek%2Fraspberry-robins-roshtyak-a-little-lesson-in-trickery%2F&#038;format=xml" />
        <script type="text/javascript" id="avast-theme-switch">
			function getCookie(cname) {
			  var name = cname + "=";
			  var decodedCookie = decodeURIComponent(document.cookie);
			  var ca = decodedCookie.split(';');
			  for(var i = 0; i <ca.length; i++) {
				var c = ca[i];
				while (c.charAt(0) == ' ') {
				  c = c.substring(1);
				}
				if (c.indexOf(name) == 0) {
				  return c.substring(name.length, c.length);
				}
			  }
			  return "";
			}
			
			function setCookie(cname, cvalue, exdays) {
			  var d = new Date();
			  d.setTime(d.getTime() + (exdays*24*60*60*1000));
			  var expires = "expires="+ d.toUTCString();
			  document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
			}
			
			function toggleTheme()
			{
				theme_cookie = getCookie("avast_theme");
				if (!theme_cookie) {console.log("theme cookie is null");theme_cookie = "dark";}
				theme_cookie = (theme_cookie != "dark" ? 'dark' : 'light');
				setTheme(theme_cookie);
			}
			
			function setTheme(theme)
			{
				console.log("settin theme to " + theme);
				const theme_element = document.querySelector('#avast-theme-css');
				theme_cookie = (theme_cookie == "dark" ? 'dark' : 'light');
				theme_element.setAttribute('href', "https://decoded.avast.io/wp-content/themes/johannes-avast/css/" + theme_cookie + ".css");
				setCookie("avast_theme", theme_cookie, 10*365);
			}
			
			theme_cookie = getCookie("avast_theme");
			if (!theme_cookie) {theme_cookie = "dark";}
			setTheme(theme_cookie);
		</script>
    <link rel="icon" href="https://decoded.avast.io/wp-content/uploads/sites/2/2019/07/cropped-Asset-25ldpi-32x32.png" sizes="32x32" />
<link rel="icon" href="https://decoded.avast.io/wp-content/uploads/sites/2/2019/07/cropped-Asset-25ldpi-192x192.png" sizes="192x192" />
<link rel="apple-touch-icon" href="https://decoded.avast.io/wp-content/uploads/sites/2/2019/07/cropped-Asset-25ldpi-180x180.png" />
<meta name="msapplication-TileImage" content="https://decoded.avast.io/wp-content/uploads/sites/2/2019/07/cropped-Asset-25ldpi-270x270.png" />
<style type="text/css">div.nsl-container[data-align="left"] {
    text-align: left;
}

div.nsl-container[data-align="center"] {
    text-align: center;
}

div.nsl-container[data-align="right"] {
    text-align: right;
}


div.nsl-container div.nsl-container-buttons a[data-plugin="nsl"] {
    text-decoration: none;
    box-shadow: none;
    border: 0;
}

div.nsl-container .nsl-container-buttons {
    display: flex;
    padding: 5px 0;
}

div.nsl-container.nsl-container-block .nsl-container-buttons {
    display: inline-grid;
    grid-template-columns: minmax(145px, auto);
}

div.nsl-container-block-fullwidth .nsl-container-buttons {
    flex-flow: column;
    align-items: center;
}

div.nsl-container-block-fullwidth .nsl-container-buttons a,
div.nsl-container-block .nsl-container-buttons a {
    flex: 1 1 auto;
    display: block;
    margin: 5px 0;
    width: 100%;
}

div.nsl-container-inline {
    margin: -5px;
    text-align: left;
}

div.nsl-container-inline .nsl-container-buttons {
    justify-content: center;
    flex-wrap: wrap;
}

div.nsl-container-inline .nsl-container-buttons a {
    margin: 5px;
    display: inline-block;
}

div.nsl-container-grid .nsl-container-buttons {
    flex-flow: row;
    align-items: center;
    flex-wrap: wrap;
}

div.nsl-container-grid .nsl-container-buttons a {
    flex: 1 1 auto;
    display: block;
    margin: 5px;
    max-width: 280px;
    width: 100%;
}

@media only screen and (min-width: 650px) {
    div.nsl-container-grid .nsl-container-buttons a {
        width: auto;
    }
}

div.nsl-container .nsl-button {
    cursor: pointer;
    vertical-align: top;
    border-radius: 4px;
}

div.nsl-container .nsl-button-default {
    color: #fff;
    display: flex;
}

div.nsl-container .nsl-button-icon {
    display: inline-block;
}

div.nsl-container .nsl-button-svg-container {
    flex: 0 0 auto;
    padding: 8px;
    display: flex;
    align-items: center;
}

div.nsl-container svg {
    height: 24px;
    width: 24px;
    vertical-align: top;
}

div.nsl-container .nsl-button-default div.nsl-button-label-container {
    margin: 0 24px 0 12px;
    padding: 10px 0;
    font-family: Helvetica, Arial, sans-serif;
    font-size: 16px;
    line-height: 20px;
    letter-spacing: .25px;
    overflow: hidden;
    text-align: center;
    text-overflow: clip;
    white-space: nowrap;
    flex: 1 1 auto;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    text-transform: none;
    display: inline-block;
}

div.nsl-container .nsl-button-google[data-skin="dark"] .nsl-button-svg-container {
    margin: 1px;
    padding: 7px;
    border-radius: 3px;
    background: #fff;
}

div.nsl-container .nsl-button-google[data-skin="light"] {
    border-radius: 1px;
    box-shadow: 0 1px 5px 0 rgba(0, 0, 0, .25);
    color: RGBA(0, 0, 0, 0.54);
}

div.nsl-container .nsl-button-apple .nsl-button-svg-container {
    padding: 0 6px;
}

div.nsl-container .nsl-button-apple .nsl-button-svg-container svg {
    height: 40px;
    width: auto;
}

div.nsl-container .nsl-button-apple[data-skin="light"] {
    color: #000;
    box-shadow: 0 0 0 1px #000;
}

div.nsl-container .nsl-button-facebook[data-skin="white"] {
    color: #000;
    box-shadow: inset 0 0 0 1px #000;
}

div.nsl-container .nsl-button-facebook[data-skin="light"] {
    color: #1877F2;
    box-shadow: inset 0 0 0 1px #1877F2;
}

div.nsl-container .nsl-button-spotify[data-skin="white"] {
    color: #191414;
    box-shadow: inset 0 0 0 1px #191414;
}

div.nsl-container .nsl-button-apple div.nsl-button-label-container {
    font-size: 17px;
    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
}

div.nsl-container .nsl-button-slack div.nsl-button-label-container {
    font-size: 17px;
    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
}

div.nsl-container .nsl-button-slack[data-skin="light"] {
    color: #000000;
    box-shadow: inset 0 0 0 1px #DDDDDD;
}

div.nsl-container .nsl-button-tiktok[data-skin="light"] {
    color: #161823;
    box-shadow: 0 0 0 1px rgba(22, 24, 35, 0.12);
}


div.nsl-container .nsl-button-kakao {
    color: rgba(0, 0, 0, 0.85);
}

.nsl-clear {
    clear: both;
}

.nsl-container {
    clear: both;
}

.nsl-disabled-provider .nsl-button {
    filter: grayscale(1);
    opacity: 0.8;
}

/*Button align start*/

div.nsl-container-inline[data-align="left"] .nsl-container-buttons {
    justify-content: flex-start;
}

div.nsl-container-inline[data-align="center"] .nsl-container-buttons {
    justify-content: center;
}

div.nsl-container-inline[data-align="right"] .nsl-container-buttons {
    justify-content: flex-end;
}


div.nsl-container-grid[data-align="left"] .nsl-container-buttons {
    justify-content: flex-start;
}

div.nsl-container-grid[data-align="center"] .nsl-container-buttons {
    justify-content: center;
}

div.nsl-container-grid[data-align="right"] .nsl-container-buttons {
    justify-content: flex-end;
}

div.nsl-container-grid[data-align="space-around"] .nsl-container-buttons {
    justify-content: space-around;
}

div.nsl-container-grid[data-align="space-between"] .nsl-container-buttons {
    justify-content: space-between;
}

/* Button align end*/

/* Redirect */

#nsl-redirect-overlay {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    position: fixed;
    z-index: 1000000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    backdrop-filter: blur(1px);
    background-color: RGBA(0, 0, 0, .32);;
}

#nsl-redirect-overlay-container {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    background-color: white;
    padding: 30px;
    border-radius: 10px;
}

#nsl-redirect-overlay-spinner {
    content: '';
    display: block;
    margin: 20px;
    border: 9px solid RGBA(0, 0, 0, .6);
    border-top: 9px solid #fff;
    border-radius: 50%;
    box-shadow: inset 0 0 0 1px RGBA(0, 0, 0, .6), 0 0 0 1px RGBA(0, 0, 0, .6);
    width: 40px;
    height: 40px;
    animation: nsl-loader-spin 2s linear infinite;
}

@keyframes nsl-loader-spin {
    0% {
        transform: rotate(0deg)
    }
    to {
        transform: rotate(360deg)
    }
}

#nsl-redirect-overlay-title {
    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen-Sans, Ubuntu, Cantarell, "Helvetica Neue", sans-serif;
    font-size: 18px;
    font-weight: bold;
    color: #3C434A;
}

#nsl-redirect-overlay-text {
    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen-Sans, Ubuntu, Cantarell, "Helvetica Neue", sans-serif;
    text-align: center;
    font-size: 14px;
    color: #3C434A;
}

/* Redirect END*/</style><style type="text/css">/* Notice fallback */
#nsl-notices-fallback {
    position: fixed;
    right: 10px;
    top: 10px;
    z-index: 10000;
}

.admin-bar #nsl-notices-fallback {
    top: 42px;
}

#nsl-notices-fallback > div {
    position: relative;
    background: #fff;
    border-left: 4px solid #fff;
    box-shadow: 0 1px 1px 0 rgba(0, 0, 0, .1);
    margin: 5px 15px 2px;
    padding: 1px 20px;
}

#nsl-notices-fallback > div.error {
    display: block;
    border-left-color: #dc3232;
}

#nsl-notices-fallback > div.updated {
    display: block;
    border-left-color: #46b450;
}

#nsl-notices-fallback p {
    margin: .5em 0;
    padding: 2px;
}

#nsl-notices-fallback > div:after {
    position: absolute;
    right: 5px;
    top: 5px;
    content: '\00d7';
    display: block;
    height: 16px;
    width: 16px;
    line-height: 16px;
    text-align: center;
    font-size: 20px;
    cursor: pointer;
}</style>		<style type="text/css" id="wp-custom-css">
			.wp-block-image.has-custom-border img, .wp-block-image img {
    box-sizing: border-box;
    border: 0px solid var(--color_border) !important;
}

.hljs, .hljs-subst {
	color: lightgray;
}		</style>
		<style id="kirki-inline-styles"></style>	</head>

	<body class="post-template-default single single-post postid-6201 single-format-standard wp-embed-responsive johannes-cover-indent johannes-sidebar-none white-bg-alt-1 white-bg-alt-2 johannes-header-labels-hidden johannes-footer-margin johannes-v_1_1_3 johannes-child">

	<div class="johannes-wrapper">

	    		    
		    <header class="johannes-header johannes-header-main d-none d-lg-block">
		    	
		        <div class="header-middle header-layout-11">
    <div class="container d-flex justify-content-between align-items-center">
        <div class="slot-l">
            <div class="johannes-site-branding">
    <span class="site-title h1 "><a href="https://decoded.avast.io/" rel="home"><picture class="johannes-logo"><source media="(min-width: 1050px)" srcset="https://wordpress-salat-test.storage.googleapis.com/sites/2/2019/06/Asset-22ldpi.png, https://storage.googleapis.com/wordpress-salat-test/sites/2/2019/06/Asset-22ldpi-1.png 2x"><source srcset="https://wordpress-salat-test.storage.googleapis.com/sites/2/2019/06/Asset-22ldpi.png"><img src="https://wordpress-salat-test.storage.googleapis.com/sites/2/2019/06/Asset-22ldpi.png" alt="Avast Threat Labs"></picture></a></span></div>        </div>
		<div class="slot-r">
			<div class="slot-r-top">
									    <nav class="menu-main-menu-container"><ul id="menu-main-menu" class="johannes-menu johannes-menu-primary"><li id="menu-item-367" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-367 category-mobile"><a href="https://decoded.avast.io/category/mobile/">Mobile</a></li>
<li id="menu-item-368" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-368 category-network"><a href="https://decoded.avast.io/category/network/">Network</a></li>
<li id="menu-item-369" class="menu-item menu-item-type-taxonomy menu-item-object-category current-post-ancestor current-menu-parent current-post-parent menu-item-369 category-pc"><a href="https://decoded.avast.io/category/pc/">PC</a></li>
<li id="menu-item-370" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-370 category-iot"><a href="https://decoded.avast.io/category/iot/">IoT</a></li>
<li id="menu-item-371" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-371"><a href="https://www.avast.com/en-us/careers">Careers</a></li>
</ul></nav>																			<ul class="johannes-menu-action johannes-hamburger">
	<li><a href="javascript:void(0);"><span class="header-el-label">Menu</span><i class="jf jf-menu"></i></a></li>
</ul>
												</div>
			<div class="slot-r-bottom">
															<ul class="johannes-menu-action johannes-search">
	<li><form class="search-form" action="https://decoded.avast.io/" method="get">
	<input name="s" type="text" value="" placeholder="Type here to search..." />
		<button type="submit">Search</button>
</form>
</li>
</ul>												</div>
		</div>
    </div>
</div>		    	
		    </header>

		    <div class="johannes-header header-mobile d-lg-none">
    <div class="container d-flex justify-content-between align-items-center">
        <div class="slot-l">
            <div class="johannes-site-branding">
    <span class="site-title h1 "><a href="https://decoded.avast.io/" rel="home"><picture class="johannes-logo"><source media="(min-width: 1050px)" srcset="https://wordpress-salat-test.storage.googleapis.com/sites/2/2019/06/Asset-22ldpi.png"><source srcset="https://wordpress-salat-test.storage.googleapis.com/sites/2/2019/06/Asset-22ldpi.png"><img src="https://wordpress-salat-test.storage.googleapis.com/sites/2/2019/06/Asset-22ldpi.png" alt="Avast Threat Labs"></picture></a></span></div>        </div>
        <div class="slot-r">
            <ul class="johannes-menu-action johannes-hamburger">
	<li><a href="javascript:void(0);"><span class="header-el-label">Menu</span><i class="jf jf-menu"></i></a></li>
</ul>
        </div>
    </div>
</div>
		    
	    

            <div class="johannes-section category-pill johannes-cover johannes-bg-alt-2 johannes-section-margin-alt size-johannes-single-3">
    
                <div class="section-bg">
            <img width="1920" height="500" src="https://decoded.avast.io/wp-content/uploads/sites/2/2022/09/GettyImages-888813778_edited-1920x500.jpg" class="attachment-johannes-single-3 size-johannes-single-3 wp-post-image" alt="" />                        </div>
        
    <div class="container">
        <div class="section-head johannes-content-alt section-head-alt">
                        <h1 class="entry-title">Raspberry Robin’s Roshtyak: A Little Lesson in Trickery</h1>                            <div class="entry-meta">
                    <span class="meta-item meta-author"><span class="vcard author">by <a href="https://decoded.avast.io/author/janvojtesek/">Jan Vojtěšek</a></span></span><span class="meta-item meta-date"><span class="updated">September 22, 2022</span></span><span class="meta-item meta-rtime">46 min read</span>                </div>
                        
        </div>
    </div>
</div>


<div class="johannes-section">
    <div class="container">
        <div class="section-content row justify-content-center">
            
            
            <div class="col-12 col-lg-8 single-md-content col-md-special johannes-order-1 ">
                 
                <article id="post-6201" class="post-6201 post type-post status-publish format-standard has-post-thumbnail hentry tag-cve-2020-1054 tag-cve-2021-1732 tag-rapsberry-robin tag-roshtyak category-pc">

                    
                    
                    
                    <div class="entry-content entry-single clearfix">
                        
<p>There are various tricks malware authors use to make malware analysts’ jobs more difficult. These tricks include obfuscation techniques to complicate reverse engineering, anti-sandbox techniques to evade sandboxes, packing to bypass static detection, and more. Countless deceptive tricks used by various malware strains in-the-wild have <a href="https://anti-reversing.com/Downloads/Anti-Reversing/The_Ultimate_Anti-Reversing_Reference.pdf" target="_blank" rel="noreferrer noopener">been</a> <a href="https://evasions.checkpoint.com/" target="_blank" rel="noreferrer noopener">documented</a> over the years. However, few of these tricks are implemented in a typical piece of malware, despite the many available tricks.&nbsp;</p>



<p>The subject of this blog post, a backdoor we dubbed Roshtyak, is not your typical piece of malware. Roshtyak is full of tricks. Some are well-known, and some we have never seen before. From a technical perspective, the lengths Roshtyak takes to protect itself are extremely interesting. Roshtyak belongs to one of the best-protected malware strains we have ever seen. We hope by publishing our research and analysis of the malware and its protection tricks we will help fellow researchers recognize and respond to similar tricks, and harden their analysis environments, making them more resistant to the evasion techniques described.</p>



<p>Roshtyak is the DLL backdoor used by Raspberry Robin, a worm spreading through infected removable drives. Raspberry Robin is extremely prevalent. We protected over 550K of our users from the worm this year. Due to its high prevalence, it should be no surprise that we aren’t the only ones taking note of Raspberry Robin.&nbsp;</p>



<p>Red Canary’s researchers published <a href="https://redcanary.com/blog/raspberry-robin/" target="_blank" rel="noreferrer noopener">the first analysis</a> of Raspberry Robin in May 2022. In June, Symantec published a <a href="https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/clipminer-bitcoin-mining-hijacking" target="_blank" rel="noreferrer noopener">report</a> describing a mining/clipboard hijacking operation, which reportedly made the cybercriminals at least $1.7 million. Symantec did not link the malicious operation to Raspberry Robin. Nevertheless, we assess with high confidence that what they analyzed was Raspberry Robin. This assessment is based on C&amp;C overlaps, strong malware similarity, and coinfections observed in our telemetry. <a href="https://www.cybereason.com/blog/threat-alert-raspberry-robin-worm-abuses-windows-installer-and-qnap-devices" target="_blank" rel="noreferrer noopener">Cybereason</a>, <a href="https://www.microsoft.com/security/blog/2022/05/09/ransomware-as-a-service-understanding-the-cybercrime-gig-economy-and-how-to-protect-yourself/#DEV-0206-DEV-0243" target="_blank" rel="noreferrer noopener">Microsoft</a>, and <a href="https://blogs.cisco.com/security/raspberry-robin-highly-evasive-worm-spreads-over-external-disks" target="_blank" rel="noreferrer noopener">Cisco</a> published further reports in July/August 2022. Microsoft reported that Raspberry Robin infections led to DEV-0243 (a.k.a Evil Corp) pre-ransomware behavior. We could not confirm this connection using our telemetry. Still, we find it reasonable to believe that the miner payload is not the only way Raspberry Robin infections are being monetized. Other <a href="https://securityintelligence.com/posts/raspberry-robin-worm-dridex-malware/" target="_blank" rel="noreferrer noopener">recent</a> <a href="https://twitter.com/DTCERT/status/1565664874633564162" target="_blank" rel="noreferrer noopener">reports</a> also hint at a possible connection between Raspberry Robin and Evil Corp.</p>


<div class="wp-block-image">
<figure class="aligncenter size-large"><a href="https://decoded.avast.io/wp-content/uploads/sites/2/2022/09/map_8060_Roshtyak_31_2022-01-01—2022-08-31.png"><img decoding="async" width="1024" height="639" src="https://decoded.avast.io/wp-content/uploads/sites/2/2022/09/map_8060_Roshtyak_31_2022-01-01—2022-08-31-1024x639.png" alt="" class="wp-image-6474" srcset="https://decoded.avast.io/wp-content/uploads/sites/2/2022/09/map_8060_Roshtyak_31_2022-01-01—2022-08-31-1024x639.png 1024w, https://decoded.avast.io/wp-content/uploads/sites/2/2022/09/map_8060_Roshtyak_31_2022-01-01—2022-08-31-300x187.png 300w, https://decoded.avast.io/wp-content/uploads/sites/2/2022/09/map_8060_Roshtyak_31_2022-01-01—2022-08-31-768x479.png 768w, https://decoded.avast.io/wp-content/uploads/sites/2/2022/09/map_8060_Roshtyak_31_2022-01-01—2022-08-31-1536x958.png 1536w, https://decoded.avast.io/wp-content/uploads/sites/2/2022/09/map_8060_Roshtyak_31_2022-01-01—2022-08-31-2048x1278.png 2048w" sizes="(max-width: 1024px) 100vw, 1024px" /></a><figcaption><em>A map showing the number of users Avast protected from Raspberry Robin</em></figcaption></figure></div>


<p>There are many unknowns about Raspberry Robin, despite so many published reports. What are the ultimate objectives behind the malware? Who is responsible for Raspberry Robin? How did it become so prevalent? Unfortunately, we do not have answers to all these questions. However, we can answer an important question we saw asked multiple times: What functionality is hidden inside the heavily obfuscated DLL (or Roshtyak as we call it)? To answer this question, we fully reverse engineered <a href="https://www.virustotal.com/gui/file/1073d38346b39fb3d92f4cd814ea13d32ecf5b16c07c87560802343bd1605dfd" target="_blank" rel="noreferrer noopener">a Roshtyak sample</a>, and present our analysis results in this blog post.</p>



<h2 class="wp-block-heading">Overview</h2>



<p>Roshtyak is packed in as many as 14 protective layers, each heavily obfuscated and serving a specific purpose. Some artifacts suggest the layers were originally PE files but were transformed into custom encrypted structures that only the previous layers know how to decrypt and load. Numerous anti-debugger, anti-sandbox, anti-VM, and anti-emulator checks are sprinkled throughout the layers. If one of these checks successfully detects an analysis environment, one of four actions are taken.&nbsp;</p>



<ol class="wp-block-list"><li>The malware calls <code>TerminateProcess</code> on itself to avoid exhibiting any further malicious behavior and to keep the subsequent layers encrypted.</li><li>Roshtyak crashes on purpose. This has the same effect as terminating itself, but it might not be immediately clear if the crash was intentional or because of a bug thanks to Roshtyak&#8217;s obfuscated nature.</li><li>The malware enters an infinite loop on purpose. Since the loop itself is located in obfuscated code and spans thousands of instructions, it might be hard to determine if the loop is doing something useful or not.</li><li>The most interesting case is when the malware reacts to a successful check by unpacking and loading a fake payload. This happens in the eighth layer, which is loaded with dozens of anti-analysis checks. The result of each of these checks is used to modify the value of a global variable. There are two payloads encrypted in the data section of the eighth layer: the real ninth layer and a fake payload. The real ninth layer will get decrypted only if the global variable matches the expected value after all the checks have been performed. If at least one check succeeded in detecting an analysis environment, the global variable&#8217;s value will differ from the expected value, causing Roshtyak to unpack and execute the fake payload instead.&nbsp;</li></ol>


<div class="wp-block-image">
<figure class="aligncenter size-full is-resized"><a href="https://decoded.avast.io/wp-content/uploads/sites/2/2022/09/cfg2.png"><img decoding="async" src="https://decoded.avast.io/wp-content/uploads/sites/2/2022/09/cfg2.png" alt="" class="wp-image-6475" width="632" height="649" srcset="https://decoded.avast.io/wp-content/uploads/sites/2/2022/09/cfg2.png 842w, https://decoded.avast.io/wp-content/uploads/sites/2/2022/09/cfg2-292x300.png 292w, https://decoded.avast.io/wp-content/uploads/sites/2/2022/09/cfg2-768x789.png 768w" sizes="(max-width: 632px) 100vw, 632px" /></a><figcaption><em>Roshtyak’s obfuscation causes even relatively simple functions to grow into large proportions. This necessitates some custom deobfuscation tooling if one wants to reverse engineer it within a reasonable timeframe.</em></figcaption></figure></div>


<p>The fake payload is a BroAssist (a.k.a BrowserAssistant) adware <a href="https://www.virustotal.com/gui/file/b74d7ff45768a1ee6f267e895de3e46cca505edf205563ef3f7db827f38363b3" target="_blank" rel="noreferrer noopener">sample</a>. We believe this fake payload was intended to mislead malware analysts into thinking the sample is less interesting than it really is. When a reverse engineer focuses on quickly unpacking a sample, it might look like the whole sample is &#8220;just&#8221; an obfuscated piece of adware (and a very old one at that), which could cause the analyst to lose interest in digging deeper. And indeed, it turns out that these fake payload shenanigans can be very effective. As can be seen on the screenshot below, it fooled at least one researcher, who misattributed the Raspberry Robin worm, because of the fake BrowserAssistant payload.</p>


<div class="wp-block-image">
<figure class="aligncenter size-large"><a href="https://decoded.avast.io/wp-content/uploads/sites/2/2022/09/vt.png"><img loading="lazy" decoding="async" width="1024" height="404" src="https://decoded.avast.io/wp-content/uploads/sites/2/2022/09/vt-1024x404.png" alt="" class="wp-image-6476" srcset="https://decoded.avast.io/wp-content/uploads/sites/2/2022/09/vt-1024x404.png 1024w, https://decoded.avast.io/wp-content/uploads/sites/2/2022/09/vt-300x118.png 300w, https://decoded.avast.io/wp-content/uploads/sites/2/2022/09/vt-768x303.png 768w, https://decoded.avast.io/wp-content/uploads/sites/2/2022/09/vt.png 1270w" sizes="(max-width: 1024px) 100vw, 1024px" /></a><figcaption><em>A security researcher misattributing Raspberry Robin because of the fake payload. This is not to pick on anyone, we just want to show how easy it is to make a mistake like this given Roshtyak’s trickery and complexity.</em></figcaption></figure></div>


<h2 class="wp-block-heading">The Bag of Tricks</h2>



<p>For the sake of keeping this blog post (sort of) short and to the point, let&#8217;s get straight into detailing some of the more interesting evasion techniques employed by Roshtyak.</p>



<h4 class="wp-block-heading">Segment registers</h4>



<p>Early in the execution, Roshtyak prefers to use checks that do not require calling any imported functions. If one of these checks is successful, the sample can quietly exit without generating any suspicious API calls. Below is an example where Roshtyak checks the behavior of the <code>gs</code> segment register. The check is designed to be stealthy and the surrounding garbage instructions make it easy to overlook.</p>


<div class="wp-block-image">
<figure class="aligncenter size-full"><a href="https://decoded.avast.io/wp-content/uploads/sites/2/2022/09/gs.png"><img loading="lazy" decoding="async" width="225" height="467" src="https://decoded.avast.io/wp-content/uploads/sites/2/2022/09/gs.png" alt="" class="wp-image-6477" srcset="https://decoded.avast.io/wp-content/uploads/sites/2/2022/09/gs.png 225w, https://decoded.avast.io/wp-content/uploads/sites/2/2022/09/gs-145x300.png 145w" sizes="(max-width: 225px) 100vw, 225px" /></a><figcaption><em>A stealthy detection of single-stepping. Only the underscored instructions are useful.</em></figcaption></figure></div>


<p>The first idea behind this check is to detect single-stepping. Before the above snippet, the value of <code>cx</code> was initialized to <code>2</code>. After the <code>pop ecx</code> instruction, Roshtyak checks if <code>cx</code> is still equal to <code>2</code>. This would be the expected behavior because this value should propagate through the stack and the <code>gs</code> register under normal circumstances. However, a single step event would reset the value of the <code>gs</code> selector, which would result in a different value getting popped into <code>ecx</code> at the end.</p>



<p>But there is more to this check. As a side effect of the two push/pop pairs above, the value of <code>gs</code> is temporarily changed to <code>2</code>. After this check, Roshtyak enters a loop, counting the number of iterations until the value of <code>gs</code> is no longer <code>2</code>. The <code>gs</code> selector is also reset after a thread context switch, so the loop essentially counts the number of iterations until a context switch happens. Roshtyak repeats this procedure multiple times, averages out the result, and checks that it belongs to a sensible range for a bare metal execution environment. If the sample runs under a hypervisor or in an emulator, the average number of iterations might fall outside of this range, which allows Roshtyak to detect undesirable execution environments.</p>



<p>Roshtyak also checks that the value of the <code>cs</code> segment register is either <code>0x1b</code> or <code>0x23</code>. Here, <code>0x1b</code> is the expected value when running on native x86 Windows, while <code>0x23</code> is the expected value under WoW64.</p>



<h4 class="wp-block-heading" id="ntdll_gadgets">APC injection through a random ntdll gadget</h4>



<p>Roshtyak performs some of its functionality from separate processes. For example, when it communicates with its C&amp;C server, it spawns a new innocent-looking process like <code>regsvr32.exe</code>. Using shared sections, it injects its comms module into the address space of the new process. The injected module is executed via APC injection, using <code>NtQueueApcThreadEx</code>.</p>



<p>Interestingly, the <code>ApcRoutine</code> argument (which marks the target routine to be scheduled for execution) does not point to the entry point of the injected module. Instead, it points to a seemingly random address inside <code>ntdll</code>. Taking a closer look, we see this address was not chosen randomly but that Roshtyak scanned the code section of <code>ntdll</code> for <code>pop r32; ret</code> gadgets (excluding <code>pop esp</code>, because pivoting the stack would be undesirable) and picked one at random to use as the <code>ApcRoutine</code>.&nbsp;</p>


<div class="wp-block-image">
<figure class="aligncenter size-full"><a href="https://decoded.avast.io/wp-content/uploads/sites/2/2022/09/pop_ret.png"><img loading="lazy" decoding="async" width="693" height="468" src="https://decoded.avast.io/wp-content/uploads/sites/2/2022/09/pop_ret.png" alt="" class="wp-image-6478" srcset="https://decoded.avast.io/wp-content/uploads/sites/2/2022/09/pop_ret.png 693w, https://decoded.avast.io/wp-content/uploads/sites/2/2022/09/pop_ret-300x203.png 300w" sizes="(max-width: 693px) 100vw, 693px" /></a><figcaption><em>A random <code>pop r32; ret</code> gadget used as the entry point for APC injection</em></figcaption></figure></div>


<p>Looking at the calling convention for the <code>ApcRoutine</code> reveals what’s going on. The <code>pop</code> instruction makes the stack pointer point to the <code>SystemArgument1</code> parameter of <code>NtQueueApcThreadEx</code> and so the <code>ret</code> instruction effectively jumps to wherever <code>SystemArgument1</code> is pointing. This means that by abusing this gadget, Roshtyak can treat <code>SystemArgument1</code> as the entry point for the purpose of APC injection. This obfuscates the control flow and makes the <code>NtQueueApcThreadEx</code> call look more legitimate. If someone hooks this function and inspects the <code>ApcRoutine</code> argument, the fact that it is pointing into the <code>ntdll</code> code section might be enough to convince them that the call is not malicious.</p>



<h4 class="wp-block-heading">Checking read/write performance on write-combined memory</h4>



<p>In this next check, Roshtyak allocates a large memory buffer with the <a href="https://docs.microsoft.com/en-us/windows/win32/memory/memory-protection-constants#:~:text=the%20CreateFileMapping%20function.-,PAGE_WRITECOMBINE,-0x400" target="_blank" rel="noreferrer noopener">PAGE_WRITECOMBINE</a> flag. This flag is supposed to modify cache behavior to optimize sequential write performance (at the expense of read performance and possibly memory ordering). Roshtyak uses this to detect if it’s running on a physical machine. It conducts an experiment where it first writes to the allocated buffer and then reads from the allocated buffer, all while measuring the read/write performance using a separate thread as a counter. This experiment is repeated 32 times and the check is passed only if write performance was at least six times higher than read performance most of the times. If the check fails, Roshtyak intentionally selects a wrong RC4 key, which results in failing to properly decrypt the next layer.</p>



<h4 class="wp-block-heading" id="shellcode_hiding">Hiding shellcode from plain sight</h4>



<p>The injected shellcode is interestingly hidden, too. When Roshtyak prepares for code injection, it first creates a large section and maps it into the current process as <code>PAGE_READWRITE</code>. Then, it fills the section with random data and places the shellcode at a random offset within the random data. Since the shellcode is just a relatively small loader followed by random-looking packed data, the whole section looks like random data.&nbsp;</p>


<div class="wp-block-image">
<figure class="aligncenter size-large"><a href="https://decoded.avast.io/wp-content/uploads/sites/2/2022/09/injected_section_histogram.png"><img loading="lazy" decoding="async" width="1024" height="571" src="https://decoded.avast.io/wp-content/uploads/sites/2/2022/09/injected_section_histogram-1024x571.png" alt="" class="wp-image-6479" srcset="https://decoded.avast.io/wp-content/uploads/sites/2/2022/09/injected_section_histogram-1024x571.png 1024w, https://decoded.avast.io/wp-content/uploads/sites/2/2022/09/injected_section_histogram-300x167.png 300w, https://decoded.avast.io/wp-content/uploads/sites/2/2022/09/injected_section_histogram-768x428.png 768w, https://decoded.avast.io/wp-content/uploads/sites/2/2022/09/injected_section_histogram.png 1213w" sizes="(max-width: 1024px) 100vw, 1024px" /></a><figcaption><em>A histogram of the bytes inside the shared section. Note that it looks almost random, the most suspicious sign is the slight overrepresentation of null bytes.</em></figcaption></figure></div>


<p>The section is then unmapped from the current process and mapped into the target process, where it is executed using the above-described APC injection technique. The random data was added in an attempt to conceal the existence of the shellcode. Judging only from the memory dump of the target process, it might look like the section is full of random data and does not contain any valid executable code. Even if one suspects actual valid code somewhere in the middle of the section, it will not be easy to find its exact location.&nbsp;</p>


<div class="wp-block-image">
<figure class="aligncenter size-full"><a href="https://decoded.avast.io/wp-content/uploads/sites/2/2022/09/shellcode_start.png"><img loading="lazy" decoding="async" width="433" height="376" src="https://decoded.avast.io/wp-content/uploads/sites/2/2022/09/shellcode_start.png" alt="" class="wp-image-6480" srcset="https://decoded.avast.io/wp-content/uploads/sites/2/2022/09/shellcode_start.png 433w, https://decoded.avast.io/wp-content/uploads/sites/2/2022/09/shellcode_start-300x261.png 300w" sizes="(max-width: 433px) 100vw, 433px" /></a><figcaption><em>The start of the shellcode within the shared section. It might be hard to pinpoint the exact start address because it unconventionally starts on an odd <code>bt</code> instruction.</em></figcaption></figure></div>


<h4 class="wp-block-heading">Ret2Kernel32</h4>



<p>Roshtyak makes a point of cleaning up after itself. Whenever a certain string or piece of memory is no longer needed, Roshtyak wipes and/or frees it in an attempt to destroy as much evidence as possible. The same holds for Roshtyak’s layers. Whenever one layer finishes its job, it frees itself before passing execution onto the next layer. However, the layer cannot just simply free itself directly. The whole process would crash if it called <code>VirtualFree</code> on the region of memory it’s currently executing from.</p>



<p>Roshtyak, therefore, frees the layer through a ROP chain executed during layer transitions to avoid this problem. When a layer is about to exit, it constructs a ROP chain on the stack and returns into it. An example of such a ROP chain can be seen below. This chain starts by returning into <code>VirtualFree</code> and <code>UnmapViewOfFile</code> to release the previous layer’s memory. Then, it returns into the next layer. The return address from the next layer is set to <code>RtlExitUserThread</code>, to safeguard execution.</p>


<div class="wp-block-image">
<figure class="aligncenter size-full"><a href="https://decoded.avast.io/wp-content/uploads/sites/2/2022/09/rop_chain.png"><img loading="lazy" decoding="async" width="767" height="180" src="https://decoded.avast.io/wp-content/uploads/sites/2/2022/09/rop_chain.png" alt="" class="wp-image-6481" srcset="https://decoded.avast.io/wp-content/uploads/sites/2/2022/09/rop_chain.png 767w, https://decoded.avast.io/wp-content/uploads/sites/2/2022/09/rop_chain-300x70.png 300w" sizes="(max-width: 767px) 100vw, 767px" /></a><figcaption>A simple ROP chain consisting of <code>VirtualFree</code> -&gt; <code>UnmapViewOfFile</code> -&gt; next layer -&gt; <code>RtlExitUserThread</code></figcaption></figure></div>


<h4 class="wp-block-heading">MulDiv bug</h4>



<p><a href="https://docs.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-muldiv" target="_blank" rel="noreferrer noopener">MulDiv</a> is a function exported by <code>kernel32.dll</code>, which takes three signed 32-bit integers as arguments. It multiplies the first two arguments, divides the multiplication result by the third argument, and returns the final result rounded to the nearest integer. While this might seem like a simple enough function, there’s an ancient sign extension <a href="https://devblogs.microsoft.com/oldnewthing/20120514-00/?p=7633" target="_blank" rel="noreferrer noopener">bug</a> in Microsoft&#8217;s implementation. This bug is sort of considered a feature now and might never get fixed.</p>



<p>Roshtyak is aware of the bug and tests for its presence by calling <code>MulDiv(1, 0x80000000, 0x80000000)</code>. On real Windows machines, this triggers the bug and <code>MulDiv</code> erroneously returns <code>2</code>, even though the correct return value should be <code>1</code>, because <code>(1 * -2147483648) / -2147483648 = 1</code>. This allows Roshtyak to detect emulators that do not replicate the bug. For example, this successfully detects <a href="https://www.winehq.org/" target="_blank" rel="noreferrer noopener">Wine</a>, which, funnily enough, contains a different bug, which makes the above call return <code>0</code>.</p>



<h4 class="wp-block-heading">Tampering with return addresses stored on the stack</h4>



<p>There are also tricks designed to obfuscate function calls. As shown in the previous section, Roshtyak likes to call functions using the <code>ret</code> instruction. This next trick is similar in that it also manipulates the stack so a <code>ret</code> instruction can be used to jump to the desired address.&nbsp;</p>



<p>To achieve this, Roshtyak scans the current thread’s stack for pointers into the code section of one of the previous layers (unlike the other layers, this one was not freed using the ROP chain technique). It replaces all these pointers with the address it wants to call. Then it lets the code return multiple times until a <code>ret</code> instruction encounters one of the hijacked pointers, redirecting the execution to the desired address.</p>



<h4 class="wp-block-heading">Exception-based checks</h4>



<p>Additionally, Roshtyak contains checks that set up a custom vectored exception handler and intentionally trigger various exceptions to ensure they all get handled as expected.</p>



<p>Roshtyak sets up a vectored exception handler using <code>RtlAddVectoredExceptionHandler</code>. This handler contains custom handlers for selected exception codes. A top-level exception handler is also registered using <code>SetUnhandledExceptionFilter</code>. This handler should not be called in the targeted execution environments (none of the intentionally triggered exceptions should fall through the vectored exception handler). So this top-level handler just contains a single call to <code>TerminateProcess</code>. Interestingly, Roshtyak also uses <code>ZwSetInformationProcess</code> to set <code>SEM_FAILCRITICALERRORS</code> using the <code>ProcessDefaultHardErrorMode</code> class. This ensures that even if the exception somehow is passed all the way to the default exception handler, Windows would not show the standard error message box, which could alert the victim that something suspicious is going on.</p>



<p>When everything is set up, Roshtyak begins generating exceptions. The first exception is generated by a <code>popf</code> instruction, directly followed by a <code>cpuid</code> instruction (shown below). The value popped by the <code>popf</code> instruction was crafted to set the trap flag, which should, in turn, raise a single-step exception. On a physical machine, the exception would trigger right after the <code>cpuid</code> instruction. Then, the custom vectored exception handler would take over and move the instruction pointer away from the <code>C7 B2</code> opcodes, which mark an invalid instruction. However, under many hypervisors, the single-step exception would not be raised. This is because the <code>cpuid</code> instruction forces a VM exit, which might delay the effect of the trap flag. If that is the case, the processor will raise an illegal instruction exception when trying to execute the invalid opcodes. If the vectored exception handler encounters such an exception, it knows that it is running under a hypervisor. A variation of this technique is described thoroughly in a <a href="https://unit42.paloaltonetworks.com/single-bit-trap-flag-intel-cpu/" target="_blank" rel="noreferrer noopener">blog post</a> by Palo Alto Networks. Please refer to it for more details.&nbsp;</p>


<div class="wp-block-image">
<figure class="aligncenter size-full"><a href="https://decoded.avast.io/wp-content/uploads/sites/2/2022/09/popf_cpuid.png"><img loading="lazy" decoding="async" width="621" height="374" src="https://decoded.avast.io/wp-content/uploads/sites/2/2022/09/popf_cpuid.png" alt="" class="wp-image-6482" srcset="https://decoded.avast.io/wp-content/uploads/sites/2/2022/09/popf_cpuid.png 621w, https://decoded.avast.io/wp-content/uploads/sites/2/2022/09/popf_cpuid-300x181.png 300w" sizes="(max-width: 621px) 100vw, 621px" /></a><figcaption>The exception-based check using <code>popf</code> and <code>cpuid</code> to detect hypervisors</figcaption></figure></div>


<p>Another exception is generated using the two-byte <code>int 3</code> instruction (<code>CD 03</code>). This instruction is followed by garbage opcodes. The <code>int 3</code> here raises a breakpoint exception, which is handled by the vectored exception handler. The vectored exception handler doesn’t really do anything to handle the exception, which is interesting. This is because by default, when Windows handles the two-byte <code>int 3</code> instruction, it will leave the instruction pointer in between the two instruction bytes, pointing to the <code>03</code> byte. When disassembled from this <code>03</code> byte, the garbage opcodes suddenly start making sense. We believe this is a check against some overeager debuggers, which could “fix” the instruction pointer to point after the <code>03</code> byte.</p>



<p>Moreover, the vectored exception handler checks the thread’s <code>CONTEXT</code> and makes sure that registers <code>Dr0</code> through <code>Dr3</code> are empty. If they are not, the process is being debugged using hardware breakpoints. While this check is relatively common in malware, the <code>CONTEXT</code> is usually obtained using a call to a function like <code>GetThreadContext</code>. Here, the malware authors took advantage of <code>CONTEXT</code> being passed as an argument to the exception handler, so they did not need to call any additional API functions.</p>



<h4 class="wp-block-heading">Large executable mappings</h4>



<p>This next check is interesting mostly because we are not sure what it’s really supposed to check (in other words, we’d be happy to hear your theories!). It starts with Roshtyak creating a large <code>PAGE_EXECUTE_READWRITE</code> mapping of size <code>0x386F000</code>. Then it maps this mapping nine times into its own address space. After this, it memsets the mapping to 0x42 (opcode for <code>inc edx</code>), except for the last six bytes, which are filled with four <code>inc ecx</code> instructions and <code>jmp dword ptr [ecx]</code> (see below). Next, it puts the nine base addresses of the mapped views into an array, followed by an address of a single <code>ret</code> instruction. Finally, it points <code>ecx</code> into this array and calls the first mapped view, which results in all the mapped views being called sequentially until the final <code>ret</code> instruction. After the return, Roshtyak validates that <code>edx</code> got incremented exactly <code>0x1FBE6FCA</code> times (<code>9 * (0x386F000 - 6)</code>).</p>


<div class="wp-block-image">
<figure class="aligncenter size-full"><a href="https://decoded.avast.io/wp-content/uploads/sites/2/2022/09/large_mappings.png"><img loading="lazy" decoding="async" width="600" height="378" src="https://decoded.avast.io/wp-content/uploads/sites/2/2022/09/large_mappings.png" alt="" class="wp-image-6483" srcset="https://decoded.avast.io/wp-content/uploads/sites/2/2022/09/large_mappings.png 600w, https://decoded.avast.io/wp-content/uploads/sites/2/2022/09/large_mappings-300x189.png 300w" sizes="(max-width: 600px) 100vw, 600px" /></a><figcaption><em>The end of the large mapped section. The <code>jmp dword ptr [ecx]</code> instruction is supposed to jump to the start of the next mapped view.</em></figcaption></figure></div>


<p>Our best guess is that this is yet another anti-emulator check. For example, in some emulators, mapped sections might not be fully implemented, so the instructions written into one instance of the mapped view might not propagate to the other eight instances. Another theory is the check could be done to request large amounts of memory that emulators might fail to provide. After all, the combined size of all the views is almost half of the standard 32-bit user mode address space.</p>



<h4 class="wp-block-heading">Detecting process suspension</h4>



<p>This trick abuses an undocumented thread creation flag in <code>NtCreateThreadEx</code> to detect when Roshtyak’s main process gets externally suspended (which could mean that a debugger got attached). This flag essentially allows a thread to keep running even when <code>PsSuspendProcess</code> gets called. This is coupled with another trick abusing the fact that the thread suspend counter is a signed 8-bit value, which means that it maxes out at 127. Roshtyak spawns two threads, one of which keeps suspending the other one until the suspend counter limit is reached. After this, the first thread keeps periodically suspending the other one and checking if the call to <code>NtSuspendThread</code> keeps failing with <code>STATUS_SUSPEND_COUNT_EXCEEDED</code>. If it does not, the thread must have been externally suspended and resumed (which would leave the suspend counter at 126, so the next call to <code>NtSuspendThread</code> would succeed). Not getting this error code would be suspicious enough for Roshtyak to quit using <code>TerminateProcess</code>. This entire technique is described in more detail in a <a href="https://secret.club/2021/01/04/thread-stuff.html" target="_blank" rel="noreferrer noopener">blog post</a> by Secret Club. We believe that’s where the authors of Roshtyak got this trick from. It’s also worth mentioning Roshtyak uses this technique only on Windows builds 18323 (19H1) and later because the undocumented thread creation flag was not implemented on prior builds.</p>



<h4 class="wp-block-heading" id="indirect_registry">Indirect registry writes</h4>



<p>Roshtyak performs many suspicious registry operations, for example, setting up the <code>RunOnce</code> key for persistence. Since modifications to such keys are likely to be monitored, Roshtyak attempts to circumvent the monitoring. It first generates a random registry key name and temporarily renames the <code>RunOnce</code> key to the random name using <code>ZwRenameKey</code>. Once renamed, Roshtyak adds a new persistence entry to the temporary key before finally renaming it back to <code>RunOnce</code>. This method of writing to the registry can be easily detected, but it might bypass some simple hooking-based monitoring methods.</p>



<p>Similarly, there are multiple methods Roshtyak uses to delete files. Aside from the apparent call to <code>NtDeleteFile</code>, Roshtyak is able to effectively delete a file by setting <code>FileDispositionInformation</code> or <code>FileRenameInformation</code> in a call to <code>ZwSetInformationFile</code>. However, unlike the registry modification method, this doesn’t seem to be implemented in order to evade detection. Instead, Roshtyak will try these alternative methods if the initial call to <code>NtDelete</code> file fails.&nbsp;</p>



<h4 class="wp-block-heading">Checking VBAWarnings</h4>



<p>The <code>VBAWarnings</code> registry value controls how Microsoft Office behaves when a user opens a document containing embedded VBA macros. If this value is <code>1</code> (meaning “Enable all macros”), macros are executed by default, even without the need for any user interaction. This is a common setting for sandboxes, which are designed to detonate maldocs automatically. On the other hand, this setting is uncommon for regular users, who generally don’t go around changing random settings to make themselves more vulnerable (at least most of them don’t). Roshtyak therefore uses this check to differentiate between sandboxes and regular users and refuses to run further if the value of <code>VBAWarnings</code> is <code>1</code>. Interestingly, this means that users, who for whatever reason have lowered their security this way, are immune to Roshtyak.</p>



<h4 class="wp-block-heading">Command line wiping</h4>



<p>Roshtyak’s core is executed with very suspicious command lines, such as <code>RUNDLL32.EXE SHELL32.DLL,ShellExec_RunDLL REGSVR32.EXE -U /s "C:\Users\&lt;REDACTED&gt;\AppData\Local\Temp\dpcw.etl."</code>. These command lines don’t look particularly legitimate, so Roshtyak attempts to hide them during execution. It does this by wiping command line information collected from various sources. It starts by calling <code>GetCommandLineA</code> and <code>GetCommandLineW</code> and wiping both of the returned strings. Then it attempts to wipe the string pointed to by <code>PEB-&gt;ProcessParameters-&gt;CommandLine</code> (even if this points to a string that has already been wiped). Since Roshtyak is often running under WoW64, it also calls <code>NtWow64QueryInformationProcess64</code> to obtain a pointer to <code>PEB64</code> to wipe <code>ProcessParameters-&gt;CommandLine</code> obtained by traversing this “second” PEB. While the wiping of the command lines was probably meant to make Roshtyak look more legitimate, the complete absence of any command line is also highly unusual. This was noticed by the Red Canary researchers in their <a href="https://redcanary.com/blog/raspberry-robin/" target="_blank" rel="noreferrer noopener">blog post</a>, where they proposed a detection method based on these suspiciously empty command lines.</p>


<div class="wp-block-image">
<figure class="aligncenter size-full"><a href="https://decoded.avast.io/wp-content/uploads/sites/2/2022/09/cmdline_wiped.png"><img loading="lazy" decoding="async" width="394" height="246" src="https://decoded.avast.io/wp-content/uploads/sites/2/2022/09/cmdline_wiped.png" alt="" class="wp-image-6484" srcset="https://decoded.avast.io/wp-content/uploads/sites/2/2022/09/cmdline_wiped.png 394w, https://decoded.avast.io/wp-content/uploads/sites/2/2022/09/cmdline_wiped-300x187.png 300w" sizes="(max-width: 394px) 100vw, 394px" /></a><figcaption><em>Roshtyak’s core process, as shown by Process Explorer. Note the suspiciously empty command line.</em></figcaption></figure></div>


<h4 class="wp-block-heading">Additional tricks</h4>



<p>Aside from the techniques described so far, Roshtyak uses many less sophisticated tricks that are commonly found in other malware as well. These include:</p>



<ul class="wp-block-list"><li>Hiding threads using <code>ThreadHideFromDebugger</code> (and verifying that the threads really got hidden using <code>NtQueryInformationThread</code>)</li><li>Patching <code>DbgBreakPoint</code> in <code>ntdll</code></li><li>Detecting user inactivity using <code>GetLastInputInfo</code></li><li>Checking fields from PEB (<code>BeingDebugged</code>, <code>NtGlobalFlag</code>)</li><li>Checking fields from <code>KUSER_SHARED_DATA</code> (<code>KdDebuggerEnabled</code>, <code>ActiveProcessorCount</code>, <code>NumberOfPhysicalPages</code>)</li><li>Checking the names of all running processes (some are compared by hash, some by patterns, and some by character distribution)</li><li>Hashing the names of all loaded modules and checking them against a hardcoded blacklist</li><li>Verifying the main process name is not too long and doesn’t match known names used in sandboxes</li><li>Using the <code>cpuid</code> instruction to check hypervisor information and the processor brand</li><li>Using poorly documented COM interfaces</li><li>Checking the username and computername against a hardcoded blacklist</li><li>Checking for the presence of known sandbox decoy files</li><li>Checking MAC addresses of own adapters against a hardcoded blacklist</li><li>Checking MAC addresses from the ARP table (using <code>GetBestRoute</code> to populate it and <code>GetIpNetTable</code> to inspect it)</li><li>Calling <code>ZwQueryInformationProcess</code> with <code>ProcessDebugObjectHandle</code>, <code>ProcessDebugFlags</code>, and <code>ProcessDebugPort</code></li><li>Checking <code>DeviceId</code> of display devices (using <code>EnumDisplayDevices</code>)</li><li>Checking <code>ProductId</code> of <code>\\.\PhysicalDrive0</code> (using <code>IOCTL_STORAGE_QUERY_PROPERTY</code>)</li><li>Checking for virtual hard disks (using <code>NtQuerySystemInformation</code> with <code>SystemVhdBootInformation</code>)</li><li>Checking the raw SMBIOS firmware table (using <code>NtQuerySystemInformation</code> with <code>SystemFirmwareTableInformation</code>)</li><li>Setting up Defender exclusions (both for paths and processes)</li><li>Removing IFEO registry keys related to process names used by the malware</li></ul>



<h2 class="wp-block-heading">Obfuscation</h2>



<p>We’ve shown many anti-analysis tricks that are designed to prevent Roshtyak from detonating in undesirable execution environments. These tricks alone would be easy to patch or bypass. What makes analyzing Roshtyak especially lethal is the combination of all these tricks with heavy obfuscation and multiple layers of packing. This makes it very difficult to study the anti-analysis tricks statically and figure out how to pass all the checks in order to get Roshtyak to unpack itself. Furthermore, even the main payload received the same obfuscation, which means that statically analyzing Roshtyak’s core functionality also requires a great deal of deobfuscation.&nbsp;</p>



<p>In the rest of this section, we’ll go through the main obfuscation techniques used by Roshtyak.</p>


<div class="wp-block-image">
<figure class="aligncenter size-full"><a href="https://decoded.avast.io/wp-content/uploads/sites/2/2022/09/obfuscation_example.png"><img loading="lazy" decoding="async" width="707" height="480" src="https://decoded.avast.io/wp-content/uploads/sites/2/2022/09/obfuscation_example.png" alt="" class="wp-image-6485" srcset="https://decoded.avast.io/wp-content/uploads/sites/2/2022/09/obfuscation_example.png 707w, https://decoded.avast.io/wp-content/uploads/sites/2/2022/09/obfuscation_example-300x204.png 300w" sizes="(max-width: 707px) 100vw, 707px" /></a><figcaption><em>A random code snippet from Roshtyak. As can be seen, the obfuscation makes the raw output of the Hex-Rays decompiler practically incomprehensible.</em></figcaption></figure></div>


<h4 class="wp-block-heading">Control flow flattening</h4>



<p>Control flow flattening is one of the most noticeable obfuscation techniques employed by Roshtyak. It is implemented in an unusual way, giving the control flow graphs of Roshtyak’s functions a unique look (see below). The goal of control flow flattening is to obscure control flow relations between individual code blocks.&nbsp;</p>



<p>Control flow is directed by a 32-bit control variable, which tracks the execution state, identifying the code block to be executed. This control variable is initialized at the start of each function to refer to the starting code block (which is frequently a <code>nop</code> block). The control variable is then modified at the end of each code block to identify the next code block that should be executed. The modification is performed using some arithmetic instructions, such as <code>add</code>, <code>sub</code>, or <code>xor</code>.</p>



<p>There is a dispatcher using the control variable to route execution into the correct code block. This dispatcher is made up of if/else blocks that are circularly linked into a loop. Each dispatcher block takes the control variable and masks it using arithmetic instructions to check if it should route execution into the code block that it is guarding. What’s interesting here is there are multiple points of entry from the code blocks into the dispatcher loop, giving the control flow graphs the jagged “sawblade” look in IDA.&nbsp;</p>



<p>Branching is performed using a special code block containing an <code>imul</code> instruction. It relies on the previous block to compute a branch flag. This branch flag is multiplied using the <code>imul</code> instruction with a random constant, and the result is added, subbed, or xored to the new control variable. This means that after the branch block, the control variable will identify one of the two possible succeeding code blocks, depending on the value that was computed for the branch flag.</p>


<div class="wp-block-image">
<figure class="aligncenter size-full is-resized"><a href="https://decoded.avast.io/wp-content/uploads/sites/2/2022/09/flattening_graph.png"><img loading="lazy" decoding="async" src="https://decoded.avast.io/wp-content/uploads/sites/2/2022/09/flattening_graph.png" alt="" class="wp-image-6486" width="623" height="668" srcset="https://decoded.avast.io/wp-content/uploads/sites/2/2022/09/flattening_graph.png 830w, https://decoded.avast.io/wp-content/uploads/sites/2/2022/09/flattening_graph-279x300.png 279w, https://decoded.avast.io/wp-content/uploads/sites/2/2022/09/flattening_graph-768x824.png 768w" sizes="(max-width: 623px) 100vw, 623px" /></a><figcaption>Control flow graph of a function obfuscated using control flow flattening</figcaption></figure></div>


<h4 class="wp-block-heading">Function activation keys</h4>



<p>Roshtyak’s obfuscated functions expect an extra argument, which we call an <em>activation key</em>. This activation key is used to decrypt all local constants, strings, variables, etc. If a function is called with a wrong activation key, the decryption results in garbage plaintext, which will most likely cause Roshtyak to get stuck in an infinite loop inside the control flow dispatcher. This is because all constants used by the dispatcher (the initial value of the control variable, the masks used by the dispatcher guards, and the constants used to jump to the next code block) are encrypted with the activation key. Without the correct activation key, the dispatcher simply does not know how to dispatch.</p>



<p>Reverse engineering a function is practically impossible without knowing the correct activation key. All strings, buffers, and local variables/constants remain encrypted, all cross-references are lost, and worse, there is no control flow information. Only individual code blocks remain, with no way to know how they relate to each other.</p>



<p>Each obfuscated function has to be called from somewhere, which means the code calling the function has to supply the correct activation key. However, obtaining the activation key is not that easy. First, call targets are also encrypted with activation keys, so it’s impossible to find where a function is called from without knowing the right activation keys. Second, even the supplied activation key is encrypted with the activation key of the calling function. And that activation key got encrypted with the activation key of the next calling function. And so on, recursively, all the way until the entry point function.</p>



<p>This brings us to how to deobfuscate the mess. The activation key of the entry point function must be there in plaintext. Using this activation key, it is possible to decrypt the call targets and activation keys of functions that are called directly from this entry point function. Applying this method recursively allows us to reconstruct the full call graph along with the activation keys of all the functions. The only exceptions would be functions that were never called and were left in by the compiler. These functions will probably remain a mystery, but since the sample does not use them, they are not that important from a malware analyst’s point of view.</p>



<h4 class="wp-block-heading">Variable masking</h4>



<p>Some variables are not stored in plaintext form but are masked using one or more arithmetic instructions. This means that if Roshtyak is not actively using a variable, it keeps the variable’s value in an obfuscated form. Whenever Roshtyak needs to use the variable, it has to first unmask it before it can use it. Conversely, after Roshtyak uses the variable, it converts it back into the masked form. This masking-based obfuscation method slightly complicates tracking variables during debugging and makes it harder to search memory for a known variable value.</p>



<h4 class="wp-block-heading">Loop transformations</h4>



<p>Roshtyak is creative with some loop conditions. Instead of writing a loop like <code>for (int i = 0; i &lt; 1690; i++)</code>, it transforms the loop into e.g. <code>for (int32_t i = 0x06AB91EE; i != 0x70826068; i = i * -0x509FFFF + 0xEC891BB1)</code>. While both loops will execute exactly 1690 times, the second one is much harder to read. At first glance, it is not clear how many iterations the second loop executes (and if it even terminates). Tracking the number of loop iterations during debugging is also much harder in the second case.</p>



<h4 class="wp-block-heading">Packing</h4>



<p>As mentioned, Roshtyak’s core is hidden behind multiple layers of packing. While all the layers look like they were originally compiled into PE files, all but the strictly necessary data (entry point, sections, imports, and relocations) were stripped away. Furthermore, Roshtyak supports two custom formats for storing the stripped PE file information, and the layers take turns on what format they use. Additionally, parts of the custom formats are encrypted, sometimes using keys generated based on the results of various anti-analysis checks.</p>



<p>This makes it difficult to unpack Roshtyak’s layers statically into a standalone PE file. First, one would have to reverse engineer the custom formats and figure out how to decrypt the encrypted parts. Then, one would have to reconstruct the PE header, the sections, the section headers, and the import table (the relocation table doesn&#8217;t need to be reconstructed since relocations can just be turned off). While this is all perfectly doable (and can be simplified using libraries like <a href="https://lief-project.github.io/" target="_blank" rel="noreferrer noopener">LIEF</a>), it might take a significant amount of time. Adding to this that the layers are sometimes interdependent, it might be easier to just analyze Roshtyak dynamically in memory.</p>


<div class="wp-block-image">
<figure class="aligncenter size-full"><a href="https://decoded.avast.io/wp-content/uploads/sites/2/2022/09/first_section.png"><img loading="lazy" decoding="async" width="883" height="290" src="https://decoded.avast.io/wp-content/uploads/sites/2/2022/09/first_section.png" alt="" class="wp-image-6487" srcset="https://decoded.avast.io/wp-content/uploads/sites/2/2022/09/first_section.png 883w, https://decoded.avast.io/wp-content/uploads/sites/2/2022/09/first_section-300x99.png 300w, https://decoded.avast.io/wp-content/uploads/sites/2/2022/09/first_section-768x252.png 768w" sizes="(max-width: 883px) 100vw, 883px" /></a><figcaption><em>A section header in one of the custom PE-like file formats: <code>raw_size</code> corresponds to <code>SizeOfRawData</code>, <code>raw_size + virtual_padding_size</code> is effectively <code>VirtualSize</code>. There is no <code>VirtualAddress</code> or <code>PointerToRawData</code> equivalent because the sections are loaded sequentially.</em></figcaption></figure></div>


<h4 class="wp-block-heading">Other obfuscation techniques</h4>



<p>In addition to the above-described techniques, Roshtyak also uses other obfuscation techniques, including:</p>



<ul class="wp-block-list"><li>Junk instruction insertion</li><li>Import hashing</li><li>Frequent memory wiping</li><li>Mixed boolean-arithmetic obfuscation</li><li>Redundant threading</li><li>Heavy polymorphism</li></ul>



<h2 class="wp-block-heading">Core Functionality</h2>



<p>Now that we’ve described how Roshtyak protects itself, it might be interesting to also go over what it actually does. Roshtyak’s DLL is relatively large, over a megabyte, but its functionality is surprisingly simple once you eliminate all the obfuscation. Its main purpose is to download further payloads to execute. In addition, it does the usual evil malware stuff, namely establishing persistence, escalating privileges, lateral movement, and exfiltrating information about the victim.</p>



<h4 class="wp-block-heading">Persistence</h4>



<p>Roshtyak first generates a random file name in <code>%SystemRoot%\Temp</code> and moves its DLL image there. The generated file name consists of two to eight random lowercase characters concatenated with a random extension chosen from a hardcoded list. The PRNG used to generate this file name is seeded with the volume serial number of <code>C:\</code>. The sample we analyzed hardcoded seven extensions (<code>.log</code>, <code>.tmp</code>, <code>.loc</code>, <code>.dmp</code>, <code>.out</code>, <code>.ttf</code>, and <code>.etl</code>). We observed other extensions being used in other samples, suggesting this list is somewhat dynamic. With a small probability, Roshtyak will also use a randomly generated extension. Once fully constructed, the full path to the Roshtyak DLL might look like e.g. <code>C:\Windows\Temp\wcdp.etl</code>.</p>



<p>After the DLL image is moved to the new filesystem path, Roshtyak stomps its <code>Modified</code> timestamp to the current system time. It then proceeds to set up a <code>RunOnce(Ex)</code> registry key to actually establish persistence. The registry entry is created using the previously described <a href="#indirect_registry">indirect registry write</a> technique. The command inserted into the key might look as follows:</p>



<p><code>RUNDLL32.EXE SHELL32.DLL,ShellExec_RunDLL REGSVR32.EXE -U /s "C:\Windows\Temp\wcdp.etl."</code></p>



<p>There are a couple of things to note here. First, <code>regsvr32</code> doesn’t care about the extensions of the DLLs it loads, allowing Roshtyak to hide under an innocent-looking extension such as <code>.log</code>. Second, the <code>/s</code> parameter puts <code>regsvr32</code> into silent mode. Without it, <code>regsvr32</code> would complain that it did not find an export named <code>DllUnregisterServer</code>. Finally, notice the trailing period character at the end of the path. This period is <a href="https://docs.microsoft.com/en-us/archive/blogs/jeremykuhne/path-normalization#trimming-characters" target="_blank" rel="noreferrer noopener">removed</a> during path normalization, so it practically has no effect on the command. We are not exactly sure what the author’s original intention behind including this period character is. It looks like it could have been designed to trick some anti-malware software into not being able to connect the persistence entry with the payload on the filesystem.</p>



<p>By default, Roshtyak uses the <code>HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnce</code> key for persistence. However, under some circumstances (such as when it detects that Kaspersky is running by checking for a process named <code>avp.exe</code>) the key <code>HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnceEx</code> will be used instead. The <code>RunOnceEx</code> key is capable of loading a DLL, so when using this key, Roshtyak specifies <code>shell32.dll</code> directly, omitting the use <code>rundll32</code>.</p>


<div class="wp-block-image">
<figure class="aligncenter size-full"><a href="https://decoded.avast.io/wp-content/uploads/sites/2/2022/09/runonceex.png"><img loading="lazy" decoding="async" width="824" height="158" src="https://decoded.avast.io/wp-content/uploads/sites/2/2022/09/runonceex.png" alt="" class="wp-image-6488" srcset="https://decoded.avast.io/wp-content/uploads/sites/2/2022/09/runonceex.png 824w, https://decoded.avast.io/wp-content/uploads/sites/2/2022/09/runonceex-300x58.png 300w, https://decoded.avast.io/wp-content/uploads/sites/2/2022/09/runonceex-768x147.png 768w" sizes="(max-width: 824px) 100vw, 824px" /></a><figcaption>A <code>RunOnceEx</code> persistence entry established by Roshtyak</figcaption></figure></div>


<h4 class="wp-block-heading">Privilege escalation</h4>



<p>Roshtyak uses both UAC bypasses and regular EoP exploits in an attempt to elevate its privileges. Unlike many other pieces of malware, which just blindly execute whatever UAC bypasses/exploits the authors could find, Roshtyak makes efforts to figure out if the privilege escalation method is even likely to be successful. This was probably implemented to lower the chances of detection due to the unnecessary usage of incompatible bypasses/exploits. For UAC bypasses, this involves checking the <code>ConsentPromptBehaviorAdmin</code> and <code>ConsentPromptBehaviorUser</code> registry keys. For EoP exploits, this is about checking the Windows build number and patch level.</p>



<p>Besides checking the <code>ConsentPromptBehavior(Admin|User)</code> keys, Roshtyak performs other sanity checks to ensure that it should proceed with the UAC bypass. Namely, it checks for admin privileges using <code>CheckTokenMembership</code> with the SID <code>S-1-5-32-544</code> (<code>DOMAIN_ALIAS_RID_ADMINS</code>). It also inspects the value of the <code>DbgElevationEnabled</code> flag in <code>KUSER_SHARED_DATA.SharedDataFlags</code>. This is an undocumented <a href="http://undoc.airesoft.co.uk/ntdll.dll/RtlQueryElevationFlags.php" target="_blank" rel="noreferrer noopener">flag</a> that is set if UAC is enabled. Finally, there are AV checks for BitDefender (detected by the module <code>atcuf32.dll</code>), Kaspersky (process <code>avp.exe</code>), and our own Avast/AVG (module <code>aswhook.dll</code>). If one of these AVs is detected, Roshtyak avoids selected UAC bypass techniques, presumably the ones that might result in detection.</p>



<p>As for the actual UAC bypasses, there are two main methods implemented. The first is an implementation of the aptly named <a href="https://github.com/hfiref0x/UACME/blob/c998cb1f1bafd36f566f17208b915dc48dda5edf/Source/Akagi/methods/hybrids.c#L877" target="_blank" rel="noreferrer noopener">ucmDccwCOM</a> method from <a href="https://github.com/hfiref0x/UACME" target="_blank" rel="noreferrer noopener">UACMe</a>. Interestingly when this method is executed, Roshtyak temporarily masquerades its process as <code>explorer.exe</code> by overwriting <code>FullDllName</code> and <code>BaseDllName</code> in the <a href="http://undocumented.ntinternals.net/index.html?page=UserMode%2FStructures%2FLDR_MODULE.html" target="_blank" rel="noreferrer noopener">_LDR_MODULE</a> structure corresponding to the main executable module. The payload launched by this method is a randomly named LNK file, dropped into <code>%TEMP%</code> using the <a href="https://docs.microsoft.com/en-us/windows/win32/api/shobjidl_core/nn-shobjidl_core-ishelllinka" target="_blank" rel="noreferrer noopener">IShellLink</a> COM interface. This LNK file is designed to relaunch the Roshtyak DLL, through LOLBins such as <code>advpack</code> or <code>register-cimprovider</code>.</p>



<p>The second method is more of a UAC bypass framework than a specific bypass method, because multiple UAC bypass methods follow the same simple pattern: first registering some specific shell open command and then executing an autoelevating Windows binary (which internally triggers the shell open command). For instance, a UAC bypass might be accomplished by writing a payload command to <code>HKCU\Software\Classes\ms-settings\shell\open\command</code> and then executing <code>fodhelper.exe</code> from <code>%windir%\system32</code>. Basically, the same bypass can be achieved by substituting the pair <code>ms-settings</code>/<code>fodhelper.exe</code> with other pairs, such as <code>mscfile</code>/<code>eventvwr.exe</code>. Roshtyak uses the following six pairs to bypass UAC:</p>



<figure class="wp-block-table"><table><tbody><tr><td><strong>Class</strong></td><td><strong>Executable</strong></td></tr><tr><td><code>mscfile</code></td><td><code>eventvwr.exe</code></td></tr><tr><td><code>mscfile</code></td><td><code>compmgmtlauncher.exe</code></td></tr><tr><td><code>ms-settings</code></td><td><code>fodhelper.exe</code></td></tr><tr><td><code>ms-settings</code></td><td><code>computerdefaults.exe</code></td></tr><tr><td><code>Folder</code></td><td><code>sdclt.exe</code></td></tr><tr><td><code>Launcher.SystemSettings</code></td><td><code>slui.exe</code></td></tr></tbody></table></figure>



<p>Let’s now look at the kernel exploits (<a href="https://msrc.microsoft.com/update-guide/vulnerability/CVE-2020-1054" target="_blank" rel="noreferrer noopener">CVE-2020-1054</a> and <a href="https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-1732" target="_blank" rel="noreferrer noopener">CVE-2021-1732</a>) Roshtyak uses to escalate privileges. As is often the case in Roshtyak, these exploits are stored encrypted and are only decrypted on demand. Interestingly, once decrypted, the exploits turn out to be regular PE files with completely valid headers (unlike the other layers in Roshtyak, which are either in shellcode form or stored in a custom stripped PE format). Moreover, the exploits lack the obfuscation given to the rest of Roshtyak, so their code is immediately decompilable, and only some basic string encryption is used. We don’t know why the attackers left these exploits so exposed, but it might be due to the difference in bitness. While Roshtyak itself is x86 code (most of the time running under WoW64), the exploits are x64 (which makes sense considering they exploit vulnerabilities in 64-bit code). It could be that the obfuscation tools used by Roshtyak’s authors were designed to work on x86 and are not portable to x64.</p>


<div class="wp-block-image">
<figure class="aligncenter size-full"><a href="https://decoded.avast.io/wp-content/uploads/sites/2/2022/09/hmvalidatehandle.png"><img loading="lazy" decoding="async" width="919" height="355" src="https://decoded.avast.io/wp-content/uploads/sites/2/2022/09/hmvalidatehandle.png" alt="" class="wp-image-6489" srcset="https://decoded.avast.io/wp-content/uploads/sites/2/2022/09/hmvalidatehandle.png 919w, https://decoded.avast.io/wp-content/uploads/sites/2/2022/09/hmvalidatehandle-300x116.png 300w, https://decoded.avast.io/wp-content/uploads/sites/2/2022/09/hmvalidatehandle-768x297.png 768w" sizes="(max-width: 919px) 100vw, 919px" /></a><figcaption><em>Snippet from Roshtyak’s exploit for CVE-2020-1054, scanning through <code>IsMenu</code> to find the offset to <a href="https://github.com/sam-b/windows_kernel_address_leaks/blob/master/HMValidateHandle/HMValidateHandle/HMValidateHandle.cpp" target="_blank" rel="noreferrer noopener">HMValidateHandle</a>.</em></figcaption></figure></div>


<p>To execute the exploits, Roshtyak spawns (the AMD64 version of) <code>winver.exe</code> and gets the exploit code to run there using the <a href="https://modexp.wordpress.com/2019/05/25/windows-injection-finspy/" target="_blank" rel="noreferrer noopener">KernelCallbackTable injection method</a>. Roshtyak’s implementation of this injection method essentially matches a <a href="https://github.com/odzhan/injection/blob/master/kct/kct.c" target="_blank" rel="noreferrer noopener">public PoC</a>, with the biggest difference being the usage of slightly different API functions due to the need for cross-subsystem injection (e.g. <code>NtWow64QueryInformationProcess64</code> instead of <code>NtQueryInformationProcess</code> or <code>NtWow64ReadVirtualMemory64</code> instead of <code>ReadProcessMemory</code>). The code injected into <code>winver.exe</code> is not the exploit PE itself but rather a slightly obfuscated shellcode, designed to load the exploit PE into memory.</p>



<p>The kernel exploits target certain unpatched versions of Windows. Specifically, CVE-2020-1054 is only used on Windows 7 systems where the revision number is not higher than <code>24552</code>. On the other hand, the exploit for CVE-2021-1732 runs on Windows 10, with the targeted build number range being from <code>16353</code> to <code>19042</code>. Before exploiting CVE-2021-1732, Roshtyak also scans through installed update packages to see if a patch for the vulnerability is installed. It does this by enumerating the registry keys under <code>HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages</code> and checking if the package for <a href="https://support.microsoft.com/en-us/topic/february-9-2021-kb4601319-os-builds-19041-804-and-19042-804-87fc8417-4a81-0ebb-5baa-40cfab2fbfde" target="_blank" rel="noreferrer noopener">KB4601319</a> (or higher) is present.</p>



<h4 class="wp-block-heading">Lateral movement</h4>



<p>When it comes to lateral movement, Roshtyak simply uses the tried and tested <a href="https://docs.microsoft.com/en-us/sysinternals/downloads/psexec" target="_blank" rel="noreferrer noopener">PsExec</a> tool. Before executing PsExec, Roshtyak ensures it makes sense to run it by checking for a SID matching the “<a href="https://docs.microsoft.com/en-us/windows/win32/api/winnt/ne-winnt-well_known_sid_type" target="_blank" rel="noreferrer noopener">well-known</a>” <code>WinAccountDomainAdminsSid</code> group. If domain admin rights are not detected, Roshtyak skips its lateral movement phase entirely.</p>



<p>Roshtyak attempts to get around detection by setting Defender exclusions, as PsExec is often flagged as a hacktool (for good reasons). It sets a path exclusion for <code>%TEMP%</code> (where it will drop PsExec and other files used for lateral movement). Later, it sets up a process exclusion for the exact path from which PsExec will be executed.&nbsp;</p>



<p>While we would expect PsExec to be bundled inside Roshtyak, it turns out Roshtyak downloads it on demand from <code>https://download.sysinternals[.]com/files/PSTools.zip</code>. The downloaded zip archive is dropped into <code>%TEMP%</code> under a random name with the <code>.zip</code> extension. PsExec is then unzipped from this archive using the Windows Shell COM interface (<code>IShellDispatch</code>) into a randomly named <code>.exe</code> file in <code>%TEMP%</code>.</p>



<p>The payload to be executed by PsExec is a self-extracting package created by a tool called <a href="https://en.wikipedia.org/wiki/IExpress" target="_blank" rel="noreferrer noopener">IExpress</a>. This is an archaic installer that’s part of Windows, which is probably why it’s used, since Roshtyak can rely on it already being on the victim machine. The installer generation is configured by a text file using the <a href="https://www.mdgx.com/INF_web/cdfinfo.htm" target="_blank" rel="noreferrer noopener">Self Extraction Directive</a> (SED) syntax.&nbsp;</p>


<div class="wp-block-image">
<figure class="aligncenter size-full"><a href="https://decoded.avast.io/wp-content/uploads/sites/2/2022/09/iexpress_config.png"><img loading="lazy" decoding="async" width="244" height="303" src="https://decoded.avast.io/wp-content/uploads/sites/2/2022/09/iexpress_config.png" alt="" class="wp-image-6490" srcset="https://decoded.avast.io/wp-content/uploads/sites/2/2022/09/iexpress_config.png 244w, https://decoded.avast.io/wp-content/uploads/sites/2/2022/09/iexpress_config-242x300.png 242w" sizes="(max-width: 244px) 100vw, 244px" /></a><figcaption><em>Roshtyak’s IExpress configuration template</em></figcaption></figure></div>


<p>Roshtyak uses a SED configuration template with three placeholders (<code>%1</code>, <code>%2</code>, and <code>%3</code>) that it substitutes with real values at runtime. As seen above, the configuration template was written in mixed-case, which is frequently used in Raspberry Robin in general. Once the SED configuration is prepared, it is written into a randomly named <code>.txt</code> file in <code>%TEMP%</code>. Then, <code>iexpress</code> is invoked to generate the payload using a command such as <code>C:\Windows\iexpress.exe /n /q &lt;path_to_sed_config&gt;</code>. The generated payload is dumped into a randomly named <code>.exe</code> file in <code>%TEMP%</code>, as configured by the <code>TargetName</code> directive (placeholder <code>%1</code>).</p>



<p>Once the payload is generated, Roshtyak proceeds to actually run PsExec. There are two ways Roshtyak can execute PsExec. The first one uses the command <code>&lt;path_to_psexec&gt; \\* -accepteula -c -d -s &lt;path_to_payload&gt;</code>. Here, the <code>\\*</code> wildcard instructs PsExec to run the payload on all computers in the current domain. Alternatively, Roshtyak might run the command <code>&lt;path_to_psexec&gt; @&lt;path_to_target_file&gt; -accepteula -c -d -s &lt;path_to_payload&gt;</code>. Here, the <code>target_file</code> is a text file containing a specific list of computers to run the payload on. Roshtyak builds this list by enumerating Active Directory objects using API functions exported from <code>activeds.dll</code>.</p>



<h4 class="wp-block-heading">Profiling the victim</h4>



<p>USB worms tend to have a life of their own. Since their worming behavior is usually completely automated, the threat actor who initially deployed the worm doesn’t necessarily have full control over where it spreads. This is why it’s important for threat actors to have the worm beacon back to their C&amp;C servers. With a beaconing mechanism in place, the threat actor can be informed about all the machines under their control and can use this knowledge to manage the worm as a whole.</p>



<p>The outgoing beaconing messages typically contain some information about the infected machine. This helps financially-motivated cybercriminals decide on how to best monetize the infection. Roshtyak is no exception to this, and it collects a lot of information about each infected victim. Roshtyak concatenates all the collected information into a large string, using semicolons as delimiters. This large string is then exfiltrated to one of Roshtyak’s C&amp;C servers. The exfiltrated pieces of information are listed below, in order of concatenation.</p>



<ul class="wp-block-list"><li>External IP address (obtained during a Tor connectivity check)</li><li>A string hardcoded into Roshtyak’s code, e.g. <code>AFF123</code> (we can’t be sure what’s the meaning behind this, but it looks like an affiliate ID)</li><li>A 16-bit hash of the DLL’s PE header (with some fields zeroed out) xored with the lower 16 bits of its <code>TimeDateStamp</code>. The <code>TimeDateStamp</code> appears to be specially crafted so that the xor results in a known value. This could function as a tamper check or a watermark.</li><li>Creation timestamp of the <code>System Volume Information</code> folder on the system drive</li><li>The volume serial number of the system drive</li><li>Processor count (<code>GetActiveProcessorCount</code>)</li><li>IsWow64Process (<code>_PROCESS_EXTENDED_BASIC_INFORMATION.Flags &amp; 2</code>)</li><li>Windows version (<code>KUSER_SHARED_DATA.Nt(Major|Minor)Version</code>)</li><li>Windows product type (<code>KUSER_SHARED_DATA.NtProductType</code>)</li><li>Windows build number (<code>PEB.OSBuildNumber</code>)</li><li>Local administrative privileges (<code>ZwQueryInformationToken(TokenGroups)</code>/<code>CheckTokenMembership</code>, check for <code>DOMAIN_ALIAS_RID_ADMINS</code>)</li><li>Domain administrative privileges (check for <code>WinAccountDomainAdminsSid</code>/<code>WinAccountDomainUsersSid</code>)</li><li>System time (<code>KUSER_SHARED_DATA.SystemTime</code>)</li><li>Time zone (<code>KUSER_SHARED_DATA.TimeZoneBias</code>)</li><li>System locale (<code>NtQueryDefaultLocale(0)</code>)</li><li>User locale (<code>NtQueryDefaultLocale(1)</code>)</li><li>Environment variables (<code>username</code>, <code>computername</code>, <code>userdomain</code>, <code>userdnsdomain</code>, and <code>logonserver</code>)</li><li>Java version (<code>GetFileVersionInfo("javaw.exe")</code> -&gt; <code>VerQueryValue</code>)</li><li>Processor information (<code>cpuid</code> to obtain the <code>Processor Brand String</code>)</li><li>Path to the image of the main executable module (<code>NtQueryVirtualMemory(MemorySectionName)</code>)</li><li>Product ID and serial number of the main physical drive (<code>DeviceIoControl(IOCTL_STORAGE_QUERY_PROPERTY, StorageDeviceProperty)</code>)</li><li>MAC address of the default gateway (<code>GetBestRoute</code> -&gt; <code>GetIpNetTable</code>)</li><li>MAC addresses of all network adapters (<code>GetAdaptersInfo</code>)</li><li>Installed antivirus software (<code>root\securitycenter2</code> -&gt; <code>SELECT * FROM AntiVirusProduct</code>)</li><li>Display device information (<code>DeviceId</code>, <code>DeviceString</code>, <code>dmPelsWidth</code>, <code>dmPelsHeight</code>, <code>dmDisplayFrequency</code>) (<code>EnumDisplayDevices</code> -&gt; <code>EnumDisplaySettings</code>)</li><li>Active processes (<code>NtQuerySystemInformation(SystemProcessInformation)</code>)</li><li>Screenshot encoded in base64 (<code>gdi32</code> method)</li></ul>



<h4 class="wp-block-heading">Beaconing</h4>



<p>Once collected, Roshtyak sends the victim profile to one of its C&amp;C servers. The profile is sent over the <a href="https://www.torproject.org/" target="_blank" rel="noreferrer noopener">Tor network</a>, using a custom comms module Roshtyak injects into a newly spawned process. The C&amp;C server processes the exfiltrated profile and might respond with a shellcode payload for the core module to execute.</p>



<p>Let’s now take a closer look at this whole process. It’s worth mentioning that before generating any malicious traffic, Roshtyak first performs a Tor connectivity check. This is done by contacting 28 legitimate and well-known <code>.onion</code> addresses in random order and checking if at least one of them responds. If none of them respond, Roshtyak doesn’t even attempt to contact its C&amp;C, as it would most likely not get through to it anyway.</p>



<p>As for the actual C&amp;C communication, Roshtyak contains 35 hardcoded V2 onion addresses (e.g. <code>ip2djbz3xidmkmkw:53148</code>, see our <a href="https://github.com/avast/ioc/tree/master/RaspberryRobin" target="_blank" rel="noreferrer noopener">IoC repository</a> for the full list). Like during the connectivity check, Roshtyak iterates through them in random order and attempts to contact each of them until one responds. Note that while V2 onion addresses are <a href="https://support.torproject.org/onionservices/v2-deprecation/" target="_blank" rel="noreferrer noopener">officially deprecated</a> in favor of V3 addresses (and the Tor Browser no longer supports them in its latest version) they still appear to be functional enough for Roshtyak’s nefarious purposes.</p>


<div class="wp-block-image">
<figure class="aligncenter size-full"><a href="https://decoded.avast.io/wp-content/uploads/sites/2/2022/09/cncs.png"><img loading="lazy" decoding="async" width="912" height="410" src="https://decoded.avast.io/wp-content/uploads/sites/2/2022/09/cncs.png" alt="" class="wp-image-6491" srcset="https://decoded.avast.io/wp-content/uploads/sites/2/2022/09/cncs.png 912w, https://decoded.avast.io/wp-content/uploads/sites/2/2022/09/cncs-300x135.png 300w, https://decoded.avast.io/wp-content/uploads/sites/2/2022/09/cncs-768x345.png 768w" sizes="(max-width: 912px) 100vw, 912px" /></a><figcaption>Roshtyak’s hardcoded C&amp;C addresses</figcaption></figure></div>


<p>The victim profile is sent in the URL path, appended to the V2 onion address, along with the <code>/</code> character. As the raw profile might contain characters forbidden for use in URLs, the profile is wrapped in a custom structure and encoded using Base64. The very first 0x10 bytes of the custom structure serve as an encryption key, with the rest of the structure being encrypted. The custom structure also contains a 64-bit hash of the victim profile, which presumably serves as an integrity check. Interestingly, the custom structure might get its end padded with random bytes. Note that the full path could be pretty large, as it contains a doubly Base64-encoded screenshot. The authors of Roshtyak were probably aware that the URL path is not suitable for sending large amounts of data and decided to cap the length of the victim profile at 0x20000 bytes. If the screenshot makes the exfiltrated profile larger than this limit, it isn’t included.</p>



<p>When the full onion URL is constructed, Roshtyak goes ahead to launch its Tor comms module. It first spawns a dummy process to host the comms module. This dummy process is randomly chosen and can be one of <code>dllhost.exe</code>, <code>regsvr32.exe</code>, or <code>rundll32.exe</code>. The comms module is injected into the newly spawned process using a shared section, obfuscated through the previously described <a href="#shellcode_hiding">shellcode hiding</a> technique. The comms module is then executed via <code>NtQueueApcThreadEx</code>, using the already discussed <a href="#ntdll_gadgets">ntdll gadget trick</a>. The injected comms module is a custom build of an open-source Tor library packed in three additional protective shellcode layers.</p>



<p>The core module communicates with the comms module using shared sections as an IPC mechanism. Both modules synchronously use the same PRNG with the same seed (<code>KUSER_SHARED_DATA.Cookie</code>) to generate the same section name. Both then map this named section into their respective address spaces and communicate with each other by reading/writing to it. The data read/written into the section is encrypted with RC4 (the key also generated using the synchronized PRNGs).</p>



<p>The communication between the core module and the comms module follows a simple request/response pattern. The core module writes an encrypted onion URL (including the URL path to exfiltrate) into the shared section. The comms module then decrypts the URL and makes an HTTP request over Tor to it. The core module waits for the comms module to write the encrypted HTTP response back to the shared section. Once it’s there, the core module decrypts it and unwraps it from a custom format (which includes decrypting it yet again and computing a hash to check the payload’s integrity). The decrypted payload might include a shellcode for the core module to execute. If the shellcode is present, the core module allocates a huge chunk of memory, hides the shellcode there using the <a href="#shellcode_hiding">shellcode hiding</a> technique, and executes it in a new thread. This new thread is hidden using the <code>NtSetInformationThread</code> -&gt; <code>ThreadHideFromDebugger</code> technique (including a follow-up anti-hooking check using <code>NtGetInformationThread</code> to confirm that the <code>NtSetInformationThread</code> call did indeed succeed).</p>



<h2 class="wp-block-heading">Conclusion</h2>



<p>In this blog post, we took a technical deep dive into Roshtyak, the backdoor payload associated with Raspberry Robin. The main focus was to describe how to deal with Roshtyak’s protection mechanisms. We showed some never-before-seen anti-debugger/anti-sandbox/anti-VM tricks and discussed Roshtyak’s heavy obfuscation. We also described Roshtyak’s core functionality. Specifically, we detailed how it establishes persistence, escalates privileges, moves laterally, and uses Tor to download further payloads.</p>



<p>We have to admit that reverse engineering Roshtyak was certainly no easy task. The combination of heavy obfuscation and numerous advanced anti-analysis tricks made it a considerable challenge. Nick Harbour, if you’re looking for something to repurpose for next year’s final Flare-On challenge, this might be it.</p>



<h3 class="wp-block-heading">Indicators of Compromise (IoCs)</h3>



<p>IoCs are available at&nbsp;<a href="https://github.com/avast/ioc/tree/master/RaspberryRobin" target="_blank" rel="noreferrer noopener">https://github.com/avast/ioc/tree/master/RaspberryRobin</a>.</p>
                                            </div>

                </article>

                                    <div class="entry-tags clearfix">
                        <span>Tagged as</span><a href="https://decoded.avast.io/tag/cve-2020-1054/" rel="tag">CVE-2020-1054</a>, <a href="https://decoded.avast.io/tag/cve-2021-1732/" rel="tag">CVE-2021-1732</a>, <a href="https://decoded.avast.io/tag/rapsberry-robin/" rel="tag">Rapsberry Robin</a>, <a href="https://decoded.avast.io/tag/roshtyak/" rel="tag">Roshtyak</a>                    </div>
                
                                     
		<div class="meks_ess no-labels"><span class="johannes-share-label">Share:</span><a href="#" class="meks_ess-item socicon-twitter" data-url="http://twitter.com/intent/tweet?url=https%3A%2F%2Fdecoded.avast.io%2Fjanvojtesek%2Fraspberry-robins-roshtyak-a-little-lesson-in-trickery%2F&amp;text=Raspberry%20Robin%E2%80%99s%20Roshtyak%3A%20A%20Little%20Lesson%20in%20Trickery"><span>X</span></a><a href="#" class="meks_ess-item socicon-facebook" data-url="http://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fdecoded.avast.io%2Fjanvojtesek%2Fraspberry-robins-roshtyak-a-little-lesson-in-trickery%2F&amp;t=Raspberry%20Robin%E2%80%99s%20Roshtyak%3A%20A%20Little%20Lesson%20in%20Trickery"><span>Facebook</span></a></div>                
                               
		        

            </div>

            
        </div>
    </div>
</div>

        <div class="johannes-section johannes-related section-margin johannes-bg-alt-2">
        <div class="container">
            <div class="section-head">
                <h5 class="section-title h2">Further reading</h5>
            </div>
            <div class="section-content row justify-content-center">
                <div class="col-12 ">
                    <div class="row johannes-items johannes-posts">
                                                                        <div class="col-12 col-md-6 col-lg-4">
                            
<article class="johannes-post johannes-layout-d johannes-layout-g category-pill category-pill-small entry-meta-small post-8850 post type-post status-publish format-standard has-post-thumbnail hentry tag-predictions tag-threats category-pc">
    	    <div class="entry-media">
	        <a href="https://decoded.avast.io/threatintel/predictions-2025-the-future-of-cybersecurity-unveiled/"><img width="259" height="194" src="https://decoded.avast.io/wp-content/uploads/sites/2/2024/12/predictions3.jpeg" class="attachment-johannes-d size-johannes-d wp-post-image" alt="" loading="lazy" /></a>
				        <div class="entry-category">
	            <a href="https://decoded.avast.io/category/other-research/" rel="tag" class="cat-item category-other-research">Other/Research</a><a href="https://decoded.avast.io/category/pc/" rel="tag" class="cat-item category-pc">PC</a><a href="https://decoded.avast.io/category/reports/" rel="tag" class="cat-item category-reports">Reports</a>	        </div>
        	    </div>
        <div class="entry-header">
    	        
        <h2 class="entry-title h5"><a href="https://decoded.avast.io/threatintel/predictions-2025-the-future-of-cybersecurity-unveiled/">Predictions 2025: The Future of Cybersecurity Unveiled</a></h2>        	        <div class="entry-meta">
	            <span class="meta-item meta-date"><span class="updated">December 4, 2024</span></span><span class="meta-item meta-author"><span class="vcard author">by <a href="https://decoded.avast.io/author/threatintel/">Threat Intelligence Team</a></span></span>	        </div>
            </div>
    	    <div class="entry-content">
	        <p>The digital world is evolving at breakneck speed. In 2025, we’re set to witness transformative changes in cybersecurity that will redefine trust, security, and how we navigate our digital lives. Here’s what we see coming: AI Blurs Reality: Hyper-personalized AI experiences will raise questions...</p>
	    </div>
        </article>                        </div>
                                                                        <div class="col-12 col-md-6 col-lg-4">
                            
<article class="johannes-post johannes-layout-d johannes-layout-g category-pill category-pill-small entry-meta-small post-8842 post type-post status-publish format-standard has-post-thumbnail hentry tag-desktop tag-malware tag-mobile tag-report tag-risk tag-threats category-reports">
    	    <div class="entry-media">
	        <a href="https://decoded.avast.io/threatresearch/gen-q3-2024-threat-report/"><img width="291" height="194" src="https://decoded.avast.io/wp-content/uploads/sites/2/2024/11/jamesathatch_a_group_of_cybersecurity_experts_analysing_graphs__85ce4799-6a1a-45dd-be38-bdb871363db7.png" class="attachment-johannes-d size-johannes-d wp-post-image" alt="" loading="lazy" /></a>
				        <div class="entry-category">
	            <a href="https://decoded.avast.io/category/mobile/" rel="tag" class="cat-item category-mobile">Mobile</a><a href="https://decoded.avast.io/category/pc/" rel="tag" class="cat-item category-pc">PC</a><a href="https://decoded.avast.io/category/reports/" rel="tag" class="cat-item category-reports">Reports</a>	        </div>
        	    </div>
        <div class="entry-header">
    	        
        <h2 class="entry-title h5"><a href="https://decoded.avast.io/threatresearch/gen-q3-2024-threat-report/">Gen Q3/2024 Threat Report</a></h2>        	        <div class="entry-meta">
	            <span class="meta-item meta-date"><span class="updated">November 19, 2024</span></span><span class="meta-item meta-author"><span class="vcard author">by <a href="https://decoded.avast.io/author/threatresearch/">Threat Research Team</a></span></span>	        </div>
            </div>
    	    <div class="entry-content">
	        <p>The third quarter threat report is here—and it’s packed with answers. Our Threat Labs team had uncovered some heavy stories behind the stats, exposing the relentless tactics shaping today’s threat landscape. Here’s what you need to know: 614% explosion in Scam-Yourself Attacks: Over 2 million users...</p>
	    </div>
        </article>                        </div>
                                                                        <div class="col-12 col-md-6 col-lg-4">
                            
<article class="johannes-post johannes-layout-d johannes-layout-g category-pill category-pill-small entry-meta-small post-8701 post type-post status-publish format-standard has-post-thumbnail hentry tag-ai tag-cryptocurrency tag-scam category-pc">
    	    <div class="entry-media">
	        <a href="https://decoded.avast.io/martinchlumecky1/cryptocore-unmasking-the-sophisticated-cryptocurrency-scam-operations/"><img width="344" height="194" src="https://decoded.avast.io/wp-content/uploads/sites/2/2024/07/CC-featured-image-344x194.png" class="attachment-johannes-d size-johannes-d wp-post-image" alt="" loading="lazy" srcset="https://decoded.avast.io/wp-content/uploads/sites/2/2024/07/CC-featured-image-344x194.png 344w, https://decoded.avast.io/wp-content/uploads/sites/2/2024/07/CC-featured-image-540x304.png 540w" sizes="(max-width: 344px) 100vw, 344px" /></a>
				        <div class="entry-category">
	            <a href="https://decoded.avast.io/category/mobile/" rel="tag" class="cat-item category-mobile">Mobile</a><a href="https://decoded.avast.io/category/pc/" rel="tag" class="cat-item category-pc">PC</a>	        </div>
        	    </div>
        <div class="entry-header">
    	        
        <h2 class="entry-title h5"><a href="https://decoded.avast.io/martinchlumecky1/cryptocore-unmasking-the-sophisticated-cryptocurrency-scam-operations/">CryptoCore: Unmasking the Sophisticated Cryptocurrency Scam Operations</a></h2>        	        <div class="entry-meta">
	            <span class="meta-item meta-date"><span class="updated">August 13, 2024</span></span><span class="meta-item meta-author"><span class="vcard author">by <a href="https://decoded.avast.io/author/martinchlumecky1/">Martin Chlumecký</a></span></span>	        </div>
            </div>
    	    <div class="entry-content">
	        <p>As digital currencies have grown, so have cryptocurrency scams, posing significant user risks. The rise of AI and deepfake technology has intensified scams exploiting famous personalities and events by creating realistic fake videos. Platforms like X and YouTube have been especially targeted, with...</p>
	    </div>
        </article>                        </div>
                                            </div>
                </div>
            </div>
        </div>
    </div>
    

    
    
    <footer id="johannes-footer" class="johannes-footer">
        <div class="container">

                            <div class="footer-divider"></div>
                
	<div class="row johannes-footer-widgets justify-content-center">
	    	        	    	        	    	        	    	        	    	</div>
            
                            <div class="johannes-copyright">
                    <p>2024 Copyright © Avast Software s.r.o.</p>
                </div>
                    </div>
    </footer>

            <div class="pswp" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="pswp__bg"></div>
    <div class="pswp__scroll-wrap">
        <div class="pswp__container">
            <div class="pswp__item"></div>
            <div class="pswp__item"></div>
            <div class="pswp__item"></div>
        </div>
        <div class="pswp__ui pswp__ui--hidden">
            <div class="pswp__top-bar">
                <div class="pswp__counter"></div>
                <button class="pswp__button pswp__button--close" title="Close (Esc)"></button>
                <button class="pswp__button pswp__button--fs" title="Toggle fullscreen"></button>
                <button class="pswp__button pswp__button--zoom" title="Zoom in/out"></button>
                <div class="pswp__preloader">
                    <div class="pswp__preloader__icn">
                        <div class="pswp__preloader__cut">
                            <div class="pswp__preloader__donut"></div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="pswp__share-modal pswp__share-modal--hidden pswp__single-tap">
                <div class="pswp__share-tooltip"></div>
            </div>
            <button class="pswp__button pswp__button--arrow--left" title="Previous (arrow left)">
            </button>
            <button class="pswp__button pswp__button--arrow--right" title="Next (arrow right)">
            </button>
            <div class="pswp__caption">
                <div class="pswp__caption__center"></div>
            </div>
        </div>
    </div>
</div>    

</div>


    <a href="javascript:void(0)" id="johannes-goto-top" class="johannes-goto-top"><i class="jf jf-chevron-up"></i></a>

<div class="johannes-action-overlay">

</div><div class="johannes-sidebar johannes-sidebar-hidden">

	<div class="johannes-sidebar-branding">
	    <span class="site-title h1 "><a href="https://decoded.avast.io/" rel="home"><picture class="johannes-logo"><source media="(min-width: 1050px)" srcset="https://wordpress-salat-test.storage.googleapis.com/sites/2/2019/06/Asset-22ldpi.png"><source srcset="https://wordpress-salat-test.storage.googleapis.com/sites/2/2019/06/Asset-22ldpi.png"><img src="https://wordpress-salat-test.storage.googleapis.com/sites/2/2019/06/Asset-22ldpi.png" alt="Avast Threat Labs"></picture></a></span>	    <span class="johannes-action-close"><i class="jf jf-close" aria-hidden="true"></i></span>
	</div>	

		<div class="johannes-menu-mobile widget d-md-block d-lg-none">
		<div class="widget-inside johannes-bg-alt-2">
		<h4 class="widget-title">Menu</h4>
			    <nav class="menu-main-menu-container"><ul id="menu-main-menu-1" class="johannes-menu johannes-menu-primary"><li class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-367 category-mobile"><a href="https://decoded.avast.io/category/mobile/">Mobile</a></li>
<li class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-368 category-network"><a href="https://decoded.avast.io/category/network/">Network</a></li>
<li class="menu-item menu-item-type-taxonomy menu-item-object-category current-post-ancestor current-menu-parent current-post-parent menu-item-369 category-pc"><a href="https://decoded.avast.io/category/pc/">PC</a></li>
<li class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-370 category-iot"><a href="https://decoded.avast.io/category/iot/">IoT</a></li>
<li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-371"><a href="https://www.avast.com/en-us/careers">Careers</a></li>
</ul></nav>			                                    <ul class="johannes-menu-action johannes-search">
	<li><form class="search-form" action="https://decoded.avast.io/" method="get">
	<input name="s" type="text" value="" placeholder="Type here to search..." />
		<button type="submit">Search</button>
</form>
</li>
</ul>                            		</div>
	</div>

		    <div id="categories-2" class="widget widget_categories"><div class="widget-inside johannes-bg-alt-2"><h4 class="widget-title">Categories</h4>
			<ul>
					<li class="cat-item cat-item-32 category-events"><a href="https://decoded.avast.io/category/events/">Events</a>
</li>
	<li class="cat-item cat-item-23 category-iot"><a href="https://decoded.avast.io/category/iot/">IoT</a>
</li>
	<li class="cat-item cat-item-22 category-mobile"><a href="https://decoded.avast.io/category/mobile/">Mobile</a>
</li>
	<li class="cat-item cat-item-20 category-network"><a href="https://decoded.avast.io/category/network/">Network</a>
</li>
	<li class="cat-item cat-item-106 category-other-research"><a href="https://decoded.avast.io/category/other-research/">Other/Research</a>
</li>
	<li class="cat-item cat-item-21 category-pc"><a href="https://decoded.avast.io/category/pc/">PC</a>
</li>
	<li class="cat-item cat-item-135 category-reports"><a href="https://decoded.avast.io/category/reports/">Reports</a>
</li>
	<li class="cat-item cat-item-1 category-uncategorized"><a href="https://decoded.avast.io/category/uncategorized/">Uncategorized</a>
</li>
			</ul>

			</div></div><div id="tag_cloud-2" class="widget widget_tag_cloud"><div class="widget-inside johannes-bg-alt-2"><h4 class="widget-title">Tags</h4><div class="tagcloud"><a href="https://decoded.avast.io/tag/ai/" class="tag-cloud-link tag-link-194 tag-link-position-1" style="font-size: 9.3023255813953pt;" aria-label="AI (3 items)">AI</a>
<a href="https://decoded.avast.io/tag/analysis/" class="tag-cloud-link tag-link-5 tag-link-position-2" style="font-size: 20.480620155039pt;" aria-label="analysis (42 items)">analysis</a>
<a href="https://decoded.avast.io/tag/android/" class="tag-cloud-link tag-link-6 tag-link-position-3" style="font-size: 12.015503875969pt;" aria-label="Android (6 items)">Android</a>
<a href="https://decoded.avast.io/tag/apt/" class="tag-cloud-link tag-link-63 tag-link-position-4" style="font-size: 12.015503875969pt;" aria-label="APT (6 items)">APT</a>
<a href="https://decoded.avast.io/tag/backdoor/" class="tag-cloud-link tag-link-65 tag-link-position-5" style="font-size: 14.837209302326pt;" aria-label="backdoor (12 items)">backdoor</a>
<a href="https://decoded.avast.io/tag/botnet/" class="tag-cloud-link tag-link-157 tag-link-position-6" style="font-size: 10.387596899225pt;" aria-label="botnet (4 items)">botnet</a>
<a href="https://decoded.avast.io/tag/brazil/" class="tag-cloud-link tag-link-38 tag-link-position-7" style="font-size: 8pt;" aria-label="brazil (2 items)">brazil</a>
<a href="https://decoded.avast.io/tag/cryptocurrency/" class="tag-cloud-link tag-link-105 tag-link-position-8" style="font-size: 11.255813953488pt;" aria-label="cryptocurrency (5 items)">cryptocurrency</a>
<a href="https://decoded.avast.io/tag/cryptomining/" class="tag-cloud-link tag-link-9 tag-link-position-9" style="font-size: 14.077519379845pt;" aria-label="cryptomining (10 items)">cryptomining</a>
<a href="https://decoded.avast.io/tag/csrf/" class="tag-cloud-link tag-link-26 tag-link-position-10" style="font-size: 9.3023255813953pt;" aria-label="csrf (3 items)">csrf</a>
<a href="https://decoded.avast.io/tag/ddos/" class="tag-cloud-link tag-link-173 tag-link-position-11" style="font-size: 9.3023255813953pt;" aria-label="ddos (3 items)">ddos</a>
<a href="https://decoded.avast.io/tag/decryptor/" class="tag-cloud-link tag-link-165 tag-link-position-12" style="font-size: 12.558139534884pt;" aria-label="decryptor (7 items)">decryptor</a>
<a href="https://decoded.avast.io/tag/decryptors/" class="tag-cloud-link tag-link-134 tag-link-position-13" style="font-size: 15.271317829457pt;" aria-label="decryptors (13 items)">decryptors</a>
<a href="https://decoded.avast.io/tag/desktop/" class="tag-cloud-link tag-link-139 tag-link-position-14" style="font-size: 15.271317829457pt;" aria-label="desktop (13 items)">desktop</a>
<a href="https://decoded.avast.io/tag/dirtymoe/" class="tag-cloud-link tag-link-117 tag-link-position-15" style="font-size: 11.255813953488pt;" aria-label="DirtyMoe (5 items)">DirtyMoe</a>
<a href="https://decoded.avast.io/tag/dns-hijack/" class="tag-cloud-link tag-link-27 tag-link-position-16" style="font-size: 9.3023255813953pt;" aria-label="dns hijack (3 items)">dns hijack</a>
<a href="https://decoded.avast.io/tag/exploit/" class="tag-cloud-link tag-link-28 tag-link-position-17" style="font-size: 12.558139534884pt;" aria-label="exploit (7 items)">exploit</a>
<a href="https://decoded.avast.io/tag/fake-app/" class="tag-cloud-link tag-link-7 tag-link-position-18" style="font-size: 8pt;" aria-label="fake-app (2 items)">fake-app</a>
<a href="https://decoded.avast.io/tag/ghostdns/" class="tag-cloud-link tag-link-29 tag-link-position-19" style="font-size: 9.3023255813953pt;" aria-label="ghostdns (3 items)">ghostdns</a>
<a href="https://decoded.avast.io/tag/google-play-store/" class="tag-cloud-link tag-link-40 tag-link-position-20" style="font-size: 8pt;" aria-label="Google Play Store (2 items)">Google Play Store</a>
<a href="https://decoded.avast.io/tag/iot/" class="tag-cloud-link tag-link-13 tag-link-position-21" style="font-size: 13.100775193798pt;" aria-label="iot (8 items)">iot</a>
<a href="https://decoded.avast.io/tag/malware/" class="tag-cloud-link tag-link-37 tag-link-position-22" style="font-size: 22pt;" aria-label="malware (58 items)">malware</a>
<a href="https://decoded.avast.io/tag/mobile/" class="tag-cloud-link tag-link-8 tag-link-position-23" style="font-size: 16.899224806202pt;" aria-label="mobile (19 items)">mobile</a>
<a href="https://decoded.avast.io/tag/obfuscation/" class="tag-cloud-link tag-link-57 tag-link-position-24" style="font-size: 11.255813953488pt;" aria-label="obfuscation (5 items)">obfuscation</a>
<a href="https://decoded.avast.io/tag/p-code/" class="tag-cloud-link tag-link-110 tag-link-position-25" style="font-size: 11.255813953488pt;" aria-label="P-Code (5 items)">P-Code</a>
<a href="https://decoded.avast.io/tag/phishing/" class="tag-cloud-link tag-link-31 tag-link-position-26" style="font-size: 11.255813953488pt;" aria-label="phishing (5 items)">phishing</a>
<a href="https://decoded.avast.io/tag/predictions/" class="tag-cloud-link tag-link-14 tag-link-position-27" style="font-size: 8pt;" aria-label="predictions (2 items)">predictions</a>
<a href="https://decoded.avast.io/tag/ransomware/" class="tag-cloud-link tag-link-47 tag-link-position-28" style="font-size: 15.813953488372pt;" aria-label="ransomware (15 items)">ransomware</a>
<a href="https://decoded.avast.io/tag/rat/" class="tag-cloud-link tag-link-34 tag-link-position-29" style="font-size: 11.255813953488pt;" aria-label="rat (5 items)">rat</a>
<a href="https://decoded.avast.io/tag/report/" class="tag-cloud-link tag-link-136 tag-link-position-30" style="font-size: 14.837209302326pt;" aria-label="report (12 items)">report</a>
<a href="https://decoded.avast.io/tag/research/" class="tag-cloud-link tag-link-109 tag-link-position-31" style="font-size: 12.558139534884pt;" aria-label="Research (7 items)">Research</a>
<a href="https://decoded.avast.io/tag/reversing/" class="tag-cloud-link tag-link-45 tag-link-position-32" style="font-size: 16.46511627907pt;" aria-label="reversing (17 items)">reversing</a>
<a href="https://decoded.avast.io/tag/risk/" class="tag-cloud-link tag-link-138 tag-link-position-33" style="font-size: 14.837209302326pt;" aria-label="risk (12 items)">risk</a>
<a href="https://decoded.avast.io/tag/rootkit/" class="tag-cloud-link tag-link-126 tag-link-position-34" style="font-size: 11.255813953488pt;" aria-label="rootkit (5 items)">rootkit</a>
<a href="https://decoded.avast.io/tag/router/" class="tag-cloud-link tag-link-25 tag-link-position-35" style="font-size: 9.3023255813953pt;" aria-label="router (3 items)">router</a>
<a href="https://decoded.avast.io/tag/security/" class="tag-cloud-link tag-link-54 tag-link-position-36" style="font-size: 9.3023255813953pt;" aria-label="security (3 items)">security</a>
<a href="https://decoded.avast.io/tag/series/" class="tag-cloud-link tag-link-113 tag-link-position-37" style="font-size: 15.813953488372pt;" aria-label="series (15 items)">series</a>
<a href="https://decoded.avast.io/tag/spyware/" class="tag-cloud-link tag-link-35 tag-link-position-38" style="font-size: 8pt;" aria-label="spyware (2 items)">spyware</a>
<a href="https://decoded.avast.io/tag/stealer/" class="tag-cloud-link tag-link-36 tag-link-position-39" style="font-size: 13.100775193798pt;" aria-label="stealer (8 items)">stealer</a>
<a href="https://decoded.avast.io/tag/takedown/" class="tag-cloud-link tag-link-50 tag-link-position-40" style="font-size: 8pt;" aria-label="takedown (2 items)">takedown</a>
<a href="https://decoded.avast.io/tag/threat-intel/" class="tag-cloud-link tag-link-11 tag-link-position-41" style="font-size: 8pt;" aria-label="threat-intel (2 items)">threat-intel</a>
<a href="https://decoded.avast.io/tag/threats/" class="tag-cloud-link tag-link-137 tag-link-position-42" style="font-size: 15.596899224806pt;" aria-label="threats (14 items)">threats</a>
<a href="https://decoded.avast.io/tag/vb/" class="tag-cloud-link tag-link-108 tag-link-position-43" style="font-size: 12.558139534884pt;" aria-label="VB (7 items)">VB</a>
<a href="https://decoded.avast.io/tag/vulnerability/" class="tag-cloud-link tag-link-12 tag-link-position-44" style="font-size: 12.015503875969pt;" aria-label="vulnerability (6 items)">vulnerability</a>
<a href="https://decoded.avast.io/tag/worm/" class="tag-cloud-link tag-link-49 tag-link-position-45" style="font-size: 8pt;" aria-label="worm (2 items)">worm</a></div>
</div></div>
		<div id="recent-posts-2" class="widget widget_recent_entries"><div class="widget-inside johannes-bg-alt-2">
		<h4 class="widget-title">Recent Posts</h4>
		<ul>
											<li>
					<a href="https://decoded.avast.io/threatintel/predictions-2025-the-future-of-cybersecurity-unveiled/">Predictions 2025: The Future of Cybersecurity Unveiled</a>
									</li>
											<li>
					<a href="https://decoded.avast.io/threatresearch/gen-q3-2024-threat-report/">Gen Q3/2024 Threat Report</a>
									</li>
											<li>
					<a href="https://decoded.avast.io/martinchlumecky1/cryptocore-unmasking-the-sophisticated-cryptocurrency-scam-operations/">CryptoCore: Unmasking the Sophisticated Cryptocurrency Scam Operations</a>
									</li>
											<li>
					<a href="https://decoded.avast.io/threatresearch/decrypted-donex-ransomware-and-its-predecessors/">Decrypted: DoNex Ransomware and its Predecessors</a>
									</li>
											<li>
					<a href="https://decoded.avast.io/davidalvarez/new-diamorphine-rootkit-variant-seen-undetected-in-the-wild/">New Diamorphine rootkit variant seen undetected in the wild</a>
									</li>
					</ul>

		</div></div><div id="archives-2" class="widget widget_archive"><div class="widget-inside johannes-bg-alt-2"><h4 class="widget-title">Archive</h4>
			<ul>
					<li><a href='https://decoded.avast.io/2024/12/'>December 2024</a></li>
	<li><a href='https://decoded.avast.io/2024/11/'>November 2024</a></li>
	<li><a href='https://decoded.avast.io/2024/08/'>August 2024</a></li>
	<li><a href='https://decoded.avast.io/2024/07/'>July 2024</a></li>
	<li><a href='https://decoded.avast.io/2024/06/'>June 2024</a></li>
	<li><a href='https://decoded.avast.io/2024/05/'>May 2024</a></li>
	<li><a href='https://decoded.avast.io/2024/04/'>April 2024</a></li>
	<li><a href='https://decoded.avast.io/2024/02/'>February 2024</a></li>
	<li><a href='https://decoded.avast.io/2024/01/'>January 2024</a></li>
	<li><a href='https://decoded.avast.io/2023/12/'>December 2023</a></li>
	<li><a href='https://decoded.avast.io/2023/11/'>November 2023</a></li>
	<li><a href='https://decoded.avast.io/2023/10/'>October 2023</a></li>
	<li><a href='https://decoded.avast.io/2023/09/'>September 2023</a></li>
	<li><a href='https://decoded.avast.io/2023/08/'>August 2023</a></li>
	<li><a href='https://decoded.avast.io/2023/07/'>July 2023</a></li>
	<li><a href='https://decoded.avast.io/2023/06/'>June 2023</a></li>
	<li><a href='https://decoded.avast.io/2023/05/'>May 2023</a></li>
	<li><a href='https://decoded.avast.io/2023/04/'>April 2023</a></li>
	<li><a href='https://decoded.avast.io/2023/02/'>February 2023</a></li>
	<li><a href='https://decoded.avast.io/2023/01/'>January 2023</a></li>
	<li><a href='https://decoded.avast.io/2022/12/'>December 2022</a></li>
	<li><a href='https://decoded.avast.io/2022/11/'>November 2022</a></li>
	<li><a href='https://decoded.avast.io/2022/10/'>October 2022</a></li>
	<li><a href='https://decoded.avast.io/2022/09/'>September 2022</a></li>
	<li><a href='https://decoded.avast.io/2022/08/'>August 2022</a></li>
	<li><a href='https://decoded.avast.io/2022/07/'>July 2022</a></li>
	<li><a href='https://decoded.avast.io/2022/06/'>June 2022</a></li>
	<li><a href='https://decoded.avast.io/2022/05/'>May 2022</a></li>
	<li><a href='https://decoded.avast.io/2022/04/'>April 2022</a></li>
	<li><a href='https://decoded.avast.io/2022/03/'>March 2022</a></li>
	<li><a href='https://decoded.avast.io/2022/02/'>February 2022</a></li>
	<li><a href='https://decoded.avast.io/2022/01/'>January 2022</a></li>
	<li><a href='https://decoded.avast.io/2021/12/'>December 2021</a></li>
	<li><a href='https://decoded.avast.io/2021/11/'>November 2021</a></li>
	<li><a href='https://decoded.avast.io/2021/10/'>October 2021</a></li>
	<li><a href='https://decoded.avast.io/2021/09/'>September 2021</a></li>
	<li><a href='https://decoded.avast.io/2021/08/'>August 2021</a></li>
	<li><a href='https://decoded.avast.io/2021/07/'>July 2021</a></li>
	<li><a href='https://decoded.avast.io/2021/06/'>June 2021</a></li>
	<li><a href='https://decoded.avast.io/2021/05/'>May 2021</a></li>
	<li><a href='https://decoded.avast.io/2021/04/'>April 2021</a></li>
	<li><a href='https://decoded.avast.io/2021/03/'>March 2021</a></li>
	<li><a href='https://decoded.avast.io/2021/02/'>February 2021</a></li>
	<li><a href='https://decoded.avast.io/2020/12/'>December 2020</a></li>
	<li><a href='https://decoded.avast.io/2020/11/'>November 2020</a></li>
	<li><a href='https://decoded.avast.io/2020/10/'>October 2020</a></li>
	<li><a href='https://decoded.avast.io/2020/09/'>September 2020</a></li>
	<li><a href='https://decoded.avast.io/2020/08/'>August 2020</a></li>
	<li><a href='https://decoded.avast.io/2020/06/'>June 2020</a></li>
	<li><a href='https://decoded.avast.io/2020/05/'>May 2020</a></li>
	<li><a href='https://decoded.avast.io/2020/04/'>April 2020</a></li>
	<li><a href='https://decoded.avast.io/2019/12/'>December 2019</a></li>
	<li><a href='https://decoded.avast.io/2019/09/'>September 2019</a></li>
	<li><a href='https://decoded.avast.io/2019/08/'>August 2019</a></li>
	<li><a href='https://decoded.avast.io/2019/07/'>July 2019</a></li>
	<li><a href='https://decoded.avast.io/2019/04/'>April 2019</a></li>
	<li><a href='https://decoded.avast.io/2019/03/'>March 2019</a></li>
	<li><a href='https://decoded.avast.io/2019/02/'>February 2019</a></li>
	<li><a href='https://decoded.avast.io/2019/01/'>January 2019</a></li>
	<li><a href='https://decoded.avast.io/2018/08/'>August 2018</a></li>
	<li><a href='https://decoded.avast.io/2018/01/'>January 2018</a></li>
	<li><a href='https://decoded.avast.io/2017/10/'>October 2017</a></li>
			</ul>

			</div></div><div id="meta-2" class="widget widget_meta"><div class="widget-inside johannes-bg-alt-2"><h4 class="widget-title">Meta</h4>
		<ul>
						<li><a rel="nofollow" href="https://decoded.avast.io/wp-login.php">Log in</a></li>
			<li><a href="https://decoded.avast.io/feed/">Entries feed</a></li>
			<li><a href="https://decoded.avast.io/comments/feed/">Comments feed</a></li>

			<li><a href="https://wordpress.org/">WordPress.org</a></li>
		</ul>

		</div></div>    
</div>
<script type="text/javascript" src="https://decoded.avast.io/wp-includes/js/imagesloaded.min.js?ver=5.0.0" id="imagesloaded-js"></script>
<script type="text/javascript" src="https://decoded.avast.io/wp-includes/js/masonry.min.js?ver=4.2.2" id="masonry-js"></script>
<script type="text/javascript" src="https://decoded.avast.io/wp-includes/js/jquery/jquery.masonry.min.js?ver=3.1.2b" id="jquery-masonry-js"></script>
<script type="text/javascript" id="johannes-main-js-extra">
/* <![CDATA[ */
var johannes_js_settings = {"rtl_mode":"","header_sticky":"","header_sticky_offset":"300","header_sticky_up":"","popup":"1","go_to_top":"1","grid":{"column":50,"gutter":{"xs":15,"sm":15,"md":30,"lg":30,"xl":48},"breakpoint":{"xs":0,"sm":374,"md":600,"lg":900,"xl":1128}}};
/* ]]> */
</script>
<script type="text/javascript" src="https://decoded.avast.io/wp-content/themes/johannes/assets/js/min.js?ver=1.1.3" id="johannes-main-js"></script>
<script type="text/javascript" src="https://decoded.avast.io/wp-content/plugins/meks-easy-social-share/assets/js/main.js?ver=1.3" id="meks_ess-main-js"></script>
<script type="text/javascript" src="https://decoded.avast.io/wp-content/plugins/page-links-to/dist/new-tab.js?ver=3.3.7" id="page-links-to-js"></script>
<script type="text/javascript">(function (undefined) {let scriptOptions={"_localizedStrings":{"redirect_overlay_title":"Hold On","redirect_overlay_text":"You are being redirected to another page,<br>it may take a few seconds.","webview_notification_text":"The selected provider doesn't support embedded browsers!"},"_targetWindow":"prefer-popup","_redirectOverlay":"overlay-with-spinner-and-message","_unsupportedWebviewBehavior":""};
/**
 * Used when Cross-Origin-Opener-Policy blocked the access to the opener. We can't have a reference of the opened windows, so we should attempt to refresh only the windows that has opened popups.
 */
window._nslHasOpenedPopup = false;
window._nslWebViewNoticeElement = null;

window.NSLPopup = function (url, title, w, h) {
    const userAgent = navigator.userAgent,
        mobile = function () {
            return /\b(iPhone|iP[ao]d)/.test(userAgent) ||
                /\b(iP[ao]d)/.test(userAgent) ||
                /Android/i.test(userAgent) ||
                /Mobile/i.test(userAgent);
        },
        screenX = window.screenX !== undefined ? window.screenX : window.screenLeft,
        screenY = window.screenY !== undefined ? window.screenY : window.screenTop,
        outerWidth = window.outerWidth !== undefined ? window.outerWidth : document.documentElement.clientWidth,
        outerHeight = window.outerHeight !== undefined ? window.outerHeight : document.documentElement.clientHeight - 22,
        targetWidth = mobile() ? null : w,
        targetHeight = mobile() ? null : h,
        left = parseInt(screenX + (outerWidth - targetWidth) / 2, 10),
        right = parseInt(screenY + (outerHeight - targetHeight) / 2.5, 10),
        features = [];
    if (targetWidth !== null) {
        features.push('width=' + targetWidth);
    }
    if (targetHeight !== null) {
        features.push('height=' + targetHeight);
    }
    features.push('left=' + left);
    features.push('top=' + right);
    features.push('scrollbars=1');

    const newWindow = window.open(url, title, features.join(','));

    if (window.focus) {
        newWindow.focus();
    }

    window._nslHasOpenedPopup = true;

    return newWindow;
};

let isWebView = null;

function checkWebView() {
    if (isWebView === null) {
        function _detectOS(ua) {
            if (/Android/.test(ua)) {
                return "Android";
            } else if (/iPhone|iPad|iPod/.test(ua)) {
                return "iOS";
            } else if (/Windows/.test(ua)) {
                return "Windows";
            } else if (/Mac OS X/.test(ua)) {
                return "Mac";
            } else if (/CrOS/.test(ua)) {
                return "Chrome OS";
            } else if (/Firefox/.test(ua)) {
                return "Firefox OS";
            }
            return "";
        }

        function _detectBrowser(ua) {
            let android = /Android/.test(ua);

            if (/Opera Mini/.test(ua) || / OPR/.test(ua) || / OPT/.test(ua)) {
                return "Opera";
            } else if (/CriOS/.test(ua)) {
                return "Chrome for iOS";
            } else if (/Edge/.test(ua)) {
                return "Edge";
            } else if (android && /Silk\//.test(ua)) {
                return "Silk";
            } else if (/Chrome/.test(ua)) {
                return "Chrome";
            } else if (/Firefox/.test(ua)) {
                return "Firefox";
            } else if (android) {
                return "AOSP";
            } else if (/MSIE|Trident/.test(ua)) {
                return "IE";
            } else if (/Safari\//.test(ua)) {
                return "Safari";
            } else if (/AppleWebKit/.test(ua)) {
                return "WebKit";
            }
            return "";
        }

        function _detectBrowserVersion(ua, browser) {
            if (browser === "Opera") {
                return /Opera Mini/.test(ua) ? _getVersion(ua, "Opera Mini/") :
                    / OPR/.test(ua) ? _getVersion(ua, " OPR/") :
                        _getVersion(ua, " OPT/");
            } else if (browser === "Chrome for iOS") {
                return _getVersion(ua, "CriOS/");
            } else if (browser === "Edge") {
                return _getVersion(ua, "Edge/");
            } else if (browser === "Chrome") {
                return _getVersion(ua, "Chrome/");
            } else if (browser === "Firefox") {
                return _getVersion(ua, "Firefox/");
            } else if (browser === "Silk") {
                return _getVersion(ua, "Silk/");
            } else if (browser === "AOSP") {
                return _getVersion(ua, "Version/");
            } else if (browser === "IE") {
                return /IEMobile/.test(ua) ? _getVersion(ua, "IEMobile/") :
                    /MSIE/.test(ua) ? _getVersion(ua, "MSIE ")
                        :
                        _getVersion(ua, "rv:");
            } else if (browser === "Safari") {
                return _getVersion(ua, "Version/");
            } else if (browser === "WebKit") {
                return _getVersion(ua, "WebKit/");
            }
            return "0.0.0";
        }

        function _getVersion(ua, token) {
            try {
                return _normalizeSemverString(ua.split(token)[1].trim().split(/[^\w\.]/)[0]);
            } catch (o_O) {
            }
            return "0.0.0";
        }

        function _normalizeSemverString(version) {
            const ary = version.split(/[\._]/);
            return (parseInt(ary[0], 10) || 0) + "." +
                (parseInt(ary[1], 10) || 0) + "." +
                (parseInt(ary[2], 10) || 0);
        }

        function _isWebView(ua, os, browser, version, options) {
            switch (os + browser) {
                case "iOSSafari":
                    return false;
                case "iOSWebKit":
                    return _isWebView_iOS(options);
                case "AndroidAOSP":
                    return false;
                case "AndroidChrome":
                    return parseFloat(version) >= 42 ? /; wv/.test(ua) : /\d{2}\.0\.0/.test(version) ? true : _isWebView_Android(options);
            }
            return false;
        }

        function _isWebView_iOS(options) {
            const document = (window["document"] || {});

            if ("WEB_VIEW" in options) {
                return options["WEB_VIEW"];
            }
            return !("fullscreenEnabled" in document || "webkitFullscreenEnabled" in document || false);
        }

        function _isWebView_Android(options) {
            if ("WEB_VIEW" in options) {
                return options["WEB_VIEW"];
            }
            return !("requestFileSystem" in window || "webkitRequestFileSystem" in window || false);
        }

        const options = {},
            nav = window.navigator || {},
            ua = nav.userAgent || "",
            os = _detectOS(ua),
            browser = _detectBrowser(ua),
            browserVersion = _detectBrowserVersion(ua, browser);

        isWebView = _isWebView(ua, os, browser, browserVersion, options);
    }

    return isWebView;
}

function isAllowedWebViewForUserAgent(provider) {
    const facebookAllowedWebViews = [
        'Instagram',
        'FBAV',
        'FBAN'
    ];
    let whitelist = [];

    if (provider && provider === 'facebook') {
        whitelist = facebookAllowedWebViews;
    }

    const nav = window.navigator || {},
        ua = nav.userAgent || "";

    if (whitelist.length && ua.match(new RegExp(whitelist.join('|')))) {
        return true;
    }

    return false;
}

function disableButtonInWebView(providerButtonElement) {
    if (providerButtonElement) {
        providerButtonElement.classList.add('nsl-disabled-provider');
        providerButtonElement.setAttribute('href', '#');

        providerButtonElement.addEventListener('pointerdown', (e) => {
            if (!window._nslWebViewNoticeElement) {
                window._nslWebViewNoticeElement = document.createElement('div');
                window._nslWebViewNoticeElement.id = "nsl-notices-fallback";
                window._nslWebViewNoticeElement.addEventListener('pointerdown', function (e) {
                    this.parentNode.removeChild(this);
                    window._nslWebViewNoticeElement = null;
                });
                const webviewNoticeHTML = '<div class="error"><p>' + scriptOptions._localizedStrings.webview_notification_text + '</p></div>';

                window._nslWebViewNoticeElement.insertAdjacentHTML("afterbegin", webviewNoticeHTML);
                document.body.appendChild(window._nslWebViewNoticeElement);
            }
        });
    }

}

window._nslDOMReady(function () {

    window.nslRedirect = function (url) {
        if (scriptOptions._redirectOverlay) {
            const overlay = document.createElement('div');
            overlay.id = "nsl-redirect-overlay";
            let overlayHTML = '';
            const overlayContainer = "<div id='nsl-redirect-overlay-container'>",
                overlayContainerClose = "</div>",
                overlaySpinner = "<div id='nsl-redirect-overlay-spinner'></div>",
                overlayTitle = "<p id='nsl-redirect-overlay-title'>" + scriptOptions._localizedStrings.redirect_overlay_title + "</p>",
                overlayText = "<p id='nsl-redirect-overlay-text'>" + scriptOptions._localizedStrings.redirect_overlay_text + "</p>";

            switch (scriptOptions._redirectOverlay) {
                case "overlay-only":
                    break;
                case "overlay-with-spinner":
                    overlayHTML = overlayContainer + overlaySpinner + overlayContainerClose;
                    break;
                default:
                    overlayHTML = overlayContainer + overlaySpinner + overlayTitle + overlayText + overlayContainerClose;
                    break;
            }

            overlay.insertAdjacentHTML("afterbegin", overlayHTML);
            document.body.appendChild(overlay);
        }

        window.location = url;
    };

    let targetWindow = scriptOptions._targetWindow || 'prefer-popup',
        lastPopup = false;


    document.addEventListener('click', function (e) {
        if (e.target) {
            const buttonLinkElement = e.target.closest('a[data-plugin="nsl"][data-action="connect"]') || e.target.closest('a[data-plugin="nsl"][data-action="link"]');
            if (buttonLinkElement) {
                if (lastPopup && !lastPopup.closed) {
                    e.preventDefault();
                    lastPopup.focus();
                } else {

                    let href = buttonLinkElement.href,
                        success = false;
                    if (href.indexOf('?') !== -1) {
                        href += '&';
                    } else {
                        href += '?';
                    }

                    const redirectTo = buttonLinkElement.dataset.redirect;
                    if (redirectTo === 'current') {
                        href += 'redirect=' + encodeURIComponent(window.location.href) + '&';
                    } else if (redirectTo && redirectTo !== '') {
                        href += 'redirect=' + encodeURIComponent(redirectTo) + '&';
                    }

                    if (targetWindow !== 'prefer-same-window' && checkWebView()) {
                        targetWindow = 'prefer-same-window';
                    }

                    if (targetWindow === 'prefer-popup') {
                        lastPopup = NSLPopup(href + 'display=popup', 'nsl-social-connect', buttonLinkElement.dataset.popupwidth, buttonLinkElement.dataset.popupheight);
                        if (lastPopup) {
                            success = true;
                            e.preventDefault();
                        }
                    } else if (targetWindow === 'prefer-new-tab') {
                        const newTab = window.open(href + 'display=popup', '_blank');
                        if (newTab) {
                            if (window.focus) {
                                newTab.focus();
                            }
                            success = true;
                            window._nslHasOpenedPopup = true;
                            e.preventDefault();
                        }
                    }

                    if (!success) {
                        window.location = href;
                        e.preventDefault();
                    }
                }
            }
        }
    });

    let buttonCountChanged = false;

    const googleLoginButtons = document.querySelectorAll(' a[data-plugin="nsl"][data-provider="google"]');
    if (googleLoginButtons.length && checkWebView()) {
        googleLoginButtons.forEach(function (googleLoginButton) {
            if (scriptOptions._unsupportedWebviewBehavior === 'disable-button') {
                disableButtonInWebView(googleLoginButton);
            } else {
                googleLoginButton.remove();
                buttonCountChanged = true;
            }
        });
    }

    const facebookLoginButtons = document.querySelectorAll(' a[data-plugin="nsl"][data-provider="facebook"]');
    if (facebookLoginButtons.length && checkWebView() && /Android/.test(window.navigator.userAgent) && !isAllowedWebViewForUserAgent('facebook')) {
        facebookLoginButtons.forEach(function (facebookLoginButton) {
            if (scriptOptions._unsupportedWebviewBehavior === 'disable-button') {
                disableButtonInWebView(facebookLoginButton);
            } else {
                facebookLoginButton.remove();
                buttonCountChanged = true;
            }
        });
    }

    const separators = document.querySelectorAll('div.nsl-separator');
    if (buttonCountChanged && separators.length) {
        separators.forEach(function (separator) {
            const separatorParentNode = separator.parentNode;
            if (separatorParentNode) {
                const separatorButtonContainer = separatorParentNode.querySelector('div.nsl-container-buttons');
                if (separatorButtonContainer && !separatorButtonContainer.hasChildNodes()) {
                    separator.remove();
                }
            }
        })
    }
});

/**
 * Cross-Origin-Opener-Policy blocked the access to the opener
 */
if (typeof BroadcastChannel === "function") {
    const _nslLoginBroadCastChannel = new BroadcastChannel('nsl_login_broadcast_channel');
    _nslLoginBroadCastChannel.onmessage = (event) => {
        if (window?._nslHasOpenedPopup && event.data?.action === 'redirect') {
            window._nslHasOpenedPopup = false;

            const url = event.data?.href;
            _nslLoginBroadCastChannel.close();
            if (typeof window.nslRedirect === 'function') {
                window.nslRedirect(url);
            } else {
                window.opener.location = url;
            }
        }
    };
}})();</script></body>

</html>