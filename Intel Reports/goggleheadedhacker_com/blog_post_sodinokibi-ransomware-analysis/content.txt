<!DOCTYPE html>
<html lang="en-US">
  <head>
    <meta charset='utf-8'>
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="/assets/css/style.css">
    <link rel="shortcut icon" type="image/png" href="/favicon.png">
    
<!-- Begin Jekyll SEO tag v2.8.0 -->
<title>Sodinokibi Ransomware Analysis | GoggleHeadedHacker</title>
<meta name="generator" content="Jekyll v4.3.2" />
<meta property="og:title" content="Sodinokibi Ransomware Analysis" />
<meta name="author" content="Jacob Pimental" />
<meta property="og:locale" content="en_US" />
<meta name="description" content="Sodinokibi is a Ransomware-as-a-Service provider that has been covered in the news quite a bit recently. This article takes a deep-dive analysis into the inner workings of how the ransomware operates. It will focus on technical details such as how encryption keys are generated and how files are encrypted." />
<meta property="og:description" content="Sodinokibi is a Ransomware-as-a-Service provider that has been covered in the news quite a bit recently. This article takes a deep-dive analysis into the inner workings of how the ransomware operates. It will focus on technical details such as how encryption keys are generated and how files are encrypted." />
<link rel="canonical" href="https://goggleheadedhacker.com/blog/post/sodinokibi-ransomware-analysis" />
<meta property="og:url" content="https://goggleheadedhacker.com/blog/post/sodinokibi-ransomware-analysis" />
<meta property="og:site_name" content="GoggleHeadedHacker" />
<meta property="og:image" content="https://goggleheadedhacker.com/assets/images/thumbnails/sodinokibi_ransomware_analysis.jpg" />
<meta property="og:type" content="article" />
<meta property="article:published_time" content="2021-05-02T00:00:00+00:00" />
<meta name="twitter:card" content="summary_large_image" />
<meta property="twitter:image" content="https://goggleheadedhacker.com/assets/images/thumbnails/sodinokibi_ransomware_analysis.jpg" />
<meta property="twitter:title" content="Sodinokibi Ransomware Analysis" />
<meta name="twitter:site" content="@Jacob_Pimental" />
<meta name="twitter:creator" content="@Jacob Pimental" />
<script type="application/ld+json">
{"@context":"https://schema.org","@type":"BlogPosting","author":{"@type":"Person","name":"Jacob Pimental"},"dateModified":"2021-05-02T00:00:00+00:00","datePublished":"2021-05-02T00:00:00+00:00","description":"Sodinokibi is a Ransomware-as-a-Service provider that has been covered in the news quite a bit recently. This article takes a deep-dive analysis into the inner workings of how the ransomware operates. It will focus on technical details such as how encryption keys are generated and how files are encrypted.","headline":"Sodinokibi Ransomware Analysis","image":"https://goggleheadedhacker.com/assets/images/thumbnails/sodinokibi_ransomware_analysis.jpg","mainEntityOfPage":{"@type":"WebPage","@id":"https://goggleheadedhacker.com/blog/post/sodinokibi-ransomware-analysis"},"url":"https://goggleheadedhacker.com/blog/post/sodinokibi-ransomware-analysis"}</script>
<!-- End Jekyll SEO tag -->

</head>

  <body>
    <div id="navbar" class="navbar">
    <a href="/" class="nav-title">
        <img class="nav-img" src="/assets/images/homepage/logo_plain_svg.svg">
        <h1>GoggleHeadedHacker</h1>
    </a>
    <label for="click" id="link-list-mobile-button" class="link-list-mobile-button">
        <input id="click" class="chkbx" type="checkbox">
        <span></span>
        <span></span>
        <span></span>
    </label>
    <div id="link-list" class="link-list">
        <div id="search-container">
            <input id="search" type="text" placeholder="Search...">
            <div id="results-container">
                <ul id="results-list"></ul>
            </div>
        </div>
        <a href="/about">About</a>
        <a href="/projects">Projects</a>
        <a href="/contact">Contact</a>
        <a class="r" href="/feed.xml"><i class="fa-solid fa-rss"></i></a>
    </div>
</div>

<script src="\assets\js\simple-jekyll-search.min.js" type="text/javascript"></script>

<script>
    SimpleJekyllSearch({
        searchInput: document.getElementById('search'),
        resultsContainer: document.getElementById('results-list'),
        json: '/assets/config/posts.json',
        limit: 30
    })

    const searchBar = document.getElementById("search");
    const clickInput = document.getElementById("click");
    const linkListMobileButton = document.getElementById("link-list-mobile-button");

    clickInput.addEventListener("change", function() {
        if (this.checked) {
            linkListMobileButton.classList.add("checked");
        } else {
            linkListMobileButton.classList.remove("checked");
            searchBar.value = '';
        }
    });


    var prevScrollpos = window.pageYOffset;
    window.onscroll = function() {
        var currentScrollPos = window.pageYOffset;
        var element = document.getElementById("click");
        if ((prevScrollpos > currentScrollPos && screen.width <= 800) || element.checked) {
            document.getElementById("navbar").style.top = "0";
        } else if (prevScrollpos < currentScrollPos && screen.width <= 800) {
            document.getElementById("navbar").style.top = "-5rem";
        }
        prevScrollpos = currentScrollPos;
    }
</script>
    <div class="container">
      <div class="main_content post">
        <img style="width:35rem" src="/assets/images/thumbnails/sodinokibi_ransomware_analysis.jpg" alt="Sodinokibi Ransomware Analysis">
        <h1>Sodinokibi Ransomware Analysis</h1>
        <h3>02 May 2021</h3>
        <p>By Jacob Pimental</p>
        <div class="share-box">

    <a class="f" href="https://www.facebook.com/sharer/sharer.php?u=https://goggleheadedhacker.com/blog/post/sodinokibi-ransomware-analysis" onclick="window.open(this.href, 'mywin',
    'left=20,top=20,width=500,height=500,toolbar=1,resizable=0'); return false;" ><i class="fa-brands fa-facebook"></i></a>

    <a class="t" href="https://twitter.com/intent/tweet?text=&url=https://goggleheadedhacker.com/blog/post/sodinokibi-ransomware-analysis" onclick="window.open(this.href, 'mywin',
    'left=20,top=20,width=500,height=500,toolbar=1,resizable=0'); return false;"><i class="fa-brands fa-twitter"></i></a>

    <a class="r" href="http://www.reddit.com/submit?url=https://goggleheadedhacker.com/blog/post/sodinokibi-ransomware-analysis" onclick="window.open(this.href, 'mywin',
    'left=20,top=20,width=900,height=500,toolbar=1,resizable=0'); return false;" ><i class="fa-brands fa-reddit"></i></a>

    <a class="l" href="https://www.linkedin.com/shareArticle?mini=true&url=https://goggleheadedhacker.com/blog/post/sodinokibi-ransomware-analysis&title=Sodinokibi Ransomware Analysis" onclick="window.open(this.href, 'mywin',
    'left=20,top=20,width=500,height=500,toolbar=1,resizable=0'); return false;" ><i class="fa-brands fa-linkedin"></i></a>

    <a class="e" href="mailto:?subject=&amp;body=Check out this site https://goggleheadedhacker.com/blog/post/sodinokibi-ransomware-analysis"><i class="fa-solid fa-envelope"></i></a>                          
</div>

        <br>
        
<p>Back in March, a new version of the Sodinokibi (AKA REvil) Ransomware was released. Sodinokibi is a Ransomware-as-a-Service (RaaS) provider that has been covered in the news quite a bit. With the new version out, I decided to give a technical analysis of how it operates. I got the sample from an overview of the new features that R3MRUM gave in a tweet towards the end of March. The file, whose hash is <code class="language-plaintext highlighter-rouge">12d8bfa1aeb557c146b98f069f3456cc8392863a2f4ad938722cd7ca1a773b39</code>, can be found on <a href="https://www.virustotal.com/gui/file/12d8bfa1aeb557c146b98f069f3456cc8392863a2f4ad938722cd7ca1a773b39/detection">VirusTotal</a> or <a href="https://app.any.run/tasks/41cee64f-b909-4eaf-a106-16865999db4f/">Any.Run</a>.</p>

<blockquote class="twitter-tweet" data-theme="dark"><p lang="en" dir="ltr">🆕 <a href="https://twitter.com/hashtag/REvil?src=hash&amp;ref_src=twsrc%5Etfw">#REvil</a> v2.05<br /><br />-smode switch configures OS to boot into safe mode w/ networking via:<br /><br />(pre-Vista) bootcfg /raw /a /safeboot:network /id 1<br />or<br />(Vista+) bcdedit /set {current} safeboot network<br /><br />configures auto-lognn via WinLogon 🔑 w/ &#39;DTrump4ever&#39; password</p>&mdash; R3MRUM (@R3MRUM) <a href="https://twitter.com/R3MRUM/status/1375455360878669824?ref_src=twsrc%5Etfw">March 26, 2021</a></blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<ol id="markdown-toc">
  <li><a href="#background" id="markdown-toc-background">Background</a></li>
  <li><a href="#analysis-tldr" id="markdown-toc-analysis-tldr">Analysis TL;DR</a></li>
  <li><a href="#anti-analysis-features-used-in-sodinokibi" id="markdown-toc-anti-analysis-features-used-in-sodinokibi">Anti-Analysis Features Used in Sodinokibi</a>    <ol>
      <li><a href="#dynamic-import-address-table-iat" id="markdown-toc-dynamic-import-address-table-iat">Dynamic Import Address Table (IAT)</a></li>
      <li><a href="#string-encryption" id="markdown-toc-string-encryption">String Encryption</a></li>
    </ol>
  </li>
  <li><a href="#configuration-information" id="markdown-toc-configuration-information">Configuration Information</a></li>
  <li><a href="#command-line-arguments" id="markdown-toc-command-line-arguments">Command-line Arguments</a></li>
  <li><a href="#language-checks" id="markdown-toc-language-checks">Language Checks</a></li>
  <li><a href="#key-generation" id="markdown-toc-key-generation">Key Generation</a></li>
  <li><a href="#persistence" id="markdown-toc-persistence">Persistence</a>    <ol>
      <li><a href="#run-on-startup" id="markdown-toc-run-on-startup">Run On Startup</a></li>
      <li><a href="#reg-key-creation" id="markdown-toc-reg-key-creation">Reg Key Creation</a></li>
    </ol>
  </li>
  <li><a href="#sodinokibi-safemode" id="markdown-toc-sodinokibi-safemode">Sodinokibi SafeMode</a></li>
  <li><a href="#privilege-escalation" id="markdown-toc-privilege-escalation">Privilege Escalation</a></li>
  <li><a href="#service-and-process-killing" id="markdown-toc-service-and-process-killing">Service and Process Killing</a></li>
  <li><a href="#shadow-copy-deletion" id="markdown-toc-shadow-copy-deletion">Shadow Copy Deletion</a></li>
  <li><a href="#c2-communication" id="markdown-toc-c2-communication">C2 Communication</a></li>
  <li><a href="#file-encryption" id="markdown-toc-file-encryption">File Encryption</a></li>
  <li><a href="#ransom-note-generation" id="markdown-toc-ransom-note-generation">Ransom Note Generation</a></li>
  <li><a href="#conclusion" id="markdown-toc-conclusion">Conclusion</a></li>
  <li><a href="#iocs" id="markdown-toc-iocs">IOCs</a></li>
  <li><a href="#attck-methodologies" id="markdown-toc-attck-methodologies">ATT&amp;CK Methodologies</a></li>
</ol>

<h2 id="background">Background</h2>

<p>Sodinokibi, or REvil, was first discovered in April of 2019 where it was seen <a href="https://blog.talosintelligence.com/2019/04/sodinokibi-ransomware-exploits-weblogic.html">exploiting a vulnerability in Oracle WebLogic</a>. It shares many similarities to the GandCrab ransomware strain that retired around the same time Sodinokibi popped up, leading researchers to speculate whether this ransomware is operated by the same people.</p>

<p>Being a Ransomware-as-a-Service means that clients will pay the operators for access to the latest version and have the group operate the infrastructure for them. There are two fields in Sodinokibi’s configuration that will keep track of the client and the particular client campaign during which the ransomware is deployed. You can find this information in the <a href="#configuration-information">configuration section below</a>.</p>

<p>Sodinokbi has been seen used in several notable breaches including <a href="https://www.acronis.com/en-us/blog/posts/travelex-hit-powerful-sodinokibi-ransomware-attack">Travelex</a> and <a href="https://securityboulevard.com/2021/03/sodinokibi-revil-ransomware-gang-hit-acer-with-50m-ransom-demand/">Acer</a>. The group has recently updated the strain to add a new feature that will reboot Windows into Safe Mode to bypass AV.</p>

<h2 id="analysis-tldr">Analysis TL;DR</h2>

<p>Sodinokibi will start by dynamically building an import table to make it harder for analysts to statically analyze the sample. It also uses encrypted strings throughout the binary to make it difficult to analyze. During the initial startup phase, Sodinokibi will decrypt its configuration using RC4 which contains information such as C2 domains and one of the public keys Sodinokibi will use when encrypting files.</p>

<p>After the initial startup phase, Sodinokibi will check the user’s language and keyboard layout to see if they are in a whitelisted location. If not, then the ransomware will generate a public and private key pair using the Elliptic-Curve Diffie-Hellman algorithm. Sodinokibi stores private and public keys as well as other important information in specific registry keys to use next time the sample is run.</p>

<p>This version of Sodinokibi comes with a new feature known as SafeMode which will reboot the compromised computer into Windows Safe Mode with Networking. This will prevent most antivirus software from running which means Sodinokibi can run without issue.</p>

<p>If the <code class="language-plaintext highlighter-rouge">exp</code> value in the configuration is set to <code class="language-plaintext highlighter-rouge">true</code>, Sodinokibi will attempt to escalate privileges by prompting the user in an endless loop. After this, Sodinokibi will delete shadow copies and kill any processes or services that match a list stored in its configuration. It will also send information about the computer it is running on as well as the generated private key to a list of C2 domains during this phase.</p>

<p>Finally, Sodinokibi will use Windows IO Completion Ports to quickly encrypt files on the system, ignoring those that match the whitelisted filenames. The files are encrypted using the Salsa20 algorithm with a metadata blob the attacker can use to decrypt the file being appended to the end. Sodinokibi can walk through local drives as well as network shares depending on if the <code class="language-plaintext highlighter-rouge">-nolan</code> and <code class="language-plaintext highlighter-rouge">-nolocal</code> command-line switches are set. After all the files are encrypted, Sodinokibi will change the user’s background to tell them to read the ransom note.</p>

<h2 id="anti-analysis-features-used-in-sodinokibi">Anti-Analysis Features Used in Sodinokibi</h2>

<h3 id="dynamic-import-address-table-iat">Dynamic Import Address Table (IAT)</h3>

<p>Sodinokibi will manually load the import address table as an anti-analysis technique. It does this by looping through a list of DWORDs and putting the correct function pointer into the IAT depending on the value of the DWORD. To bypass this technique, I ran the binary in x64dbg and dumped it after the call to the IAT population function using Scylla. This allowed me to continue analyzing this sample statically without having to worry about which functions were being called.</p>

<h3 id="string-encryption">String Encryption</h3>

<p>Most of the strings in the Sodinokibi sample were encrypted. The string decryption function will take five arguments: an address in memory that is served as a base, the offset from that base to the start of the key, the key length, the length of the ciphertext, and a pointer to the target variable to populate with the decrypted string.</p>

<p><img src="/assets/images/posts/revil-analysis/string-decryption-function.png" alt="string decryption function" />
<em>String Decryption Function</em></p>

<p>The function will then take the data from <code class="language-plaintext highlighter-rouge">base + offset</code>:<code class="language-plaintext highlighter-rouge">base + offset + key_length</code> and store it in a buffer that it will use as a key. It will use that key to RC4 decrypt the data at <code class="language-plaintext highlighter-rouge">base + offset + key_length</code>:<code class="language-plaintext highlighter-rouge">base + offset + key_length + ciphertext_length</code>. It will store the RC4 decrypted result in the <code class="language-plaintext highlighter-rouge">target</code> variable.</p>

<p><img src="/assets/images/posts/revil-analysis/sbox-generation-algorithm.png" alt="sbox generation algorithm" />
<em>Substitution Box generation algorithm which led me to believe this was RC4</em></p>

<p><img src="/assets/images/posts/revil-analysis/encrypted-data-structure.png" alt="Encrypted Data Structure" />
<em>Structure of the encrypted data</em></p>

<p>From this information, I created a small script in Python that will take the first four parameters passed into the decryption function and return the resulting string. You can find that script on my <a href="https://github.com/JacobPimental/Malware-Analysis-Notes/blob/main/Sodinokibi/string_decrypt.py">GitHub</a>.</p>

<h2 id="configuration-information">Configuration Information</h2>

<p>The configuration for the Sodinokibi sample is stored as an RC4 encrypted JSON string in a section of the binary appropriately named <code class="language-plaintext highlighter-rouge">.cfg</code>. The key for decrypting the configuration is contained in the first 32 bytes of the section. After that section is a CRC hash of the ciphertext that Sodinokibi uses to validate the data before decrypting. Below is a table of all four parts of the section:</p>

<div class="table">

  <table>
    <thead>
      <tr>
        <th><strong>Offset (Bytes)</strong></th>
        <th><strong>Data</strong></th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>0x0 - 0x20</td>
        <td>RC4 Key</td>
      </tr>
      <tr>
        <td>0x20 - 0x24</td>
        <td>CRC Hash of Ciphertext</td>
      </tr>
      <tr>
        <td>0x24 - 0x28</td>
        <td>Length of Ciphertext</td>
      </tr>
      <tr>
        <td>0x28 - …</td>
        <td>Ciphertext</td>
      </tr>
    </tbody>
  </table>

</div>

<p>The configuration structure is stored in JSON and contains 19 keys. Below is a table of the information stored in the config:</p>

<div class="table">

  <table>
    <thead>
      <tr>
        <th style="text-align: center"><strong>Field</strong></th>
        <th><strong>Description</strong></th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td style="text-align: center">pk</td>
        <td>Public Key stored as a Base64 encoded string</td>
      </tr>
      <tr>
        <td style="text-align: center">pid</td>
        <td>Unique value that identifies the client</td>
      </tr>
      <tr>
        <td style="text-align: center">sub</td>
        <td>Unique value that identifies the campaign</td>
      </tr>
      <tr>
        <td style="text-align: center">dbg</td>
        <td>Determines whether or not to check the keyboard layout and system language to determine the user’s location</td>
      </tr>
      <tr>
        <td style="text-align: center">et</td>
        <td>Encryption type to use:<br /><ul><li>0 - Encrypt all data in a file</li><li>1 - Encrypt only the first MB of a file</li><li>2 - Encrypt 1 MB then skip the next MBs specified by the <code class="language-plaintext highlighter-rouge">spsize</code> field</li></td>
      </tr>
      <tr>
        <td style="text-align: center">spsize</td>
        <td>Number of MBs to skip when <code class="language-plaintext highlighter-rouge">et</code> is set to 2</td>
      </tr>
      <tr>
        <td style="text-align: center">wipe</td>
        <td>Unused</td>
      </tr>
      <tr>
        <td style="text-align: center">wfld</td>
        <td>Unused</td>
      </tr>
      <tr>
        <td style="text-align: center">wht</td>
        <td>Contains three lists of whitelisted objects:<br /><ul><li>fld: Whitelisted Folders</li><li>fls: Whitelisted Files</li><li>ext: Whitelisted Extensions</li></td>
      </tr>
      <tr>
        <td style="text-align: center">prc</td>
        <td>List of processes to terminate</td>
      </tr>
      <tr>
        <td style="text-align: center">dmn</td>
        <td>List of C2 domains separated by “;”</td>
      </tr>
      <tr>
        <td style="text-align: center">net</td>
        <td>Whether or not to send information to C2</td>
      </tr>
      <tr>
        <td style="text-align: center">svc</td>
        <td>List of services to close and delete</td>
      </tr>
      <tr>
        <td style="text-align: center">nbody</td>
        <td>Body of ransom note stored as a Base64 encoded string</td>
      </tr>
      <tr>
        <td style="text-align: center">nname</td>
        <td>Filename for the ransom note</td>
      </tr>
      <tr>
        <td style="text-align: center">exp</td>
        <td>Whether or not to attempt running the application with Administrator privileges</td>
      </tr>
      <tr>
        <td style="text-align: center">img</td>
        <td>Text to add to the desktop background alerting users that their files are encrypted. Stored as a Base64 encoded string</td>
      </tr>
      <tr>
        <td style="text-align: center">arn</td>
        <td>Whether or not to set a registry key to have the application run on startup</td>
      </tr>
      <tr>
        <td style="text-align: center">rdmcnt</td>
        <td>Maximum number of folders to write the ransom note to. If zero, write the ransom note to all folders</td>
      </tr>
    </tbody>
  </table>

</div>

<p>An interesting thing to note is that both of the unused fields in the configuration were used in previous versions of Sodinokibi. According to an <a href="https://www.pandasecurity.com/emailhtml/2007-CAM-RANSOMWARE-AD360-WG/2006-Report-Sodinokibi-EN.pdf">analysis done from Panda Security</a>, the <code class="language-plaintext highlighter-rouge">wipe</code> value was used to determine if Sodinokibi would delete directories stored in the <code class="language-plaintext highlighter-rouge">wfld</code> value.</p>

<p>The full config from this particular sample can be found <a href="https://github.com/JacobPimental/Malware-Analysis-Notes/blob/main/Sodinokibi/config.json">here</a>.</p>

<h2 id="command-line-arguments">Command-line Arguments</h2>

<p>The newest version of Sodinokibi has seven optional command-line switches that control different aspects of the infection process. The table below gives an overview of the different switches available:</p>

<div class="table">

  <table>
    <thead>
      <tr>
        <th style="text-align: center"><strong>Switch</strong></th>
        <th><strong>Description</strong></th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td style="text-align: center">nolan</td>
        <td>Do not encrypt network shares</td>
      </tr>
      <tr>
        <td style="text-align: center">nolocal</td>
        <td>Do not encrypt local files</td>
      </tr>
      <tr>
        <td style="text-align: center">path</td>
        <td>Specify directory to encrypt</td>
      </tr>
      <tr>
        <td style="text-align: center">smode</td>
        <td>Reboots the computer in Windows Safe Mode</td>
      </tr>
      <tr>
        <td style="text-align: center">silent</td>
        <td>Do not kill processes and services</td>
      </tr>
      <tr>
        <td style="text-align: center">fast</td>
        <td>Only encrypts the first MB of a file (sets <code class="language-plaintext highlighter-rouge">et</code> to 1)</td>
      </tr>
      <tr>
        <td style="text-align: center">full</td>
        <td>Encrypts entire file (sets <code class="language-plaintext highlighter-rouge">et</code> to 0)</td>
      </tr>
    </tbody>
  </table>

</div>

<h2 id="language-checks">Language Checks</h2>

<p>One of the first things Sodinokibi will do is identify the user’s location based on the language of the system and the user’s keyboard layout. Sodinokibi utilizes the <code class="language-plaintext highlighter-rouge">GetUserDefaultUILanguage</code> and <code class="language-plaintext highlighter-rouge">GetSystemDefaultUILanguage</code> functions to get the language code and then runs that code against a list of hardcoded values. If the system language matches, then the program will exit.</p>

<p><img src="/assets/images/posts/revil-analysis/language-whitelist.png" alt="language whitelist" />
<em>List of languages that are whitelisted from being encrypted</em></p>

<p>Next, it will get a list of input locale identifiers for the system using the <code class="language-plaintext highlighter-rouge">GetKeyboardLayoutList</code> function. It will take the last byte of these codes and compare them to a hardcoded list of values. If any of the input locale identifiers match, then execution is halted.</p>

<p><img src="/assets/images/posts/revil-analysis/keyboard-input-locale-list.png" alt="keyboard input locale list" />
<em>List of input locale codes Sodinokibi looks for</em></p>

<h2 id="key-generation">Key Generation</h2>

<p>Sodinokibi will use the elliptic curve algorithm Curve25519 to generate a public and private key pair as well as shared keys that will be used for encryption. Once the key pair is generated, Sodinokibi will take the new private key and encrypt it using the public key in the configuration, <code class="language-plaintext highlighter-rouge">pk</code>, and another public key that is stored in the binary.</p>

<p><img src="/assets/images/posts/revil-analysis/sodinokibi-key-generation.png" alt="Sodinokibi key generation" />
<em>Code snippet that shows public/private key pair being generated and private key being encrypted</em></p>

<p>The encryption process works by creating a new, temporary key pair we’ll call <code class="language-plaintext highlighter-rouge">tmp_key</code> and creating a shared key between the private <code class="language-plaintext highlighter-rouge">tmp_key</code> and the public key passed into the function. We will call this <code class="language-plaintext highlighter-rouge">shared_key</code> for simplicity’s sake. Next, Sodinokibi will generate a random 16 byte IV value. It will then use the IV and <code class="language-plaintext highlighter-rouge">shared_key</code> to encrypt the data that is passed into the function using AES. Finally, Sodinokibi will take the newly encrypted data and append the value of <code class="language-plaintext highlighter-rouge">shared_key</code>, the IV, and the CRC hash of the encrypted data to the end.</p>

<p><img src="/assets/images/posts/revil-analysis/aes-encryption-function.png" alt="AES Encryption Function" />
<em>Function used to encrypt the private key</em></p>

<p>For the ransomware operator to decrypt the data, they would need to use the <code class="language-plaintext highlighter-rouge">shared_key</code> and their own private key to generate a new Curve25519 shared key. They can use this newly generated shared key to decrypt the data.</p>

<p>Analysts from Intel471 managed to find the exact open-source implementation of what Sodinokibi is using to implement the <a href="https://github.com/vstakhov/opt-cryptobox/tree/master/curve25519">Curve25519 algorithm</a>. You can read their full report on it <a href="https://intel471.com/blog/revil-ransomware-as-a-service-an-analysis-of-a-ransomware-affiliate-operation/">here</a>.</p>

<h2 id="persistence">Persistence</h2>

<h3 id="run-on-startup">Run On Startup</h3>

<p>If the value of <code class="language-plaintext highlighter-rouge">arn</code> in Sodinokibi’s configuration info is set to <code class="language-plaintext highlighter-rouge">true</code>, then it will attempt to make itself persistent by creating a registry key under <code class="language-plaintext highlighter-rouge">SOFTWARE\Microsoft\Windows\CurrentVersion\Run</code>. It will create the key <code class="language-plaintext highlighter-rouge">qZhotTgfr3</code> with the path to the binary as the value. This will allow the malware to run every time the user reboots their machine.</p>

<p><img src="/assets/images/posts/revil-analysis/set-run-on-startup-reg-key.png" alt="Set Run on Startup Reg Key" />
<em>Function that will allow the ransomware to run on startup</em></p>

<h3 id="reg-key-creation">Reg Key Creation</h3>

<p>Sodinokibi will also store important information such as generated keys in the registry to retrieve them next time it runs. It will store these keys under <code class="language-plaintext highlighter-rouge">SOFTWARE\BlackLivesMatter</code>. The table below shows the keys it creates and their values:</p>

<div class="table">

  <table>
    <thead>
      <tr>
        <th style="text-align: center"><strong>Key</strong></th>
        <th style="text-align: left"><strong>Value</strong></th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td style="text-align: center">54k</td>
        <td style="text-align: left">Contains the value of <code class="language-plaintext highlighter-rouge">pk</code> from the configuration</td>
      </tr>
      <tr>
        <td style="text-align: center">Krdfp</td>
        <td style="text-align: left">Contains the private key encrypted by the public key in the configuration</td>
      </tr>
      <tr>
        <td style="text-align: center">a0w0</td>
        <td style="text-align: left">Contains the public key generated from elliptic curve function</td>
      </tr>
      <tr>
        <td style="text-align: center">hq0G6X</td>
        <td style="text-align: left">Contains the private key encrypted by the public key in the binary</td>
      </tr>
      <tr>
        <td style="text-align: center">XFx41h1r</td>
        <td style="text-align: left">Contains an encrypted string containing information that is sent to C2 servers (see <a href="#c2-communication">C2 Communication</a> section for more info)</td>
      </tr>
      <tr>
        <td style="text-align: center">x4WHjRs</td>
        <td style="text-align: left">Contains the random file extension that gets appended to encrypted files</td>
      </tr>
    </tbody>
  </table>

</div>

<h2 id="sodinokibi-safemode">Sodinokibi SafeMode</h2>

<p>One of the new features from this version of Sodinokibi is the <code class="language-plaintext highlighter-rouge">-smode</code> flag. When running with this flag, Sodinokibi will reboot the computer into Windows Safe Mode with Networking. The reason for this is that most Antivirus software will not run when Windows is in Safe Mode. This allows Sodinokibi to bypass most Antivirus products easily.</p>

<p>To set up SafeMode, Sodinokibi will grab the current username and change its password to “DTrump4ever”. It will then enable Autologon privileges for the user by editing the <code class="language-plaintext highlighter-rouge">SOFTWARE\Microsoft\Windows NT\CurrentVersion\winlogon</code> registry key. It will also enable the setting for the user to log in with Administrator privileges by default.</p>

<p><img src="/assets/images/posts/revil-analysis/set-automatic-logon.png" alt="Set automatic logon" />
<em>Code that sets automatic logon and changes user password</em></p>

<p>After this, the ransomware will set the <code class="language-plaintext highlighter-rouge">SOFTWARE\Microsoft\CurrentVersion\RunOnce</code> registry key to set itself to run on the next startup. It will store this information in the registry key <code class="language-plaintext highlighter-rouge">AstraZeneca</code>. It will then set the computer to boot into Windows Safe Mode on the next startup using either <code class="language-plaintext highlighter-rouge">bootcfg</code> or <code class="language-plaintext highlighter-rouge">bcdedit</code> depending on the Windows version. You can find the commands in the table below:</p>

<div class="table">

  <table>
    <thead>
      <tr>
        <th style="text-align: center"><strong>Windows Version</strong></th>
        <th><strong>Command</strong></th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td style="text-align: center">Win7 or Greater</td>
        <td><code class="language-plaintext highlighter-rouge">bcdedit /set {current} safeboot network</code></td>
      </tr>
      <tr>
        <td style="text-align: center">Vista or Below</td>
        <td><code class="language-plaintext highlighter-rouge">bootcfg /raw /a /safeboot:network /id 1</code></td>
      </tr>
    </tbody>
  </table>

</div>

<p>To ensure these changes aren’t permanent, the malware will set one more registry key under <code class="language-plaintext highlighter-rouge">RunOnce</code> called <code class="language-plaintext highlighter-rouge">MarineLePen</code>. This will contain another <code class="language-plaintext highlighter-rouge">bootcfg</code> or <code class="language-plaintext highlighter-rouge">bcdedit</code> command that will undo the changes on startup.</p>

<div class="table">

  <table>
    <thead>
      <tr>
        <th style="text-align: center"><strong>Windows Version</strong></th>
        <th><strong>Command</strong></th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td style="text-align: center">Win7 or Greater</td>
        <td><code class="language-plaintext highlighter-rouge">bcdedit /deletevalue {current} safeboot</code></td>
      </tr>
      <tr>
        <td style="text-align: center">Vista or Below</td>
        <td><code class="language-plaintext highlighter-rouge">bootcfg /raw /fastdetect /id 1</code></td>
      </tr>
    </tbody>
  </table>

</div>

<p><img src="/assets/images/posts/revil-analysis/setting-safe-boot-mode.png" alt="Setting Safe Boot Mode" />
<em>Code that sets the computer to boot into Windows Safe Mode</em></p>

<p>Finally, the function will restart the computer by running the command <code class="language-plaintext highlighter-rouge">SHUTDOWN -r -f -t 02</code>.</p>

<h2 id="privilege-escalation">Privilege Escalation</h2>

<p>If the value of <code class="language-plaintext highlighter-rouge">exp</code> in Sodinokibi’s configuration is set to <code class="language-plaintext highlighter-rouge">true</code>, it will attempt to escalate privileges to Administrator. First, the malware will get a handle to the current process using <code class="language-plaintext highlighter-rouge">GetCurrentProcess</code>. It will then check the current permissions that the process is running using <code class="language-plaintext highlighter-rouge">OpenProcessToken</code> and <code class="language-plaintext highlighter-rouge">GetTokenInformation</code>. If the application is already running as Administrator, then the function will exit. If not, it will use the <code class="language-plaintext highlighter-rouge">runas</code> command through the function <code class="language-plaintext highlighter-rouge">ShellExecute</code> to prompt the user to run the application with Administrator privileges. It will continue to prompt the user in an endless loop until the user finally accepts.</p>

<p><img src="/assets/images/posts/revil-analysis/sodinokibi-privilege-escalation-function.png" alt="Sodinokibi privilege escalation function" />
<em>Function that will elevate Sodinokibi’s privileges</em></p>

<h2 id="service-and-process-killing">Service and Process Killing</h2>

<p>If Sodinokibi is run without the <code class="language-plaintext highlighter-rouge">-silent</code> switch, it will attempt to kill processes and services that match the values in the <code class="language-plaintext highlighter-rouge">prc</code> and <code class="language-plaintext highlighter-rouge">svc</code> lists in the configuration. It will start this by spawning a thread that will create a COM Object for <code class="language-plaintext highlighter-rouge">IWbemServices</code>. Sodinokibi will use this COM Object to search for newly created processes or modified services with the following queries:</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">__InstanceCreationEvent</span> <span class="n">WITHIN</span> <span class="mi">1</span> <span class="k">WHERE</span> <span class="n">TargetInstance</span> <span class="n">ISA</span> <span class="s1">'Win32_Process'</span>
<span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">__InstanceModificationEvent</span> <span class="n">WITHIN</span> <span class="mi">1</span> <span class="k">WHERE</span> <span class="n">TargetInstance</span> <span class="n">ISA</span> <span class="s1">'Win32_Service'</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">IWbemServices::ExecMethodAsync</code> function, shown as offset <code class="language-plaintext highlighter-rouge">0x5c</code> of the created COM Object, will send the results to an <code class="language-plaintext highlighter-rouge">IWbemObjectSink</code> Interface which runs them through another function at offset <code class="language-plaintext highlighter-rouge">0xb32809</code>. This function will compare the process/service name against the lists in the configuration and kill them if they match.</p>

<p><img src="/assets/images/posts/revil-analysis/kill-processes-and-services-with-com-objects.png" alt="Kill Processes and Services with COM Objects" />
<em>Function that kills processes and services using COM Objects</em></p>

<p>Next, Sodinokibi will use the Service Control Manager to loop through all active services and kill them. It does this by getting a handle to the SCManager object by calling <code class="language-plaintext highlighter-rouge">OpenSCManager</code> with “ServicesActive” as one of the arguments. Then it will use <code class="language-plaintext highlighter-rouge">EnumServicesStatusExW</code> to enumerate the returned services and compare each service name to the list in <code class="language-plaintext highlighter-rouge">svc</code>. If they match, then Sodinokibi will delete the service using the <code class="language-plaintext highlighter-rouge">DeleteService</code> function.</p>

<p><img src="/assets/images/posts/revil-analysis/scmanager-delete-services.png" alt="scmanager delete services" />
<em>Function that deletes services using Service Control Manager</em></p>

<p>Finally, Sodinokibi will loop through any active processes using the <code class="language-plaintext highlighter-rouge">Process32FirstW</code> and <code class="language-plaintext highlighter-rouge">Process32NextW</code> functions and run the process name against the <code class="language-plaintext highlighter-rouge">prc</code> list. If the <code class="language-plaintext highlighter-rouge">prc</code> list contains the process name, then the process will be terminated using the <code class="language-plaintext highlighter-rouge">TerminateProcess</code> function.</p>

<p><img src="/assets/images/posts/revil-analysis/loop-active-processes.png" alt="Loop Active Processes" />
<em>Loop that will run active process handles through a function that will terminate them</em></p>

<p><img src="/assets/images/posts/revil-analysis/terminate-process-function.png" alt="Terminate Process Function" />
<em>Function that will take a process handle and terminate it if it’s in the <code class="language-plaintext highlighter-rouge">prc</code> list</em></p>

<h2 id="shadow-copy-deletion">Shadow Copy Deletion</h2>

<p>When the <code class="language-plaintext highlighter-rouge">-silent</code> switch is not present, the Sodinokibi sample will spawn a thread that will delete any shadow copies that are present on the system. It will do this by using COM Objects similar to how it kills processes and services. Sodinokibi will run the query <code class="language-plaintext highlighter-rouge">select * from Win32_ShadowCopy</code> to retrieve an <code class="language-plaintext highlighter-rouge">IEnumWbemClassObject</code> object. It will enumerate each shadow copy object using the <code class="language-plaintext highlighter-rouge">IEnumWbemClassObject::Next</code> function, grab each ID, and delete it using the <code class="language-plaintext highlighter-rouge">IWbemServices::Delete</code> function. The delete function contains a string with the shadow copy’s ID in the form <code class="language-plaintext highlighter-rouge">Win32_ShadowCopy.ID=&lt;ID&gt;</code> as the parameter.</p>

<p><img src="/assets/images/posts/revil-analysis/shadow-copy-deletion-function.png" alt="shadow copy deletion function" />
<em>Function that will delete shadow copies using COM Objects</em></p>

<h2 id="c2-communication">C2 Communication</h2>

<p>When the <code class="language-plaintext highlighter-rouge">net</code> value in the configuration info is set to <code class="language-plaintext highlighter-rouge">true</code>, Sodinokibi will reach out to one of the Command and Control (C2) servers from the <code class="language-plaintext highlighter-rouge">dmn</code> list. First, it will split the list of domains by the “;” character. For each C2 in the list, Sodinokibi will build up an information string in the following format:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"ver"</span><span class="p">:</span><span class="s2">"Version info (0x205, or 2.05 in this case)"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"pid"</span><span class="p">:</span><span class="s2">"pid value from config"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"sub"</span><span class="p">:</span><span class="s2">"sub value from config"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"pk"</span><span class="p">:</span><span class="w"> </span><span class="s2">"pk value from config, base64 decoded"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"uid"</span><span class="p">:</span><span class="s2">"Volume Serial Number and CPU Info"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"sk"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Private Key encrypted by the value of pk"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"unm"</span><span class="p">:</span><span class="s2">"Account Username"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"net"</span><span class="p">:</span><span class="s2">"Computer Name"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"grp"</span><span class="p">:</span><span class="s2">"Computer Domain Name"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"lng"</span><span class="p">:</span><span class="s2">"Language Used (i.e. en-us)"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"bro"</span><span class="p">:</span><span class="s2">"Boolean returned by the language and keyboard check"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"os"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Product Name"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"bit"</span><span class="p">:</span><span class="s2">"Architecture Used (x32 or x64)"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"dsk"</span><span class="p">:</span><span class="s2">"Base64 encoded information about the drives on the computer"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"ext"</span><span class="p">:</span><span class="s2">"Generated extension used for encrypted files"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>Sodinokibi will then take this JSON string and encrypt it using a third public key that is stored in the binary. It will use the same encryption method that was used to encrypt the generated secret key that was <a href="#key-generation">described earlier in this report</a>. Once the JSON information is encrypted, Sodinokibi will take the C2 domain and start to build a random URL in the following form:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> https://&lt;domain&gt;/(wp-content|static|content|include|uploads|news|data|admin)/(images|pictures|image|temp|tmp|graphic|assets|pics|game)/([a-z]{2}){1,10}.(jpg|png|gif)
</code></pre></div></div>

<p>Sodinokibi will then send the data in a POST request with the following headers:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">User-Agent</span><span class="pi">:</span> <span class="s">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.125 Safari/537.36</span>
<span class="na">Content-Type</span><span class="pi">:</span> <span class="s">application/octet-stream</span>
<span class="na">Connection</span><span class="pi">:</span> <span class="s">close</span>
</code></pre></div></div>

<p><img src="/assets/images/posts/revil-analysis/c2-connection-function.png" alt="C2 Connection Function" />
<em>Function that handles connection for C2 domain, with renamed functions to make it clear what the function is doing</em></p>

<h2 id="file-encryption">File Encryption</h2>

<p>To perform file encryption, Sodinokibi uses <a href="https://docs.microsoft.com/en-us/windows/win32/fileio/i-o-completion-ports">I/O Completion Ports</a> to speed up walking the file system. This essentially allows the ransomware to create multiple threads that will wait for a file handle. Once one is sent over, the first available thread will take it and encrypt the file using the Salsa20 Algorithm.</p>

<p><img src="/assets/images/posts/revil-analysis/completionport-creation.png" alt="completionport creation" />
<em>Code that will create a new completion port to use</em></p>

<p>Once the completion port is created, Sodinokibi will walk the local file system if the <code class="language-plaintext highlighter-rouge">-nolocal</code> command-line switch is not set. It will start by enumerating drives and checking the drive type using <code class="language-plaintext highlighter-rouge">GetDriveTypeW</code>. If the drive is valid, it will walk through the files in it using <code class="language-plaintext highlighter-rouge">FindFirstFileExW</code> and <code class="language-plaintext highlighter-rouge">FindFirstFileW</code> depending on the Windows version. It will also check each file and folder name against the <code class="language-plaintext highlighter-rouge">fld</code>, <code class="language-plaintext highlighter-rouge">fls</code>, and <code class="language-plaintext highlighter-rouge">ext</code> lists to see if it is whitelisted from being encrypted. It will also not encrypt a file if it is already marked as encrypted by the Windows File System.</p>

<p>If the <code class="language-plaintext highlighter-rouge">nolan</code> command-line switch is not set, then Sodinokibi will enumerate network shares. It will use <code class="language-plaintext highlighter-rouge">WNetOpenEnumW</code> and <code class="language-plaintext highlighter-rouge">WNetEnumResourceW</code> to get shares to which is can connect. To get permission to access these shares, Sodinokibi will attempt to impersonate the current user using the <code class="language-plaintext highlighter-rouge">ImpersonateLoggedOnUser</code> function. Sodinokibi will first grab the Process ID of “explorer.exe” and use that to grab the access token of the user. It can use that access token to access objects for which the user already has access.</p>

<p><img src="/assets/images/posts/revil-analysis/remote-drive-encryption.png" alt="remote drive encryption" />
<em>Function that will encrypt remote drives</em></p>

<p>For every folder that Sodinokibi finds while walking the file system, it will write a ransom note to it. It will then compare a variable against the value of <code class="language-plaintext highlighter-rouge">rdmcnt</code>. If it is greater than <code class="language-plaintext highlighter-rouge">rdmcnt</code>, it will not write the note. If <code class="language-plaintext highlighter-rouge">rdmcnt</code> is equal to zero, then it will write notes in every folder regardless of the count. The count variable will then increment and the function will exit. This count variable is reset on every drive that gets encrypted, leading me to believe that the <code class="language-plaintext highlighter-rouge">rdmcnt</code> value dictates the maximum number of ransom notes Sodinokibi will write to a drive.</p>

<p>For each file, Sodinokibi will build a metadata structure that it will append to the end of the encrypted file. This value is part of the <code class="language-plaintext highlighter-rouge">lpOverlapped</code> structure that gets passed to the IO Completion Port. The structure can be defined as the following:</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span> <span class="n">rvl_struct</span> <span class="p">{</span>
  <span class="n">BYTE</span> <span class="n">priv_key_encrypted_w_config_pk</span><span class="p">[</span><span class="mi">88</span><span class="p">],</span>
  <span class="n">BYTE</span> <span class="n">priv_key_encrypted_w_bin_pk</span><span class="p">[</span><span class="mi">88</span><span class="p">],</span>
  <span class="n">BYTE</span> <span class="n">generated_pub_key</span><span class="p">[</span><span class="mi">32</span><span class="p">],</span>
  <span class="n">BYTE</span> <span class="n">salsa20_IV</span><span class="p">,</span>
  <span class="n">DWORD</span> <span class="n">crc_of_pub_key</span><span class="p">,</span>
  <span class="n">DWORD</span> <span class="n">value_of_et</span><span class="p">,</span>
  <span class="n">DWORD</span> <span class="n">spsize</span><span class="p">,</span>
  <span class="n">DWORD</span> <span class="n">salsa20_encrypted_null_value</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This structure is used to verify that the file is encrypted and is used to decrypt the file by the attacker. Using this structure, the operator can decrypt the generated private key and use that with the salsa20 IV to decrypt the file.</p>

<p>Once this metadata structure is set up, the file will be posted to the IO Completion Port to be encrypted by one of the spawned threads. Depending on the encryption type, Sodinokibi will either encrypt the entire file (<code class="language-plaintext highlighter-rouge">et</code>=0), only encrypt the first MB (<code class="language-plaintext highlighter-rouge">et</code>=1), or encrypt one MB of the file, skip <code class="language-plaintext highlighter-rouge">spsize</code> MBs then encrypt another MB and repeat (<code class="language-plaintext highlighter-rouge">et</code>=2). Once the file is encrypted, Sodinokibi will append the metadata blob to the end and move to the next file.</p>

<p>Once all files are encrypted, Sodinokibi will set the background image to display the text from the <code class="language-plaintext highlighter-rouge">img</code> value in the configuration. In this case, it will display:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>All of your files are encrypted!

Find {EXT}-readme.txt and follow instuctions
</code></pre></div></div>

<h2 id="ransom-note-generation">Ransom Note Generation</h2>

<p>The ransom note is stored as a Base64 encoded string in Sodinokibi’s configuration under the <code class="language-plaintext highlighter-rouge">nbody</code> field. The note in this sample contains:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>---=== Welcome. Again. ===---

[+] Whats Happen? [+]

Your files are encrypted, and currently unavailable. You can check it: all files on your system has extension {EXT}.
By the way, everything is possible to recover (restore), but you need to follow our instructions. Otherwise, you cant return your data (NEVER).

[+] Attention!!! [+]

Also your private data was downloaded.
We will publish it in case you will not get in touch with us asap.

[+] What guarantees? [+]

Its just a business. We absolutely do not care about you and your deals, except getting benefits. If we do not do our work and liabilities - nobody will not cooperate with us. Its not in our interests.
To check the ability of returning files, You should go to our website. There you can decrypt one file for free. That is our guarantee.
If you will not cooperate with our service - for us, its does not matter. But you will lose your time and data, cause just we have the private key. In practise - time is much more valuable than money.

[+] How to get access on website? [+]

You have two ways:

1) [Recommended] Using a TOR browser!
  a) Download and install TOR browser from this site: https://torproject.org/
  b) Open our website: http://aplebzu47wgazapdqks6vrcv6zcnjppkbxbr6wketf56nf6aq2nmyoyd.onion/{UID}

2) If TOR blocked in your country, try to use VPN! But you can use our secondary website. For this:
  a) Open your any browser (Chrome, Firefox, Opera, IE, Edge)
  b) Open our secondary website: http://decoder.re/{UID}

Warning: secondary website can be blocked, thats why first variant much better and more available.

When you open our website, put the following data in the input form:
Key:


{KEY}


-----------------------------------------------------------------------------------------

!!! DANGER !!!
DONT try to change files by yourself, DONT use any third party software for restoring your data or antivirus solutions - its may entail damge of the private key and, as result, The Loss all data.
!!! !!! !!!
ONE MORE TIME: Its in your interests to get your files back. From our side, we (the best specialists) make everything for restoring, but please should not interfere.
!!! !!! !!!
</code></pre></div></div>

<p>The note contains three template variables: <code class="language-plaintext highlighter-rouge">{UID}</code>, <code class="language-plaintext highlighter-rouge">{KEY}</code>, and <code class="language-plaintext highlighter-rouge">{EXT}</code>. The <code class="language-plaintext highlighter-rouge">{UID}</code> variable will correspond with the CRC of the infected computer’s volume serial number and other information about the CPU. This data is used as a distinct identifier that Sodinokibi can use to keep track of the computer. The <code class="language-plaintext highlighter-rouge">{EXT}</code> value will correspond with the randomly generated extension that Sodinokibi will append to encrypted files. Finally, the <code class="language-plaintext highlighter-rouge">{KEY}</code> value is the encrypted JSON string that Sodinokibi will send to the Command and Control server. You can see how this is generated in the <a href="#c2-communication">C2 Communication section of this post</a>.</p>

<p><img src="/assets/images/posts/revil-analysis/ransom-note-generation-function.png" alt="ransom note generation function" />
<em>Function that will generate the ransom note body</em></p>

<p>Once the ransom note string is generated, Sodinokibi will write it to the filename specified in the <code class="language-plaintext highlighter-rouge">nname</code> field of the configuration, which in this sample is <code class="language-plaintext highlighter-rouge">{EXT}-readme.txt</code>. It will replace the <code class="language-plaintext highlighter-rouge">{EXT}</code> value of the filename with the randomly created extension, just like it does for the ransom note body.</p>

<h2 id="conclusion">Conclusion</h2>

<p>Sodinokibi is a complex ransomware strain with many different features that the group continues to add to all the time. This latest version added the new SafeMode feature which is a smart way to bypass AV. There is definitely a lot to write about when it comes to this ransomware, and unfortunately, I could not cover it all in a single post. If you have any questions or comments about this analysis, feel free to reach out to me on my <a href="https://twitter.com/jacob_pimental">Twitter</a> or <a href="https://www.linkedin.com/in/jacobpimental/">LinkedIn</a>.</p>

<p>Thanks for reading and happy reversing!</p>

<h2 id="iocs">IOCs</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>SHA-256: 12d8bfa1aeb557c146b98f069f3456cc8392863a2f4ad938722cd7ca1a773b39

Registry Keys:

SOFTWARE\BlackLivesMatter\54k
SOFTWARE\BlackLivesMatter\Krdfp
SOFTWARE\BlackLivesMatter\a0w0
SOFTWARE\BlackLivesMatter\hq0G6X
SOFTWARE\BlackLivesMatter\XFx41h1r
SOFTWARE\BlackLivesMatter\x4WHjRs

Mutexes:

Global\F69C27FF-AB15-CCAA-A2D6-7F7ADA90E7E3

HTTP Headers:

User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.125 Safari/537.36
Content-Type: application/octet-stream
Connection: close

URL Regex:

https:\/\/[^\/]+\/(wp-content|static|content|include|uploads|news|data|admin)\/(images|pictures|image|temp|tmp|graphic|assets|pics|game)\/(?:[a-z]{2}){1,10}\.(jpg|png|gif)
</code></pre></div></div>

<h2 id="attck-methodologies">ATT&amp;CK Methodologies</h2>

<div class="table">

  <table>
    <thead>
      <tr>
        <th style="text-align: center"><strong>ATT&amp;CK ID</strong></th>
        <th style="text-align: left"><strong>ATT&amp;CK Technique</strong></th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td style="text-align: center"><a href="https://attack.mitre.org/techniques/T1098/">T1098</a></td>
        <td style="text-align: left">Account Manipulation</td>
      </tr>
      <tr>
        <td style="text-align: center"><a href="https://attack.mitre.org/techniques/T1547/">T1547</a></td>
        <td style="text-align: left">Boot or Logon Autostart Execution</td>
      </tr>
      <tr>
        <td style="text-align: center"><a href="https://attack.mitre.org/techniques/T1548/">T1548</a></td>
        <td style="text-align: left">Abuse Elevation Control Mechanism</td>
      </tr>
      <tr>
        <td style="text-align: center"><a href="https://attack.mitre.org/techniques/T1134/">T1134</a></td>
        <td style="text-align: left">Access Token Manipulation</td>
      </tr>
      <tr>
        <td style="text-align: center"><a href="https://attack.mitre.org/techniques/T1112/">T1112</a></td>
        <td style="text-align: left">Modify Registry</td>
      </tr>
      <tr>
        <td style="text-align: center"><a href="https://attack.mitre.org/techniques/T1027/">T1027</a></td>
        <td style="text-align: left">Obfuscated Files or Information</td>
      </tr>
      <tr>
        <td style="text-align: center"><a href="https://attack.mitre.org/techniques/T1083/">T1083</a></td>
        <td style="text-align: left">File and Directory Discovery</td>
      </tr>
      <tr>
        <td style="text-align: center"><a href="https://attack.mitre.org/techniques/T1135/">T1135</a></td>
        <td style="text-align: left">Network Share Discovery</td>
      </tr>
      <tr>
        <td style="text-align: center"><a href="https://attack.mitre.org/techniques/T1486/">T1486</a></td>
        <td style="text-align: left">Data Encrypted for Impact</td>
      </tr>
      <tr>
        <td style="text-align: center"><a href="https://attack.mitre.org/techniques/T1489/">T1489</a></td>
        <td style="text-align: left">Service Stop</td>
      </tr>
    </tbody>
  </table>

</div>


        <h4>Malware Analysis, Sodinokibi, Ransomware, Cutter, Automation</h4>
        <h2>More Content Like This:</h2>
<div class="card-container">
    
    
    

    
        
        

        
            
            <div class="card">
                <a href="/post/onenote-analysis"><img class="card-image" src="/assets/images/thumbnails/onenote_analysis_thumb.jpg"/></a>
                <div class="card-body">
                    <a href="/post/onenote-analysis"><h4>OneNote Analysis</h4></a>
                </div>
            </div>
            
            
        
    
        
        

        
            
            <div class="card">
                <a href="/post/intro-to-cutter"><img class="card-image" src="/assets/images/thumbnails/Intro-To-Cutter_thumb.jpg"/></a>
                <div class="card-body">
                    <a href="/post/intro-to-cutter"><h4>Intro to Cutter</h4></a>
                </div>
            </div>
            
            
        
    
        
        

        
            
            <div class="card">
                <a href="/post/blackguard-analysis"><img class="card-image" src="/assets/images/thumbnails/blackguard-deobfuscation_thumb.jpg"/></a>
                <div class="card-body">
                    <a href="/post/blackguard-analysis"><h4>BlackGuard Analysis - Deobfuscation Using Dnlib</h4></a>
                </div>
            </div>
            
            
        
    
        
        

        
            
            <div class="card">
                <a href="/blog/post/log4jshell-analysis"><img class="card-image" src="/assets/images/thumbnails/analysis_of_log4jshell_attack_thumb.jpg"/></a>
                <div class="card-body">
                    <a href="/blog/post/log4jshell-analysis"><h4>Analysis of Log4jShell Attack</h4></a>
                </div>
            </div>
            
            
        
    
        
        

        
    
        
        

        
    
        
        

        
    
        
        

        
            
            <div class="card">
                <a href="/blog/post/23"><img class="card-image" src="/assets/images/thumbnails/excel-macro-anti-analysis_thumb.jpg"/></a>
                <div class="card-body">
                    <a href="/blog/post/23"><h4>Anti-Analysis Techniques Used in Excel 4.0 Macros</h4></a>
                </div>
            </div>
            
            
        
    
        
        

        
            
            <div class="card">
                <a href="/blog/post/22"><img class="card-image" src="/assets/images/thumbnails/gobfuscator-deobfuscation_thumb.jpg"/></a>
                <div class="card-body">
                    <a href="/blog/post/22"><h4>Automatic Gobfuscator Deobfuscation with EKANS Ransomware</h4></a>
                </div>
            </div>
            
            
                
</div>
      </div>
    </div>
    <script src="/assets/js/donationButton.js"></script>
    <script>
      addDonationButton("Buy Me a Tea");
    </script>
    <script src="/assets/js/vanilla-back-to-top.min.js"></script>
    <script>addBackToTop({
                diameter: 40,
                backgroundColor: '#b5e853',
                textColor: '#151515'
            })</script>

		
    
      <script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
  ga('create', 'UA-153169514-1', 'auto');
  ga('send', 'pageview');
</script>

<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-WT9456CQQZ"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-WT9456CQQZ');
</script>
    
  </body>
</html>
