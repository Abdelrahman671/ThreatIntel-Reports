<!doctype html>

<html lang="en">
	<head>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, initial-scale=1">

		<!-- Begin Jekyll SEO tag v2.6.1 -->
<title>PE Reflection: The King is Dead, Long Live the King | Brute Ratel C4</title>
<meta name="generator" content="Jekyll v4.2.0" />
<meta property="og:title" content="PE Reflection: The King is Dead, Long Live the King" />
<meta name="author" content="Chetan Nayak" />
<meta property="og:locale" content="en_US" />
<meta name="description" content="Reflective DLL injection remains one of the most used techniques for post-exploitation and to get your code executed during initial access. The initial release of reflective DLLs by Stephen Fewer provided a great base for a lot of offensive devs to build their tools which can be executed in memory. Later came in PowerShell and C# reflection which use CLR DLLs to execute managed byte code in memory. C# and PowerShell reflection are both subject to AMSI scan which perform string based detections on the byte code, which is not a lot different from your usual Yara rule detection. Reflective DLLs however provide a different gateway which at a lower level allows you to customize how the payload gets executed in memory. Most EDRs in the past 3-4 years have upgraded their capabilities to detect the default process injection techniques which utilize Stephen Fewerâs reflective loader along with his Remote Process Execution technique using the CreateRemoteThread API." />
<meta property="og:description" content="Reflective DLL injection remains one of the most used techniques for post-exploitation and to get your code executed during initial access. The initial release of reflective DLLs by Stephen Fewer provided a great base for a lot of offensive devs to build their tools which can be executed in memory. Later came in PowerShell and C# reflection which use CLR DLLs to execute managed byte code in memory. C# and PowerShell reflection are both subject to AMSI scan which perform string based detections on the byte code, which is not a lot different from your usual Yara rule detection. Reflective DLLs however provide a different gateway which at a lower level allows you to customize how the payload gets executed in memory. Most EDRs in the past 3-4 years have upgraded their capabilities to detect the default process injection techniques which utilize Stephen Fewerâs reflective loader along with his Remote Process Execution technique using the CreateRemoteThread API." />
<link rel="canonical" href="https://bruteratel.com/research/feature-update/2021/06/01/PE-Reflection-Long-Live-The-King/" />
<meta property="og:url" content="https://bruteratel.com/research/feature-update/2021/06/01/PE-Reflection-Long-Live-The-King/" />
<meta property="og:site_name" content="Brute Ratel C4" />
<meta property="og:type" content="article" />
<meta property="article:published_time" content="2021-06-01T06:05:55+00:00" />
<script type="application/ld+json">
{"@type":"BlogPosting","publisher":{"@type":"Organization","logo":{"@type":"ImageObject","url":"https://bruteratel.com/avatar.png"},"name":"Chetan Nayak"},"headline":"PE Reflection: The King is Dead, Long Live the King","url":"https://bruteratel.com/research/feature-update/2021/06/01/PE-Reflection-Long-Live-The-King/","dateModified":"2021-06-01T06:05:55+00:00","datePublished":"2021-06-01T06:05:55+00:00","author":{"@type":"Person","name":"Chetan Nayak"},"mainEntityOfPage":{"@type":"WebPage","@id":"https://bruteratel.com/research/feature-update/2021/06/01/PE-Reflection-Long-Live-The-King/"},"description":"Reflective DLL injection remains one of the most used techniques for post-exploitation and to get your code executed during initial access. The initial release of reflective DLLs by Stephen Fewer provided a great base for a lot of offensive devs to build their tools which can be executed in memory. Later came in PowerShell and C# reflection which use CLR DLLs to execute managed byte code in memory. C# and PowerShell reflection are both subject to AMSI scan which perform string based detections on the byte code, which is not a lot different from your usual Yara rule detection. Reflective DLLs however provide a different gateway which at a lower level allows you to customize how the payload gets executed in memory. Most EDRs in the past 3-4 years have upgraded their capabilities to detect the default process injection techniques which utilize Stephen Fewerâs reflective loader along with his Remote Process Execution technique using the CreateRemoteThread API.","@context":"https://schema.org"}</script>
<!-- End Jekyll SEO tag -->

		<link type="application/atom+xml" rel="alternate" href="https://bruteratel.com/feed.xml" title="Brute Ratel C4" />

		<link rel="stylesheet" href="/css/screen.css">
		<link rel="icon" type="image/png" href="/images/brute_img/brute.png">

		
			<script>
				window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;
				ga('create', '', 'auto');
				ga('send', 'pageview');
			</script>
			<script async src='https://www.google-analytics.com/analytics.js'></script>
		
	</head>

	<body>
		<header>
			<div class="container">
				<div class="company-name"><a href="/">
					<img src="/images/brute_img/brc4title.png" alt="" width="100" height="70" />
				</a></div>
				<nav>
	<a class="nav-toggle" id="open-nav" href="#">&#9776;</a>
	<a class="editor-link btn" href="cloudcannon:collections/_data/navigation.yml" class="btn"><strong>&#9998;</strong> Edit navigation</a>
	
		
		

		
		<a href="https://0xdarkvortex.dev
" class=" highlight" target="_blank">Dark Vortex</a>
	
		
		

		
		<a href="/tabs/download/
" class=" highlight" >Download</a>
	
		
		

		
		<a href="/pricing/
" class=" highlight" >Pricing</a>
	
		
		

		
		<a href="/tabs/features/
" class=" highlight" >Documentation</a>
	
		
		

		
		<a href="/blog/
" class=" highlight" >Blogs</a>
	
		
		

		
		<a href="/tabs/tutorials/
" class=" highlight" >BRC4 Tutorials</a>
	
		
		

		
		<a href="/tabs/contact/
" class=" highlight" >Contact</a>
	
</nav>

			</div>
		</header>

		<div class="content animated fadeInDown">
	<section class="page">
		<div class="blog-container">
			
				<h2>PE Reflection: The King is Dead, Long Live the King</h2>
			

			

			

			<p>Reflective DLL injection remains one of the most used techniques for post-exploitation and to get your code executed during initial access. The initial release of <a href="https://github.com/stephenfewer/ReflectiveDLLInjection">reflective DLLs by Stephen Fewer</a> provided a great base for a lot of offensive devs to build their tools which can be executed in memory. Later came in PowerShell and C# reflection which use CLR DLLs to execute managed byte code in memory. C# and PowerShell reflection are both subject to AMSI scan which perform string based detections on the byte code, which is not a lot different from your usual Yara rule detection. Reflective DLLs however provide a different gateway which at a lower level allows you to customize how the payload gets executed in memory. Most EDRs in the past 3-4 years have upgraded their capabilities to detect the default process injection techniques which utilize Stephen Fewerâs <a href="https://github.com/stephenfewer/ReflectiveDLLInjection/blob/master/dll/src/ReflectiveLoader.c">reflective loader</a> along with his Remote Process Execution technique using the CreateRemoteThread API.</p>

<p>To keep the detection false postivies to a minimum, most EDRs hook VirtualAlloc, VirtualALlocEx, WriteProcessMemory, CreateRemoteThread, QueueUserAPC, MapViewOfSection and a few more to hunt for consecutive API calls and known malicious string scans in the RWX memory regions. But in the end, these are legitimate windows APIs, and it becomes hard to categorize every such API call as malicious since it might lead to a lot of false positives. Thus EDRs end up scanning the newly created Executable memory block in the remote process which has PAGE_EXECUTE_READWRITE permissions. Attackers realized this and started changing the memory permission to PAGE_EXECUTE_READ for reflective DLLs and PAGE_EXECUTE for shellcode injections. But this still leaves out a possibility of detection because of the new RWX artefact which getâs created by the loader after the injection.</p>

<p>The below image shows the default injection of Stephen Fewer with RWX modified to RX. You can see that even if you configure RX, the loader of Stephen Fewer still calls VitualAlloc with RWX, WriteProcessmemory after re-basing the PE and then calls the DllMain function as a function pointer.</p>

<head>
    <meta charset="utf-8" />
    <link rel="stylesheet" href="/css/ratelwarroom.css" />
</head>

<div class="center-row">
    <div class="card">
        <a href="/images/post_img/2021-06-01-PEReAlloc/stephen_pe_injection.png">
            <img class="card-img-top img-fluid" src="/images/post_img/2021-06-01-PEReAlloc/stephen_pe_injection.png" />
        </a>
    </div>
</div>

<p>The above logic can be verified from <a href="https://github.com/stephenfewer/ReflectiveDLLInjection/blob/master/dll/src/ReflectiveLoader.c#L271">this line</a> of Stephen fewerâs loader. This basically means that even if you allocate RX as the region for your initial loader code, your loader when executed, will rebase itself to a new region with VirtualAlloc(RWX), load all the PE Sections and then call the DllMain entrypoint. Any EDR which hooks VirtualAlloc/VirtualAllocEx can scan the process memory for this RWX section, and it can quickly identify that this is an injected DLL and quickly block it from itâs execution. Most payloads including the ones from Metasploit and other C2s do not provide any functionality for this section to be modified. Now, if you try to modify <a href="https://github.com/stephenfewer/ReflectiveDLLInjection/blob/master/dll/src/ReflectiveLoader.c#L271">this part</a> of the code and replace the RWX with first RW and then RX, then the dllmain execution will crash returning you an ACCESS_VIOLATION error. This is because several different sections of the PE, require different types of permissions. If you provide RWX to every PE section, it will work, but if you provide only RX, then it wonât work because some PE sections require you to have the section as writable. If the section isnât writable, the DllMain wonât be able to write any static variables to the required section or erase or reallocate new data in those parts of the section.</p>

<p>However, those of you who have spent time reversing the DoublePulsar userland shellcode like me, would have noticed that these payloads tend to reallocate the PE file a bit more than Stephen Fewerâs default reflective loader. So, unlike Stephenâs loader which allocates the whole memory block to a single page of memory using VirtualAllocEx, we can simply distribute the sections of PE to different locations. Each of these sections will have different permissions. So basically, before we copy the PE sections to the new rebased-address, we will validate the <a href="https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-image_section_header">IMAGE_SECTION_HEADERâs</a> Characteristics attribute with the respective permissions using the âANDâ operation which will check the binary bit if set or not, and then we will allocate every piece of the PE section to a new page in memory. By doing this, every page will have its own permission and we will never require a full RWX region. We can split each section as follows.</p>

<pre class="hljs" style="display: block; overflow-x: auto; background: rgb(29, 31, 33) none repeat scroll 0% 0%; color: rgb(197, 200, 198); padding: 0.5em;">numberOfSections = ((PIMAGE_NT_HEADERS)pOldNtHeader)-&gt;FileHeader.NumberOfSections;
pSectionHeader = ((ULONG_PTR) &amp; ((PIMAGE_NT_HEADERS)pOldNtHeader)-&gt;OptionalHeader + ((PIMAGE_NT_HEADERS)pOldNtHeader)-&gt;FileHeader.SizeOfOptionalHeader);
<span class="hljs-keyword" style="color: rgb(178, 148, 187);">while</span> (numberOfSections--) {
    <span class="hljs-keyword" style="color: rgb(178, 148, 187);">void</span>* thisSectionVA = (<span class="hljs-keyword" style="color: rgb(178, 148, 187);">void</span>*) (dllNewBaseAddress + ((PIMAGE_SECTION_HEADER)pSectionHeader)-&gt;VirtualAddress);
    ULONG_PTR thisSectionVirtualSize = ((PIMAGE_SECTION_HEADER)pSectionHeader)-&gt;Misc.VirtualSize;
    DWORD ulPermissions = <span class="hljs-number" style="color: rgb(222, 147, 95);">0</span>;

    <span class="hljs-keyword" style="color: rgb(178, 148, 187);">if</span> (((PIMAGE_SECTION_HEADER)pSectionHeader)-&gt;Characteristics &amp; IMAGE_SCN_MEM_WRITE) {
        ulPermissions = PAGE_WRITECOPY;
    }
    <span class="hljs-keyword" style="color: rgb(178, 148, 187);">if</span> (((PIMAGE_SECTION_HEADER)pSectionHeader)-&gt;Characteristics &amp; IMAGE_SCN_MEM_READ) {
        ulPermissions = PAGE_READONLY;
    }
    <span class="hljs-keyword" style="color: rgb(178, 148, 187);">if</span> ((((PIMAGE_SECTION_HEADER)pSectionHeader)-&gt;Characteristics &amp; IMAGE_SCN_MEM_WRITE) &amp;&amp; (((PIMAGE_SECTION_HEADER)pSectionHeader)-&gt;Characteristics &amp; IMAGE_SCN_MEM_READ)) {
        ulPermissions = PAGE_READWRITE;
    }
    <span class="hljs-keyword" style="color: rgb(178, 148, 187);">if</span> (((PIMAGE_SECTION_HEADER)pSectionHeader)-&gt;Characteristics &amp; IMAGE_SCN_MEM_EXECUTE) {
        ulPermissions = PAGE_EXECUTE;
    }
    <span class="hljs-keyword" style="color: rgb(178, 148, 187);">if</span> ((((PIMAGE_SECTION_HEADER)pSectionHeader)-&gt;Characteristics &amp; IMAGE_SCN_MEM_EXECUTE) &amp;&amp; (((PIMAGE_SECTION_HEADER)pSectionHeader)-&gt;Characteristics &amp; IMAGE_SCN_MEM_WRITE)) {
        ulPermissions = PAGE_EXECUTE_WRITECOPY;
    }
    <span class="hljs-keyword" style="color: rgb(178, 148, 187);">if</span> ((((PIMAGE_SECTION_HEADER)pSectionHeader)-&gt;Characteristics &amp; IMAGE_SCN_MEM_EXECUTE) &amp;&amp; (((PIMAGE_SECTION_HEADER)pSectionHeader)-&gt;Characteristics &amp; IMAGE_SCN_MEM_READ)) {
        ulPermissions = PAGE_EXECUTE_READ;
    }
    <span class="hljs-keyword" style="color: rgb(178, 148, 187);">if</span> ((((PIMAGE_SECTION_HEADER)pSectionHeader)-&gt;Characteristics &amp; IMAGE_SCN_MEM_EXECUTE) &amp;&amp; (((PIMAGE_SECTION_HEADER)pSectionHeader)-&gt;Characteristics &amp; IMAGE_SCN_MEM_WRITE) &amp;&amp; (((PIMAGE_SECTION_HEADER)pSectionHeader)-&gt;Characteristics &amp; IMAGE_SCN_MEM_READ)) {
        ulPermissions = PAGE_EXECUTE_READWRITE;
    }

    pVirtualProtect(thisSectionVA, thisSectionVirtualSize, ulPermissions, &amp;ulPermissions);

    pSectionHeader += <span class="hljs-keyword" style="color: rgb(178, 148, 187);">sizeof</span>(IMAGE_SECTION_HEADER);
}</pre>

<p>The below screenshot shows the newly rebased PE section which does not have any RWX regions anymore, and the RX section only contains the executable code i.e. the <em>.text</em> section since all other remaining sections are allocated to other regions now.</p>

<head>
    <meta charset="utf-8" />
    <link rel="stylesheet" href="/css/ratelwarroom.css" />
</head>

<div class="center-row">
    <div class="card">
        <a href="/images/post_img/2021-06-01-PEReAlloc/reflect_pe.png">
            <img class="card-img-top img-fluid" src="/images/post_img/2021-06-01-PEReAlloc/reflect_pe.png" />
        </a>
    </div>
</div>

<p>One important note before we execute our main payload, is to cleanup any existing artefacts left from our previously allocated (RX) region. This can be done using a simple struct containing the pointer to the start of our initial RX region (thread) and the parameters passed to the thread and then forwarding it to Dllmain for cleanup using VirtualFree. This can be done using the below code in DllMain. This basically erases the whole history of who actually created the new rebased regions and executed DllMain.</p>

<pre class="hljs" style="display: block; overflow-x: auto; background: rgb(29, 31, 33) none repeat scroll 0% 0%; color: rgb(197, 200, 198); padding: 0.5em;"><span class="hljs-meta" style="color: rgb(222, 147, 95);">#<span class="hljs-meta-keyword">include</span> <span class="hljs-string" style="color: rgb(181, 189, 104);">"badger.h"</span></span>

<span class="hljs-function">BOOL WINAPI <span class="hljs-title" style="color: rgb(129, 162, 190);">DllMain</span><span class="hljs-params" style="color: rgb(222, 147, 95);">(HINSTANCE hinstDLL, DWORD dwReason, LPVOID lpReserved)</span>
</span>{
    BOOL bReturnValue = TRUE;
    <span class="hljs-keyword" style="color: rgb(178, 148, 187);">switch</span> (dwReason)
    {
    <span class="hljs-keyword" style="color: rgb(178, 148, 187);">case</span> DLL_PROCESS_ATTACH: {
        <span class="hljs-keyword" style="color: rgb(178, 148, 187);">struct</span> DLL_SWEEPER *dllSweeper = (<span class="hljs-keyword" style="color: rgb(178, 148, 187);">struct</span> DLL_SWEEPER*)lpReserved;
        CHAR* newlpParam = <span class="hljs-literal" style="color: rgb(222, 147, 95);">NULL</span>;

        task_crealloc(&amp;newlpParam, (CHAR*)dllSweeper-&gt;lpParameter);
        VirtualFree((LPVOID)dllSweeper-&gt;lpParameter, <span class="hljs-number" style="color: rgb(222, 147, 95);">0</span>, MEM_RELEASE);
        VirtualFree((LPVOID)dllSweeper-&gt;dllInitAddress, <span class="hljs-number" style="color: rgb(222, 147, 95);">0</span>, MEM_RELEASE);

        badger_main(newlpParam);
        <span class="hljs-keyword" style="color: rgb(178, 148, 187);">break</span>;
    }
    <span class="hljs-keyword" style="color: rgb(178, 148, 187);">case</span> DLL_PROCESS_DETACH:
    <span class="hljs-keyword" style="color: rgb(178, 148, 187);">case</span> DLL_THREAD_ATTACH:
    <span class="hljs-keyword" style="color: rgb(178, 148, 187);">case</span> DLL_THREAD_DETACH:
        <span class="hljs-keyword" style="color: rgb(178, 148, 187);">break</span>;
    }
    <span class="hljs-keyword" style="color: rgb(178, 148, 187);">return</span> bReturnValue;
}
</pre>

<p>Brute Ratel will have this feature in the upcoming version 0.5. It not only relocates the whole PE section to a new region with dedicated permissions, but also erases the whole PE, itâs arguments and itâs thread from memory which were created by itâs Parent process during the initial RX region execution. So, if any EDR or defender tries to find the injected PE in memory, they wonât find any threads created from external entity. Also, all the memory sections in the executable will look like garbage because the whole PE will be split into multiple parts allocated into different places. And for those of you who donât know, Brute Ratelâs payloads by default erased the DOS header/PE header and NT header, whenever a new memory region was allocated since version 0.3.1.</p>

		</div>
	</section>
</div>

		<footer>
			<div class="container">
				<p class="editor-link"><a href="cloudcannon:collections/_data/footer.yml" class="btn"><strong>&#9998;</strong> Edit footer</a></p>
				<div class="footer-columns">
					
					<ul class="footer-links">
						
							<li><a  href="/blog/
" >
								
								Release Blogs</a></li>
						
							<li><a  href="https://0xdarkvortex.dev/
" >
								
								InfoSec Workshops</a></li>
						
					</ul>
					
					<ul class="footer-links">
						
							<li><a target="_blank" href="https://twitter.com/NinjaParanoid/
" class="Twitter-icon">
								
									
		<svg fill="#000000" height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"><path d="M22.46,6C21.69,6.35 20.86,6.58 20,6.69C20.88,6.16 21.56,5.32 21.88,4.31C21.05,4.81 20.13,5.16 19.16,5.36C18.37,4.5 17.26,4 16,4C13.65,4 11.73,5.92 11.73,8.29C11.73,8.63 11.77,8.96 11.84,9.27C8.28,9.09 5.11,7.38 3,4.79C2.63,5.42 2.42,6.16 2.42,6.94C2.42,8.43 3.17,9.75 4.33,10.5C3.62,10.5 2.96,10.3 2.38,10C2.38,10 2.38,10 2.38,10.03C2.38,12.11 3.86,13.85 5.82,14.24C5.46,14.34 5.08,14.39 4.69,14.39C4.42,14.39 4.15,14.36 3.89,14.31C4.43,16 6,17.26 7.89,17.29C6.43,18.45 4.58,19.13 2.56,19.13C2.22,19.13 1.88,19.11 1.54,19.07C3.44,20.29 5.7,21 8.12,21C16,21 20.33,14.46 20.33,8.79C20.33,8.6 20.33,8.42 20.32,8.23C21.16,7.63 21.88,6.87 22.46,6Z" /></svg>
	

								
								Twitter</a></li>
						
							<li><a target="_blank" href="https://www.youtube.com/channel/UCpDI4t3oGuQNOpaX85daOrg
" class="YouTube-icon">
								
									
		<svg fill="#000000" height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"><path d="M10,16.5V7.5L16,12M20,4.4C19.4,4.2 15.7,4 12,4C8.3,4 4.6,4.19 4,4.38C2.44,4.9 2,8.4 2,12C2,15.59 2.44,19.1 4,19.61C4.6,19.81 8.3,20 12,20C15.7,20 19.4,19.81 20,19.61C21.56,19.1 22,15.59 22,12C22,8.4 21.56,4.91 20,4.4Z" /></svg>
	

								
								YouTube</a></li>
						
					</ul>
					
					<ul class="footer-links">
						
							<li><a  href="/tabs/contact/
" >
								
								Contact</a></li>
						
					</ul>
					
				</div>
				<!-- <p class="copyright">&copy; 2024 Dark Vortex. â¢ <a href="#">Terms</a> &amp; <a href="#">Privacy</a></p> -->
				<p class="copyright">&copy; 2024 Dark Vortex</p>

			</div>
		</footer>
		<script>
			document.getElementById("open-nav").onclick = function () {
				document.body.classList.toggle("nav-open");
				return false;
			};
		</script>
	</body>
</html>
