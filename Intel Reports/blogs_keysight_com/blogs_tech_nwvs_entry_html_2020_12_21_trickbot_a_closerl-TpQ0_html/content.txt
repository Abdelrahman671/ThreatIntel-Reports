<!DOCTYPE html>
<html>
  <head>
    <title>TrickBot: A Closer Look</title>
    <link rel="canonical" href="https://www.keysight.com/blogs/en/tech/nwvs/2020/12/21/trickbot-a-closer-look">
    <meta name="description" content="Technical writeup about the installation phase of a TrickBot maldoc.">
    <meta property="og:title" content="TrickBot: A Closer Look">
    <meta property="og:description" content="Technical writeup about the installation phase of a TrickBot maldoc.">
    <meta property="og:url" content="https://www.keysight.com/blogs/en/tech/nwvs/2020/12/21/trickbot-a-closer-look">
    <meta property="og:image" content="https://www.keysight.com/blogs/en/tech/nwvs/2020/12/21/media_16afce3ab9ee66d91177410e1697a7e4787e39499.jpeg?width=1200&#x26;format=pjpg&#x26;optimize=medium">
    <meta property="og:image:secure_url" content="https://www.keysight.com/blogs/en/tech/nwvs/2020/12/21/media_16afce3ab9ee66d91177410e1697a7e4787e39499.jpeg?width=1200&#x26;format=pjpg&#x26;optimize=medium">
    <meta property="article:tag" content="Cybersecurity">
    <meta name="twitter:card" content="summary_large_image">
    <meta name="twitter:title" content="TrickBot: A Closer Look">
    <meta name="twitter:description" content="Technical writeup about the installation phase of a TrickBot maldoc.">
    <meta name="twitter:image" content="https://www.keysight.com/blogs/en/tech/nwvs/2020/12/21/media_16afce3ab9ee66d91177410e1697a7e4787e39499.jpeg?width=1200&#x26;format=pjpg&#x26;optimize=medium">
    <meta name="robots" content="index, follow">
    <meta name="topic" content="Product Area">
    <meta name="subtopic" content="Network Visibility + Security">
    <meta name="template" content="post">
    <meta name="author" content="Keysight">
    <meta name="publication-date" content="2020-12-21">
    <meta name="read-time" content="11 min read">
    <meta name="back-office-tags" content="campaign/Network_Security, product-category/Network_Security_Operations, funnel/tofu, business-unit/CSG">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <script src="/blogs/scripts/lib-franklin.js" type="module"></script>
    <script src="/blogs/scripts/scripts.js" type="module"></script>
    <link rel="stylesheet" href="/blogs/styles/styles.css">
    <link rel="icon" href="data:,">
    <link rel="alternate" type="application/atom+xml" title="Keysight Blogs | RSS" href="/blogs/rss/feed.xml">
  </head>
  <body>
    <header></header>
    <main>
      <div>
        <picture>
          <source type="image/webp" srcset="./media_16afce3ab9ee66d91177410e1697a7e4787e39499.jpeg?width=2000&#x26;format=webply&#x26;optimize=medium" media="(min-width: 600px)">
          <source type="image/webp" srcset="./media_16afce3ab9ee66d91177410e1697a7e4787e39499.jpeg?width=750&#x26;format=webply&#x26;optimize=medium">
          <source type="image/jpeg" srcset="./media_16afce3ab9ee66d91177410e1697a7e4787e39499.jpeg?width=2000&#x26;format=jpeg&#x26;optimize=medium" media="(min-width: 600px)">
          <img loading="lazy" alt="" src="./media_16afce3ab9ee66d91177410e1697a7e4787e39499.jpeg?width=750&#x26;format=jpeg&#x26;optimize=medium" width="1200" height="675">
        </picture>
      </div>
      <div>
        <h1 id="trickbot-a-closer-look">TrickBot: A Closer Look</h1>
        <p>In early November, the Cybersecurity and Infrastructure Security Agency (CISA) released an <a href="https://us-cert.cisa.gov/ncas/alerts/aa20-302a">advisory</a> warning administrators in the healthcare and public sector that TrickBot is being used to disturb healthcare services by launching ransomware attacks and by stealing data. <a href="https://blogs.keysight.com/blogs/tech/nwvs.entry.html/2020/12/15/simulating_trickyma-Yjn5.html">This month</a>, Threat Simulator released a TrickBot assessment covering the malware's kill chain. In this post, we'll take a close look at the installation phase of the TrickBot infected document that inspired the assessment.</p>
        <p>
          <picture>
            <source type="image/webp" srcset="./media_17e85254c9c7e0aea08babe03f897d50b0b715d95.png?width=2000&#x26;format=webply&#x26;optimize=medium" media="(min-width: 600px)">
            <source type="image/webp" srcset="./media_17e85254c9c7e0aea08babe03f897d50b0b715d95.png?width=750&#x26;format=webply&#x26;optimize=medium">
            <source type="image/png" srcset="./media_17e85254c9c7e0aea08babe03f897d50b0b715d95.png?width=2000&#x26;format=png&#x26;optimize=medium" media="(min-width: 600px)">
            <img loading="lazy" alt="" src="./media_17e85254c9c7e0aea08babe03f897d50b0b715d95.png?width=750&#x26;format=png&#x26;optimize=medium" width="698" height="335">
          </picture> <em>Process tree for the sample under analysis.</em>
        </p>
        <h2 id="sampledoc-analysis-sha-1-c2f948d866ff4dfa8aaebda5507c7d606ac9fb28">Sample.doc Analysis (SHA-1: c2f948d866ff4dfa8aaebda5507c7d606ac9fb28)</h2>
        <p>The sample is a .doc file, an older file type for Microsoft Word, also known as Microsoft Word 97-2003 format. This file type may contain Visual Basic for Applications (VBA) macros.<br>The document convinces the target to click Enable Editing and Enable Content. This is common for malicious macro enabled documents to bypass security prompts and run the macro code embedded within it.</p>
        <p>
          <picture>
            <source type="image/webp" srcset="./media_1637738eabb344c79081ac8f09e8cc90c8d59fb1b.png?width=2000&#x26;format=webply&#x26;optimize=medium" media="(min-width: 600px)">
            <source type="image/webp" srcset="./media_1637738eabb344c79081ac8f09e8cc90c8d59fb1b.png?width=750&#x26;format=webply&#x26;optimize=medium">
            <source type="image/png" srcset="./media_1637738eabb344c79081ac8f09e8cc90c8d59fb1b.png?width=2000&#x26;format=png&#x26;optimize=medium" media="(min-width: 600px)">
            <img loading="lazy" alt="" src="./media_1637738eabb344c79081ac8f09e8cc90c8d59fb1b.png?width=750&#x26;format=png&#x26;optimize=medium" width="800" height="400">
          </picture>
        </p>
        <p>The document contains the Document_Close event procedure. Upon closing of the document, the Document.Close event will fire and the Document_Close procedure will be called. This will evade sandboxes that do not close the document during analysis.</p>
        <p>
          <picture>
            <source type="image/webp" srcset="./media_1c84f9a4e221ffb07ffb572e33e6832f4a74d0751.png?width=2000&#x26;format=webply&#x26;optimize=medium" media="(min-width: 600px)">
            <source type="image/webp" srcset="./media_1c84f9a4e221ffb07ffb572e33e6832f4a74d0751.png?width=750&#x26;format=webply&#x26;optimize=medium">
            <source type="image/png" srcset="./media_1c84f9a4e221ffb07ffb572e33e6832f4a74d0751.png?width=2000&#x26;format=png&#x26;optimize=medium" media="(min-width: 600px)">
            <img loading="lazy" alt="" src="./media_1c84f9a4e221ffb07ffb572e33e6832f4a74d0751.png?width=750&#x26;format=png&#x26;optimize=medium" width="500" height="194">
          </picture>
        </p>
        <p>The Document_Close procedure will delay execution for 2 seconds and then proceed to call the function ResetCalcD. ResetCalcD will call another function named UniqueValues.</p>
        <p>
          <picture>
            <source type="image/webp" srcset="./media_1c1f1f55b143c7c26e467dc391eaa05681675794f.png?width=2000&#x26;format=webply&#x26;optimize=medium" media="(min-width: 600px)">
            <source type="image/webp" srcset="./media_1c1f1f55b143c7c26e467dc391eaa05681675794f.png?width=750&#x26;format=webply&#x26;optimize=medium">
            <source type="image/png" srcset="./media_1c1f1f55b143c7c26e467dc391eaa05681675794f.png?width=2000&#x26;format=png&#x26;optimize=medium" media="(min-width: 600px)">
            <img loading="lazy" alt="" src="./media_1c1f1f55b143c7c26e467dc391eaa05681675794f.png?width=750&#x26;format=png&#x26;optimize=medium" width="500" height="623">
          </picture>
        </p>
        <p>The UniqueValues function will first create the directory "C:\Artrite\Final_Joana\"<br>Then, UniqueValues will create the file "C:\Artrite\SarilumabSAR153191.part" and fill it with VBScript comments.<br>Finally, UniqueValues will create the file "C:\Artrite\SarilumabSAR153191.vbe" and fill it with VBScript comments along with the value of the caption "luinpedrnass.dados.Caption." The caption contains the next stage payload, a VBScript file.</p>
        <p>After the call to ResetCalcD, the Document_Close procedure will create an Excel.Application object. As a result, svchost.exe will spawn a process for excel.exe. This will mask the calling process, winword.exe in this case, and will make tracking the process tree and kill chain of the malware more difficult.<br>Next, the DisplayAlert property is set to False. This will prevent UI pop-ups from being presented to the user.<br>Finally, the DDEInitiate method is called. This method will launch an application if the target system has the <em>Dynamic Data Exchange Server Launch</em> Trust Center setting enabled. This setting is no longer enabled by default.<br>If configured to do so, DDEInitiaite will cause excel.exe to launch cmd.exe with the command-line:</p>
        <div class="cmd-c-c-artrite-sarilumabsar153191-vbe"></div>
        <p>Finally, wscript.exe will execute the next stage, C:\Artrite\SarilumabSAR153191.vbe.</p>
        <p><strong>tl;dr:</strong> The malicious document will use the Document_Close VBA macro to drop and execute a VBE file upon closing the document.</p>
        <h2 id="sarilumabsar153191vbe-analysis">SarilumabSAR153191.vbe Analysis</h2>
        <p>The script file contains double base64 encoded data in a variable named tData.</p>
        <p>
          <picture>
            <source type="image/webp" srcset="./media_16425039db2fee0164272a055a83918e78076fbfb.png?width=2000&#x26;format=webply&#x26;optimize=medium" media="(min-width: 600px)">
            <source type="image/webp" srcset="./media_16425039db2fee0164272a055a83918e78076fbfb.png?width=750&#x26;format=webply&#x26;optimize=medium">
            <source type="image/png" srcset="./media_16425039db2fee0164272a055a83918e78076fbfb.png?width=2000&#x26;format=png&#x26;optimize=medium" media="(min-width: 600px)">
            <img loading="lazy" alt="" src="./media_16425039db2fee0164272a055a83918e78076fbfb.png?width=750&#x26;format=png&#x26;optimize=medium" width="700" height="64">
          </picture>
        </p>
        <p>tData is decoded using the function DecodeBase64_1.<br>DecodeBase64_1 uses the Microsoft.XMLDOM object to decode base64 encoded data and uses the Adodb.Stream object to write the decoded contents to “C:\Artrite\Final_Joana\WhatAreTopFacts.rtc”<br>There is minor obfuscation using the Chr function to hide the strings "b64" and "bin.base64"</p>
        <p>
          <picture>
            <source type="image/webp" srcset="./media_18dc1fac127effddcedb24d69bb8fa341028e81fd.png?width=2000&#x26;format=webply&#x26;optimize=medium" media="(min-width: 600px)">
            <source type="image/webp" srcset="./media_18dc1fac127effddcedb24d69bb8fa341028e81fd.png?width=750&#x26;format=webply&#x26;optimize=medium">
            <source type="image/png" srcset="./media_18dc1fac127effddcedb24d69bb8fa341028e81fd.png?width=2000&#x26;format=png&#x26;optimize=medium" media="(min-width: 600px)">
            <img loading="lazy" alt="" src="./media_18dc1fac127effddcedb24d69bb8fa341028e81fd.png?width=750&#x26;format=png&#x26;optimize=medium" width="800" height="229">
          </picture>
        </p>
        <p>The data is then decoded a second time with a similar base64 decoding function and once again saved to “C:\Artrite\Final_Joana\WhatAreTopFacts.rtc”<br>
          <picture>
            <source type="image/webp" srcset="./media_1f455d966fb86d28ef3e9b7932485d83cfa0e28da.png?width=2000&#x26;format=webply&#x26;optimize=medium" media="(min-width: 600px)">
            <source type="image/webp" srcset="./media_1f455d966fb86d28ef3e9b7932485d83cfa0e28da.png?width=750&#x26;format=webply&#x26;optimize=medium">
            <source type="image/png" srcset="./media_1f455d966fb86d28ef3e9b7932485d83cfa0e28da.png?width=2000&#x26;format=png&#x26;optimize=medium" media="(min-width: 600px)">
            <img loading="lazy" alt="" src="./media_1f455d966fb86d28ef3e9b7932485d83cfa0e28da.png?width=750&#x26;format=png&#x26;optimize=medium" width="800" height="244">
          </picture>
        </p>
        <p>Finally, an Excel DDE is used once again to launch the next stage, WhatAreTopFacts.rtc (a 32-bit DLL file), using rundll32.exe</p>
        <p>
          <picture>
            <source type="image/webp" srcset="./media_1dd4ccab83adb89af1c6a1e16f995a528d4c63792.png?width=2000&#x26;format=webply&#x26;optimize=medium" media="(min-width: 600px)">
            <source type="image/webp" srcset="./media_1dd4ccab83adb89af1c6a1e16f995a528d4c63792.png?width=750&#x26;format=webply&#x26;optimize=medium">
            <source type="image/png" srcset="./media_1dd4ccab83adb89af1c6a1e16f995a528d4c63792.png?width=2000&#x26;format=png&#x26;optimize=medium" media="(min-width: 600px)">
            <img loading="lazy" alt="" src="./media_1dd4ccab83adb89af1c6a1e16f995a528d4c63792.png?width=750&#x26;format=png&#x26;optimize=medium" width="600" height="42">
          </picture>
        </p>
        <p><strong>tl;dr:</strong> SarilumabSAR153191.vbe will drop and execute a 32-bit DLL file using rundll32.exe.</p>
        <h2 id="whataretopfactsrtc-analysis">WhatAreTopFacts.rtc Analysis</h2>
        <p>WhatAreTopFacts.rtc is a DLL that exports the function DllRegisterServer.<br>It is odd that the malware author chose to name the exported function DllRegisterServer while not taking advantage of the <a href="https://blog.talosintelligence.com/2019/11/hunting-for-lolbins.html">LoLBins</a> that utilize that exported function. (<a href="https://lolbas-project.github.io/lolbas/Binaries/Msiexec/">msiexec.exe</a>, <a href="https://lolbas-project.github.io/lolbas/Binaries/Odbcconf/">odbcconf.exe</a>)</p>
        <p>
          <picture>
            <source type="image/webp" srcset="./media_1a0bc3a70cf6825692a94151828b4ba3a87858acf.png?width=2000&#x26;format=webply&#x26;optimize=medium" media="(min-width: 600px)">
            <source type="image/webp" srcset="./media_1a0bc3a70cf6825692a94151828b4ba3a87858acf.png?width=750&#x26;format=webply&#x26;optimize=medium">
            <source type="image/png" srcset="./media_1a0bc3a70cf6825692a94151828b4ba3a87858acf.png?width=2000&#x26;format=png&#x26;optimize=medium" media="(min-width: 600px)">
            <img loading="lazy" alt="" src="./media_1a0bc3a70cf6825692a94151828b4ba3a87858acf.png?width=750&#x26;format=png&#x26;optimize=medium" width="400" height="288">
          </picture>
        </p>
        <p>The DllRegisterServer function will deobfuscate the strings "LdrFindResource_U" and "LdrAccessResource".</p>
        <p>
          <picture>
            <source type="image/webp" srcset="./media_1f469c56c2f32a2a7da56f2e4673f5ff98e1129af.png?width=2000&#x26;format=webply&#x26;optimize=medium" media="(min-width: 600px)">
            <source type="image/webp" srcset="./media_1f469c56c2f32a2a7da56f2e4673f5ff98e1129af.png?width=750&#x26;format=webply&#x26;optimize=medium">
            <source type="image/png" srcset="./media_1f469c56c2f32a2a7da56f2e4673f5ff98e1129af.png?width=2000&#x26;format=png&#x26;optimize=medium" media="(min-width: 600px)">
            <img loading="lazy" alt="" src="./media_1f469c56c2f32a2a7da56f2e4673f5ff98e1129af.png?width=750&#x26;format=png&#x26;optimize=medium" width="230" height="166">
          </picture>
          <picture>
            <source type="image/webp" srcset="./media_11d707433c8b3ccf1e5c9108430e67f6b4c7277ef.png?width=2000&#x26;format=webply&#x26;optimize=medium" media="(min-width: 600px)">
            <source type="image/webp" srcset="./media_11d707433c8b3ccf1e5c9108430e67f6b4c7277ef.png?width=750&#x26;format=webply&#x26;optimize=medium">
            <source type="image/png" srcset="./media_11d707433c8b3ccf1e5c9108430e67f6b4c7277ef.png?width=2000&#x26;format=png&#x26;optimize=medium" media="(min-width: 600px)">
            <img loading="lazy" alt="" src="./media_11d707433c8b3ccf1e5c9108430e67f6b4c7277ef.png?width=750&#x26;format=png&#x26;optimize=medium" width="250" height="166">
          </picture>
        </p>
        <p>Next, DllRegisterServer will dynamically resolve the API functions ntdll!LdrFindResource_U and ntdll!LdrAccessResource before calling LdrFindResource_U and LdrAccessResource to fetch the contents of a resource embedded within the resource section of the binary.</p>
        <p>
          <picture>
            <source type="image/webp" srcset="./media_199aa919acdecf2ad929b98bc533a35626119137f.png?width=2000&#x26;format=webply&#x26;optimize=medium" media="(min-width: 600px)">
            <source type="image/webp" srcset="./media_199aa919acdecf2ad929b98bc533a35626119137f.png?width=750&#x26;format=webply&#x26;optimize=medium">
            <source type="image/png" srcset="./media_199aa919acdecf2ad929b98bc533a35626119137f.png?width=2000&#x26;format=png&#x26;optimize=medium" media="(min-width: 600px)">
            <img loading="lazy" alt="" src="./media_199aa919acdecf2ad929b98bc533a35626119137f.png?width=750&#x26;format=png&#x26;optimize=medium" width="700" height="292">
          </picture>
        </p>
        <p>The embedded resource has an entropy value of 7.99613 bits per byte. The high entropy suggests that the resource is encrypted data.</p>
        <p>DllRegisterServer will then copy the resource data into freshly allocated PAGE_EXECUTE_READWRITE memory.</p>
        <p>
          <picture>
            <source type="image/webp" srcset="./media_16e71f06069584be75540d9273dd80ca934d20d6a.png?width=2000&#x26;format=webply&#x26;optimize=medium" media="(min-width: 600px)">
            <source type="image/webp" srcset="./media_16e71f06069584be75540d9273dd80ca934d20d6a.png?width=750&#x26;format=webply&#x26;optimize=medium">
            <source type="image/png" srcset="./media_16e71f06069584be75540d9273dd80ca934d20d6a.png?width=2000&#x26;format=png&#x26;optimize=medium" media="(min-width: 600px)">
            <img loading="lazy" alt="" src="./media_16e71f06069584be75540d9273dd80ca934d20d6a.png?width=750&#x26;format=png&#x26;optimize=medium" width="600" height="375">
          </picture>
        </p>
        <p>DllRegisterServer will go onto decrypt the resource data using a dynamically derived key and an XOR based encryption/decryption routine.</p>
        <p>
          <picture>
            <source type="image/webp" srcset="./media_1ed3d558e6729a8f7a3050b2d3c83f31c09acbe39.png?width=2000&#x26;format=webply&#x26;optimize=medium" media="(min-width: 600px)">
            <source type="image/webp" srcset="./media_1ed3d558e6729a8f7a3050b2d3c83f31c09acbe39.png?width=750&#x26;format=webply&#x26;optimize=medium">
            <source type="image/png" srcset="./media_1ed3d558e6729a8f7a3050b2d3c83f31c09acbe39.png?width=2000&#x26;format=png&#x26;optimize=medium" media="(min-width: 600px)">
            <img loading="lazy" alt="" src="./media_1ed3d558e6729a8f7a3050b2d3c83f31c09acbe39.png?width=750&#x26;format=png&#x26;optimize=medium" width="500" height="35">
          </picture><br>
          <picture>
            <source type="image/webp" srcset="./media_14488225824b1c6c66babef1b68ac2d310f035529.png?width=2000&#x26;format=webply&#x26;optimize=medium" media="(min-width: 600px)">
            <source type="image/webp" srcset="./media_14488225824b1c6c66babef1b68ac2d310f035529.png?width=750&#x26;format=webply&#x26;optimize=medium">
            <source type="image/png" srcset="./media_14488225824b1c6c66babef1b68ac2d310f035529.png?width=2000&#x26;format=png&#x26;optimize=medium" media="(min-width: 600px)">
            <img loading="lazy" alt="" src="./media_14488225824b1c6c66babef1b68ac2d310f035529.png?width=750&#x26;format=png&#x26;optimize=medium" width="600" height="465">
          </picture><br>
          <picture>
            <source type="image/webp" srcset="./media_1699fcc72886a91f620826348e7c08f26cb8296ce.png?width=2000&#x26;format=webply&#x26;optimize=medium" media="(min-width: 600px)">
            <source type="image/webp" srcset="./media_1699fcc72886a91f620826348e7c08f26cb8296ce.png?width=750&#x26;format=webply&#x26;optimize=medium">
            <source type="image/png" srcset="./media_1699fcc72886a91f620826348e7c08f26cb8296ce.png?width=2000&#x26;format=png&#x26;optimize=medium" media="(min-width: 600px)">
            <img loading="lazy" alt="" src="./media_1699fcc72886a91f620826348e7c08f26cb8296ce.png?width=750&#x26;format=png&#x26;optimize=medium" width="600" height="450">
          </picture>
        </p>
        <p>Finally, DllRegisterServer will execute the decrypted resource data. The resource data turns out to be encrypted shellcode.</p>
        <p>
          <picture>
            <source type="image/webp" srcset="./media_15c556e907ea288943e4750d21edd24b92a9d390e.png?width=2000&#x26;format=webply&#x26;optimize=medium" media="(min-width: 600px)">
            <source type="image/webp" srcset="./media_15c556e907ea288943e4750d21edd24b92a9d390e.png?width=750&#x26;format=webply&#x26;optimize=medium">
            <source type="image/png" srcset="./media_15c556e907ea288943e4750d21edd24b92a9d390e.png?width=2000&#x26;format=png&#x26;optimize=medium" media="(min-width: 600px)">
            <img loading="lazy" alt="" src="./media_15c556e907ea288943e4750d21edd24b92a9d390e.png?width=750&#x26;format=png&#x26;optimize=medium" width="200" height="28">
          </picture>
        </p>
        <p><strong>tl;dr:</strong> WhatAreTopFacts.rtc will decrypt and execute encrypted shellcode embedded as a resource.</p>
        <h2 id="whataretopfactsrtc-shellcode-analysis">WhatAreTopFacts.rtc Shellcode Analysis</h2>
        <p>At the tail end of the shellcode there is an embedded Portable Executable (PE) file. The embedded PE is a DLL.</p>
        <p>
          <picture>
            <source type="image/webp" srcset="./media_16a1236703aea852c56c84aeadb36e86ca2ba788f.png?width=2000&#x26;format=webply&#x26;optimize=medium" media="(min-width: 600px)">
            <source type="image/webp" srcset="./media_16a1236703aea852c56c84aeadb36e86ca2ba788f.png?width=750&#x26;format=webply&#x26;optimize=medium">
            <source type="image/png" srcset="./media_16a1236703aea852c56c84aeadb36e86ca2ba788f.png?width=2000&#x26;format=png&#x26;optimize=medium" media="(min-width: 600px)">
            <img loading="lazy" alt="" src="./media_16a1236703aea852c56c84aeadb36e86ca2ba788f.png?width=750&#x26;format=png&#x26;optimize=medium" width="600" height="163">
          </picture>
        </p>
        <p>The shellcode begins by using the (JMP)/CALL/POP technique to get the base address of the shellcode. The base address is then used to calculate the start and end address of the embedded PE.</p>
        <p>
          <picture>
            <source type="image/webp" srcset="./media_159456298cce205043995e7e47da86a03d4c7ad83.png?width=2000&#x26;format=webply&#x26;optimize=medium" media="(min-width: 600px)">
            <source type="image/webp" srcset="./media_159456298cce205043995e7e47da86a03d4c7ad83.png?width=750&#x26;format=webply&#x26;optimize=medium">
            <source type="image/png" srcset="./media_159456298cce205043995e7e47da86a03d4c7ad83.png?width=2000&#x26;format=png&#x26;optimize=medium" media="(min-width: 600px)">
            <img loading="lazy" alt="" src="./media_159456298cce205043995e7e47da86a03d4c7ad83.png?width=750&#x26;format=png&#x26;optimize=medium" width="700" height="160">
          </picture>
        </p>
        <p>In the shellcode, there is a function that gets a pointer to the <a href="https://www.geoffchappell.com/studies/windows/win32/ntdll/structs/peb/index.htm">PEB</a> and walks the linked list of loaded modules.</p>
        <p>
          <picture>
            <source type="image/webp" srcset="./media_1cd714284f646ce9dcf94a7604b0a684ac0e3b4f6.png?width=2000&#x26;format=webply&#x26;optimize=medium" media="(min-width: 600px)">
            <source type="image/webp" srcset="./media_1cd714284f646ce9dcf94a7604b0a684ac0e3b4f6.png?width=750&#x26;format=webply&#x26;optimize=medium">
            <source type="image/png" srcset="./media_1cd714284f646ce9dcf94a7604b0a684ac0e3b4f6.png?width=2000&#x26;format=png&#x26;optimize=medium" media="(min-width: 600px)">
            <img loading="lazy" alt="" src="./media_1cd714284f646ce9dcf94a7604b0a684ac0e3b4f6.png?width=750&#x26;format=png&#x26;optimize=medium" width="650" height="194">
          </picture>
        </p>
        <p>In the same function, the <a href="https://c9x.me/x86/html/file_module_x86_id_273.html">ror instruction</a> is used within a loop.</p>
        <p>
          <picture>
            <source type="image/webp" srcset="./media_19c44773cdbe69bb4057711a30c0cfe9494279883.png?width=2000&#x26;format=webply&#x26;optimize=medium" media="(min-width: 600px)">
            <source type="image/webp" srcset="./media_19c44773cdbe69bb4057711a30c0cfe9494279883.png?width=750&#x26;format=webply&#x26;optimize=medium">
            <source type="image/png" srcset="./media_19c44773cdbe69bb4057711a30c0cfe9494279883.png?width=2000&#x26;format=png&#x26;optimize=medium" media="(min-width: 600px)">
            <img loading="lazy" alt="" src="./media_19c44773cdbe69bb4057711a30c0cfe9494279883.png?width=750&#x26;format=png&#x26;optimize=medium" width="400" height="17">
          </picture>
        </p>
        <p>This function implements a <a href="https://www.fireeye.com/blog/threat-research/2012/11/precalculated-string-hashes-reverse-engineering-shellcode.html">common shellcode technique</a> that resolves Windows API functions by using a precomputed value using a ROR 13 based hash function.</p>
        <p>The shellcode will then use the above function to resolve the APIs necessary to load a PE from memory.</p>
        <p>
          <picture>
            <source type="image/webp" srcset="./media_16713ffb1043d1b62552b01e82b0eed3fd9ed018d.png?width=2000&#x26;format=webply&#x26;optimize=medium" media="(min-width: 600px)">
            <source type="image/webp" srcset="./media_16713ffb1043d1b62552b01e82b0eed3fd9ed018d.png?width=750&#x26;format=webply&#x26;optimize=medium">
            <source type="image/png" srcset="./media_16713ffb1043d1b62552b01e82b0eed3fd9ed018d.png?width=2000&#x26;format=png&#x26;optimize=medium" media="(min-width: 600px)">
            <img loading="lazy" alt="" src="./media_16713ffb1043d1b62552b01e82b0eed3fd9ed018d.png?width=750&#x26;format=png&#x26;optimize=medium" width="650" height="358">
          </picture>
        </p>
        <p>These APIs will be used to load the PE in memory.</p>
        <p><strong>tl;dr:</strong> The shellcode will load and execute a DLL from memory.</p>
        <h2 id="whataretopfactsrtc-embedded-dll-1-analysis">WhatAreTopFacts.rtc Embedded DLL 1 Analysis</h2>
        <p>There is an embedded PE within this DLL. The embedded PE is a DLL.</p>
        <p>
          <picture>
            <source type="image/webp" srcset="./media_1b32c9d5e4e3eff000dde166f936d15c824bdd044.png?width=2000&#x26;format=webply&#x26;optimize=medium" media="(min-width: 600px)">
            <source type="image/webp" srcset="./media_1b32c9d5e4e3eff000dde166f936d15c824bdd044.png?width=750&#x26;format=webply&#x26;optimize=medium">
            <source type="image/png" srcset="./media_1b32c9d5e4e3eff000dde166f936d15c824bdd044.png?width=2000&#x26;format=png&#x26;optimize=medium" media="(min-width: 600px)">
            <img loading="lazy" alt="" src="./media_1b32c9d5e4e3eff000dde166f936d15c824bdd044.png?width=750&#x26;format=png&#x26;optimize=medium" width="500" height="203">
          </picture>
        </p>
        <p>First, this DLL dynamically resolves the API function kernel32!GetNativeSystemInfo.</p>
        <p>
          <picture>
            <source type="image/webp" srcset="./media_1d895c148dbc1cdcfd4773ff4a06bce971aab44fc.png?width=2000&#x26;format=webply&#x26;optimize=medium" media="(min-width: 600px)">
            <source type="image/webp" srcset="./media_1d895c148dbc1cdcfd4773ff4a06bce971aab44fc.png?width=750&#x26;format=webply&#x26;optimize=medium">
            <source type="image/png" srcset="./media_1d895c148dbc1cdcfd4773ff4a06bce971aab44fc.png?width=2000&#x26;format=png&#x26;optimize=medium" media="(min-width: 600px)">
            <img loading="lazy" alt="" src="./media_1d895c148dbc1cdcfd4773ff4a06bce971aab44fc.png?width=750&#x26;format=png&#x26;optimize=medium" width="450" height="59">
          </picture>
        </p>
        <p>Next, the DLL parses the embedded PE's headers and calculates the PE’s size.</p>
        <p>
          <picture>
            <source type="image/webp" srcset="./media_19d1f971f4cd99e95ce52b93d00a136541bd090d7.png?width=2000&#x26;format=webply&#x26;optimize=medium" media="(min-width: 600px)">
            <source type="image/webp" srcset="./media_19d1f971f4cd99e95ce52b93d00a136541bd090d7.png?width=750&#x26;format=webply&#x26;optimize=medium">
            <source type="image/png" srcset="./media_19d1f971f4cd99e95ce52b93d00a136541bd090d7.png?width=2000&#x26;format=png&#x26;optimize=medium" media="(min-width: 600px)">
            <img loading="lazy" alt="" src="./media_19d1f971f4cd99e95ce52b93d00a136541bd090d7.png?width=750&#x26;format=png&#x26;optimize=medium" width="600" height="587">
          </picture>
        </p>
        <p>Afterwards, VirtualAlloc is used to allocate memory at the PE's preferred base address. If memory allocation fails, then memory is allocated again, this time letting the OS decide the allocated memory address.</p>
        <p>
          <picture>
            <source type="image/webp" srcset="./media_17eca1f3d1d5fb4d4eae3d341f43c2ffcc96ff44e.png?width=2000&#x26;format=webply&#x26;optimize=medium" media="(min-width: 600px)">
            <source type="image/webp" srcset="./media_17eca1f3d1d5fb4d4eae3d341f43c2ffcc96ff44e.png?width=750&#x26;format=webply&#x26;optimize=medium">
            <source type="image/png" srcset="./media_17eca1f3d1d5fb4d4eae3d341f43c2ffcc96ff44e.png?width=2000&#x26;format=png&#x26;optimize=medium" media="(min-width: 600px)">
            <img loading="lazy" alt="" src="./media_17eca1f3d1d5fb4d4eae3d341f43c2ffcc96ff44e.png?width=750&#x26;format=png&#x26;optimize=medium" width="500" height="145">
          </picture>
        </p>
        <p>Next, the DLL allocates heap memory for a custom struct and initializes it.</p>
        <p>
          <picture>
            <source type="image/webp" srcset="./media_199812269b366a5a5f916b39a28ca8badd7e80c73.png?width=2000&#x26;format=webply&#x26;optimize=medium" media="(min-width: 600px)">
            <source type="image/webp" srcset="./media_199812269b366a5a5f916b39a28ca8badd7e80c73.png?width=750&#x26;format=webply&#x26;optimize=medium">
            <source type="image/png" srcset="./media_199812269b366a5a5f916b39a28ca8badd7e80c73.png?width=2000&#x26;format=png&#x26;optimize=medium" media="(min-width: 600px)">
            <img loading="lazy" alt="" src="./media_199812269b366a5a5f916b39a28ca8badd7e80c73.png?width=750&#x26;format=png&#x26;optimize=medium" width="400" height="79">
          </picture><br>
          <picture>
            <source type="image/webp" srcset="./media_15ca626ac2b2e38f96443b738215fd001f400574a.png?width=2000&#x26;format=webply&#x26;optimize=medium" media="(min-width: 600px)">
            <source type="image/webp" srcset="./media_15ca626ac2b2e38f96443b738215fd001f400574a.png?width=750&#x26;format=webply&#x26;optimize=medium">
            <source type="image/png" srcset="./media_15ca626ac2b2e38f96443b738215fd001f400574a.png?width=2000&#x26;format=png&#x26;optimize=medium" media="(min-width: 600px)">
            <img loading="lazy" alt="" src="./media_15ca626ac2b2e38f96443b738215fd001f400574a.png?width=750&#x26;format=png&#x26;optimize=medium" width="480" height="166">
          </picture>
        </p>
        <p>Next, the DLL copies the PE's headers into the allocated memory region.</p>
        <p>
          <picture>
            <source type="image/webp" srcset="./media_1ecfa17e479918d41b0e9498c6a45c640b4efc7ab.png?width=2000&#x26;format=webply&#x26;optimize=medium" media="(min-width: 600px)">
            <source type="image/webp" srcset="./media_1ecfa17e479918d41b0e9498c6a45c640b4efc7ab.png?width=750&#x26;format=webply&#x26;optimize=medium">
            <source type="image/png" srcset="./media_1ecfa17e479918d41b0e9498c6a45c640b4efc7ab.png?width=2000&#x26;format=png&#x26;optimize=medium" media="(min-width: 600px)">
            <img loading="lazy" alt="" src="./media_1ecfa17e479918d41b0e9498c6a45c640b4efc7ab.png?width=750&#x26;format=png&#x26;optimize=medium" width="500" height="87">
          </picture>
        </p>
        <p>The headers are then used to load the PE's sections into memory.</p>
        <p>
          <picture>
            <source type="image/webp" srcset="./media_11a75ff08b4326b7a8df34d19ea4659e49edf56ad.png?width=2000&#x26;format=webply&#x26;optimize=medium" media="(min-width: 600px)">
            <source type="image/webp" srcset="./media_11a75ff08b4326b7a8df34d19ea4659e49edf56ad.png?width=750&#x26;format=webply&#x26;optimize=medium">
            <source type="image/png" srcset="./media_11a75ff08b4326b7a8df34d19ea4659e49edf56ad.png?width=2000&#x26;format=png&#x26;optimize=medium" media="(min-width: 600px)">
            <img loading="lazy" alt="" src="./media_11a75ff08b4326b7a8df34d19ea4659e49edf56ad.png?width=750&#x26;format=png&#x26;optimize=medium" width="500" height="41">
          </picture>
        </p>
        <p>The DLL will then go onto perform base relocation, if necessary.</p>
        <p>
          <picture>
            <source type="image/webp" srcset="./media_1335ec068381e9ff66bfc3fe3fa2d63cac7f48356.png?width=2000&#x26;format=webply&#x26;optimize=medium" media="(min-width: 600px)">
            <source type="image/webp" srcset="./media_1335ec068381e9ff66bfc3fe3fa2d63cac7f48356.png?width=750&#x26;format=webply&#x26;optimize=medium">
            <source type="image/png" srcset="./media_1335ec068381e9ff66bfc3fe3fa2d63cac7f48356.png?width=2000&#x26;format=png&#x26;optimize=medium" media="(min-width: 600px)">
            <img loading="lazy" alt="" src="./media_1335ec068381e9ff66bfc3fe3fa2d63cac7f48356.png?width=750&#x26;format=png&#x26;optimize=medium" width="500" height="186">
          </picture>
        </p>
        <p>Next, the libraries in the PE's import table will be loaded.</p>
        <p>
          <picture>
            <source type="image/webp" srcset="./media_13afa74f9550d94165fdb61b8284340af7ce35fbd.png?width=2000&#x26;format=webply&#x26;optimize=medium" media="(min-width: 600px)">
            <source type="image/webp" srcset="./media_13afa74f9550d94165fdb61b8284340af7ce35fbd.png?width=750&#x26;format=webply&#x26;optimize=medium">
            <source type="image/png" srcset="./media_13afa74f9550d94165fdb61b8284340af7ce35fbd.png?width=2000&#x26;format=png&#x26;optimize=medium" media="(min-width: 600px)">
            <img loading="lazy" alt="" src="./media_13afa74f9550d94165fdb61b8284340af7ce35fbd.png?width=750&#x26;format=png&#x26;optimize=medium" width="400" height="21">
          </picture>
        </p>
        <p>Afterwards, the image base address in the PEB is set to the base address of the next stage PE.</p>
        <p>
          <picture>
            <source type="image/webp" srcset="./media_1128c2fa12988af1d8e77eb827cf4edf18b802839.png?width=2000&#x26;format=webply&#x26;optimize=medium" media="(min-width: 600px)">
            <source type="image/webp" srcset="./media_1128c2fa12988af1d8e77eb827cf4edf18b802839.png?width=750&#x26;format=webply&#x26;optimize=medium">
            <source type="image/png" srcset="./media_1128c2fa12988af1d8e77eb827cf4edf18b802839.png?width=2000&#x26;format=png&#x26;optimize=medium" media="(min-width: 600px)">
            <img loading="lazy" alt="" src="./media_1128c2fa12988af1d8e77eb827cf4edf18b802839.png?width=750&#x26;format=png&#x26;optimize=medium" width="500" height="147">
          </picture>
        </p>
        <p>Finally, the entry point of the next stage PE will be called.</p>
        <p>
          <picture>
            <source type="image/webp" srcset="./media_1150637e740d1b27b3424697d2ea1f831959483c7.png?width=2000&#x26;format=webply&#x26;optimize=medium" media="(min-width: 600px)">
            <source type="image/webp" srcset="./media_1150637e740d1b27b3424697d2ea1f831959483c7.png?width=750&#x26;format=webply&#x26;optimize=medium">
            <source type="image/png" srcset="./media_1150637e740d1b27b3424697d2ea1f831959483c7.png?width=2000&#x26;format=png&#x26;optimize=medium" media="(min-width: 600px)">
            <img loading="lazy" alt="" src="./media_1150637e740d1b27b3424697d2ea1f831959483c7.png?width=750&#x26;format=png&#x26;optimize=medium" width="450" height="66">
          </picture>
        </p>
        <p>This DLL is a <a href="https://www.exploit-db.com/docs/english/13007-reflective-dll-injection.pdf">reflective loader</a>.</p>
        <p>The custom struct from earlier can be used to find the source of this reflective loader implementation. Googling the following will lead to a fork of the <a href="https://github.com/fancycode/MemoryModule">MemoryModule</a> project:</p>
        <div class="site-github-com-virtualalloc-virtualfree-loadlibrarya-getprocaddress-freelibrary-heapalloc"></div>
        <p>The simularity <a href="https://github.com/fancycode/MemoryModule/blob/master/MemoryModule.c#L80">struct definitions</a> suggests that this DLL uses a derivative of the MemoryModule project.</p>
        <p>
          <picture>
            <source type="image/webp" srcset="./media_19d1159214cb64f15c6d17c69a4beeea8ef9ea98a.png?width=2000&#x26;format=webply&#x26;optimize=medium" media="(min-width: 600px)">
            <source type="image/webp" srcset="./media_19d1159214cb64f15c6d17c69a4beeea8ef9ea98a.png?width=750&#x26;format=webply&#x26;optimize=medium">
            <source type="image/png" srcset="./media_19d1159214cb64f15c6d17c69a4beeea8ef9ea98a.png?width=2000&#x26;format=png&#x26;optimize=medium" media="(min-width: 600px)">
            <img loading="lazy" alt="" src="./media_19d1159214cb64f15c6d17c69a4beeea8ef9ea98a.png?width=750&#x26;format=png&#x26;optimize=medium" width="250" height="333">
          </picture> <em>Struct definition from MemoryModule</em>
        </p>
        <p>
          <picture>
            <source type="image/webp" srcset="./media_10f1418c193ec1b294ee3e9491f95acdd5667027b.png?width=2000&#x26;format=webply&#x26;optimize=medium" media="(min-width: 600px)">
            <source type="image/webp" srcset="./media_10f1418c193ec1b294ee3e9491f95acdd5667027b.png?width=750&#x26;format=webply&#x26;optimize=medium">
            <source type="image/png" srcset="./media_10f1418c193ec1b294ee3e9491f95acdd5667027b.png?width=2000&#x26;format=png&#x26;optimize=medium" media="(min-width: 600px)">
            <img loading="lazy" alt="" src="./media_10f1418c193ec1b294ee3e9491f95acdd5667027b.png?width=750&#x26;format=png&#x26;optimize=medium" width="249" height="272">
          </picture> <em>Reversed struct definition</em>
        </p>
        <p>The only significant differences between reflective loader implementations were:</p>
        <ul>
          <li>A custom implementation of the C Run-time Library's (CRT) realloc function is used. This is a necessary since the CRT's realloc function requires that the CRT is initialized, which it will not be in this case.</li>
          <li>GetNativeSystemInfo is dynamically resolved instead of imported</li>
          <li>The image base addresses in the PEB is updated</li>
        </ul>
        <p><strong>tl;dr:</strong> This DLL will load and execute the next stage DLL from memory using <a href="https://github.com/fancycode/MemoryModule">MemoryModule.</a></p>
        <h2 id="whataretopfactsrtc-embedded-dll-2-analysis">WhatAreTopFacts.rtc Embedded DLL 2 Analysis</h2>
        <p>This DLL is similar but slightly different to the DLL from the previous stage. The custom struct no longer has a field for VirtualAlloc and VirtualFree. This correlates with revisions of MemoryModule prior to commit <a href="https://github.com/fancycode/MemoryModule/tree/d88817fbf7debbd0a0c2f5cc6e193f3a38f1d114">d88817fb</a>.<br>It is odd that two different versions of the same project are used within the same sample.</p>
        <p>
          <picture>
            <source type="image/webp" srcset="./media_1e23a7bb86baa6b4f01b875edb962a6e1df340866.png?width=2000&#x26;format=webply&#x26;optimize=medium" media="(min-width: 600px)">
            <source type="image/webp" srcset="./media_1e23a7bb86baa6b4f01b875edb962a6e1df340866.png?width=750&#x26;format=webply&#x26;optimize=medium">
            <source type="image/png" srcset="./media_1e23a7bb86baa6b4f01b875edb962a6e1df340866.png?width=2000&#x26;format=png&#x26;optimize=medium" media="(min-width: 600px)">
            <img loading="lazy" alt="" src="./media_1e23a7bb86baa6b4f01b875edb962a6e1df340866.png?width=750&#x26;format=png&#x26;optimize=medium" width="480" height="138">
          </picture>
        </p>
        <p>The next stage DLL is launched by calling its DllRegisterServer exported function.</p>
        <p>
          <picture>
            <source type="image/webp" srcset="./media_17de405537edad0044f8d2aed2039aae8bc5f7706.png?width=2000&#x26;format=webply&#x26;optimize=medium" media="(min-width: 600px)">
            <source type="image/webp" srcset="./media_17de405537edad0044f8d2aed2039aae8bc5f7706.png?width=750&#x26;format=webply&#x26;optimize=medium">
            <source type="image/png" srcset="./media_17de405537edad0044f8d2aed2039aae8bc5f7706.png?width=2000&#x26;format=png&#x26;optimize=medium" media="(min-width: 600px)">
            <img loading="lazy" alt="" src="./media_17de405537edad0044f8d2aed2039aae8bc5f7706.png?width=750&#x26;format=png&#x26;optimize=medium" width="540" height="42">
          </picture>
        </p>
        <p><strong>tl;dr:</strong> This DLL will load and execute the next stage DLL from memory using <a href="https://github.com/fancycode/MemoryModule">MemoryModule</a> (again).</p>
        <h2 id="whataretopfactsrtc-embedded-dll-3-analysis">WhatAreTopFacts.rtc Embedded DLL 3 Analysis</h2>
        <p>First, the DLL will allocate PAGE_EXECUTE_READWRITE memory using obfuscated values for the constants: MEM_COMMIT and PAGE_EXECUTE_READWRITE.</p>
        <p>
          <picture>
            <source type="image/webp" srcset="./media_1fc7dbf13b4e6d58a52551079f79c437a2e084e9f.png?width=2000&#x26;format=webply&#x26;optimize=medium" media="(min-width: 600px)">
            <source type="image/webp" srcset="./media_1fc7dbf13b4e6d58a52551079f79c437a2e084e9f.png?width=750&#x26;format=webply&#x26;optimize=medium">
            <source type="image/png" srcset="./media_1fc7dbf13b4e6d58a52551079f79c437a2e084e9f.png?width=2000&#x26;format=png&#x26;optimize=medium" media="(min-width: 600px)">
            <img loading="lazy" alt="" src="./media_1fc7dbf13b4e6d58a52551079f79c437a2e084e9f.png?width=750&#x26;format=png&#x26;optimize=medium" width="600" height="254">
          </picture>
        </p>
        <p>Then, encrypted shellcode is decrypted using an XOR based encryption/decryption routine.</p>
        <p>
          <picture>
            <source type="image/webp" srcset="./media_18e83c53a87eb6850dd6948684090774f0eba8936.png?width=2000&#x26;format=webply&#x26;optimize=medium" media="(min-width: 600px)">
            <source type="image/webp" srcset="./media_18e83c53a87eb6850dd6948684090774f0eba8936.png?width=750&#x26;format=webply&#x26;optimize=medium">
            <source type="image/png" srcset="./media_18e83c53a87eb6850dd6948684090774f0eba8936.png?width=2000&#x26;format=png&#x26;optimize=medium" media="(min-width: 600px)">
            <img loading="lazy" alt="" src="./media_18e83c53a87eb6850dd6948684090774f0eba8936.png?width=750&#x26;format=png&#x26;optimize=medium" width="480" height="106">
          </picture><br>
          <picture>
            <source type="image/webp" srcset="./media_1189f0dc1e18c5925ee2b74a66b089d9f51fe3b90.png?width=2000&#x26;format=webply&#x26;optimize=medium" media="(min-width: 600px)">
            <source type="image/webp" srcset="./media_1189f0dc1e18c5925ee2b74a66b089d9f51fe3b90.png?width=750&#x26;format=webply&#x26;optimize=medium">
            <source type="image/png" srcset="./media_1189f0dc1e18c5925ee2b74a66b089d9f51fe3b90.png?width=2000&#x26;format=png&#x26;optimize=medium" media="(min-width: 600px)">
            <img loading="lazy" alt="" src="./media_1189f0dc1e18c5925ee2b74a66b089d9f51fe3b90.png?width=750&#x26;format=png&#x26;optimize=medium" width="760" height="276">
          </picture>
        </p>
        <p>After decryption, the shellcode will be executed using the API function CreateThread.</p>
        <p>
          <picture>
            <source type="image/webp" srcset="./media_19a162fbfde97ddb5f4721dac1730af06c65316e2.png?width=2000&#x26;format=webply&#x26;optimize=medium" media="(min-width: 600px)">
            <source type="image/webp" srcset="./media_19a162fbfde97ddb5f4721dac1730af06c65316e2.png?width=750&#x26;format=webply&#x26;optimize=medium">
            <source type="image/png" srcset="./media_19a162fbfde97ddb5f4721dac1730af06c65316e2.png?width=2000&#x26;format=png&#x26;optimize=medium" media="(min-width: 600px)">
            <img loading="lazy" alt="" src="./media_19a162fbfde97ddb5f4721dac1730af06c65316e2.png?width=750&#x26;format=png&#x26;optimize=medium" width="500" height="20">
          </picture>
        </p>
        <p>Finally, the DLL waits 3 seconds for the shellcode to finish before exiting the rundll32 process.</p>
        <p>
          <picture>
            <source type="image/webp" srcset="./media_10ee2c3ff20c77e45b34d6c3f138cab021040364b.png?width=2000&#x26;format=webply&#x26;optimize=medium" media="(min-width: 600px)">
            <source type="image/webp" srcset="./media_10ee2c3ff20c77e45b34d6c3f138cab021040364b.png?width=750&#x26;format=webply&#x26;optimize=medium">
            <source type="image/png" srcset="./media_10ee2c3ff20c77e45b34d6c3f138cab021040364b.png?width=2000&#x26;format=png&#x26;optimize=medium" media="(min-width: 600px)">
            <img loading="lazy" alt="" src="./media_10ee2c3ff20c77e45b34d6c3f138cab021040364b.png?width=750&#x26;format=png&#x26;optimize=medium" width="500" height="87">
          </picture>
        </p>
        <p><strong>tl;dr:</strong> this DLL will decrypt and execute shellcode using the CreateThread.</p>
        <h2 id="whataretopfactsrtc-embedded-dll-3-shellcode-analysis">WhatAreTopFacts.rtc Embedded DLL 3 Shellcode Analysis</h2>
        <p>In the last part of the installation phase, self-unpacking shellcode is used to create a new 64-bit wermgr.exe process in the suspended state using kernel32!CreateProcessInternalW.<br>Then, the shellcode transitions the current 32-bit process (rundll32.exe) context into a 64-bit context. This context switch will bypass popular API monitoring tools that only hook 32-bit ntdll APIs for WoW64 processes.<br>After switching context, code is injected into the suspended process using the <a href="https://attack.mitre.org/techniques/T1055/012/">Process Hollowing</a> technique.<br>Finally to complete installation, the main thread of the wermgr.exe process is resumed.\</p>
      </div>
      <div>
        <h3 id="related-content">Related Content</h3>
        <div class="related-content">
          <div>
            <div>
              <p><strong>Related Products</strong></p>
              <p><a href="https://www.keysight.com/us/en/products/network-security/breach-defense/threat-simulator.html">Threat Simulator</a></p>
              <p><a href="https://www.keysight.com/us/en/products/network-security/breakingpoint.html">BreakingPoint</a></p>
            </div>
          </div>
        </div>
      </div>
      <div>
        <h3 id="related-posts">Related Posts</h3>
        <div class="post-cards">
          <div>
            <div>limit</div>
            <div>3</div>
          </div>
        </div>
      </div>
    </main>
    <footer></footer>
  </body>
</html>
