<!DOCTYPE html> <html lang="en"> <head> <meta charset="utf-8">  <title>A hard look at at BBTok</title> <meta http-equiv="x-ua-compatible" content="IE=edge" /> <meta name="generator" content="TYPO3 CMS" /> <meta name="description" content="BBTok is a very challenging piece of malware to examine. Marius Benthin and Karsten Hahn were able to pry open a critical part of the infection chain." /> <meta name="viewport" content="width=device-width, initial-scale=1" /> <meta name="application-name" content="G DATA | Trust in German Sicherheit" /> <meta http-equiv="content-language" content="en" /> <meta property="og:title" content="BBTok Targeting Brazil: Deobfuscating the .NET Loader with dnlib and PowerShell" /> <meta property="og:description" content="A complex infection chain and a targeted approach make BBTok a very challenging piece of malware to examine. Analysts Marius Benthin and Karsten Hahn were able to examine a critical part of the infection chain and describe its inner workings in this latest article. " /> <meta property="og:image" content="https://www.gdatasoftware.com/fileadmin/web/general/images/blog/2024/09/G_DATA_Blog_Brazil_Malware_Assy_OGTag.jpg" /> <meta property="og:image:url" content="https://www.gdatasoftware.com/fileadmin/web/general/images/blog/2024/09/G_DATA_Blog_Brazil_Malware_Assy_OGTag.jpg" /> <meta property="og:image:width" content="1200" /> <meta property="og:image:height" content="630" /> <meta property="og:image:alt" content="A robotic figure with intricate gears and circuits inspects its mechanical hand, while a control room with glowing screens forms the background. The text &quot;Brazilian malware assembles itself&quot; appears prominently at the top, alongside the G Data CyberDefense logo." /> <meta name="twitter:card" content="summary" /> <meta name="twitter:title" content="BBTok Targeting Brazil: Deobfuscating the .NET Loader with dnlib and PowerShell" /> <meta name="twitter:description" content="A complex infection chain and a targeted approach make BBTok a very challenging piece of malware to examine. Analysts Marius Benthin and Karsten Hahn were able to examine a critical part of the infection chain and describe its inner workings in this latest article. " /> <meta name="twitter:image" content="https://www.gdatasoftware.com/fileadmin/web/general/images/blog/2024/09/G_DATA_Blog_Brazil_Malware_Assy_OGTag.jpg" /> <meta name="twitter:image:alt" content="A robotic figure with intricate gears and circuits inspects its mechanical hand, while a control room with glowing screens forms the background. The text &quot;Brazilian malware assembles itself&quot; appears prominently at the top, alongside the G Data CyberDefense logo." /> <meta name="apple-mobile-web-app-capable" content="yes" /> <meta name="msapplication-navbutton-color" content="#1e1e1e" /> <meta name="yandex-verification" content="4cf0234eb3af74fb" /> <meta name="dc.title" content="A hard look at at BBTok" /> <meta name="date" content="2024-09-26T10:14:49" /> <meta name="dc.date" content="2024-09-26T10:14:49" /> <meta name="copyright" content="G DATA CyberDefense AG, 2024. All rights reserved." /> <link rel="stylesheet" href="/typo3conf/ext/gd_sites/Resources/Public/Styles/basic-styles.css?1729663114" media="all"> <link rel="stylesheet" href="/typo3conf/ext/gd_sites/Resources/Public/Styles/font/gcon.css?1729663114" media="all"> <link rel="stylesheet" href="/typo3conf/ext/gd_sites/Resources/Public/Styles/font/source-sans-pro.css?1729663114" media="all"> <link rel="stylesheet" href="/typo3conf/ext/gd_sites/Resources/Public/Styles/assets/prism.css?1729663114" media="all"> <link href="/typo3conf/ext/gd_sites/Resources/Public/Styles/elements/menu-2019.css?1729663114" rel="stylesheet" > <link href="/typo3conf/ext/gd_sites/Resources/Public/Styles/assets/blogpage.css?1729663114" rel="stylesheet" > <script type="text/javascript" data-cmp-ab="1" src="https://cdn.consentmanager.net/delivery/autoblocking/fe6daaf9c1a67.js" data-cmp-host="b.delivery.consentmanager.net" data-cmp-cdn="cdn.consentmanager.net" data-cmp-codesrc="0"></script> <script>
    function setOffline(e,o) {o.dontshow = 1;}
    if (window.location.href.indexOf('gd-ncb=2') !== -1 || window.sessionStorage.getItem('gd_no-tracking') === 'true') {
        __cmp("addEventListener",["init",setOffline,false],null);
        __cmp("addEventListener",["settings",setOffline,false],null);
        window.sessionStorage.setItem('gd_no-tracking', 'true');
    }
  </script> <link rel="apple-touch-icon" href="/apple-touch-icon.png"/><link rel="alternate" type="application/atom+xml" title="G DATA SecurityBlog (deutsch)" href="https://feeds.feedblitz.com/GDataSecurityBlog-DE&x=1" /> <link rel="alternate" type="application/atom+xml" title="G DATA SecurityBlog (english)" href="https://feeds.feedblitz.com/GDataSecurityBlog-EN&x=1" /><meta name="author" content="Marius Benthin, Karsten Hahn"><meta name="DC.author" content="Marius Benthin, Karsten Hahn"> <link rel="dns-prefetch" href="//file.gdatasoftware.com"> <link rel="dns-prefetch" href="//static.gdatasoftware.com"> <link rel="dns-prefetch" href="//www.google-analytics.com"> <link rel="dns-prefetch" href="//www.googletagmanager.com"> <link rel="canonical" href="https://www.gdatasoftware.com/blog/2024/09/38039-bbtok-deobfuscating-net-loader"/>  <script type="application/ld+json">[{"@context":"https:\/\/www.schema.org","@type":"BreadcrumbList","itemListElement":[{"@type":"ListItem","position":1,"item":{"@id":"https:\/\/www.gdatasoftware.com\/","name":"Home"}},{"@type":"ListItem","position":2,"item":{"@id":"https:\/\/www.gdatasoftware.com\/blog","name":"Blog (EN)"}},{"@type":"ListItem","position":3,"item":{"@id":"https:\/\/www.gdatasoftware.com\/blog\/2024\/09\/38039-bbtok-deobfuscating-net-loader","name":"BBTok Targeting Brazil: Deobfuscating the .NET Loader with dnlib and PowerShell"}}]}]</script> </head> <body id="page-38039" class="fe-0 be-"> <div id="outer-wrap"> <header id="site-header" class="height-auto"> <div class="menu-overlay" data-menu-close></div> <div id="mobile-head" data-menu-website="blog" class="clearfix hide-for-large"> <a href="/blog" id="mobile-logo"> <div class="logo"> <img src="https://www.gdatasoftware.com/typo3conf/ext/gd_sites/Resources/Public/Images/logo-for-dark.svg" alt="G DATA Logo" height="40""/> </div> </a> <a id="service-nav-trigger"><span>MENU</span> <div id="hamburger" class="hamburger-icon-container"> <span class="hamburger-icon"></span> </div> </a> </div> <div id="main-navi" data-menu-website="blog" class="logged-in main-navi-before"> <div class="level-1 flex-container"> <div class="logo show-for-large"> <a href="/blog" > <img src="https://www.gdatasoftware.com/typo3conf/ext/gd_sites/Resources/Public/Images/logo-for-dark.svg" alt="G DATA Logo" height="40"/> </a> </div> <nav role="navigation"> <ul class="menu"> <li> <a class="effect-underline" href="/blog/awareness">Awareness</a> </li> <li> <a class="effect-underline" href="/blog/g-data-campues">G DATA Campus</a> </li> <li> <a class="effect-underline" href="/blog/smb-secuerity">SMB Security</a> </li> <li> <a class="effect-underline" href="/blog/tips-and-tricks">Tips and tricks</a> </li> <li> <a class="effect-underline" href="/blog/techblog">Techblog</a> </li> <li class="ar pop-up choose-language"> <a href="https://www.gdata.de/blog"> <img src="/typo3conf/ext/gd_sites/Resources/Public/Images/Flags/DE.svg" style="height:20px" alt="Switch to german version" /> </a> </li> <li class="ar pop-up rss"> <a href="https://feeds.feedblitz.com/GDataSecurityBlog-EN&amp;x=1" target="_blank" rel="noreferrer"> <i class="icon-rss"></i><span class="title"></span> </a> </li> </ul> </nav> <div class="blog-subwrap"> <ul class="blog-subnavi"> <li> <a class="nav-link" href="/blog/ransomware">Ransomware</a> </li> <li> <a class="nav-link" href="/blog/warning">Warning</a> </li> <li> <a class="nav-link" href="/blog/malware">Malware</a> </li> <li> <a class="nav-link" href="/blog/cybercrime">CyberCrime</a> </li> <li> <a class="nav-link" href="/blog/exploits">Exploits</a> </li> <li> <a class="nav-link" href="/blog/phishing">Phishing</a> </li> <li> <a class="nav-link" href="/blog/bots-botnets">Bots &amp; Botnets</a> </li> </ul> <div class="searchbox"> <form action="/blog/search" method="GET"> <input type="text" name="tx_kesearch_pi1[sword]" placeholder="search phrase" /> <button data-trigger-searchinput type="button"><i class="icon-search"></i></button> </form> </div> </div> </div> </div> </header> <div id="inner-wrap"> <div id="main" role="main"> <div class="row expanded blog-head-container"> <div class="pagenews-header blogpage-header text-white bg-right bgm-left"> <div class="outer"> <div class="inner v-middle"> <header> <h1>BBTok Targeting Brazil: Deobfuscating the .NET Loader with dnlib and PowerShell</h1> <span itemprop="dateCreated">09/26/2024 </span> </header> </div> </div> <span class="cat-title">G DATA <strong>Blog</strong></span> <span class="cat-icon"><i class="icon-blog has-top top"></i></span> </div> <style> .blogpage-header { background-image:url(/fileadmin/web/general/images/blog/2024/09/G_DATA_Blog_Brazil_Malware_Assy_Header.jpg); } @media only screen and (max-width: 767px) { .blogpage-header { background-image:url(/fileadmin/_processed_/f/5/G_DATA_Blog_Brazil_Malware_Assy_Header_1673f220c3.jpg); }} </style> </div> <div class="row"> <div class="column small-12 medium-12 large-9" id="blogpage-content-container"> <div class="row"> <div class="column fce small-12"> <p class="intro-text">We break down the full infection chain of the Brazilian-targeted threat BBTok and demonstrate how to deobfuscate the loader DLL using PowerShell, Python, and dnlib.</p> </div> </div> <div class="row hide-for-large"> <div class="column small-12"> <div class="pagenews-progress"> <div class="reading-time"> <span class="eta"></span> <span class="word-count"></span> </div> <div data-sticky-container id="mobile-progress-container" class="hide-on-large"> <progress value="0" class="sticky" data-sticky data-margin-top="0" data-sticky-on="small" data-margin-bottom="0" data-top-anchor="mobile-progress-container" data-btm-anchor="site-footer:top"></progress> </div> </div> <nav class="mobile-menu"> <ul class="pagenews-menu"> <li> <a href="#c235400" data-scroll-link> <span>Intrusion utilizing the Microsoft Build Engine </span> </a> </li> <li> <a href="#c235406" data-scroll-link> <span>AppDomain Manager Injection</span> </a> </li> <li> <a href="#c235408" data-scroll-link> <span>Deobfuscation of Trammy.dll</span> </a> </li> <li> <a href="#c235415" data-scroll-link> <span>Trammy.dll Analysis</span> </a> </li> <li> <a href="#c235416" data-scroll-link> <span>Log File Translation</span> </a> </li> <li> <a href="#c235417" data-scroll-link> <span>Exfiltrated OS Info</span> </a> </li> <li> <a href="#c235418" data-scroll-link> <span>Download, Decryption and Persistence</span> </a> </li> <li> <a href="#c235422" data-scroll-link> <span>Hashes</span> </a> </li> <li> <a href="#c235423" data-scroll-link> <span>URLs</span> </a> </li> <li> <a href="#c235424" data-scroll-link> <span>Paths</span> </a> </li> <li> <a href="#pagenews-related-articles"> <span>Related articles</span> </a> </li> </ul> </nav> </div> </div> <div class="row"> <div id="c235434" class="fce column large-12 small-12 frame-layout-0 " ><p>In a complex infection chain that starts with an email containing an ISO image, this malware stands out by its way of compiling C# code directly on the infected machine. It also uses a technique known as AppDomain Manager Injection to advance execution. Articles from <a href="https://research.checkpoint.com/2023/behind-the-scenes-of-bbtok-analyzing-a-bankers-server-side-components/" target="_blank" rel="noreferrer">Checkpoint</a> and <a href="https://www.trendmicro.com/en_us/research/24/i/banking-trojans-mekotio-looks-to-expand-targets--bbtok-abuses-ut.html" target="_blank" rel="noreferrer">TrendMicro</a> describe a similar infection chain and attribute it to BBTok banker, but to our knowledge, no one has yet published an analysis on the obfuscated .NET based loader named Trammy.dll.</p><p>The loader writes a log file with obscure words onto infected machines, for which we provide a translation table so that incident responders can decode the logs.</p><p>The obfuscation of Trammy.dll, which uses a ConfuserEx variant, prevents current automatic tools from retrieving the strings. We provide the necessary scripts and commands to deobfuscate them.</p></div> <div data-magellan-target="c235400" class="small-12 column"><div class="row"> <div id="c235400" class="fce column large-12 small-12 frame-layout-0 " ><header class=" "><h2 class=" "> Intrusion utilizing the Microsoft Build Engine </h2></header><p class="Paragraph SCXW39731284 BCX8">Recently, we discovered several malicious ISO images<sup>[F1-4]</sup> in our telemetry, apparently targeting Brazilian entities. A <a href="https://www.virustotal.com/gui/file/24fac4ef193014e34fc30f7a4b7ccc0b1232ab02f164f105888aabe06efbacc3/community" target="_blank" class="Hyperlink SCXW39731284 BCX8" rel="noreferrer noopener"><u class="BCX8 SCXW39731284 TextRun Underlined" data-contrast="none">comment on Virustotal</u></a> mentions that they are delivered via email. All these ISOs<sup>[F1-4]</sup> contain one Windows shortcut file (LNK)<sup>[F5]</sup> and one folder (see figure 1). Inside the folder we found an executable<sup>[F6]</sup>, an XML file<sup>[F7]</sup>, a PDF<sup>[F8]</sup> and a ZIP archive<sup>[F9]</sup>.&nbsp;&nbsp;</p><p class="Paragraph SCXW39731284 BCX8">The LNK file<sup>[F5]</sup>, <strong class="BCX8 SCXW39731284 TextRun" data-contrast="auto">DANFE10103128566164.pdf.lnk</strong>, links to the executable<sup>[F6]</sup> in the folder and passes the XML file<sup>[F7] </sup>as input along with the –nologo option. All files inside the ISO<sup>[F1] </sup>are named "DANFE10103128566164" which includes the Portuguese acronym "DANFE". The acronym means "<strong class="BCX8 SCXW39731284 TextRun" data-contrast="auto">D</strong>ocumento <strong class="BCX8 SCXW39731284 TextRun" data-contrast="auto">A</strong>uxiliar da <strong class="BCX8 SCXW39731284 TextRun" data-contrast="auto">N</strong>ota <strong class="BCX8 SCXW39731284 TextRun" data-contrast="auto">F</strong>iscal <strong class="BCX8 SCXW39731284 TextRun" data-contrast="auto">E</strong>lectronica" and <a href="https://edicomgroup.com/blog/electronic-invoicing-brazil" target="_blank" class="Hyperlink SCXW39731284 BCX8" rel="noreferrer noopener"><u class="BCX8 SCXW39731284 TextRun Underlined" data-contrast="none">refers to a digital invoice</u></a> usually distributed in PDF format between Brazilian companies.&nbsp;&nbsp;</p><p class="Paragraph SCXW39731284 BCX8">The attackers take advantage of this by disguising the LNK file<sup>[F5]</sup> with the PDF icon that is embedded within the standard Microsoft Edge executable (msedge.exe) of the system to lure targets into executing it.&nbsp;</p></div> <div id="c235403" class="fce column large-12 small-12 frame-layout-0 " ><div class="ce-image ce-center ce-above"><div class="ce-gallery row small-up-1 medium-up-1 large-up-1"><div class="column column-block"><figure class="image"><a href="/fileadmin/_processed_/d/9/GDATA_Trammy_ISO_65334e1364.png" class="fancybox"><img class="image-embed-item thumbnail" src="/fileadmin/_processed_/d/9/GDATA_Trammy_ISO_dd42e7849d.png" width="1436" height="375" loading="lazy" alt="" /></a><figcaption class="image-caption"> Figure 1: Content of the ISO image </figcaption></figure></div></div></div></div> <div id="c235401" class="fce column large-12 small-12 frame-layout-0 " ><p>The executable, <strong class="BCX8 SCXW56211611 TextRun" data-contrast="auto">DANFE10103128566164.exe</strong><sup>[F6]</sup>, is a validly signed Microsoft Build Engine version 4.7.3190.0 (MSBuild.exe). The malware uses it to compile malicious C# code embedded within the XML file<sup>[F7]</sup> on the infected machine (see figure 2). The result of the compilation process is a .NET DLL<sup>[F13]</sup> which is dropped and executed in the local TEMP folder with a randomized name. Since the plain C# code is included in the XML file<sup>[F7]</sup>, the analysis is straightforward.&nbsp;</p></div> <div id="c235404" class="fce column large-12 small-12 frame-layout-0 " ><div class="ce-image ce-center ce-above"><div class="ce-gallery row small-up-1 medium-up-1 large-up-1"><div class="column column-block"><figure class="image"><a href="/fileadmin/_processed_/9/e/GDATA_Trammy_XML_455bd7f895.png" class="fancybox"><img class="image-embed-item thumbnail" src="/fileadmin/_processed_/9/e/GDATA_Trammy_XML_74bcf3bb8e.png" width="1436" height="559" loading="lazy" alt="" /></a><figcaption class="image-caption"> Figure 2: XML project file[F7] for Microsoft Build Engine containing the malicious C# code </figcaption></figure></div></div></div></div> <div id="c235402" class="fce column large-12 small-12 frame-layout-0 " ><p class="Paragraph SCXW166174484 BCX8">First, the freshly compiled .NET DLL<sup>[F13]</sup> opens the decoy PDF<sup>[F8]</sup> which displays a DANFE invoice to the target user. Afterwards, it extracts the ZIP archive<sup>[F9] </sup>and copies the Microsoft Build Engine<sup>[F6]</sup> to <strong>C:\ProgramData\regid.5498-06.com.microsoft</strong><sup>[P1]</sup> via PowerShell. Finally, it leverages a <a href="https://v3ded.github.io/redteam/utilizing-programmatic-identifiers-progids-for-uac-bypasses" target="_blank" class="Hyperlink SCXW166174484 BCX8" rel="noreferrer noopener"><u class="BCX8 SCXW166174484 TextRun Underlined" data-contrast="none">UAC bypass using ProgIDs</u></a> together with the auto-elevated system binary <strong>computerdefaults.exe</strong> to run the Microsoft Build Engine<sup>[F6] </sup>once again.&nbsp;&nbsp;</p><p class="Paragraph SCXW166174484 BCX8">This time, however, MSBuild.exe<sup>[F6] </sup>does not compile C# code again but runs another DLL, Trammy.dll<sup>[F10]</sup>, based on project configuration file<sup>[F11]</sup>. Both are extracted from the previously mentioned ZIP archive<sup>[F9]</sup>. To prevent consecutive execution of the UAC bypass, it creates a local mutex called <strong>TiiSbtvhvbCMW</strong>. &nbsp;</p><p class="Paragraph SCXW166174484 BCX8">Figure 3 shows a comprehensive overview of this part of the infection chain.</p></div> <div id="c235405" class="fce column large-12 small-12 frame-layout-0 " ><div class="ce-image ce-center ce-above"><div class="ce-gallery row small-up-1 medium-up-1 large-up-1"><div class="column column-block"><figure class="image"><a href="/fileadmin/_processed_/e/5/GDATA_Trammy_Stage_1_658ac7d84e.png" class="fancybox"><img class="image-embed-item thumbnail" src="/fileadmin/user_upload/Presse/Deutschland/2024/09/GDATA_Trammy_Stage_1.png" width="1411" height="521" loading="lazy" alt="" /></a><figcaption class="image-caption"> Figure 3: Stage 1—Utilizing Microsoft Build Engine to execute .NET DLLs; the letters and numbers in square brackets are references into the IoC table (click to enlarge) </figcaption></figure></div></div></div></div> </div></div> <div data-magellan-target="c235406" class="small-12 column"><div class="row"> <div id="c235406" class="fce column large-12 small-12 frame-layout-0 " ><header class=" "><h2 class=" "> AppDomain Manager Injection </h2></header><p class="Paragraph SCXW200809856 BCX8">The configuration file<sup>[F11]</sup> declares the class <code>SacApp.SacApp</code> of Trammy.dll<sup>[F10]</sup> as AppDomainManager (see figure 4). An AppDomainManager is responsible for customizing the AppDomain of an application, which is an isolated environment for the managed code.&nbsp;</p><p class="Paragraph SCXW200809856 BCX8">That means declaring <code>SacApp.SacApp</code> as AppDomainManager leads to the execution of malicious code in <code>InitializeNewDomain()</code> - a standard method that has been overridden by SacApp.SacApp<sup>[F10]</sup>. This technique is known as <a href="https://www.rapid7.com/blog/post/2023/05/05/appdomain-manager-injection-new-techniques-for-red-teams/" target="_blank" class="Hyperlink SCXW200809856 BCX8" rel="noreferrer noopener"><u class="BCX8 SCXW200809856 TextRun Underlined" data-contrast="none">AppDomain Manager Injection</u></a>.&nbsp;</p></div> <div id="c235407" class="fce column large-12 small-12 frame-layout-0 " ><div class="ce-image ce-center ce-above"><div class="ce-gallery row small-up-1 medium-up-1 large-up-1"><div class="column column-block"><figure class="image"><a href="/fileadmin/_processed_/7/2/GDATA_Trammy_Config_d6d284a6f7.png" class="fancybox"><img class="image-embed-item thumbnail" src="/fileadmin/_processed_/7/2/GDATA_Trammy_Config_1b12841f8c.png" width="1436" height="332" loading="lazy" alt="" /></a><figcaption class="image-caption"> Figure 4: The class SacApp.SacApp is registered as AppDomainManagerType in the .config file [F11] </figcaption></figure></div></div></div></div> </div></div> <div data-magellan-target="c235408" class="small-12 column"><div class="row"> <div id="c235408" class="fce column large-12 small-12 frame-layout-0 " ><header class=" "><h2 class=" "> Deobfuscation of Trammy.dll </h2></header><p>DANFE10103128566164.dll<sup>[F10]</sup>, is not packed but obfuscated with <a href="https://github.com/yck1509/ConfuserEx" target="_blank" rel="noreferrer">ConfuserEx</a>. It has the module name Trammy.dll. Specific deobfuscation tools like NoFuserEx and <a href="https://github.com/ViRb3/de4dot-cex" target="_blank" rel="noreferrer">de4dot-cex</a> remove the control flow flattening, but do not automatically retrieve the strings.</p><p>There are five string decode methods and each one takes an integer as key that it uses to compute the deobfuscated string. After applying de4dot-cex to the DLL, we retrieve all these keys using <a href="https://github.com/0xd4d/dnlib">dnlib</a> and Python. This code searches for pairs of <code>ldc_i4</code> and <code>call</code> instructions, and returns the <code>ldc_i4</code> operands. This may return more than the string decoding keys, but it does not matter for the steps that follow.</p><p>&nbsp;</p><pre><code class="language-python">import clr
clr.AddReference(r'dnlib.dll')

import dnlib
from dnlib.DotNet import *
from dnlib.DotNet.Emit import OpCodes


def extract_values_from_method(method):
    if not method.HasBody: return []
    values = []
    instr = [x for x in method.Body.Instructions]
    while len(instr) &gt;= 2:
        ldc_i4 = instr[0]
        call_instr = instr[1]
        if ldc_i4.OpCode.Code == OpCodes.Ldc_I4.Code and call_instr.OpCode.Code == OpCodes.Call.Code:
            print('found pattern in', method)
            i4_val = ldc_i4.GetLdcI4Value()
            print('value', i4_val)
            values.append(i4_val)
        instr = instr[1:]
    return values

def extract_values_from_module(module):
    values = []
    for t in module.GetTypes():
        for m in t.Methods:
            values.extend(extract_values_from_method(m))
    return values

afile = r"DANFE10103128566164.dll"
module = ModuleDefMD.Load(afile) # type: ignore
values = extract_values_from_module(module)
print(values)
print('done')</code></pre></div> <div id="c235411" class="fce column large-12 small-12 frame-layout-0 " ><p>We use DnSpy's IL editing feature to remove the anti-reversing checks from the five string decoding methods. Every methods starts with an if statement that checks if the caller is the current assembly. If it is not the current assembly, an empty string will be returned. Replacing the if statement with NOP instructions allows us to execute the code from PowerShell.</p><p>We recover the strings dynamically for each method using the following PowerShell commands. The variable <code>$nums</code> is an array of all the keys that we extracted with the previous script. The string decoding methods have two characteristics that must be taking into account.</p><ol><li>They are located in the global type <code>&lt;Module&gt;</code> and cannot be accessed via <code>[namespace.ClassName]::methodname()</code>. So we resolve the string decoding methods via their token instead (here 0x6000005).</li><li>The string decoding methods have a generic return type, so we must provide the return type via <code>MakeGenericMethod([string])</code>.</li></ol><pre><code class="language-powershell">$nums = @(&lt;extracted keys&gt;)
$assembly = [Reflection.Assembly].LoadFile("DANFE10103128566164_antidebug_fixed.dll")
$method = $assembly.ManifestModule.ResolveMethod(0x6000005)
$gen = $method.MakeGenericMethod([string])
$nums | ForEach-Object { try { "$($_):" + $gen.Invoke($null, @( $_.PSObject.BaseObject )) } catch {} } &gt; result.txt</code></pre></div> <div id="c235412" class="fce column large-12 small-12 frame-layout-0 " ><p>The last command creates a mapping of the keys for the string decoding methods to the deobfuscated strings. The try-catch swallows any error messages that would be printed due to wrong keys.</p><p>We repeat these commands for all string decoding methods until we have a merged <strong>result.txt</strong> that contains all keys and decoded strings. This file will also have empty mappings that we remove with by replacing the regex <code>^.*:\r\n$</code> with nothing. We transform the result into a Python dictionary by replacing <code>^(-?\d+):(.*)$</code> with <code>\1:r'\2',</code> (Notepad++ syntax). Then we slightly modify the previous Python script so that it replaces <code>call</code> instructions to the string decoding functions with <code>ldstr</code> instructions and the appropriate deobfuscated string as operand.</p><p>&nbsp;</p><pre><code class="language-python">import clr
clr.AddReference(r'dnlib.dll')

import dnlib
from dnlib.DotNet import *
from dnlib.DotNet.Emit import OpCodes

strings_dict = { &lt;key to deobfuscated string from previous step&gt; }

def decrypt_strings_from_method(method):
    if not method.HasBody: return []
    instr = [x for x in method.Body.Instructions]
    while len(instr) &gt;= 2:
        ldc_i4 = instr[0]
        call_instr = instr[1]
        if ldc_i4.OpCode.Code == OpCodes.Ldc_I4.Code and call_instr.OpCode.Code == OpCodes.Call.Code:
            i4_val = ldc_i4.GetLdcI4Value()
            if i4_val in strings_dict:
                dec_str = strings_dict.get(i4_val)
                call_instr.OpCode = OpCodes.Ldstr
                call_instr.Operand = dec_str
                ldc_i4.OpCode = OpCodes.Nop
                print('decoded', dec_str)
        instr = instr[1:]

def decrypt_strings_from_module(module):
    for t in module.GetTypes():
        for m in t.Methods:
            decrypt_strings_from_method(m)

afile = r"DANFE10103128566164_fixed_antidebug.dll"
module = ModuleDefMD.Load(afile)
decrypt_strings_from_module(module)
out_file = afile + '.deobfus'
module.Write(out_file)
print('done')</code></pre></div> <div id="c235413" class="fce column large-12 small-12 frame-layout-0 " ><p>We execute the script on the Trammy.dll and successfully deobfuscate the strings. As a final step, we use <a href="https://github.com/wickyhu/simple-assembly-explorer/releases" target="_blank" class="Hyperlink SCXW101524011 BCX8" rel="noreferrer noopener"><u class="BCX8 SCXW101524011 TextRun Underlined" data-contrast="none">Simple Assembly Explorer</u></a> to remove indirect calls by selecting the 'Nothing' profile in the deobfuscator and enabling the 'Direct Call' option.</p><p>Figures 5 and 6 show the <code>SacApp.SacApp.InitializeNewDomain</code> method before and after applying string deobfuscation and indirect call removal.</p></div> <div id="c235414" class="fce column large-12 small-12 frame-layout-0 " ><div class="ce-image ce-center ce-above"><div class="ce-gallery row small-up-1 medium-up-2 large-up-2"><div class="column column-block"><figure class="image"><a href="/fileadmin/_processed_/c/1/GDATA_Trammy_Before_String_Deobfus_79943cb548.png" class="fancybox"><img class="image-embed-item thumbnail" src="/fileadmin/_processed_/c/1/GDATA_Trammy_Before_String_Deobfus_1c0784924d.png" width="711" height="287" loading="lazy" alt="" /></a><figcaption class="image-caption"> Figure 5: Custom AppDomainManager class after removing control flow obfuscation with de4dot-cex (click to enlarge) </figcaption></figure></div><div class="column column-block"><figure class="image"><a href="/fileadmin/_processed_/c/4/GDATA_Trammy_After_String_Deobfus_87586f916d.png" class="fancybox"><img class="image-embed-item thumbnail" src="/fileadmin/_processed_/c/4/GDATA_Trammy_After_String_Deobfus_062abf84e9.png" width="711" height="317" loading="lazy" alt="" /></a><figcaption class="image-caption"> Figure 6: Custom AppDomainManager class after de4dot-cex, string deobfuscation and indirect call elimination, the methods isAdmin and MainMalcode were manually renamed (click to enlarge) </figcaption></figure></div></div></div></div> </div></div> <div data-magellan-target="c235415" class="small-12 column"><div class="row"> <div id="c235415" class="fce column large-12 small-12 frame-layout-0 " ><header class=" "><h2 class=" "> Trammy.dll Analysis </h2></header><p class="Paragraph SCXW14150334 BCX8">Trammy.dll<sup>[F10]</sup> starts execution in the method <code>InitializeNewDomain()</code> of <code>SacApp.SacApp</code> because it has been declared as AppDomainManager by the config<sup>[F11]</sup>.&nbsp;</p><p class="Paragraph SCXW14150334 BCX8">First, it opens the decoy PDF<sup>[F8]</sup>. Then it checks if the malicious code shall be run. Two conditions need to be met</p><ol class="NumberListStyle1 SCXW14150334 BCX8"><li class="Paragraph SCXW14150334 BCX8">A file named <strong class="BCX8 SCXW14150334 TextRun" data-contrast="auto">C:\ProgramData\internal_drive_version2.3.4.txt</strong><strong class="BCX8 SCXW14150334 TextRun" data-contrast="auto">&nbsp; </strong>must not exist—this is an empty file that will be created later&nbsp;</li><li class="OutlineElement Ltr SCXW14150334 BCX8" data-aria-level="1" data-aria-posinset="1" data-font data-leveltext="%1." data-list-defn-props="{&quot;335552541&quot;:0,&quot;335559685&quot;:720,&quot;335559991&quot;:360,&quot;469769242&quot;:[65533,0],&quot;469777803&quot;:&quot;left&quot;,&quot;469777804&quot;:&quot;%1.&quot;,&quot;469777815&quot;:&quot;hybridMultilevel&quot;}" data-listid="9"><p class="Paragraph SCXW14150334 BCX8"><strong>hxxp://ipwho(dot)is/</strong> must report that the IP is Brazilian</p></li></ol><p class="Paragraph SCXW14150334 BCX8">While the first condition ensures that the code is only executed once, the second check confirms that the malware runs in the targeted area Brazil. That way automatic sandbox systems are hindered from determining maliciousness unless they use Brazilian IPs or proxies.&nbsp;</p></div> </div></div> <div data-magellan-target="c235416" class="small-12 column"><div class="row"> <div id="c235416" class="fce column large-12 small-12 frame-layout-0 " ><header class=" "><h3 class=" "> Log File Translation </h3></header><p>The malware creates a log file in <strong>C:\ProgramData\log.txt<sup>[P3]</sup></strong> that encodes stages of execution with specific key<s class="BCX8 NormalTextRun SCXW178463844 TrackChangeTextDeletion"></s>words.</p><table class="contenttable"><thead><tr><th scope="col">Log entry</th><th scope="col">Meaning</th></tr></thead><tbody><tr><td>START</td><td>The checks 1. and 2. succeeded and the main malicious routine executed</td></tr><tr><td>ADMIN</td><td>malware had admin rights</td></tr><tr><td>R</td><td>attempted to create a mutex ‘KOKKIIKKKOOOO’&nbsp;</td></tr><tr><td>MTX_F</td><td>mutex ‘KOKKIIKKKOOOO’ was created successfully</td></tr><tr><td>CP</td><td>CCProxy was downloaded and installed as service</td></tr><tr><td>T</td><td>OS information was extracted</td></tr><tr><td>SV</td><td>Service that autoruns the Delphi payload as fake explorer.exe<sup>[F14]</sup> was created</td></tr></tbody></table><p>&nbsp;</p><p>Additionally, potential exception messages and their stack traces are written to the log.</p><p>That means incident responders can locate this log file to figure out what the malware did to the infected system.</p></div> </div></div> <div data-magellan-target="c235417" class="small-12 column"><div class="row"> <div id="c235417" class="fce column large-12 small-12 frame-layout-0 " ><header class=" "><h3 class=" "> Exfiltrated OS Info </h3></header><p>Trammy.dll<sup>[F10]</sup> obtains the following information via Windows Management Instrumentation (WMI) from the ManagementObject <strong>Win32_OperatingSystem</strong>:&nbsp;</p><ul class="list-black-square"><li>OSVersion</li><li>CSName</li><li>Caption</li><li>Version</li><li>SerialNumber</li><li>BuildNumber</li><li>OsArchitecture</li></ul><p class="Paragraph SCXW64907051 BCX8">Furthermore, it obtains the SerialNumber for all <strong>Win32_PhysicalMedia</strong> objects and appends the string ‘VM’ whenever the serial number is null, most likely used as indicator that the malware is running in a virtual machine. The malware also obtains a list of all antivirus programs. The resulting information is sent to the URL below<sup>[U1]</sup>&nbsp;</p><p class="Paragraph SCXW64907051 BCX8">hxxps://contador(dot)danfajuda(dot)com/contador/save.php</p></div> </div></div> <div data-magellan-target="c235418" class="small-12 column"><div class="row"> <div id="c235418" class="fce column large-12 small-12 frame-layout-0 " ><header class=" "><h3 class=" "> Download, Decryption and Persistence </h3></header><p class="Paragraph SCXW88118418 BCX8">Next, Trammy.dll<sup>[F10]</sup> schedules a task that adds the folder <strong>C:\ProgramData</strong> to Windows Defender’s exclusions.&nbsp;</p><p class="Paragraph SCXW88118418 BCX8">The DLL contacts the open directory <strong>hxxps://fileondemandd(dot)site/<sup>[U2]</sup></strong> (see figure 8) and downloads the ZIP archive filea.tat<sup>[F12]</sup>.</p></div> <div id="c235420" class="fce column large-12 small-12 frame-layout-0 " ><div class="ce-image ce-center ce-above"><div class="ce-gallery row small-up-1 medium-up-1 large-up-1"><div class="column column-block"><figure class="image"><a href="/fileadmin/_processed_/f/0/GDATA_Trammy_fileshareingsite_0f2601cbee.png" class="fancybox"><img class="image-embed-item thumbnail" src="/fileadmin/_processed_/f/0/GDATA_Trammy_fileshareingsite_077523d938.png" width="1436" height="495" loading="lazy" alt="" /></a><figcaption class="image-caption"> Figure 8: index of the file storage that contains the ZIP archive filea.tat </figcaption></figure></div></div></div></div> <div id="c235419" class="fce column large-12 small-12 frame-layout-0 " ><p class="Paragraph SCXW240673145 BCX8">The archive is password protected. The password is <strong>vsfdefender</strong> and has not been changed in a long time, e.g., the archives in the <a href="https://research.checkpoint.com/2023/behind-the-scenes-of-bbtok-analyzing-a-bankers-server-side-components/">Checkpoint article</a> from one year ago also use this password (samples are named BBTok by Checkpoint with filenames fe, fe2, and fe235). However, this password only succeeds for the files that are being used by the malware. Attempting to unpack the whole archive with this password results in ‘wrong password’ error messages. This could be intentional to thwart bruteforcing of the archive’s password.</p><p class="Paragraph SCXW240673145 BCX8">We obtained seven files from the ZIP archive<sup>[F12]</sup>. Six of them (CCProxy.exe<sup>[F15]</sup>, wke.dll<sup>[F16]</sup>, Web.exe<sup>[F17]</sup>, CCProxy.ini, AccInfo.ini and LeftTime.ini) belong to the CCProxy application developed by <a href="https://www.youngzsoft.net/ccproxy/" target="_blank" class="Hyperlink SCXW240673145 BCX8" rel="noreferrer noopener"><u class="BCX8 SCXW240673145 TextRun Underlined" data-contrast="none">Youngzsoft Co., Ltd</u></a> that can be used, for example, to filter and monitor network traffic. Trammy.dll<sup>[F10]</sup> extracts all of them to <strong class="BCX8 SCXW240673145 TextRun" data-contrast="auto">C:\Program Files\SearchIndexer</strong><sup>[P4]</sup> except for Web.exe<sup>[F17]</sup> which remains unused. CCProxy.exe<sup>[F15]</sup>, masked as <strong>Searchlndexer.exe</strong> (with small "L" instead of large "i"), is the main application and registered as a local service which automatically starts on Windows boot. CCProxy.ini and AccInfo.ini configure CCProxy to accept HTTP connections from localhost on port 8118, which is used to disguise the communication with the CnC server<sup>[U3]</sup>.&nbsp;</p><p class="Paragraph SCXW240673145 BCX8">The wke.dll<sup>[F16]</sup> is superfluous because it is only required by the non-extracted Web.exe<sup>[F17]</sup>. The seventh file is named explorer.exe<sup>[F14]</sup> and was compiled with Embarcadero Delphi 11.0 Alexandria. Trammy.dll<sup>[F10]</sup> extracts it to the program data folder and registers it as a local service as well. In previous articles (<a href="https://research.checkpoint.com/2023/behind-the-scenes-of-bbtok-analyzing-a-bankers-server-side-components/" target="_blank" rel="noreferrer">link 1</a>, <a href="https://www.trendmicro.com/en_us/research/24/i/banking-trojans-mekotio-looks-to-expand-targets--bbtok-abuses-ut.html" target="_blank" rel="noreferrer">link 2</a>), the Delphi payload was BBTok.</p><p class="Paragraph SCXW240673145 BCX8">After establishing persistence, Trammy.dll<sup>[F10]</sup> creates the empty file <strong class="BCX8 SCXW240673145 TextRun" data-contrast="auto">internal_drive_version2.3.4.txt</strong><sup>[P2]</sup>, which is used to determine if the code already ran. Then Trammy.dll<sup>[F10]</sup> displays the default Windows license expiration warning and reboots the system. On reboot, the CCProxy service starts with its custom configuration and the fake explorer.exe<sup>[F14]</sup> is called with a renamed filea.tat<sup>[F12]</sup> as argument. Figure 9 shows the overview for this part of the infection chain.</p><p class="Paragraph SCXW240673145 BCX8">In our next article, we will describe how the Delphi payload<sup>[F14]</sup> communicates with the CNC server<sup>[U3]</sup> via CCProxy using the <a href="https://github.com/teppicom/RealThinClient-SDK" target="_blank" class="Hyperlink SCXW240673145 BCX8" rel="noreferrer noopener"><u class="BCX8 SCXW240673145 TextRun Underlined" data-contrast="none">Realthinclient SDK</u></a>.&nbsp;</p></div> <div id="c235421" class="fce column large-12 small-12 frame-layout-0 " ><div class="ce-image ce-center ce-above"><div class="ce-gallery row small-up-1 medium-up-1 large-up-1"><div class="column column-block"><figure class="image"><a href="/fileadmin/_processed_/1/7/GDATA_Trammy_Stage_2_b3546b4a67.png" class="fancybox"><img class="image-embed-item thumbnail" src="/fileadmin/_processed_/1/7/GDATA_Trammy_Stage_2_1bfd8a85ba.png" width="1436" height="516" loading="lazy" alt="" /></a><figcaption class="image-caption"> Figure 9: Stage 2 – Download and persistence (click to enlarge) </figcaption></figure></div></div></div></div> </div></div> <div data-magellan-target="c235422" class="small-12 column"><div class="row"> <div id="c235422" class="fce column large-12 small-12 frame-layout-0 " ><header class=" "><h2 class=" "> Hashes </h2></header><p class="Paragraph SCXW24638488 BCX8"><strong class="BCX8 SCXW24638488 TextRun" data-contrast="auto">[F1] DANFE10103128566164.iso</strong><br> 09027fa9653bdf2b4a291071f7e8a72f14d1ba5d0912ed188708f9edd6a084fe</p><p class="Paragraph SCXW24638488 BCX8"><strong class="BCX8 SCXW24638488 TextRun" data-contrast="auto">[F2] </strong><strong class="BCX8 SCXW24638488 TextRun" data-contrast="auto">DANFE10103124952781.iso</strong><br> 2ff420e3d01893868a50162df57e8463d1746d3965b76025ed88db9bb13388af</p><p class="Paragraph SCXW24638488 BCX8"><strong class="BCX8 SCXW24638488 TextRun" data-contrast="auto">[F3] </strong><strong class="BCX8 SCXW24638488 TextRun" data-contrast="auto">DANFE10103122718132.iso</strong><br> 5e5a58bfabd96f0c78c1e12fa2625aba9c84aa3bd4c9bb99d079d6ccb6e46650</p><p class="Paragraph SCXW24638488 BCX8"><strong class="BCX8 SCXW24638488 TextRun" data-contrast="auto">[F4] DANFE10103121443891.iso</strong><br> dc03070d50fdd31c89491d139adfb211daf171d03e9e6d88aac43e7ff44e4fef</p><p class="Paragraph SCXW24638488 BCX8"><strong class="BCX8 SCXW24638488 TextRun" data-contrast="auto">[F5] DANFE10103128566164.pdf.lnk</strong><br> ddf84fdc080bd55f6f2b409e596b6f7a040c4ab1eb4b965b3f709a0f7faa4e02</p><p class="Paragraph SCXW24638488 BCX8"><strong class="BCX8 SCXW24638488 TextRun" data-contrast="auto">[F6] DANFE10103128566164.exe - legitimate MSBuild</strong><br> b60eb62f6c24d4a495a0dab95cc49624ac5099a2cc21f8bd010a410401ab8cc3</p><p class="Paragraph SCXW24638488 BCX8"><strong class="BCX8 SCXW24638488 TextRun" data-contrast="auto">[F7] DANFE10103128566164.xml</strong><br> 7566131ce0ecba1710c1a7552491120751b58d6d55f867e61a886b8e5606afc3</p><p class="Paragraph SCXW24638488 BCX8"><strong class="BCX8 SCXW24638488 TextRun" data-contrast="auto">[F8] DANFE10103128566164.pdf - decoy document</strong><br> ac044dd9ae8f18d928cf39d24525e2474930faf8e83c6e3ad52496ecab11f510</p><p class="Paragraph SCXW24638488 BCX8"><strong class="BCX8 SCXW24638488 TextRun" data-contrast="auto">[F9] DANFE10103128566164.zip</strong><br> 276a1e9f62e21c675fdad9c7bf0a489560cbd959ac617839aeb9a0bc3cd41366</p><p class="Paragraph SCXW24638488 BCX8"><strong class="BCX8 SCXW24638488 TextRun" data-contrast="auto">[F10] DANFE10103128566164.dll - Trammy.dll</strong><br> 24fac4ef193014e34fc30f7a4b7ccc0b1232ab02f164f105888aabe06efbacc3</p><p class="Paragraph SCXW24638488 BCX8"><strong class="BCX8 SCXW24638488 TextRun" data-contrast="auto">[F11] DANFE10103128566164.exe.config - registers AppDomainManager</strong><br> 8e7f0a51d7593cf76576b767ab03ed331d822c09f6812015550dbd6843853ce7</p><p class="Paragraph SCXW24638488 BCX8"><strong class="BCX8 SCXW24638488 TextRun" data-contrast="auto">[F12] filea.tat - ZIP archive</strong><br> 7559c440245aeeca28e67b7f13d198ba8add343e8d48df92b7116a337c98b763</p><p class="Paragraph SCXW24638488 BCX8"><strong class="BCX8 SCXW24638488 TextRun" data-contrast="auto">[F13] .NET DLL after compilation of [F7]</strong><br> a3afed0dabefde9bb8f8f905ab24fc2f554aa77e3a94b05ed35cffc20c201e15</p><p class="Paragraph SCXW24638488 BCX8"><strong class="BCX8 SCXW24638488 TextRun" data-contrast="auto">[F14] fake explorer.exe - Delphi payload</strong><br> 35db2b34412ad7a1644a8ee82925a88369bc58f6effc11d8ec6d5f81650d897e</p><p class="Paragraph SCXW24638488 BCX8"><strong class="BCX8 SCXW24638488 TextRun" data-contrast="auto">[F15] Searchlndexer.exe - CCProxy</strong><br> 27914c36fd422528d8370cbbc0e45af1ba2c3aeedca1579d92968649b3f562f7</p><p class="Paragraph SCXW24638488 BCX8"><strong class="BCX8 SCXW24638488 TextRun" data-contrast="auto">[F16] wke.dll</strong><br> 2d2c2ba0f0d155233cdcbf41a9cf166a6ce9b80a6ab4395821ce658afe04aaba</p><p class="Paragraph SCXW24638488 BCX8"><strong class="BCX8 SCXW24638488 TextRun" data-contrast="auto">[F17] Web.exe</strong><br> cb1d2659508a4f50060997ee0e60604598cb38bd2bb90962c6a51d8b798a03b6&nbsp;</p></div> </div></div> <div data-magellan-target="c235423" class="small-12 column"><div class="row"> <div id="c235423" class="fce column large-12 small-12 frame-layout-0 " ><header class=" "><h2 class=" "> URLs </h2></header><p class="Paragraph SCXW103106615 BCX8"><strong class="BCX8 SCXW103106615 TextRun" data-contrast="auto">[U1] Malware panel</strong><br> hxxps://contador.danfajuda(dot)com/contador/save.php?</p><p class="Paragraph SCXW103106615 BCX8"><strong class="BCX8 SCXW103106615 TextRun" data-contrast="auto">[U2] File storage</strong><br> hxxps://fileondemandd(dot)site/</p><p class="Paragraph SCXW103106615 BCX8"><strong class="BCX8 SCXW103106615 TextRun" data-contrast="auto">[U3] RTC Portal Gateway</strong><br> hxxp://pingservice(dot)blogdns(dot)com/myPath&nbsp;</p></div> </div></div> <div data-magellan-target="c235424" class="small-12 column"><div class="row"> <div id="c235424" class="fce column large-12 small-12 frame-layout-0 " ><header class=" "><h2 class=" "> Paths </h2></header><p class="Paragraph SCXW25723377 BCX8"><strong class="BCX8 SCXW25723377 TextRun" data-contrast="auto">[P1] </strong>C:\ProgramData\regid.5498-06.com.microsoft\</p><p class="Paragraph SCXW25723377 BCX8"><strong class="BCX8 SCXW25723377 TextRun" data-contrast="auto">[P2] </strong>C:\ProgramData\internal_drive_version2.3.4.txt</p><p class="Paragraph SCXW25723377 BCX8"><strong class="BCX8 SCXW25723377 TextRun" data-contrast="auto">[P3] </strong>C:\ProgramData\log.txt</p><p class="Paragraph SCXW25723377 BCX8"><strong class="BCX8 SCXW25723377 TextRun" data-contrast="auto">[P4] </strong>C:\Program Files\SearchIndexer\&nbsp;</p></div> </div></div> </div> </div> <div class="column small-12 medium-12 large-3" id="blogpage-sidebar-container"> <div class="row"> <div class="column small-12 fce"> <div class="pagenews-authorbox"> <div class="media-object"> <div class="media-object-section middle"> <img src="/fileadmin/_processed_/b/1/benthin_marius_739cfe3e0a.jpg" srcset="/fileadmin/_processed_/b/1/benthin_marius_739cfe3e0a.jpg 1x, /fileadmin/_processed_/b/1/benthin_marius_33c2c0fe81.jpg 2x" width="100" height="100"> </div> <div class="media-object-section middle"> <p><strong>from Marius Benthin</strong><br/>Malware Analyst</p> </div> </div> </div> <div class="pagenews-authorbox"> <div class="media-object"> <div class="media-object-section middle"> <img src="/fileadmin/_processed_/0/d/hahn_karsten_abecee0563.jpg" srcset="/fileadmin/_processed_/0/d/hahn_karsten_abecee0563.jpg 1x, /fileadmin/_processed_/0/d/hahn_karsten_6868e98e82.jpg 2x" width="100" height="100"> </div> <div class="media-object-section middle"> <p><strong>Karsten Hahn</strong><br/>Principal Malware Researcher</p> </div> </div> </div> </div> </div> <div class="row"> <div id="pagenews-sticky-sidebar-container" class="column small-12" data-sticky-container> <div class="sticky" id="pagenews-sticky-sidebar" data-sticky data-margin-top="0" style="width:100%;" data-deep-linking data-sticky-on="large" data-margin-bottom="0" data-top-anchor="pagenews-sticky-sidebar-container" data-btm-anchor="blogpage-content-container:bottom"> <div class="show-for-large"> <div class="sidebar-socialshare margin-bottom"> <div class="shariff" data-button-style="icon" data-twitter-via="GDATA" data-orientation="horizontal" data-lang="en" data-services="[&quot;twitter&quot;,&quot;xing&quot;,&quot;linkedin&quot;,&quot;facebook&quot;,&quot;reddit&quot]"></div> </div> <div class="pagenews-progress"> <div class="reading-time"> <span class="eta"></span> <span class="word-count"></span> </div> <progress value="0"></progress> </div> <nav data-magellan> <ul class="pagenews-menu"> <li> <a href="#c235400"> <span>Intrusion utilizing the Microsoft Build Engine </span> </a> </li> <li> <a href="#c235406"> <span>AppDomain Manager Injection</span> </a> </li> <li> <a href="#c235408"> <span>Deobfuscation of Trammy.dll</span> </a> </li> <li> <a href="#c235415"> <span>Trammy.dll Analysis</span> </a> </li> <li> <a href="#c235416"> <span>Log File Translation</span> </a> </li> <li> <a href="#c235417"> <span>Exfiltrated OS Info</span> </a> </li> <li> <a href="#c235418"> <span>Download, Decryption and Persistence</span> </a> </li> <li> <a href="#c235422"> <span>Hashes</span> </a> </li> <li> <a href="#c235423"> <span>URLs</span> </a> </li> <li> <a href="#c235424"> <span>Paths</span> </a> </li> <li> <a href="#pagenews-related-articles"> <span>Related articles</span> </a> </li> </ul> </nav> </div> <div class="row"> <div class="fce column small-12 blog-categories"> <ul> <li><a href="/blog/malware"><span class="label label-default">Malware</span></a></li> <li><a href="/blog/techblog"><span class="label label-default">Techblog</span></a></li> </ul> </div> </div> <div class="row"> </div> </div> </div> </div> </div> </div> <div class="row expanded pagenews-footer" id="blogpage-footer"> <div class="small-12 column"> <div class="row" > <div class="small-12 medium-6 large-3 column fce"> <a class="button expanded no-margin" href="/blog">back to list</a> </div> <div class="small-12 medium-6 large-3 column fce"> <div class="sidebar-socialshare"> <div class="shariff" data-button-style="icon" data-twitter-via="GDATA" data-orientation="horizontal" data-lang="en" data-services="[&quot;twitter&quot;,&quot;xing&quot;,&quot;linkedin&quot;,&quot;facebook&quot;,&quot;reddit&quot]"></div> </div> </div> <div class="small-12 medium-12 large-3 column fce last-update"> </div> </div> </div> </div> <div class="row"> <div class="column small-12 large-12 pagenews-related-articles fce" id="pagenews-related-articles" data-magellan-target="pagenews-related-articles"> <h4>Related articles:</h4> <div class="column small-12 medium-6 guidebook-relatedbox fce"> <a class="media-object" href="/blog/2024/08/38005-ailurophile-infostealer"> <div class="media-object-section middle"> <img src="/fileadmin/_processed_/d/c/G_DATA_Blog_Ailurophile_Infostealer_Preview_15eb545266.jpg" srcset="/fileadmin/_processed_/d/c/G_DATA_Blog_Ailurophile_Infostealer_Preview_15eb545266.jpg 1x, /fileadmin/_processed_/d/c/G_DATA_Blog_Ailurophile_Infostealer_Preview_c88e18da9d.jpg 2x" width="100" height="100" /> </div> <div class="media-object-section middle"> <h5>New Infostealer sighted in the wild</h5> <p>We discovered a new stealer in the wild called &#039;&quot;Ailurophile Stealer”. The stealer is coded in PHP and the source code indicates potential Vietnamese&hellip;</p> </div> </a> </div> <div class="column small-12 medium-6 guidebook-relatedbox fce"> <a class="media-object" href="/blog/2024/07/37977-turla-evasion-lnk-files"> <div class="media-object-section middle"> <img src="/fileadmin/_processed_/c/1/G_DATA_Blog_Turla2024_Preview_f44e95f967.jpg" srcset="/fileadmin/_processed_/c/1/G_DATA_Blog_Turla2024_Preview_f44e95f967.jpg 1x, /fileadmin/_processed_/c/1/G_DATA_Blog_Turla2024_Preview_862fa6a816.jpg 2x" width="100" height="100" /> </div> <div class="media-object-section middle"> <h5>A Master’s Art of Evasion</h5> <p>Turla, a well-known piece of malware, has taken to weaponising LNK-files to infect computers. We have observed a current example of this. Learn more&hellip;</p> </div> </a> </div> <div class="column small-12 medium-6 guidebook-relatedbox fce"> <a class="media-object" href="/blog/2024/06/37947-badspace-backdoor"> <div class="media-object-section middle"> <img src="/fileadmin/_processed_/f/c/G_DATA_Blog_Badspace_Preview_7f43fb85b4.jpg" srcset="/fileadmin/_processed_/f/c/G_DATA_Blog_Badspace_Preview_7f43fb85b4.jpg 1x, /fileadmin/_processed_/f/c/G_DATA_Blog_Badspace_Preview_a13168c4e8.jpg 2x" width="100" height="100" /> </div> <div class="media-object-section middle"> <h5>Backdoor BadSpace delivered by high-ranking infected websites</h5> <p>Imagine visiting your favorite website with the same address that you always use and it tells you that your browser needs an update. After downloading&hellip;</p> </div> </a> </div> <div class="column small-12 medium-6 guidebook-relatedbox fce"> <a class="media-object" href="/blog/2024/05/37906-gotomeeting-loads-remcos"> <div class="media-object-section middle"> <img src="/fileadmin/_processed_/3/6/G_DATA_Blog_GTM_RemcosRAT_Preview_c0ccec6fd5.jpg" srcset="/fileadmin/_processed_/3/6/G_DATA_Blog_GTM_RemcosRAT_Preview_c0ccec6fd5.jpg 1x, /fileadmin/_processed_/3/6/G_DATA_Blog_GTM_RemcosRAT_Preview_a6deeea4d7.jpg 2x" width="100" height="100" /> </div> <div class="media-object-section middle"> <h5>GoTo Meeting loads Remcos RAT via Rust Shellcode Loader</h5> <p>Legitimate applications can unwittingly become conduits for malware execution. This is also the case for recent malware loaders which abuse GoTo&hellip;</p> </div> </a> </div> </div> </div> </div> <div class="row"><nav id="breadcrumb" class="small-12 columns"><ul class="breadcrumbs"><li class="info-text">You are here:</li><li><a href="/blog"><span>Blog (EN)</span></a></li><li><span>BBTok Targeting Brazil: Deobfuscating the .NET Loader with dnlib and P...</span></li></ul></nav></div> <footer id="site-footer"> <div class="row flexcontainer"> <div class="logo"> <img src="https://www.gdatasoftware.com/typo3conf/ext/gd_sites/Resources/Public/Images/logo-for-light.svg" alt="G DATA Logo" height="50" style="height: 50px; margin:16px;"/> </div> <div class="socialbar"> <div class="social text-center"> <a href="https://de.linkedin.com/company/g-data-cyberdefense" title="G DATA CyberDefense AG on Linked-In" target="_blank" rel="noreferrer"><i class="icon-linkedin"></i></a><a href="https://www.facebook.com/gdatasoftwareag" title="G DATA CyberDefense AG on Facebook" target="_blank" rel="noreferrer"><i class="icon-facebook"></i></a><a href="https://www.threads.net/@gdatacyberdefense" title="G DATA CyberDefense AG on Threads" target="_blank" rel="noreferrer"><i class="icon-threads"></i></a><a href="https://www.instagram.com/gdatacyberdefense" title="G DATA CyberDefense AG on Instagram" target="_blank" rel="noreferrer"><i class="icon-instagram"></i></a><a href="https://www.youtube.com/user/GDataSoftwareAG" title="G DATA CyberDefense AG on Youtube" target="_blank" rel="noreferrer"><i class="icon-youtube"></i></a><a href="https://feeds.feedblitz.com/GDataSecurityBlog-EN&amp;x=1" target="_blank" rel="noreferrer"><i class="icon-rss"></i></a> </div> </div> </div> <div class="sitemap row small-up-1 medium-up-2 large-up-4"> <div class="column"> <h5>G DATA</h5> <ul> <li> <a href="/about-g-data" data-event-action="click" data-event-category="Menu-Footer" data-event-label="About G DATA">About G DATA</a> </li> <li> <a href="/g-data/newsroom" data-event-action="click" data-event-category="Menu-Footer" data-event-label="Newsroom">Newsroom</a> </li> <li> <a href="/about-g-data/jobs" data-event-action="click" data-event-category="Menu-Footer" data-event-label="Jobs &amp; Career">Jobs &amp; Career</a> </li> <li> <a href="/about-g-data/awards" data-event-action="click" data-event-category="Menu-Footer" data-event-label="Awards">Awards</a> </li> </ul> </div> <div class="column"> <h5>Services</h5> <ul> <li> <a href="/pc/free-trial" data-event-action="click" data-event-category="Menu-Footer" data-event-label="Free Trial">Free Trial</a> </li> <li> <a href="https://www.gdata.de/help/en/business/HowToArtikel/Virenanalyse/DateiURLAppEinsenden/" data-event-action="click" data-event-category="Menu-Footer" data-event-label="Submit a suspicious file, app or URL">Submit a suspicious file, app or URL</a> </li> </ul> </div> <div class="column"> <h5>G DATA Solutions</h5> <ul> <li> <a href="/pc" data-event-action="click" data-event-category="Menu-Footer" data-event-label="Consumer">Consumer</a> </li> <li> <a href="/business" data-event-action="click" data-event-category="Menu-Footer" data-event-label="Business">Business</a> </li> </ul> </div> </div> <div class="row"> <hr/> </div> <div class="footnav row"> <div class="large-7 medium-6 small-12 column imprint"> <a href="/privacy">Data Protection </a><a href="/support/contact">Contact </a><a href="/imprint">Imprint </a><a href="/">gdatasoftware.com </a> </div> <div class="large-5 medium-6 small-12 column copyright"> <span>&copy;&nbsp;2024&nbsp;G DATA CyberDefense AG. All rights reserved.</span> </div> </div> </footer> <a href="#" class="go-top"><i class="icon-angle-up-regular"></i></a> </div> </div> <script src="/typo3temp/assets/compressed/merged-f081765a3ed763d7fe90ca1c11ab5a25.js?1729664179"></script> <script src="/typo3conf/ext/gd_sites/Resources/Public/JavaScript/gd-mainmenu-2019.js?1729663114"></script> <script src="/typo3conf/ext/gd_pagenews/Resources/Public/JavaScript/gd-guidebook.js?1729663114"></script> <script>
            $(document).ready(function() {
				GdScrollIndicator.init('#blogpage-content-container','','');
				GdScrollIndicator.calculateReadingTime([$('#blogpage-content-container'),$('.pagenews-teaser')],{readingTimeTarget:'.eta',wordCountTarget:'.word-count', prependTimeString:'Reading time: ', lessThanAMinuteString:'less then a minute', prependWordString:'(',apendWordString:' words)'});
			});
		</script> <script>
    document.addEventListener( 'DOMContentLoaded', function(e) {
        window.GdTracking = new GdTrackingModule();
        GdTracking.initialize();
    });
</script> <script data-cmp-vendor="s905" type="text/plain" class="cmplazyload">
        window.dataLayer = window.dataLayer || [];
        function gtag(){dataLayer.push(arguments);}

        gtag('consent', 'default', {
            'ad_storage': 'denied',
            'analytics_storage': 'denied',
            'ad_user_data': 'denied',
            'ad_personalization': 'denied',
            'wait_for_update': 500
        });

        dataLayer.push({
            'event': 'default_consent'
        });
    </script> <script data-cmp-vendor="s905" type="text/plain" class="cmplazyload">
    (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
            new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
            j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
            'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
        })(window,document,'script','dataLayer','GTM-NQG4RJ');
    </script> </body> </html>