<!doctype html>
<html lang="en-US" class="no-touch js ">
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<!--<link rel="profile" href="https://gmpg.org/xfn/11"> -->
	
	<meta name="blogsPostDate" content="2014-10-28 15:10:56"/><meta name="blogsPostTags" content="apt,cisco-talos,group-72,malware,operation-smn,security,smn,talos,threats"/><meta name="blogsPostCat" content="Threat Research"/><meta name="article:category" content="Threat Research"/>
<meta name="wordCount" content="4372" />
<meta name="readTime" content="1049" />
	<!-- loading cdc-template web component scripts -->
	<script type='text/javascript' src="//www.cisco.com/etc/designs/cdc/clientlibs/responsive/js/web-component-foundation.min.js"></script>
	<script>
	/**
	* Invokes appropriate private methods based on input parameters based on needs of web component architecture
	* @param {Array} wcAssets array of strings that correlate to the names of web components or array of objects containing asset name and corresponding locale/path
	* @param {String} localePath specifies where web component should be retrieved from (expected format: en/us or en_au for all other locales); false if wcAssets, is array of objects
	* @param {Boolean} isWem [Optional] specifies if assets are being loaded on a WEM environment
	* @param {Boolean} needTargetter [Optional] specifies need for targetter bundle to be loaded (generally needed on external sites)
	* @param {Boolean} isRelative [Optional] specifies if asset path(s) should be relative
	* @param {String} env [Optional] specifies enviornment to append to relative path (should not be used with isRelative)
	* @param {Boolean} hasEnvOverride [Optional] specifies if environment needs to be overridden (should be used with env)
	*/
	cdc.wcAncillaryAssetAllocator.init(['cdc-template-blogs'], 'en/us', false, true, false, 'prod');
	if (window.cdc === undefined) { window.cdc = {}; }
	if (cdc.cdcMasthead === undefined) { cdc.cdcMasthead = {}; }
	if (cdc.cdcMasthead.additional === undefined) { cdc.cdcMasthead.additional = {}; }
	cdc.cdcMasthead.additional.env = 'prod';
	</script>

		<script type="text/javascript">

	if ( typeof cdc === "undefined")cdc = {};
	if ( typeof cdc.util === "undefined")cdc.util = {};
	cdc.util.ensureNamespace = function (namespaceStr) {
  		if (!namespaceStr) { return;
    		var parts = namespaceStr.split(".");
    		var o = window;
    		var i;
    		var aPart;
    		for (i = 0; i < parts.length; i++)
      			aPart = parts[i];
     		 	if (typeof (o[aPart]) != "object"){
        			o[aPart] = {};
				}
        		o = o[aPart];
  		}
	};

	cdc.dm = {};
	cdc.dm.util = {};
	cdc.dm.util.ensureNamespace = cdc.util.ensureNamespace;
	</script>

	<meta name="author" content="" /><meta name="blogsPostAuthor" content="" /><meta name='robots' content='index, follow, max-image-preview:large, max-snippet:-1, max-video-preview:-1' />
<script type="text/javascript" src="//www.cisco.com/c/dam/cdc/t/ctm-core.js"></script>


	<!-- This site is optimized with the Yoast SEO Premium plugin v19.3 (Yoast SEO v19.11) - https://yoast.com/wordpress/plugins/seo/ -->
	<title>Threat Spotlight: Group 72, Opening the ZxShell - Cisco Blogs</title>
	<meta name="description" content="This post was authored by Andrea Allievi, Douglas Goddard, Shaun Hurley, and Alain Zidouemba. Recently, there was a blog post on the takedown of a botnet" />
	<link rel="canonical" href="https://blogs.cisco.com/security/talos/opening-zxshell" />
	<meta property="og:locale" content="en_US" />
	<meta property="og:type" content="article" />
	<meta property="og:title" content="Threat Spotlight: Group 72, Opening the ZxShell" />
	<meta property="og:description" content="This post was authored by Andrea Allievi, Douglas Goddard, Shaun Hurley, and Alain Zidouemba. Recently, there was a blog post on the takedown of a botnet" />
	<meta property="og:url" content="https://blogs.cisco.com/security/talos/opening-zxshell" />
	<meta property="og:site_name" content="Cisco Blogs" />
	<meta property="article:published_time" content="2014-10-28T22:10:56+00:00" />
	<meta property="article:modified_time" content="2021-02-26T22:21:56+00:00" />
	<meta property="og:image" content="https://storage.googleapis.com/blogs-images-new/ciscoblogs/1/2020/03/67b8201b-cisco-brand-logo-white-gradient-background-770x533-1-2.jpg" />
	<meta property="og:image:width" content="770" />
	<meta property="og:image:height" content="533" />
	<meta property="og:image:type" content="image/jpeg" />
	<meta name="author" content="Talos Group" />
	<meta name="twitter:card" content="summary_large_image" />
	<meta name="twitter:label1" content="Written by" />
	<meta name="twitter:data1" content="Talos Group" />
	<meta name="twitter:label2" content="Est. reading time" />
	<meta name="twitter:data2" content="23 minutes" />
	<script type="application/ld+json" class="yoast-schema-graph">{"@context":"https://schema.org","@graph":[{"@type":"Article","@id":"https://blogs.cisco.com/security/talos/opening-zxshell#article","isPartOf":{"@id":"https://blogs.cisco.com/security/talos/opening-zxshell"},"author":{"name":"Talos Group","@id":"https://blogs.cisco.com/#/schema/person/4323e884111191651f7ec5acfd35bc50"},"headline":"Threat Spotlight: Group 72, Opening the ZxShell","datePublished":"2014-10-28T22:10:56+00:00","dateModified":"2021-02-26T22:21:56+00:00","mainEntityOfPage":{"@id":"https://blogs.cisco.com/security/talos/opening-zxshell"},"wordCount":4534,"publisher":{"@id":"https://blogs.cisco.com/#organization"},"image":{"@id":"https://blogs.cisco.com/security/talos/opening-zxshell#primaryimage"},"thumbnailUrl":"https://storage.googleapis.com/blogs-images-new/ciscoblogs/1/2023/09/Cisco_Logo_Indigo_no_TM.png","keywords":["APT","Cisco Talos","Group 72","malware","Operation SMN","Security","SMN","Talos","threats"],"articleSection":["Threat Research"],"inLanguage":"en-US"},{"@type":"WebPage","@id":"https://blogs.cisco.com/security/talos/opening-zxshell","url":"https://blogs.cisco.com/security/talos/opening-zxshell","name":"Threat Spotlight: Group 72, Opening the ZxShell - Cisco Blogs","isPartOf":{"@id":"https://blogs.cisco.com/#website"},"primaryImageOfPage":{"@id":"https://blogs.cisco.com/security/talos/opening-zxshell#primaryimage"},"image":{"@id":"https://blogs.cisco.com/security/talos/opening-zxshell#primaryimage"},"thumbnailUrl":"https://storage.googleapis.com/blogs-images-new/ciscoblogs/1/2023/09/Cisco_Logo_Indigo_no_TM.png","datePublished":"2014-10-28T22:10:56+00:00","dateModified":"2021-02-26T22:21:56+00:00","description":"This post was authored by Andrea Allievi, Douglas Goddard, Shaun Hurley, and Alain Zidouemba. Recently, there was a blog post on the takedown of a botnet","breadcrumb":{"@id":"https://blogs.cisco.com/security/talos/opening-zxshell#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https://blogs.cisco.com/security/talos/opening-zxshell"]}]},{"@type":"ImageObject","inLanguage":"en-US","@id":"https://blogs.cisco.com/security/talos/opening-zxshell#primaryimage","url":"https://storage.googleapis.com/blogs-images-new/ciscoblogs/1/2023/09/Cisco_Logo_Indigo_no_TM.png","contentUrl":"https://storage.googleapis.com/blogs-images-new/ciscoblogs/1/2023/09/Cisco_Logo_Indigo_no_TM.png","width":1919,"height":935},{"@type":"BreadcrumbList","@id":"https://blogs.cisco.com/security/talos/opening-zxshell#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Cisco Blogs","item":"https://blogs.cisco.com/"},{"@type":"ListItem","position":2,"name":"Security","item":"https://blogs.cisco.com/security"},{"@type":"ListItem","position":3,"name":"Threat Spotlight: Group 72, Opening the ZxShell"}]},{"@type":"WebSite","@id":"https://blogs.cisco.com/#website","url":"https://blogs.cisco.com/","name":"Cisco Blogs","description":"","publisher":{"@id":"https://blogs.cisco.com/#organization"},"potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https://blogs.cisco.com/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"Organization","@id":"https://blogs.cisco.com/#organization","name":"Cisco Systems","url":"https://blogs.cisco.com/","logo":{"@type":"ImageObject","inLanguage":"en-US","@id":"https://blogs.cisco.com/#/schema/logo/image/","url":"https://storage.googleapis.com/blogs-images-new/ciscoblogs/1/2020/10/Cisco_Logo_no_TM_Sky_Blue-RGB.png","contentUrl":"https://storage.googleapis.com/blogs-images-new/ciscoblogs/1/2020/10/Cisco_Logo_no_TM_Sky_Blue-RGB.png","width":912,"height":482,"caption":"Cisco Systems"},"image":{"@id":"https://blogs.cisco.com/#/schema/logo/image/"}},{"@type":"Person","@id":"https://blogs.cisco.com/#/schema/person/4323e884111191651f7ec5acfd35bc50","name":"Talos Group","image":{"@type":"ImageObject","inLanguage":"en-US","@id":"https://blogs.cisco.com/#/schema/person/image/","url":"https://storage.googleapis.com/blogs-images-new/ciscoblogs/1/2022/07/1519565080-bpfull.jpg","contentUrl":"https://storage.googleapis.com/blogs-images-new/ciscoblogs/1/2022/07/1519565080-bpfull.jpg","caption":"Talos Group"},"description":"The Talos Security Intelligence and Research Group (Talos) is made up of leading threat researchers supported by sophisticated systems to create threat intelligence for Cisco products that detects, analyzes and protects against both known and emerging threats. Talos maintains the official rule sets of Snort.org, ClamAV, SenderBase.org and SpamCop. This blog profile is managed by multiple authors with expertise that spans software development, reverse engineering, vulnerability triage, malware investigation and intelligence gathering. Talos is the primary team that contributes threat information to the Cisco Collective Security Intelligence (CSI) ecosystem. Cisco CSI is shared across multiple security solutions and provides industry-leading security protections and efficacy. In addition to threat researchers, CSI is driven by intelligence infrastructure, product and service telemetry, public and private feeds and the open source community.","url":"https://blogs.cisco.com/author/talos"}]}</script>
	<!-- / Yoast SEO Premium plugin. -->


<link rel='dns-prefetch' href='//www.cisco.com' />
<link rel='dns-prefetch' href='//s.w.org' />
<link rel="alternate" type="application/rss+xml" title="Cisco Blogs &raquo; Feed" href="https://blogs.cisco.com/feed" />
<link rel="alternate" type="application/rss+xml" title="Cisco Blogs &raquo; Comments Feed" href="https://blogs.cisco.com/comments/feed" />
<script type="text/javascript">
window._wpemojiSettings = {"baseUrl":"https:\/\/s.w.org\/images\/core\/emoji\/13.1.0\/72x72\/","ext":".png","svgUrl":"https:\/\/s.w.org\/images\/core\/emoji\/13.1.0\/svg\/","svgExt":".svg","source":{"concatemoji":"https:\/\/blogs.cisco.com\/wp-includes\/js\/wp-emoji-release.min.js?ver=5.9.2"}};
/*! This file is auto-generated */
!function(e,a,t){var n,r,o,i=a.createElement("canvas"),p=i.getContext&&i.getContext("2d");function s(e,t){var a=String.fromCharCode;p.clearRect(0,0,i.width,i.height),p.fillText(a.apply(this,e),0,0);e=i.toDataURL();return p.clearRect(0,0,i.width,i.height),p.fillText(a.apply(this,t),0,0),e===i.toDataURL()}function c(e){var t=a.createElement("script");t.src=e,t.defer=t.type="text/javascript",a.getElementsByTagName("head")[0].appendChild(t)}for(o=Array("flag","emoji"),t.supports={everything:!0,everythingExceptFlag:!0},r=0;r<o.length;r++)t.supports[o[r]]=function(e){if(!p||!p.fillText)return!1;switch(p.textBaseline="top",p.font="600 32px Arial",e){case"flag":return s([127987,65039,8205,9895,65039],[127987,65039,8203,9895,65039])?!1:!s([55356,56826,55356,56819],[55356,56826,8203,55356,56819])&&!s([55356,57332,56128,56423,56128,56418,56128,56421,56128,56430,56128,56423,56128,56447],[55356,57332,8203,56128,56423,8203,56128,56418,8203,56128,56421,8203,56128,56430,8203,56128,56423,8203,56128,56447]);case"emoji":return!s([10084,65039,8205,55357,56613],[10084,65039,8203,55357,56613])}return!1}(o[r]),t.supports.everything=t.supports.everything&&t.supports[o[r]],"flag"!==o[r]&&(t.supports.everythingExceptFlag=t.supports.everythingExceptFlag&&t.supports[o[r]]);t.supports.everythingExceptFlag=t.supports.everythingExceptFlag&&!t.supports.flag,t.DOMReady=!1,t.readyCallback=function(){t.DOMReady=!0},t.supports.everything||(n=function(){t.readyCallback()},a.addEventListener?(a.addEventListener("DOMContentLoaded",n,!1),e.addEventListener("load",n,!1)):(e.attachEvent("onload",n),a.attachEvent("onreadystatechange",function(){"complete"===a.readyState&&t.readyCallback()})),(n=t.source||{}).concatemoji?c(n.concatemoji):n.wpemoji&&n.twemoji&&(c(n.twemoji),c(n.wpemoji)))}(window,document,window._wpemojiSettings);
</script>
<style type="text/css">
img.wp-smiley,
img.emoji {
	display: inline !important;
	border: none !important;
	box-shadow: none !important;
	height: 1em !important;
	width: 1em !important;
	margin: 0 0.07em !important;
	vertical-align: -0.1em !important;
	background: none !important;
	padding: 0 !important;
}
</style>
	<link rel='stylesheet' id='wp-block-library-css'  href='https://blogs.cisco.com/wp-includes/css/dist/block-library/style.min.css?ver=5.9.2' type='text/css' media='all' />
<link rel='stylesheet' id='wp-components-css'  href='https://blogs.cisco.com/wp-includes/css/dist/components/style.min.css?ver=5.9.2' type='text/css' media='all' />
<link rel='stylesheet' id='wp-block-editor-css'  href='https://blogs.cisco.com/wp-includes/css/dist/block-editor/style.min.css?ver=5.9.2' type='text/css' media='all' />
<link rel='stylesheet' id='wp-nux-css'  href='https://blogs.cisco.com/wp-includes/css/dist/nux/style.min.css?ver=5.9.2' type='text/css' media='all' />
<link rel='stylesheet' id='wp-reusable-blocks-css'  href='https://blogs.cisco.com/wp-includes/css/dist/reusable-blocks/style.min.css?ver=5.9.2' type='text/css' media='all' />
<link rel='stylesheet' id='wp-editor-css'  href='https://blogs.cisco.com/wp-includes/css/dist/editor/style.min.css?ver=5.9.2' type='text/css' media='all' />
<link rel='stylesheet' id='mux_video_block_style-css'  href='https://blogs.cisco.com/wp-content/plugins/ilab-media-tools/public/blocks/mediacloud-mux.blocks.style.css' type='text/css' media='all' />
<style id='global-styles-inline-css' type='text/css'>
body{--wp--preset--color--black: #000;--wp--preset--color--cyan-bluish-gray: #abb8c3;--wp--preset--color--white: #ffffff;--wp--preset--color--pale-pink: #f78da7;--wp--preset--color--vivid-red: #cf2e2e;--wp--preset--color--luminous-vivid-orange: #ff6900;--wp--preset--color--luminous-vivid-amber: #fcb900;--wp--preset--color--light-green-cyan: #7bdcb5;--wp--preset--color--vivid-green-cyan: #00d084;--wp--preset--color--pale-cyan-blue: #8ed1fc;--wp--preset--color--vivid-cyan-blue: #0693e3;--wp--preset--color--vivid-purple: #9b51e0;--wp--preset--color--cisco-midnight-blue: #0d274d;--wp--preset--color--cisco-ocean-blue: #1e4471;--wp--preset--color--cisco-sky-blue: #00bceb;--wp--preset--color--cisco-green: #6abf4b;--wp--preset--color--cisco-orange: #fbab18;--wp--preset--color--cisco-red: #e2231a;--wp--preset--color--dark-gray: #495057;--wp--preset--color--medium-gray: #9e9ea2;--wp--preset--color--light-gray: #ced4da;--wp--preset--gradient--vivid-cyan-blue-to-vivid-purple: linear-gradient(135deg,rgba(6,147,227,1) 0%,rgb(155,81,224) 100%);--wp--preset--gradient--light-green-cyan-to-vivid-green-cyan: linear-gradient(135deg,rgb(122,220,180) 0%,rgb(0,208,130) 100%);--wp--preset--gradient--luminous-vivid-amber-to-luminous-vivid-orange: linear-gradient(135deg,rgba(252,185,0,1) 0%,rgba(255,105,0,1) 100%);--wp--preset--gradient--luminous-vivid-orange-to-vivid-red: linear-gradient(135deg,rgba(255,105,0,1) 0%,rgb(207,46,46) 100%);--wp--preset--gradient--very-light-gray-to-cyan-bluish-gray: linear-gradient(135deg,rgb(238,238,238) 0%,rgb(169,184,195) 100%);--wp--preset--gradient--cool-to-warm-spectrum: linear-gradient(135deg,rgb(74,234,220) 0%,rgb(151,120,209) 20%,rgb(207,42,186) 40%,rgb(238,44,130) 60%,rgb(251,105,98) 80%,rgb(254,248,76) 100%);--wp--preset--gradient--blush-light-purple: linear-gradient(135deg,rgb(255,206,236) 0%,rgb(152,150,240) 100%);--wp--preset--gradient--blush-bordeaux: linear-gradient(135deg,rgb(254,205,165) 0%,rgb(254,45,45) 50%,rgb(107,0,62) 100%);--wp--preset--gradient--luminous-dusk: linear-gradient(135deg,rgb(255,203,112) 0%,rgb(199,81,192) 50%,rgb(65,88,208) 100%);--wp--preset--gradient--pale-ocean: linear-gradient(135deg,rgb(255,245,203) 0%,rgb(182,227,212) 50%,rgb(51,167,181) 100%);--wp--preset--gradient--electric-grass: linear-gradient(135deg,rgb(202,248,128) 0%,rgb(113,206,126) 100%);--wp--preset--gradient--midnight: linear-gradient(135deg,rgb(2,3,129) 0%,rgb(40,116,252) 100%);--wp--preset--duotone--dark-grayscale: url('#wp-duotone-dark-grayscale');--wp--preset--duotone--grayscale: url('#wp-duotone-grayscale');--wp--preset--duotone--purple-yellow: url('#wp-duotone-purple-yellow');--wp--preset--duotone--blue-red: url('#wp-duotone-blue-red');--wp--preset--duotone--midnight: url('#wp-duotone-midnight');--wp--preset--duotone--magenta-yellow: url('#wp-duotone-magenta-yellow');--wp--preset--duotone--purple-green: url('#wp-duotone-purple-green');--wp--preset--duotone--blue-orange: url('#wp-duotone-blue-orange');--wp--preset--font-size--small: 13px;--wp--preset--font-size--medium: 20px;--wp--preset--font-size--large: 36px;--wp--preset--font-size--x-large: 42px;}.has-black-color{color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-color{color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-color{color: var(--wp--preset--color--white) !important;}.has-pale-pink-color{color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-color{color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-color{color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-color{color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-color{color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-color{color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-color{color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-color{color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-color{color: var(--wp--preset--color--vivid-purple) !important;}.has-black-background-color{background-color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-background-color{background-color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-background-color{background-color: var(--wp--preset--color--white) !important;}.has-pale-pink-background-color{background-color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-background-color{background-color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-background-color{background-color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-background-color{background-color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-background-color{background-color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-background-color{background-color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-background-color{background-color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-background-color{background-color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-background-color{background-color: var(--wp--preset--color--vivid-purple) !important;}.has-black-border-color{border-color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-border-color{border-color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-border-color{border-color: var(--wp--preset--color--white) !important;}.has-pale-pink-border-color{border-color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-border-color{border-color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-border-color{border-color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-border-color{border-color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-border-color{border-color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-border-color{border-color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-border-color{border-color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-border-color{border-color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-border-color{border-color: var(--wp--preset--color--vivid-purple) !important;}.has-vivid-cyan-blue-to-vivid-purple-gradient-background{background: var(--wp--preset--gradient--vivid-cyan-blue-to-vivid-purple) !important;}.has-light-green-cyan-to-vivid-green-cyan-gradient-background{background: var(--wp--preset--gradient--light-green-cyan-to-vivid-green-cyan) !important;}.has-luminous-vivid-amber-to-luminous-vivid-orange-gradient-background{background: var(--wp--preset--gradient--luminous-vivid-amber-to-luminous-vivid-orange) !important;}.has-luminous-vivid-orange-to-vivid-red-gradient-background{background: var(--wp--preset--gradient--luminous-vivid-orange-to-vivid-red) !important;}.has-very-light-gray-to-cyan-bluish-gray-gradient-background{background: var(--wp--preset--gradient--very-light-gray-to-cyan-bluish-gray) !important;}.has-cool-to-warm-spectrum-gradient-background{background: var(--wp--preset--gradient--cool-to-warm-spectrum) !important;}.has-blush-light-purple-gradient-background{background: var(--wp--preset--gradient--blush-light-purple) !important;}.has-blush-bordeaux-gradient-background{background: var(--wp--preset--gradient--blush-bordeaux) !important;}.has-luminous-dusk-gradient-background{background: var(--wp--preset--gradient--luminous-dusk) !important;}.has-pale-ocean-gradient-background{background: var(--wp--preset--gradient--pale-ocean) !important;}.has-electric-grass-gradient-background{background: var(--wp--preset--gradient--electric-grass) !important;}.has-midnight-gradient-background{background: var(--wp--preset--gradient--midnight) !important;}.has-small-font-size{font-size: var(--wp--preset--font-size--small) !important;}.has-medium-font-size{font-size: var(--wp--preset--font-size--medium) !important;}.has-large-font-size{font-size: var(--wp--preset--font-size--large) !important;}.has-x-large-font-size{font-size: var(--wp--preset--font-size--x-large) !important;}
</style>
<link rel='stylesheet' id='category-css-css'  href='https://blogs.cisco.com/wp-content/plugins/cisco-category-page-enhancement/css/category-css.css?ver=5.9.2' type='text/css' media='all' />
<link rel='stylesheet' id='multiauthor_custom_front_style-css'  href='https://blogs.cisco.com/wp-content/plugins/cisco-multiple-authors/css/multiauthor.css?ver=1.1' type='text/css' media='all' />
<link rel='stylesheet' id='parent-style-css'  href='https://blogs.cisco.com/wp-content/themes/ciscowordpress/style.css?ver=5.9.2' type='text/css' media='all' />
<link rel='stylesheet' id='child-style-css'  href='https://blogs.cisco.com/wp-content/themes/ciscowordpress-child/style.css?ver=5.9.2' type='text/css' media='all' />
<link rel='stylesheet' id='ciscowordpress-style-css'  href='https://blogs.cisco.com/wp-content/themes/ciscowordpress-child/style.css?ver=5.9.2' type='text/css' media='all' />
<style id='ciscowordpress-style-inline-css' type='text/css'>
@media only screen and (min-width: 930px){
	ul#featured_categories li{
	width: calc(100%/  );
	}}
</style>
<link rel='stylesheet' id='cui-standard-css'  href='https://www.cisco.com/web/fw/cisco-ui/1.3.5/dist/css/cui-standard.min.css?ver=5.9.2' type='text/css' media='all' />
<link rel='stylesheet' id='style_login_widget-css'  href='https://blogs.cisco.com/wp-content/plugins/miniorange-oauth-oidc-single-sign-on/resources/css/style_login_widget.css?ver=5.9.2' type='text/css' media='all' />
<script type='text/javascript' src='https://blogs.cisco.com/wp-content/plugins/cisco-multiple-authors/js/custom-multiauthor.js?ver=5.9.2' id='multiauthor_custom_js-js'></script>
<script type='text/javascript' src='https://blogs.cisco.com/wp-content/themes/ciscowordpress/js/card-dropdown.js?ver=5.9.2' id='ciscowordpress-card-tag-dropdown-js'></script>
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="https://blogs.cisco.com/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="https://blogs.cisco.com/wp-includes/wlwmanifest.xml" /> 
<meta name="generator" content="WordPress 5.9.2" />
<link rel='shortlink' href='https://blogs.cisco.com/?p=156992' />
<link rel="alternate" type="application/json+oembed" href="https://blogs.cisco.com/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fblogs.cisco.com%2Fsecurity%2Ftalos%2Fopening-zxshell" />
<link rel="alternate" type="text/xml+oembed" href="https://blogs.cisco.com/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fblogs.cisco.com%2Fsecurity%2Ftalos%2Fopening-zxshell&#038;format=xml" />
<link rel="icon" href="https://storage.googleapis.com/blogs-images-new/ciscoblogs/1/2024/09/cropped-Cisco-logo-thumb-sky-blue-32x32.jpg" sizes="32x32" />
<link rel="icon" href="https://storage.googleapis.com/blogs-images-new/ciscoblogs/1/2024/09/cropped-Cisco-logo-thumb-sky-blue-192x192.jpg" sizes="192x192" />
<link rel="apple-touch-icon" href="https://storage.googleapis.com/blogs-images-new/ciscoblogs/1/2024/09/cropped-Cisco-logo-thumb-sky-blue-180x180.jpg" />
<meta name="msapplication-TileImage" content="https://storage.googleapis.com/blogs-images-new/ciscoblogs/1/2024/09/cropped-Cisco-logo-thumb-sky-blue-270x270.jpg" />
</head>
<cdc-template-micro lang="en" search-set-context="blogs">
<body class="post-template-default single single-post postid-156992 single-format-standard no-sidebar">

<div id="page" class="site">
	<a class="skip-link screen-reader-text" href="#content">Skip to content</a>

	<header id="masthead" class="site-header">

	</header><!-- #masthead -->

	<div id="content" class="site-content">

	<div id="primary" class="content-area">
		<main id="main" class="site-main">
			<p id="breadcrumbs"><span><span><a href="https://blogs.cisco.com/">Cisco Blogs</a> / <span><a href="https://blogs.cisco.com/security">Security</a> / <span class="breadcrumb_last" aria-current="page">Threat Spotlight: Group 72, Opening the ZxShell</span></span></span></span></p>
				<div class="blog-post-header">
				</div>
<article id="post-156992" class="post-156992 post type-post status-publish format-standard has-post-thumbnail hentry category-talos tag-apt tag-cisco-talos tag-group-72 tag-malware tag-operation-smn tag-security tag-smn tag-talos tag-threats">
<div class="main-content">
	<header class="entry-header">
					<div class="entry-meta">
				October 28, 2014				<a id="post-comments" href="https://blogs.cisco.com/security/talos/opening-zxshell#respond">Leave a Comment</a>
				<hr>
			</div><!-- .entry-meta -->
			</header><!-- .entry-header -->
	<div class="blog-post-header">
		<div class="thumbnail-avatar">
			<div class="post-thumbnail" style="background-image:url(https://storage.googleapis.com/blogs-images-new/ciscoblogs/1/2023/09/Cisco_Logo_Indigo_no_TM-600x200.png);">				
								<img src="https://storage.googleapis.com/blogs-images-new/ciscoblogs/1/2022/07/1519565080-bpfull.jpg" width="102" height="102" alt="Avatar" class="avatar avatar-102 wp-user-avatar wp-user-avatar-102 photo avatar-default">
							</div>
		</div>
		<div class="blog-cat-post-author-container">
			<a href=https://blogs.cisco.com/security><h5>Security</h5></a>
			<h1 class="entry-title">Threat Spotlight: Group 72, Opening the ZxShell</h1><p class="wordcount"><span class="black">17 min read</span></p>			<p> <a href="https://blogs.cisco.com/author/talos" title="Posts by Talos Group" rel="author">Talos Group</a>			</p>
		</div>		
	</div> <!-- .blog-post-header -->
	<div class="entry-content">
		<p><em>This post was authored by <a href="http://blogs.cisco.com/author/AndreaAllievi">Andrea Allievi</a>, <a href="http://blogs.cisco.com/author/douglasgastonguaygoddard">Douglas Goddard</a>, <a href="http://blogs.cisco.com/author/shaunhurley/">Shaun Hurley</a>, and <a href="http://blogs.cisco.com/author/AlainZidouemba">Alain Zidouemba</a>.</em></p>
<p>Recently, there was a <a href="http://blogs.cisco.com/talos/threat-spotlight-group-72/">blog post</a> on the takedown of a botnet used by threat actor group known as Group 72 and their involvement in Operation SMN.  This group is sophisticated, well funded, and exclusively targets high profile organizations with high value intellectual property in the manufacturing, industrial, aerospace, defense, and media sector. The primary attack vectors are watering-hole, spear phishing, and other web-based attacks.</p>
<p>Frequently, a remote administration tool (RAT) is used to maintain persistence within a victim’s organization. These tools are used to further compromise the organization by attacking other hosts inside the targets network.</p>
<p>ZxShell (aka Sensocode) is a Remote Administration Tool (RAT) used by Group 72 to conduct cyber-espionage operations. Once the RAT is installed on the host it will be used to administer the client, exfiltrate data, or leverage the client as a pivot to attack an organization’s internal infrastructure.  Here is a short list of the types of tools included with ZxShell:</p>
<ul>
<li>Keylogger (used to capture passwords and other interesting data)</li>
<li>Command line shell for remote administration</li>
<li>Remote desktop</li>
<li>Various network attack tools used to fingerprint and compromise other hosts on the network</li>
<li>Local user account creation tools</li>
</ul>
<p>For a complete list of tools please see the MainConnectionIo section.</p>
<p>The following paper is a technical analysis on the functionality of ZxShell. The analysts involved were able to identify command and control (C2) servers, dropper and installation methods, means of persistence, and identify the attack tools that are core to the RAT’s purpose. In addition, the researchers used their analysis to provide detection coverage for Snort, Fireamp, and ClamAV.</p>
<p><span id="more-156992"></span></p>
<h3>Table of Contents</h3>
<ol>
<li><a href="#Background">Background</a></li>
<li><a href="#Distribution">Distribution and Delivery</a></li>
<li><a href="#Analysis">Analysis of the main ZxShell module</a>
<ul>
<li><a href="#DllMain">DllMain</a></li>
<li><a href="#Install">Install</a></li>
<li><a href="#ServiceMain">ServiceMain</a></li>
<li><a href="#ShellMain">ShellMain</a></li>
<li><a href="#ShellMainThread">ShellMainThread</a></li>
<li><a href="#GetIpListAndConnect">GetIpListAndConnect</a></li>
<li><a href="#MainConnectionIo">MainConnectionIo</a></li>
<li><a href="#Uninstall">Uninstall</a></li>
<li><a href="#ZxFunction001">ZxFunction001</a></li>
<li><a href="#ZxFunction002">ZxFunction002</a></li>
</ul>
</li>
<li><a href="#Command-Control">Command and Control server</a></li>
<li><a href="#Malware-Package">Malware Package</a></li>
<li><a href="#Version-Information">Version Information</a></li>
<li><a href="#Extracted-URL">Extracted URL Analysis</a></li>
<li><a href="#Conclusion">Conclusion</a></li>
<li><a href="#Protecting">Protecting Users From These Threats</a></li>
<li><a href="#Appendix-A">Appendix A: Snort rules</a></li>
<li><a href="#Appendix-B">Appendix B: ClamAV signatures</a></li>
<li><a href="#Appendix-C">Appendix C: List of Memory Offsets for Some ZxShell Functions</a></li>
<li><a href="#Appendix-D">Appendix D: Other Collateral</a></li>
</ol>
<h3 id="Background">Background</h3>
<p>ZxShell has been around since 2004. There are a lot of versions available in the underground market. We have analyzed the most common version of ZxShell, version 3.10. There are newer versions, up to version 3.39 as of October 2014.</p>
<h3 id="Distribution">Distribution and Delivery</h3>
<p>An individual who goes by the name LZX in some online forums is believed to be the original author of ZxShell. Since ZxShell has been around since at least 2004, numerous people have purchased or obtained the tools necessary to set up ZxShell command and control servers (C&amp;C) and generate the malware that is placed on the victim&#8217;s network. ZxShell has been observed to be distributed through phishing attacks, dropped by exploits that leverage vulnerabilities such as <a href="http://tools.cisco.com/security/center/viewAlert.x?alertId=24794">CVE-2011-2462</a>, <a href="http://tools.cisco.com/security/center/viewAlert.x?alertId=29886">CVE-2013-3163</a>, and <a href="http://tools.cisco.com/security/center/viewAlert.x?alertId=32870">CVE-2014-0322</a>.</p>
<h3 id="Analysis">Analysis of the Main ZxShell Module</h3>
<p>To illustrate the functionality of main ZxShell module, Let’s take a look at the following sample:</p>
<ul>
<li>MD5: e3878d541d17b156b7ca447eeb49d96a</li>
<li>SHA256: 1eda7e556181e46ba6e36f1a6bfe18ff5566f9d5e51c53b41d08f9459342e26c</li>
</ul>
<p>It exports the following functions, which are examined in greater detail below:</p>
<ul>
<li>DllMain</li>
<li>Install</li>
<li>UnInstall</li>
<li>ServiceMain</li>
<li>ShellMain</li>
<li>ShellMainThread</li>
<li>zxFunction001</li>
<li>zxFunction002</li>
</ul>
<h3 id="DllMain">DllMain</h3>
<p>DllMain performs the initialization of ZxShell. It allocates a buffer of 0x2800 bytes and copies the code for the ZxGetLibAndProcAddr function. To copy memory, the memcpy function is invoked. It is not directly used from msvcrt.dll but is instead copied to another memory chunk before being called. Finally, the trojan Import Address Table (IAT) is resolved and the file path of the process that hosts the dll is resolved and saved in a global variable.</p>
<h3 id="Install">Install</h3>
<p>ZxShell.dll is injected in a shared SVCHOST process. The Svchost group registry key HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\SvcHost is opened and the netsvc group value data is queried to generate a name for the service.</p>
<p>Before the malware can be installed a unique name must to be generated for the service. The malware accomplishes this through querying the netsvc group value data located in the svchost group registry key which is HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\SvcHost.</p>
<p>At startup, Svchost.exe checks the services part of the registry and constructs a list of services to load. Each Svchost session can contain multiple shared services that are organized in groups. Therefore, separate services can run, depending on how and where Svchost.exe is started.</p>
<figure id="attachment_156998" aria-describedby="caption-attachment-156998" style="width: 550px" class="wp-caption aligncenter"><a href="https://alln-extcloud-storage.cisco.com/Cisco_Blogs:ciscoblogs/image015.jpg"><img class="size-large wp-image-156998" alt="Image 1. Svchost Groups registry key" src="https://storage.googleapis.com/blogs-images-new/ciscoblogs/1/image015-550x247.jpg" width="550" height="247" srcset="https://storage.googleapis.com/blogs-images-new/ciscoblogs/1/image015-550x247.jpg 550w, https://storage.googleapis.com/blogs-images-new/ciscoblogs/1/image015-300x135.jpg 300w, https://storage.googleapis.com/blogs-images-new/ciscoblogs/1/image015.jpg 1050w" sizes="(max-width: 550px) 100vw, 550px" /></a><figcaption id="caption-attachment-156998" class="wp-caption-text">Image 1. Svchost Groups registry key</figcaption></figure>
<p>Svchost.exe groups are identified in the above registry key. Each value under this key represents a separate Svchost group and appears as a separate instance when you are viewing active processes. Each value is a REG_MULTI_SZ value and contains the services that run under that Svchost group. Each Svchost group can contain one or more service names that are extracted from the following registry key, whose Parameters key contains a ServiceDLL value:</p>
<pre style="text-align: center">HKEY_LOCAL_MACHINE\System\CurrentControlSet\Services\Service</pre>
<p>On a Windows machine, the netsvc group contains names of both existing and non-existing services. ZxShell exploits this fact by cycling between each of the names, verifying the existence of the real service. The service’s existence is verified with the ServiceExists function, which attempts to open the relative registry sub-key in HKLM\SYSTEM\CurrentControlSet\Services. The first service name that is not installed on the system becomes the ZxShell service name.</p>
<p>A new service is then created using the service parser function ProcessScCommand. ZxShell implemented its own version of the Windows SC command. There are minor differences between the ZxShell implementation of this command and the original Windows one, but they are irrelevant for the purpose of the analysis The command used to install the service is:</p>
<pre style="text-align: center">sc create &lt;service name&gt; &lt;service name&gt; “%SystemRoot%\System32\svchost.exe -k netsvcs”</pre>
<p>where &lt;service name&gt; is the chosen infected service name.</p>
<figure id="attachment_156999" aria-describedby="caption-attachment-156999" style="width: 550px" class="wp-caption aligncenter"><a href="https://alln-extcloud-storage.cisco.com/Cisco_Blogs:ciscoblogs/image042.jpg"><img loading="lazy" class="size-large wp-image-156999" alt="Image 2. “SC” command used to create the target service, and parsed by “ProcessScCommand” routine" src="https://storage.googleapis.com/blogs-images-new/ciscoblogs/1/image042-550x201.jpg" width="550" height="201" srcset="https://storage.googleapis.com/blogs-images-new/ciscoblogs/1/image042-550x201.jpg 550w, https://storage.googleapis.com/blogs-images-new/ciscoblogs/1/image042-300x110.jpg 300w, https://storage.googleapis.com/blogs-images-new/ciscoblogs/1/image042.jpg 635w" sizes="(max-width: 550px) 100vw, 550px" /></a><figcaption id="caption-attachment-156999" class="wp-caption-text">Image 2. “SC” command used to create the target service,<br />and parsed by “ProcessScCommand” routine</figcaption></figure>
<p>The installed service registry key is opened and the 2 values under its <em>Parameter</em> subkey are created. These 2 values, <em>ServiceDll</em> and ServiceDllUnloadOnStop are needed for services that run in a shared process.</p>
<p>Before the service is started ChangeServiceConfig is called to modify the service type to shared and interactive. If the service fails to start then a random service name formatted as netsvc_xxxxxxxx, where xxxxxxxx represent an 8-digit random hex value, is added to the netsvc group and the entire function is repeated.</p>
<h3 id="ServiceMain">ServiceMain</h3>
<p>This function is the entry point of the service. It registers the service using the RegisterServiceCtrlHandler Windows API function. The ZxShell service handler routine is only a stub: it responds to each service request code, doing nothing, and finally exits. It sets the service status to RUNNING and finally calls the ShellMain function of ZxShell.</p>
<h3 id="ShellMain">ShellMain</h3>
<p>The ShellMain function is a stub that relocates the DLL to another buffer and spawns a thread that starts from <em>ShellMainThreadInt</em> at offset +0xC0CD. The <em>ShellMainThreadInt</em> function gets the HeapDestroy Windows API address and replaces the first 3 bytes with the RET 4 opcode. Subsequently, it calls the <em>FreeLibrary</em> function to free its own DLL buffer located at its original address. Because of this, the allocated heaps will not be freed. It re-copies the DLL from the new buffer to the original one using the memcpy function. Finally, it spawns the main thread that starts at the original location of <em>ShellMainThread</em> procedure, and terminates. At this point, the ZxShell library is no longer linked in the module list of the host process. This is important because if any system tool tries to open the host process it will never display the ZxShell DLL.</p>
<h3 id="ShellMainThread">ShellMainThread</h3>
<p>This thread implements the main code, responsible for the entire botnet DLL.<br />
First, it checks if the DLL is executed as a service. If so, it spawns the service watchdog thread. The watchdog thread checks the registry path of the ZxShell service every 2 seconds, to verify that it hasn’t been modified. If a user or an application modifies the ZxShell service registry key, the code restores the original infected service key and values.</p>
<figure id="attachment_157001" aria-describedby="caption-attachment-157001" style="width: 550px" class="wp-caption aligncenter"><a href="https://alln-extcloud-storage.cisco.com/Cisco_Blogs:ciscoblogs/image111.png"><img loading="lazy" class="size-large wp-image-157001" alt="Image 3. The watchdog thread of ZxShell service" src="https://storage.googleapis.com/blogs-images-new/ciscoblogs/1/image111-550x570.png" width="550" height="570" srcset="https://storage.googleapis.com/blogs-images-new/ciscoblogs/1/image111-550x570.png 550w, https://storage.googleapis.com/blogs-images-new/ciscoblogs/1/image111-300x311.png 300w, https://storage.googleapis.com/blogs-images-new/ciscoblogs/1/image111.png 632w" sizes="(max-width: 550px) 100vw, 550px" /></a><figcaption id="caption-attachment-157001" class="wp-caption-text">Image 3. The watchdog thread of ZxShell service</figcaption></figure>
<p>The buffer containing the ZxShell Dll in the new location is freed using the VirtualFree API function. A handle to the DLL file is taken in order to make its deletion more difficult. The ZxShell mutex is created named @_<em>ZXSHELL</em>_@.</p>
<p>ZxShell plugins are parsed and loaded with the <em>AnalyseAndLoadPlugins</em> function. The plugin registry key <em>HKLM\SYSTEM\CurrentControlSet\Control\zxplug</em> is opened and each value is queried. The registry value contains the plugin file name. The target file is loaded using the <em>LoadLibrary</em> API function, and the address of the exported function <em>zxMain</em> is obtained with <em>GetProcAddress</em>.</p>
<p>If the target filename is incorrect or invalid the plugin file is deleted and the registry value is erased. That is performed by the function <em>DeleteAndLogPlugin</em>. Otherwise, the plugin is added to an internal list. Here is the data structure used to keep track of the plugins:</p>
<pre>typedef struct _ZX_PLUGINS_STRUCT {
    LPSTR lpStrRegKey;        // + 0x00 - ZxShell Plugins registry key string 
// (like 'SYSTEM\CurrentControlSet\Control\zxplug')
    DWORD dwUnknown2;        // + 0x04 - Unknown DWORD value
    LPVOID lp138hBuff;        // + 0x08 - Plugins list
    DWORD dwZero;            // + 0x0C - Always zero
    HANDLE hReg;            // + 0x10 - Handle to plugin registry key
} ZX_PLUGINS_STRUCT, *PZX_PLUGINS_STRUCT;</pre>
<p>The thread <em>KeyloggerThread</em> is spawned and is responsible for doing keylogging on the target workstation. We will take a look at the keylogger later on. Finally the main network communication function <em>GetIpListAndConnect</em> is called.</p>
<h3 id="GetIpListAndConnect">GetIpListAndConnect</h3>
<p>This function is at the core of the RAT’s network communication. It starts by initializing a random number generator and reading 100 bytes inside the ZxShell Dll at a hardcoded location. These bytes are XOR encrypted with the byte-key 0x85 and contains a list of remote hosts where to connect. The data is decrypted, the remote host list is parsed and verified using the <em>BuildTargetIpListStruct</em> function. There are 3 types of lists recognized by ZxShell: plain ip addresses, HTTP and FTP addresses.<br />
If the list does not contain any item, or if the verification has failed, the ZxShell sample tries to connect to a hardcoded host  with the goal of retrieving a new updated list.</p>
<p>Otherwise, ZxShell tries to connect to the first item of the list. If ZxShell successfully connects to the remote host, the function <em>DoHandshake</em> is called. This function implements the initial handshake which consists of exchanging 16 bytes, 0x00001985 and 0x00000425,  with the server. The function <em>GetLocalPcDescrStr</em> is used to compose a large string that contains system information of the target workstation. That information is the following:</p>
<ul>
<li>local hostname</li>
<li>organization</li>
<li>owner</li>
<li>operating system details</li>
<li>CPU speed</li>
<li>total physical memory</li>
</ul>
<p>The string is sent to the remote host and the response is checked to see if the first byte of the response is 0xF4, an arbitrary byte. If it is, the botnet connection I/O procedure is called through the <em>MainConnectionIo</em> function.</p>
<figure id="attachment_157003" aria-describedby="caption-attachment-157003" style="width: 300px" class="wp-caption aligncenter"><a href="https://alln-extcloud-storage.cisco.com/Cisco_Blogs:ciscoblogs/image08.jpg"><img loading="lazy" class="size-medium wp-image-157003" alt="Image 4. The GetLocalPcDescrStr and DoHandshake functions called before  starting the command processing" src="https://storage.googleapis.com/blogs-images-new/ciscoblogs/1/image08-300x307.jpg" width="300" height="307" srcset="https://storage.googleapis.com/blogs-images-new/ciscoblogs/1/image08-300x307.jpg 300w, https://storage.googleapis.com/blogs-images-new/ciscoblogs/1/image08.jpg 381w" sizes="(max-width: 300px) 100vw, 300px" /></a><figcaption id="caption-attachment-157003" class="wp-caption-text">Image 4. The GetLocalPcDescrStr and DoHandshake functions called before<br />starting the command processing</figcaption></figure>
<p>Otherwise, the ZxShell code closes the socket used and sleeps for 30 seconds. It will then retry the connection with the next remote host, if there is one.</p>
<p>It is noteworthy that this function includes the code to set the ZxShell node as a server: if one of the hardcoded boolean value is set to 1, a listening socket is created. The code waits for an incoming connection. When the connection is established a new thread is spawned that starts with the <em>MainConnectionIo</em> function.</p>
<h3 id="MainConnectionIo">MainConnectionIo</h3>
<p>The <em>MainConnectionIo</em> function checks if the Windows Firewall is enabled, sets the Tcp Keep Alive value and Non-blocking mode connection options and receives data from the remote host through the <em>ReceiveCommandData</em> function. If the communication fails, ZxShell disables the firewall by modifying the registry key:</p>
<pre>HKLM\SYSTEM\CurrentControlSet\Services\SharedAccess\Parameters\FirewallPolicy\StandardProfile</pre>
<p>Then the connection is retried. The received command is then processed by the ZxShell function with the <em>ProcessCommand</em> function.</p>
<p>The command processing function starts by substituting the main module name and path in the hosting process PEB, with the one of the default internet browser. The path of the main browser of the workstation is obtained by reading the registry value:</p>
<pre>HKLM\SOFTWARE\Classes\HTTP\shell\open\command</pre>
<figure id="attachment_157005" aria-describedby="caption-attachment-157005" style="width: 550px" class="wp-caption aligncenter"><a href="https://alln-extcloud-storage.cisco.com/Cisco_Blogs:ciscoblogs/image09.jpg"><img loading="lazy" class="size-large wp-image-157005" alt="Image 5. Our test workstation use Windows Internet Explorer as default browser" src="https://storage.googleapis.com/blogs-images-new/ciscoblogs/1/image09-550x230.jpg" width="550" height="230" srcset="https://storage.googleapis.com/blogs-images-new/ciscoblogs/1/image09-550x230.jpg 550w, https://storage.googleapis.com/blogs-images-new/ciscoblogs/1/image09-300x125.jpg 300w, https://storage.googleapis.com/blogs-images-new/ciscoblogs/1/image09.jpg 853w" sizes="(max-width: 550px) 100vw, 550px" /></a><figcaption id="caption-attachment-157005" class="wp-caption-text">Image 5. Our test workstation use Windows Internet Explorer as default browser</figcaption></figure>
<p>This trick renders identification by firewall more cumbersome. A host firewall  will recognize the outgoing connection as originated by the browser instead of the ZxShell service host process. The browser process always performs outgoing connections and the firewall shouldn’t block them.</p>
<p>The command processing is straightforward. Here is the list of common commands:</p>
<table>
<tbody>
<tr>
<td>COMMAND</td>
<td>MEANING</td>
</tr>
<tr>
<td>Help / ?</td>
<td>Get help</td>
</tr>
<tr>
<td>Exit / Quit</td>
<td>Exit and shut down the botnet client</td>
</tr>
<tr>
<td>SysInfo</td>
<td>Get target System information</td>
</tr>
<tr>
<td>SYNFlood</td>
<td>Perform a SYN attack on a host</td>
</tr>
<tr>
<td>Ps</td>
<td>Process service Unix command implementation</td>
</tr>
<tr>
<td>CleanEvent</td>
<td>Clear System Event log</td>
</tr>
<tr>
<td>FindPass</td>
<td>Find login account password</td>
</tr>
<tr>
<td>FileTime</td>
<td>Get time information about a file</td>
</tr>
<tr>
<td>FindDialPass</td>
<td>List all the dial-up accounts and passwords</td>
</tr>
<tr>
<td>User</td>
<td>Account Management System</td>
</tr>
<tr>
<td>TransFile</td>
<td>Transfer file in or from remote host</td>
</tr>
<tr>
<td>Execute</td>
<td>Run a program in the remote host</td>
</tr>
<tr>
<td>SC</td>
<td>Service control command, implemented as the Windows one</td>
</tr>
<tr>
<td>CA</td>
<td>Clone user account</td>
</tr>
<tr>
<td>RunAs</td>
<td>Create new process as another User or Process context.</td>
</tr>
<tr>
<td>TermSvc</td>
<td>Terminal service configuration (working on Win Xp/2003)</td>
</tr>
<tr>
<td>GetCMD</td>
<td>Remote Shell</td>
</tr>
<tr>
<td>Shutdown</td>
<td>Logout, shutdown or restart the target system</td>
</tr>
<tr>
<td>ZXARPS</td>
<td>Spoofing, redirection, packet capture</td>
</tr>
<tr>
<td>ZXNC</td>
<td>Run ZXNC v1.1 &#8211; a simple telnet client</td>
</tr>
<tr>
<td>ZXHttpProxy</td>
<td>Run a HTTP proxy server on the workstation</td>
</tr>
<tr>
<td>ZXSockProxy</td>
<td>Run a Sock 4 &amp; 5 Proxy server</td>
</tr>
<tr>
<td>ZXHttpServer</td>
<td>Run a custom HTTP server</td>
</tr>
<tr>
<td>PortScan</td>
<td>Run TCP Port MultiScanner v1.0</td>
</tr>
<tr>
<td>KeyLog</td>
<td>Capture or record the remote computer’s keystrokes. The implementation is a userland keylogger that polls the keymap with each keystroke.</td>
</tr>
<tr>
<td>LoadDll</td>
<td>Load a DLL into the specified process</td>
</tr>
<tr>
<td>End</td>
<td>Terminate ZxShell DLL</td>
</tr>
<tr>
<td>Uninstall</td>
<td>Uninstall and terminate ZxShell bot DLL</td>
</tr>
<tr>
<td>ShareShell</td>
<td>Share a shell to other</td>
</tr>
<tr>
<td>CloseFW</td>
<td>Switch off Windows Firewall</td>
</tr>
<tr>
<td>FileMG</td>
<td>File Manager</td>
</tr>
<tr>
<td>winvnc</td>
<td>Remote Desktop</td>
</tr>
<tr>
<td>rPortMap</td>
<td>Port Forwarding</td>
</tr>
<tr>
<td>capsrv</td>
<td>Video Device Spying</td>
</tr>
<tr>
<td>zxplug</td>
<td>Add and load a ZxShell custom plugin</td>
</tr>
</tbody>
</table>
<p>This set of functionality allows the operator complete control of a system. Being able to transfer and execute files on the infected system means the attacker can run any code they please. Further, the keylogging and remote desktop functionality allows the operator to spy on the infected machine, observing all keystrokes and viewing all user actions.</p>
<h3 id="Uninstall">Uninstall</h3>
<p>Unloads ZxShell and deletes all of the active components. This simply deletes the ZxShell service key from the Windows registry (using <em>SHDeleteKey</em> Api) and all of the subkeys. Finally, it marks ZxShell main Dll for deletion with the <em>MoveFileEx</em> Windows API.</p>
<h3 id="ZxFunction001">ZxFunction001</h3>
<p>This function is the supporting functionality for WinVNC. To allow the VNC session to connect, the current network socket <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms741675%28v=vs.85%29.aspx">WSAProtcol_Info</a> structure is written to a named pipe prior to calling zxFunction001. Once the named pipe has been created, CreateProcessAsUserA is called with the following as the CommandLine parameter :</p>
<pre>&lt;systemroot&gt;\\rundll32.exe &lt;zxshell dll name&gt;,zxFunction001 &lt;name of NamedPipe&gt;</pre>
<p>zxFunction001 modifies the current process memory, uses data contained in the named pipe to create a socket, and then executes the code that sends the remote desktop session to the server controller.</p>
<h3 id="ZxFunction002">ZxFunction002</h3>
<p>This function will either bind the calling process to a port or has the calling process connect to a remote host. The function is called in the following manner:</p>
<pre>&lt;systemroot&gt;\\rundll32.exe &lt;zxshell dll name&gt;,zxFunction002 &lt;name of NamedPipe&gt;</pre>
<p>The functionality (connect or bind) depends on the data contained within the named pipe. Unlike zxFunction001, this is not used by  any of the RAT commands in the zxshell.dll.</p>
<h3>Kernel Device Driver LoveUSD</h3>
<p>Apart from user-mode ZxShell droppers mentioned earlier, there is a file (SHA256: 1e200d0d3de360d9c32e30d4c98f07e100f6260a86a817943a8fb06995c15335) that installs a kernel device driver called <em>loveusd.sys</em>. The architecture of this dropper is different from the others: it starts extracting the main driver from itself. It adds the SeLoadDriver privilege to its access token and proceeds to install the driver as a fake disk filter driver. ZxShell opens the registry key that describes the disk class drivers:</p>
<pre>SYSTEM\CurrentControlSet\Control\Class\{4D36E967-E325-11CE-BFC1-08002BE10318}</pre>
<p>It then adds the “Loveusd.sys” extracted driver name to the upper filter list. In our analysed sample the “Loveusd.sys” driver is installed with the name “USBHPMS”. Finally the driver is started using the ZwLoadDriver native API.</p>
<p>The ZxShell driver starts by acquiring some kernel information and then hooking “ObReferenceObjectByHandle” API. Finally it spawns 2 system threads.</p>
<p>The first thread is the “communication” thread. ZxShell employs a strange method for communication: it hooks the NtWriteFile API and recognizes 5 different special handle values as commands:</p>
<ul>
<li>0x111111111 &#8211; Hide “Loveusd” driver from the system kernel driver list</li>
<li>0x22222222 &#8211; Securely delete an in-use or no-access target file-name</li>
<li>0x44444444 &#8211; Unhook the ZwWriteFile API and hook KiFastCallEntry</li>
<li>0x55555555 &#8211; Remove the ZxShell Image Load Notify routine</li>
<li>0x88888888 &#8211; Set a special value called “type” in Windows registry key HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\DriverMain</li>
</ul>
<p>The second Loveusd system thread does a lot of things. Its principal duties are to create the ZxShell main DLL in “c:\Windows\System32\commhlp32.dll” and to install the Kernel “Load Image Notify routine”. The code then tries to kill each process and service that belongs to the following list of AV products:</p>
<ul>
<li>Symantec Firewall</li>
<li>Norton</li>
<li>ESET</li>
<li>McAfee</li>
<li>Avast</li>
<li>Avira</li>
<li>Sophos</li>
<li>Malwarebytes</li>
</ul>
<p>Next, the ZxShell <em>Load-Image Notify</em> function prevents the AV processes from restarting.</p>
<p>The installation procedure continues in the user-mode dropper. The ZxShell service is installed as usual, and the in-execution dropper is deleted permanently using the special handle value 0x22222222 for the WriteFile API call. This handle value is invalid: all the windows kernel handle values are by design a multiple of 4. The ZxShell hook code knows that and intercept it.</p>
<p>ObReferenceObjectByHandle is a Kernel routine designed to validate a target object and return the pointer to its object body (and even its handle information), starting from the object handle (even the user-mode one). The hook installed by ZxShell implements one of its filtering routine. It filters each attempt to open the ZxShell protected driver or the main DLL, returning a reference to the “netstat.exe” file. The protection is enabled to all processes except for ones in the following list: Svchost.exe, Lsass.exe, Winlogon.exe, Services.exe, Csrss.exe, ctfmon.exe, Rundll32.exe, mpnotify.exe, update.exe.</p>
<p>If the type of the object that the system is trying to validate is a process, the hook code rewrites again the configuration data of the ZxShell service in the windows registry.</p>
<figure id="attachment_157012" aria-describedby="caption-attachment-157012" style="width: 550px" class="wp-caption aligncenter"><a href="https://alln-extcloud-storage.cisco.com/Cisco_Blogs:ciscoblogs/image026.jpg"><img loading="lazy" class="size-large wp-image-157012" alt="Image 6. Our test Windows XP workstation trying to open the sys file of ZxShell LOVEUSD driver" src="https://storage.googleapis.com/blogs-images-new/ciscoblogs/1/image026-550x368.jpg" width="550" height="368" srcset="https://storage.googleapis.com/blogs-images-new/ciscoblogs/1/image026-550x368.jpg 550w, https://storage.googleapis.com/blogs-images-new/ciscoblogs/1/image026-300x201.jpg 300w, https://storage.googleapis.com/blogs-images-new/ciscoblogs/1/image026.jpg 931w" sizes="(max-width: 550px) 100vw, 550px" /></a><figcaption id="caption-attachment-157012" class="wp-caption-text">Image 6. Our test Windows XP workstation trying to open the sys file of ZxShell LOVEUSD driver</figcaption></figure>
<p>The last type of Kernel modification that ZxShell rootkit performs is the system call dispatcher (KiFastCallEntry) hook. In this manner, ZxShell is able to completely hide itself, intercepting the following Kernel API calls: <em>ZwAllocateVirtualMemory</em>, <em>ZwOpenEvent</em>, <em>ZwQueryDirectoryFile</em>, <em>ZwWriteFile</em>, <em>ZwEnumerateKey</em>, and <em>ZwDeviceIoControlFile</em>.</p>
<h3 id="Command-Control">Command and Control Server</h3>
<p>Sample (SHA256: 1eda7e556181e46ba6e36f1a6bfe18ff5566f9d5e51c53b41d08f9459342e26c) is configured to act as a server. The symbol “g_bCreateListenSck” is set to 1. This means that, as seen above, the ZxShell Dll is started in listening mode. It connects to the first remote C&amp;C that tries to contact it and succeeds in the handshake. The encrypted IP address is “127.0.0.2” (used as loopback) and no connection is made on that IP address (due to the listening variable set to 1).</p>
<h3 id="Malware-Package">Malware Package</h3>
<p>We used the ZxShell package for version 3.10 (SHA256: 1622460afbc8a255141256cb77af61c670ec21291df8fe0989c37852b59422b4).The convenient thing about this is that the CNC panel worked with any version, 3.10 and above. The buttons are all in Chinese, with the help of Google Translate and keen detective skills (read: button clicking), we’ve deciphered the functionality.</p>
<p>When you start the controller, you need to set the port you want to listen on and if you’ve set a password, add it here.</p>
<p><a href="https://alln-extcloud-storage.cisco.com/Cisco_Blogs:ciscoblogs/image06.png"><img loading="lazy" class="aligncenter size-large wp-image-157014" alt="image06" src="https://storage.googleapis.com/blogs-images-new/ciscoblogs/1/image06-550x432.png" width="550" height="432" srcset="https://storage.googleapis.com/blogs-images-new/ciscoblogs/1/image06-550x432.png 550w, https://storage.googleapis.com/blogs-images-new/ciscoblogs/1/image06-300x235.png 300w, https://storage.googleapis.com/blogs-images-new/ciscoblogs/1/image06.png 1308w" sizes="(max-width: 550px) 100vw, 550px" /></a>Once an infected machine connects, you see its information displayed in a selection box at the top. There are some built in functions on the side for the more common features. These include remote desktop, webcam spying, remote shell, and file management. You can also select a host and type help for a full list of commands.</p>
<p><a href="https://alln-extcloud-storage.cisco.com/Cisco_Blogs:ciscoblogs/image00.png"><img loading="lazy" class="aligncenter size-large wp-image-157015" alt="image00" src="https://storage.googleapis.com/blogs-images-new/ciscoblogs/1/image00-550x441.png" width="550" height="441" srcset="https://storage.googleapis.com/blogs-images-new/ciscoblogs/1/image00-550x441.png 550w, https://storage.googleapis.com/blogs-images-new/ciscoblogs/1/image00-300x240.png 300w, https://storage.googleapis.com/blogs-images-new/ciscoblogs/1/image00.png 1274w" sizes="(max-width: 550px) 100vw, 550px" /></a>I have the same machine infected with two different version of ZxShell. Sending the help command for each, you can see the extra features added between version 3.1 and 3.2.</p>
<p><a href="https://alln-extcloud-storage.cisco.com/Cisco_Blogs:ciscoblogs/image07.png"><img loading="lazy" class="aligncenter size-medium wp-image-157016" alt="image07" src="https://storage.googleapis.com/blogs-images-new/ciscoblogs/1/image07-300x494.png" width="300" height="494" srcset="https://storage.googleapis.com/blogs-images-new/ciscoblogs/1/image07-300x494.png 300w, https://storage.googleapis.com/blogs-images-new/ciscoblogs/1/image07.png 491w" sizes="(max-width: 300px) 100vw, 300px" /></a>Keylogging, ZXARPS (IP and URL spoofing), and SYNFlood are some of the interesting features added to version 3.2.</p>
<h3 id="Version-Information">Version Information</h3>
<p>We wrote a script to extract version info from the binaries we have.</p>
<ul>
<li>3.100 : 914</li>
<li>3.200 : 152</li>
<li>3.210 : 118</li>
<li>3.220 : 14</li>
<li>3.390 : 3</li>
</ul>
<p>In versions 3.1 &#8211; 3.21, the configuration info is xor encoded with 0x85. This configuration info can be changed with a tool included in the ZxShell package.</p>
<p><a href="https://storage.googleapis.com/blogs-images-new/ciscoblogs/1/image05.png"><img loading="lazy" class="aligncenter size-full wp-image-157017" alt="image05" src="https://storage.googleapis.com/blogs-images-new/ciscoblogs/1/image05.png" width="328" height="304" srcset="https://storage.googleapis.com/blogs-images-new/ciscoblogs/1/image05.png 328w, https://storage.googleapis.com/blogs-images-new/ciscoblogs/1/image05-300x278.png 300w" sizes="(max-width: 328px) 100vw, 328px" /></a>In versions 3.22 and 3.39 the routine changes. The new xor encoding byte is 0x5B. The data is stored in the last 0x100 bytes of the file. The first 8 bytes of data are static. Then there is the dll install name, the domain, and the port.</p>
<h3 id="Extracted-URL">Extracted URL Analysis</h3>
<p>Knowing the obfuscation routines for this data we wrote a script to extract the URLs / IPs and ports stored.</p>
<p>The most common ports used are, 80, 1985, 1986, and 443. 1985 is the default port for the malware, 1986 is the lazy variation of that port. Port 80 and 443 are the default ports for HTTP and HTTPS traffic. The next most common is port 53. This is used in some of the newer 3.22 and 3.39 samples. After that, the count for each port starts declining sharply. The choices are interesting though, many correspond to what looks like the birth year of the controller (ie. years in the late 1980s and early 1990s), and others seem to match what year the malware was launched in (ie. in the 2000s, relatively close to the current year).</p>
<p>Since this malware dates back to around 2004, there are many samples containing CNC URLs from the 3322.org page. This page used to offer no-ip type hosting and was widely used by malware authors. So much so that Microsoft did a takedown in 2012. A similar service, vicp.net, is also seen in many of the domains.</p>
<p>In the malware, if a domain is configured, it will retrieve domain.tld/myip.txt. This file contains a list of IP addresses for the infected machine to connect back to. Otherwise, if an IP address is configured, it will connect directly to that IP address.</p>
<h3>Cloning the ZxShell Server</h3>
<p>We have written a simple C++ ZxShell Server that implements the communication and the handshake for the version 3.10 and 3.20 of the ZxShell DLL. The implementation is quite simple: After the handshake, 2 threads that deal with data transfer are spawned. Here we have some screenshots that show the Server and the ZxShell Keylogger in action:</p>
<figure id="attachment_157018" aria-describedby="caption-attachment-157018" style="width: 550px" class="wp-caption aligncenter"><a href="https://alln-extcloud-storage.cisco.com/Cisco_Blogs:ciscoblogs/image031.jpg"><img loading="lazy" class="size-large wp-image-157018" alt="Our server has accepted a connection from a remote host" src="https://storage.googleapis.com/blogs-images-new/ciscoblogs/1/image031-550x193.jpg" width="550" height="193" srcset="https://storage.googleapis.com/blogs-images-new/ciscoblogs/1/image031-550x193.jpg 550w, https://storage.googleapis.com/blogs-images-new/ciscoblogs/1/image031-300x105.jpg 300w, https://storage.googleapis.com/blogs-images-new/ciscoblogs/1/image031.jpg 837w" sizes="(max-width: 550px) 100vw, 550px" /></a><figcaption id="caption-attachment-157018" class="wp-caption-text">Our server has accepted a connection from a remote host</figcaption></figure>
<figure id="attachment_157019" aria-describedby="caption-attachment-157019" style="width: 550px" class="wp-caption aligncenter"><a href="https://alln-extcloud-storage.cisco.com/Cisco_Blogs:ciscoblogs/image10.jpg"><img loading="lazy" class="size-large wp-image-157019" alt="The ZxShell keylogger has captured 2 user passwords  (gmail.com and amazon.com)" src="https://storage.googleapis.com/blogs-images-new/ciscoblogs/1/image10-550x308.jpg" width="550" height="308" srcset="https://storage.googleapis.com/blogs-images-new/ciscoblogs/1/image10-550x308.jpg 550w, https://storage.googleapis.com/blogs-images-new/ciscoblogs/1/image10-300x168.jpg 300w, https://storage.googleapis.com/blogs-images-new/ciscoblogs/1/image10.jpg 837w" sizes="(max-width: 550px) 100vw, 550px" /></a><figcaption id="caption-attachment-157019" class="wp-caption-text">The ZxShell keylogger has captured 2 user passwords<br />(gmail.com and amazon.com)</figcaption></figure>
<p>The last image shows a very interesting feature of the ZxShell keylogger: once installed and activated, the keylogger is able to catch each password that the user inserts in the login box of each website (like Google, Amazon and so on&#8230;). This makes the keylogger a perfect weapons for the attackers. They will be able to steal and resell in the underground market the sensitive data of each victim.</p>
<h3 id="Conclusion">Conclusion</h3>
<p>Advanced persistent threats will remain a problem for companies and organizations of all sizes, especially those with high financial or intellectual property value.  Group 72’s involvement in Operation SMN is another example of what sort of damage that can be done if organizations are not diligent in their efforts to secure their networks.  ZxShell is one sample amongst several tools that Group 72 used within their campaign.</p>
<p>ZxShell is a sophisticated tool employed by Group 72 that contains all kinds of functionality.  Its detection and removal can be difficult due to the various techniques used to conceal its presence, such as disabling the host anti-virus, masking its installation on a system with a valid service name, and by masking outbound traffic as originating from a web browser.  While other techniques are also utilized to conceal and inhibit its removal, ZxShell’s primary functionality is to act as a Remote Administration Tool (RAT), allowing the threat actor to have continuous backdoor access on to the compromised machine.</p>
<p>As our analysis demonstrates, ZxShell is an effective tool that can be ultimately used to steal user credentials and other highly valuable information. The threat posed by ZxShell to organizations is one that cannot be ignored.  Organizations with high financial or intellectual property value should take the time to ensure their security requirements are met and that employee’s are educated about the security threats their organizations face.</p>
<p>For additional information, please see our <a href="http://blogs.cisco.com/talos/threat-spotlight-group-72/">blog post</a>.</p>
<h3 id="Protecting">Protecting Users from These Threats</h3>
<p><img loading="lazy" class=" wp-image-156069 alignleft" alt="coveragetable" src="https://storage.googleapis.com/blogs-images-new/ciscoblogs/1/coveragetable1.png" width="202" height="173" /></p>
<p>Advanced Malware Protection (<a href="http://www.cisco.com/c/en/us/support/security/amp-firepower-software-license/tsd-products-support-series-home.html">AMP</a>) is ideally suited to detect the sophisticated malware used by this threat actor.</p>
<p style="text-align: left"><a href="http://www.cisco.com/c/en/us/products/security/cloud-web-security/index.html">CWS</a> or <a href="http://www.cisco.com/c/en/us/products/security/web-security-appliance/index.html">WSA</a> web scanning prevents access to malicious websites, including watering hole attacks, and detects malware used in these attacks.</p>
<p>The Network Security protection of <a href="http://www.cisco.com/c/en/us/products/security/intrusion-prevention-system-ips/index.html">IPS</a> and <a href="http://www.cisco.com/c/en/us/products/security/asa-next-generation-firewall-services/index.html">NGFW</a> have up-to-date signatures to detect malicious network activity by threat actors.</p>
<p><a href="http://www.cisco.com/c/en/us/products/security/email-security-appliance/index.html">ESA</a> can block spear phishing emails sent by threat actors as part of their campaign.</p>
<p>&nbsp;</p>
<h3 id="Appendix-A">Appendix A: Snort Rules</h3>
<p>Initial connection from the infected computer&#8217;s perspective &#8211; after it connects to the controller &#8211;</p>
<pre>RECV:  85190000250400000000404000000000
SEND:  86190000040100006666464000000000
RECV:  4edf9340780100000000000000000000
SEND:  00000000000000000000000000000000</pre>
<p>The rules are on the first 8 bytes of the first two packets. They are hard coded in the binaries. The rest of the bytes are variable (for example, 66664640 is a floating point version number of ZxShell).</p>
<p>Snort rules:</p>
<ul>
<li>sid:32180</li>
<li>sid:32181</li>
</ul>
<p>These rules have been released in our community ruleset and can be <a href="https://www.snort.org/downloads">downloaded </a>and used directly, or via <a href="https://code.google.com/p/pulledpork/">pulledpork </a>from Snort.org</p>
<h3 id="Appendix-B">Appendix B: ClamAV Signatures</h3>
<ul>
<li>Win.Trojan.ZxShell-11</li>
<li>Win.Trojan.ZxShell-12</li>
<li>Win.Trojan.ZxShell-13</li>
<li>Win.Trojan.ZxShell-14</li>
<li>Win.Trojan.ZxShell-15</li>
<li>Win.Trojan.ZxShell-16</li>
<li>Win.Trojan.ZxShell-17</li>
<li>Win.Trojan.ZxShell-18</li>
<li>Win.Trojan.ZxShell-19</li>
<li>Win.Trojan.ZxShell-20</li>
<li>Win.Trojan.ZxShell-21</li>
<li>Win.Trojan.ZxShell-22</li>
<li>Win.Trojan.ZxShell-23</li>
<li>Win.Trojan.ZxShell-24</li>
<li>Win.Trojan.ZxShell-25</li>
<li>Win.Trojan.ZxShell-26</li>
</ul>
<p>These signatures are available within the ClamAV database.  Please run freshclam to ensure you stay updated with the latest coverage.</p>
<h3 id="Appendix-C">Appendix C: List of Memory Offsets for Some ZxShell Functions</h3>
<p>Here’s a list for some ZxShell functions for sample SHA256: 1eda7e556181e46ba6e36f1a6bfe18ff5566f9d5e51c53b41d08f9459342e26c:</p>
<table>
<tbody>
<tr>
<td>FUNCTION NAME</td>
<td>BRIEF DESCRIPTION</td>
<td>OFFSET</td>
</tr>
<tr>
<td>ZxGetLibAndProcAddr</td>
<td>ZxShell GetProcAddress implementation</td>
<td>0x12CDA</td>
</tr>
<tr>
<td>CopyMemoryFromNewMsvcrt</td>
<td>ZxShell memory copy routine</td>
<td>0x12C4C</td>
</tr>
<tr>
<td>ServiceExists</td>
<td>Get if a service is installed in the system or not</td>
<td>0x0A7C7</td>
</tr>
<tr>
<td>ProcessScCommand</td>
<td>ZxShell &#8220;SC&#8221; command implementation</td>
<td>0x0E3EF</td>
</tr>
<tr>
<td>AnalyseAndLoadPlugins</td>
<td>Parse the installed plugin list and load each one of them</td>
<td>0x0127B7</td>
</tr>
<tr>
<td>DeleteAndLogPlugin</td>
<td>Delete a corrupted plugin and log the problem</td>
<td>0x012597</td>
</tr>
<tr>
<td>KeyloggerThread</td>
<td>ZxShell keylogger implementation</td>
<td>0x0D591</td>
</tr>
<tr>
<td>GetIpListAndConnect</td>
<td>Analyse the IP list inside the ZxShell PE and tries to connect</td>
<td>0x011496</td>
</tr>
<tr>
<td>BuildTargetIpListStruct</td>
<td>Build remote server Ip list structure</td>
<td>0x11419</td>
</tr>
<tr>
<td>DoHandshake</td>
<td>Perform initial connection handshake</td>
<td>0xB8E8</td>
</tr>
<tr>
<td>GetLocalPcDescrStr</td>
<td>Build a string containing the target workstation data</td>
<td>0x0B627</td>
</tr>
<tr>
<td>MainConnectionIo</td>
<td>ZxShell main connection I/O routine</td>
<td>0x1126C</td>
</tr>
<tr>
<td>ReceiveCommandData</td>
<td>Receive each byte from the socket until a newline char</td>
<td>0x016DF</td>
</tr>
<tr>
<td>ProcessCommand</td>
<td>Main ZxShell command processing routine</td>
<td>0x10C2B</td>
</tr>
</tbody>
</table>
<h3 id="Appendix-D">Appendix D: Other Collateral</h3>
<p><a href="https://alln-extcloud-storage.cisco.com/Cisco_Blogs:ciscoblogs/zxshell-hash-list.txt">Here</a> is a non-exhaustive list of ZxShell samples that were analyzed for this report.</p>
<p><a href="https://alln-extcloud-storage.cisco.com/Cisco_Blogs:ciscoblogs/zxshell-domains-by-port.txt">Here</a> is a list of Domains organized by port.</p>
	<div id="share_bar_desktop">
		<span class = "share_title">Share</span>
			<div class="twitter">
	<div class = "box">
		<a class = "share" href="https://twitter.com/intent/tweet?url=http://cs.co/9005qhI1&text=Threat Spotlight: Group 72, Opening the ZxShell&via=Cisco" target='_blank' data-config-metrics-group='social_shares' data-config-metrics-title='twitter_shares' data-config-metrics-item='twitter_share'>  <img class="share_image" src="https://blogs.cisco.com/wp-content/themes/ciscowordpress-child/svg/share_X_white.svg" alt="share on twitter"></img></a>
	</div>
	</div>

	<div class="facebook">
	<div class = "box">
		<a class = "share" href = "http://www.facebook.com/sharer/sharer.php?u=https://blogs.cisco.com/security/talos/opening-zxshell&title=Threat Spotlight: Group 72, Opening the ZxShell" data-config-metrics-group='social_shares' data-config-metrics-title='facebook_shares' data-config-metrics-item='facebook_share' onclick="javascript:window.open(this.href, '', 'menubar=no,toolbar=no,resizable=yes,scrollbars=yes,height=600,width=600');return false;"><img class="share_image" src="https://blogs.cisco.com/wp-content/themes/ciscowordpress-child/svg/share_fb_white.svg" alt="share on facebook"></a>
	</div>
	</div>


	<div class="linkedin">
	<div class = "box">
		<a class = "share" href = "https://www.linkedin.com/cws/share?url=https://blogs.cisco.com/security/talos/opening-zxshell" data-title=" " data-config-metrics-group='social_shares' data-config-metrics-title='linkedin_shares' data-config-metrics-item='linkedin_share' onclick="javascript:window.open(this.href, '', 'menubar=no,toolbar=no,resizable=yes,scrollbars=yes,height=600,width=600');return false;"><img class="share_image" src="https://blogs.cisco.com/wp-content/themes/ciscowordpress-child/svg/share_li_white.svg" alt="share on linkedin"></a>
	</div>
	</div>

	<div class = "mail">
	<div class = "box">
	<a class="share" href="mailto:?subject=Cisco Blog: Threat Spotlight: Group 72, Opening the ZxShell&body=I saw this post on Cisco Blogs and thought you might like to read it.%0A%0AThreat Spotlight: Group 72, Opening the ZxShell%0A%0Ahttps://blogs.cisco.com/security/talos/opening-zxshell%0A%0A****Disclaimer****%0A%0ACisco is not responsible for the content of this email, and its contents do not necessarily reflect Cisco’s views or opinions. Cisco has not verified the email address or name of the sender." data-config-metrics-group='social_shares' data-config-metrics-title='email_shares' data-config-metrics-item='email_share'> <img class="share_image" src="https://blogs.cisco.com/wp-content/themes/ciscowordpress-child/svg/share_email_white.svg"> </a>
	</div>
	</div>

	<div class = "clear"></div>
  </div>
	   <br>
	<div class = "share_text">Share:</div>
	<div id="share_bar_mobile">

			<div class="twitter">
	<div class = "box">
		<a class = "share" href="https://twitter.com/intent/tweet?url=http://cs.co/9005qhI1&text=Threat Spotlight: Group 72, Opening the ZxShell&via=Cisco" target='_blank' data-config-metrics-group='social_shares' data-config-metrics-title='twitter_shares' data-config-metrics-item='twitter_share'>  <img class="share_image" src="https://blogs.cisco.com/wp-content/themes/ciscowordpress-child/svg/share_X_white.svg" alt="share on twitter"></img></a>
	</div>
	</div>

	<div class="facebook">
	<div class = "box">
		<a class = "share" href = "http://www.facebook.com/sharer/sharer.php?u=https://blogs.cisco.com/security/talos/opening-zxshell&title=Threat Spotlight: Group 72, Opening the ZxShell" data-config-metrics-group='social_shares' data-config-metrics-title='facebook_shares' data-config-metrics-item='facebook_share' onclick="javascript:window.open(this.href, '', 'menubar=no,toolbar=no,resizable=yes,scrollbars=yes,height=600,width=600');return false;"><img class="share_image" src="https://blogs.cisco.com/wp-content/themes/ciscowordpress-child/svg/share_fb_white.svg" alt="share on facebook"></a>
	</div>
	</div>


	<div class="linkedin">
	<div class = "box">
		<a class = "share" href = "https://www.linkedin.com/cws/share?url=https://blogs.cisco.com/security/talos/opening-zxshell" data-title=" " data-config-metrics-group='social_shares' data-config-metrics-title='linkedin_shares' data-config-metrics-item='linkedin_share' onclick="javascript:window.open(this.href, '', 'menubar=no,toolbar=no,resizable=yes,scrollbars=yes,height=600,width=600');return false;"><img class="share_image" src="https://blogs.cisco.com/wp-content/themes/ciscowordpress-child/svg/share_li_white.svg" alt="share on linkedin"></a>
	</div>
	</div>

	<div class = "mail">
	<div class = "box">
	<a class="share" href="mailto:?subject=Cisco Blog: Threat Spotlight: Group 72, Opening the ZxShell&body=I saw this post on Cisco Blogs and thought you might like to read it.%0A%0AThreat Spotlight: Group 72, Opening the ZxShell%0A%0Ahttps://blogs.cisco.com/security/talos/opening-zxshell%0A%0A****Disclaimer****%0A%0ACisco is not responsible for the content of this email, and its contents do not necessarily reflect Cisco’s views or opinions. Cisco has not verified the email address or name of the sender." data-config-metrics-group='social_shares' data-config-metrics-title='email_shares' data-config-metrics-item='email_share'> <img class="share_image" src="https://blogs.cisco.com/wp-content/themes/ciscowordpress-child/svg/share_email_white.svg"> </a>
	</div>
	</div>

	<div class = "clear"></div>

	</div>
	<br>
  	</div><!-- .entry-content -->
		
	<div class="author-section">
	<div><h2>Authors</h2></div>
	<div class="auth-row">
	<div class="blog-row author-bio">
		<div class="item-thirds-1 author-bio-box" >
			<div class="author-image" >
			<a href="https://blogs.cisco.com/author/talos"><img src="https://storage.googleapis.com/blogs-images-new/ciscoblogs/1/2022/07/1519565080-bpfull.jpg" width="150" height="150" alt="Avatar" class="avatar avatar-150wp-user-avatar wp-user-avatar-150 alignnone photo avatar-default">
			</a>
			</div>
			<div class="author-info">
			<h3><a href="https://blogs.cisco.com/author/talos">
			  Talos Group</a>
			</h3>
			  <h4 class="title">Talos Security Intelligence & Research Group </h4>
			  <h4></h4>
			  			</div>
		</div><!--end author image and name-->
	</div><!-- .author-bio -->
			</div>
		</div>
	<footer class="entry-footer">
			</footer><!-- .entry-footer -->
</article>
 <div id="tags-container">Tags: <a href="https://blogs.cisco.com/tag/apt" rel="tag">APT</a> <a href="https://blogs.cisco.com/tag/cisco-talos" rel="tag">Cisco Talos</a> <a href="https://blogs.cisco.com/tag/group-72" rel="tag">Group 72</a> <a href="https://blogs.cisco.com/tag/malware" rel="tag">malware</a> <a href="https://blogs.cisco.com/tag/operation-smn" rel="tag">Operation SMN</a> <a href="https://blogs.cisco.com/tag/security" rel="tag">Security</a> <a href="https://blogs.cisco.com/tag/smn" rel="tag">SMN</a> <a href="https://blogs.cisco.com/tag/talos" rel="tag">Talos</a> <a href="https://blogs.cisco.com/tag/threats" rel="tag">threats</a> <hr id="comment-break-line"> </div> 

		</main><!-- #main -->
	</div><!-- #primary -->

    <div class="blog-row cui cta"> 
      <div class="item-halves-1">
        <div class="cta-container">
          <div class="cta-image">
            <img src="https://storage.googleapis.com/blogs-images-new/ciscoblogs/1/2023/07/IL20230719143932-Cybersecurity-Expert-graphic-marquee-3-scaled-150x150.jpg">
          </div> <!-- end CTA image -->
          <div class="cta-description">
            <h2>Cisco Cybersecurity Viewpoints</h2>
            <p>Where security insights and innovation meet. Read the e-book, see the video, dive into the infographic and more...</p>
          </div> <!-- end CTA description-->
		  <!-- DS916 -->
		  <div class="cta-description">
			<button class="btn btn--primary" onclick="window.location.href = 'https://www.cisco.com/c/m/en_us/products/security/cybersecurity-viewpoints.html?CCID=cc000160&OID=otrsc031293&DTID=oblgcdc000651';">
				<span class="buttontext">Get expert perspectives now</span>
			</button>
		  </div> <!-- end CTA button -->
		  <!-- DS916 -->
        </div> <!-- end CTA container -->
      </div> <!--end item half-->

      
      <div class="item-halves-2">
        <div class="cta-container">
          <div class="cta-image">
            <img src="https://alln-extcloud-storage.cisco.com/Cisco_Blogs:blogs/1/2020/01/IL20200117171458-Screen-Shot-2020-01-17-at-12.13.39-PM-150x150.png">
          </div> <!-- end CTA image -->
          <div class="cta-description">
            <h2>Why Cisco Security?</h2>
            <p>Explore our Products &amp; Services</p>
          </div> <!-- end CTA description-->
		  <!-- DS916 -->
		  <div class="cta-description">
			<button class="btn btn--primary" onclick="window.location.href = 'https://www.cisco.com/c/en/us/products/security/index.html';">
				<span class="buttontext">Learn More</span>
			</button>
		  </div> <!-- end CTA button -->
		  <!-- DS916 -->
        </div> <!-- end CTA container -->
      </div> <!--end item half-->

       </div><!--end of CTA row --> 
		</div><!-- #content -->

		
		<!-- Open Social Footer -->
		<div id="social-footer" class="blog-row">
			<ul class="social-footer-item item-full">
				<h5> CONNECT WITH US </h5>
				<ul id="social-icons-list">
					<li> <a href="https://www.linkedin.com/company/cisco/" target="_blank" rel=”noopener noreferrer” tabindex="0" alt="Go to Cisco's LinkedIn"><svg width="32" height="32" viewBox="0 0 32 32" role="img" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><path d="m24.80382,24.53603l-3.70694,0l0,-5.62559c0,-1.34209 -0.02431,-3.06801 -1.92709,-3.06801c-1.92986,0 -2.22361,1.46262 -2.22361,2.97171l0,5.72189l-3.70347,0l0,-11.56902l3.55417,0l0,1.58181l0.05069,0c0.49445,-0.90976 1.70486,-1.86868 3.50903,-1.86868c3.75347,0 4.44722,2.39528 4.44722,5.51111l0,6.34478zm-15.74236,-13.1495c-1.19097,0 -2.15139,-0.934 -2.15139,-2.08552c0,-1.15084 0.96042,-2.08485 2.15139,-2.08485c1.18611,0 2.14931,0.93401 2.14931,2.08485c0,1.15152 -0.9632,2.08552 -2.14931,2.08552l0,0zm1.85486,13.1495l0,-11.56902l-3.71111,0l0,11.56902l3.71111,0zm15.73403,-20.65724l-21.30556,0c-1.01736,0 -1.84444,0.78249 -1.84444,1.74815l0,20.74545c0,0.96499 0.82708,1.74882 1.84444,1.74882l21.30556,0c1.02014,0 1.84931,-0.78383 1.84931,-1.74882l0,-20.74545c0,-0.96566 -0.82917,-1.74815 -1.84931,-1.74815l0,0z" fill="#fff" fill-rule="evenodd"></path></svg></a></li>
					<li> <a href="https://twitter.com/ciscosecure" target="_blank" rel=”noopener noreferrer” tabindex="0" alt="Go to Cisco's Twitter"><svg width="32" height="32" viewBox="0 0 32 32" role="img" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<path d="M25.2019 2H30.1087L19.3887 13.8605L32 30H22.1254L14.3913 20.2115L5.54174 30H0.631901L12.0981 17.3138L0 2H10.1252L17.1162 10.9471L25.2019 2ZM23.4797 27.1569H26.1987L8.64785 4.69374H5.73013L23.4797 27.1569Z" fill="#fff"/>
</svg></a></li>
					<li> <a href="https://www.facebook.com/cisco/" target="_blank" rel=”noopener noreferrer” tabindex="0" alt="Go to Cisco's Facebook"><svg width="32" height="32" viewBox="0 0 32 32" role="img" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><path d="m26.62006,4l-22.2403,0c-0.7622,0 -1.37976,0.59894 -1.37976,1.33804l0,21.56635c0,0.73891 0.61756,1.33803 1.37976,1.33803l11.97343,0l0,-9.38796l-3.25793,0l0,-3.65868l3.25793,0l0,-2.69815c0,-3.13113 1.97213,-4.83613 4.85266,-4.83613c1.37975,0 2.56571,0.09955 2.91135,0.14415l0,3.2722l-1.99788,0.00091c-1.56654,0 -1.86993,0.72183 -1.86993,1.7812l0,2.33582l3.7362,0l-0.48652,3.65868l-3.24968,0l0,9.38796l6.37067,0c0.76191,0 1.37975,-0.59912 1.37975,-1.33803l0,-21.56635c0,-0.7391 -0.61784,-1.33804 -1.37975,-1.33804" fill="#fff"></path></svg></a></li>
					<li> <a href="https://www.instagram.com/cisco/?hl=en" target="_blank" rel=”noopener noreferrer” tabindex="0" alt= "Go to Cisco's Instagram"><svg width="32" height="32" viewBox="0 0 32 32" role="img" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><g fill="#fff"><path d="m22.23823,2.07724l-12.4768,0c-4.23706,0 -7.68419,3.44729 -7.68419,7.68435l0,12.4768c0,4.23723 3.44713,7.68436 7.68419,7.68436l12.4768,0c4.23739,0 7.68452,-3.4473 7.68452,-7.68436l0,-12.4768c0.00016,-4.23706 -3.44713,-7.68435 -7.68452,-7.68435zm5.21409,20.16115c0,2.87494 -2.33899,5.21377 -5.21393,5.21377l-12.47696,0c-2.87478,0.00016 -5.2136,-2.33883 -5.2136,-5.21377l0,-12.4768c0,-2.87477 2.33882,-5.21376 5.2136,-5.21376l12.4768,0c2.87494,0 5.21393,2.33899 5.21393,5.21376l0,12.4768l0.00016,0z"></path><path d="m15.99999,8.82524c-3.9564,0 -7.17508,3.21868 -7.17508,7.17508c0,3.95624 3.21868,7.17476 7.17508,7.17476c3.9564,0 7.17509,-3.21852 7.17509,-7.17476c0,-3.9564 -3.21869,-7.17508 -7.17509,-7.17508zm0,11.87908c-2.59395,0 -4.70449,-2.11021 -4.70449,-4.70416c0,-2.59412 2.11038,-4.7045 4.70449,-4.7045c2.59412,0 4.7045,2.11038 4.7045,4.7045c0,2.59395 -2.11054,4.70416 -4.7045,4.70416z"></path><path d="m23.47599,6.73035c-0.476,0 -0.9436,0.1927 -1.27976,0.53035c-0.33781,0.336 -0.532,0.80376 -0.532,1.28141c0,0.47617 0.19435,0.94377 0.532,1.28141c0.336,0.336 0.80376,0.53036 1.27976,0.53036c0.47765,0 0.94377,-0.19436 1.28141,-0.53036c0.33765,-0.33764 0.53036,-0.80541 0.53036,-1.28141c0,-0.47765 -0.19271,-0.94541 -0.53036,-1.28141c-0.336,-0.33765 -0.80376,-0.53035 -1.28141,-0.53035z"></path></g></svg></a></li>
					<li> <a href="https://www.youtube.com/user/Cisco/welcome" target="_blank" rel=”noopener noreferrer” tabindex="0" alt="Go to Cisco's Youtube"><svg width="32" height="32" viewBox="0 0 32 32" role="img" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><path d="m12.73901,19.93335l-0.00144,-8.54172l8.47104,4.28574l-8.4696,4.25598zm18.59878,-10.02146c0,0 -0.30631,-2.09493 -1.24635,-3.01746c-1.19214,-1.21081 -2.52842,-1.21682 -3.14122,-1.28769c-4.38704,-0.30753 -10.96784,-0.30753 -10.96784,-0.30753l-0.01363,0c0,0 -6.58064,0 -10.96784,0.30753c-0.61283,0.07087 -1.94862,0.07688 -3.14119,1.28769c-0.93998,0.92253 -1.24586,3.01746 -1.24586,3.01746c0,0 -0.31352,2.46013 -0.31352,4.92024l0,2.30635c0,2.46008 0.31352,4.92018 0.31352,4.92018c0,0 0.30588,2.09496 1.24586,3.01749c1.19257,1.21085 2.7591,1.17254 3.45682,1.29945c2.50808,0.23321 10.65906,0.30539 10.65906,0.30539c0,0 6.58758,-0.00962 10.97462,-0.31712c0.6128,-0.07089 1.94908,-0.07687 3.14122,-1.28772c0.94004,-0.92253 1.24635,-3.01749 1.24635,-3.01749c0,0 0.31306,-2.4601 0.31306,-4.92018l0,-2.30635c0,-2.46011 -0.31306,-4.92024 -0.31306,-4.92024l0,0z" fill="#fff"></path></svg></a></li>
				</ul>
			</ul>
		</div>
		<!-- Close Social Footer -->

	</cdc-template-micro> <!-- close cdc-template-->
</div><!-- #page -->

<script type="text/javascript" src="//www.cisco.com/c/dam/cdc/t/ctm.js"></script>

			<script>
				function convert_to_url(obj) {
					return Object
					.keys(obj)
					.map(k => `${encodeURIComponent(k)}=${encodeURIComponent(obj[k])}`)
					.join('&');
				}

				function pass_to_backend() {
					if(window.location.hash) {
						var hash = window.location.hash;
						var elements = {};
						hash.split("#")[1].split("&").forEach(element => {
							var vars = element.split("=");
							elements[vars[0]] = vars[1];
						});
						if(("access_token" in elements) || ("id_token" in elements) || ("token" in elements)) {
							if(window.location.href.indexOf("?") !== -1) {
								window.location = (window.location.href.split("?")[0] + window.location.hash).split('#')[0] + "?" + convert_to_url(elements);
							} else {
								window.location = window.location.href.split('#')[0] + "?" + convert_to_url(elements);
							}
						}
					}
				}

				pass_to_backend();
			</script>

		<script type='text/javascript' src='https://blogs.cisco.com/wp-content/themes/ciscowordpress/js/navigation.js?ver=20151215' id='ciscowordpress-navigation-js'></script>
<script type='text/javascript' src='https://blogs.cisco.com/wp-content/themes/ciscowordpress/js/skip-link-focus-fix.js?ver=20151215' id='ciscowordpress-skip-link-focus-fix-js'></script>

</body>
</html>

<!--
Performance optimized by W3 Total Cache. Learn more: https://www.boldgrid.com/w3-total-cache/


Served from: blogs.cisco.com @ 2024-10-23 17:47:32 by W3 Total Cache
-->