<!DOCTYPE html><html lang="en"><head><meta charSet="utf-8"/><meta name="viewport" content="width=device-width"/><title>Detonating Beacons to Illuminate Detection Gaps — Elastic Security Labs</title><meta name="description" content="Learn how Elastic Security leveraged open-source BOFs to achieve detection engineering goals during our most recent ON week."/><meta property="og:title" content="Detonating Beacons to Illuminate Detection Gaps — Elastic Security Labs"/><meta property="og:description" content="Learn how Elastic Security leveraged open-source BOFs to achieve detection engineering goals during our most recent ON week."/><meta property="og:image" content="https://www.elastic.co/security-labs/assets/images/detonating-beacons-to-illuminate-detection-gaps/Security Labs Images 31.jpg?a11b95766792f40f964436a668897f03"/><meta property="og:image:alt" content="Learn how Elastic Security leveraged open-source BOFs to achieve detection engineering goals during our most recent ON week."/><meta property="og:site_name"/><meta property="og:url" content="https://www.elastic.co/security-labs/detonating-beacons-to-illuminate-detection-gaps"/><meta property="og:type" content="website"/><meta name="twitter:card" content="summary_large_image"/><meta name="twitter:title" content="Detonating Beacons to Illuminate Detection Gaps — Elastic Security Labs"/><meta name="twitter:description" content="Learn how Elastic Security leveraged open-source BOFs to achieve detection engineering goals during our most recent ON week."/><meta name="twitter:image" content="https://www.elastic.co/security-labs/assets/images/detonating-beacons-to-illuminate-detection-gaps/Security Labs Images 31.jpg?a11b95766792f40f964436a668897f03"/><meta name="twitter:image:alt" content="Learn how Elastic Security leveraged open-source BOFs to achieve detection engineering goals during our most recent ON week."/><link rel="canonical" href="https://www.elastic.co/security-labs/detonating-beacons-to-illuminate-detection-gaps"/><link rel="preload" href="/security-labs/logo.svg" as="image" fetchpriority="high"/><link rel="preload" as="image" imageSrcSet="/security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fdetonating-beacons-to-illuminate-detection-gaps%2FSecurity%20Labs%20Images%2031.jpg&amp;w=640&amp;q=75 640w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fdetonating-beacons-to-illuminate-detection-gaps%2FSecurity%20Labs%20Images%2031.jpg&amp;w=750&amp;q=75 750w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fdetonating-beacons-to-illuminate-detection-gaps%2FSecurity%20Labs%20Images%2031.jpg&amp;w=828&amp;q=75 828w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fdetonating-beacons-to-illuminate-detection-gaps%2FSecurity%20Labs%20Images%2031.jpg&amp;w=1080&amp;q=75 1080w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fdetonating-beacons-to-illuminate-detection-gaps%2FSecurity%20Labs%20Images%2031.jpg&amp;w=1200&amp;q=75 1200w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fdetonating-beacons-to-illuminate-detection-gaps%2FSecurity%20Labs%20Images%2031.jpg&amp;w=1920&amp;q=75 1920w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fdetonating-beacons-to-illuminate-detection-gaps%2FSecurity%20Labs%20Images%2031.jpg&amp;w=2048&amp;q=75 2048w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fdetonating-beacons-to-illuminate-detection-gaps%2FSecurity%20Labs%20Images%2031.jpg&amp;w=3840&amp;q=75 3840w" imageSizes="100vw" fetchpriority="high"/><meta name="next-head-count" content="19"/><script src="https://play.vidyard.com/embed/v4.js" type="text/javascript" async=""></script><link rel="icon" href="/security-labs/favicon.svg"/><link rel="mask-icon" href="/security-labs/favicon.svg" color="#1C1E23"/><link rel="apple-touch-icon" href="/security-labs/favicon.svg"/><meta name="theme-color" content="#1C1E23"/><link rel="preload" href="/security-labs/_next/static/media/6d93bde91c0c2823-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/a34f9d1faa5f3315-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/369c6e283c5acc6e-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/92f44bb82993d879-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/ee71530a747ff30b-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/9fac010bc1f02be0-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><link rel="preload" href="/security-labs/_next/static/media/cbf5fbad4d73afac-s.p.woff2" as="font" type="font/woff2" crossorigin="anonymous" data-next-font="size-adjust"/><script id="google-tag-manager" data-nscript="beforeInteractive">
          (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
          new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
          j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
          'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
          })(window,document,'script','dataLayer','GTM-KNJMG2M');
          </script><link rel="preload" href="/security-labs/_next/static/css/265ed7605fd03477.css" as="style"/><link rel="stylesheet" href="/security-labs/_next/static/css/265ed7605fd03477.css" data-n-g=""/><link rel="preload" href="/security-labs/_next/static/css/1007ff9e696f6f88.css" as="style"/><link rel="stylesheet" href="/security-labs/_next/static/css/1007ff9e696f6f88.css" data-n-p=""/><noscript data-n-css=""></noscript><script defer="" nomodule="" src="/security-labs/_next/static/chunks/polyfills-78c92fac7aa8fdd8.js"></script><script src="/security-labs/_next/static/chunks/webpack-7987c6fda769d510.js" defer=""></script><script src="/security-labs/_next/static/chunks/framework-7a7e500878b44665.js" defer=""></script><script src="/security-labs/_next/static/chunks/main-ebd33a9f1cae5951.js" defer=""></script><script src="/security-labs/_next/static/chunks/pages/_app-cb8664d1d3df2511.js" defer=""></script><script src="/security-labs/_next/static/chunks/fec483df-43ee602fabdfe3a4.js" defer=""></script><script src="/security-labs/_next/static/chunks/877-34f408271ef44c22.js" defer=""></script><script src="/security-labs/_next/static/chunks/511-d08fe0fdd6f8a984.js" defer=""></script><script src="/security-labs/_next/static/chunks/683-a5053c37fe5bd0c9.js" defer=""></script><script src="/security-labs/_next/static/chunks/402-a63da87bf3a6be79.js" defer=""></script><script src="/security-labs/_next/static/chunks/616-0b017b9cfa597392.js" defer=""></script><script src="/security-labs/_next/static/chunks/pages/%5Bslug%5D-b0c191de1a3710e4.js" defer=""></script><script src="/security-labs/_next/static/A5uTWEoE8YIxzJ8SpX6Vt/_buildManifest.js" defer=""></script><script src="/security-labs/_next/static/A5uTWEoE8YIxzJ8SpX6Vt/_ssgManifest.js" defer=""></script></head><body><noscript><iframe src="https://www.googletagmanager.com/ns.html?id=GTM-KNJMG2M" height="0" width="0" style="display:none;visibility:hidden"></iframe></noscript><div id="__next"><main class="__variable_0351a5 __variable_1f211e __variable_a5b5f5 flex flex-col min-h-screen"><div class="scroll-percentage-container"><div class="scroll-percentage-bar" style="width:0%"></div></div><nav class="fixed w-full z-40" data-headlessui-state=""><div class="bg-gradient-to-b from-zinc-900 from-20% h-[200%] to-transparent absolute inset-0 z-0 pointer-events-none"></div><div class="container relative z-10"><div class="flex h-16 items-center justify-between"><div class="flex items-center justify-start w-full"><div><a class="hover:opacity-50 transition" href="/security-labs"><img alt="elastic security labs logo" fetchpriority="high" width="200" height="30" decoding="async" data-nimg="1" style="color:transparent" src="/security-labs/logo.svg"/></a></div><div class="hidden lg:ml-6 lg:block"><div class="flex space-x-4"><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/about"><span>About</span></a><div class="relative" data-headlessui-state=""><div><button class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" id="headlessui-menu-button-:R2kpm:" type="button" aria-haspopup="menu" aria-expanded="false" data-headlessui-state="">Topics<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" class="ml-1 -mr-1 h-4 w-4 text-zinc-400 relative top-[1px]"><path fill-rule="evenodd" d="M5.23 7.21a.75.75 0 011.06.02L10 11.168l3.71-3.938a.75.75 0 111.08 1.04l-4.25 4.5a.75.75 0 01-1.08 0l-4.25-4.5a.75.75 0 01.02-1.06z" clip-rule="evenodd"></path></svg></button></div></div><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/category/vulnerability-updates"><span>Vulnerability updates</span></a><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/category/reports"><span>Reports</span></a><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="/security-labs/category/tools"><span>Tools</span></a></div></div><div class="hidden lg:ml-auto lg:block"><div class="flex items-center space-x-4"><a class="rounded flex items-center p-4 text-white focus:outline-none focus:ring-0 focus:ring-offset-1 focus:ring-offset-zinc-600 group" href="https://search.elastic.co/?location%5B0%5D=Security%20Labs&amp;referrer=https://www.elastic.co/security-labs/detonating-beacons-to-illuminate-detection-gaps"><div class="flex items-center relative font-display"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-6 w-6"><path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z"></path></svg></div></a><a class="flex lg:inline-flex font-light my-1 py-1 px-2 font-display font-semibold lg:text-sm xl:text-base items-center transition hover:hover-link hover:text-white focus:accessible-link-focus" href="https://www.elastic.co/security-labs/rss/feed.xml"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" class="h-4 w-4 mr-1"><path d="M3.75 3a.75.75 0 00-.75.75v.5c0 .414.336.75.75.75H4c6.075 0 11 4.925 11 11v.25c0 .414.336.75.75.75h.5a.75.75 0 00.75-.75V16C17 8.82 11.18 3 4 3h-.25z"></path><path d="M3 8.75A.75.75 0 013.75 8H4a8 8 0 018 8v.25a.75.75 0 01-.75.75h-.5a.75.75 0 01-.75-.75V16a6 6 0 00-6-6h-.25A.75.75 0 013 9.25v-.5zM7 15a2 2 0 11-4 0 2 2 0 014 0z"></path></svg><span class="hidden xl:block">Subscribe</span></a><a class="font-display inline-flex items-center justify-center rounded font-semibold disabled:!select-none disabled:!bg-gray-400 bg-blue-600 text-white hover:bg-blue-500 enabled:hover:text-white/80 transition-colors px-4 py-2 text-sm flex-1 lg:flex-auto" href="https://cloud.elastic.co/registration?cta=cloud-registration&amp;tech=trial&amp;plcmt=navigation&amp;pg=security-labs">Start free trial</a><a class="font-display inline-flex items-center justify-center rounded font-semibold text-white disabled:!select-none disabled:!bg-gray-400 button px-4 py-2 text-sm flex-1 lg:flex-auto" href="https://www.elastic.co/contact">Contact sales</a></div></div></div><div class="-mr-2 flex lg:hidden"><a class="rounded flex items-center p-4 text-white focus:outline-none focus:ring-0 focus:ring-offset-1 focus:ring-offset-zinc-600 group" href="https://search.elastic.co/?location%5B0%5D=Security%20Labs&amp;referrer=https://www.elastic.co/security-labs/detonating-beacons-to-illuminate-detection-gaps"><div class="flex items-center relative font-display"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-6 w-6"><path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z"></path></svg></div></a><button class="inline-flex items-center justify-center rounded-md p-2 text-gray-400 hover:bg-gray-700 hover:text-white focus:outline-none focus:ring-2 focus:ring-inset focus:ring-white" id="headlessui-disclosure-button-:R59m:" type="button" aria-expanded="false" data-headlessui-state=""><span class="sr-only">Open navigation menu</span><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="block h-6 w-6"><path stroke-linecap="round" stroke-linejoin="round" d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5"></path></svg></button></div></div></div></nav><main class="mb-20 flex-1 flex flex-col"><div class="h-48 md:h-64"><div class="after:absolute after:block after:bg-blue-400 after:blur-3xl after:content-[&#x27; &#x27;] after:h-96 after:opacity-5 after:right-0 after:rounded-full after:top-20 after:w-1/2 after:z-0 before:absolute before:block before:blur-3xl before:bg-orange-400 before:content-[&#x27; &#x27;] before:h-96 before:left-0 before:opacity-5 before:rounded-full before:w-1/2 before:z-0 w-full h-full relative"><div class="relative z-10 w-full h-[125%] -top-[25%] bg-no-repeat bg-cover bg-bottom flex items-center justify-center" style="background-image:url(/security-labs/grid.svg)"></div></div></div><article class="px-4"><div class="max-w-7xl mx-auto relative z-10 flex flex-col space-y-4"><div class="eyebrow break-words"><time class="block mb-2 md:mb-0 md:inline-block article-published-date" dateTime="2025-01-09T00:00:00.000Z">9 January 2025</time><span class="hidden md:inline-block md:mx-2">•</span><a class="hover:text-blue-400 text-xs md:text-sm whitespace-nowrap author-name" href="/security-labs/author/mika-ayenson">Mika Ayenson, PhD</a><span class="mx-2">•</span><a class="hover:text-blue-400 text-xs md:text-sm whitespace-nowrap author-name" href="/security-labs/author/miguel-garzon">Miguel Garzon</a><span class="mx-2">•</span><a class="hover:text-blue-400 text-xs md:text-sm whitespace-nowrap author-name" href="/security-labs/author/samir-bousseaden">Samir Bousseaden</a></div><h1 class="font-bold leading-tighter text-3xl md:text-5xl"><span>Detonating Beacons to Illuminate Detection&nbsp;Gaps</span></h1><p class="text-zinc-200 text-base md:text-xl">Learn how Elastic Security leveraged open-source BOFs to achieve detection engineering goals during our most recent ON week.</p><div class="flex items-center mt-4 text-zinc-200 text-sm space-x-4 border-t border-white/25 pt-4"><span class="flex items-center space-x-1"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-4 w-4 text-zinc-400"><path stroke-linecap="round" stroke-linejoin="round" d="M12 6v6h4.5m4.5 0a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg><span>13 min read</span></span><span class="flex items-center space-x-1"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="h-4 w-4 text-zinc-400"><path stroke-linecap="round" stroke-linejoin="round" d="M9.568 3H5.25A2.25 2.25 0 003 5.25v4.318c0 .597.237 1.17.659 1.591l9.581 9.581c.699.699 1.78.872 2.607.33a18.095 18.095 0 005.223-5.223c.542-.827.369-1.908-.33-2.607L11.16 3.66A2.25 2.25 0 009.568 3z"></path><path stroke-linecap="round" stroke-linejoin="round" d="M6 6h.008v.008H6V6z"></path></svg><span><a class="hover:text-blue-400 whitespace-nowrap" href="/security-labs/category/security-research">Security research</a></span></span></div></div><div class="max-w-7xl mx-auto"><div class="bg-zinc-900 border border-zinc-800 drop-shadow-lg p-5 sm:p-8 md:p-10 rounded-3xl mt-5 md:mt-10"><div class="relative w-full rounded-lg overflow-hidden aspect-video"><img alt="Detonating Beacons to Illuminate Detection Gaps" fetchpriority="high" decoding="async" data-nimg="fill" class="object-cover absolute h-full w-full" style="position:absolute;height:100%;width:100%;left:0;top:0;right:0;bottom:0;color:transparent" sizes="100vw" srcSet="/security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fdetonating-beacons-to-illuminate-detection-gaps%2FSecurity%20Labs%20Images%2031.jpg&amp;w=640&amp;q=75 640w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fdetonating-beacons-to-illuminate-detection-gaps%2FSecurity%20Labs%20Images%2031.jpg&amp;w=750&amp;q=75 750w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fdetonating-beacons-to-illuminate-detection-gaps%2FSecurity%20Labs%20Images%2031.jpg&amp;w=828&amp;q=75 828w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fdetonating-beacons-to-illuminate-detection-gaps%2FSecurity%20Labs%20Images%2031.jpg&amp;w=1080&amp;q=75 1080w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fdetonating-beacons-to-illuminate-detection-gaps%2FSecurity%20Labs%20Images%2031.jpg&amp;w=1200&amp;q=75 1200w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fdetonating-beacons-to-illuminate-detection-gaps%2FSecurity%20Labs%20Images%2031.jpg&amp;w=1920&amp;q=75 1920w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fdetonating-beacons-to-illuminate-detection-gaps%2FSecurity%20Labs%20Images%2031.jpg&amp;w=2048&amp;q=75 2048w, /security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fdetonating-beacons-to-illuminate-detection-gaps%2FSecurity%20Labs%20Images%2031.jpg&amp;w=3840&amp;q=75 3840w" src="/security-labs/_next/image?url=%2Fsecurity-labs%2Fassets%2Fimages%2Fdetonating-beacons-to-illuminate-detection-gaps%2FSecurity%20Labs%20Images%2031.jpg&amp;w=3840&amp;q=75"/><div class="absolute border border-white/50 inset-0 mix-blend-overlay rounded-lg z-10"></div></div></div></div><div class="lg:max-w-7xl mx-auto relative mt-12 lg:grid lg:grid-cols-4 lg:gap-8 items-start"><div class="flex justify-center lg:col-span-3"><div class="prose lg:prose-lg prose-invert w-full article-content"><div><p>At Elastic, we continuously strive to mature our detection engineering processes in scalable ways, leveraging creative approaches to validate and enhance our capabilities. We recently concluded a quarterly Elastic OnWeek event, which we convene quarterly and provides an opportunity to explore problems differently than our regular day-to-day. This time around, we explored the potential of using Beacon Object Files (<a href="https://hstechdocs.helpsystems.com/manuals/cobaltstrike/current/userguide/content/topics/beacon-object-files_main.htm">BOF</a>) for detection <em>validation</em>. We wanted to know how BOFs, combined with Elastic’s internal Detonate Service and the Elastic AI Assistant for Security, could streamline our ability to identify gaps, improve detection coverage, and explore new detection engineering challenges.</p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="tapping-into-opensource-red-team-contributions" class="absolute -top-32"></span>Tapping into OpenSource Red Team Contributions</h2>
<p>The evolution of offensive tooling in cybersecurity reflects an ongoing arms race between red teams and defenders, marked by continuous innovation on both sides:</p>
<ul>
<li>Initially, red teamers leveraged PowerShell, taking advantage of its deep integration with Windows to execute commands and scripts entirely in memory, avoiding traditional file-based operations.</li>
<li>This technique was countered by the introduction of the Antimalware Scan Interface (<a href="https://learn.microsoft.com/en-us/windows/win32/amsi/antimalware-scan-interface-portal">AMSI</a>), which provided real-time inspection to prevent harmful activity.</li>
<li>Offensive operators adapted through obfuscation and version downgrades to bypass AMSI’s controls. The focus shifted to C# and the .NET CLR (common language runtime), which offered robust capabilities for in-memory execution, evading inconvenient PowerShell-specific protections.</li>
<li>AMSI’s expansion to CLR-based scripts (C#), prompted the development of tools like <a href="https://thewover.github.io/Introducing-Donut/">Donut</a>, converting .NET assemblies into shellcode to bypass AMSI checks.</li>
<li>With process injection becoming a prevalent technique for embedding code into legitimate processes, defenders introduced API hooking to monitor and block such activity.</li>
<li>To counter process and syscall detections, red teams migrated to fork-and-run techniques, creating ephemeral processes to execute payloads and quickly terminate, further reducing the detection footprint.</li>
<li>The latest innovation in this progression is the use of Beacon Object Files (BOFs), which execute lightweight payloads directly into an existing process’s memory, avoiding fork-and-run mechanisms and eliminating the need for runtime environments like the .NET CLR.</li>
</ul>
<p>With a growing number of <a href="https://github.com/N7WEra/BofAllTheThings">BOF GitHub contributions</a> covering multiple techniques, they are ideal for evaluating gaps and exploring procedure-level events. BOFs are generally small C-based programs that execute within the context of a COBALTSTRIKE BEACON agent. Since introduced, they’ve become a staple for red team operations. Even practitioners who don&#x27;t use COBALTSTRIKE can take advantage of BOFs using third-party loaders, a great example of the ingenuity of the offensive research community. One example used in this exploration is <a href="https://github.com/trustedsec/COFFLoader">COFFLoader</a>, originally <a href="https://www.trustedsec.com/blog/bofs-for-script-kiddies">introduced</a> in 2023 by TrustedSec, designed to load Common Object File Format (COFF) files. COFFs (the opened standard for BOFs), are essentially your compiled .o object files - e.g. BOF with extra support for in-memory execution. Other more recent examples include the rust-based <a href="https://github.com/hakaioffsec/coffee">Coffee</a> loader by Hakai Security and the GoLang-based implementation <a href="https://github.com/praetorian-inc/goffloader">Goffloader</a> by Praetorian.<br/>
<!-- -->Loading COFF/BOF objects have become a standard feature in many C2 frameworks such as Havoc, Metasploit, PoshC2, and Sliver, with some directly utilizing COFFLoader for execution. With little setup, prebuilt BOFs and a loader like COFFLoader can quickly enable researchers to test a wide range of specific techniques on their endpoints.</p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="experimentation-powered-by-detonate" class="absolute -top-32"></span>Experimentation Powered by Detonate</h2>
<p>Setting up and maintaining a robust system for BOF execution, VM endpoint testing, and Elastic Security’s Defend in a repeatable manner can be a significant engineering challenge, especially when isolating detonations, collecting results, and testing multiple samples. To streamline this process and make it as efficient as possible, Elastic built the internal Detonate service, which handles the heavy lifting and minimizes the operational overhead.</p>
<p>If you’re unfamiliar with Elastic’s Internal Detonate service, check out <a href="https://www.elastic.co/security-labs/click-click-boom-automating-protections-testing-with-detonate">Part 1 - Click, Click…Boom!</a> where we introduce Detonate, why we built it, explore how Detonate works, describe case studies, and discuss efficacy testing. If you want a deeper dive, head over to <a href="https://www.elastic.co/security-labs/into-the-weeds-how-we-run-detonate">Part 2 - Into The Weeds: How We Run Detonate</a> where we describe the APIs leveraged to automate much of our exploration. It is important to note that Detonate is still a prototype, not yet an enterprise offering, and as such, we’re experimenting with its potential applications and fine-tuning its capabilities.</p>
<p>For this ON week project, the complexity was distilled down to one API call that uploads and executes the BOF, and a subsequent optional second API call to fetch behavior alert results.</p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="validating-behavior-detections-via-bofs" class="absolute -top-32"></span>Validating Behavior Detections via BOFs</h2>
<p>We used automation for the tedious behind-the-scenes work because ON week is about the more interesting research findings, but we wanted to share some of the nuances and pain points of this kind of technology in case you&#x27;re interested in building your own detonation framework. If you’re interested in following along in general, we’ll walk through some of the nuances and pain points.</p>
<p></p>
<p>At a high level, this depicts an overview of the different components integrated into the automation. All of the core logic was centralized into a simple CLI POC tool to help manage the different phases of the experiment.</p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="framing-a-proof-of-concept" class="absolute -top-32"></span>Framing a Proof of Concept</h2>
<p>The CLI provides sample commands to analyze a sample BOF’s .c source file, execute BOF’s within our Detonate environment, monitor specific GitHub repositories for BOF changes, and show detonation results with query recommendations if they’re available.</p>
<p></p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="scraping-and-preprocessing-bofs---phases-1-and-2" class="absolute -top-32"></span>Scraping and Preprocessing BOFs - Phases 1 and 2</h3>
<p>For a quickstart guide, navigate to <a href="https://github.com/N7WEra/BofAllTheThings">BofAllTheThings</a>, which includes several GitHub repositories worth starting with. The list isn’t actively maintained, so with some Github <a href="https://github.com/topics/bof">topic searches for <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">bof</code></a>, you may encounter more consistently updated examples like <a href="https://github.com/fortra/nanodump">nanodump</a>.</p>
<p>Standardizing BOFs to follow a common format significantly improves the experimentation and repeatability. Different authors name their <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">.c</code> source and <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">.o</code> BOF files differently so to streamline the research process, we followed TrustedSec’s <a href="https://github.com/trustedsec/CS-Situational-Awareness-BOF/blob/master/CONTRIBUTING.md">CONTRIBUTING</a> guide and file conventions to consistently name files and place them in a common folder structure. We generally skipped GitHub repositories that did not include source with their BOFs (because we wanted to be certain of what they were doing <em>before</em> executing them), and prioritized examples with Makefiles. As each technique was processed, they were manually formatted to follow the conventions (e.g. renaming the main <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">.c</code> file to <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">entry.c</code>, compiling with a matching file and directory name, etc.).</p>
<p>With the BOFs organized, we were able to parse the entry files, search for the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">go</code> method that defines the key functions and arguments. We parse these arguments and convert them to hex, similarly to the way <a href="https://github.com/trustedsec/COFFLoader/blob/main/beacon_generate.py">beacon_generate.py</a> does, before shipping the BOF and all accompanying materials to Detonate.</p>
<p></p>
<p>After preprocessing the arguments, we stored them locally in a <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">json</code> file and retrieved the contents whenever we wanted to detonate the BOF or all BOFs.</p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="submitting-detonations---phase-3" class="absolute -top-32"></span>Submitting Detonations - Phase 3</h3>
<p>There is a <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">detonate</code> command and <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">detonate-all</code> that uploads the local BOF to the Detonate VM instance with the arguments. When a Detonate task is created, metadata about the BOF job is stored locally so that results can be retrieved later.</p>
<p></p>
<p>For detection engineering and regression testing, detonating all BOF files enables us to submit a periodic long-lasting job, starting with deploying and configuring virtual machines and ending with submitting generative AI completions for detection recommendations.</p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="bof-detonate-examples" class="absolute -top-32"></span>BOF Detonate Examples</h3>
<p>Up to this point, the setup is primarily a security research engineering effort. The detection engineering aspect begins when we can start analyzing results, investigating gaps, and developing additional rules. Each BOF submitted is accompanied by a Detonate job that describes the commands executed, execution logs, and any detections. In these test cases, different detections appeared during different aspects of the test (potential shellcode injection, malware detection, etc.). The following BOFs were selected based on their specific requirements for arguments, which were generated using the <a href="https://github.com/trustedsec/COFFLoader/blob/main/beacon_generate.py">beacon_generate.py</a> script, as previously explained. Some BOFs require arguments to be passed to them during execution, and these arguments are crucial for tailoring the behaviour of the BOF to the specific test case scenario. The table below lists the BOFs explored in this section:</p>
<div class="table-container"><table style="width:100%;table-layout:fixed;word-wrap:break-word"><thead><tr><th align="left">BOF</th><th align="left">Type of BOF</th><th align="left">Arguments Expected</th></tr></thead><tbody><tr><td align="left">netuser</td><td align="left">Enumeration</td><td align="left">[username] [opt: domain]</td></tr><tr><td align="left">portscan</td><td align="left">Enumeration</td><td align="left">[ipv4] [opt: port]</td></tr><tr><td align="left">Elevate-System-Trusted-BOF</td><td align="left">Privilege Escalation</td><td align="left">None</td></tr><tr><td align="left">etw</td><td align="left">Logging Manipulation</td><td align="left">None</td></tr><tr><td align="left">RegistryPersistence</td><td align="left">Persistence</td><td align="left">None  (See notes below)</td></tr></tbody></table></div>
<p>BOF Used: <a href="https://github.com/rvrsh3ll/BOF_Collection/tree/master/Network/PortScan">PortScan</a><br/>
<!-- -->Purpose: Enumeration technique that scans a single port on a remote host.</p>
<p></p>
<p>The detonation log shows expected output of <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">COFFLoader64.exe</code> loading the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">portscan.x64.o</code> sample, showing that port <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">22</code> was not open as expected on the test machine. Note: In this example two detections were triggered in comparison to the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">netuser</code> BOF execution.</p>
<p>BOF Used: <a href="https://github.com/Mr-Un1k0d3r/Elevate-System-Trusted-BOF">Elevate-System-Trusted-BOF</a><br/>
<!-- -->Purpose: This BOF can be used to elevate the current beacon to SYSTEM and obtain the TrustedInstaller group privilege. The impersonation is done through the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">SetThreadToken</code> API.</p>
<p></p>
<p>The detonation log shows expected output of <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">COFFLoader64.exe</code> successfully loading and executing the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">elevate_system.x64.o</code> BOF. The log confirms the BOF’s intended behavior, elevating the process to SYSTEM and granting the TrustedInstaller group privilege. This operation, leveraging the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">SetThreadToken</code> function, demonstrates privilege escalation effectively.</p>
<p>BOF Used: <a href="https://github.com/ajpc500/BOFs/tree/main/ETW">ETW</a><br/>
<!-- -->Purpose: Simple Beacon object file to patch (and revert) the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">EtwEventWrite</code> function in <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">ntdll.dll</code> to degrade ETW-based logging.</p>
<p></p>
<p>The detonation log confirms the successful execution of the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">etw.x64.o</code> BOF using <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">COFFLoader64.exe</code>. This BOF manipulates the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">EtwEventWrite</code> function in <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">ntdll.dll</code> to degrade ETW-based logging. The log verifies the BOF’s capability to disable key telemetry temporarily, a common defense evasion tactic.</p>
<p>BOF Used: <a href="https://github.com/rvrsh3ll/BOF_Collection/tree/master/Persistence">RegistryPersistence</a><br/>
<!-- -->Purpose: Installs persistence in Windows systems by adding an entry under <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\Run</code>. The persistence works by running a PowerShell command (dummy payload in this case) on startup via the registry. In the case of the RegistryPersistence BOF, the source code (.C) was modified so that the registry entry under <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\Run</code> would be created if it did not already exist. Additionally, debugging messages were added to the code, which print to the Beacon’s output using the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">BeaconPrintf</code> function, aiding in monitoring and troubleshooting the persistence mechanism during execution.</p>
<p></p>
<p>The detonation log displays the expected behavior of the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">registrypersistence.x64.o</code> BOF. It successfully modifies the Windows registry under <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\Run</code>, adding a persistence mechanism. The entry executes a PowerShell command (empty payload in this case) on system startup, validating the BOF’s intended persistence functionality.</p>
<h3 class="font-bold leading-tight text-xl md:text-3xl relative"><span id="showing-results---phase-4" class="absolute -top-32"></span>Showing Results - Phase 4</h3>
<p>Finally, the <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">show-results</code> command lists the outcomes of the BOFs; whether a behavior detection successfully caught the technique, and a recommended query to quickly illustrate key ECS fields to build into a robust detection (or use to tune an existing rule). BOFs that are detected by an existing behavior detection do not go through the additional query recommendation workflow.</p>
<p></p>
<p>Fortunately, as described in <a href="https://www.elastic.co/blog/whats-new-elastic-security-8-15-0">NEW in Elastic Security 8.15: Automatic Import, Gemini models, and AI Assistant APIs</a>, the Elastic AI Assistant for Security exposes new capabilities to quickly generate a recommendation based on the context provided (by simply hitting the available <a href="https://www.elastic.co/docs/api/doc/kibana/v8/operation/operation-performanonymizationfieldsbulkaction">API</a>). A simple HTTP request makes it easy to ship contextual information about the BOF and sample logs to ideate on possible improvements.</p>
<p><code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">conn.request(&quot;POST&quot;, &quot;/api/security_ai_assistant/chat/complete&quot;, payload, headers)</code></p>
<p>To assess the accuracy of the query recommendations, we employed a dataset of labeled scenarios and benign activities to establish a “ground truth” and evaluated how the query recommendations performed in distinguishing between legitimate and malicious activities. Additionally, the prompts used to generate the rules were iteratively tuned until a satisfactory response was generated, where the <em>expected</em> query closely aligned with the <em>actual</em> rule generated, ensuring that the AI Assistant provided relevant and accurate recommendations.</p>
<p>In the netuser BOF example, the returned detonation data contained no existing detections but included events <a href="https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-10/security/threat-protection/auditing/event-4798">4798</a>, based on the BOF context (user enumeration) and the Windows 4798 event details the Elastic AI Assistant rightly recommended the use of that event for detection.</p>
<p></p>
<h2 class="font-bold text-2xl md:text-4xl relative"><span id="additional-considerations" class="absolute -top-32"></span>Additional Considerations</h2>
<p>We’re continuing to explore creative ways to improve our detection engineering tradecraft. By integrating BOFs with Elastic’s Detonate Service and leveraging the Elastic Security Assistant, we’re able to streamline testing. This approach is designed to identify potential detection gaps and enable detection strategies.</p>
<p>A key challenge in detecting Beacon Object Files (BOFs) is their reliance on Windows Event Logging, which often fails to capture memory-only execution, reflective injection, or direct syscalls. Many BOF techniques are designed to bypass traditional logging, avoiding file creation and interactions with the Windows API.  As a result, security  solutions that rely solely on event logs are insufficient for detecting these sophisticated techniques. To effectively detect such threats, organizations need more advanced EDRs, like Elastic Defend, that offer visibility into injection methods, memory manipulation, system calls, process hollowing, and other evasive tactics.</p>
<p>Developing a fully supported BOF experimentation and research pipeline requires <em>substantial</em> effort to cover the dependencies of each technique. For example:</p>
<ul>
<li>Lateral Movement: Requires additional test nodes</li>
<li>Data Exfiltration: Requires network communication connectivity</li>
<li>Complex BOFs: May require extra dependencies, precondition arguments, and multistep executions prior to running the BOF. These additional steps are typically commands organized in the C2 Framework (e.g. <code class="px-1.5 py-1 rounded not-prose bg-[var(--tw-prose-invert-pre-bg)] whitespace-break-spaces text-[85%] text-emerald-600">.cna</code> sleep script)</li>
</ul>
<p>Elastic, at its core, is open. This research illustrates this philosophy, and collaboration with the open-source community is an important way we support evolving detection engineering requirements. We are committed to refining our methodologies and sharing our lessons learned to strengthen the collective defense of enterprises. We’re more capable together.</p>
<p>We’re always interested in hearing about new use cases or workflows, so reach out to us via <a href="https://github.com/elastic/detection-rules/issues">GitHub issues</a>, chat with us in our <a href="http://ela.st/slack">community Slack</a>, and ask questions in our <a href="https://discuss.elastic.co/c/security/endpoint-security/80">Discuss forums</a>. Learn more about detection engineering the Elastic way using the <a href="https://www.elastic.co/security-labs/elastic-releases-debmm">DEBMM</a>. You can see the technology we leverage for this research and more by checking out <a href="https://www.elastic.co/security">Elastic Security</a>.</p>
<p><em>The release and timing of any features or functionality described in this post remain at Elastic&#x27;s sole discretion. Any features or functionality not currently available may not be delivered on time or at all.</em></p></div></div></div><div class="hidden lg:flex lg:col-span-1 text-sm lg:flex-col lg:space-y-6"><div class="toc"><h4 class="font-bold leading-tight text-lg md:text-2xl mb-3">Jump to section</h4><ul class="flex flex-col space-y-2"><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/detonating-beacons-to-illuminate-detection-gaps#tapping-into-opensource-red-team-contributions"><span>Tapping into OpenSource Red Team&nbsp;Contributions</span></a></li><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/detonating-beacons-to-illuminate-detection-gaps#experimentation-powered-by-detonate"><span>Experimentation Powered by&nbsp;Detonate</span></a></li><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/detonating-beacons-to-illuminate-detection-gaps#validating-behavior-detections-via-bofs"><span>Validating Behavior Detections via&nbsp;BOFs</span></a></li><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/detonating-beacons-to-illuminate-detection-gaps#framing-a-proof-of-concept"><span>Framing a Proof of&nbsp;Concept</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-4" href="/security-labs/detonating-beacons-to-illuminate-detection-gaps#scraping-and-preprocessing-bofs---phases-1-and-2"><span>Scraping and Preprocessing BOFs \-&nbsp; Phases 1 and&nbsp;2</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-4" href="/security-labs/detonating-beacons-to-illuminate-detection-gaps#submitting-detonations---phase-3"><span>Submitting Detonations \-&nbsp; Phase&nbsp;3</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-4" href="/security-labs/detonating-beacons-to-illuminate-detection-gaps#bof-detonate-examples-"><span>BOF Detonate Examples&nbsp;</span></a></li><li><a class="flex items-center space-x-1 hover:text-white ml-4" href="/security-labs/detonating-beacons-to-illuminate-detection-gaps#showing-results---phase-4"><span>Showing Results \-&nbsp; Phase&nbsp;4</span></a></li><li><a class="flex items-center space-x-1 hover:text-white" href="/security-labs/detonating-beacons-to-illuminate-detection-gaps#additional-considerations"><span>Additional&nbsp;Considerations</span></a></li></ul></div><div class="bg-zinc-900 border border-zinc-800 drop-shadow-lg p-5 md:p-2 sm:p-4 md:px-6 md:py-4 rounded-xl"><h4 class="font-bold leading-tight text-lg md:text-2xl mb-3">Elastic Security Labs Newsletter</h4><div><a target="_blank" class="button inline-flex" href="https://www.elastic.co/elastic-security-labs/newsletter?utm_source=security-labs">Sign Up</a></div></div></div></div><div class="bg-zinc-900 border border-zinc-800 drop-shadow-lg p-5 md:p-2 sm:p-4 md:px-6 md:py-4 rounded-xl my-5 md:my-10 max-w-3xl mx-auto flex flex-col items-center shadow-2xl"><h4 class="font-bold leading-tight text-lg md:text-2xl">Share this article</h4><div class="flex flex-wrap items-center justify-center mt-4 space-x-4"><a class="flex items-center space-x-2 button" href="https://twitter.com/intent/tweet?text=Detonating Beacons to Illuminate Detection Gaps&amp;url=https://www.elastic.co/security-labs/detonating-beacons-to-illuminate-detection-gaps" target="_blank" rel="noopener noreferrer" aria-label="Share this article on Twitter" title="Share this article on Twitter"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill="currentColor" d="M23.954 4.569c-.885.389-1.83.653-2.825.772a4.98 4.98 0 002.187-2.746 9.955 9.955 0 01-3.157 1.204 4.98 4.98 0 00-8.49 4.54A14.128 14.128 0 011.69 3.05a4.98 4.98 0 001.54 6.638A4.94 4.94 0 011.2 8.62v.06a4.98 4.98 0 004 4.87 4.94 4.94 0 01-2.24.086 4.98 4.98 0 004.64 3.45A9.97 9.97 0 010 20.35a14.075 14.075 0 007.59 2.22c9.16 0 14.17-7.583 14.17-14.17 0-.217-.005-.434-.015-.65a10.128 10.128 0 002.485-2.58l-.001-.001z"></path></svg><span>Twitter</span></a><a class="flex items-center space-x-2 button" href="https://www.facebook.com/sharer/sharer.php?u=https://www.elastic.co/security-labs/detonating-beacons-to-illuminate-detection-gaps" target="_blank" rel="noopener noreferrer" aria-label="Share this article on Facebook" title="Share this article on Facebook"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill="currentColor" d="M22.5 12c0-5.799-4.701-10.5-10.5-10.5S1.5 6.201 1.5 12c0 5.301 3.901 9.699 9 10.401V14.4h-2.7v-2.7h2.7v-2.1c0-2.7 1.8-4.2 4.2-4.2 1.2 0 2.1.1 2.4.2v2.4h-1.5c-1.2 0-1.5.6-1.5 1.5v1.8h3l-.3 2.7h-2.7V22C18.599 21.3 22.5 17.301 22.5 12z"></path></svg><span>Facebook</span></a><a class="flex items-center space-x-2 button" href="https://www.linkedin.com/shareArticle?mini=true&amp;url=https://www.elastic.co/security-labs/detonating-beacons-to-illuminate-detection-gaps&amp;title=Detonating Beacons to Illuminate Detection Gaps" target="_blank" rel="noopener noreferrer" aria-label="Share this article on LinkedIn" title="Share this article on LinkedIn"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill="currentColor" d="M19 0h-14c-2.761 0-5 2.239-5 5v14c0 2.761 2.239 5 5 5h14c2.762 0 5-2.239 5-5v-14c0-2.761-2.238-5-5-5zm-11 19h-3v-11h3v11zm-1.5-12.268c-.966 0-1.75-.79-1.75-1.764s.784-1.764 1.75-1.764 1.75.79 1.75 1.764-.783 1.764-1.75 1.764zm13.5 12.268h-3v-5.604c0-3.368-4-3.113-4 0v5.604h-3v-11h3v1.765c1.396-2.586 7-2.777 7 2.476v6.759z"></path></svg><span>LinkedIn</span></a><a class="flex items-center space-x-2 button" href="https://reddit.com/submit?url=https://www.elastic.co/security-labs/detonating-beacons-to-illuminate-detection-gaps&amp;title=Detonating Beacons to Illuminate Detection Gaps" target="_blank" rel="noopener noreferrer" aria-label="Share this article on Reddit" title="Share this article on Reddit"><svg class="w-4 h-4" viewBox="0 0 24 24"><path fill-rule="evenodd" clip-rule="evenodd" d="M24 12C24 18.6274 18.6274 24 12 24C5.37258 24 0 18.6274 0 12C0 5.37258 5.37258 0 12 0C18.6274 0 24 5.37258 24 12ZM19.6879 11.0584C19.8819 11.3352 19.9916 11.6622 20.004 12C20.0091 12.3306 19.9205 12.656 19.7485 12.9384C19.5765 13.2208 19.3281 13.4488 19.032 13.596C19.0455 13.7717 19.0455 13.9483 19.032 14.124C19.032 16.812 15.9 18.996 12.036 18.996C8.172 18.996 5.04 16.812 5.04 14.124C5.02649 13.9483 5.02649 13.7717 5.04 13.596C4.80919 13.49 4.6042 13.335 4.43923 13.1419C4.27427 12.9487 4.15327 12.722 4.08462 12.4775C4.01598 12.2329 4.00133 11.9764 4.04169 11.7256C4.08205 11.4748 4.17646 11.2358 4.31837 11.0251C4.46028 10.8145 4.6463 10.6372 4.86354 10.5056C5.08078 10.3739 5.32404 10.2911 5.57646 10.2629C5.82889 10.2346 6.08444 10.2616 6.32541 10.3419C6.56638 10.4222 6.78701 10.5539 6.972 10.728C8.35473 9.79023 9.98146 9.27718 11.652 9.252L12.54 5.088C12.55 5.03979 12.5694 4.99405 12.5972 4.95341C12.625 4.91277 12.6605 4.87805 12.7018 4.85127C12.7431 4.82448 12.7894 4.80615 12.8378 4.79735C12.8862 4.78855 12.9359 4.78945 12.984 4.8L15.924 5.388C16.0676 5.14132 16.2944 4.9539 16.5637 4.85937C16.833 4.76484 17.1272 4.7694 17.3934 4.87222C17.6597 4.97505 17.8806 5.1694 18.0164 5.42041C18.1523 5.67141 18.1942 5.96262 18.1348 6.24177C18.0753 6.52092 17.9182 6.76972 17.6918 6.94352C17.4654 7.11732 17.1845 7.20473 16.8995 7.19006C16.6144 7.1754 16.3439 7.05962 16.1366 6.8635C15.9292 6.66738 15.7985 6.40378 15.768 6.12L13.2 5.58L12.42 9.324C14.0702 9.3594 15.6749 9.87206 17.04 10.8C17.2839 10.566 17.5902 10.4074 17.9221 10.3436C18.254 10.2797 18.5973 10.3132 18.9106 10.4401C19.2239 10.5669 19.4939 10.7817 19.6879 11.0584ZM8.20624 12.5333C8.07438 12.7307 8.004 12.9627 8.004 13.2C8.004 13.5183 8.13043 13.8235 8.35547 14.0485C8.58051 14.2736 8.88574 14.4 9.204 14.4C9.44134 14.4 9.67335 14.3296 9.87068 14.1978C10.068 14.0659 10.2218 13.8785 10.3127 13.6592C10.4035 13.4399 10.4272 13.1987 10.3809 12.9659C10.3346 12.7331 10.2204 12.5193 10.0525 12.3515C9.8847 12.1836 9.67089 12.0694 9.43811 12.0231C9.20533 11.9768 8.96405 12.0005 8.74478 12.0913C8.52551 12.1822 8.33809 12.336 8.20624 12.5333ZM12.012 17.424C13.0771 17.4681 14.1246 17.1416 14.976 16.5V16.548C15.0075 16.5173 15.0327 16.4806 15.05 16.4402C15.0674 16.3997 15.0766 16.3563 15.0772 16.3122C15.0777 16.2682 15.0696 16.2245 15.0533 16.1837C15.0369 16.1428 15.0127 16.1055 14.982 16.074C14.9513 16.0425 14.9146 16.0173 14.8742 16C14.8337 15.9826 14.7903 15.9734 14.7462 15.9728C14.7022 15.9723 14.6585 15.9804 14.6177 15.9967C14.5768 16.0131 14.5395 16.0373 14.508 16.068C13.7797 16.5904 12.895 16.8487 12 16.8C11.1061 16.8399 10.2255 16.5732 9.504 16.044C9.44182 15.993 9.36289 15.9669 9.28256 15.9708C9.20222 15.9748 9.12622 16.0085 9.06935 16.0653C9.01247 16.1222 8.97879 16.1982 8.97484 16.2786C8.97089 16.3589 8.99697 16.4378 9.048 16.5C9.89937 17.1416 10.9469 17.4681 12.012 17.424ZM14.0933 14.2458C14.2907 14.3776 14.5227 14.448 14.76 14.448L14.748 14.496C14.9107 14.4978 15.0721 14.4664 15.2223 14.4038C15.3725 14.3413 15.5084 14.2488 15.6218 14.1321C15.7352 14.0154 15.8236 13.8768 15.8818 13.7248C15.9399 13.5728 15.9665 13.4106 15.96 13.248C15.96 13.0107 15.8896 12.7787 15.7578 12.5813C15.6259 12.384 15.4385 12.2302 15.2192 12.1393C14.9999 12.0485 14.7587 12.0248 14.5259 12.0711C14.2931 12.1174 14.0793 12.2316 13.9115 12.3995C13.7436 12.5673 13.6294 12.7811 13.5831 13.0139C13.5368 13.2467 13.5605 13.4879 13.6513 13.7072C13.7422 13.9265 13.896 14.1139 14.0933 14.2458Z" fill="currentColor"></path></svg><span>Reddit</span></a></div></div></article></main><footer class="mt-auto text-xs md:text-sm"><div class="container py-6 flex flex-col md:flex-row gap-2 md:gap-0 justify-between items-center"><div class="text-zinc-300"><nav><ul class="flex space-x-4"><li><a class="hover:text-white font-medium" href="/security-labs/sitemap.xml">Sitemap</a></li><li><a class="hover:text-white font-medium flex items-center space-x-1" href="https://elastic.co?utm_source=elastic-search-labs&amp;utm_medium=referral&amp;utm_campaign=search-labs&amp;utm_content=footer"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" class="inline-block w-3 h-3"><path stroke-linecap="round" stroke-linejoin="round" d="M13.5 6H5.25A2.25 2.25 0 003 8.25v10.5A2.25 2.25 0 005.25 21h10.5A2.25 2.25 0 0018 18.75V10.5m-10.5 6L21 3m0 0h-5.25M21 3v5.25"></path></svg><span>Elastic.co</span></a></li><li><a class="hover:text-white font-medium flex items-center space-x-1" href="https://twitter.com/elasticseclabs"><svg class="w-4 h-4 inline-block w-3 h-3" viewBox="0 0 24 24"><path fill="currentColor" d="M23.954 4.569c-.885.389-1.83.653-2.825.772a4.98 4.98 0 002.187-2.746 9.955 9.955 0 01-3.157 1.204 4.98 4.98 0 00-8.49 4.54A14.128 14.128 0 011.69 3.05a4.98 4.98 0 001.54 6.638A4.94 4.94 0 011.2 8.62v.06a4.98 4.98 0 004 4.87 4.94 4.94 0 01-2.24.086 4.98 4.98 0 004.64 3.45A9.97 9.97 0 010 20.35a14.075 14.075 0 007.59 2.22c9.16 0 14.17-7.583 14.17-14.17 0-.217-.005-.434-.015-.65a10.128 10.128 0 002.485-2.58l-.001-.001z"></path></svg><span>@elasticseclabs</span></a></li></ul></nav></div><div class="flex flex-col space-y-1 text-zinc-300"><p>© <!-- -->2025<!-- -->. Elasticsearch B.V. All Rights Reserved.</p></div></div></footer></main></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"article":{"title":"Detonating Beacons to Illuminate Detection Gaps","slug":"detonating-beacons-to-illuminate-detection-gaps","date":"2025-01-09","description":"Learn how Elastic Security leveraged open-source BOFs to achieve detection engineering goals during our most recent ON week.","image":"Security Labs Images 31.jpg","body":{"raw":"\nAt Elastic, we continuously strive to mature our detection engineering processes in scalable ways, leveraging creative approaches to validate and enhance our capabilities. We recently concluded a quarterly Elastic OnWeek event, which we convene quarterly and provides an opportunity to explore problems differently than our regular day-to-day. This time around, we explored the potential of using Beacon Object Files ([BOF](https://hstechdocs.helpsystems.com/manuals/cobaltstrike/current/userguide/content/topics/beacon-object-files_main.htm)) for detection *validation*. We wanted to know how BOFs, combined with Elastic’s internal Detonate Service and the Elastic AI Assistant for Security, could streamline our ability to identify gaps, improve detection coverage, and explore new detection engineering challenges.  \n\n## Tapping into OpenSource Red Team Contributions\n\nThe evolution of offensive tooling in cybersecurity reflects an ongoing arms race between red teams and defenders, marked by continuous innovation on both sides: \n\n* Initially, red teamers leveraged PowerShell, taking advantage of its deep integration with Windows to execute commands and scripts entirely in memory, avoiding traditional file-based operations.  \n* This technique was countered by the introduction of the Antimalware Scan Interface ([AMSI](https://learn.microsoft.com/en-us/windows/win32/amsi/antimalware-scan-interface-portal)), which provided real-time inspection to prevent harmful activity.   \n* Offensive operators adapted through obfuscation and version downgrades to bypass AMSI’s controls. The focus shifted to C\\# and the .NET CLR (common language runtime), which offered robust capabilities for in-memory execution, evading inconvenient PowerShell-specific protections.   \n* AMSI’s expansion to CLR-based scripts (C\\#), prompted the development of tools like [Donut](https://thewover.github.io/Introducing-Donut/), converting .NET assemblies into shellcode to bypass AMSI checks.   \n* With process injection becoming a prevalent technique for embedding code into legitimate processes, defenders introduced API hooking to monitor and block such activity.   \n* To counter process and syscall detections, red teams migrated to fork-and-run techniques, creating ephemeral processes to execute payloads and quickly terminate, further reducing the detection footprint.   \n* The latest innovation in this progression is the use of Beacon Object Files (BOFs), which execute lightweight payloads directly into an existing process’s memory, avoiding fork-and-run mechanisms and eliminating the need for runtime environments like the .NET CLR.\n\nWith a growing number of [BOF GitHub contributions](https://github.com/N7WEra/BofAllTheThings) covering multiple techniques, they are ideal for evaluating gaps and exploring procedure-level events. BOFs are generally small C-based programs that execute within the context of a COBALTSTRIKE BEACON agent. Since introduced, they’ve become a staple for red team operations. Even practitioners who don't use COBALTSTRIKE can take advantage of BOFs using third-party loaders, a great example of the ingenuity of the offensive research community. One example used in this exploration is [COFFLoader](https://github.com/trustedsec/COFFLoader), originally [introduced](https://www.trustedsec.com/blog/bofs-for-script-kiddies) in 2023 by TrustedSec, designed to load Common Object File Format (COFF) files. COFFs (the opened standard for BOFs), are essentially your compiled .o object files \\- e.g. BOF with extra support for in-memory execution. Other more recent examples include the rust-based [Coffee](https://github.com/hakaioffsec/coffee) loader by Hakai Security and the GoLang-based implementation [Goffloader](https://github.com/praetorian-inc/goffloader) by Praetorian.  \nLoading COFF/BOF objects have become a standard feature in many C2 frameworks such as Havoc, Metasploit, PoshC2, and Sliver, with some directly utilizing COFFLoader for execution. With little setup, prebuilt BOFs and a loader like COFFLoader can quickly enable researchers to test a wide range of specific techniques on their endpoints.\n\n## Experimentation Powered by Detonate\n\nSetting up and maintaining a robust system for BOF execution, VM endpoint testing, and Elastic Security’s Defend in a repeatable manner can be a significant engineering challenge, especially when isolating detonations, collecting results, and testing multiple samples. To streamline this process and make it as efficient as possible, Elastic built the internal Detonate service, which handles the heavy lifting and minimizes the operational overhead.\n\nIf you’re unfamiliar with Elastic’s Internal Detonate service, check out [Part 1 \\- Click, Click…Boom\\!](https://www.elastic.co/security-labs/click-click-boom-automating-protections-testing-with-detonate) where we introduce Detonate, why we built it, explore how Detonate works, describe case studies, and discuss efficacy testing. If you want a deeper dive, head over to [Part 2 \\- Into The Weeds: How We Run Detonate](https://www.elastic.co/security-labs/into-the-weeds-how-we-run-detonate) where we describe the APIs leveraged to automate much of our exploration. It is important to note that Detonate is still a prototype, not yet an enterprise offering, and as such, we’re experimenting with its potential applications and fine-tuning its capabilities. \n\nFor this ON week project, the complexity was distilled down to one API call that uploads and executes the BOF, and a subsequent optional second API call to fetch behavior alert results.\n\n## Validating Behavior Detections via BOFs\n\nWe used automation for the tedious behind-the-scenes work because ON week is about the more interesting research findings, but we wanted to share some of the nuances and pain points of this kind of technology in case you're interested in building your own detonation framework. If you’re interested in following along in general, we’ll walk through some of the nuances and pain points.\n\n![BOF Detonating Experimentation Pipeline](/assets/images/detonating-beacons-to-illuminate-detection-gaps/image4.png)\n\nAt a high level, this depicts an overview of the different components integrated into the automation. All of the core logic was centralized into a simple CLI POC tool to help manage the different phases of the experiment. \n\n## Framing a Proof of Concept\n\nThe CLI provides sample commands to analyze a sample BOF’s .c source file, execute BOF’s within our Detonate environment, monitor specific GitHub repositories for BOF changes, and show detonation results with query recommendations if they’re available.  \n\n![Sample PoC Commands](/assets/images/detonating-beacons-to-illuminate-detection-gaps/image6.png)\n\n### Scraping and Preprocessing BOFs \\- Phases 1 and 2\n\nFor a quickstart guide, navigate to [BofAllTheThings](https://github.com/N7WEra/BofAllTheThings), which includes several GitHub repositories worth starting with. The list isn’t actively maintained, so with some Github [topic searches for `bof`](https://github.com/topics/bof), you may encounter more consistently updated examples like [nanodump](https://github.com/fortra/nanodump). \n\nStandardizing BOFs to follow a common format significantly improves the experimentation and repeatability. Different authors name their `.c` source and `.o` BOF files differently so to streamline the research process, we followed TrustedSec’s [CONTRIBUTING](https://github.com/trustedsec/CS-Situational-Awareness-BOF/blob/master/CONTRIBUTING.md) guide and file conventions to consistently name files and place them in a common folder structure. We generally skipped GitHub repositories that did not include source with their BOFs (because we wanted to be certain of what they were doing *before* executing them), and prioritized examples with Makefiles. As each technique was processed, they were manually formatted to follow the conventions (e.g. renaming the main `.c` file to `entry.c`, compiling with a matching file and directory name, etc.).\n\nWith the BOFs organized, we were able to parse the entry files, search for the `go` method that defines the key functions and arguments. We parse these arguments and convert them to hex, similarly to the way [beacon\\_generate.py](https://github.com/trustedsec/COFFLoader/blob/main/beacon_generate.py) does, before shipping the BOF and all accompanying materials to Detonate.\n\n![Sample Generated BOF Arguments](/assets/images/detonating-beacons-to-illuminate-detection-gaps/image2.png)\n\nAfter preprocessing the arguments, we stored them locally in a `json` file and retrieved the contents whenever we wanted to detonate the BOF or all BOFs.\n\n### Submitting Detonations \\- Phase 3\n\nThere is a `detonate` command and `detonate-all` that uploads the local BOF to the Detonate VM instance with the arguments. When a Detonate task is created, metadata about the BOF job is stored locally so that results can be retrieved later.  \n   \n![Netuser BOF Detonation](/assets/images/detonating-beacons-to-illuminate-detection-gaps/image3.png)\n\nFor detection engineering and regression testing, detonating all BOF files enables us to submit a periodic long-lasting job, starting with deploying and configuring virtual machines and ending with submitting generative AI completions for detection recommendations.\n\n### BOF Detonate Examples \n\nUp to this point, the setup is primarily a security research engineering effort. The detection engineering aspect begins when we can start analyzing results, investigating gaps, and developing additional rules. Each BOF submitted is accompanied by a Detonate job that describes the commands executed, execution logs, and any detections. In these test cases, different detections appeared during different aspects of the test (potential shellcode injection, malware detection, etc.). The following BOFs were selected based on their specific requirements for arguments, which were generated using the [beacon\\_generate.py](https://github.com/trustedsec/COFFLoader/blob/main/beacon_generate.py) script, as previously explained. Some BOFs require arguments to be passed to them during execution, and these arguments are crucial for tailoring the behaviour of the BOF to the specific test case scenario. The table below lists the BOFs explored in this section:\n\n| BOF | Type of BOF  | Arguments Expected  |\n| :---- | :---- | :---- |\n| netuser | Enumeration | \\[username\\] \\[opt: domain\\] |\n| portscan | Enumeration | \\[ipv4\\] \\[opt: port\\] |\n| Elevate-System-Trusted-BOF | Privilege Escalation | None |\n| etw | Logging Manipulation | None |\n| RegistryPersistence | Persistence | None  (See notes below) |\n\nBOF Used: [PortScan](https://github.com/rvrsh3ll/BOF_Collection/tree/master/Network/PortScan)   \nPurpose: Enumeration technique that scans a single port on a remote host.\n\n![BOF Detonation: PortScan](/assets/images/detonating-beacons-to-illuminate-detection-gaps/image9.png)\n\nThe detonation log shows expected output of `COFFLoader64.exe` loading the `portscan.x64.o` sample, showing that port `22` was not open as expected on the test machine. Note: In this example two detections were triggered in comparison to the `netuser` BOF execution.\n\nBOF Used: [Elevate-System-Trusted-BOF](https://github.com/Mr-Un1k0d3r/Elevate-System-Trusted-BOF)  \nPurpose: This BOF can be used to elevate the current beacon to SYSTEM and obtain the TrustedInstaller group privilege. The impersonation is done through the `SetThreadToken` API.  \n\n![BOF Detonation: Elevate-System-Trusted-BOF](/assets/images/detonating-beacons-to-illuminate-detection-gaps/image1.png)\n\nThe detonation log shows expected output of `COFFLoader64.exe` successfully loading and executing the `elevate_system.x64.o` BOF. The log confirms the BOF’s intended behavior, elevating the process to SYSTEM and granting the TrustedInstaller group privilege. This operation, leveraging the `SetThreadToken` function, demonstrates privilege escalation effectively.\n\nBOF Used: [ETW](https://github.com/ajpc500/BOFs/tree/main/ETW)  \nPurpose: Simple Beacon object file to patch (and revert) the `EtwEventWrite` function in `ntdll.dll` to degrade ETW-based logging. \n\n![BOF Detonation: ETW](/assets/images/detonating-beacons-to-illuminate-detection-gaps/image11.png)\n\nThe detonation log confirms the successful execution of the `etw.x64.o` BOF using `COFFLoader64.exe`. This BOF manipulates the `EtwEventWrite` function in `ntdll.dll` to degrade ETW-based logging. The log verifies the BOF’s capability to disable key telemetry temporarily, a common defense evasion tactic.\n\nBOF Used: [RegistryPersistence](https://github.com/rvrsh3ll/BOF_Collection/tree/master/Persistence)  \nPurpose: Installs persistence in Windows systems by adding an entry under `HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run`. The persistence works by running a PowerShell command (dummy payload in this case) on startup via the registry. In the case of the RegistryPersistence BOF, the source code (.C) was modified so that the registry entry under `HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run` would be created if it did not already exist. Additionally, debugging messages were added to the code, which print to the Beacon’s output using the `BeaconPrintf` function, aiding in monitoring and troubleshooting the persistence mechanism during execution.\n\n![BOF Detonation: RegistryPersistence](/assets/images/detonating-beacons-to-illuminate-detection-gaps/image1.png)\n\nThe detonation log displays the expected behavior of the `registrypersistence.x64.o` BOF. It successfully modifies the Windows registry under `HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run`, adding a persistence mechanism. The entry executes a PowerShell command (empty payload in this case) on system startup, validating the BOF’s intended persistence functionality.\n\n### Showing Results \\- Phase 4\n\nFinally, the `show-results` command lists the outcomes of the BOFs; whether a behavior detection successfully caught the technique, and a recommended query to quickly illustrate key ECS fields to build into a robust detection (or use to tune an existing rule). BOFs that are detected by an existing behavior detection do not go through the additional query recommendation workflow.\n\n![Query Recommendation Within Results](/assets/images/detonating-beacons-to-illuminate-detection-gaps/image10.png)\n\nFortunately, as described in [NEW in Elastic Security 8.15: Automatic Import, Gemini models, and AI Assistant APIs](https://www.elastic.co/blog/whats-new-elastic-security-8-15-0), the Elastic AI Assistant for Security exposes new capabilities to quickly generate a recommendation based on the context provided (by simply hitting the available [API](https://www.elastic.co/docs/api/doc/kibana/v8/operation/operation-performanonymizationfieldsbulkaction)). A simple HTTP request makes it easy to ship contextual information about the BOF and sample logs to ideate on possible improvements.\n\n```conn.request(\"POST\", \"/api/security_ai_assistant/chat/complete\", payload, headers)```\n\nTo assess the accuracy of the query recommendations, we employed a dataset of labeled scenarios and benign activities to establish a “ground truth” and evaluated how the query recommendations performed in distinguishing between legitimate and malicious activities. Additionally, the prompts used to generate the rules were iteratively tuned until a satisfactory response was generated, where the *expected* query closely aligned with the *actual* rule generated, ensuring that the AI Assistant provided relevant and accurate recommendations. \n\nIn the netuser BOF example, the returned detonation data contained no existing detections but included events [4798](https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-10/security/threat-protection/auditing/event-4798), based on the BOF context (user enumeration) and the Windows 4798 event details the Elastic AI Assistant rightly recommended the use of that event for detection.\n\n![Elastic Raw Events from BOF](/assets/images/detonating-beacons-to-illuminate-detection-gaps/image5.png)\n\n## Additional Considerations\n\nWe’re continuing to explore creative ways to improve our detection engineering tradecraft. By integrating BOFs with Elastic’s Detonate Service and leveraging the Elastic Security Assistant, we’re able to streamline testing. This approach is designed to identify potential detection gaps and enable detection strategies. \n\nA key challenge in detecting Beacon Object Files (BOFs) is their reliance on Windows Event Logging, which often fails to capture memory-only execution, reflective injection, or direct syscalls. Many BOF techniques are designed to bypass traditional logging, avoiding file creation and interactions with the Windows API.  As a result, security  solutions that rely solely on event logs are insufficient for detecting these sophisticated techniques. To effectively detect such threats, organizations need more advanced EDRs, like Elastic Defend, that offer visibility into injection methods, memory manipulation, system calls, process hollowing, and other evasive tactics. \n\nDeveloping a fully supported BOF experimentation and research pipeline requires *substantial* effort to cover the dependencies of each technique. For example:\n\n* Lateral Movement: Requires additional test nodes  \n* Data Exfiltration: Requires network communication connectivity  \n* Complex BOFs: May require extra dependencies, precondition arguments, and multistep executions prior to running the BOF. These additional steps are typically commands organized in the C2 Framework (e.g. `.cna` sleep script)\n\nElastic, at its core, is open. This research illustrates this philosophy, and collaboration with the open-source community is an important way we support evolving detection engineering requirements. We are committed to refining our methodologies and sharing our lessons learned to strengthen the collective defense of enterprises. We’re more capable together.\n\nWe’re always interested in hearing about new use cases or workflows, so reach out to us via [GitHub issues](https://github.com/elastic/detection-rules/issues), chat with us in our [community Slack](http://ela.st/slack), and ask questions in our [Discuss forums](https://discuss.elastic.co/c/security/endpoint-security/80). Learn more about detection engineering the Elastic way using the [DEBMM](https://www.elastic.co/security-labs/elastic-releases-debmm). You can see the technology we leverage for this research and more by checking out [Elastic Security](https://www.elastic.co/security).\n\n*The release and timing of any features or functionality described in this post remain at Elastic's sole discretion. Any features or functionality not currently available may not be delivered on time or at all.*\n","code":"var Component=(()=\u003e{var h=Object.create;var a=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,m=Object.prototype.hasOwnProperty;var f=(n,e)=\u003e()=\u003e(e||n((e={exports:{}}).exports,e),e.exports),w=(n,e)=\u003e{for(var i in e)a(n,i,{get:e[i],enumerable:!0})},s=(n,e,i,r)=\u003e{if(e\u0026\u0026typeof e==\"object\"||typeof e==\"function\")for(let o of g(e))!m.call(n,o)\u0026\u0026o!==i\u0026\u0026a(n,o,{get:()=\u003ee[o],enumerable:!(r=u(e,o))||r.enumerable});return n};var y=(n,e,i)=\u003e(i=n!=null?h(p(n)):{},s(e||!n||!n.__esModule?a(i,\"default\",{value:n,enumerable:!0}):i,n)),b=n=\u003es(a({},\"__esModule\",{value:!0}),n);var c=f((T,l)=\u003e{l.exports=_jsx_runtime});var B={};w(B,{default:()=\u003eO,frontmatter:()=\u003ev});var t=y(c()),v={title:\"Detonating Beacons to Illuminate Detection Gaps\",slug:\"detonating-beacons-to-illuminate-detection-gaps\",date:\"2025-01-09\",description:\"Learn how Elastic Security leveraged open-source BOFs to achieve detection engineering goals during our most recent ON week.\",author:[{slug:\"mika-ayenson\"},{slug:\"miguel-garzon\"},{slug:\"samir-bousseaden\"}],image:\"Security Labs Images 31.jpg\",category:[{slug:\"security-research\"}]};function d(n){let e=Object.assign({p:\"p\",a:\"a\",em:\"em\",h2:\"h2\",ul:\"ul\",li:\"li\",br:\"br\",img:\"img\",h3:\"h3\",code:\"code\",div:\"div\",table:\"table\",thead:\"thead\",tr:\"tr\",th:\"th\",tbody:\"tbody\",td:\"td\"},n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(e.p,{children:[\"At Elastic, we continuously strive to mature our detection engineering processes in scalable ways, leveraging creative approaches to validate and enhance our capabilities. We recently concluded a quarterly Elastic OnWeek event, which we convene quarterly and provides an opportunity to explore problems differently than our regular day-to-day. This time around, we explored the potential of using Beacon Object Files (\",(0,t.jsx)(e.a,{href:\"https://hstechdocs.helpsystems.com/manuals/cobaltstrike/current/userguide/content/topics/beacon-object-files_main.htm\",rel:\"nofollow\",children:\"BOF\"}),\") for detection \",(0,t.jsx)(e.em,{children:\"validation\"}),\". We wanted to know how BOFs, combined with Elastic\\u2019s internal Detonate Service and the Elastic AI Assistant for Security, could streamline our ability to identify gaps, improve detection coverage, and explore new detection engineering challenges.\"]}),`\n`,(0,t.jsx)(e.h2,{id:\"tapping-into-opensource-red-team-contributions\",children:\"Tapping into OpenSource Red Team Contributions\"}),`\n`,(0,t.jsx)(e.p,{children:\"The evolution of offensive tooling in cybersecurity reflects an ongoing arms race between red teams and defenders, marked by continuous innovation on both sides:\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:\"Initially, red teamers leveraged PowerShell, taking advantage of its deep integration with Windows to execute commands and scripts entirely in memory, avoiding traditional file-based operations.\"}),`\n`,(0,t.jsxs)(e.li,{children:[\"This technique was countered by the introduction of the Antimalware Scan Interface (\",(0,t.jsx)(e.a,{href:\"https://learn.microsoft.com/en-us/windows/win32/amsi/antimalware-scan-interface-portal\",rel:\"nofollow\",children:\"AMSI\"}),\"), which provided real-time inspection to prevent harmful activity.\"]}),`\n`,(0,t.jsx)(e.li,{children:\"Offensive operators adapted through obfuscation and version downgrades to bypass AMSI\\u2019s controls. The focus shifted to C# and the .NET CLR (common language runtime), which offered robust capabilities for in-memory execution, evading inconvenient PowerShell-specific protections.\"}),`\n`,(0,t.jsxs)(e.li,{children:[\"AMSI\\u2019s expansion to CLR-based scripts (C#), prompted the development of tools like \",(0,t.jsx)(e.a,{href:\"https://thewover.github.io/Introducing-Donut/\",rel:\"nofollow\",children:\"Donut\"}),\", converting .NET assemblies into shellcode to bypass AMSI checks.\"]}),`\n`,(0,t.jsx)(e.li,{children:\"With process injection becoming a prevalent technique for embedding code into legitimate processes, defenders introduced API hooking to monitor and block such activity.\"}),`\n`,(0,t.jsx)(e.li,{children:\"To counter process and syscall detections, red teams migrated to fork-and-run techniques, creating ephemeral processes to execute payloads and quickly terminate, further reducing the detection footprint.\"}),`\n`,(0,t.jsx)(e.li,{children:\"The latest innovation in this progression is the use of Beacon Object Files (BOFs), which execute lightweight payloads directly into an existing process\\u2019s memory, avoiding fork-and-run mechanisms and eliminating the need for runtime environments like the .NET CLR.\"}),`\n`]}),`\n`,(0,t.jsxs)(e.p,{children:[\"With a growing number of \",(0,t.jsx)(e.a,{href:\"https://github.com/N7WEra/BofAllTheThings\",rel:\"nofollow\",children:\"BOF GitHub contributions\"}),\" covering multiple techniques, they are ideal for evaluating gaps and exploring procedure-level events. BOFs are generally small C-based programs that execute within the context of a COBALTSTRIKE BEACON agent. Since introduced, they\\u2019ve become a staple for red team operations. Even practitioners who don't use COBALTSTRIKE can take advantage of BOFs using third-party loaders, a great example of the ingenuity of the offensive research community. One example used in this exploration is \",(0,t.jsx)(e.a,{href:\"https://github.com/trustedsec/COFFLoader\",rel:\"nofollow\",children:\"COFFLoader\"}),\", originally \",(0,t.jsx)(e.a,{href:\"https://www.trustedsec.com/blog/bofs-for-script-kiddies\",rel:\"nofollow\",children:\"introduced\"}),\" in 2023 by TrustedSec, designed to load Common Object File Format (COFF) files. COFFs (the opened standard for BOFs), are essentially your compiled .o object files - e.g. BOF with extra support for in-memory execution. Other more recent examples include the rust-based \",(0,t.jsx)(e.a,{href:\"https://github.com/hakaioffsec/coffee\",rel:\"nofollow\",children:\"Coffee\"}),\" loader by Hakai Security and the GoLang-based implementation \",(0,t.jsx)(e.a,{href:\"https://github.com/praetorian-inc/goffloader\",rel:\"nofollow\",children:\"Goffloader\"}),\" by Praetorian.\",(0,t.jsx)(e.br,{}),`\n`,\"Loading COFF/BOF objects have become a standard feature in many C2 frameworks such as Havoc, Metasploit, PoshC2, and Sliver, with some directly utilizing COFFLoader for execution. With little setup, prebuilt BOFs and a loader like COFFLoader can quickly enable researchers to test a wide range of specific techniques on their endpoints.\"]}),`\n`,(0,t.jsx)(e.h2,{id:\"experimentation-powered-by-detonate\",children:\"Experimentation Powered by Detonate\"}),`\n`,(0,t.jsx)(e.p,{children:\"Setting up and maintaining a robust system for BOF execution, VM endpoint testing, and Elastic Security\\u2019s Defend in a repeatable manner can be a significant engineering challenge, especially when isolating detonations, collecting results, and testing multiple samples. To streamline this process and make it as efficient as possible, Elastic built the internal Detonate service, which handles the heavy lifting and minimizes the operational overhead.\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"If you\\u2019re unfamiliar with Elastic\\u2019s Internal Detonate service, check out \",(0,t.jsx)(e.a,{href:\"https://www.elastic.co/security-labs/click-click-boom-automating-protections-testing-with-detonate\",rel:\"nofollow\",children:\"Part 1 - Click, Click\\u2026Boom!\"}),\" where we introduce Detonate, why we built it, explore how Detonate works, describe case studies, and discuss efficacy testing. If you want a deeper dive, head over to \",(0,t.jsx)(e.a,{href:\"https://www.elastic.co/security-labs/into-the-weeds-how-we-run-detonate\",rel:\"nofollow\",children:\"Part 2 - Into The Weeds: How We Run Detonate\"}),\" where we describe the APIs leveraged to automate much of our exploration. It is important to note that Detonate is still a prototype, not yet an enterprise offering, and as such, we\\u2019re experimenting with its potential applications and fine-tuning its capabilities.\"]}),`\n`,(0,t.jsx)(e.p,{children:\"For this ON week project, the complexity was distilled down to one API call that uploads and executes the BOF, and a subsequent optional second API call to fetch behavior alert results.\"}),`\n`,(0,t.jsx)(e.h2,{id:\"validating-behavior-detections-via-bofs\",children:\"Validating Behavior Detections via BOFs\"}),`\n`,(0,t.jsx)(e.p,{children:\"We used automation for the tedious behind-the-scenes work because ON week is about the more interesting research findings, but we wanted to share some of the nuances and pain points of this kind of technology in case you're interested in building your own detonation framework. If you\\u2019re interested in following along in general, we\\u2019ll walk through some of the nuances and pain points.\"}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/detonating-beacons-to-illuminate-detection-gaps/image4.png\",alt:\"BOF Detonating Experimentation Pipeline\",width:\"1999\",height:\"1570\"})}),`\n`,(0,t.jsx)(e.p,{children:\"At a high level, this depicts an overview of the different components integrated into the automation. All of the core logic was centralized into a simple CLI POC tool to help manage the different phases of the experiment.\"}),`\n`,(0,t.jsx)(e.h2,{id:\"framing-a-proof-of-concept\",children:\"Framing a Proof of Concept\"}),`\n`,(0,t.jsx)(e.p,{children:\"The CLI provides sample commands to analyze a sample BOF\\u2019s .c source file, execute BOF\\u2019s within our Detonate environment, monitor specific GitHub repositories for BOF changes, and show detonation results with query recommendations if they\\u2019re available.\"}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/detonating-beacons-to-illuminate-detection-gaps/image6.png\",alt:\"Sample PoC Commands\",width:\"1258\",height:\"590\"})}),`\n`,(0,t.jsx)(e.h3,{id:\"scraping-and-preprocessing-bofs---phases-1-and-2\",children:\"Scraping and Preprocessing BOFs - Phases 1 and 2\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"For a quickstart guide, navigate to \",(0,t.jsx)(e.a,{href:\"https://github.com/N7WEra/BofAllTheThings\",rel:\"nofollow\",children:\"BofAllTheThings\"}),\", which includes several GitHub repositories worth starting with. The list isn\\u2019t actively maintained, so with some Github \",(0,t.jsxs)(e.a,{href:\"https://github.com/topics/bof\",rel:\"nofollow\",children:[\"topic searches for \",(0,t.jsx)(e.code,{children:\"bof\"})]}),\", you may encounter more consistently updated examples like \",(0,t.jsx)(e.a,{href:\"https://github.com/fortra/nanodump\",rel:\"nofollow\",children:\"nanodump\"}),\".\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Standardizing BOFs to follow a common format significantly improves the experimentation and repeatability. Different authors name their \",(0,t.jsx)(e.code,{children:\".c\"}),\" source and \",(0,t.jsx)(e.code,{children:\".o\"}),\" BOF files differently so to streamline the research process, we followed TrustedSec\\u2019s \",(0,t.jsx)(e.a,{href:\"https://github.com/trustedsec/CS-Situational-Awareness-BOF/blob/master/CONTRIBUTING.md\",rel:\"nofollow\",children:\"CONTRIBUTING\"}),\" guide and file conventions to consistently name files and place them in a common folder structure. We generally skipped GitHub repositories that did not include source with their BOFs (because we wanted to be certain of what they were doing \",(0,t.jsx)(e.em,{children:\"before\"}),\" executing them), and prioritized examples with Makefiles. As each technique was processed, they were manually formatted to follow the conventions (e.g. renaming the main \",(0,t.jsx)(e.code,{children:\".c\"}),\" file to \",(0,t.jsx)(e.code,{children:\"entry.c\"}),\", compiling with a matching file and directory name, etc.).\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"With the BOFs organized, we were able to parse the entry files, search for the \",(0,t.jsx)(e.code,{children:\"go\"}),\" method that defines the key functions and arguments. We parse these arguments and convert them to hex, similarly to the way \",(0,t.jsx)(e.a,{href:\"https://github.com/trustedsec/COFFLoader/blob/main/beacon_generate.py\",rel:\"nofollow\",children:\"beacon_generate.py\"}),\" does, before shipping the BOF and all accompanying materials to Detonate.\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/detonating-beacons-to-illuminate-detection-gaps/image2.png\",alt:\"Sample Generated BOF Arguments\",width:\"1648\",height:\"760\"})}),`\n`,(0,t.jsxs)(e.p,{children:[\"After preprocessing the arguments, we stored them locally in a \",(0,t.jsx)(e.code,{children:\"json\"}),\" file and retrieved the contents whenever we wanted to detonate the BOF or all BOFs.\"]}),`\n`,(0,t.jsx)(e.h3,{id:\"submitting-detonations---phase-3\",children:\"Submitting Detonations - Phase 3\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"There is a \",(0,t.jsx)(e.code,{children:\"detonate\"}),\" command and \",(0,t.jsx)(e.code,{children:\"detonate-all\"}),\" that uploads the local BOF to the Detonate VM instance with the arguments. When a Detonate task is created, metadata about the BOF job is stored locally so that results can be retrieved later.\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/detonating-beacons-to-illuminate-detection-gaps/image3.png\",alt:\"Netuser BOF Detonation\",width:\"1940\",height:\"410\"})}),`\n`,(0,t.jsx)(e.p,{children:\"For detection engineering and regression testing, detonating all BOF files enables us to submit a periodic long-lasting job, starting with deploying and configuring virtual machines and ending with submitting generative AI completions for detection recommendations.\"}),`\n`,(0,t.jsx)(e.h3,{id:\"bof-detonate-examples\",children:\"BOF Detonate Examples\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"Up to this point, the setup is primarily a security research engineering effort. The detection engineering aspect begins when we can start analyzing results, investigating gaps, and developing additional rules. Each BOF submitted is accompanied by a Detonate job that describes the commands executed, execution logs, and any detections. In these test cases, different detections appeared during different aspects of the test (potential shellcode injection, malware detection, etc.). The following BOFs were selected based on their specific requirements for arguments, which were generated using the \",(0,t.jsx)(e.a,{href:\"https://github.com/trustedsec/COFFLoader/blob/main/beacon_generate.py\",rel:\"nofollow\",children:\"beacon_generate.py\"}),\" script, as previously explained. Some BOFs require arguments to be passed to them during execution, and these arguments are crucial for tailoring the behaviour of the BOF to the specific test case scenario. The table below lists the BOFs explored in this section:\"]}),`\n`,(0,t.jsx)(e.div,{className:\"table-container\",children:(0,t.jsxs)(e.table,{children:[(0,t.jsx)(e.thead,{children:(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.th,{align:\"left\",children:\"BOF\"}),(0,t.jsx)(e.th,{align:\"left\",children:\"Type of BOF\"}),(0,t.jsx)(e.th,{align:\"left\",children:\"Arguments Expected\"})]})}),(0,t.jsxs)(e.tbody,{children:[(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{align:\"left\",children:\"netuser\"}),(0,t.jsx)(e.td,{align:\"left\",children:\"Enumeration\"}),(0,t.jsx)(e.td,{align:\"left\",children:\"[username] [opt: domain]\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{align:\"left\",children:\"portscan\"}),(0,t.jsx)(e.td,{align:\"left\",children:\"Enumeration\"}),(0,t.jsx)(e.td,{align:\"left\",children:\"[ipv4] [opt: port]\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{align:\"left\",children:\"Elevate-System-Trusted-BOF\"}),(0,t.jsx)(e.td,{align:\"left\",children:\"Privilege Escalation\"}),(0,t.jsx)(e.td,{align:\"left\",children:\"None\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{align:\"left\",children:\"etw\"}),(0,t.jsx)(e.td,{align:\"left\",children:\"Logging Manipulation\"}),(0,t.jsx)(e.td,{align:\"left\",children:\"None\"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{align:\"left\",children:\"RegistryPersistence\"}),(0,t.jsx)(e.td,{align:\"left\",children:\"Persistence\"}),(0,t.jsx)(e.td,{align:\"left\",children:\"None  (See notes below)\"})]})]})]})}),`\n`,(0,t.jsxs)(e.p,{children:[\"BOF Used: \",(0,t.jsx)(e.a,{href:\"https://github.com/rvrsh3ll/BOF_Collection/tree/master/Network/PortScan\",rel:\"nofollow\",children:\"PortScan\"}),(0,t.jsx)(e.br,{}),`\n`,\"Purpose: Enumeration technique that scans a single port on a remote host.\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/detonating-beacons-to-illuminate-detection-gaps/image9.png\",alt:\"BOF Detonation: PortScan\",width:\"1999\",height:\"1538\"})}),`\n`,(0,t.jsxs)(e.p,{children:[\"The detonation log shows expected output of \",(0,t.jsx)(e.code,{children:\"COFFLoader64.exe\"}),\" loading the \",(0,t.jsx)(e.code,{children:\"portscan.x64.o\"}),\" sample, showing that port \",(0,t.jsx)(e.code,{children:\"22\"}),\" was not open as expected on the test machine. Note: In this example two detections were triggered in comparison to the \",(0,t.jsx)(e.code,{children:\"netuser\"}),\" BOF execution.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"BOF Used: \",(0,t.jsx)(e.a,{href:\"https://github.com/Mr-Un1k0d3r/Elevate-System-Trusted-BOF\",rel:\"nofollow\",children:\"Elevate-System-Trusted-BOF\"}),(0,t.jsx)(e.br,{}),`\n`,\"Purpose: This BOF can be used to elevate the current beacon to SYSTEM and obtain the TrustedInstaller group privilege. The impersonation is done through the \",(0,t.jsx)(e.code,{children:\"SetThreadToken\"}),\" API.\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/detonating-beacons-to-illuminate-detection-gaps/image1.png\",alt:\"BOF Detonation: Elevate-System-Trusted-BOF\",width:\"1999\",height:\"1235\"})}),`\n`,(0,t.jsxs)(e.p,{children:[\"The detonation log shows expected output of \",(0,t.jsx)(e.code,{children:\"COFFLoader64.exe\"}),\" successfully loading and executing the \",(0,t.jsx)(e.code,{children:\"elevate_system.x64.o\"}),\" BOF. The log confirms the BOF\\u2019s intended behavior, elevating the process to SYSTEM and granting the TrustedInstaller group privilege. This operation, leveraging the \",(0,t.jsx)(e.code,{children:\"SetThreadToken\"}),\" function, demonstrates privilege escalation effectively.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"BOF Used: \",(0,t.jsx)(e.a,{href:\"https://github.com/ajpc500/BOFs/tree/main/ETW\",rel:\"nofollow\",children:\"ETW\"}),(0,t.jsx)(e.br,{}),`\n`,\"Purpose: Simple Beacon object file to patch (and revert) the \",(0,t.jsx)(e.code,{children:\"EtwEventWrite\"}),\" function in \",(0,t.jsx)(e.code,{children:\"ntdll.dll\"}),\" to degrade ETW-based logging.\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/detonating-beacons-to-illuminate-detection-gaps/image11.png\",alt:\"BOF Detonation: ETW\",width:\"1999\",height:\"1518\"})}),`\n`,(0,t.jsxs)(e.p,{children:[\"The detonation log confirms the successful execution of the \",(0,t.jsx)(e.code,{children:\"etw.x64.o\"}),\" BOF using \",(0,t.jsx)(e.code,{children:\"COFFLoader64.exe\"}),\". This BOF manipulates the \",(0,t.jsx)(e.code,{children:\"EtwEventWrite\"}),\" function in \",(0,t.jsx)(e.code,{children:\"ntdll.dll\"}),\" to degrade ETW-based logging. The log verifies the BOF\\u2019s capability to disable key telemetry temporarily, a common defense evasion tactic.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"BOF Used: \",(0,t.jsx)(e.a,{href:\"https://github.com/rvrsh3ll/BOF_Collection/tree/master/Persistence\",rel:\"nofollow\",children:\"RegistryPersistence\"}),(0,t.jsx)(e.br,{}),`\n`,\"Purpose: Installs persistence in Windows systems by adding an entry under \",(0,t.jsx)(e.code,{children:\"HKCU\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\"}),\". The persistence works by running a PowerShell command (dummy payload in this case) on startup via the registry. In the case of the RegistryPersistence BOF, the source code (.C) was modified so that the registry entry under \",(0,t.jsx)(e.code,{children:\"HKCU\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\"}),\" would be created if it did not already exist. Additionally, debugging messages were added to the code, which print to the Beacon\\u2019s output using the \",(0,t.jsx)(e.code,{children:\"BeaconPrintf\"}),\" function, aiding in monitoring and troubleshooting the persistence mechanism during execution.\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/detonating-beacons-to-illuminate-detection-gaps/image1.png\",alt:\"BOF Detonation: RegistryPersistence\",width:\"1999\",height:\"1235\"})}),`\n`,(0,t.jsxs)(e.p,{children:[\"The detonation log displays the expected behavior of the \",(0,t.jsx)(e.code,{children:\"registrypersistence.x64.o\"}),\" BOF. It successfully modifies the Windows registry under \",(0,t.jsx)(e.code,{children:\"HKCU\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\"}),\", adding a persistence mechanism. The entry executes a PowerShell command (empty payload in this case) on system startup, validating the BOF\\u2019s intended persistence functionality.\"]}),`\n`,(0,t.jsx)(e.h3,{id:\"showing-results---phase-4\",children:\"Showing Results - Phase 4\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"Finally, the \",(0,t.jsx)(e.code,{children:\"show-results\"}),\" command lists the outcomes of the BOFs; whether a behavior detection successfully caught the technique, and a recommended query to quickly illustrate key ECS fields to build into a robust detection (or use to tune an existing rule). BOFs that are detected by an existing behavior detection do not go through the additional query recommendation workflow.\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/detonating-beacons-to-illuminate-detection-gaps/image10.png\",alt:\"Query Recommendation Within Results\",width:\"1904\",height:\"604\"})}),`\n`,(0,t.jsxs)(e.p,{children:[\"Fortunately, as described in \",(0,t.jsx)(e.a,{href:\"https://www.elastic.co/blog/whats-new-elastic-security-8-15-0\",rel:\"nofollow\",children:\"NEW in Elastic Security 8.15: Automatic Import, Gemini models, and AI Assistant APIs\"}),\", the Elastic AI Assistant for Security exposes new capabilities to quickly generate a recommendation based on the context provided (by simply hitting the available \",(0,t.jsx)(e.a,{href:\"https://www.elastic.co/docs/api/doc/kibana/v8/operation/operation-performanonymizationfieldsbulkaction\",rel:\"nofollow\",children:\"API\"}),\"). A simple HTTP request makes it easy to ship contextual information about the BOF and sample logs to ideate on possible improvements.\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.code,{children:'conn.request(\"POST\", \"/api/security_ai_assistant/chat/complete\", payload, headers)'})}),`\n`,(0,t.jsxs)(e.p,{children:[\"To assess the accuracy of the query recommendations, we employed a dataset of labeled scenarios and benign activities to establish a \\u201Cground truth\\u201D and evaluated how the query recommendations performed in distinguishing between legitimate and malicious activities. Additionally, the prompts used to generate the rules were iteratively tuned until a satisfactory response was generated, where the \",(0,t.jsx)(e.em,{children:\"expected\"}),\" query closely aligned with the \",(0,t.jsx)(e.em,{children:\"actual\"}),\" rule generated, ensuring that the AI Assistant provided relevant and accurate recommendations.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"In the netuser BOF example, the returned detonation data contained no existing detections but included events \",(0,t.jsx)(e.a,{href:\"https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-10/security/threat-protection/auditing/event-4798\",rel:\"nofollow\",children:\"4798\"}),\", based on the BOF context (user enumeration) and the Windows 4798 event details the Elastic AI Assistant rightly recommended the use of that event for detection.\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/assets/images/detonating-beacons-to-illuminate-detection-gaps/image5.png\",alt:\"Elastic Raw Events from BOF\",width:\"1999\",height:\"546\"})}),`\n`,(0,t.jsx)(e.h2,{id:\"additional-considerations\",children:\"Additional Considerations\"}),`\n`,(0,t.jsx)(e.p,{children:\"We\\u2019re continuing to explore creative ways to improve our detection engineering tradecraft. By integrating BOFs with Elastic\\u2019s Detonate Service and leveraging the Elastic Security Assistant, we\\u2019re able to streamline testing. This approach is designed to identify potential detection gaps and enable detection strategies.\"}),`\n`,(0,t.jsx)(e.p,{children:\"A key challenge in detecting Beacon Object Files (BOFs) is their reliance on Windows Event Logging, which often fails to capture memory-only execution, reflective injection, or direct syscalls. Many BOF techniques are designed to bypass traditional logging, avoiding file creation and interactions with the Windows API.  As a result, security  solutions that rely solely on event logs are insufficient for detecting these sophisticated techniques. To effectively detect such threats, organizations need more advanced EDRs, like Elastic Defend, that offer visibility into injection methods, memory manipulation, system calls, process hollowing, and other evasive tactics.\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"Developing a fully supported BOF experimentation and research pipeline requires \",(0,t.jsx)(e.em,{children:\"substantial\"}),\" effort to cover the dependencies of each technique. For example:\"]}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:\"Lateral Movement: Requires additional test nodes\"}),`\n`,(0,t.jsx)(e.li,{children:\"Data Exfiltration: Requires network communication connectivity\"}),`\n`,(0,t.jsxs)(e.li,{children:[\"Complex BOFs: May require extra dependencies, precondition arguments, and multistep executions prior to running the BOF. These additional steps are typically commands organized in the C2 Framework (e.g. \",(0,t.jsx)(e.code,{children:\".cna\"}),\" sleep script)\"]}),`\n`]}),`\n`,(0,t.jsx)(e.p,{children:\"Elastic, at its core, is open. This research illustrates this philosophy, and collaboration with the open-source community is an important way we support evolving detection engineering requirements. We are committed to refining our methodologies and sharing our lessons learned to strengthen the collective defense of enterprises. We\\u2019re more capable together.\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"We\\u2019re always interested in hearing about new use cases or workflows, so reach out to us via \",(0,t.jsx)(e.a,{href:\"https://github.com/elastic/detection-rules/issues\",rel:\"nofollow\",children:\"GitHub issues\"}),\", chat with us in our \",(0,t.jsx)(e.a,{href:\"http://ela.st/slack\",rel:\"nofollow\",children:\"community Slack\"}),\", and ask questions in our \",(0,t.jsx)(e.a,{href:\"https://discuss.elastic.co/c/security/endpoint-security/80\",rel:\"nofollow\",children:\"Discuss forums\"}),\". Learn more about detection engineering the Elastic way using the \",(0,t.jsx)(e.a,{href:\"https://www.elastic.co/security-labs/elastic-releases-debmm\",rel:\"nofollow\",children:\"DEBMM\"}),\". You can see the technology we leverage for this research and more by checking out \",(0,t.jsx)(e.a,{href:\"https://www.elastic.co/security\",rel:\"nofollow\",children:\"Elastic Security\"}),\".\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.em,{children:\"The release and timing of any features or functionality described in this post remain at Elastic's sole discretion. Any features or functionality not currently available may not be delivered on time or at all.\"})})]})}function F(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(d,n)})):d(n)}var O=F;return b(B);})();\n;return Component;"},"_id":"articles/detonating-beacons-to-illuminate-detection-gaps.mdx","_raw":{"sourceFilePath":"articles/detonating-beacons-to-illuminate-detection-gaps.mdx","sourceFileName":"detonating-beacons-to-illuminate-detection-gaps.mdx","sourceFileDir":"articles","contentType":"mdx","flattenedPath":"articles/detonating-beacons-to-illuminate-detection-gaps"},"type":"Article","imageUrl":"/assets/images/detonating-beacons-to-illuminate-detection-gaps/Security Labs Images 31.jpg","readingTime":"13 min read","series":"","url":"/detonating-beacons-to-illuminate-detection-gaps","headings":[{"level":2,"title":"Tapping into OpenSource Red Team Contributions","href":"#tapping-into-opensource-red-team-contributions"},{"level":2,"title":"Experimentation Powered by Detonate","href":"#experimentation-powered-by-detonate"},{"level":2,"title":"Validating Behavior Detections via BOFs","href":"#validating-behavior-detections-via-bofs"},{"level":2,"title":"Framing a Proof of Concept","href":"#framing-a-proof-of-concept"},{"level":3,"title":"Scraping and Preprocessing BOFs \\- Phases 1 and 2","href":"#scraping-and-preprocessing-bofs---phases-1-and-2"},{"level":3,"title":"Submitting Detonations \\- Phase 3","href":"#submitting-detonations---phase-3"},{"level":3,"title":"BOF Detonate Examples ","href":"#bof-detonate-examples-"},{"level":3,"title":"Showing Results \\- Phase 4","href":"#showing-results---phase-4"},{"level":2,"title":"Additional Considerations","href":"#additional-considerations"}],"author":[{"title":"Mika Ayenson, PhD","slug":"mika-ayenson","body":{"raw":"","code":"var Component=(()=\u003e{var x=Object.create;var a=Object.defineProperty;var f=Object.getOwnPropertyDescriptor;var _=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,j=Object.prototype.hasOwnProperty;var l=(t,n)=\u003e()=\u003e(n||t((n={exports:{}}).exports,n),n.exports),M=(t,n)=\u003e{for(var e in n)a(t,e,{get:n[e],enumerable:!0})},i=(t,n,e,s)=\u003e{if(n\u0026\u0026typeof n==\"object\"||typeof n==\"function\")for(let o of _(n))!j.call(t,o)\u0026\u0026o!==e\u0026\u0026a(t,o,{get:()=\u003en[o],enumerable:!(s=f(n,o))||s.enumerable});return t};var d=(t,n,e)=\u003e(e=t!=null?x(g(t)):{},i(n||!t||!t.__esModule?a(e,\"default\",{value:t,enumerable:!0}):e,t)),p=t=\u003ei(a({},\"__esModule\",{value:!0}),t);var m=l((F,c)=\u003e{c.exports=_jsx_runtime});var k={};M(k,{default:()=\u003eh,frontmatter:()=\u003ey});var r=d(m()),y={title:\"Mika Ayenson, PhD\",slug:\"mika-ayenson\"};function u(t){return(0,r.jsx)(r.Fragment,{})}function D(t={}){let{wrapper:n}=t.components||{};return n?(0,r.jsx)(n,Object.assign({},t,{children:(0,r.jsx)(u,t)})):u(t)}var h=D;return p(k);})();\n;return Component;"},"_id":"authors/mika-ayenson.mdx","_raw":{"sourceFilePath":"authors/mika-ayenson.mdx","sourceFileName":"mika-ayenson.mdx","sourceFileDir":"authors","contentType":"mdx","flattenedPath":"authors/mika-ayenson"},"type":"Author","imageUrl":"","url":"/authors/mika-ayenson"},{"title":"Miguel Garzon","slug":"miguel-garzon","body":{"raw":"","code":"var Component=(()=\u003e{var g=Object.create;var a=Object.defineProperty;var x=Object.getOwnPropertyDescriptor;var l=Object.getOwnPropertyNames;var f=Object.getPrototypeOf,_=Object.prototype.hasOwnProperty;var j=(t,n)=\u003e()=\u003e(n||t((n={exports:{}}).exports,n),n.exports),M=(t,n)=\u003e{for(var e in n)a(t,e,{get:n[e],enumerable:!0})},u=(t,n,e,s)=\u003e{if(n\u0026\u0026typeof n==\"object\"||typeof n==\"function\")for(let o of l(n))!_.call(t,o)\u0026\u0026o!==e\u0026\u0026a(t,o,{get:()=\u003en[o],enumerable:!(s=x(n,o))||s.enumerable});return t};var d=(t,n,e)=\u003e(e=t!=null?g(f(t)):{},u(n||!t||!t.__esModule?a(e,\"default\",{value:t,enumerable:!0}):e,t)),p=t=\u003eu(a({},\"__esModule\",{value:!0}),t);var c=j((b,i)=\u003e{i.exports=_jsx_runtime});var F={};M(F,{default:()=\u003eD,frontmatter:()=\u003ez});var r=d(c()),z={title:\"Miguel Garzon\",slug:\"miguel-garzon\"};function m(t){return(0,r.jsx)(r.Fragment,{})}function C(t={}){let{wrapper:n}=t.components||{};return n?(0,r.jsx)(n,Object.assign({},t,{children:(0,r.jsx)(m,t)})):m(t)}var D=C;return p(F);})();\n;return Component;"},"_id":"authors/miguel-garzon.mdx","_raw":{"sourceFilePath":"authors/miguel-garzon.mdx","sourceFileName":"miguel-garzon.mdx","sourceFileDir":"authors","contentType":"mdx","flattenedPath":"authors/miguel-garzon"},"type":"Author","imageUrl":"","url":"/authors/miguel-garzon"},{"title":"Samir Bousseaden","slug":"samir-bousseaden","body":{"raw":"","code":"var Component=(()=\u003e{var x=Object.create;var s=Object.defineProperty;var d=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var _=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var j=(t,e)=\u003e()=\u003e(e||t((e={exports:{}}).exports,e),e.exports),l=(t,e)=\u003e{for(var n in e)s(t,n,{get:e[n],enumerable:!0})},u=(t,e,n,a)=\u003e{if(e\u0026\u0026typeof e==\"object\"||typeof e==\"function\")for(let o of f(e))!g.call(t,o)\u0026\u0026o!==n\u0026\u0026s(t,o,{get:()=\u003ee[o],enumerable:!(a=d(e,o))||a.enumerable});return t};var p=(t,e,n)=\u003e(n=t!=null?x(_(t)):{},u(e||!t||!t.__esModule?s(n,\"default\",{value:t,enumerable:!0}):n,t)),M=t=\u003eu(s({},\"__esModule\",{value:!0}),t);var m=j((h,i)=\u003e{i.exports=_jsx_runtime});var F={};l(F,{default:()=\u003eD,frontmatter:()=\u003eb});var r=p(m()),b={title:\"Samir Bousseaden\",slug:\"samir-bousseaden\"};function c(t){return(0,r.jsx)(r.Fragment,{})}function C(t={}){let{wrapper:e}=t.components||{};return e?(0,r.jsx)(e,Object.assign({},t,{children:(0,r.jsx)(c,t)})):c(t)}var D=C;return M(F);})();\n;return Component;"},"_id":"authors/samir-bousseaden.mdx","_raw":{"sourceFilePath":"authors/samir-bousseaden.mdx","sourceFileName":"samir-bousseaden.mdx","sourceFileDir":"authors","contentType":"mdx","flattenedPath":"authors/samir-bousseaden"},"type":"Author","imageUrl":"","url":"/authors/samir-bousseaden"}],"category":[{"title":"Security research","slug":"security-research","body":{"raw":"","code":"var Component=(()=\u003e{var x=Object.create;var s=Object.defineProperty;var f=Object.getOwnPropertyDescriptor;var _=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,j=Object.prototype.hasOwnProperty;var l=(t,e)=\u003e()=\u003e(e||t((e={exports:{}}).exports,e),e.exports),d=(t,e)=\u003e{for(var r in e)s(t,r,{get:e[r],enumerable:!0})},c=(t,e,r,a)=\u003e{if(e\u0026\u0026typeof e==\"object\"||typeof e==\"function\")for(let o of _(e))!j.call(t,o)\u0026\u0026o!==r\u0026\u0026s(t,o,{get:()=\u003ee[o],enumerable:!(a=f(e,o))||a.enumerable});return t};var h=(t,e,r)=\u003e(r=t!=null?x(g(t)):{},c(e||!t||!t.__esModule?s(r,\"default\",{value:t,enumerable:!0}):r,t)),p=t=\u003ec(s({},\"__esModule\",{value:!0}),t);var i=l((X,u)=\u003e{u.exports=_jsx_runtime});var D={};d(D,{default:()=\u003eC,frontmatter:()=\u003ey});var n=h(i()),y={title:\"Security research\",slug:\"security-research\"};function m(t){return(0,n.jsx)(n.Fragment,{})}function M(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(m,t)})):m(t)}var C=M;return p(D);})();\n;return Component;"},"_id":"categories/security-research.mdx","_raw":{"sourceFilePath":"categories/security-research.mdx","sourceFileName":"security-research.mdx","sourceFileDir":"categories","contentType":"mdx","flattenedPath":"categories/security-research"},"type":"Category","url":"/categories/security-research"}]},"seriesArticles":null},"__N_SSG":true},"page":"/[slug]","query":{"slug":"detonating-beacons-to-illuminate-detection-gaps"},"buildId":"A5uTWEoE8YIxzJ8SpX6Vt","assetPrefix":"/security-labs","isFallback":false,"gsp":true,"scriptLoader":[]}</script></body></html>