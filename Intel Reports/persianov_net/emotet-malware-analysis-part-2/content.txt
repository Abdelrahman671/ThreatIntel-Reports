<!DOCTYPE html>
    <head>
        <!-- Global site tag (gtag.js) - Google Analytics -->
        <script async src="https://www.googletagmanager.com/gtag/js?id=UA-72526364-1"></script>
        <script>
            window.dataLayer = window.dataLayer || [];
            function gtag(){dataLayer.push(arguments);}
            gtag('js', new Date());
            gtag('config', 'UA-72526364-1');
        </script>
        <meta charset="utf-8"/>
        <meta http-equiv="content-language" content="en"/>
        <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
        <meta name="google-site-verification" content="J_8Q0-xJba2mH3qk5DYZVANicD-89wVM1SBFiRTTqFs" />

        <!-- Collect all tags -->
        
            





        
        <!-- Collect all tags -->
        <link rel="stylesheet" href="https://persianov.net/css/monokai.css">
        <link rel="stylesheet" href="https://persianov.net/css/styles.css">
        <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png">
        <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png">
        <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png">
        <link rel="manifest" href="/site.webmanifest">
        <link rel="mask-icon" href="/safari-pinned-tab.svg" color="#004917">
        <link rel="alternate" type="application/atom+xml" title="Persianov on Security" href="/feed.xml">
        <meta name="msapplication-TileColor" content="#2b5797">
        <meta name="theme-color" content="#ffffff">
        <title>Persianov on Security: Emotet malware analysis. Part 2.</title>
        <!-- Begin Jekyll SEO tag v2.8.0 -->
<title>Emotet malware analysis. Part 2. | Persianov on Security</title>
<meta name="generator" content="Jekyll v3.9.5" />
<meta property="og:title" content="Emotet malware analysis. Part 2." />
<meta property="og:locale" content="en_US" />
<meta name="description" content="Analyzing Emotet malware, a trojan that is spread via phishing emails, malicious links and targets individuals, companies and governments." />
<meta property="og:description" content="Analyzing Emotet malware, a trojan that is spread via phishing emails, malicious links and targets individuals, companies and governments." />
<link rel="canonical" href="https://persianov.net/emotet-malware-analysis-part-2" />
<meta property="og:url" content="https://persianov.net/emotet-malware-analysis-part-2" />
<meta property="og:site_name" content="Persianov on Security" />
<meta property="og:image" content="https://persianov.net/img/emotet_malware/emotet-malware.jpg" />
<meta property="og:type" content="article" />
<meta property="article:published_time" content="2019-04-07T00:00:00+00:00" />
<meta name="twitter:card" content="summary_large_image" />
<meta property="twitter:image" content="https://persianov.net/img/emotet_malware/emotet-malware.jpg" />
<meta property="twitter:title" content="Emotet malware analysis. Part 2." />
<meta name="twitter:site" content="@s_persianov" />
<script type="application/ld+json">
{"@context":"https://schema.org","@type":"BlogPosting","dateModified":"2019-04-07T00:00:00+00:00","datePublished":"2019-04-07T00:00:00+00:00","description":"Analyzing Emotet malware, a trojan that is spread via phishing emails, malicious links and targets individuals, companies and governments.","headline":"Emotet malware analysis. Part 2.","image":"https://persianov.net/img/emotet_malware/emotet-malware.jpg","mainEntityOfPage":{"@type":"WebPage","@id":"https://persianov.net/emotet-malware-analysis-part-2"},"url":"https://persianov.net/emotet-malware-analysis-part-2"}</script>
<!-- End Jekyll SEO tag -->

    </head>
<body>
    <img class="header_image" src="/img/header.png" alt="Persianov on Security"/>

    <div class="top_nav">
        <a href="/"><span class="red" title="Blog posts">[</span>Blog<span class="red">]</span></a>
        <a href="#projects"><span class="red" title="Projects list">[</span>Projects<span class="red">]</span></a>
        <a href="#bugtrack"><span class="red" title="Found and reported bugs">[</span>Bugtrack<span class="red">]</span></a>
        <a href="/challenges.html" title="Challenges and crackme repository"><span class="red">[</span>Challenges<span class="red">]</span></a>
        <a href="/contact-me.html"><span class="red" title="Contact me">[</span>Contact<span class="red">]</span></a>
        <a href="/feed.xml"><span class="red" title="RSS Feed">[</span>RSS<span class="red">]</span></a>
    </div>
    
    <article class="resp_w" >
    <div>
        <h1 class="post_title center">
            <span class="green">[</span>
            Emotet malware analysis. Part 2.
            <span class="green">]</span>
        </h1>
        <p class="post_meta green-dark center">
            === Apr 7, 2019 ===
        </p>
    </div>    
    <p>This is the Part 2 of my Emotet analysis. It covers phase 3 of the attack, specifically the PE file which is being dropped by infected websites, used in Phishing/Spam campaigns. Emotet is an advanced modular Trojan, predominantly used as Malware Distribution Platform, main goal being systems infection with other types of malware.</p>

<p>More information about phases 1 and 2: <a href="https://persianov.net/emotet-malware-analysis-part-1" title="Emotet infection. Phase 1 &amp; 2">HERE</a></p>

<h2 id="general-information">General information.</h2>

<p>Phase 3 of this version of Emotet attack is characterized by the new version of executable. Malware authors spent some time to make it harder to analyze, by implementing multiple Anti-Debugging techniques, loading Windows DLLs dynamically, encrypting imported functions names, several unpacking stages, and so on.</p>

<table>
  <thead>
    <tr>
      <th>File name</th>
      <th>Checksum</th>
      <th>Hosted at</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>DFDWiz.exe</td>
      <td>cebb919d8d04f224b78181a4d3f0b10a315ae2f2</td>
      <td>hxxp://biederman.net/leslie/lL/</td>
    </tr>
  </tbody>
</table>

<p>Based on IAT information, there are several Windows DLLs this binary is loading: <code class="language-plaintext highlighter-rouge">kernel32.dll</code>, <code class="language-plaintext highlighter-rouge">user32.dll</code>, <code class="language-plaintext highlighter-rouge">gdi32.dll</code>, <code class="language-plaintext highlighter-rouge">advapi32.dll</code>, <code class="language-plaintext highlighter-rouge">shell32.dll</code> and <code class="language-plaintext highlighter-rouge">shlwapi.dll</code>.</p>

<p><a href="../img/emotet_malware/pe_1_dlls.png"> <img src="/img/emotet_malware/pe_1_dlls.png" alt="Import Address Table" class="post_image" /> </a></p>

<p>At the first glance, the binary doesn’t import any “red flag” functions, usually used by packers.</p>

<p><a href="../img/emotet_malware/pe_1_sections.png"> <img src="/img/emotet_malware/pe_1_sections.png" alt="Sections" class="post_image" /> </a></p>

<script async="" src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-5423038656551173" crossorigin="anonymous"></script>

<p><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-5423038656551173" data-ad-slot="9543159315"></ins>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<p>Let’s load this sample in IDA and check for any details that can help in upcoming dynamic analysis. From the multitude of imported functions, listed in IAT, there are only few used (visible at least). One of them is <code class="language-plaintext highlighter-rouge">VirtualAlloc</code>, which points to a possible custom packer.</p>

<p><a href="../img/emotet_malware/pe_1_packer_1.png"> <img src="/img/emotet_malware/pe_1_packer_1.png" alt="VirutalAlloc Wrapper" class="post_image" /> </a></p>

<p>Some other clues showing that this binary is packed are <code class="language-plaintext highlighter-rouge">call</code>s to pointers to data segment:</p>

<p><a href="../img/emotet_malware/pe_1_packer_2.png"> <img src="/img/emotet_malware/pe_1_packer_2.png" alt="Call data segment pointer" class="post_image" /> </a></p>

<h2 id="dynamic-analysis-unpacking">Dynamic analysis. Unpacking.</h2>

<p>For the dynamic analysis of this sample, I’m going to use <code class="language-plaintext highlighter-rouge">x32dbg</code>. Based on the report from Hybrid Analysis, looks like this sample creates 2 new processes, once executed: copy of itself and a second process with a different name. This is the packed PE file, which is embedded into the first sample.</p>

<p><a href="../img/emotet_malware/hybrid_analysis.png"> <img src="/img/emotet_malware/hybrid_analysis.png" alt="Hybrid Analysis" class="post_image" /> </a></p>

<p>Most probably, parent process will call one of the <code class="language-plaintext highlighter-rouge">CreateProcess*</code> Windows API functions. Since 2018, Microsoft moved some functionality from <strong>kernel32.dll</strong> and <strong>advapi32.dll</strong> to new low-level binary, called <code class="language-plaintext highlighter-rouge">kernelbase.dll</code>. If we take a look at <code class="language-plaintext highlighter-rouge">CreateProcessA</code> and <code class="language-plaintext highlighter-rouge">CreateProcessAsUserA</code> in kernel32.dll, the only thing we can see are several <code class="language-plaintext highlighter-rouge">mov</code> and <code class="language-plaintext highlighter-rouge">push</code> instructions, followed by a jump, to <strong>kernelbase.dll</strong> equivalent function.</p>

<p><a href="../img/emotet_malware/kernelbase_dll.png"> <img src="/img/emotet_malware/kernelbase_dll.png" alt="kernelbase.dll" class="post_image" /> </a></p>

<p>Following the thread to kernelbase.dll, we see that <code class="language-plaintext highlighter-rouge">CreateProcessA</code> function contains a bunch of another push instructions followed by a <code class="language-plaintext highlighter-rouge">call</code> to <code class="language-plaintext highlighter-rouge">CreateProcessInternalA</code>. Same happens for <code class="language-plaintext highlighter-rouge">CreateProcessAsUserA</code>.</p>

<p><a href="../img/emotet_malware/create_process_a_kernelbase.png"> <img src="/img/emotet_malware/create_process_a_kernelbase.png" alt="CreateProcessA kernelbase.dll" class="post_image" /> </a></p>

<p>To keep this short, the overall call chain looks like this:</p>

<p>[kernel32.dll]<code class="language-plaintext highlighter-rouge">CreateProcessA</code> -&gt; [kernelbase.dll]<code class="language-plaintext highlighter-rouge">CreateProcessA</code> -&gt; [kernelbase.dll]<code class="language-plaintext highlighter-rouge">CreateProcessInternalA</code> -&gt; [kernelbase.dll]<code class="language-plaintext highlighter-rouge">CreateProcessInternalW</code></p>

<script async="" src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-5423038656551173" crossorigin="anonymous"></script>

<p><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-5423038656551173" data-ad-slot="5911089967"></ins>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<p>It means that for any <code class="language-plaintext highlighter-rouge">CreateProcess*</code> function call, we’ll get <code class="language-plaintext highlighter-rouge">CreateProcessInternalW</code> called right before process creation. If we set a breakpoint at the beginning of this function, we possibly could find the <strong>unpacked</strong> binary, which is going to be injected into the new process. Once we hit the breakpoint, there are 4 memory regions with <strong>ERW</strong> (Execute-Read-Write) flags set. 3/4 are PE files, based on the header.</p>

<p><a href="../img/emotet_malware/three_unpacked_binaries.png"> <img src="/img/emotet_malware/three_unpacked_binaries.png" alt="Memory Map" class="post_image" /> </a></p>

<p><a href="../img/emotet_malware/follow_in_dump_unpacked_binaries.png"> <img src="/img/emotet_malware/follow_in_dump_unpacked_binaries.png" alt="PE headers" class="post_image" /> </a></p>

<p>Once all of them are dumped and properly aligned, we can proceed with the second phase of analysis.</p>

<h2 id="dynamic-analysis-dumped-binaries">Dynamic analysis. Dumped binaries.</h2>

<p>All 3 exported binaries look the same, even if they have different checksums. IAT table is empty, which means that malware loads dependencies in runtime. There are no API function names in binary’s strings, which implies that all API function names are encrypted as well as library names.</p>

<p>The execution starts with 3 function calls.</p>

<p><a href="../img/emotet_malware/three_functions_start.png"> <img src="/img/emotet_malware/three_functions_start.png" alt="Entry point" class="post_image" /> </a></p>

<p>First 2 functions contain encrypted names of the APIs this sample is going to load dynamically. These functions call another one, once all encrypted values are loaded to stack. The <code class="language-plaintext highlighter-rouge">sub_401550</code> looks to be responsible for decryption.</p>

<p><a href="../img/emotet_malware/encrypted_strings.png"> <img src="/img/emotet_malware/encrypted_strings.png" alt="Encrypted names" class="post_image" /> </a></p>

<p>So far, I was able to detect 4 DLLs loaded dynamically by this sample: <code class="language-plaintext highlighter-rouge">kernel32.dll</code>, <code class="language-plaintext highlighter-rouge">user32.dll</code>, <code class="language-plaintext highlighter-rouge">ntdll.dll</code>, <code class="language-plaintext highlighter-rouge">shell32.dll</code>.</p>

<p>In order to run just one copy of it, this sample checks if a specific MUTEX exists and creates it, if missing. MUTEX name is: <code class="language-plaintext highlighter-rouge">PEMF24</code>.</p>

<p><a href="../img/emotet_malware/mutex_checks.png"> <img src="/img/emotet_malware/mutex_checks.png" alt="Mutex creation" class="post_image" /> </a></p>

<p>Once MUTEX is checked/created, malware looks for Windows directory to copy itself there, as well as into <strong>%APPDATA%</strong> folder. This time, the new binary is named differently and this name is generated in runtime by concatenating 2 strings (in my case it was <code class="language-plaintext highlighter-rouge">ipropslide.exe</code>). All possible strings are stored in memory at some point.</p>

<p><a href="../img/emotet_malware/new_process_created.png"> <img src="/img/emotet_malware/new_process_created.png" alt="New process created" class="post_image" /> </a></p>

<p><a href="../img/emotet_malware/list_of_possible_names.png"> <img src="/img/emotet_malware/list_of_possible_names.png" alt="List of possible names" class="post_image" /> </a></p>

<p>Once the new process is created, it starts looking for host information like <strong>Computer Name</strong> and <strong>Volume info</strong> and C2 communication begins.</p>

<p><a href="../img/emotet_malware/get_computer_name.png"> <img src="/img/emotet_malware/get_computer_name.png" alt="Get computer name" class="post_image" /> </a></p>

<script async="" src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-5423038656551173" crossorigin="anonymous"></script>

<p><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-5423038656551173" data-ad-slot="9543159315"></ins>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<p>After some patching during debugging and several failures =)) I was able to get some details about the C2 communication part. Sample tries to connect to 3 IP addresses (round robin?)</p>

<table>
  <thead>
    <tr>
      <th>IP Address</th>
      <th>Destination Port</th>
      <th>Protocol</th>
      <th>User Agent</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>45.36.20[.]17</td>
      <td>8443</td>
      <td>HTTP</td>
      <td>Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 2.0.50727; .NET CLR 3.0.04506.648; .NET CLR 3.5.21022)</td>
    </tr>
    <tr>
      <td>103.39.131[.]88</td>
      <td>80</td>
      <td>HTTP</td>
      <td>Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 2.0.50727; .NET CLR 3.0.04506.648; .NET CLR 3.5.21022)</td>
    </tr>
    <tr>
      <td>86.239.117[.]57</td>
      <td>8090</td>
      <td>HTTP</td>
      <td>Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 2.0.50727; .NET CLR 3.0.04506.648; .NET CLR 3.5.21022)</td>
    </tr>
  </tbody>
</table>

<h2 id="conclusion">Conclusion.</h2>

<p>Malware authors did a good effort in packing this malware and introducing different layers of defence. It wasn’t too difficult to bypass those layers, however taking into consideration how often a new Emotet version is released and the changes to the binary, the analysis becomes time consuming in the long term.
Sending HTTP traffic to non-standard destination ports, like <code class="language-plaintext highlighter-rouge">8090</code>, is not the best way to keep a low profile in a compromised network. Most businesses have to treat this type of traffic as suspicious nowadays and maintain a clean asset inventory.</p>

    <br><br>
    
<div id="share-bar">
    <fieldset style="border: 1px solid #c5c4c4; padding: 18px;">
        <legend style="font-size: 17px;">Liked it? Share it:</legend>

        <div class="share-buttons">
            <a  href="https://twitter.com/intent/tweet?text=Emotet malware analysis. Part 2.&url=https://persianov.net/emotet-malware-analysis-part-2"
                onclick="window.open(this.href, 'pop-up', 'left=20,top=20,width=500,height=500,toolbar=1,resizable=0'); return false;"
                title="Share on Twitter" >
                <span class="fa-twitter share-button">[ twitter ]</span>
            </a>

            <a  href="http://www.reddit.com/submit?url=https://persianov.net/emotet-malware-analysis-part-2"
                onclick="window.open(this.href, 'pop-up', 'left=20,top=20,width=900,height=500,toolbar=1,resizable=0'); return false;"
                title="Share on Reddit" >
                <span class="fa-reddit share-button">[ reddit ]</span>
            </a>

            <a  href="https://www.linkedin.com/shareArticle?mini=true&url=https://persianov.net/emotet-malware-analysis-part-2&title=Emotet malware analysis. Part 2.&summary=Analyzing Emotet malware, a trojan that is spread via phishing emails, malicious links and targets individuals, companies and governments.&source=Persianov on Security"
                onclick="window.open(this.href, 'pop-up', 'left=20,top=20,width=500,height=500,toolbar=1,resizable=0'); return false;"
                title="Share on LinkedIn" >
                <span class="fa-linkedin share-button">[ linkedin ]</span>
            </a>

            <a  href="https://www.facebook.com/sharer/sharer.php?u=https://persianov.net/emotet-malware-analysis-part-2"
                onclick="window.open(this.href, 'pop-up', 'left=20,top=20,width=500,height=500,toolbar=1,resizable=0'); return false;"
                title="Share on Facebook" >
                <span class="fa-facebook share-button">[ facebook ]</span>
            </a>

            <a href="/cdn-cgi/l/email-protection#734c000611191610074e361e1c071607531e121f0412011653121d121f0a001a005d532312010753415d55121e0348111c170a4e301b161018531c060753071b1a0053001a0716531b07070300495c5c031601001a121d1c055d1d16075c161e1c0716075e1e121f041201165e121d121f0a001a005e031201075e41" title="Share via Email">
                <span class="fa-envelope share-button">[ email ]</span>
            </a>
        </div>
    </fieldset>
</div>


</article>

    <footer class="center">
        <div>
            <p><strong>Copyright &copy; Sveatoslav Persianov</strong></p>
            <p>Find me on: 
                <a href="https://twitter.com/s_persianov" title="Follow me on Twitter">Twitter</a>
                <a href="https://github.com/num1r0" title="Check my GitHub repository">GitHub</a>
                <a href="https://www.linkedin.com/in/sveatoslav-persianov/" title="Find me on LinkedIn">LinkedIn</a>
                <a href="https://www.youtube.com/channel/UCn9NOhHKQMM_M_RFLc7ztMg" title="Follow me on YouTube">YouTube</a>
                <a href="/contact-me.html" title="Contact me by email">Email</a>
            </p>
            <p><a href="https://persianov.net/privacy-cookies-policy.html">Privacy Policy and Cookies Policy</a></p>
        </div>
    </footer>
<script data-cfasync="false" src="/cdn-cgi/scripts/5c5dd728/cloudflare-static/email-decode.min.js"></script></body>

</html>
