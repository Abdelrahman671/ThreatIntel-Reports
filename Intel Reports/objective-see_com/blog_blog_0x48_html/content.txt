<html xmlns="http://www.w3.org/1999/xhtml" xmlns:og="http://ogp.me/ns#">
  <head>
    <meta charset="UTF-8">
    
    <title>Objective-See's Blog</title>
    
    <link rel="shortcut icon" href="../images/logoApple.ico">
    
    <link href="../css/style.css" rel="stylesheet" />
    <script src="../js/analytics.js"></script>
    <script src="../js/sweetalert.min.js"></script>
    <script src="../js/donationPopup.js"></script>

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    
    <script type="text/javascript" src="//s3.amazonaws.com/downloads.mailchimp.com/js/signup-forms/popup/embed.js" data-dojo-config="usePlainJson: true, isDebug: false"></script>
    <script type="text/javascript">require(["mojo/signup-forms/Loader"], function(L) { L.start({"baseUrl":"mc.us13.list-manage.com","uuid":"ecee7516f567e712084cdb1d0","lid":"5fae6de946"}) })</script>
    
    
<meta name="twitter:card" content="summary_large_image" />
<meta name="twitter:site" content="@objective_see" />
<meta name="twitter:image" content=https://objective-see.com/images/blog/blog_0x48/twitter.png />
<meta name="twitter:title" content=Writing&#32;a&#32;File&#32;Monitor&#32;with&#32;Apple&#39;s&#32;Endpoint&#32;Security&#32;Framework />
<meta name="twitter:description" content= />
    
<meta property="og:type" content="article" />
<meta property="og:title" content=Writing&#32;a&#32;File&#32;Monitor&#32;with&#32;Apple&#39;s&#32;Endpoint&#32;Security&#32;Framework />
<meta property="og:image" content=https://objective-see.com/images/blog/blog_0x48/twitter.png />

    </head>
    <body>

    <link rel="stylesheet" type="text/css" href="/css/menu.css">

<meta http-equiv="cache-control" content="max-age=0" />
<meta http-equiv="cache-control" content="no-cache" />
<meta http-equiv="expires" content="0" />
<meta http-equiv="expires" content="Tue, 01 Jan 1980 1:00:00 GMT" />
<meta http-equiv="pragma" content="no-cache" />

<nav role="main" style="padding-bottom:30px;">
<ul>
    
    <li>
    <div class="logo">
        <a href="/index.html">
            <figure class="logo">
                <img src="/images/logoApple.png" style="height:75px; width:75px;" />
                <br>
                <figcaption class="logo">
                    <span style="color: #95c02d;">Objective</span><span style="color: #798992;">-See</span>
                 
                    <div style="color: #798992; font-size: 18px; font-weight: 300; padding-left: 3px; margin-top: -2px;">
                     a non-profit 501(c)(3) foundation.
                    </div>
                
                </figcaption>
            </figure>
        </a>
    </div>
    </li>

    
    <li>  
        <div class="menuicon">
        <div style="position: relative; min-width:0px;">
        <input type="checkbox" class="toggler">
        <div class="hamburger"><div></div></div>
        <div class="menu">
        <div style="padding-right: 20px;">
            <ul>

                <li>
                    <a href="/news.html" style="display:block;">
                        <img style="vertical-align:middle" src="/images/newsIcon.png" height="24px;">
                        <span style="vertical-align:middle">News</span>
                    </a>
                </li>

                <li>
                    <a href="https://objective-see.myshopify.com/" target="_blank" style="display:block;">
                        <img style="vertical-align:middle" src="/images/storeIcon.png" height="24px;">
                        <span style="vertical-align:middle">Swag</span>
                    </a>
                </li>

                <li>
                    <a href="https://taomm.org/" target="_blank" style="display:block;">
                        <img style="vertical-align:middle" src="/images/bookIcon.png" height="24px;">
                        <span style="vertical-align:middle">Books</span>
                    </a>
                </li>

                <li>
                    <a href="https://objectivebythesea.com/" target="_blank" style="display:block;">
                        <img style="vertical-align:middle" src="/images/conferenceIcon.png" height="24px;">
                        <span style="vertical-align:middle">Conference</span>
                    </a>
                </li>

                 <li>
                    <a href="/malware.html" style="display:block;">
                        <img style="vertical-align:middle" src="/images/malwareIcon.png" height="24px;">
                        <span style="vertical-align:middle">Malware Collection</span>
                    </a>
                </li>

                <li style="border-bottom: none;">
                    <a href="/about.html" style="display:block;">
                        <img style="vertical-align:middle" src="/images/aboutIcon.png" height="24px;">
                        <span style="vertical-align:middle">About Objective-See</span>
                    </a>
                </li>

            </ul>
        </div>
    </div>
    </div>
    </div>

    </li>

    
    <li>
        <form action="/support.html" style="display: inline;">
            <button class="menuicon button-4" role="button">Support Us!</button>
        </form>
    </li>

    
    <li>
        <a href="/blog.html" class="menuicon">
        <figure class="item">
            <center>
                <img src="/images/blogIcon.png" class="item"/>
                <figcaption class="item">blog</figcaption>
            </center>
        </figure>
        </a>
    </li>
    
    
    <li>
        <a href="/products.html" class="menuicon">
        <figure class="item">
            <center>
                <img src="/images/productsIcon.png" class="item"/>
            </center>
            <figcaption class="item">tools</figcaption>
        </figure>
        </a>
    </li>

</ul>

<hr class="gradient">

</nav>
    
    <div class="pageContent">
      <br>
      
<section class="blogContent" style="padding-bottom:50px";>
  <div class="blogTitle">Writing a File Monitor with Apple&#39;s Endpoint Security Framework</div>
  <div class="blogSubTitle"></div>
  <div class="blogDate" style="padding-top:10px;">by: Patrick Wardle / September 17, 2019</div>
  <div style="border: 1px solid #95c02d; padding: 10px; margin-top:15px; font-size: 15px;">
    <span class="n3rdFont">
    Our research, tools, and writing, are supported by "Friends of Objective-See"
    <br>
    Today&rsquo;s blog post is brought to you by:
    <br>
    <center>
      <a href="https://macpaw.com/cleanmymac" style="text-decoration: none;">
      <img src="../images/friends/cleanmymac.png" width="100px;" style="display:block;  margin:auto; padding-top: 10px;"/>
     CleanMyMac
      </a>
    </center>
    <table border="0" style="width:100%; border: none">
    <tr style="width:100%;">
    <td style="padding: 0px; border: none" border="0" align="center">
      <a href="https://malwarebytes.com/" style="text-decoration: none;">
      <img src="../images/friends/malwarebytes.png" width="100px;" style="display:block;  margin:auto; padding-top: 0px;"/>
      Malwarebytes
      </a>
    </td>
    <td style="padding: 0px; border: none" border="0" align="center">
      <a href="https://www.airoav.com/" style="text-decoration: none;">
      <img src="../images/friends/airo.png" width="100px;" style="display:block;  margin:auto; padding-top: 0px;"/>
      Airo AV
      </a>
    </td>
    </tr>
    </table>
    <br>
    <div align="right" style="padding-right:10px; padding-bottom:10px;">
        <a href="https://objective-see.com/friends.html" class="inlineLink">Become a Friend!</a>
    </div>
  </span>
</div>
<br>
<p><div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
# ./fileMonitor
Starting file monitor...[ok]

FILE CREATE ('ES_EVENT_TYPE_NOTIFY_CREATE')

source path: (null)
destination path: /private/tmp/test

process: pid: 849
path: /usr/bin/touch
uid: 501
signing info: {
    cdHash = 818C29925EE42814EFA951413B713788AD62;
    csFlags = 603996161;
    isPlatforBinary = 1;
    signatureIdentifier = "com.apple.touch";
}
</pre>
</div>
<br></p>
<div class="note">
<div>
      <img style="vertical-align:middle" src="../images/blog/blog_0x48/fileMonitor.png" height="32">
      <span style="vertical-align:middle">FileMonitor.app</span>
</div>
<ul>
<li>
<p><a href="../products/utilities.html#FileMonitor">Product Page</a></p>
</li>
<li>
<p><a href="https://github.com/objective-see/FileMonitor">Full Source Code</a></p>
</li>
</ul>
</div>
<h3 id="background">Background</h3>
<p>Earlier this week, I posted a blog titled &ldquo;<a href="blog_0x47.html">Writing a Process Monitor with Apple&rsquo;s Endpoint Security Framework</a>.&rdquo; In this post we (rather thoroughly) discussed a new framework/subsystem introduced into macOS Catalina (10.15): &ldquo;Endpoint Security&rdquo;</p>
<p>Moreover, we detailed exactly how to build a comprehensive (user-mode) process monitor that leveraged this new framework (and posted the full-source <a href="https://github.com/objective-see/FileMonitor">online</a>).</p>
<div class="note">
<p>This blog post assumes you&rsquo;ve read the previous <a href="blog_0x47.html">post</a>, or have a solid understanding of the new Endpoint Security framework.</p>
<p>As such, here, we won&rsquo;t be covering any foundational details about the Endpoint Security framework/subsystem.</p>
</div> 
<p>A common component of (many) security tools is a file monitor. As its name implies, a file monitor watches for the file I/O events (plus generally extracts information about the process responsible for said file event).</p>
<p>Many of my Objective-See tools contain such a file monitor component and track file events.
<br>
<br>
Examples include:</p>
<ul>
<li>
<p><a href="../ransomwhere?.html">Ransomwhere?</a> <br>
Tracks file creations to detect the rapid creation of encrypted files by untrusted processes (read: ransomware).</p>
</li>
<li>
<p><a href="../blockblock.html">BlockBlock</a> <br>
Tracks file creations and modifications in order to detect and alert on persistence events (such as malware installation).</p>
</li>
</ul>
<p>Until now, the preferred way to programmatically create a file monitor in user-mode was to subscribe to events from the <code>FSEvents</code> character device (<code>/dev/fsevents</code>):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ObjC" data-lang="ObjC"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span>open(<span style="color:#e6db74">&#34;/dev/fsevents&#34;</span>, O_RDONLY);</span></span></code></pre></div>
<div class="note">
<p>Why not use Apple&rsquo;s &ldquo;<a href="https://developer.apple.com/library/mac/documentation/Darwin/Conceptual/FSEvents_ProgGuide/UsingtheFSEventsFramework/UsingtheFSEventsFramework.html#//apple_ref/doc/uid/TP40005289-CH4-SW4">File System Events</a>&rdquo; API? Because (AFAIK) this API provides no way to identify the process that generated the file I/O event.</p>
<p>(I posted a question about this on StackOverflow, &ldquo;<a href="http://stackoverflow.com/questions/26049915/fsevents-get-pid-of-the-process-that-performed-the-operation">FSEvents - get PID of the process that performed the operation?</a>&rdquo; in 2014 &hellip;but nobody provided an answer :(</p>
<img src="../images/blog/blog_0x0F/stackoverflow.png"  width="66%" class="center" style="border-radius: 4px;">
<center style="color:#787878; padding-top:5px;"> </center>
</div>
<p>Though directly reading file events off <code>/dev/fsevents</code>, is sufficient (that is to say it provides notifications about file events, and includes the pid of the responsible process) it suffers from various drawbacks and limitations.</p>
<p>First, Apple actually discourages it use (as noted in the <code>bsd/vfs/vfs_fsevents.c</code> file):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-C" data-lang="C"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>strncmp(watcher<span style="color:#f92672">-&gt;</span>proc_name, <span style="color:#e6db74">&#34;fseventsd&#34;</span>, <span style="color:#66d9ef">sizeof</span>(watcher<span style="color:#f92672">-&gt;</span>proc_name)) <span style="color:#f92672">||</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span>    <span style="color:#f92672">!</span>strncmp(watcher<span style="color:#f92672">-&gt;</span>proc_name, <span style="color:#e6db74">&#34;coreservicesd&#34;</span>, <span style="color:#66d9ef">sizeof</span>(watcher<span style="color:#f92672">-&gt;</span>proc_name)) <span style="color:#f92672">||</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span>    <span style="color:#f92672">!</span>strncmp(watcher<span style="color:#f92672">-&gt;</span>proc_name, <span style="color:#e6db74">&#34;mds&#34;</span>, <span style="color:#66d9ef">sizeof</span>(watcher<span style="color:#f92672">-&gt;</span>proc_name))) {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span>  watcher<span style="color:#f92672">-&gt;</span>flags <span style="color:#f92672">|=</span> WATCHER_APPLE_SYSTEM_SERVICE;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span>} <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span>  
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span>  printf(<span style="color:#e6db74">&#34;fsevents: watcher %s (pid: %d) -</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span>         Using <span style="color:#f92672">/</span>dev<span style="color:#f92672">/</span>fsevents directly is unsupported. Migrate to FSEventsFramework<span style="color:#960050;background-color:#1e0010">\</span>n<span style="color:#e6db74">&#34;,</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11</span><span>         watcher<span style="color:#f92672">-&gt;</span>proc_name, watcher<span style="color:#f92672">-&gt;</span>pid);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12</span><span>}</span></span></code></pre></div>
<p>Second, it is rather painful to programmatically interface with, as it it requires one to parse and tokenize various (binary) file events:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ObjC" data-lang="ObjC"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span><span style="color:#75715e">//skip over args to get to next event struct
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span><span style="color:#75715e"></span>-(NSString<span style="color:#f92672">*</span>)<span style="color:#a6e22e">advance2Next:</span>(<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">char</span><span style="color:#f92672">*</span>)ptrBuffer <span style="color:#a6e22e">currentOffsetPtr:</span>(<span style="color:#66d9ef">int</span><span style="color:#f92672">*</span>)ptrCurrentOffset
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span>{
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span>    <span style="color:#75715e">//path
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span><span style="color:#75715e"></span>    NSString<span style="color:#f92672">*</span> path <span style="color:#f92672">=</span> nil;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span>    <span style="color:#66d9ef">int</span> arg_len <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span>    <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">short</span> <span style="color:#f92672">*</span>argLen;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span>    <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">short</span> <span style="color:#f92672">*</span>argType;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span>    <span style="color:#66d9ef">struct</span> kfs_event_a <span style="color:#f92672">*</span>fse;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11</span><span>    <span style="color:#66d9ef">struct</span> kfs_event_arg <span style="color:#f92672">*</span>fse_arg;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12</span><span>  
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13</span><span>    fse <span style="color:#f92672">=</span> (<span style="color:#66d9ef">struct</span> kfs_event_a <span style="color:#f92672">*</span>)(<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">char</span><span style="color:#f92672">*</span>)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14</span><span>          ((<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">char</span><span style="color:#f92672">*</span>)ptrBuffer <span style="color:#f92672">+</span> <span style="color:#f92672">*</span>ptrCurrentOffset);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15</span><span>  
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16</span><span>    <span style="color:#75715e">//handle dropped events
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17</span><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">if</span>(fse<span style="color:#f92672">-&gt;</span>type <span style="color:#f92672">==</span> FSE_EVENTS_DROPPED)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18</span><span>    {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19</span><span>        <span style="color:#75715e">//err msg
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20</span><span><span style="color:#75715e"></span>        logMsg(LOG_ERR, <span style="color:#e6db74">@&#34;file-system events dropped by kernel&#34;</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21</span><span>        
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22</span><span>        <span style="color:#75715e">//advance to next
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23</span><span><span style="color:#75715e"></span>        <span style="color:#f92672">*</span>ptrCurrentOffset <span style="color:#f92672">+=</span> <span style="color:#66d9ef">sizeof</span>(kfs_event_a) <span style="color:#f92672">+</span> <span style="color:#66d9ef">sizeof</span>(fse<span style="color:#f92672">-&gt;</span>type);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24</span><span>        
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25</span><span>        <span style="color:#75715e">//exit early
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26</span><span><span style="color:#75715e"></span>        <span style="color:#66d9ef">return</span> nil;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27</span><span>    }
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28</span><span>    
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29</span><span>    <span style="color:#f92672">*</span>ptrCurrentOffset <span style="color:#f92672">+=</span> <span style="color:#66d9ef">sizeof</span>(<span style="color:#66d9ef">struct</span> kfs_event_a);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30</span><span>    fse_arg <span style="color:#f92672">=</span> (<span style="color:#66d9ef">struct</span> kfs_event_arg <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>ptrBuffer[<span style="color:#f92672">*</span>ptrCurrentOffset];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31</span><span>    
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32</span><span>    <span style="color:#75715e">//save path
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33</span><span><span style="color:#75715e"></span>    path <span style="color:#f92672">=</span> [NSString stringWithUTF8String:fse_arg<span style="color:#f92672">-&gt;</span>data];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34</span><span>    
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35</span><span>    <span style="color:#75715e">//skip over path
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36</span><span><span style="color:#75715e"></span>    <span style="color:#f92672">*</span>ptrCurrentOffset <span style="color:#f92672">+=</span> <span style="color:#66d9ef">sizeof</span>(kfs_event_arg) <span style="color:#f92672">+</span> fse_arg<span style="color:#f92672">-&gt;</span>pathlen ;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">37</span><span>    
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">38</span><span>    argType <span style="color:#f92672">=</span> (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">short</span> <span style="color:#f92672">*</span>)(<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">char</span><span style="color:#f92672">*</span>)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">39</span><span>              ((<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">char</span><span style="color:#f92672">*</span>)ptrBuffer <span style="color:#f92672">+</span> <span style="color:#f92672">*</span>ptrCurrentOffset);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">40</span><span>    argLen  <span style="color:#f92672">=</span> (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">short</span> <span style="color:#f92672">*</span>) (ptrBuffer <span style="color:#f92672">+</span> <span style="color:#f92672">*</span>ptrCurrentOffset <span style="color:#f92672">+</span> <span style="color:#ae81ff">2</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">41</span><span>    
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">42</span><span>    (<span style="color:#f92672">*</span>argType <span style="color:#f92672">==</span>  FSE_ARG_DONE) <span style="color:#f92672">?</span> arg_len <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x2</span> <span style="color:#f92672">:</span> arg_len <span style="color:#f92672">=</span> (<span style="color:#ae81ff">4</span> <span style="color:#f92672">+</span> <span style="color:#f92672">*</span>argLen);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">43</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">44</span><span>    <span style="color:#f92672">*</span>ptrCurrentOffset <span style="color:#f92672">+=</span> arg_len;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">45</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">46</span><span>    ...</span></span></code></pre></div>
<p>Finally, (and most problematic) though the file events delivered via <code>/dev/fsevents</code> contain information about the process responsible for generating the file event (<code>struct kfs_event_a</code>), this information is simply a process identifier (<code>pid</code>):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ObjC" data-lang="ObjC"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span><span style="color:#66d9ef">typedef</span> <span style="color:#66d9ef">struct</span> kfs_event_a {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2</span><span>    uint16_t type;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3</span><span>    uint16_t refcount;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4</span><span>    pid_t    pid;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5</span><span>} kfs_event_a;</span></span></code></pre></div>
<p>When building a comprehensive file monitor (especially as part of a security tool), one generally requires more information about the responsible process, such as its path and code-signing information.</p>
<div class="note">
<p>Generating code-signing process via pid, is (somewhat) non-trivial and may also be rather computationally (CPU) intensive.</p>
</div> 
<p>Although there exist APIs (such as <code>proc_pidpath</code>) to generate more comprehensive process information solely from a <code>pid</code>, such APIs unsurprisingly fail if the process as (already) terminated. As there is some inherent delay in file events delivered via <code>/dev/fsevents</code>, this is actually not uncommon (think malware installers that simply persist a binary then (quickly) exit).</p>
<p>Worse, if the <code>pid</code> is reused one may actually mis-identify the process that generated the file event. For a security product, this is rather unacceptable! (For other &ldquo;issues&rdquo; with <code>pids</code> see: &ldquo;<a href="https://saelo.github.io/presentations/warcon18_dont_trust_the_pid.pdf">Don&rsquo;t Trust the PID! </a>&rdquo;).</p>
<div class="note">
<p>It is also possible to receive file I/O events via the OpenBSM subsystem. However, there are limitations to this approach as well, as we highlighted in previous blog <a href="blog_0x47.html">post</a>.</p>
</div> 
<p>As such, until now, the only way to realize a truly effective file monitor was via code running in ring-0 (the kernel).</p>
<h3 id="apples-endpoint-security-framework">Apple&rsquo;s Endpoint Security Framework</h3>
<p>With Apple&rsquo;s push to kick 3rd-party developers (including security products) out of the kernel, coupled with the realization (finally!) that the existing subsystems were rather archaic and dated, Apple recently announced the new, user-mode &ldquo;Endpoint Security Framework&rdquo; (that provides a user-mode interface to a new &ldquo;Endpoint Security Subsystem&rdquo;).</p>
<p>As we&rsquo;ll see, this framework addresses many of the aforementioned issues &amp; shortcomings!
<br>
<br>
Specifically it provides a:</p>
<ul>
<li>well-defined and (relatively) simple API</li>
<li>comprehensive process (including code-signing), information for all events</li>
<li>the ability to proactively respond to file events (though here, our file monitor will be passive).</li>
</ul>
<p>I&rsquo;m often somewhat critical of Apple&rsquo;s security posture (or lack thereof). However, the &ldquo;Endpoint Security Framework&rdquo; is potentially a game-changer for those of us seeking to write robust user-mode security tools for macOS. Mahalo Apple! Personally I&rsquo;m stoked 🥳</p>
<div class="note">
<p>This blog is practical walk-thru of creating a file monitor which leverages Apple&rsquo;s new framework. For more information on the Endpoint Security Framework, see Apple&rsquo;s developer documentation:</p>
<ul>
<li><a href="https://developer.apple.com/documentation/endpointsecurity?changes=latest_minor">Endpoint Security Framework</a></li>
</ul>
</div>
<p>In this blog, we&rsquo;ll illustrate exactly how to create a comprehensive user-mode file monitor that leverages Apple&rsquo;s new framework.</p>
<div class="note">
<p>As noted in our previous blog <a href="blog_0x47.html">post</a> there are a few prerequisites to leverage the Endpoint Security Framework that include:</p>
<ul>
<li>
<p>The <code>com.apple.developer.endpoint-security.client</code> entitlement
<br>
This can be requested from Apple via this <a href="https://developer.apple.com/contact/request/system-extension/">link</a>. Until then (I&rsquo;m still waiting 😅), give yourself that entitlement (i.e. in your app&rsquo;s <code>$(ProductName).entitlements</code> file, and disable SIP such that it remains pseudo-unenforced).</p>
<p>&lt;dict&gt;
<br>
 &lt;key&gt;<b>com.apple.developer.endpoint-security.client</b>&lt;/key&gt;
<br>
 &lt;true/&gt;
<br>
&lt;/dict&gt;</p>
</li>
<li>
<p>Xcode 11/macOS 10.15 SDK
<br>
As these are both (still) in beta, for now, it&rsquo;s recommended to perform development in a virtual machine (running macOS 10.15, beta).</p>
</li>
<li>
<p>macOS 10.15 (Catalina)
<br>
It appears the Endpoint Security Framework will not be made available to older versions of macOS. As such, any tools the leverage this framework will only run on 10.15 or newer.</p>
</li>
</ul>
</div>
<p>Ok enough chit-chat, let&rsquo;s dive in!
<br>
<br>
Our goal is simple: create a comprehensive user-mode file monitor that leverages Apple&rsquo;s new &ldquo;Endpoint Security Framework&rdquo;.
<br>
<br>
Besides &ldquo;capturing&rdquo; file I/O events, we&rsquo;re also interested in:</p>
<ul>
<li>
<p>the type of event (create, write, etc.)</p>
</li>
<li>
<p>the path(s) of the file ((possibly) source and destination)</p>
</li>
<li>
<p>the process responsible for the event, including its:</p>
</li>
<li>
<p>process id (pid)</p>
</li>
<li>
<p>process path</p>
</li>
<li>
<p>any process code-signing information</p>
</li>
</ul>
<p>&hellip;luckily, unlike reading events off <code>/dev/fsevents</code> the new Endpoint Security framework makes this a breeze!</p>
<p>As noted in our previous blog <a href="blog_0x47.html">post</a>, in order to subscribe to events from the &ldquo;Endpoint Security Subsystem&rdquo;, we must first create a new &ldquo;Endpoint Security&rdquo; client. The <code>es_new_client</code> function provides the interface to perform this action:</p>
<img src="../images/blog/blog_0x47/es_new_client.png"  width="75%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;"> </center>

<p>In code, we first include the <code>EndpointSecurity.h</code> file, declare a global variable (type: <code>es_client_t*</code>), then invoke the <code>es_new_client</code> function:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ObjC" data-lang="ObjC"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span><span style="color:#75715e">#import &lt;EndpointSecurity/EndpointSecurity.h&gt;
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span><span style="color:#75715e">//(global) endpoint client
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span><span style="color:#75715e"></span>es_client_t<span style="color:#f92672">*</span> endpointClient <span style="color:#f92672">=</span> nil;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span><span style="color:#75715e">//create client
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span><span style="color:#75715e">// callback invokes (user) callback for new processes
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span><span style="color:#75715e"></span>es_new_client(<span style="color:#f92672">&amp;</span>endpointClient, <span style="color:#f92672">^</span>(es_client_t <span style="color:#f92672">*</span>client, <span style="color:#66d9ef">const</span> es_message_t <span style="color:#f92672">*</span>message)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span>{
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span>    <span style="color:#75715e">//process events
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11</span><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12</span><span>});</span></span></code></pre></div>
<p>Note that the <code>es_new_client</code> function takes an (out) pointer to the variable of type <code>es_client_t</code>. Once the function returns, this variable will hold the initialized endpoint security client (required by all other endpoint security APIs). The second parameter of the <code>es_new_client</code> function is a block that will be automatically invoked on endpoint security events (more on this shortly!)</p>
<p>If all is well, the <code>es_new_client</code> function will return ES_NEW_CLIENT_RESULT_SUCCESS indicating that it has created a newly initialized Endpoint Security client (<code>es_client_t</code>) for us to use.</p>
<div class="note">
To compile the above code, link against the Endpoint Security Framework (libEndpointSecurity)
<img src="../images/blog/blog_0x47/framework.png"  width="50%" class="center" style="border-radius: 4px;">
<center style="color:#787878; padding-top:5px;"> </center>
</div>
<p>Once we&rsquo;ve created an instance of a <code>es_new_client</code>, we now must tell the Endpoint Security subsystem what events we are interested in (or want to &ldquo;subscribe to&rdquo;, in Apple parlance). This is accomplished via the <code>es_subscribe</code> function (documented <a href="https://developer.apple.com/documentation/endpointsecurity/3228854-es_subscribe?language=objc">here</a> and in the <code>ESClient.h</code> header file):</p>
<img src="../images/blog/blog_0x47/es_subscribe.png"  width="75%" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;"> </center>

<p>This function takes the initialized endpoint client (returned by the <code>es_new_client</code> function), an array of events of interest, and the size of said array:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ObjC" data-lang="ObjC"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span><span style="color:#75715e">//(process) events of interest
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span><span style="color:#75715e"></span>es_event_type_t events[] <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span>    ES_EVENT_TYPE_NOTIFY_CREATE,
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span>    ES_EVENT_TYPE_NOTIFY_WRITE,
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span>    ...
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span>};
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span><span style="color:#75715e">//subscribe to events
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span><span style="color:#75715e"></span><span style="color:#66d9ef">if</span>(ES_RETURN_SUCCESS <span style="color:#f92672">!=</span> es_subscribe(endpointClient, events, 
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span>                             <span style="color:#66d9ef">sizeof</span>(events)<span style="color:#f92672">/</span><span style="color:#66d9ef">sizeof</span>(events[<span style="color:#ae81ff">0</span>])))
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11</span><span>{
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12</span><span>    <span style="color:#75715e">//err msg
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13</span><span><span style="color:#75715e"></span>    NSLog(<span style="color:#e6db74">@&#34;ERROR: es_subscribe() failed&#34;</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14</span><span>    
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15</span><span>    <span style="color:#75715e">//bail
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16</span><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">goto</span> bail;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17</span><span>} </span></span></code></pre></div>
<p>The events of interest depends on well, what events are of interest to you! As we&rsquo;re writing a file monitor we&rsquo;re (only) interested in file-related events such as:</p>
<ul>
<li>
<p><code>ES_EVENT_TYPE_NOTIFY_CREATE</code>
<br>
&ldquo;A type that represents file creation notification events.&rdquo;</p>
</li>
<li>
<p><code>ES_EVENT_TYPE_NOTIFY_OPEN</code>
<br>
&ldquo;A type that represents file opening notification events.&rdquo;</p>
</li>
<li>
<p><code>ES_EVENT_TYPE_NOTIFY_WRITE</code>
<br>
&ldquo;A type that represents file writing notification events.&rdquo;</p>
</li>
<li>
<p><code>ES_EVENT_TYPE_NOTIFY_CLOSE</code>
<br>
&ldquo;A type that represents file closing notification events.&rdquo;</p>
</li>
<li>
<p><code>ES_EVENT_TYPE_NOTIFY_RENAME</code>
<br>
&ldquo;A type that represents file renaming notification events.&rdquo;</p>
</li>
<li>
<p><code>ES_EVENT_TYPE_NOTIFY_LINK</code>
<br>
&ldquo;A type that represents link creation notification events.&rdquo;</p>
</li>
<li>
<p><code>ES_EVENT_TYPE_NOTIFY_UNLINK</code>
<br>
&ldquo;A type that represents link unlinking notification events.&rdquo;</p>
</li>
</ul>
<div class="note">
See Apple's [documentation](https://developer.apple.com/documentation/endpointsecurity/es_event_type_t?language=objc) for other events types in the `es_event_type_t` enumeration.
</div>
<p>Once the <code>es_subscribe</code> function successfully returns (<code>ES_RETURN_SUCCESS</code>), the Endpoint Security subsystem will start delivering messages (read: file events).</p>
<p>Recall that the final argument of the <code>es_new_client</code> function is a callback block (or handler). Apple states: &ldquo;The handler block&hellip;will be run on all messages sent to this client.&rdquo;</p>
<p>The block is invoked with the endpoint client, and most importantly the message from the Endpoint Security subsystem. This message variable is a pointer of type <code>es_message_t</code> (i.e. <code>es_message_t*</code>).</p>
<p>Notable members of the <code>es_message_t</code> include:</p>
<ul>
<li>
<p><code>es_process_t * process</code>
<br>
A pointer to a structure that describes the process responsible for the file event.</p>
</li>
<li>
<p><code>es_event_type_t event_type</code>
<br>
The type of event (that will match one of the events we subscribed to, e.g. <code>ES_EVENT_TYPE_NOTIFY_CREATE</code>)</p>
</li>
<li>
<p><code>event_type event</code>
<br>
An event specific structure (i.e. <code>es_event_create_t</code>)</p>
</li>
</ul>
<p>Though the <code>event</code> member of the <code>message</code> structure (<code>message-&gt;event</code>) is event specific, for all file events it is largely the same. For example, compare the <code>es_event_write_t</code> and <code>es_event_create_t</code> structures:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
$ less MacOSX10.15.sdk/usr/include/EndpointSecurity/ESMessage.h

typedef struct {
        es_file_t * _Nullable target;
        uint8_t reserved[64];
} es_event_write_t;

typedef struct {
        es_file_t * _Nullable target;
        uint8_t reserved[64];
} es_event_create_t;

</pre>
</div>
<p>Both contain a pointer to a <code>es_file_t</code> structure, which contains a path to the file (created, written to, etc.):</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
$ less MacOSX10.15.sdk/usr/include/EndpointSecurity/ESMessage.h

/**
 * es_file_t provides the inode/devno &amp; path to a file that relates to a security event
 * the path may be truncated, which is indicated by the path_truncated flag.
 */
typedef struct {
  es_string_token_t path;
  bool path_truncated;
  union {
          dev_t devno;
          fsid_t fsid;
  };
  ino64_t inode;
} es_file_t;
</pre>
</div>
<p>Note however, some file events (such as the <code>es_event_rename_t</code> event) involve both a source and destination file:</p>
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">
typedef struct {
  es_file_t * _Nullable source;
  es_destination_type_t destination_type;
  union {
    es_file_t * _Nullable existing_file;
    struct {
            es_file_t * _Nullable dir;
            es_string_token_t filename;
    } new_path;
  } destination;
  uint8_t reserved[64];
} es_event_rename_t;
</pre>
</div>
<p>All file events messages also contain a pointer to a <code>es_process_t</code> structure (<code>message-&gt;process</code>) for the responsible process (i.e. that generated the file event). As detailed in our previous <a href="blog_0x47.html">post</a>, this structure contains full process information (including pid, path, and code-signing information).</p>
<p>At this point we&rsquo;re stoked as we&rsquo;re receiving all file events along with full details about the responsible process. (No more worrying about pid lookups failing or returning the incorrect process!) 😅</p>
<p>Let&rsquo;s now look illustrate this in code.
<br>
<br>
First, in the <code>es_new_client</code> message callback, we instantiate a (custom) <code>File</code> object, passing in the received <code>es_message_t</code> message:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ObjC" data-lang="ObjC"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span><span style="color:#75715e">//create client
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span><span style="color:#75715e">// callback invoked on file events
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span><span style="color:#75715e"></span>es_new_client(<span style="color:#f92672">&amp;</span>endpointClient, <span style="color:#f92672">^</span>(es_client_t <span style="color:#f92672">*</span>client, <span style="color:#66d9ef">const</span> es_message_t <span style="color:#f92672">*</span>message)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span>{
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span>    <span style="color:#75715e">//new file obj
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span><span style="color:#75715e"></span>    File<span style="color:#f92672">*</span> file <span style="color:#f92672">=</span> nil;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span>    
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span>    <span style="color:#75715e">//init file obj
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span><span style="color:#75715e"></span>    file <span style="color:#f92672">=</span> [[File alloc] init:(es_message_t<span style="color:#f92672">*</span> _Nonnull)message];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span>    <span style="color:#66d9ef">if</span>(nil <span style="color:#f92672">!=</span> file)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11</span><span>    {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12</span><span>        <span style="color:#75715e">//invoke user callback
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13</span><span><span style="color:#75715e"></span>        callback(file);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14</span><span>    }
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15</span><span>});</span></span></code></pre></div>
<p>This (custom) <code>File</code> object&rsquo;s <code>init:</code> method simply parses out relevant information from the  <code>es_process_t</code> structure (such as process id, path, and code-signing information as detailed in our previous <a href="blog_0x47.html">post</a>), and then extracts the file path(s):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ObjC" data-lang="ObjC"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1</span><span><span style="color:#75715e">//set process
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2</span><span><span style="color:#75715e"></span>self.process <span style="color:#f92672">=</span> [[Process alloc] init:message];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4</span><span><span style="color:#75715e">//extract path(s)
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5</span><span><span style="color:#75715e">// logic is specific to event
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6</span><span><span style="color:#75715e"></span>[self extractPaths:message];</span></span></code></pre></div>
<p>The <code>extractPaths:</code> method contains event specific logic (as recall some, but not all, file events contain both a source and destination path):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ObjC" data-lang="ObjC"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span><span style="color:#75715e">//extract source &amp; destination path
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span><span style="color:#75715e">// this requires event specific logic
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span><span style="color:#75715e"></span>-(<span style="color:#66d9ef">void</span>)<span style="color:#a6e22e">extractPaths:</span>(es_message_t<span style="color:#f92672">*</span>)message
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span>{
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span>  <span style="color:#75715e">//event specific logic
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">switch</span> (message<span style="color:#f92672">-&gt;</span>event_type) {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span>      
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span>    <span style="color:#75715e">//create
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">case</span> ES_EVENT_TYPE_NOTIFY_CREATE:
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span>        self.destinationPath <span style="color:#f92672">=</span> convertStringToken(<span style="color:#f92672">&amp;</span>message<span style="color:#f92672">-&gt;</span>event.create.target<span style="color:#f92672">-&gt;</span>path);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11</span><span>        <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12</span><span>        
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13</span><span>    <span style="color:#75715e">//write
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14</span><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">case</span> ES_EVENT_TYPE_NOTIFY_WRITE:
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15</span><span>        self.destinationPath <span style="color:#f92672">=</span> convertStringToken(<span style="color:#f92672">&amp;</span>message<span style="color:#f92672">-&gt;</span>event.write.target<span style="color:#f92672">-&gt;</span>path);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16</span><span>        <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17</span><span>        
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18</span><span>    ...
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19</span><span>        
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20</span><span>    <span style="color:#75715e">//rename
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21</span><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">case</span> ES_EVENT_TYPE_NOTIFY_RENAME:
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22</span><span>            
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23</span><span>        <span style="color:#75715e">//set (src) path
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24</span><span><span style="color:#75715e"></span>        self.sourcePath <span style="color:#f92672">=</span> convertStringToken(<span style="color:#f92672">&amp;</span>message<span style="color:#f92672">-&gt;</span>event.rename.source<span style="color:#f92672">-&gt;</span>path);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25</span><span>        
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26</span><span>        <span style="color:#75715e">//existing file (&#39;ES_DESTINATION_TYPE_EXISTING_FILE&#39;)
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27</span><span><span style="color:#75715e"></span>        <span style="color:#66d9ef">if</span>(ES_DESTINATION_TYPE_EXISTING_FILE <span style="color:#f92672">==</span> message<span style="color:#f92672">-&gt;</span>event.rename.destination_type)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28</span><span>        {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29</span><span>            <span style="color:#75715e">//set (dest) file
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30</span><span><span style="color:#75715e"></span>            self.destinationPath <span style="color:#f92672">=</span> convertStringToken(<span style="color:#f92672">&amp;</span>message<span style="color:#f92672">-&gt;</span>event.rename.destination.existing_file<span style="color:#f92672">-&gt;</span>path);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31</span><span>        }
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32</span><span>        <span style="color:#75715e">//new path (&#39;ES_DESTINATION_TYPE_NEW_PATH&#39;)
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33</span><span><span style="color:#75715e"></span>        <span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34</span><span>        {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35</span><span>            <span style="color:#75715e">//set (dest) path
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36</span><span><span style="color:#75715e"></span>            <span style="color:#75715e">// combine dest dir + dest file
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">37</span><span><span style="color:#75715e"></span>            self.destinationPath <span style="color:#f92672">=</span> [convertStringToken(<span style="color:#f92672">&amp;</span>message<span style="color:#f92672">-&gt;</span>event.rename.destination.new_path.dir<span style="color:#f92672">-&gt;</span>path) stringByAppendingPathComponent:convertStringToken(<span style="color:#f92672">&amp;</span>message<span style="color:#f92672">-&gt;</span>event.rename.destination.new_path.filename)];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">38</span><span>        }
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">39</span><span>        
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">40</span><span>        <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">41</span><span>          
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">42</span><span>      ...
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">43</span><span>  }
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">44</span><span>  
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">45</span><span>  <span style="color:#66d9ef">return</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">46</span><span>}</span></span></code></pre></div>
<p>Once the <code>File</code> object&rsquo;s <code>init:</code> method returns, we have a comprehensive (and fully parsed) representation of the reported file event.</p>
<h3 id="file-monitor-library">File Monitor Library</h3>
<p>As noted, several of Objective-See&rsquo;s tools track file events but currently do so via inefficient and (now) antiquated means.</p>
<p>Lucky us, as shown in this blog, we can now leverage Apple&rsquo;s Endpoint Security Subsystem to effectively and comprehensively monitor file events (from user-mode!).</p>
<p>As such, today, I&rsquo;m releasing an open-source file monitoring library, that implements everything we&rsquo;ve discussed here today 🥳</p>
<div class="note">
&nbsp;On github:
<p>  <a href="https://github.com/objective-see/FileMonitor">File Monitoring Library</a></p>
</div>
<p>It&rsquo;s fairly simple to leverage this library in your own (non-commercial) tools:</p>
<ol>
<li>
<p>Build the library, <code>libFileMonitor.a</code></p>
</li>
<li>
<p>Add the library and its header file (<code>FileMonitor.h</code>) to your project:
<br>
<br>
<code>#import &quot;FileMonitor.h&quot;</code>
<br>
<br>
<img src="../images/blog/blog_0x48/frameworks.png"  width="" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;"> </center>

<br>
As shown above, you&rsquo;ll also have link against the <code>libbsm</code> (for <code>audit_token_to_pid</code>) and <code>libEndpointSecurity</code> libraries.</p>
</li>
<li>
<p>Add the <code>com.apple.developer.endpoint-security.client</code> entitlement (to your project&rsquo;s <code>$(ProductName).entitlements</code> file).
<br>
<br>
<img src="../images/blog/blog_0x47/entitlements.png"  width="" class="center" style="border-radius: 4px;">

<center style="color:#787878; padding-top:5px;"> </center>
</p>
</li>
<li>
<p>Write some code to interface with the library!
<br>
<br>
This final steps involves instantiating a <code>FileMonitor</code> object and invoking the <code>start</code> method (passing in a callback block that&rsquo;s invoked on file events). Below is some sample code that implements this logic:</p>
</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ObjC" data-lang="ObjC"><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1</span><span><span style="color:#75715e">//init monitor
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2</span><span><span style="color:#75715e"></span>FileMonitor<span style="color:#f92672">*</span> fileMon <span style="color:#f92672">=</span> [[FileMonitor alloc] init];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4</span><span><span style="color:#75715e">//define block
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5</span><span><span style="color:#75715e">// automatically invoked upon file events
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6</span><span><span style="color:#75715e"></span>FileCallbackBlock block <span style="color:#f92672">=</span> <span style="color:#f92672">^</span>(File<span style="color:#f92672">*</span> file)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7</span><span>{
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8</span><span>  <span style="color:#66d9ef">switch</span>(file.event)
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9</span><span>  {
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10</span><span>    <span style="color:#75715e">//create
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11</span><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">case</span> ES_EVENT_TYPE_NOTIFY_CREATE:
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12</span><span>        NSLog(<span style="color:#e6db74">@&#34;FILE CREATE (&#39;ES_EVENT_TYPE_NOTIFY_CREATE&#39;)&#34;</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13</span><span>        <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15</span><span>    <span style="color:#75715e">//write
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16</span><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">case</span> ES_EVENT_TYPE_NOTIFY_WRITE:
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17</span><span>        NSLog(<span style="color:#e6db74">@&#34;FILE WRITE (&#39;ES_EVENT_TYPE_NOTIFY_WRITE&#39;)&#34;</span>);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18</span><span>        <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20</span><span>    <span style="color:#75715e">//print info
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21</span><span><span style="color:#75715e"></span>    NSLog(<span style="color:#e6db74">@&#34;%@&#34;</span>, file);
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22</span><span>};
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24</span><span><span style="color:#75715e">//start monitoring
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25</span><span><span style="color:#75715e">// pass in block for events
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26</span><span><span style="color:#75715e"></span>[fileMon start:block];
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27</span><span>
</span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28</span><span><span style="color:#75715e">//run loop
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29</span><span><span style="color:#75715e">// as don&#39;t want to exit
</span></span></span><span style="display:flex;"><span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30</span><span><span style="color:#75715e"></span>[[NSRunLoop currentRunLoop] run];</span></span></code></pre></div>
<p>Once the <code>[fileMon start:block];</code> method has been invoked, the File Monitoring library will automatically invoke the callback (<code>block</code>), on file events, returning a <code>File</code> object.</p>
<p>The <code>File</code> object is declared in the library&rsquo;s header file; <code>FileMonitor.h</code>. This object contains information about the file event ((possibly) source and destination path) and the process responsible for the event (in a <code>Process</code> object). Take a peek at the <code>FileMonitor.h</code> file for more details.</p>
<p>Once compiled, we&rsquo;re ready to start monitoring for file events!
<br>
<br>
For example, we run: <code>$ echo &quot;objective-see rules&quot; &gt; /tmp/test</code>, which generates an open, write, and close file I/O events:
<div style="border: 1px solid gray; border-radius: 4px; padding-left:25px; padding-right:25px; overflow-wrap: break-word; background-color:#2A2E35; color:lime;">
    <pre style="font-size: 18px;">

# ./fileMonitor
Starting file monitor...[ok]

FILE OPEN ('ES_EVENT_TYPE_NOTIFY_OPEN')
source path: (null)
destination path: /private/tmp/test

process: pid: 649
path: /bin/zsh
uid: 501
signing info: {
    cdHash = BD67298030CA90256B3999A118DCF2FFE5352A9E;
    csFlags = 603996161;
    isPlatforBinary = 1;
    signatureIdentifier = "com.apple.zsh";
}

FILE WRITE ('ES_EVENT_TYPE_NOTIFY_WRITE')
source path: (null)
destination path: /private/tmp/test

process: pid: 649
path: /bin/zsh
uid: 501
signing info: {
    cdHash = BD67298030CA90256B3999A118DCF2FFE5352A9E;
    csFlags = 603996161;
    isPlatforBinary = 1;
    signatureIdentifier = "com.apple.zsh";
}

FILE CLOSE ('ES_EVENT_TYPE_NOTIFY_CLOSE')
source path: (null)
destination path: /private/tmp/test

process: pid: 649
path: /bin/zsh
uid: 501
signing info: {
    cdHash = BD67298030CA90256B3999A118DCF2FFE5352A9E;
    csFlags = 603996161;
    isPlatforBinary = 1;
    signatureIdentifier = "com.apple.zsh";
}
</pre>
</div></p>
<h3 id="conclusion">Conclusion</h3>
<p>Previously, writing a (user-mode) file monitor for macOS was not a trivial task. Thanks to Apple&rsquo;s new Endpoint Security framework/subsystem (on macOS 10.15+), it&rsquo;s now a breeze!</p>
<p>In short, one simply invokes the <code>es_new_client</code> &amp; <code>es_subscribe</code> functions to subscribe to events of interest (recalling that the <code>com.apple.developer.endpoint-security.client</code> entitlement is required).</p>
<p>For a file monitor, we illustrated how to subscribe to the file-related events such as:</p>
<ul>
<li>
<p><code>ES_EVENT_TYPE_NOTIFY_CREATE</code></p>
</li>
<li>
<p><code>ES_EVENT_TYPE_NOTIFY_OPEN</code></p>
</li>
<li>
<p><code>ES_EVENT_TYPE_NOTIFY_WRITE</code></p>
</li>
</ul>
<p>We then showed how to extract the relevant file and (responsible) process structures and parse out all relevant meta-data.</p>
<p>Finally we discussed an open-source file monitoring library that implements everything we&rsquo;ve discussed here today. 🥳
\</p>
<div class="note">
<center>
❤️ Love these blog posts and/or want to support my research and tools? 
\
You can support them via my [Patreon](https://www.patreon.com/bePatron?c=701171) page!
\
</center></div>
</section>

    </div>

    
<script src="/js/cookies.js"></script>
<script src="/social/ss-social.js"></script>
<link href="/social/ss-social.css" rel="stylesheet" />

<script> 
    $(function(){
        
        
        
        if("" == getCookie("acceptedCookies")) 
        {
            console.log('ok showing!')

            document.getElementById("cookies").style.display = "block";
        }

    });
</script>

<script>
function acceptCookies() {

    
    setCookie("acceptedCookies", "yes", 365);

    
    document.getElementById("cookies").style.display = "none";
}
</script>

<br>
<br>
<div id="cookies" class="cookie" style="padding-left:20px;">
    This website uses cookies to improve your experience.
    <div class="cookieButton">
        
        <button class="menuicon button-4" role="button" onclick="acceptCookies()" style="margin-top: 12px; float: right; padding:3px; padding-left: 10px; padding-right: 10px;">Okay!</button>
    </div>
</div>
<nav role="footer">
<ul>

    <li>
        <a href="mailto:contact@objective-see.com" class="menubutton icon"><span class="ss-icon" style="overflow-y: hidden;">&#x2709;</span></a>
    </li>

     <li>
        <a href="rss.xml" class="menubutton icon"><span class="ss-icon" style="overflow-y: hidden;">&#xE310;</span></a>
    </li>

    <li>
        <a href="https://www.youtube.com/channel/UCQycc8VDhHuNkZlKSSTDHzw" class="menubutton icon"><span class="ss-icon" style="overflow-y: hidden;">&#xF630;</span></a>
    </li>
   
    <li>
        <a href="https://twitter.com/objective_see" class="menubutton icon"><span class="ss-icon">&#xF611;</span></a>
    </li>
    
    <li>
         <form action="support.html" style="display: inline;">
            <button class="menuicon button-4" role="button" style="margin-top: 7px; float: right; padding:3px; padding-left: 10px; padding-right: 10px;">Support Us!</button>
        </form>
        
    </li>

    <li>
        <div style="margin-top: 10px;">
        Signup for our <a class="inlineLink" target="_blank" href="http://eepurl.com/bXpXeT">newsletter </a> »
        </div>
    </li>

</ul>
</nav>

  </body>
</html>