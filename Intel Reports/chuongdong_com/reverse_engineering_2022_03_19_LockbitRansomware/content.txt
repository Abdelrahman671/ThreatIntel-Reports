<!DOCTYPE html>
<html lang="en-GB">

  <head>
    <!-- General meta -->
    <meta name="viewport" content="width=device-width, initial-scale=1">

    

    
      <!-- Begin Jekyll SEO tag v2.8.0 -->
<title>LockBit Ransomware v2.0 | Chuong Dong</title>
<meta name="generator" content="Jekyll v3.9.5" />
<meta property="og:title" content="LockBit Ransomware v2.0" />
<meta name="author" content="Chuong Dong" />
<meta property="og:locale" content="en_GB" />
<meta name="description" content="Malware Analysis Report - LockBit Ransomware v2.0" />
<meta property="og:description" content="Malware Analysis Report - LockBit Ransomware v2.0" />
<link rel="canonical" href="https://cdong1012.github.io//reverse%20engineering/2022/03/19/LockbitRansomware/" />
<meta property="og:url" content="https://cdong1012.github.io//reverse%20engineering/2022/03/19/LockbitRansomware/" />
<meta property="og:site_name" content="Chuong Dong" />
<meta property="og:image" content="https://cdong1012.github.io//assets/logos/kunal-logo.png" />
<meta property="og:type" content="article" />
<meta property="article:published_time" content="2022-03-19T00:00:00-04:00" />
<meta name="twitter:card" content="summary_large_image" />
<meta property="twitter:image" content="https://cdong1012.github.io//assets/logos/kunal-logo.png" />
<meta property="twitter:title" content="LockBit Ransomware v2.0" />
<meta name="twitter:site" content="@cPeterr" />
<meta name="twitter:creator" content="@Chuong Dong" />
<script type="application/ld+json">
{"@context":"https://schema.org","@type":"BlogPosting","author":{"@type":"Person","name":"Chuong Dong"},"dateModified":"2022-03-19T00:00:00-04:00","datePublished":"2022-03-19T00:00:00-04:00","description":"Malware Analysis Report - LockBit Ransomware v2.0","headline":"LockBit Ransomware v2.0","image":"https://cdong1012.github.io//assets/logos/kunal-logo.png","mainEntityOfPage":{"@type":"WebPage","@id":"https://cdong1012.github.io//reverse%20engineering/2022/03/19/LockbitRansomware/"},"publisher":{"@type":"Organization","logo":{"@type":"ImageObject","url":"https://cdong1012.github.io//assets/logos/logo-cdong.gif"},"name":"Chuong Dong"},"url":"https://cdong1012.github.io//reverse%20engineering/2022/03/19/LockbitRansomware/"}</script>
<!-- End Jekyll SEO tag -->

    

    <link rel="manifest" href="/manifest.json">
    <meta name="theme-color" content="#242e2b"/>

    
      
<style>/*! normalize.css v4.1.1 | MIT License | github.com/necolas/normalize.css */@import url("https://fonts.googleapis.com/css?family=Karla:700,700");@import url("https://fonts.googleapis.com/css?family=Space Mono:400,700");html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}article,aside,details,figcaption,figure,footer,header,main,menu,nav,section,summary{display:block}audio,canvas,progress,video{display:inline-block}audio:not([controls]){display:none;height:0}progress{vertical-align:baseline}template,[hidden]{display:none}a{background-color:transparent;-webkit-text-decoration-skip:objects}a:active,a:hover{outline-width:0}abbr[title]{border-bottom:none;text-decoration:underline;text-decoration:underline dotted}b,strong{font-weight:inherit}b,strong{font-weight:bolder}dfn{font-style:italic}h1{font-size:2em;margin:0.67em 0}mark{background-color:#ff0;color:#000}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-0.25em}sup{top:-0.5em}img{border-style:none}svg:not(:root){overflow:hidden}code,kbd,pre,samp{font-family:monospace, monospace;font-size:1em}figure{margin:1em 40px}hr{box-sizing:content-box;height:0;overflow:visible}button,input,select,textarea{font:inherit;margin:0}optgroup{font-weight:bold}button,input{overflow:visible}button,select{text-transform:none}button,html [type="button"],[type="reset"],[type="submit"]{-webkit-appearance:button}button::-moz-focus-inner,[type="button"]::-moz-focus-inner,[type="reset"]::-moz-focus-inner,[type="submit"]::-moz-focus-inner{border-style:none;padding:0}button:-moz-focusring,[type="button"]:-moz-focusring,[type="reset"]:-moz-focusring,[type="submit"]:-moz-focusring{outline:1px dotted ButtonText}fieldset{border:1px solid #c0c0c0;margin:0 2px;padding:0.35em 0.625em 0.75em}legend{box-sizing:border-box;color:inherit;display:table;max-width:100%;padding:0;white-space:normal}textarea{overflow:auto}[type="checkbox"],[type="radio"]{box-sizing:border-box;padding:0}[type="number"]::-webkit-inner-spin-button,[type="number"]::-webkit-outer-spin-button{height:auto}[type="search"]{-webkit-appearance:textfield;outline-offset:-2px}[type="search"]::-webkit-search-cancel-button,[type="search"]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-input-placeholder{color:inherit;opacity:0.54}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}*{box-sizing:border-box}html,body,div,span,applet,object,iframe,h1,h2,h3,h4,h5,h6,p,blockquote,pre,a,abbr,acronym,address,big,cite,code,del,dfn,em,img,ins,kbd,q,s,samp,small,strike,strong,sub,sup,tt,var,b,u,i,center,dl,dt,dd,ol,ul,li,fieldset,form,label,legend,table,caption,tbody,tfoot,thead,tr,th,td,article,aside,canvas,details,embed,figure,figcaption,footer,header,hgroup,menu,nav,output,ruby,section,summary,time,mark,audio,video{margin:0;padding:0;border:0;font-size:100%;font:inherit;vertical-align:baseline}article,aside,details,figcaption,figure,footer,header,hgroup,menu,nav,section{display:block}html,body{height:100%}a img{border:none}blockquote{quotes:none}blockquote:before,blockquote:after{content:'';content:none}table{border-collapse:collapse;border-spacing:0}caption,th,td{text-align:left;font-weight:normal;vertical-align:middle}html{font-size:75%;-webkit-text-size-adjust:100%;-ms-text-size-adjust:100%}@media screen and (min-width: 40em){html{font-size:87.5%}}@media screen and (min-width: 50em){html{font-size:93.75%}}@media screen and (min-width: 64em){html{font-size:106.25%}}@media screen and (min-width: 100em){html{font-size:118.75%}}body{font-size:1.3333333333rem;font-family:Space Mono, monospace;font-style:normal;font-weight:400;line-height:2rem}@media screen and (min-width: 40em){body{font-size:1.2142857143rem}}@media screen and (min-width: 50em){body{font-size:1.2rem}}@media screen and (min-width: 64em){body{font-size:1.1764705882rem}}@media screen and (min-width: 100em){body{font-size:1.1578947368rem}}a{color:#45a29e;text-decoration:none;transition:color .1s, background-color .1s}a:hover,a:active,a:focus{color:#66fcf1;text-decoration:none}.typeset p a,.typeset li a{background-image:linear-gradient(to bottom, transparent 50%, #45a29e 50%);background-position:0 93%;background-repeat:repeat-x;background-size:100% 0.15rem;text-shadow:0.1rem 0 #161820,0.15rem 0 #161820,-0.1rem 0 #161820,-0.15rem 0 #161820}.typeset p a:hover,.typeset p a:active,.typeset p a:focus,.typeset li a:hover,.typeset li a:active,.typeset li a:focus{background-image:linear-gradient(to bottom, transparent 50%, #66fcf1 50%)}.typeset p{line-height:2rem;margin-bottom:1.49999rem;padding-top:.50001rem;font-feature-settings:'kern', 'onum', 'liga'}@media screen and (min-width: 40em){.typeset p{margin-bottom:1.4553471429rem;padding-top:.5446528571rem}}@media screen and (min-width: 50em){.typeset p{margin-bottom:1.44999rem;padding-top:.55001rem}}@media screen and (min-width: 64em){.typeset p{margin-bottom:1.4411664706rem;padding-top:.5588335294rem}}@media screen and (min-width: 100em){.typeset p{margin-bottom:1.4342005263rem;padding-top:.5657994737rem}}.typeset h1,.typeset h2,.typeset h3,.typeset h4,.typeset h5,.typeset h6{color:#66fcf1;font-family:"Karla", monospace;font-feature-settings:'dlig', 'liga', 'lnum', 'kern';font-style:normal;font-weight:700}.typeset h1,.typeset .alpha{line-height:3rem;font-size:2.3333333333rem;margin-bottom:.37499rem;padding-top:.62501rem}@media screen and (min-width: 40em){.typeset h1,.typeset .alpha{font-size:2.1428571429rem;margin-bottom:.3035614286rem;padding-top:.6964385714rem}}@media screen and (min-width: 50em){.typeset h1,.typeset .alpha{font-size:2.1333333333rem;margin-bottom:.29999rem;padding-top:.70001rem}}@media screen and (min-width: 64em){.typeset h1,.typeset .alpha{font-size:2.3529411765rem;margin-bottom:.3823429412rem;padding-top:.6176570588rem}}@media screen and (min-width: 100em){.typeset h1,.typeset .alpha{font-size:2.6315789474rem;margin-bottom:.4868321053rem;padding-top:.5131678947rem}}.typeset h2,.typeset .beta{line-height:3rem;font-size:2.0833333333rem;margin-bottom:.28124rem;padding-top:.71876rem}@media screen and (min-width: 40em){.typeset h2,.typeset .beta{font-size:1.9rem;margin-bottom:.21249rem;padding-top:.78751rem}}@media screen and (min-width: 50em){.typeset h2,.typeset .beta{font-size:1.8733333333rem;margin-bottom:.20249rem;padding-top:.79751rem}}@media screen and (min-width: 64em){.typeset h2,.typeset .beta{font-size:2.0882352941rem;margin-bottom:.2830782353rem;padding-top:.7169217647rem}}@media screen and (min-width: 100em){.typeset h2,.typeset .beta{font-size:2.3105263158rem;margin-bottom:.3664373684rem;padding-top:.6335626316rem}}.typeset h3,.typeset .gamma{line-height:3rem;font-size:1.8666666667rem;margin-bottom:.19999rem;padding-top:.80001rem}@media screen and (min-width: 40em){.typeset h3,.typeset .gamma{font-size:1.7142857143rem;margin-bottom:.1428471429rem;padding-top:.8571528571rem}}@media screen and (min-width: 50em){.typeset h3,.typeset .gamma{font-size:1.7066666667rem;margin-bottom:.13999rem;padding-top:.86001rem}}@media screen and (min-width: 64em){.typeset h3,.typeset .gamma{font-size:1.7647058824rem;margin-bottom:.1617547059rem;padding-top:.8382452941rem}}@media screen and (min-width: 100em){.typeset h3,.typeset .gamma{font-size:1.8578947368rem;margin-bottom:.1967005263rem;padding-top:.8032994737rem}}.typeset h4,.typeset .delta{line-height:2rem;font-size:1.6666666667rem;margin-bottom:-.37501rem;padding-top:.37501rem}@media screen and (min-width: 40em){.typeset h4,.typeset .delta{font-size:1.5214285714rem;margin-bottom:-.4294742857rem;padding-top:.4294742857rem}}@media screen and (min-width: 50em){.typeset h4,.typeset .delta{font-size:1.5rem;margin-bottom:-.43751rem;padding-top:.43751rem}}@media screen and (min-width: 64em){.typeset h4,.typeset .delta{font-size:1.5705882353rem;margin-bottom:-.4110394118rem;padding-top:.4110394118rem}}@media screen and (min-width: 100em){.typeset h4,.typeset .delta{font-size:1.6368421053rem;margin-bottom:-.3861942105rem;padding-top:.3861942105rem}}.typeset h5,.typeset .epsilon{line-height:2rem;font-size:1.4916666667rem;margin-bottom:-.440635rem;padding-top:.440635rem}@media screen and (min-width: 40em){.typeset h5,.typeset .epsilon{font-size:1.3714285714rem;margin-bottom:-.4857242857rem;padding-top:.4857242857rem}}@media screen and (min-width: 50em){.typeset h5,.typeset .epsilon{font-size:1.3666666667rem;margin-bottom:-.48751rem;padding-top:.48751rem}}@media screen and (min-width: 64em){.typeset h5,.typeset .epsilon{font-size:1.3235294118rem;margin-bottom:-.5036864706rem;padding-top:.5036864706rem}}@media screen and (min-width: 100em){.typeset h5,.typeset .epsilon{font-size:1.3157894737rem;margin-bottom:-.5065889474rem;padding-top:.5065889474rem}}.typeset h6,.typeset .zeta{line-height:2rem;font-size:1.3333333333rem;margin-bottom:-.50001rem;padding-top:.50001rem}@media screen and (min-width: 40em){.typeset h6,.typeset .zeta{font-size:1.2142857143rem;margin-bottom:-.5446528571rem;padding-top:.5446528571rem}}@media screen and (min-width: 50em){.typeset h6,.typeset .zeta{font-size:1.2rem;margin-bottom:-.55001rem;padding-top:.55001rem}}@media screen and (min-width: 64em){.typeset h6,.typeset .zeta{font-size:1.1764705882rem;margin-bottom:-.5588335294rem;padding-top:.5588335294rem}}@media screen and (min-width: 100em){.typeset h6,.typeset .zeta{font-size:1.1578947368rem;margin-bottom:-.5657994737rem;padding-top:.5657994737rem}}.typeset ul,.typeset ol{line-height:2rem;margin-bottom:1.49999rem;padding-top:.50001rem}@media screen and (min-width: 40em){.typeset ul,.typeset ol{margin-bottom:1.4553471429rem;padding-top:.5446528571rem}}@media screen and (min-width: 50em){.typeset ul,.typeset ol{margin-bottom:1.44999rem;padding-top:.55001rem}}@media screen and (min-width: 64em){.typeset ul,.typeset ol{margin-bottom:1.4411664706rem;padding-top:.5588335294rem}}@media screen and (min-width: 100em){.typeset ul,.typeset ol{margin-bottom:1.4342005263rem;padding-top:.5657994737rem}}.typeset ul li,.typeset ol li{font-feature-settings:'kern', 'onum', 'liga';margin-left:2rem}@media screen and (min-width: 40em){.typeset ul li,.typeset ol li{margin-left:0}}.typeset ul li ol,.typeset ul li ul,.typeset ol li ol,.typeset ol li ul{padding-top:1rem;margin-bottom:1rem;margin-left:2rem}.typeset ol{list-style-type:none}.typeset ol li{counter-increment:top-level}.typeset ol li:before{content:counter(top-level) ".";font-feature-settings:'lnum', 'tnum';margin-left:-3rem;position:absolute;text-align:right;width:2em}.typeset ol li ul li:before{content:''}.typeset ol li ul li ol li{counter-increment:alt-level}.typeset ol li ul li ol li:before{content:counter(alt-level) "."}.typeset ol li ol li{counter-increment:sub-level}.typeset ol li ol li:before{content:counter(top-level) "." counter(sub-level)}.typeset ol li ol li ul li:before{content:''}.typeset ol li ol li ol li{counter-increment:sub-sub-level}.typeset ol li ol li ol li:before{content:counter(top-level) "." counter(sub-level) "." counter(sub-sub-level)}.typeset dl{line-height:2rem;margin-bottom:1.49999rem;padding-top:.50001rem}@media screen and (min-width: 40em){.typeset dl{margin-bottom:1.4553471429rem;padding-top:.5446528571rem}}@media screen and (min-width: 50em){.typeset dl{margin-bottom:1.44999rem;padding-top:.55001rem}}@media screen and (min-width: 64em){.typeset dl{margin-bottom:1.4411664706rem;padding-top:.5588335294rem}}@media screen and (min-width: 100em){.typeset dl{margin-bottom:1.4342005263rem;padding-top:.5657994737rem}}.typeset dl dt,.typeset dl dd{font-feature-settings:'kern', 'onum', 'liga';margin-left:2rem}@media screen and (min-width: 40em){.typeset dl dt,.typeset dl dd{margin-left:0}}.typeset dl dt{font-weight:700}.typeset dl dd+dt{padding-top:1rem}.typeset table{line-height:2rem;font-size:1.1916666667rem;margin-bottom:-.553135rem;padding-top:.553135rem;font-family:"Karla", monospace;font-feature-settings:'liga', 'lnum', 'tnum', 'kern';font-style:normal;font-weight:400;width:100%}@media screen and (min-width: 40em){.typeset table{font-size:1.0928571429rem;margin-bottom:-.5901885714rem;padding-top:.5901885714rem}}@media screen and (min-width: 50em){.typeset table{font-size:1.0866666667rem;margin-bottom:-.59251rem;padding-top:.59251rem}}@media screen and (min-width: 64em){.typeset table{font-size:.9941176471rem;margin-bottom:-.6272158824rem;padding-top:.6272158824rem}}@media screen and (min-width: 100em){.typeset table{font-size:.9263157895rem;margin-bottom:-.6526415789rem;padding-top:.6526415789rem}}.typeset table thead th{line-height:2rem;font-size:1.3333333333rem;margin-bottom:-.50001rem;padding-top:.50001rem;padding-bottom:1px}@media screen and (min-width: 40em){.typeset table thead th{font-size:1.2142857143rem;margin-bottom:-.5446528571rem;padding-top:.5446528571rem}}@media screen and (min-width: 50em){.typeset table thead th{font-size:1.2rem;margin-bottom:-.55001rem;padding-top:.55001rem}}@media screen and (min-width: 64em){.typeset table thead th{font-size:1.1764705882rem;margin-bottom:-.5588335294rem;padding-top:.5588335294rem}}@media screen and (min-width: 100em){.typeset table thead th{font-size:1.1578947368rem;margin-bottom:-.5657994737rem;padding-top:.5657994737rem}}.typeset b,.typeset strong,.typeset .bold{font-weight:700}.typeset em,.typeset i,.typeset .italic{font-style:italic}.typeset small,.typeset .caption{font-size:1.0666666667rem;font-family:"Karla", monospace;font-style:normal;font-weight:400}@media screen and (min-width: 40em){.typeset small,.typeset .caption{font-size:.9714285714rem}}@media screen and (min-width: 50em){.typeset small,.typeset .caption{font-size:.96rem}}@media screen and (min-width: 64em){.typeset small,.typeset .caption{font-size:.8823529412rem}}@media screen and (min-width: 100em){.typeset small,.typeset .caption{font-size:.8210526316rem}}.typeset small{line-height:1rem}.typeset .caption{line-height:2rem;margin-bottom:1.39999rem;padding-top:.60001rem;color:#529e99}@media screen and (min-width: 40em){.typeset .caption{margin-bottom:1.3642757143rem;padding-top:.6357242857rem}}@media screen and (min-width: 50em){.typeset .caption{margin-bottom:1.35999rem;padding-top:.64001rem}}@media screen and (min-width: 64em){.typeset .caption{margin-bottom:1.3308723529rem;padding-top:.6691276471rem}}@media screen and (min-width: 100em){.typeset .caption{margin-bottom:1.3078847368rem;padding-top:.6921152632rem}}.typeset h1+.caption,.typeset .alpha+.caption,.typeset h2+.caption,.typeset .beta+.caption,.typeset h3+.caption,.typeset .gamma+.caption{margin-top:-1rem}.typeset .delta+.caption,.typeset .epsilon+.caption,.typeset .zeta+.caption{margin-top:0rem}.typeset blockquote p{border-left:0.15rem solid #45a29e;font-style:italic;padding-left:1rem;margin-bottom:1.99999rem;padding-bottom:.50001rem}@media screen and (min-width: 40em){.typeset blockquote p{margin-bottom:1.9107042857rem;padding-bottom:.5446528571rem}}@media screen and (min-width: 50em){.typeset blockquote p{margin-bottom:1.89999rem;padding-bottom:.55001rem}}@media screen and (min-width: 64em){.typeset blockquote p{margin-bottom:1.8823429412rem;padding-bottom:.5588335294rem}}@media screen and (min-width: 100em){.typeset blockquote p{margin-bottom:1.8684110526rem;padding-bottom:.5657994737rem}}@media screen and (min-width: 40em){.typeset blockquote{margin-left:-1rem}}.typeset hr{background-image:linear-gradient(to bottom, transparent 50%, #529e99 50%);background-position:0 50%;background-repeat:repeat-x;background-size:100% 0.15rem;border:0;margin:0;padding-bottom:3rem;padding-top:0.5rem}.typeset code,.typeset pre{background-color:#1f2833;font-family:Menlo, monospace}.typeset pre{display:block;margin-bottom:2rem;padding:1rem;white-space:pre;white-space:pre-wrap;word-break:break-all;word-wrap:break-word}.typeset code{font-size:1.0666666667rem;line-height:1rem}@media screen and (min-width: 40em){.typeset code{font-size:.9714285714rem}}@media screen and (min-width: 50em){.typeset code{font-size:.96rem}}@media screen and (min-width: 64em){.typeset code{font-size:.8823529412rem}}@media screen and (min-width: 100em){.typeset code{font-size:.8210526316rem}}.typeset .upper{font-kerning:normal;letter-spacing:0.1rem;text-transform:uppercase}.typeset .small-caps{font-feature-settings:'smcp', 'kern';font-kerning:normal;letter-spacing:0.1rem}.typeset .lining-numerals{font-feature-settings:'lnum', 'kern'}.typeset .oldstyle-numerals{font-feature-settings:'onum', 'kern'}.hll{background-color:#c510bc}.c{color:#54dbf3;font-style:italic}.err{color:#a61717;background-color:#e3d2d2}.k{color:#c59659;font-weight:bold}.o{color:#c59659;font-weight:bold}.cm{color:#999988;font-style:italic}.cp{color:#999999;font-weight:bold;font-style:italic}.c1{color:#999988;font-style:italic}.cs{color:#999999;font-weight:bold;font-style:italic}.gd{color:#000000;background-color:#fdd}.ge{color:#000000;font-style:italic}.gr{color:#a00}.gh{color:#999}.gi{color:#000000;background-color:#dfd}.go{color:#888}.gp{color:#555}.gs{font-weight:bold}.gu{color:#aaa}.gt{color:#a00}.kc{color:#000000;font-weight:bold}.kd{color:#000000;font-weight:bold}.kn{color:#000000;font-weight:bold}.kp{color:#000000;font-weight:bold}.kr{color:#000000;font-weight:bold}.kt{color:#445588;font-weight:bold}.m{color:#099}.s{color:#fce773}.na{color:teal}.nb{color:#0086B3}.nc{color:#445588;font-weight:bold}.no{color:teal}.nd{color:#3c5d5d;font-weight:bold}.ni{color:purple}.ne{color:#99b898;font-weight:bold}.nf{color:#99b898;font-weight:bold}.nl{color:#99b898;font-weight:bold}.nn{color:#555}.nt{color:#ff847c}.nv{color:teal}.ow{color:#000000;font-weight:bold}.w{color:#bbb}.mf{color:#099}.mh{color:#099}.mi{color:#099}.mo{color:#099}.sb{color:#fce773}.sc{color:#fce773}.sd{color:#fce773}.s2{color:#fce773}.se{color:#fce773}.sh{color:#fce773}.si{color:#773f00}.sx{color:#fce773}.sr{color:#009926}.s1{color:#ff847c}.ss{color:#990073}.bp{color:#999}.vc{color:#2e878a}.vg{color:#2e878a}.vi{color:#2e878a}.il{color:#099}body{background:#161820;color:#efeff0;height:100%;display:flex;-webkit-box-direction:normal;-webkit-box-orient:vertical;-webkit-flex-direction:column;-moz-flex-direction:column;-ms-flex-direction:column;flex-direction:column;overflow-x:hidden}.container{width:90%;max-width:1200px;margin:0 auto}.header .nav,.footer .nav{text-align:right}.header .logo,.footer .logo{-webkit-box-flex:0;-webkit-flex:0 0 auto;-moz-box-flex:0;-moz-flex:0 0 auto;-ms-flex:0 0 auto;flex:0 0 auto}.header .container,.footer .container{display:-webkit-box;display:-webkit-flex;display:-moz-flex;display:-ms-flexbox;display:flex;-webkit-box-direction:normal;-webkit-box-orient:horizontal;-webkit-flex-direction:row;-moz-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-box-pack:justify;-ms-flex-pack:justify;-webkit-justify-content:space-between;-moz-justify-content:space-between;justify-content:space-between;padding:1rem 0}@media screen and (min-width: 40em){.header .container,.footer .container{-webkit-box-align:center;-ms-flex-align:center;-webkit-align-items:center;-moz-align-items:center;align-items:center}}.header .nav{display:flex;flex-direction:column-reverse;align-items:flex-end;justify-content:flex-end;overflow:hidden}.feature{padding-bottom:.4rem;margin-bottom:1.6rem;text-align:center;background:#c5c6c7;background-size:cover;background-position:center}.feature .container{min-height:40vh;max-width:60%;-webkit-box-direction:normal;-webkit-box-orient:vertical;-webkit-flex-direction:column;-moz-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:center;-ms-flex-pack:center;-webkit-justify-content:center;-moz-justify-content:center;justify-content:center}.logo{display:inline-block;line-height:0;max-height:7rem;display:-webkit-box;display:-webkit-flex;display:-moz-flex;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;-webkit-align-items:center;-moz-align-items:center;align-items:center}.logo img{max-height:7rem}.nav a{padding:.2rem}.nav--social a{display:inline-block;line-height:1}.small{padding-top:.8rem;color:#529e99;display:inline-block}.footer{background:#161820;color:#529e99}.footer a{color:#529e99}.footer a:hover{color:#161820}.footer .container{-webkit-flex-wrap:wrap;-moz-flex-wrap:wrap;-ms-flex-wrap:wrap;flex-wrap:wrap}.footer .small{padding-top:0}.nav--paginator{display:-webkit-box;display:-webkit-flex;display:-moz-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:justify;-ms-flex-pack:justify;-webkit-justify-content:space-between;-moz-justify-content:space-between;justify-content:space-between;color:#529e99;text-align:center}.pagination{min-width:20%}.main{display:-webkit-box;display:-webkit-flex;display:-moz-flex;display:-ms-flexbox;display:flex;-webkit-box-direction:normal;-webkit-box-orient:vertical;-webkit-flex-direction:column;-moz-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-flex:1;-webkit-flex:1 0 auto;-moz-box-flex:1;-moz-flex:1 0 auto;-ms-flex:1 0 auto;flex:1 0 auto;-webkit-box-pack:start;-ms-flex-pack:start;-webkit-justify-content:flex-start;-moz-justify-content:flex-start;justify-content:flex-start;margin-bottom:1.6rem}@media screen and (min-width: 40em){.main{-webkit-box-pack:center;-ms-flex-pack:center;-webkit-justify-content:center;-moz-justify-content:center;justify-content:center;-webkit-box-direction:normal;-webkit-box-orient:horizontal;-webkit-flex-direction:row;-moz-flex-direction:row;-ms-flex-direction:row;flex-direction:row}}.header,.feature,.footer{-webkit-box-flex:0;-webkit-flex:0 0 auto;-moz-box-flex:0;-moz-flex:0 0 auto;-ms-flex:0 0 auto;flex:0 0 auto}@media screen and (min-width: 40em){.content{width:85%}}.share .button{margin-right:.3rem}@media screen and (min-width: 40em){.aside{max-width:20%;margin-left:5%;-webkit-box-flex:1;-webkit-flex:1 0 auto;-moz-box-flex:1;-moz-flex:1 0 auto;-ms-flex:1 0 auto;flex:1 0 auto;opacity:0.7;transition:opacity .1s}.aside .section{position:sticky;top:0}.aside--left{margin-left:0;margin-right:5%;order:-1}.aside:hover{opacity:1}}.section{margin:0}.list{list-style:none}.list--nav{overflow:hidden;margin-bottom:var(--listHeight, 0)}.list .item--post,.list .item--result,.list .item--category{margin-left:0}@media screen and (min-width: 40em){.item--nav{margin-left:.4rem;display:inline-block}}.item--nav:first-of-type{margin-left:0}.item--current a{color:#529e99}a .icon{transition:fill .1s}a .icon:hover{fill:currentColor}.icon{vertical-align:middle;width:1.1em;height:1.1em;fill:CurrentColor}img{max-width:100%;height:auto}.figure{line-height:0}.figure--left{float:left;padding-right:.8rem}.figure--right{float:right;text-align:right;padding-left:.8rem}.figure--center{text-align:center;clear:both}.video,.map{position:relative;padding-bottom:56.25%;height:0}.video iframe,.map iframe{position:absolute;top:0;left:0;width:100%;height:100%}.map{padding-bottom:70%}.figure,.video,.map,.form{margin-bottom:.8rem}audio,video{width:100%}.form{position:relative}.form__legend{font-style:italic;color:#529e99;position:absolute;overflow:hidden;right:0;clip:rect(0 0 0 0)}button,.button,input[type="text"],input[type="email"],input[type="search"],input[type="submit"],input[type="color"],textarea,select{padding:.6rem 1.2rem;margin-bottom:.6rem;transition:color .1s, background-color .1s, border .1s;line-height:inherit;border:none;box-shadow:none;border-radius:0;-webkit-appearance:none}button .icon,.button .icon,input[type="text"] .icon,input[type="email"] .icon,input[type="search"] .icon,input[type="submit"] .icon,input[type="color"] .icon,textarea .icon,select .icon{margin:0 0 .35rem}input[type="submit"],button,.button{cursor:pointer;display:inline-block;color:#161820;background:#45a29e;transition:box-shadow .1s;will-change:box-shadow;box-shadow:inset 0 0 0 2rem transparent}input[type="submit"]:hover,button:hover,.button:hover{box-shadow:inset 0 0 0 2rem rgba(0,0,0,0.25)}input[type="submit"]:active,input[type="submit"]:focus,button:active,button:focus,.button:active,.button:focus{box-shadow:inset 0 0 0 2rem rgba(0,0,0,0.25)}.button--nav{background:none;color:#45a29e;margin-bottom:0;min-height:4rem;min-width:4rem}@media screen and (min-width: 40em){.button--nav{display:none}}.button--nav:hover,.button--nav:focus{box-shadow:none;color:#66fcf1}a:focus,a:hover:focus,button:focus,button:hover:focus,.button:focus,.button:hover:focus,input:focus,input:hover:focus,textarea:focus,textarea:hover:focus,select:focus,select:hover:focus{outline:solid 0.12rem #45a29e;outline-offset:-.12rem}a:hover:focus{outline:none}input[type="text"],input[type="email"],input[type="search"],input[type="color"],textarea,select{width:100%;border:1px solid #529e99}input[type="text"]:hover,input[type="email"]:hover,input[type="search"]:hover,input[type="color"]:hover,textarea:hover,select:hover{border-color:#efeff0}select{background:#1f2833}textarea{resize:vertical}label{line-height:2rem;margin-bottom:1.49999rem;padding-top:.50001rem}@media screen and (min-width: 40em){label{margin-bottom:1.4553471429rem;padding-top:.5446528571rem}}@media screen and (min-width: 50em){label{margin-bottom:1.44999rem;padding-top:.55001rem}}@media screen and (min-width: 64em){label{margin-bottom:1.4411664706rem;padding-top:.5588335294rem}}@media screen and (min-width: 100em){label{margin-bottom:1.4342005263rem;padding-top:.5657994737rem}}code{padding:.12rem .2rem;color:#66fcf1}pre code{padding:0}.required{color:#fff}::-webkit-input-placeholder{opacity:0.5}::-moz-placeholder{opacity:0.5}:-ms-input-placeholder{opacity:0.5}:-moz-placeholder{opacity:0.5}::selection{background:#66fcf1;color:#161820;text-shadow:none}.typeset a>code{text-shadow:none}.typeset .button,.typeset button{background-image:none;text-shadow:none;color:#161820}.typeset .button:hover,.typeset .button:active,.typeset .button:focus,.typeset button:hover,.typeset button:active,.typeset button:focus{background-image:none;color:#161820}.typeset hr{width:100%}.typeset li>p{padding:0;margin:0}.typeset .nav a{padding-left:0;padding-right:0;margin-left:.2rem;margin-right:.2rem}.typeset pre{white-space:pre;overflow-x:scroll}</style>


    

    
  
    <link rel="icon" type="image/png" href="/assets/logos/16x.png" sizes="16x16">
    <link rel="apple-touch-icon" sizes="16x16" href="/assets/logos/16x.png">
  
    <link rel="icon" type="image/png" href="/assets/logos/32x.png" sizes="32x32">
    <link rel="apple-touch-icon" sizes="32x32" href="/assets/logos/32x.png">
  
    <link rel="icon" type="image/png" href="/assets/logos/96x.png" sizes="96x96">
    <link rel="apple-touch-icon" sizes="96x96" href="/assets/logos/96x.png">
  
    <link rel="icon" type="image/png" href="/assets/logos/120.png" sizes="120x120">
    <link rel="apple-touch-icon" sizes="120x120" href="/assets/logos/120.png">
  
    <link rel="icon" type="image/png" href="/assets/logos/144.png" sizes="144x144">
    <link rel="apple-touch-icon" sizes="144x144" href="/assets/logos/144.png">
  
    <link rel="icon" type="image/png" href="/assets/logos/180.png" sizes="180x180">
    <link rel="apple-touch-icon" sizes="180x180" href="/assets/logos/180.png">
  
    <link rel="icon" type="image/png" href="/assets/logos/512.png" sizes="512x512">
    <link rel="apple-touch-icon" sizes="512x512" href="/assets/logos/512.png">
  
    <link rel="icon" type="image/png" href="/assets/logos/1024.png" sizes="1024x1024">
    <link rel="apple-touch-icon" sizes="1024x1024" href="/assets/logos/1024.png">
  

<link rel="shortcut icon" href="/assets/logos/logo-cdong.gif">


    <!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-168923617-1"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-168923617-1');
  gtag('config', 'UA-168923617-1', {
    'anonymize_ip': true
  });
</script>


    <!-- Overwrite this file with code you want before the closing head tag -->

    <meta name="google-site-verification" content="fhiMUAXjII16BlWNx0x4tY2MXKJwEcdDVjILoXGUXYA" />
  </head>
  <!-- Global site tag (gtag.js) - Google Analytics -->
  <script async src="https://www.googletagmanager.com/gtag/js?id=UA-168923617-1"></script>
  <script>
    window.dataLayer = window.dataLayer || [];
    function gtag(){dataLayer.push(arguments);}
    gtag('js', new Date());

    gtag('config', 'UA-168923617-1');
  </script>


  <body class="layout-post  lockbit-ransomware-v2-0">
    <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" style="height: 0; position: absolute">
  <symbol id="codepen" viewBox="0 0 16 16"><path d="M15.988 5.443c-.004-.02-.007-.04-.012-.058l-.01-.033c-.006-.017-.012-.034-.02-.05-.003-.012-.01-.023-.014-.034l-.023-.045-.02-.032-.03-.04-.024-.03c-.01-.013-.022-.026-.034-.038l-.027-.027-.04-.032-.03-.024-.012-.01L8.38.117c-.23-.155-.53-.155-.76 0L.305 4.99.296 5c-.012.007-.022.015-.032.023-.014.01-.027.02-.04.032l-.027.027-.034.037-.024.03-.03.04c-.006.012-.013.022-.02.033l-.023.045-.015.034c-.007.016-.012.033-.018.05l-.01.032c-.005.02-.01.038-.012.058l-.006.03C.002 5.5 0 5.53 0 5.56v4.875c0 .03.002.06.006.09l.007.03c.003.02.006.04.013.058l.01.033c.006.018.01.035.018.05l.015.033c.006.016.014.03.023.047l.02.03c.008.016.018.03.03.042.007.01.014.02.023.03.01.012.02.025.034.036.01.01.018.02.028.026l.04.033.03.023.01.01 7.31 4.876c.116.078.248.117.382.116.134 0 .266-.04.38-.116l7.314-4.875.01-.01c.012-.007.022-.015.032-.023.014-.01.027-.02.04-.032l.027-.027.034-.037.024-.03.03-.04.02-.032.023-.046.015-.033.018-.052.01-.033c.005-.02.01-.038.013-.058 0-.01.003-.02.004-.03.004-.03.006-.06.006-.09V5.564c0-.03-.002-.06-.006-.09l-.007-.03zM8 9.626L5.568 8 8 6.374 10.432 8 8 9.626zM7.312 5.18l-2.98 1.993-2.406-1.61 5.386-3.59v3.206zM3.095 8l-1.72 1.15v-2.3L3.095 8zm1.237.828l2.98 1.993v3.208l-5.386-3.59 2.406-1.61zm4.355 1.993l2.98-1.993 2.407 1.61-5.387 3.59v-3.206zM12.905 8l1.72-1.15v2.3L12.905 8zm-1.237-.827L8.688 5.18V1.97l5.386 3.59-2.406 1.61z" fill-rule="nonzero"/></symbol>
  <symbol id="dribbble" viewBox="0 0 16 16"><path d="M8 16c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm6.747-6.905c-.234-.074-2.115-.635-4.257-.292.894 2.456 1.258 4.456 1.328 4.872 1.533-1.037 2.624-2.68 2.93-4.58zM10.67 14.3c-.102-.6-.5-2.688-1.46-5.18l-.044.014C5.312 10.477 3.93 13.15 3.806 13.4c1.158.905 2.614 1.444 4.194 1.444.947 0 1.85-.194 2.67-.543zm-7.747-1.72c.155-.266 2.03-3.37 5.555-4.51.09-.03.18-.056.27-.08-.173-.39-.36-.778-.555-1.16C4.78 7.85 1.47 7.807 1.17 7.8l-.003.208c0 1.755.665 3.358 1.756 4.57zM1.31 6.61c.307.005 3.122.017 6.318-.832-1.132-2.012-2.353-3.705-2.533-3.952-1.912.902-3.34 2.664-3.784 4.785zM6.4 1.368c.188.253 1.43 1.943 2.548 4 2.43-.91 3.46-2.293 3.582-2.468C11.323 1.827 9.736 1.176 8 1.176c-.55 0-1.087.066-1.6.19zm6.89 2.322c-.145.194-1.29 1.662-3.816 2.694.16.325.31.656.453.99.05.117.1.235.147.352 2.274-.286 4.533.172 4.758.22-.015-1.613-.59-3.094-1.543-4.257z"/></symbol>
  <symbol id="designernews" viewBox="0 0 16 16"><path d="M7.514 7.988c0-2.555-1.57-4.287-4.56-4.287H0v8.6h3.016c2.903 0 4.498-1.75 4.498-4.31zM5.37 8c0 1.844-.946 2.642-2.467 2.642H2.13V5.358h.773C4.36 5.358 5.37 6.193 5.37 8zM16 12.3V3.7h-1.98v4.81L10.853 3.7h-2.07v8.6h1.982V7.152l3.39 5.146H16z"/></symbol>
  <symbol id="facebook" viewBox="0 0 16 16"><path d="M15.117 0H.883C.395 0 0 .395 0 .883v14.234c0 .488.395.883.883.883h7.663V9.804H6.46V7.39h2.086V5.607c0-2.066 1.262-3.19 3.106-3.19.883 0 1.642.064 1.863.094v2.16h-1.28c-1 0-1.195.476-1.195 1.176v1.54h2.39l-.31 2.416h-2.08V16h4.077c.488 0 .883-.395.883-.883V.883C16 .395 15.605 0 15.117 0" fill-rule="nonzero"/></symbol>
  <symbol id="flickr" viewBox="0 0 16 16"><path d="M0 8c0 2.05 1.662 3.71 3.71 3.71 2.05 0 3.713-1.66 3.713-3.71S5.76 4.29 3.71 4.29C1.663 4.29 0 5.95 0 8zm8.577 0c0 2.05 1.662 3.71 3.712 3.71C14.337 11.71 16 10.05 16 8s-1.662-3.71-3.71-3.71c-2.05 0-3.713 1.66-3.713 3.71z"/></symbol>
  <symbol id="github" viewBox="0 0 16 16"><path d="M8 0C3.58 0 0 3.582 0 8c0 3.535 2.292 6.533 5.47 7.59.4.075.547-.172.547-.385 0-.19-.007-.693-.01-1.36-2.226.483-2.695-1.073-2.695-1.073-.364-.924-.89-1.17-.89-1.17-.725-.496.056-.486.056-.486.803.056 1.225.824 1.225.824.714 1.223 1.873.87 2.33.665.072-.517.278-.87.507-1.07-1.777-.2-3.644-.888-3.644-3.953 0-.873.31-1.587.823-2.147-.083-.202-.358-1.015.077-2.117 0 0 .672-.215 2.2.82.638-.178 1.323-.266 2.003-.27.68.004 1.364.092 2.003.27 1.527-1.035 2.198-.82 2.198-.82.437 1.102.163 1.915.08 2.117.513.56.823 1.274.823 2.147 0 3.073-1.87 3.75-3.653 3.947.287.246.543.735.543 1.48 0 1.07-.01 1.933-.01 2.195 0 .215.144.463.55.385C13.71 14.53 16 11.534 16 8c0-4.418-3.582-8-8-8"/></symbol>
  <symbol id="hackernews" viewBox="0 0 16 16"><path d="M0 0v16h16V0H0zm8.92 8.96v3H7.25v-3l-2.75-5h1.96l1.66 3.48L9.7 3.96h1.88l-2.66 5z"/></symbol>
  <symbol id="instagram" viewBox="0 0 16 16"><path d="M8 0C5.827 0 5.555.01 4.702.048 3.85.088 3.27.222 2.76.42c-.526.204-.973.478-1.417.923-.445.444-.72.89-.923 1.417-.198.51-.333 1.09-.372 1.942C.008 5.555 0 5.827 0 8s.01 2.445.048 3.298c.04.852.174 1.433.372 1.942.204.526.478.973.923 1.417.444.445.89.72 1.417.923.51.198 1.09.333 1.942.372.853.04 1.125.048 3.298.048s2.445-.01 3.298-.048c.852-.04 1.433-.174 1.942-.372.526-.204.973-.478 1.417-.923.445-.444.72-.89.923-1.417.198-.51.333-1.09.372-1.942.04-.853.048-1.125.048-3.298s-.01-2.445-.048-3.298c-.04-.852-.174-1.433-.372-1.942-.204-.526-.478-.973-.923-1.417-.444-.445-.89-.72-1.417-.923-.51-.198-1.09-.333-1.942-.372C10.445.008 10.173 0 8 0zm0 1.44c2.136 0 2.39.01 3.233.048.78.036 1.203.166 1.485.276.374.145.64.318.92.598.28.28.453.546.598.92.11.282.24.705.276 1.485.038.844.047 1.097.047 3.233s-.01 2.39-.048 3.233c-.036.78-.166 1.203-.276 1.485-.145.374-.318.64-.598.92-.28.28-.546.453-.92.598-.282.11-.705.24-1.485.276-.844.038-1.097.047-3.233.047s-2.39-.01-3.233-.048c-.78-.036-1.203-.166-1.485-.276-.374-.145-.64-.318-.92-.598-.28-.28-.453-.546-.598-.92-.11-.282-.24-.705-.276-1.485C1.45 10.39 1.44 10.136 1.44 8s.01-2.39.048-3.233c.036-.78.166-1.203.276-1.485.145-.374.318-.64.598-.92.28-.28.546-.453.92-.598.282-.11.705-.24 1.485-.276C5.61 1.45 5.864 1.44 8 1.44zm0 2.452c-2.27 0-4.108 1.84-4.108 4.108 0 2.27 1.84 4.108 4.108 4.108 2.27 0 4.108-1.84 4.108-4.108 0-2.27-1.84-4.108-4.108-4.108zm0 6.775c-1.473 0-2.667-1.194-2.667-2.667 0-1.473 1.194-2.667 2.667-2.667 1.473 0 2.667 1.194 2.667 2.667 0 1.473-1.194 2.667-2.667 2.667zm5.23-6.937c0 .53-.43.96-.96.96s-.96-.43-.96-.96.43-.96.96-.96.96.43.96.96z"/></symbol>
  <symbol id="linkedin" viewBox="0 0 16 16"><path d="M13.632 13.635h-2.37V9.922c0-.886-.018-2.025-1.234-2.025-1.235 0-1.424.964-1.424 1.96v3.778h-2.37V6H8.51V7.04h.03c.318-.6 1.092-1.233 2.247-1.233 2.4 0 2.845 1.58 2.845 3.637v4.188zM3.558 4.955c-.762 0-1.376-.617-1.376-1.377 0-.758.614-1.375 1.376-1.375.76 0 1.376.617 1.376 1.375 0 .76-.617 1.377-1.376 1.377zm1.188 8.68H2.37V6h2.376v7.635zM14.816 0H1.18C.528 0 0 .516 0 1.153v13.694C0 15.484.528 16 1.18 16h13.635c.652 0 1.185-.516 1.185-1.153V1.153C16 .516 15.467 0 14.815 0z" fill-rule="nonzero"/></symbol>
  <symbol id="medium" viewBox="0 0 16 16"><path d="M11.824 12.628l-.276.45.798.398 2.744 1.372c.15.076.294.11.418.11.278 0 .467-.177.467-.492V5.883l-4.15 6.745zm4.096-8.67c-.004-.003 0-.01-.003-.012l-4.825-2.412c-.06-.03-.123-.038-.187-.044-.016 0-.03-.01-.047-.01-.184 0-.368.092-.467.254l-.24.39-.5.814-1.89 3.08 1.89 3.076.5.813.5.812.59.95 4.71-7.64c.02-.03.01-.06-.02-.08zm-6.27 7.045L7.17 6.97l-.295-.477-.294-.477-.25-.416v4.867l3.32 1.663.5.25.5.25-.5-.813-.5-.813zM.737 1.68L.59 1.608c-.085-.042-.166-.062-.24-.062-.206 0-.35.16-.35.427v10.162c0 .272.2.594.442.716l4.145 2.08c.107.06.208.08.3.08.257 0 .438-.2.438-.53V4.01c0-.02-.012-.04-.03-.047L.738 1.68z"/></symbol>
  <symbol id="pinterest" viewBox="0 0 16 16"><path d="M8 0C3.582 0 0 3.582 0 8c0 3.39 2.108 6.285 5.084 7.45-.07-.633-.133-1.604.028-2.295.146-.625.938-3.977.938-3.977s-.24-.48-.24-1.188c0-1.11.646-1.943 1.448-1.943.683 0 1.012.513 1.012 1.127 0 .687-.436 1.713-.662 2.664-.19.797.4 1.445 1.185 1.445 1.42 0 2.514-1.498 2.514-3.662 0-1.915-1.376-3.254-3.342-3.254-2.276 0-3.61 1.707-3.61 3.472 0 .687.263 1.424.593 1.825.066.08.075.15.057.23-.06.252-.196.796-.223.907-.035.146-.115.178-.268.107-.998-.465-1.624-1.926-1.624-3.1 0-2.524 1.834-4.84 5.287-4.84 2.774 0 4.932 1.977 4.932 4.62 0 2.757-1.74 4.977-4.153 4.977-.81 0-1.572-.422-1.833-.92l-.5 1.902c-.18.695-.667 1.566-.994 2.097.75.232 1.545.357 2.37.357 4.417 0 8-3.582 8-8s-3.583-8-8-8z" fill-rule="nonzero"/></symbol>
  <symbol id="rss" viewBox="0 0 16 16"><path d="M12.8 16C12.8 8.978 7.022 3.2 0 3.2V0c8.777 0 16 7.223 16 16h-3.2zM2.194 11.61c1.21 0 2.195.985 2.195 2.196 0 1.21-.985 2.194-2.196 2.194C.984 16 0 15.017 0 13.806c0-1.21.983-2.195 2.194-2.195zM10.606 16h-3.11c0-4.113-3.383-7.497-7.496-7.497v-3.11c5.818 0 10.606 4.79 10.606 10.607z"/></symbol>
  <symbol id="reddit" viewBox="0 0 16 16"><path d="M1.473 9.368c-.04.185-.06.374-.06.566 0 2.3 2.94 4.173 6.554 4.173 3.613 0 6.553-1.872 6.553-4.173 0-.183-.02-.364-.055-.54l-.01-.022c-.013-.036-.02-.073-.02-.11-.2-.784-.745-1.497-1.533-2.072-.03-.01-.058-.026-.084-.047-.017-.013-.03-.028-.044-.043-1.198-.824-2.91-1.34-4.807-1.34-1.88 0-3.576.506-4.772 1.315-.01.012-.02.023-.033.033-.026.022-.056.04-.087.05-.805.576-1.364 1.293-1.572 2.086 0 .038-.01.077-.025.114l-.005.01zM8 13.003c-1.198 0-2.042-.26-2.58-.8-.116-.116-.116-.305 0-.422.117-.11.307-.11.424 0 .42.42 1.125.63 2.155.63 1.03 0 1.73-.2 2.15-.62.11-.11.3-.11.42 0 .11.12.11.31 0 .43-.54.54-1.38.8-2.58.8zM5.592 7.945c-.61 0-1.12.51-1.12 1.12 0 .608.51 1.102 1.12 1.102.61 0 1.103-.494 1.103-1.102 0-.61-.494-1.12-1.103-1.12zm4.83 0c-.61 0-1.12.51-1.12 1.12 0 .608.51 1.102 1.12 1.102.61 0 1.103-.494 1.103-1.102 0-.61-.494-1.12-1.103-1.12zM13.46 6.88c.693.556 1.202 1.216 1.462 1.94.3-.225.48-.578.48-.968 0-.67-.545-1.214-1.214-1.214-.267 0-.52.087-.728.243zM1.812 6.64c-.67 0-1.214.545-1.214 1.214 0 .363.16.7.43.927.268-.72.782-1.37 1.478-1.92-.202-.14-.443-.22-.694-.22zm6.155 8.067c-3.944 0-7.152-2.14-7.152-4.77 0-.183.016-.363.046-.54-.53-.33-.86-.91-.86-1.545 0-1 .82-1.812 1.82-1.812.45 0 .87.164 1.2.455 1.24-.796 2.91-1.297 4.75-1.33l1.21-3.69.27.063s.01 0 .01.002l2.82.663c.23-.533.76-.908 1.38-.908.82 0 1.49.67 1.49 1.492 0 .823-.67 1.492-1.49 1.492s-1.49-.67-1.49-1.49L9.4 2.18l-.98 2.99c1.77.07 3.37.57 4.57 1.35.33-.31.764-.48 1.225-.48 1 0 1.814.81 1.814 1.81 0 .66-.36 1.26-.92 1.58.02.17.04.33.04.5-.01 2.63-3.21 4.77-7.16 4.77zM13.43 1.893c-.494 0-.895.4-.895.894 0 .493.4.894.894.894.49 0 .89-.4.89-.89s-.4-.89-.9-.89z"/></symbol>
  <symbol id="skype" viewBox="0 0 16 16"><path d="M8.035 12.6c-2.685 0-3.885-1.322-3.885-2.313 0-.51.374-.865.89-.865 1.15 0 .85 1.653 2.995 1.653 1.096 0 1.703-.597 1.703-1.208 0-.368-.18-.775-.904-.954l-2.387-.597C4.524 7.833 4.175 6.79 4.175 5.812c0-2.034 1.91-2.798 3.704-2.798 1.65 0 3.6.916 3.6 2.136 0 .523-.452.827-.97.827-.98 0-.798-1.36-2.773-1.36-.98 0-1.523.444-1.523 1.08 0 .636.774.84 1.446.993l1.767.392c1.936.433 2.427 1.566 2.427 2.633 0 1.652-1.266 2.886-3.82 2.886m7.4-3.264l-.014.084-.028-.16c.015.024.028.05.042.076.082-.45.125-.912.125-1.373 0-1.023-.2-2.014-.595-2.948-.38-.902-.925-1.712-1.62-2.407-.692-.696-1.5-1.242-2.4-1.623C10.015.59 9.025.39 8.005.39c-.48 0-.963.045-1.43.135H6.57l.08.04-.16-.023.08-.016C5.927.183 5.205 0 4.472 0 3.278 0 2.155.466 1.31 1.313.465 2.16 0 3.286 0 4.483c0 .763.195 1.512.563 2.175l.013-.083.028.16c-.015-.026-.027-.052-.04-.077-.076.43-.115.867-.115 1.305 0 1.022.2 2.014.593 2.948.38.903.925 1.713 1.62 2.408.693.695 1.5 1.242 2.4 1.623.932.397 1.92.597 2.94.597.445 0 .89-.04 1.325-.118l-.077-.043.162.028-.084.014c.67.378 1.426.58 2.2.58 1.194 0 2.317-.466 3.162-1.313.845-.846 1.31-1.972 1.31-3.17 0-.765-.197-1.517-.566-2.18" fill-rule="nonzero"/></symbol>
  <symbol id="tumblr" viewBox="0 0 16 16"><path d="M9.708 16c-3.396 0-4.687-2.504-4.687-4.274V6.498H3.403V4.432C5.83 3.557 6.412 1.368 6.55.12c.01-.086.077-.12.115-.12H9.01v4.076h3.2v2.422H8.997v4.98c.01.667.25 1.58 1.472 1.58h.067c.424-.012.994-.136 1.29-.278l.77 2.283c-.288.424-1.594.916-2.77.936h-.12z" fill-rule="nonzero"/></symbol>
  <symbol id="twitch" viewBox="0 0 16 16"><g fill-rule="nonzero"><path d="M1.393 0L.35 2.783v11.13h3.824V16h2.088l2.085-2.088h3.13L15.65 9.74V0H1.394zm1.39 1.39H14.26v7.653l-2.435 2.435H8l-2.085 2.085v-2.085H2.783V1.39z"/><path d="M6.61 8.348H8V4.175H6.61v4.173zm3.824 0h1.39V4.175h-1.39v4.173z"/></g></symbol>
  <symbol id="twitter" viewBox="0 0 16 16"><path d="M16 3.038c-.59.26-1.22.437-1.885.517.677-.407 1.198-1.05 1.443-1.816-.634.375-1.337.648-2.085.795-.598-.638-1.45-1.036-2.396-1.036-1.812 0-3.282 1.468-3.282 3.28 0 .258.03.51.085.75C5.152 5.39 2.733 4.084 1.114 2.1.83 2.583.67 3.147.67 3.75c0 1.14.58 2.143 1.46 2.732-.538-.017-1.045-.165-1.487-.41v.04c0 1.59 1.13 2.918 2.633 3.22-.276.074-.566.114-.865.114-.21 0-.416-.02-.617-.058.418 1.304 1.63 2.253 3.067 2.28-1.124.88-2.54 1.404-4.077 1.404-.265 0-.526-.015-.783-.045 1.453.93 3.178 1.474 5.032 1.474 6.038 0 9.34-5 9.34-9.338 0-.143-.004-.284-.01-.425.64-.463 1.198-1.04 1.638-1.7z" fill-rule="nonzero"/></symbol>
  <symbol id="vimeo" viewBox="0 0 16 16"><path d="M15.992 4.275c-.07 1.56-1.16 3.697-3.263 6.41-2.176 2.832-4.017 4.248-5.522 4.248-.933 0-1.722-.862-2.367-2.588L3.55 7.6c-.48-1.724-.993-2.587-1.542-2.587-.12 0-.538.252-1.255.755L0 4.796C.79 4.1 1.568 3.406 2.335 2.71c1.053-.912 1.844-1.39 2.37-1.44 1.246-.12 2.012.733 2.3 2.56.31 1.97.526 3.194.647 3.673.36 1.634.754 2.45 1.185 2.45.335 0 .838-.53 1.51-1.59.67-1.06 1.028-1.866 1.076-2.42.096-.915-.263-1.374-1.077-1.374-.383 0-.778.087-1.185.262.788-2.58 2.29-3.834 4.508-3.762 1.644.048 2.42 1.116 2.324 3.205z" fill-rule="nonzero"/></symbol>
  <symbol id="youtube" viewBox="0 0 16 16"><path d="M0 7.345c0-1.294.16-2.59.16-2.59s.156-1.1.636-1.587c.608-.637 1.408-.617 1.764-.684C3.84 2.36 8 2.324 8 2.324s3.362.004 5.6.166c.314.038.996.04 1.604.678.48.486.636 1.588.636 1.588S16 6.05 16 7.346v1.258c0 1.296-.16 2.59-.16 2.59s-.156 1.102-.636 1.588c-.608.638-1.29.64-1.604.678-2.238.162-5.6.166-5.6.166s-4.16-.037-5.44-.16c-.356-.067-1.156-.047-1.764-.684-.48-.487-.636-1.587-.636-1.587S0 9.9 0 8.605v-1.26zm6.348 2.73V5.58l4.323 2.255-4.32 2.24h-.002z"/></symbol>
  <symbol id="link" viewBox="0 0 16 16"><path d="M5.86 12.7l-.81.8c-.7.7-1.84.7-2.54 0a1.75 1.75 0 0 1 0-2.5l2.98-2.96c.61-.61 1.77-1.52 2.62-.68a1 1 0 1 0 1.4-1.4c-1.44-1.43-3.57-1.17-5.42.67L1.1 9.6a3.72 3.72 0 0 0 0 5.32 3.78 3.78 0 0 0 5.34 0l.8-.8a1 1 0 1 0-1.39-1.42zm9.03-11.5c-1.55-1.53-3.7-1.6-5.14-.19l-1 1a1 1 0 1 0 1.39 1.41l1-1c.75-.74 1.72-.43 2.35.2a1.75 1.75 0 0 1 0 2.5l-3.17 3.15c-1.46 1.45-2.14.77-2.43.48a1 1 0 0 0-1.4 1.4c.67.67 1.43 1 2.23 1 .98 0 2.01-.5 3-1.47l3.17-3.15a3.72 3.72 0 0 0 0-5.32z"/></symbol>
  <symbol id="email" viewBox="0 0 16 11"><path fill-rule="evenodd" d="M1.33 0h13.34L8 5 1.33 0zM16 0v11H0V0l8 6 8-6z"/></symbol>
  <symbol id="nav" viewBox="0 0 16 11"><path d="M0 12h16v-2H0v2zm0-5h16V5H0v2zm0-7v2h16V0H0z"/></symbol>
</svg>


    <header class="header">
  <div class="container">
    <a class="logo" href="/">
  <img src="/assets/logos/logo-cdong.gif" alt=""/>
</a>


    
<nav class="nav  nav--header">
  <ul class="list  list--nav">
    

      

      <li class="item  item--nav">
        <a href="/">Home</a>
      </li>
    

      

      <li class="item  item--nav">
        <a href="/about/">About</a>
      </li>
    

      

      <li class="item  item--nav">
        <a href="/blog/">Blog</a>
      </li>
    

      

      <li class="item  item--nav">
        <a href="/search/">Search</a>
      </li>
    
  </ul>
  <button class="button  button--nav" aria-label="Menu toggle">
    <svg width="16" height="16" class="icon  icon--nav" role="img" alt="Menu"><title>Menu</title><use xlink:href="#nav" fill="CurrentColor"></use></svg>

  </button>
</nav>


<script type="text/javascript">
  // Get list and button
  const navList = document.querySelector('.header .list--nav')
  const button  = document.querySelector('.header .button--nav')

  // Hide nav and apply toggle
  const collapseNav = () => {
    if (document.body.clientWidth < 640) {
      navList.style.setProperty('--listHeight', `-${navList.offsetHeight}px`)
    } else {
      navList.removeAttribute('style')
    }

    button.onclick = () => {
      navList.style.setProperty('transition', `margin .1s`)
      if (navList.style.getPropertyValue('--listHeight')) {
        navList.style.removeProperty('--listHeight')
      } else {
        navList.style.setProperty('--listHeight', `-${navList.offsetHeight}px`)
      }
    }
  }

  collapseNav()

  // Check on resize if to collapse nav
  window.addEventListener('resize', () => {
    collapseNav()
  })
</script>

  </div>

  





  <meta name="google-site-verification" content="fhiMUAXjII16BlWNx0x4tY2MXKJwEcdDVjILoXGUXYA" />
</header>


<main class="main  container">

  <article class="article  article--post  content  typeset">

    

<small class="small  post-meta">
  
  
    
      <span class="label  label--category"><a href="/categories/#reverse engineering">Reverse Engineering</a></span>
    
  &nbsp;&middot;&nbsp;<time datetime="2022-03-19T00:00:00-04:00" class="time">19 Mar 2022</time>
</small>

    
    <h1 id="lockbit-ransomware-v20">LockBit Ransomware v2.0</h1>

<ul>
  <li><a href="#lockbit-ransomware-v20">LockBit Ransomware v2.0</a>
    <ul>
      <li><a href="#lockbit-cti">LockBit CTI</a></li>
      <li><a href="#overview">Overview</a></li>
      <li><a href="#iocs">IOCS</a></li>
      <li><a href="#ransom-note">Ransom Note</a></li>
    </ul>
  </li>
  <li><a href="#static-code-analysis">Static Code Analysis</a>
    <ul>
      <li><a href="#anti-analysis-anti-debug-check">Anti-Analysis: Anti-Debug Check</a></li>
      <li><a href="#anti-analysis-stack-string">Anti-Analysis: Stack String</a></li>
      <li><a href="#anti-analysis-inline-dynamic-api-resolving">Anti-Analysis: Inline Dynamic API Resolving</a></li>
      <li><a href="#computer-language-check">Computer Language Check</a></li>
      <li><a href="#denying-access-to-ransomware-process">Denying Access To Ransomware Process</a></li>
      <li><a href="#default-error--privilege-setting">Default Error &amp; Privilege Setting</a></li>
      <li><a href="#configuration-decryption">Configuration Decryption</a></li>
      <li><a href="#privilege-escalation--relaunch">Privilege Escalation &amp; Relaunch</a></li>
      <li><a href="#logging">Logging</a></li>
      <li><a href="#command-line-arguments">Command-line Arguments</a></li>
      <li><a href="#masquerade-explorer--uac-bypass">Masquerade Explorer &amp; UAC Bypass</a></li>
      <li><a href="#run-once-mutant">Run-once Mutant</a></li>
      <li><a href="#setting-group-policy-for-active-directory">Setting Group Policy For Active Directory</a>
        <ul>
          <li><a href="#checking-if-running-on-primary-domain-controller">Checking If Running On Primary Domain Controller</a></li>
          <li><a href="#retrieving-dns-domain-name">Retrieving DNS Domain Name</a></li>
          <li><a href="#retrieving-domain-account-admin-name-get-domain-admin-name">Retrieving Domain Account Admin Name</a></li>
          <li><a href="#com-retrieve-igrouppolicyobject-interface">COM Retrieve IGroupPolicyObject Interface</a></li>
          <li><a href="#connect-to-active-directory-domain">Connect To Active Directory Domain</a></li>
          <li><a href="#setting-gpos-attributes">Setting GPO’s attributes</a></li>
          <li><a href="#updating-gptini">Updating GPT.INI</a></li>
          <li><a href="#updating-the-gpo-folder">Updating the GPO Folder</a></li>
          <li><a href="#forcing-gpupdate-on-all-hosts-through-powershell">Forcing GPUpdate On All Hosts Through PowerShell</a></li>
          <li><a href="#forcing-gpupdate-on-all-hosts-manually">Forcing GPUpdate On All Hosts Manually</a></li>
        </ul>
      </li>
      <li><a href="#persistence-registry">Persistence Registry</a></li>
      <li><a href="#set-lockbit-default-icon">Set LockBit Default Icon</a></li>
      <li><a href="#pre-encryption-system-clean-up">Pre-Encryption System Clean-Up</a>
        <ul>
          <li><a href="#stopping-services">Stopping Services</a></li>
          <li><a href="#terminating-processes">Terminating Processes</a></li>
          <li><a href="#deleting-backups">Deleting Backups</a></li>
        </ul>
      </li>
      <li><a href="#printing-ransom-note-to-printers">Printing Ransom Note To Printers</a></li>
      <li><a href="#setup-wallpaper">Setup Wallpaper</a></li>
      <li><a href="#dropping-ransom-html-application-file">Dropping Ransom HTML Application File</a></li>
      <li><a href="#file-encryption">File Encryption</a>
        <ul>
          <li><a href="#mounting-volumes-on-drives">Mounting Volumes on Drives</a></li>
          <li><a href="#cryptography--multithreading-initialization">Cryptography &amp; Multithreading Initialization</a></li>
          <li><a href="#traversing-local-drive">Traversing Local Drive</a></li>
          <li><a href="#child-thread">Child Thread</a>
            <ul>
              <li><a href="#encryption-state-1">Encryption State 1</a></li>
              <li><a href="#encryption-state-2">Encryption State 2</a></li>
              <li><a href="#encryption-state-3">Encryption State 3</a></li>
              <li><a href="#encryption-state-4">Encryption State 4</a></li>
            </ul>
          </li>
          <li><a href="#traversing-network-hosts">Traversing Network Hosts</a>
            <ul>
              <li><a href="#scanning-for-live-hosts">Scanning For Live Hosts</a></li>
              <li><a href="#launching-threads-to-traverse-live-hosts-network-shares">Launching Threads To Traverse Live Hosts’ Network Shares</a></li>
            </ul>
          </li>
          <li><a href="#traversing-network-drives">Traversing Network Drives</a>
            <ul>
              <li><a href="#impersonation-process-with-the-same-authentication-id">Impersonation Process With The Same Authentication ID</a></li>
              <li><a href="#impersonation-shell-process-window">Impersonation Shell Process Window</a></li>
            </ul>
          </li>
          <li><a href="#dropping-ransom-note">Dropping Ransom Note</a></li>
        </ul>
      </li>
      <li><a href="#self-deletion">Self-Deletion</a></li>
      <li><a href="#references">References</a></li>
    </ul>
  </li>
</ul>

<h2 id="lockbit-cti">LockBit CTI</h2>

<p>On 4 February 2022, the FBI issued FLASH security advisory on Indicators of Compromise (IOCs) associated with <strong>LockBit 2.0</strong> ransomware, one of the most active ransomware groups in the current cybercrime ecosystem.</p>

<p>The <strong>LockBit</strong> gang (aka <strong>Bitwise Spider</strong>) are the developers of the <strong>LockBit</strong> Ransomware-as-a-Service (RaaS). LockBit ransomware first appeared in September 2019 and in June 2021, the group rebranded to <strong>LockBit 2.0</strong>, like several other families did in 2021. <strong>LockBit 2.0</strong> has been responsible for various high-profile attacks in 2021, including victims such as Accenture, following the launch of a marketing campaign to recruit new affiliates in mid-2021. The rebranded version of <strong>LockBit</strong> includes several new features, including self-propagation, removal of shadow copies, bypass User Account Control (UAC), ESXi support, and the printing of ransom notes via printers detected on the victim’s network. The group also prides itself on having the fastest encryption on the ransomware market. This is because it uses a multithreaded approach in encryption and only partially encrypts the files, as only 4 KB of data is encrypted per file.</p>

<p><strong>LockBit 2.0</strong> is represented on the Russian-speaking cybercrime forums as <strong>“LockBitSupp”</strong> on multiple sites, including RAMP, Exploit[.]in, and XSS[.]is, where they recruit affiliates and advertises its RaaS. <strong>LockBit</strong> has grown to become the leading group for the highest number of victims published to its darknet leak site after overtaking <strong>Conti</strong> in early 2022. Prior to encryption, <strong>Lockbit</strong> affiliates can use the StealBit application obtained directly from the <strong>Lockbit</strong> panel to exfiltrate specific file types. The desired file types can be configured by the affiliate to tailor the attack to the victim. The affiliate configures the application to target a desired file path, and, upon execution, the tool copies the files to an attacker-controlled server using http. Due to the nature of the affiliate model, some attackers use other data theft available tools such as Rclone and MEGAsync to achieve the same results. <strong>Lockbit 2.0</strong> actors also use cloud file sharing services including, privatlab[.]net, anonfiles[.]com, sendspace[.]com, fex[.]net, transfer[.]sh, and send.exploit[.]in to send data stolen from victim networks.</p>

<p>All credits in this part goes to <strong>Equinix’s</strong> <a href="https://twitter.com/BushidoToken">Will Thomas</a> for the awesome intel on the ransomware group!</p>

<h2 id="overview">Overview</h2>

<p>This report is my brief analysis for the <strong>LockBit Ransomware</strong> v2.0.</p>

<p>In the analysis, I cover all of <strong>LockBit’s</strong> ransomware functionalities. However, I left out details about some functionalities because I was really lazy and burned out by the time I finished analyzing lol.</p>

<p><strong>LockBit</strong> uses a hybrid-cryptography scheme of <strong>Libsodium’s XSalsa20-Poly1305-Blake2b-Curve25519</strong> and <strong>AES-128-CBC</strong> to encrypt files. The malware’s configuration is XOR-encrypted and stored in static memory. Like <strong>REvil</strong> and <strong>BlackMatter</strong>, <strong>LockBit’s</strong> child threads use a shared structure to divide the encryption work into multiple states while encrypting a file.</p>

<p>With the elaborated multithreading architecture, <strong>LockBit’s</strong> performance is relatively fast compared to most ransomware in the field.</p>

<p><img src="/uploads/lockbit01.PNG" alt="alt text" /></p>

<p><em>Figure 1: LockBit Leak Site.</em></p>

<p><strong>LockBit</strong> is definitely the most sophisticated ransomware I have taken a look at, and it was a lot of fun analyzing and figuring it out.</p>

<p>My analysis is 96% based on static analysis in IDA because I am unfortunately too lazy for dynamic analysis. Therefore, this report only covers what I see in the code and how I understand them. Enjoy!</p>

<h2 id="iocs">IOCS</h2>

<p>The sample I used is a 32-bit Windows executable. Huge shoutout to <a href="https://twitter.com/vxunderground">vx-underground</a> for sharing it.</p>

<p><strong>MD5</strong>: 63dcf75ad743b292e4a6cd067ffc2c18</p>

<p><strong>SHA256</strong>: 9feed0c7fa8c1d32390e1c168051267df61f11b048ec62aa5b8e66f60e8083af</p>

<p><strong>Sample</strong>: https://bazaar.abuse.ch/sample/9feed0c7fa8c1d32390e1c168051267df61f11b048ec62aa5b8e66f60e8083af/</p>

<p><img src="/uploads/lockbit02.PNG" alt="alt text" /></p>

<p><em>Figure 2: LockBit Victim Portal.</em></p>

<h2 id="ransom-note">Ransom Note</h2>

<p>The content of the ransom note is XOR-encrypted in <strong>LockBit’s</strong> executable, which is dynamically decrypted once and written to the ransom note file in every directory.</p>

<p>The ransom note filename is <strong>Restore-My-Files.txt</strong>.</p>

<p><img src="/uploads/lockbit03.PNG" alt="alt text" /></p>

<p><em>Figure 3: LockBit Ransom Note.</em></p>

<h1 id="static-code-analysis">Static Code Analysis</h1>

<h2 id="anti-analysis-anti-debug-check">Anti-Analysis: Anti-Debug Check</h2>

<p>At the beginning of the entry point function, <strong>LOCKBIT</strong> checks the <strong>NtGlobalFlag</strong> field in the <strong>Process Control Block (PEB)</strong> to detect if the malware process is being debugged.</p>

<p>This is done by comparing the field’s value to 0x70, which indicates that the flags <strong>FLG_HEAP_ENABLE_TAIL_CHECK</strong>, <strong>FLG_HEAP_ENABLE_FREE_CHECK</strong>, <strong>FLG_HEAP_VALIDATE_PARAMETERS</strong> are set.</p>

<p>If the process is being debugged, the malware hangs indefinitely.</p>

<p><img src="/uploads/lockbit04.PNG" alt="alt text" /></p>

<p><em>Figure 4: Anti-Debug Check.</em></p>

<h2 id="anti-analysis-stack-string">Anti-Analysis: Stack String</h2>

<p>Most important strings in <strong>LockBit’s</strong> executable are encoded and stored as a stack string. Before being used, they are decoded dynamically through some simple computation such as addition, subtraction, or XOR-ing.</p>

<p><img src="/uploads/lockbit05.PNG" alt="alt text" /></p>

<p><em>Figure 5: Stack String Obfuscation.</em></p>

<h2 id="anti-analysis-inline-dynamic-api-resolving">Anti-Analysis: Inline Dynamic API Resolving</h2>

<p>Like most major ransomware, <strong>LockBit</strong> resolves APIs dynamically to make static analysis harder, but unlike many, <strong>LockBit</strong> inlines the entire resolving process, making the decompiled code much larger to analyze.</p>

<p>First, to resolve these APIs dynamically, their respective libraries need to be loaded in memory initially. Since <strong>Kernel32</strong> is already loaded from <strong>LockBit’s</strong> few imports, the malware locates it and resolves <strong>LoadLibraryA</strong> to load others in memory.</p>

<p><img src="/uploads/lockbit06.PNG" alt="alt text" /></p>

<p><em>Figure 6: Stack String Obfuscation.</em></p>

<p>After retrieving <strong>LoadLibraryA</strong>, <strong>LockBit</strong> resolves each DLL’s name is resolved as a stack string and calls <strong>LoadLibraryA</strong> to load it in memory.</p>

<p>Below is the list of the loaded libraries.</p>

<ul>
  <li><em>gdiplus.dll, ws2_32.dll, shell32.dll, advapi32.dll, user32.dll, ole32.dll, netapi32.dll, gpredit.dll, oleaut32.dll, shlwapi.dll, msvcrt.dll, activeds.dll, gdiplus.dll, mpr.dll, bcrypt.dll, crypt32.dll, iphlpapi.dll, wtsapi32.dll, win32u.dll, Comdlg32.dll, cryptbase.dll, combase.dll, winspool.drv</em></li>
</ul>

<p>When retrieving an API address from memory, the malware first locates its DLL’s base by iterating the PEB’s loader module linked list and checks the library name of each entry. Each name (in lowercase) is hashed using <strong>FNV1A</strong> and compared to a hard-coded hash, and the corresponding DLL base is returned.</p>

<p><img src="/uploads/lockbit07.PNG" alt="alt text" /></p>

<p><em>Figure 7: Locating DLL Base.</em></p>

<p>Using the DLL base, <strong>LockBit</strong> accesses its export directory table and iterates through the name of each export API. For each API’s name, the malware converts its characters to lower case and hash it with <strong>FNV1A</strong>. The final hash is compared against a target hash, and if the hashes match, the malware retrieves the address of the API’s name ordinals and uses that to index into the export table’s <strong>AddressOfFunctions</strong> array to return the target API address.</p>

<p><img src="/uploads/lockbit08.PNG" alt="alt text" /></p>

<p><em>Figure 8: Iterating Through Export Directory Table.</em></p>

<p><img src="/uploads/lockbit09.PNG" alt="alt text" /></p>

<p><em>Figure 9: Retrieving Target API’s Address.</em></p>

<p>For most of the APIs used throughout the executable, this process is completely inline every time, which significantly increases the amount of compiled code we need to look at. <strong>LockBit</strong> stores the resolved DLL bases and APIs in global memory to reuse them, so despite having a larger static code, the number of dynamic instructions is about the same compared to if this process is not inline. This makes reverse engineering the sample a bit more annoying while not compromising the performance of the code itself.</p>

<h2 id="computer-language-check">Computer Language Check</h2>

<p>Like a lot of ransomwares, <strong>LockBit</strong> checks the system’s languages to avoids encrypting machines in Russia and nearby countries.</p>

<p>The malware resolves <strong>GetSystemDefaultUILanguage</strong> and <strong>GetUserDefaultUILanguage</strong> and call them to check if the system or user default UI language is in the list to avoid below.</p>

<ul>
  <li>Azerbaijani (Cyrillic, Azerbaijan), Azerbaijani (Latin, Azerbaijan), Armenian (Armenia), Belarusian (Belarus), Georgian (Georgia), Kazakh (Kazakhstan), Kyrgyz (Kyrgyzstan), Russian (Moldova), Russian (Russia), Tajik (Cyrillic, Tajikistan), Turkmen (Turkmenistan), Uzbek (Cyrillic, Uzbekistan), Uzbek (Latin, Uzbekistan), Ukrainian (Ukraine)</li>
</ul>

<p><img src="/uploads/lockbit10.PNG" alt="alt text" /></p>

<p><em>Figure 10: Checking Blacklist Languages.</em></p>

<p>If the user or system UI language is blacklisted, the malware resolves <strong>ExitProcess</strong> and calls it to terminates itself immediately.</p>

<p><img src="/uploads/lockbit11.PNG" alt="alt text" /></p>

<p><em>Figure 11: Terminating If Language Is Blacklisted.</em></p>

<h2 id="denying-access-to-ransomware-process">Denying Access To Ransomware Process</h2>

<p>After loading all required libraries into memory, <strong>LockBit</strong> attempts to restrict access to its own process by modifying its own access control list.</p>

<p>First, it resolves and calls <strong>NtOpenProcess</strong> to get a handle to the current ransomware process. Then, the malware resolves and calls <strong>GetSecurityInfo</strong> to retrieve the process’s security descriptor ACL.</p>

<p><img src="/uploads/lockbit12.PNG" alt="alt text" /></p>

<p><em>Figure 12: Retrieving Process’s Security Descriptor ACL.</em></p>

<p>Next, <strong>LockBit</strong> resolves and calls <strong>RtlAllocateAndInitializeSid</strong> to allocate and initialize an SID with the authority of <strong>SECURITY_WORLD_SID_AUTHORITY</strong> for the <em>EVERYONE group</em>. It then calls <strong>RtlQueryInformationAcl</strong> and <strong>RtlLengthSid</strong> to retrieve the process’s ACL length, calculates the size of a new ACL and allocate a virtual buffer for it. After creating the buffer, <strong>LockBit</strong> calls <strong>RtlCreateAcl</strong> to create that new ACL and calls <strong>RtlAddAccessDeniedAce</strong> to add an <strong>ACCESS_DENIED</strong> access control entry (ACE) to this ACL for the <em>EVERYONE group</em> using the newly created SID above.</p>

<p><img src="/uploads/lockbit13.PNG" alt="alt text" /></p>

<p><em>Figure 13: Creating A New ACL With Denied Access For EVERYONE Group.</em></p>

<p>Finally, <strong>LockBit</strong> calls <strong>RtlGetAce</strong> to iterate through each ACE in the ransomware process’s ACL and <strong>RtlAddAce</strong> to add the ACEs into the new ACL. After all the ACEs have been added to the new ACL, the malware calls <strong>SetSecurityInfo</strong> to set the new ACL to its own running process, which denies access from everyone to itself.</p>

<p><img src="/uploads/lockbit14.PNG" alt="alt text" /></p>

<p><em>Figure 14: Populating &amp; Setting New ACL To Current Process.</em></p>

<h2 id="default-error--privilege-setting">Default Error &amp; Privilege Setting</h2>

<p>LockBit calls <strong>NtSetInformationProcess</strong> to set the current process’s default hard error mode to these 3 flags.</p>

<ul>
  <li><strong>SEM_FAILCRITICALERRORS</strong>: The system does not display the critical-error-handler message box and sends the error to the calling process.</li>
  <li><strong>SEM_NOGPFAULTERRORBOX</strong>: The system does not display the Windows Error Reporting dialog.</li>
  <li><strong>SEM_NOALIGNMENTFAULTEXCEPT</strong>: The system automatically fixes alignment faults.</li>
</ul>

<p>It also calls <strong>RtlAdjustPrivilege</strong> to enable the <strong>SE_TAKE_OWNERSHIP_PRIVILEGE</strong> privilege to be able to later take ownership of files during encryption.</p>

<p><img src="/uploads/lockbit15.PNG" alt="alt text" /></p>

<p><em>Figure 15: Default Error &amp; Privilege Setting.</em></p>

<h2 id="configuration-decryption">Configuration Decryption</h2>

<p><strong>LockBit’s</strong> configuration is divided into two different parts, which are data and flags.</p>

<p>The data part is encoded and stored statically in the executable, which contains the following fields.</p>

<ul>
  <li>EMF file 1: Contain the vector graphic for the text “ALL YOUR IMPORTANT FILES ARE STOLEN AND ENCRYPTED”</li>
  <li>EMF file 2: Contain the vector graphic for the text “LOCKBIT 2.0”</li>
  <li>Blender Pro Medium TTF file</li>
  <li>Proxima Nova TTF file</li>
  <li>LockBit text PNG</li>
  <li>LockBit icon PNG</li>
  <li>LockBit icon large PNG</li>
  <li>Process list: list of processes to terminate, each separated by a comma</li>
  <li>Service list: list of services to stop, each separated by a comma</li>
</ul>

<p><img src="/uploads/lockbit16.PNG" alt="alt text" /></p>

<p><em>Figure 16: Decoding Configuration Data.</em></p>

<p>The decoding process is quite simple since it’s just XOR-ing each encoded byte with 0x5F.</p>

<p><img src="/uploads/lockbit17.PNG" alt="alt text" /></p>

<p><em>Figure 17: Configuration Decoding Algorithm.</em></p>

<p>You can find the files listed above <a href="https://github.com/cdong1012/IDAPython-Malware-Scripts/tree/master/Lockbit/lockbit_dropped_files">here</a>.</p>

<p>Below is the process and service to terminate lists.</p>

<ul>
  <li>Process list:
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wxServer,wxServerView,sqlmangr,RAgui,supervise,Culture,Defwatch,winword,QBW32,QBDBMgr,qbupdate,axlbridge,httpd,fdlauncher,MsDtSrvr,java,360se,360doctor,wdswfsafe,fdhost,GDscan,ZhuDongFangYu,QBDBMgrN,mysqld,AutodeskDesktopApp,acwebbrowser,Creative Cloud,Adobe Desktop Service,CoreSync,Adobe CEF,Helper,node,AdobeIPCBroker,sync-taskbar,sync-worker,InputPersonalization,AdobeCollabSync,BrCtrlCntr,BrCcUxSys,SimplyConnectionManager,Simply.SystemTrayIcon,fbguard,fbserver,ONENOTEM,wsa_service,koaly-exp-engine-service,TeamViewer_Service,TeamViewer,tv_w32,tv_x64,TitanV,Ssms,notepad,RdrCEF,sam,oracle,ocssd,dbsnmp,synctime,agntsvc,isqlplussvc,xfssvccon,mydesktopservice,ocautoupds,encsvc,tbirdconfig,mydesktopqos,ocomm,dbeng50,sqbcoreservice,excel,infopath,msaccess,mspub,onenote,outlook,powerpnt,steam,thebat,thunderbird,visio,wordpad,bedbh,vxmon,benetns,bengien,pvlsvr,beserver,raw_agent_svc,vsnapvss,CagService,DellSystemDetect,EnterpriseClient,ProcessHacker,Procexp64,Procexp,GlassWire,GWCtlSrv,WireShark,dumpcap,j0gnjko1,Autoruns,Autoruns64,Autoruns64a,Autorunsc,Autorunsc64,Autorunsc64a,Sysmon,Sysmon64,procexp64a,procmon,procmon64,procmon64a,ADExplorer,ADExplorer64,ADExplorer64a,tcpview,tcpview64,tcpview64a,avz,tdsskiller,RaccineElevatedCfg,RaccineSettings,Raccine_x86,Raccine,Sqlservr,RTVscan,sqlbrowser,tomcat6,QBIDPService,notepad++,SystemExplorer,SystemExplorerService,SystemExplorerService64,Totalcmd,Totalcmd64,VeeamDeploymentSvc 
</code></pre></div>    </div>
  </li>
  <li>Service list:
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wrapper,DefWatch,ccEvtMgr,ccSetMgr,SavRoam,Sqlservr,sqlagent,sqladhlp,Culserver,RTVscan,sqlbrowser,SQLADHLP,QBIDPService,Intuit.QuickBooks.FCS,QBCFMonitorService, msmdsrv,tomcat6,zhudongfangyu,vmware-usbarbitator64,vmware-converter,dbsrv12,dbeng8,MSSQL$MICROSOFT##WID,MSSQL$VEEAMSQL2012,SQLAgent$VEEAMSQL2012,SQLBrowser,SQLWriter,FishbowlMySQL,MSSQL$MICROSOFT##WID,MySQL57,MSSQL$KAV_CS_ADMIN_KIT,MSSQLServerADHelper100,SQLAgent$KAV_CS_ADMIN_KIT,msftesql-Exchange,MSSQL$MICROSOFT##SSEE,MSSQL$SBSMONITORING,MSSQL$SHAREPOINT,MSSQLFDLauncher$SBSMONITORING,MSSQLFDLauncher$SHAREPOINT,SQLAgent$SBSMONITORING,SQLAgent$SHAREPOINT,QBFCService,QBVSS,YooBackup,YooIT,vss,sql,svc$,MSSQL,MSSQL$,memtas,mepocs,sophos,veeam,backup,bedbg,PDVFSService,BackupExecVSSProvider,BackupExecAgentAccelerator,BackupExecAgentBrowser,BackupExecDiveciMediaService,BackupExecJobEngine,BackupExecManagementService,BackupExecRPCService,MVArmor,MVarmor64,stc_raw_agent,VSNAPVSS,VeeamTransportSvc,VeeamDeploymentService,VeeamNFSSvc,AcronisAgent,ARSM,AcrSch2Svc,CASAD2DWebSvc,CAARCUpdateSvc,WSBExchange,MSExchange,MSExchange$ 
</code></pre></div>    </div>
  </li>
</ul>

<p>Because the service/process names are separated by commas, the malware allocates a separate array in virtual memory to contain pointers to each name by copying the name into this new array for easy access.</p>

<p>The process list is also parsed into two different arrays of pointers, one for storing the names as normal ASCII strings and one for storing them as wide strings.</p>

<p><img src="/uploads/lockbit18.PNG" alt="alt text" /></p>

<p><em>Figure 18: Parsing Lists of Processes &amp; Services To Terminate.</em></p>

<p>The flags part of the configuration is stored in an array of bytes. Each byte corresponds to a specific execution flag that <strong>LockBit</strong> checks for. The flag is enabled if the corresponding byte is 0xFF, and it’s disabled if the corresponding byte is 0xAA.</p>

<p><img src="/uploads/lockbit19.PNG" alt="alt text" /></p>

<p><em>Figure 19: Configuration Flags.</em></p>

<p>Below are the flags and their order in the array.</p>

<ul>
  <li><strong>Index 0</strong>: Disable UAC bypass</li>
  <li><strong>Index 1</strong>: Enable self deletion</li>
  <li><strong>Index 2</strong>: Enable logging</li>
  <li><strong>Index 3</strong>: Enable network traversal for file encryption</li>
  <li><strong>Index 4, 5, 6</strong>: If all 3 are set, set group policies for Active Directory</li>
  <li><strong>Index 7</strong>: Set registry for LockBit’s extension default icon</li>
  <li><strong>Index 8</strong>: Print ransom note to network printer</li>
</ul>

<h2 id="privilege-escalation--relaunch">Privilege Escalation &amp; Relaunch</h2>

<p>In its first attempt, <strong>LockBit</strong> tries to privilege escalate if the user that runs the ransomware process is a service account.</p>

<p>First, the malware resolves <strong>NtOpenProcessToken</strong> and calls it to retrieve a handle for its own process’s token. Next, it calls <strong>GetTokenInformation</strong> using that token handle to retrieve information about the user associated with that token.</p>

<p><img src="/uploads/lockbit20.PNG" alt="alt text" /></p>

<p><em>Figure 20: Privilege Escalation: Retrieving Token &amp; User Information.</em></p>

<p>Next, <strong>LockBit</strong> calls <strong>AllocateAndInitializeSid</strong> to create an SID with <strong>S-1-5-18</strong> as the SID identifier authority, which is an SID of a service account that is used by the operating system. It then calls <strong>EqualSid</strong> to compare the current user’s SID with the service account SID to check if the current user is a service account.</p>

<p><img src="/uploads/lockbit21.PNG" alt="alt text" /></p>

<p><em>Figure 21: Privilege Escalation: Checking Service Account Privilege.</em></p>

<p>If the current user account is a service account, <strong>LockBit</strong> begins to escalate itself.</p>

<p>First, it calls <strong>LoadLibraryA</strong> to load <strong>“Wtsapi32.dll”</strong> into memory and calls <strong>GetProcAddress</strong> to retrieve the address of <strong>WTSQueryUserToken</strong>. Then, it calls <strong>GetModuleFileNameW</strong> to retrieve a full path to its own ransomware executable.</p>

<p><img src="/uploads/lockbit22.PNG" alt="alt text" /></p>

<p><em>Figure 22: Privilege Escalation: Retrieving Path Of Ransomware Executable.</em></p>

<p>Next, the malware calls <strong>WTSQueryUserToken</strong> with the session ID of <strong>INTERNAL_TS_ACTIVE_CONSOLE_ID (0x7FFE02D8)</strong> to retrieve the primary access token for the active Terminal Services console session. If this function fails, the malware calls <strong>CreateProcessW</strong> to relaunch its own executable as an interactive process with <strong>“winsta0\default”</strong> as the default interactive session.</p>

<p><img src="/uploads/lockbit23.PNG" alt="alt text" /></p>

<p><em>Figure 23: Privilege Escalation: Unable To Get Active Terminal Services Console Session &amp; Relaunching.</em></p>

<p>If the <strong>WTSQueryUserToken</strong> call is executed successfully, <strong>LockBit</strong> calls <strong>DuplicateTokenEx</strong> to duplicate the Terminal Services console token and uses that duplicate token to create an elevated process to launch itself through <strong>CreateProcessAsUserW</strong>.</p>

<p><img src="/uploads/lockbit24.PNG" alt="alt text" /></p>

<p><em>Figure 24: Privilege Escalation: Impersonating Active Terminal Services Console &amp; Escalating.</em></p>

<p>Once the new process is spawned, the malware process calls <strong>ExitProcess</strong> to terminate itself.</p>

<h2 id="logging">Logging</h2>

<p>If the configuration flag at index 2 is set, <strong>LockBit</strong> logs its process in a separately running window.</p>

<p>The malware spawns a thread to manually set up the UI for the window through a lot of Bitmap shenanigans, but I won’t cover how it does that because I’m too burned out as I’m writing this blog lol.</p>

<p>The log window setup function first calls <strong>GetModuleHandleW</strong> to retrieve the handle of the running executable. Next, the malware populates a <strong>WNDCLASSEXW</strong> structure using this handle as the instance of the logging window. The window procedure field of the structure is set to a function that will handle logging communication between the main ransomware process and the window. Again, I won’t cover this since I do indeed value my mental health!</p>

<p><img src="/uploads/lockbit25.PNG" alt="alt text" /></p>

<p><em>Figure 25: Logging: Setting Up Logging Window Structure.</em></p>

<p>After finishing populating the <strong>WNDCLASSEXW</strong> structure, the malware calls <strong>RegisterClassExW</strong> to registers the window class and calls <strong>CreateWindowExW</strong> to create the logging window with <strong>“LockBit_2_0_Ransom”</strong> as the class name and <strong>“LockBit 2.0 Ransom”</strong> as the window name.</p>

<p><img src="/uploads/lockbit26.PNG" alt="alt text" /></p>

<p><em>Figure 26: Logging: Creating Logging Window.</em></p>

<p>After creating the window, <strong>LockBit</strong> calls <strong>ShowWindow</strong> with the <strong>SW_HIDE</strong> flag to hide it and <strong>UpdateWindow</strong> to update this change.</p>

<p><img src="/uploads/lockbit27.PNG" alt="alt text" /></p>

<p><em>Figure 27: Logging: Auto Hiding Logging Window.</em></p>

<p>To be able to display this window manually, <strong>LockBit</strong> developers add a call to <strong>RegisterHotKey</strong> to register the <strong>Shift + F1</strong> combination with the hot key ID of 1, which will communicate with the window process to call <strong>ShowWindow</strong> with the <strong>SW_SHOW</strong> flag to display itself. There is also another call to <strong>RegisterHotKey</strong> to register the <strong>F1</strong> key with the hot key ID of 2, which will hide the logging window if it’s displayed.</p>

<p><img src="/uploads/lockbit28.PNG" alt="alt text" /></p>

<p><em>Figure 28: Logging: Registering Hot Keys to Hide/Unhide Logging Window.</em></p>

<p>Each time the main thread wants to display a logging message, it calls a function that internally calls <strong>SendMessageA</strong> to send that message to the logging window.</p>

<p><img src="/uploads/lockbit29.PNG" alt="alt text" /></p>

<p><em>Figure 29: Logging: Main Thread Sending Logging Messages.</em></p>

<p>Below is the UI of the logging window.</p>

<p><img src="/uploads/lockbit30.PNG" alt="alt text" /></p>

<p><img src="/uploads/lockbit31.PNG" alt="alt text" /></p>

<p><em>Figure 30-31: Logging: General UI.</em></p>

<h2 id="command-line-arguments">Command-line Arguments</h2>

<p><strong>LockBit</strong> can run with or without command-line arguments.</p>

<p>Command-line arguments can come in the form of a path to a file or a folder to be processed. Execution is terminated once the target file/folder are encrypted.</p>

<h2 id="masquerade-explorer--uac-bypass">Masquerade Explorer &amp; UAC Bypass</h2>

<p>Before performing UAC bypass, <strong>LockBit</strong> first checks if it has admin privilege. This is done by calling <strong>NtOpenProcessToken</strong> to retrieve the handle for the ransomware process’s token and <strong>NtQueryInformationToken</strong> to retrieve the token’s elevation information and return if the token is elevated.</p>

<p><img src="/uploads/lockbit32.PNG" alt="alt text" /></p>

<p><em>Figure 32: Checking Admin Privilege.</em></p>

<p>If the process is elevated or the configuration flag at index 0 is set, UAC bypass is skipped.</p>

<p>To begin UAC bypass, the malware checks if the process is in the administrator group. It calls <strong>NtOpenProcessToken</strong> to retrieve a handle to the current process and <strong>CreateWellKnownSid</strong> to create an SID with type <strong>WinBuiltinAdministratorsSid</strong>.</p>

<p><img src="/uploads/lockbit33.PNG" alt="alt text" /></p>

<p><em>Figure 33: Creating Admin SID.</em></p>

<p>Next, <strong>LockBit</strong> calls <strong>CheckTokenMembership</strong> to check if the current process is a member of the admin SID group, then UAC bypass is skipped.</p>

<p>If the current process is not a member of the group, the malware calls <strong>NtQueryInformationToken</strong> to retrieve a handle to a token that is linked with the current process and calls <strong>CheckTokenMembership</strong> again to check if the linked token is a member of the admin SID group.</p>

<p><img src="/uploads/lockbit34.PNG" alt="alt text" /></p>

<p><em>Figure 34: Checking Token Membership For Admin Group.</em></p>

<p>If the token is in the admin group, the malware masquerades <strong>explorer.exe</strong> to bypass UAC.</p>

<p>First, it calls <strong>NtAllocateVirtualMemory</strong> to allocate a virtual buffer and writes the Windows directory path appended by <strong>”\explorer.exe”</strong> in.</p>

<p><img src="/uploads/lockbit35.PNG" alt="alt text" /></p>

<p><img src="/uploads/lockbit36.PNG" alt="alt text" /></p>

<p><em>Figure 35, 36: Allocating &amp; Populating Explorer Path.</em></p>

<p>Next, <strong>LockBit</strong> calls <strong>RtlInitUnicodeString</strong> to convert the Explorer path to a unicode string and writes it in the process’s image path name. It also makes another call to <strong>RtlInitUnicodeString</strong> to convert <strong>“explorer.exe”</strong> to a unicode and writes it in the process’s command-line.</p>

<p><img src="/uploads/lockbit37.PNG" alt="alt text" /></p>

<p><em>Figure 37: Modifies Process’s Image Path &amp; Command-line.</em></p>

<p>Then, the malware calls <strong>RtlReleasePebLock</strong> to release the PEB lock and <strong>LdrEnumerateLoadedModules</strong> to enumerate all loaded modules in memory and calls a function to find and masquerade <strong>explorer.exe</strong>.</p>

<p><img src="/uploads/lockbit38.PNG" alt="alt text" /></p>

<p><em>Figure 38: Enumerates To Find &amp; Masquerade Explorer.</em></p>

<p>For each loaded module, the callback function checks if the module’s base address is the same as <strong>LockBit</strong> base address to find the data table entry corresponding to the malware process in memory.</p>

<p>If the context of the callback function is to masquerade Explorer, the function stores LockBit’s full name and base name into global variables to later restore them. Then, the full Explorer path is used as the new full executable name for <strong>LockBit’s</strong> data table entry.</p>

<p><img src="/uploads/lockbit39.PNG" alt="alt text" /></p>

<p><em>Figure 39: Module Enumerate Callback Function.</em></p>

<p>Finally, the function calls <strong>RtlInitUnicodeString</strong> to write the full Explorer path to <strong>LockBit’s</strong> entry’s full DLL name and <strong>“explorer.exe”</strong> as the base DLL name, which now masquerades the <strong>LockBit</strong> process as an Explorer process.</p>

<p><img src="/uploads/lockbit40.PNG" alt="alt text" /></p>

<p><em>Figure 40: Masquerading LockBit As Explorer.</em></p>

<p>Masquerading as Explorer, <strong>LockBit</strong> starts performing UAC bypass.</p>

<p>It first resolves the address of <strong>CoInitializeEx</strong> and <strong>CoUninitialize</strong> by calling <strong>GetProcAddress</strong>. Then, the malware calls <strong>CoInitializeEx</strong> to initializes the COM library for apartment-threaded object concurrency.</p>

<p><img src="/uploads/lockbit41.PNG" alt="alt text" /></p>

<p><em>Figure 41: Initializing COM Library.</em></p>

<p>Then, <strong>LockBit</strong> basically performs UAC bypass using <strong>ColorDataProxy/CCMLuaUtil</strong> COM interfaces. The source code of this technique <a href="https://github.com/hfiref0x/UACME/blob/92e84a734c4719a9067f4e9c8cb0e263ae4e06af/Source/Akagi/methods/hybrids.c#L877">can be viewed here</a>, so I won’t dive into it.</p>

<h2 id="run-once-mutant">Run-once Mutant</h2>

<p><strong>LockBit</strong> avoids having multiple ransomware instances running at once by checking for a specific mutant object.</p>

<p>First, it decodes the following stack string <strong>“\BaseNamedObjects\{\%02X%02X%02X%02X-%02X%02X-%02X%02X-%02X%02X-%02X%02X%02X%02X%02X%02X}”</strong> and calls <strong>wsprintfW</strong> to write the formatted data into a buffer. Each formatted field corresponds to a byte at a specific index of <strong>LockBit’s</strong> hard-coded public key.</p>

<p><img src="/uploads/lockbit42.PNG" alt="alt text" /></p>

<p><em>Figure 42: Populating Mutant Name.</em></p>

<p><strong>LockBit</strong> then calls <strong>RtlInitUnicodeString</strong> to convert the mutant name into a Unicode string and <strong>NtCreateMutant</strong> to try opening a mutant with the specified name. If the result is <strong>STATUS_OBJECT_NAME_COLLISION</strong>, the malware terminates by calling <strong>ExitProcess</strong> to avoid having multiple running instances.</p>

<p><img src="/uploads/lockbit43.PNG" alt="alt text" /></p>

<p><em>Figure 43: Opening Mutant &amp; Checking For Name Collision.</em></p>

<h2 id="setting-group-policy-for-active-directory">Setting Group Policy For Active Directory</h2>

<h3 id="checking-if-running-on-primary-domain-controller">Checking If Running On Primary Domain Controller</h3>

<p>If the malware process has admin privilege, the OS version is Windows Vista and above, and any of the configuration flags at index 4, 5, 6 is set, <strong>LockBit</strong> tries to create and set new group policies for other hosts through Active Directory.</p>

<p>First, <strong>LockBit</strong> checks if it’s currently executed on a primary domain controller. It calls <strong>GetComputerNameW</strong> to retrieve the NetBIOS name of the local computer that it’s running on.</p>

<p><img src="/uploads/lockbit44.PNG" alt="alt text" /></p>

<p><em>Figure 44: Group Policy: Retrieving PC Name.</em></p>

<p>Then, the malware calls <strong>NetGetDCName</strong> to retrieve the name of the primary domain controller and <strong>lstrcmpiW</strong> to compare the local PC name with that DC name.</p>

<p><img src="/uploads/lockbit45.PNG" alt="alt text" /></p>

<p><em>Figure 45: Group Policy: Checking If PC Is The Primary Domain Controller.</em></p>

<h3 id="retrieving-dns-domain-name">Retrieving DNS Domain Name</h3>

<p>If <strong>LockBit</strong> is running on the domain controller, it tries to retrieve the DNS domain name. First, the malware calls <strong>NtOpenProcessToken</strong> to get the handle to the process’s token and <strong>NtQueryInformationToken_1</strong> to retrieve information about the user corresponding to that token.</p>

<p><img src="/uploads/lockbit46.PNG" alt="alt text" /></p>

<p><em>Figure 46: Group Policy: Retrieving User Information.</em></p>

<p>Next, <strong>LockBit</strong> calls <strong>GetWindowsAccountDomainSid</strong> to retrieve the SID of the domain of the user’s SID. It then calls <strong>CreateWellKnownSid</strong> to create an SID for the user’s domain admin group and <strong>CheckTokenMembership</strong> to check if the user has elevated privilege.</p>

<p><img src="/uploads/lockbit47.PNG" alt="alt text" /></p>

<p><em>Figure 47: Group Policy: Checking Admin Privilege.</em></p>

<p>If the user has admin privilege, <strong>LockBit</strong> calls <strong>GetComputerNameExW</strong> to retrieve the name of the DNS domain of the local computer.</p>

<p><img src="/uploads/lockbit48.PNG" alt="alt text" /></p>

<p><em>Figure 48: Group Policy: Retrieving DNS Domain Name.</em></p>

<h3 id="retrieving-domain-account-admin-name">Retrieving Domain Account Admin Name</h3>

<p>After doing the usual <strong>NtOpenProcessToken</strong> and <strong>NtQueryInformationToken</strong> routine to retrieve admin user token information, <strong>LockBit</strong> calls <strong>LookupAccountSidW</strong> to look up the admin’s account name and domain name.</p>

<p><img src="/uploads/lockbit49.PNG" alt="alt text" /></p>

<p><em>Figure 49: Group Policy: Retrieving Admin User Account &amp; Domain Names.</em></p>

<p>To get the full domain admin name, <strong>LockBit</strong> resolves the stack string <strong>”//”</strong> and builds the name with the format <strong>”&lt;domain name&gt;//&lt;account name&gt;”</strong></p>

<h3 id="com-retrieve-igrouppolicyobject-interface">COM Retrieve IGroupPolicyObject Interface</h3>

<p>To retrieve the <strong>IGroupPolicyObject</strong> Interface, <strong>LockBit</strong> resolves and calls <strong>CoCreateInstance</strong> with the CLSID <strong>{EA502722-A23D-11D1-A7D3-0000F87571E3}</strong> and IID <strong>{EA502723-A23D-11d1-A7D3-0000F87571E3}</strong>.</p>

<p><img src="/uploads/lockbit50.PNG" alt="alt text" /></p>

<p><em>Figure 50: Group Policy: Retrieve IGroupPolicyObject Interface.</em></p>

<h3 id="connect-to-active-directory-domain">Connect To Active Directory Domain</h3>

<p>To connect to the AD domain, <strong>LockBit</strong> first generates the LDAP display name for the Group Policy Object (GPO) by resolving the stack string <strong>“%02X%02X%02X%02X%02X%02X%02X”</strong> and formats it with values from its public key.</p>

<p><img src="/uploads/lockbit51.PNG" alt="alt text" /></p>

<p><em>Figure 51: Group Policy: Building LDAP Display Name For GPO.</em></p>

<p>Next, the malware manually extracts two domain components from the DNS domain name and formats the string <strong>“LDAP://&lt;Domain Controller name&gt;.&lt;DNS domain name&gt;/DC=&lt;Domain component 1&gt;,DC=&lt;Domain Component 2&gt;”</strong>. This string is used as the AD domain name when <strong>LockBit</strong> calls the method <strong>IGroupPolicyObject::New</strong> to create the GPO. Then, it calls <strong>IGroupPolicyObject::GetName</strong> to get the GUID corresponding to the created GPO.</p>

<p><img src="/uploads/lockbit52.PNG" alt="alt text" /></p>

<p><em>Figure 52: Group Policy: Creating GPO.</em></p>

<p>Next, <strong>LockBit</strong> builds the Active Directory path by formatting the string <strong>“LDAP://DC=&lt;Domain component 1&gt;,DC=&lt;Domain Component 2&gt;”</strong>.</p>

<p><img src="/uploads/lockbit53.PNG" alt="alt text" /></p>

<p><em>Figure 53: Group Policy: Building Active Directory Path.</em></p>

<p><strong>LockBit</strong> also builds the GPO path by formatting the string <strong>“LDAP://CN=&lt;GPO GUID&gt;,CN=Policies,CN=System,DC=&lt;Domain component 1&gt;,DC=&lt;Domain Component 2&gt;”</strong></p>

<p>Finally, the Active Directory path and the GPO path are used to call <strong>CreateGPOLink</strong> to connect the GPO to the specified Active Directory domain.</p>

<p><img src="/uploads/lockbit54.PNG" alt="alt text" /></p>

<p><em>Figure 54: Group Policy: Connecting GPO To Active Directory Domain.</em></p>

<h3 id="setting-gpos-attributes">Setting GPO’s attributes</h3>

<p>To modify the GPO to inject <strong>LockBit’s</strong> custom policies, it first needs to update the object’s client-side extensions (CSEs). This requires setting the GPO’s attributes <strong>gPCMachineExtensionNames</strong> and <strong>gPCUserExtensionNames</strong>.</p>

<p>First, given the GPO’s path, <strong>LockBit</strong> calls <strong>ADsGetObject</strong> to retrieve an object of the <strong>IADs</strong> interface corresponding to the GPO using the IID <strong>{FD8256D0-FD15-11CE-ABC4-02608C9E7553}</strong>.</p>

<p><img src="/uploads/lockbit55.PNG" alt="alt text" /></p>

<p><em>Figure 55: Group Policy: Retrieving IADs Object.</em></p>

<p>Next, to set the GPO’s <strong>gPCMachineExtensionNames</strong> attribute, <strong>LockBit</strong> creates a <strong>VARIANT</strong> structure containing the following extension pairs for the desired GPO modification.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[{00000000-0000-0000-0000-000000000000}{BFCBBEB0-9DF4-4C0C-A728-434EA66A0373}{CC5746A9-9B74-4BE5-AE2E-64379C86E0E4}]
[{35378EAC-683F-11D2-A89A-00C04FBBCFA2}{D02B1F72-3407-48AE-BA88-E8213C6761F1}]
[{6A4C88C6-C502-4F74-8F60-2CB23EDC24E2}{BFCBBEB0-9DF4-4C0C-A728-434EA66A0373}]
[{91FBB303-0CD5-4055-BF42-E512A681B325}{CC5746A9-9B74-4BE5-AE2E-64379C86E0E4}]
</code></pre></div></div>

<p><img src="/uploads/lockbit56.PNG" alt="alt text" /></p>

<p><em>Figure 56: Group Policy: Populating gPCMachineExtensionNames Variant.</em></p>

<p>Next, it resolves the stack string <strong>“gPCMachineExtensionNames”</strong> and calls <strong>IADs::Put</strong> to set the value of the <strong>gPCMachineExtensionNames</strong> for the GPO to the value in the <strong>VARIANT</strong> structure.</p>

<p><img src="/uploads/lockbit57.PNG" alt="alt text" /></p>

<p><em>Figure 57: Group Policy: Setting GPO’s gPCMachineExtensionNames Attribute.</em></p>

<p>Similarly, <strong>LockBit</strong> sets the GPO’s <strong>gPCUserExtensionNames</strong> attribute with the following extension pairs.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[{00000000-0000-0000-0000-000000000000}{3BAE7E51-E3F4-41D0-853D-9BB9FD47605F}{CAB54552-DEEA-4691-817E-ED4A4D1AFC72}]
[{7150F9BF-48AD-4DA4-A49C-29EF4A8369BA}{3BAE7E51-E3F4-41D0-853D-9BB9FD47605F}]
[{AADCED64-746C-4633-A97C-D61349046527}{CAB54552-DEEA-4691-817E-ED4A4D1AFC72}]
</code></pre></div></div>

<p><img src="/uploads/lockbit58.PNG" alt="alt text" /></p>

<p><em>Figure 58: Group Policy: Setting GPO’s gPCUserExtensionNames Attribute.</em></p>

<p>The malware also sets the GPO’s <strong>versionNumber</strong> attribute to <strong>“2621892”</strong>.</p>

<p><img src="/uploads/lockbit59.PNG" alt="alt text" /></p>

<p><em>Figure 59: Group Policy: Setting GPO’s versionNumber Attribute.</em></p>

<h3 id="updating-gptini">Updating GPT.INI</h3>

<p>Next, <strong>LockBit</strong> locates the root GPO GUID directory that contains a file called <strong>“GPT.ini</strong>. By updating the <strong>Version</strong> property inside this file, <strong>LockBit</strong> can signal to <strong>gpupdate</strong> that there is a new modification to apply the new settings.</p>

<p>First, using the <strong>IGroupPolicyObject</strong> object, the malware calls <strong>IGroupPolicyObject::GetFileSysPath</strong> to retrieve the root GPO GUID directory. It also calls <strong>IGroupPolicyObject::GetDisplayName</strong> to get the GPO’s display name.</p>

<p><img src="/uploads/lockbit60.PNG" alt="alt text" /></p>

<p><em>Figure 60: Group Policy: Retrieving Root GPO Directory &amp; Display Name.</em></p>

<p>Next, <strong>LockBit</strong> resolves the stack string <strong>“GPT.INI”</strong> and appends it to the root directory by calling <strong>PathAppendW</strong>. Using this GPT.INI path, the malware calls <strong>CreateFileW</strong> to get the handle to that file.</p>

<p><img src="/uploads/lockbit61.PNG" alt="alt text" /></p>

<p><em>Figure 61: Group Policy: Retrieving The Handle To GPT.INI.</em></p>

<p>Then, the malware formats the following string and converts it into multibyte string by calling <strong>WideCharToMultiByte</strong>.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[General]
Version=2621892
displayName=&lt;GPO display name&gt;
</code></pre></div></div>

<p><img src="/uploads/lockbit62.PNG" alt="alt text" /></p>

<p><img src="/uploads/lockbit63.PNG" alt="alt text" /></p>

<p><em>Figure 62, 63: Group Policy: Generating New GPT.INI Content.</em></p>

<p>Finally, <strong>LockBit</strong> calls <strong>WriteFile</strong> to write the updated content into the GPO’s GPT.INI file to signal <strong>gpupdate</strong>.</p>

<p><img src="/uploads/lockbit64.PNG" alt="alt text" /></p>

<p><em>Figure 64: Group Policy: Writing New GPT.INI Content.</em></p>

<h3 id="updating-the-gpo-folder">Updating the GPO Folder</h3>

<p>The next part is for LockBit to drop group policy XML files into the GPO’s Machine Preferences folder (<strong>&lt;GPO GUID&gt;\MACHINE\Preferences</strong>) on the domain controller machine.</p>

<p>These files specify new group policies for the Domain Controller to push out to the network. Below is the list of these files and their destinations:</p>

<ul>
  <li><strong>&lt;GPO GUID&gt;\MACHINE\Preferences\NetworkShares\NetworkShares.xml</strong></li>
  <li><strong>&lt;GPO GUID&gt;\MACHINE\Preferences\Services\Services.xml</strong></li>
  <li><strong>&lt;GPO GUID&gt;\MACHINE\Preferences\Files\Files.xml</strong></li>
  <li><strong>&lt;GPO GUID&gt;\MACHINE\Preferences\ScheduledTasks\ScheduledTasks.xml</strong>: <Exec><command />C:\Windows\System32\taskkill.exe&lt;/Command&gt;<Arguments>/IM #proc_name for each process in WIDESTR_PROCESSES_EXE_LIST # /F</Arguments></Exec></li>
  <li><strong>&lt;GPO GUID&gt;\MACHINE\Registry.pol</strong></li>
  <li><strong>&lt;GPO GUID&gt;\MACHINE\comment.cmtx</strong></li>
</ul>

<p>First, the <strong>NetworkShares.xml</strong> below is formatted to define a network share for each drive on the network hosts once the Domain Controller pushes it out. This will share all each host’s drives on the network for <strong>LockBit</strong> to encrypt them.</p>

<pre><code class="language-HTML">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;NetworkShareSettings clsid="{520870D8-A6E7-47e8-A8D8-E6A4E76EAEC2}"&gt;
   &lt;NetShare clsid="{2888C5E7-94FC-4739-90AA-2C1536D68BC0}" image="2" name="%%ComputerName%%_D" changed="%s" uid="%s"&gt;
      &lt;Properties action="U" name="%%ComputerName%%_D" path="D:" comment="" allRegular="0" allHidden="0" allAdminDrive="0" limitUsers="NO_CHANGE" abe="NO_CHANGE" /&gt;
   &lt;/NetShare&gt;
   &lt;NetShare clsid="{2888C5E7-94FC-4739-90AA-2C1536D68BC0}" image="2" name="%%ComputerName%%_E" changed="%s" uid="%s"&gt;
      &lt;Properties action="U" name="%%ComputerName%%_E" path="E:" comment="" allRegular="0" allHidden="0" allAdminDrive="0" limitUsers="NO_CHANGE" abe="NO_CHANGE" /&gt;
   &lt;/NetShare&gt;
   &lt;NetShare clsid="{2888C5E7-94FC-4739-90AA-2C1536D68BC0}" image="2" name="%%ComputerName%%_F" changed="%s" uid="%s"&gt;
      &lt;Properties action="U" name="%%ComputerName%%_F" path="F:" comment="" allRegular="0" allHidden="0" allAdminDrive="0" limitUsers="NO_CHANGE" abe="NO_CHANGE" /&gt;
   &lt;/NetShare&gt;
   &lt;NetShare clsid="{2888C5E7-94FC-4739-90AA-2C1536D68BC0}" image="2" name="%%ComputerName%%_G" changed="%s" uid="%s"&gt;
      &lt;Properties action="U" name="%%ComputerName%%_G" path="G:" comment="" allRegular="0" allHidden="0" allAdminDrive="0" limitUsers="NO_CHANGE" abe="NO_CHANGE" /&gt;
   &lt;/NetShare&gt;
   &lt;NetShare clsid="{2888C5E7-94FC-4739-90AA-2C1536D68BC0}" image="2" name="%%ComputerName%%_H" changed="%s" uid="%s"&gt;
      &lt;Properties action="U" name="%%ComputerName%%_H" path="H:" comment="" allRegular="0" allHidden="0" allAdminDrive="0" limitUsers="NO_CHANGE" abe="NO_CHANGE" /&gt;
   &lt;/NetShare&gt;
   &lt;NetShare clsid="{2888C5E7-94FC-4739-90AA-2C1536D68BC0}" image="2" name="%%ComputerName%%_I" changed="%s" uid="%s"&gt;
      &lt;Properties action="U" name="%%ComputerName%%_I" path="I:" comment="" allRegular="0" allHidden="0" allAdminDrive="0" limitUsers="NO_CHANGE" abe="NO_CHANGE" /&gt;
   &lt;/NetShare&gt;
   &lt;NetShare clsid="{2888C5E7-94FC-4739-90AA-2C1536D68BC0}" image="2" name="%%ComputerName%%_J" changed="%s" uid="%s"&gt;
      &lt;Properties action="U" name="%%ComputerName%%_J" path="J:" comment="" allRegular="0" allHidden="0" allAdminDrive="0" limitUsers="NO_CHANGE" abe="NO_CHANGE" /&gt;
   &lt;/NetShare&gt;
   &lt;NetShare clsid="{2888C5E7-94FC-4739-90AA-2C1536D68BC0}" image="2" name="%%ComputerName%%_K" changed="%s" uid="%s"&gt;
      &lt;Properties action="U" name="%%ComputerName%%_K" path="K:" comment="" allRegular="0" allHidden="0" allAdminDrive="0" limitUsers="NO_CHANGE" abe="NO_CHANGE" /&gt;
   &lt;/NetShare&gt;
   &lt;NetShare clsid="{2888C5E7-94FC-4739-90AA-2C1536D68BC0}" image="2" name="%%ComputerName%%_L" changed="%s" uid="%s"&gt;
      &lt;Properties action="U" name="%%ComputerName%%_L" path="L:" comment="" allRegular="0" allHidden="0" allAdminDrive="0" limitUsers="NO_CHANGE" abe="NO_CHANGE" /&gt;
   &lt;/NetShare&gt;
   &lt;NetShare clsid="{2888C5E7-94FC-4739-90AA-2C1536D68BC0}" image="2" name="%%ComputerName%%_M" changed="%s" uid="%s"&gt;
      &lt;Properties action="U" name="%%ComputerName%%_M" path="M:" comment="" allRegular="0" allHidden="0" allAdminDrive="0" limitUsers="NO_CHANGE" abe="NO_CHANGE" /&gt;
   &lt;/NetShare&gt;
   &lt;NetShare clsid="{2888C5E7-94FC-4739-90AA-2C1536D68BC0}" image="2" name="%%ComputerName%%_N" changed="%s" uid="%s"&gt;
      &lt;Properties action="U" name="%%ComputerName%%_N" path="N:" comment="" allRegular="0" allHidden="0" allAdminDrive="0" limitUsers="NO_CHANGE" abe="NO_CHANGE" /&gt;
   &lt;/NetShare&gt;
   &lt;NetShare clsid="{2888C5E7-94FC-4739-90AA-2C1536D68BC0}" image="2" name="%%ComputerName%%_O" changed="%s" uid="%s"&gt;
      &lt;Properties action="U" name="%%ComputerName%%_O" path="O:" comment="" allRegular="0" allHidden="0" allAdminDrive="0" limitUsers="NO_CHANGE" abe="NO_CHANGE" /&gt;
   &lt;/NetShare&gt;
   &lt;NetShare clsid="{2888C5E7-94FC-4739-90AA-2C1536D68BC0}" image="2" name="%%ComputerName%%_P" changed="%s" uid="%s"&gt;
      &lt;Properties action="U" name="%%ComputerName%%_P" path="P:" comment="" allRegular="0" allHidden="0" allAdminDrive="0" limitUsers="NO_CHANGE" abe="NO_CHANGE" /&gt;
   &lt;/NetShare&gt;
   &lt;NetShare clsid="{2888C5E7-94FC-4739-90AA-2C1536D68BC0}" image="2" name="%%ComputerName%%_Q" changed="%s" uid="%s"&gt;
      &lt;Properties action="U" name="%%ComputerName%%_Q" path="Q:" comment="" allRegular="0" allHidden="0" allAdminDrive="0" limitUsers="NO_CHANGE" abe="NO_CHANGE" /&gt;
   &lt;/NetShare&gt;
   &lt;NetShare clsid="{2888C5E7-94FC-4739-90AA-2C1536D68BC0}" image="2" name="%%ComputerName%%_R" changed="%s" uid="%s"&gt;
      &lt;Properties action="U" name="%%ComputerName%%_R" path="R:" comment="" allRegular="0" allHidden="0" allAdminDrive="0" limitUsers="NO_CHANGE" abe="NO_CHANGE" /&gt;
   &lt;/NetShare&gt;
   &lt;NetShare clsid="{2888C5E7-94FC-4739-90AA-2C1536D68BC0}" image="2" name="%%ComputerName%%_S" changed="%s" uid="%s"&gt;
      &lt;Properties action="U" name="%%ComputerName%%_S" path="S:" comment="" allRegular="0" allHidden="0" allAdminDrive="0" limitUsers="NO_CHANGE" abe="NO_CHANGE" /&gt;
   &lt;/NetShare&gt;
   &lt;NetShare clsid="{2888C5E7-94FC-4739-90AA-2C1536D68BC0}" image="2" name="%%ComputerName%%_T" changed="%s" uid="%s"&gt;
      &lt;Properties action="U" name="%%ComputerName%%_T" path="T:" comment="" allRegular="0" allHidden="0" allAdminDrive="0" limitUsers="NO_CHANGE" abe="NO_CHANGE" /&gt;
   &lt;/NetShare&gt;
   &lt;NetShare clsid="{2888C5E7-94FC-4739-90AA-2C1536D68BC0}" image="2" name="%%ComputerName%%_U" changed="%s" uid="%s"&gt;
      &lt;Properties action="U" name="%%ComputerName%%_U" path="U:" comment="" allRegular="0" allHidden="0" allAdminDrive="0" limitUsers="NO_CHANGE" abe="NO_CHANGE" /&gt;
   &lt;/NetShare&gt;
   &lt;NetShare clsid="{2888C5E7-94FC-4739-90AA-2C1536D68BC0}" image="2" name="%%ComputerName%%_V" changed="%s" uid="%s"&gt;
      &lt;Properties action="U" name="%%ComputerName%%_V" path="V:" comment="" allRegular="0" allHidden="0" allAdminDrive="0" limitUsers="NO_CHANGE" abe="NO_CHANGE" /&gt;
   &lt;/NetShare&gt;
   &lt;NetShare clsid="{2888C5E7-94FC-4739-90AA-2C1536D68BC0}" image="2" name="%%ComputerName%%_W" changed="%s" uid="%s"&gt;
      &lt;Properties action="U" name="%%ComputerName%%_W" path="W:" comment="" allRegular="0" allHidden="0" allAdminDrive="0" limitUsers="NO_CHANGE" abe="NO_CHANGE" /&gt;
   &lt;/NetShare&gt;
   &lt;NetShare clsid="{2888C5E7-94FC-4739-90AA-2C1536D68BC0}" image="2" name="%%ComputerName%%_X" changed="%s" uid="%s"&gt;
      &lt;Properties action="U" name="%%ComputerName%%_X" path="X:" comment="" allRegular="0" allHidden="0" allAdminDrive="0" limitUsers="NO_CHANGE" abe="NO_CHANGE" /&gt;
   &lt;/NetShare&gt;
   &lt;NetShare clsid="{2888C5E7-94FC-4739-90AA-2C1536D68BC0}" image="2" name="%%ComputerName%%_Y" changed="%s" uid="%s"&gt;
      &lt;Properties action="U" name="%%ComputerName%%_Y" path="Y:" comment="" allRegular="0" allHidden="0" allAdminDrive="0" limitUsers="NO_CHANGE" abe="NO_CHANGE" /&gt;
   &lt;/NetShare&gt;
   &lt;NetShare clsid="{2888C5E7-94FC-4739-90AA-2C1536D68BC0}" image="2" name="%%ComputerName%%_Z" changed="%s" uid="%s"&gt;
      &lt;Properties action="U" name="%%ComputerName%%_Z" path="Z:" comment="" allRegular="0" allHidden="0" allAdminDrive="0" limitUsers="NO_CHANGE" abe="NO_CHANGE" /&gt;
   &lt;/NetShare&gt;
&lt;/NetworkShareSettings&gt;
</code></pre>

<p>Next, the <strong>Services.xml</strong> below is formatted to add policies to stop and disable certain services on the AD hosts. The list of stopped services are:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>"SQLPBDMS", "SQLPBENGINE", "MSSQLFDLauncher", "SQLSERVERAGENT", "MSSQLServerOLAPService", 
"SSASTELEMETRY", "SQLBrowser", "SQL Server Distributed Replay Client", 
"SQL Server Distributed Replay Controller", "MsDtsServer150", "SSISTELEMETRY150", 
"SSISScaleOutMaster150", "SSISScaleOutWorker150", "MSSQLLaunchpad", "SQLWriter", "SQLTELEMETRY", "MSSQLSERVER"
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;NTServices clsid="{2CFB484A-4E96-4b5d-A0B6-093D2F91E6AE}"&gt;
   &lt;NTService clsid="{AB6F0B67-341F-4e51-92F9-005FBFBA1A43}" name="SQLPBDMS" image="4" changed="%s" uid="%s" disabled="0"&gt;
      &lt;Properties startupType="DISABLED" serviceName="SQLPBDMS" serviceAction="STOP" timeout="30" /&gt;
   &lt;/NTService&gt;
   &lt;NTService clsid="{AB6F0B67-341F-4e51-92F9-005FBFBA1A43}" name="SQLPBENGINE" image="4" changed="%s" uid="%s" disabled="0"&gt;
      &lt;Properties startupType="DISABLED" serviceName="SQLPBENGINE" serviceAction="STOP" timeout="30" /&gt;
   &lt;/NTService&gt;
   &lt;NTService clsid="{AB6F0B67-341F-4e51-92F9-005FBFBA1A43}" name="MSSQLFDLauncher" image="4" changed="%s" uid="%s" userContext="0" removePolicy="0" disabled="0"&gt;
      &lt;Properties startupType="DISABLED" serviceName="MSSQLFDLauncher" serviceAction="STOP" timeout="30" /&gt;
   &lt;/NTService&gt;
   &lt;NTService clsid="{AB6F0B67-341F-4e51-92F9-005FBFBA1A43}" name="SQLSERVERAGENT" image="4" changed="%s" uid="%s" disabled="0"&gt;
      &lt;Properties startupType="DISABLED" serviceName="SQLSERVERAGENT" serviceAction="STOP" timeout="30" /&gt;
   &lt;/NTService&gt;
   &lt;NTService clsid="{AB6F0B67-341F-4e51-92F9-005FBFBA1A43}" name="MSSQLServerOLAPService" image="4" changed="%s" uid="%s" disabled="0"&gt;
      &lt;Properties startupType="DISABLED" serviceName="MSSQLServerOLAPService" serviceAction="STOP" timeout="30" /&gt;
   &lt;/NTService&gt;
   &lt;NTService clsid="{AB6F0B67-341F-4e51-92F9-005FBFBA1A43}" name="SSASTELEMETRY" image="4" changed="%s" uid="%s" disabled="0"&gt;
      &lt;Properties startupType="DISABLED" serviceName="SSASTELEMETRY" serviceAction="STOP" timeout="30" /&gt;
   &lt;/NTService&gt;
   &lt;NTService clsid="{AB6F0B67-341F-4e51-92F9-005FBFBA1A43}" name="SQLBrowser" image="4" changed="%s" uid="%s" disabled="0"&gt;
      &lt;Properties startupType="DISABLED" serviceName="SQLBrowser" serviceAction="STOP" timeout="30" /&gt;
   &lt;/NTService&gt;
   &lt;NTService clsid="{AB6F0B67-341F-4e51-92F9-005FBFBA1A43}" name="SQL Server Distributed Replay Client" image="4" changed="%s" uid="%s" disabled="0"&gt;
      &lt;Properties startupType="DISABLED" serviceName="SQL Server Distributed Replay Client" serviceAction="STOP" timeout="30" /&gt;
   &lt;/NTService&gt;
   &lt;NTService clsid="{AB6F0B67-341F-4e51-92F9-005FBFBA1A43}" name="SQL Server Distributed Replay Controller" image="4" changed="%s" uid="%s" disabled="0"&gt;
      &lt;Properties startupType="DISABLED" serviceName="SQL Server Distributed Replay Controller" serviceAction="STOP" timeout="30" /&gt;
   &lt;/NTService&gt;
   &lt;NTService clsid="{AB6F0B67-341F-4e51-92F9-005FBFBA1A43}" name="MsDtsServer150" image="4" changed="%s" uid="%s" disabled="0"&gt;
      &lt;Properties startupType="DISABLED" serviceName="MsDtsServer150" serviceAction="STOP" timeout="30" /&gt;
   &lt;/NTService&gt;
   &lt;NTService clsid="{AB6F0B67-341F-4e51-92F9-005FBFBA1A43}" name="SSISTELEMETRY150" image="4" changed="%s" uid="%s" disabled="0"&gt;
      &lt;Properties startupType="DISABLED" serviceName="SSISTELEMETRY150" serviceAction="STOP" timeout="30" /&gt;
   &lt;/NTService&gt;
   &lt;NTService clsid="{AB6F0B67-341F-4e51-92F9-005FBFBA1A43}" name="SSISScaleOutMaster150" image="4" changed="%s" uid="%s" disabled="0"&gt;
      &lt;Properties startupType="DISABLED" serviceName="SSISScaleOutMaster150" serviceAction="STOP" timeout="30" /&gt;
   &lt;/NTService&gt;
   &lt;NTService clsid="{AB6F0B67-341F-4e51-92F9-005FBFBA1A43}" name="SSISScaleOutWorker150" image="4" changed="%s" uid="%s" disabled="0"&gt;
      &lt;Properties startupType="DISABLED" serviceName="SSISScaleOutWorker150" serviceAction="STOP" timeout="30" /&gt;
   &lt;/NTService&gt;
   &lt;NTService clsid="{AB6F0B67-341F-4e51-92F9-005FBFBA1A43}" name="MSSQLLaunchpad" image="4" changed="%s" uid="%s" disabled="0"&gt;
      &lt;Properties startupType="DISABLED" serviceName="MSSQLLaunchpad" serviceAction="STOP" timeout="30" /&gt;
   &lt;/NTService&gt;
   &lt;NTService clsid="{AB6F0B67-341F-4e51-92F9-005FBFBA1A43}" name="SQLWriter" image="4" changed="%s" uid="%s" disabled="0"&gt;
      &lt;Properties startupType="DISABLED" serviceName="SQLWriter" serviceAction="STOP" timeout="30" /&gt;
   &lt;/NTService&gt;
   &lt;NTService clsid="{AB6F0B67-341F-4e51-92F9-005FBFBA1A43}" name="SQLTELEMETRY" image="4" changed="%s" uid="%s" disabled="0"&gt;
      &lt;Properties startupType="DISABLED" serviceName="SQLTELEMETRY" serviceAction="STOP" timeout="30" /&gt;
   &lt;/NTService&gt;
   &lt;NTService clsid="{AB6F0B67-341F-4e51-92F9-005FBFBA1A43}" name="MSSQLSERVER" image="4" changed="%s" uid="%s" disabled="0"&gt;
      &lt;Properties startupType="DISABLED" serviceName="MSSQLSERVER" serviceAction="STOP" timeout="60" /&gt;
   &lt;/NTService&gt;
&lt;/NTServices&gt;
</code></pre></div></div>

<p>Before dropping the <strong>Files.xml</strong> file, <strong>LockBit</strong> self-propagates to the Domain Controller’s SYSVOL folder.</p>

<p>First, the malware calls <strong>GetModuleFileNameW</strong> to get its own executable path and builds the following new path.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>%SystemRoot%\SYSVOL_DFSR\sysvol\&lt;Domain DNS name&gt;\siripts
</code></pre></div></div>

<p>Then, it calls <strong>CopyFileW</strong> to copy its executable to this <strong>siripts</strong> file. Since <strong>SYSVOL</strong> is a directory for all public Active Directory files, the malicious executable is now accessible to all hosts on the network domain.</p>

<p><img src="/uploads/lockbit65.PNG" alt="alt text" /></p>

<p><img src="/uploads/lockbit66.PNG" alt="alt text" /></p>

<p><em>Figure 65 66: Group Policy: Propagating Self To SYSVOL.</em></p>

<p>Finally, <strong>LockBit</strong> formats and drops the <strong>Files.xml</strong> file below. The <strong>fromPath</strong> field’s value is formatted to the executable path in the SYSVOL folder, and the <strong>targetPath</strong> field’s value is set to <strong>%%DesktopDir%%\%02X%02X%02X.exe</strong>, which is formatted using <strong>LockBit’s</strong> public key. Ultimately, this file’s policy is dropping the malicious executable from the Domain Controller’s SYSVOL directory to every network host’s Desktop directory.</p>

<p><img src="/uploads/lockbit67.PNG" alt="alt text" /></p>

<p><em>Figure 67: Group Policy: Generating Desktop Drop Path.</em></p>

<pre><code class="language-HTML">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;Files clsid="{215B2E53-57CE-475c-80FE-9EEC14635851}"&gt;
   &lt;File clsid="{50BE44C8-567A-4ed1-B1D0-9234FE1F38AF}" name="%s" status="%s" image="2" bypassErrors="1" changed="%s" uid="%s"&gt;
      &lt;Properties action="U" fromPath="%s" targetPath="%s" readOnly="0" archive="1" hidden="0" suppress="0" /&gt;
   &lt;/File&gt;
&lt;/Files&gt;
</code></pre>

<p>The raw <strong>ScheduledTasks.xml</strong> content is documented below. This file contains the policy to terminate the specified processes in the configuration’s process list.</p>

<pre><code class="language-HTML">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;ScheduledTasks clsid="{CC63F200-7309-4ba0-B154-A71CD118DBCC}"&gt;
   &lt;TaskV2 clsid="{D8896631-B747-47a7-84A6-C155337F3BC8}" name="%s" image="2" changed="%s" uid="%s"&gt;
      &lt;Properties action="U" name="%s" runAs="%s" logonType="InteractiveToken"&gt;
         &lt;Task version="1.2"&gt;
            &lt;RegistrationInfo&gt;
               &lt;Author&gt;%s&lt;/Author&gt;
               &lt;Description /&gt;
            &lt;/RegistrationInfo&gt;
            &lt;Principals&gt;
               &lt;Principal id="Author"&gt;
                  &lt;UserId&gt;%s&lt;/UserId&gt;
                  &lt;LogonType&gt;InteractiveToken&lt;/LogonType&gt;
                  &lt;RunLevel&gt;HighestAvailable&lt;/RunLevel&gt;
               &lt;/Principal&gt;
            &lt;/Principals&gt;
            &lt;Settings&gt;
               &lt;IdleSettings&gt;
                  &lt;Duration&gt;PT10M&lt;/Duration&gt;
                  &lt;WaitTimeout&gt;PT1H&lt;/WaitTimeout&gt;
                  &lt;StopOnIdleEnd&gt;false&lt;/StopOnIdleEnd&gt;
                  &lt;RestartOnIdle&gt;false&lt;/RestartOnIdle&gt;
               &lt;/IdleSettings&gt;
               &lt;MultipleInstancesPolicy&gt;IgnoreNew&lt;/MultipleInstancesPolicy&gt;
               &lt;DisallowStartIfOnBatteries&gt;false&lt;/DisallowStartIfOnBatteries&gt;
               &lt;StopIfGoingOnBatteries&gt;false&lt;/StopIfGoingOnBatteries&gt;
               &lt;AllowHardTerminate&gt;true&lt;/AllowHardTerminate&gt;
               &lt;AllowStartOnDemand&gt;true&lt;/AllowStartOnDemand&gt;
               &lt;Enabled&gt;true&lt;/Enabled&gt;
               &lt;Hidden&gt;false&lt;/Hidden&gt;
               &lt;ExecutionTimeLimit&gt;P3D&lt;/ExecutionTimeLimit&gt;
               &lt;Priority&gt;7&lt;/Priority&gt;
            &lt;/Settings&gt;
            &lt;Triggers&gt;
               &lt;RegistrationTrigger&gt;
                  &lt;Enabled&gt;true&lt;/Enabled&gt;
                  %s
               &lt;/RegistrationTrigger&gt;
            &lt;/Triggers&gt;
            &lt;Actions Context="Author"&gt;%s&lt;/Actions&gt;
         &lt;/Task&gt;
      &lt;/Properties&gt;
   &lt;/TaskV2&gt;
&lt;/ScheduledTasks&gt;
</code></pre>

<p><strong>LockBit</strong> formats this to execute a <strong>taskkill.exe</strong> for each of the process in the configuration’s process list. This is done through crafting these tags and include them in the main <strong>ScheduledTasks.xml</strong> file where the <strong>“Process_Name”</strong> field is the name of the process to be terminated.</p>

<pre><code class="language-HTML">&lt;Exec&gt;&lt;Command&gt;C:\Windows\System32\taskkill.exe&lt;/Command&gt;&lt;Arguments&gt;/IM "Process_Name" /F&lt;/Arguments&gt;&lt;/Exec&gt;
</code></pre>

<p>Finally, <strong>LockBit</strong> drops the <a href="https://github.com/cdong1012/IDAPython-Malware-Scripts/blob/master/Lockbit/lockbit_dropped_files/Registry.pol">Registry.pol file</a> and the <strong>comment.cmtx</strong> file below.</p>

<pre><code class="language-HTML">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;policyComments xmlns="http://www.microsoft.com/GroupPolicy/CommentDefinitions" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" revision="1.0" schemaVersion="1.0"&gt;
   &lt;policyNamespaces&gt;
      &lt;using prefix="ns0" namespace="Microsoft.Policies.WindowsDefender" /&gt;
   &lt;/policyNamespaces&gt;
   &lt;comments&gt;
      &lt;admTemplate /&gt;
   &lt;/comments&gt;
   &lt;resources minRequiredRevision="1.0"&gt;
      &lt;stringTable /&gt;
   &lt;/resources&gt;
&lt;/policyComments&gt;
</code></pre>

<p>The <strong>Registry.pol</strong> contains the following list of registry paths and the values to configure them.</p>

<ul>
  <li><strong>Software\Policies\Microsoft\Windows Defender\DisableAntiSpyware</strong>: True</li>
  <li><strong>Software\Policies\Microsoft\Windows Defender\Real-Time Protection\DisableRealtimeMonitoring</strong>: True</li>
  <li><strong>Software\Policies\Microsoft\Windows Defender\Spynet\SubmitSamplesConsent</strong>: Never send</li>
  <li><strong>Software\Policies\Microsoft\Windows Defender\Threats\Threats_ThreatSeverityDefaultAction</strong>: Enabled</li>
  <li><strong>Software\Policies\Microsoft\Windows Defender\Threats\ThreatSeverityDefaultAction\Low</strong>: Ignored</li>
  <li><strong>Software\Policies\Microsoft\Windows Defender\Threats\ThreatSeverityDefaultAction\Medium</strong>: Ignored</li>
  <li><strong>Software\Policies\Microsoft\Windows Defender\Threats\ThreatSeverityDefaultAction\High</strong>: Ignored</li>
  <li><strong>Software\Policies\Microsoft\Windows Defender\Threats\ThreatSeverityDefaultAction\Severe</strong>: Ignored</li>
  <li><strong>Software\Policies\Microsoft\Windows Defender\UX Configuration\Notification_Suppress</strong>: Enabled</li>
</ul>

<p>These following registry configurations disable Windows Defender features such as anti-spyware, real-time protection, submitting samples to Microsoft servers, default actions, and displaying notification on all network hosts.</p>

<h3 id="forcing-gpupdate-on-all-hosts-through-powershell">Forcing GPUpdate On All Hosts Through PowerShell</h3>

<p>After adding these new policies, <strong>LockBit</strong> calls <strong>Sleep</strong> to wait for 1 minute for the changes to be applied before creating a process to invoke <strong>gpupdate.exe</strong> to run on these network hosts.</p>

<p>First, using an <strong>IADs</strong> object from the Domain Controller’s <strong>rootDSE</strong>, the malware calls <strong>IADs::Get</strong> to retrieve the default naming context to retrieve the name of the Active Directory domain.</p>

<p><img src="/uploads/lockbit68.PNG" alt="alt text" /></p>

<p><em>Figure 68: Group Policy: Retrieving AD Domain Name.</em></p>

<p>Next, <strong>LockBit</strong> formats the following command where the search base is set to the Active Directory domain name. This Powershell command search through all computers on the Active Directory domain, and for each found, it force-invokes GPUpdate on that host to apply the new Group Policy changes. The malware launches this command by calling <strong>CreateProcessW</strong>.</p>

<pre><code class="language-ps1">powershell.exe -Command "Get-ADComputer -filter * -Searchbase '%s' | foreach{ Invoke-GPUpdate -computer $_.name -force -RandomDelayInMinutes 0}
</code></pre>

<p><img src="/uploads/lockbit69.PNG" alt="alt text" /></p>

<p><em>Figure 69: Group Policy: Launching Powershell Command To Force GPUpdate.</em></p>

<h3 id="forcing-gpupdate-on-all-hosts-manually">Forcing GPUpdate On All Hosts Manually</h3>

<p>If the above fails, <strong>LockBit</strong> attempts to force running GPUpdate manually.</p>

<p>After retrieving the name of the Active Directory domain, the malware appends it to <strong>“LDAP://”</strong> to build the full domain path and calls <strong>ADsOpenObject</strong> to retrieve an <strong>IDirectorySearch</strong> object to perform queries on AD hosts.</p>

<p><img src="/uploads/lockbit70.PNG" alt="alt text" /></p>

<p><em>Figure 70: Group Policy: Getting IDirectorySearch Object.</em></p>

<p>Next, <strong>LockBit</strong> calls <strong>IDirectorySearch::SetSearchPreference</strong> to set the search preference to <strong>ADS_SEARCHPREF_SEARCH_SCOPE</strong> and <strong>IDirectorySearch::ExecuteSearch</strong> to search for the name of each computer in the AD domain.</p>

<p><img src="/uploads/lockbit71.PNG" alt="alt text" /></p>

<p><img src="/uploads/lockbit72.PNG" alt="alt text" /></p>

<p><em>Figure 71, 72: Group Policy: Executing AD Search For PC Names.</em></p>

<p>Next, <strong>LockBit</strong> calls <strong>GetFirstRow</strong> and <strong>GetNextRow</strong> to iterate through each row of the search result. For each row, it calls <strong>GetNextColumnName</strong> and <strong>GetColumn</strong> to get the data from each column of that row. The malware accesses the <strong>DNString</strong> field in each named column to retrieve a Distinguished Name (DN) of a network host in the domain. Given the host name, <strong>LockBit</strong> calls <strong>CreateThread</strong> to launch a thread to manually execute GPUpdate and force the host to restart.</p>

<p><img src="/uploads/lockbit73.PNG" alt="alt text" /></p>

<p><img src="/uploads/lockbit74.PNG" alt="alt text" /></p>

<p><em>Figure 73, 74: Group Policy: Enumerating AD Hosts’ Distinguished Name.</em></p>

<p>The thread function only executes if the malware is currently running on a Domain Controller.</p>

<p>First, <strong>LockBit</strong> calls <strong>CoCreateInstance</strong> to retrieve an <strong>ITaskService</strong> object and calls <strong>ITaskService::Connect</strong> to establish a connection to the network host using its DN.</p>

<p><img src="/uploads/lockbit75.PNG" alt="alt text" /></p>

<p><img src="/uploads/lockbit76.PNG" alt="alt text" /></p>

<p><em>Figure 75, 76: Group Policy: Connecting To AD Hosts.</em></p>

<p>Next, it calls <strong>ITaskService::GetFolder</strong> to retrieve an <strong>ITaskFolder</strong> objet corresponding to a folder of registered tasks and calls <strong>ITaskFolder::DeleteTask</strong> to delete any existing task for this specific host.</p>

<p><strong>LockBit</strong> then calls <strong>ITaskService::NewTask</strong> to create a new task for the network host.</p>

<p><img src="/uploads/lockbit77.PNG" alt="alt text" /></p>

<p><em>Figure 77: Group Policy: Creating New Task.</em></p>

<p>After retrieving the <strong>IPrincipal</strong> object, the malware calls <strong>IPrincipal::put_LogonType</strong> to set the task to be started in the user’s interactive logon session. It also calls <strong>IPrincipal::put_RunLevel</strong> to set the task to run with the least privileges.</p>

<p><img src="/uploads/lockbit78.PNG" alt="alt text" /></p>

<p><em>Figure 78: Group Policy: Setting Task Properties.</em></p>

<p>After retrieving the <strong>ITaskDefinition</strong> object, <strong>LockBit</strong> calls <strong>ITaskDefinition::get_Triggers</strong> to retrieve an <strong>ITriggerCollection</strong> object. It then calls <strong>ITriggerCollection::Create</strong> to create a new trigger for the task which is triggered when the task is registered.</p>

<p><img src="/uploads/lockbit79.PNG" alt="alt text" /></p>

<p><em>Figure 79: Group Policy: Creating Trigger For Task.</em></p>

<p>Using the <strong>ITaskDefinition</strong> object, the malware also calls <strong>ITaskDefinition::get_Actions</strong> to retrieve an <strong>IActionCollection</strong> object. It then calls <strong>IActionCollection::Create</strong> to create a new action for the task specifying that it is an executable action.</p>

<p><img src="/uploads/lockbit80.PNG" alt="alt text" /></p>

<p><em>Figure 80: Group Policy: Creating Executable Action For Task.</em></p>

<p>Next, using the action object <strong>IExecAction</strong>, <strong>LockBit</strong> calls <strong>IExecAction::put_Path</strong> to set the path of the executable action to <strong>“gpupdate.exe”</strong>.</p>

<p><img src="/uploads/lockbit81.PNG" alt="alt text" /></p>

<p><em>Figure 81: Group Policy: Setting Action Path To gpupdate.exe.</em></p>

<p>Next, it calls <strong>IExecAction::put_Arguments</strong> to put <strong>“/force”</strong> the executable’s argument,  <strong>ITaskFolder::RegisterTaskDefinition</strong> to register the task’s definition, and <strong>IRegisteredTask::Run</strong> to run the task immediately.</p>

<p><img src="/uploads/lockbit82.PNG" alt="alt text" /></p>

<p><em>Figure 82: Group Policy: Registering &amp; Force-Running GPUpdate Task.</em></p>

<p>This will run GPUpdate on the network host immediately and whenever someone is logging into the host, which will then apply the Group Policy changes from the Domain Controller.</p>

<p>Finally, <strong>LockBit</strong> forces the network host to restart itself.</p>

<p>It does this by calling <strong>CoCreateInstance</strong> to retrieve an <strong>IWbemLocator</strong> object. Using the object, it calls <strong>IWbemLocator::ConnectServer</strong> to connect to <strong>”\\&lt;AD Host Name&gt;\ROOT\CIMV2”</strong>.</p>

<p><img src="/uploads/lockbit83.PNG" alt="alt text" /></p>

<p><em>Figure 83: Group Policy: Connecting To Host’s ROOT\CIMV2 Namespace.</em></p>

<p>Next, the malware calls <strong>IWbemServices::GetObjectA</strong> to retrieve an <strong>IWbemClassObject</strong> object corresponding to all Win32 processes on the network host. Using this object, it calls <strong>IWbemClassObject::GetMethod</strong> to retrieve an <strong>IWbemClassObject</strong> object corresponding to a method to create processes. Then, it calls <strong>IWbemClassObject::SpawnInstance</strong> to create a new instance of the process creation method.</p>

<p><img src="/uploads/lockbit84.PNG" alt="alt text" /></p>

<p><em>Figure 84: Group Policy: Process Creation Method.</em></p>

<p>Finally, it resolves the stack string <strong>“cmd.exe /c “shutdown.exe /r /f /t 0”“</strong>, calls <strong>IWbemClassObject::Put</strong> with the property name <strong>“CommandLine”</strong>, and <strong>IWbemServices::ExecMethod</strong> to execute the process creation method to spawn a command-line process to execute the command above.</p>

<p>This command forces running applications to close without warning users and restarts the computer after shutting down immediately.</p>

<p><img src="/uploads/lockbit85.PNG" alt="alt text" /></p>

<p><em>Figure 85: Group Policy: Executing Command To Restart.</em></p>

<h2 id="persistence-registry">Persistence Registry</h2>

<p>Prior to executing encryption routines, <strong>LockBit</strong> sets up persistence through the registry in case the malware gets interrupted by the system shutting down midway through.</p>

<p>First, the malware resolves the stack string <strong>“SOFTWARE\Microsoft\Windows\CurrentVersion\Run”</strong> and calls <strong>RegCreateKeyExA</strong> to get the handle to this registry key.</p>

<p><img src="/uploads/lockbit86.PNG" alt="alt text" /></p>

<p><em>Figure 86: Retrieving Persistence Registry Key Handle.</em></p>

<p>First, the malware resolves the stack string <strong>”{\%02X%02X%02X%02X-%02X%02X-%02X%02X-%02X%02X-%02X%02X%02X%02X%02X%02X}”</strong> and formats it using its public key. This formatted string will be used as the value name to set up the persistence registry key.</p>

<p><img src="/uploads/lockbit87.PNG" alt="alt text" /></p>

<p><em>Figure 87: Generating Persistence Registry Key Value Name.</em></p>

<p>Next, the malware calls <strong>RegQueryValueExW</strong> to retrieve the data at the registry key above. If this is successful, <strong>LockBit</strong> tests to see if the data is correct by calling <strong>lstrcmpiW</strong> to compare it with the malware executable path. If retrieving the data fails because the registry value has not been set or the data inside is incorrect, the malware calls <strong>RegSetValueExW</strong> to set the data to its own path to establish persistence.</p>

<p><img src="/uploads/lockbit88.PNG" alt="alt text" /></p>

<p><em>Figure 88: Establishing Persistence Through Registry.</em></p>

<p>Once the encryption is finished, the malware removes this persistence key by calling <strong>RegDeleteValueW</strong> to prevent itself from running again if the user decides to restart their encrypted machine.</p>

<p><img src="/uploads/lockbit89.PNG" alt="alt text" /></p>

<p><em>Figure 89: Removing Persistence Registry Key Post-Encryption.</em></p>

<h2 id="set-lockbit-default-icon">Set LockBit Default Icon</h2>

<p>Because all files encrypted by <strong>LockBit</strong> have the extension <strong>.lockbit</strong>, the malware attempts to change the registry to set up the default icon for this extension using an embedded icon file in memory. This is only executed when the malware has admin privilege and the configuration flag at index 7 is set.</p>

<p><img src="/uploads/lockbit90.PNG" alt="alt text" /></p>

<p><em>Figure 90: LockBit Default Icon For .lockbit Extension.</em></p>

<p>First, <strong>LockBit</strong> resolves the stack string <strong>”\??\C:\windows\system32\%02X%02X%02X.ico”</strong> and formats it using its public key.</p>

<p><img src="/uploads/lockbit91.PNG" alt="alt text" /></p>

<p><em>Figure 91: Generating Icon File Path.</em></p>

<p>Next, using this file path, the malware calls <strong>NtCreateFile</strong> to retrieve a handle to this file in the System32 folder. It also calls <strong>NtWriteFile</strong> to write the embedded icon file content into this file.</p>

<p><img src="/uploads/lockbit92.PNG" alt="alt text" /></p>

<p><em>Figure 92: Writing Icon File.</em></p>

<p><strong>LockBit</strong> then resolves the stack string <strong>“\Registry\Machine\Software\Classes\.lockbit”</strong> and calls <strong>NtCreateKey</strong> to create this registry key corresponding to the <strong>“.lockbit”</strong> extension.</p>

<p><img src="/uploads/lockbit93.PNG" alt="alt text" /></p>

<p><em>Figure 93: Creating .lockbit Extension Registry Key.</em></p>

<p>If the registry key above is created sucessfully, <strong>LockBit</strong> resolves the stack string <strong>“\Registry\Machine\Software\Classes\.lockbit\DefaultIcon”</strong> string, calls <strong>NtCreateKey</strong> to create this registry key, and calls <strong>NtSetValueKey</strong> to set the data of the <strong>DefaultIcon</strong> value to the icon file path in System32.</p>

<p><img src="/uploads/lockbit94.PNG" alt="alt text" /></p>

<p><em>Figure 94: Creating &amp; Setting .lockbit Extension DefaultIcon Registry Key.</em></p>

<p>Finally, <strong>LockBit</strong> resolves and calls <strong>SHChangeNotify</strong> with the event ID <strong>SHCNE_ASSOCCHANGED</strong> to notify the system that a file type association has changed, which updates all files with extension <strong>.lockbit</strong> to have this particular icon.</p>

<p><img src="/uploads/lockbit95.PNG" alt="alt text" /></p>

<p><em>Figure 95: Notifying &amp; Applying Icon Change.</em></p>

<h2 id="pre-encryption-system-clean-up">Pre-Encryption System Clean-Up</h2>

<p>Before launching a thread to perform pre-encryption system clean-up, <strong>LockBit</strong> attempts to gain <strong>SeDebugPrivilege</strong> privilege. This privilege allows the malware to debug and freely access other processes in the system.</p>

<p>First, it calls <strong>NtOpenProcessToken</strong> to retrieve its own process token, <strong>LookupPrivilegeValueA</strong> to retrieve the locally unique identifier (LUID) of the <strong>SeDebugPrivilege</strong> privilege, and <strong>NtAdjustPrivilegesToken</strong> to give itself that privilege.</p>

<p><img src="/uploads/lockbit96.PNG" alt="alt text" /></p>

<p><em>Figure 96: Setting SeDebugPrivilege Privilege.</em></p>

<h3 id="stopping-services">Stopping Services</h3>

<p>Prior to stopping all services in the configuration’s service list, <strong>LockBit</strong> resolves and calls <strong>Wow64DisableWow64FsRedirection</strong> to disables file system redirection. Then, it calls <strong>OpenSCManagerA</strong> to retrieve a service control manager handle. With the handle, <strong>LockBit</strong> iterates through the configuration’s service list and calls <strong>OpenServiceA</strong> to retrieve a handle to each service.</p>

<p><img src="/uploads/lockbit97.PNG" alt="alt text" /></p>

<p><em>Figure 97: Retrieving Each Target Service Handle.</em></p>

<p>Next, <strong>LockBit</strong> calls <strong>QueryServiceStatusEx</strong> to query the service’s process’s status. If the state of the service is <strong>SERVICE_STOPPED</strong>, it moves on to the next service in the list.</p>

<p><img src="/uploads/lockbit98.PNG" alt="alt text" /></p>

<p><em>Figure 98: Checking If Service Is Already Stopped.</em></p>

<p>If the service’s status is <strong>SERVICE_STOP_PENDING</strong>, <strong>LockBit</strong> calculates the time sleep based on the wait hint and wait until the pending status is over. After the <strong>Sleep</strong> call, the malware calls <strong>QueryServiceStatus</strong> to check if the service is stopped.</p>

<p><img src="/uploads/lockbit99.PNG" alt="alt text" /></p>

<p><em>Figure 99: Processing Service’s Stop Pending Status.</em></p>

<p><strong>LockBit</strong> does not wait forever if the <strong>SERVICE_STOP_PENDING</strong> status persists. It calls <strong>GetTickCount</strong> at the beginning and when every time it checks for the <strong>SERVICE_STOPPED</strong> signal onward. If the time difference (timeout) is greater than 30 seconds, the malware moves on to the next service.</p>

<p><img src="/uploads/lockbit100.PNG" alt="alt text" /></p>

<p><em>Figure 100: Max Timeout For Service Processing.</em></p>

<p>If the service’s status is not <strong>SERVICE_STOP_PENDING</strong> or <strong>SERVICE_STOPPED</strong>, <strong>LockBit</strong> attempts to stop it.</p>

<p>First, the malware tries to stop all dependent services of the target service. It does this by calling <strong>EnumDependentServicesA</strong> on the service handle to retrieve an <strong>ENUM_SERVICE_STATUSA</strong> array for all of the dependent services.</p>

<p><img src="/uploads/lockbit101.PNG" alt="alt text" /></p>

<p><em>Figure 101: Begins Dependent Services Enumeration.</em></p>

<p>For each dependent service, <strong>LockBit</strong> calls <strong>OpenServiceA</strong> with its name to retrieve its handle from the service control manager. Then, it calls <strong>ControlService</strong> to send a <strong>SERVICE_CONTROL_STOP</strong> signal to stop the dependent service. After sending the signal, <strong>LockBit</strong> goes through the same status checking procedure above to ensure each dependent service is fully stopped before moving on.</p>

<p><img src="/uploads/lockbit102.PNG" alt="alt text" /></p>

<p><img src="/uploads/lockbit103.PNG" alt="alt text" /></p>

<p><em>Figure 102, 103: Stopping Dependent Services.</em></p>

<p>Finally, <strong>LockBit</strong> calls <strong>ControlService</strong> to send a <strong>SERVICE_CONTROL_STOP</strong> signal to stop the main service.</p>

<p><img src="/uploads/lockbit104.PNG" alt="alt text" /></p>

<p><em>Figure 104: Stopping Main Service.</em></p>

<h3 id="terminating-processes">Terminating Processes</h3>

<p>To terminate all processes in the configuration’s process list, <strong>LockBit</strong> calls <strong>CreateToolhelp32Snapshot</strong> to get a snapshot handle to all system’s processes.</p>

<p><img src="/uploads/lockbit105.PNG" alt="alt text" /></p>

<p><em>Figure 105: Retrieving Process Snapshot Handle.</em></p>

<p>Next, the malware calls <strong>Process32First</strong> and <strong>Process32Next</strong> with the snapshot handle to enumerate through all processes in the system. For each process, it calls <strong>PathRemoveExtensionA</strong> to remove the process’s file extension and <strong>lstrcmpiA</strong> to compare the process’s name to each in the configuration’s process list. If the process’s name is in the list, <strong>LockBit</strong> calls a function to terminate it.</p>

<p><img src="/uploads/lockbit106.PNG" alt="alt text" /></p>

<p><em>Figure 106: Retrieving Process Snapshot Handle.</em></p>

<p>To terminate a process, <strong>LockBit</strong> calls <strong>CreateToolhelp32Snapshot</strong> to get a snapshot handle and <strong>Process32First/Process32Next</strong> to enumerate all processes. For each found process, the malware compares the process ID with the target’s ID to find the target process. <strong>LockBit</strong> then calls <strong>OpenProcess</strong> with the target process ID to retrieve a handle to the process and calls <strong>NtTerminateProcess</strong> to terminate it.</p>

<p><img src="/uploads/lockbit107.PNG" alt="alt text" /></p>

<p><img src="/uploads/lockbit108.PNG" alt="alt text" /></p>

<p><em>Figure 107, 108: Terminating Each Target Process.</em></p>

<h3 id="deleting-backups">Deleting Backups</h3>

<p>To delete shadow copies, <strong>LockBit</strong> first resolves the following string.</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">/</span><span class="n">c</span> <span class="n">vssadmin</span> <span class="n">delete</span> <span class="n">shadows</span> <span class="o">/</span><span class="n">all</span> <span class="o">/</span><span class="n">quiet</span> <span class="o">&amp;</span> <span class="n">wmic</span> <span class="n">shadowcopy</span> <span class="n">delete</span> <span class="o">&amp;</span> <span class="n">bcdedit</span> <span class="o">/</span><span class="n">set</span> <span class="p">{</span><span class="n">default</span><span class="p">}</span> <span class="n">bootstatuspolicy</span> <span class="n">ignoreallfailures</span> <span class="o">&amp;</span> <span class="n">bcdedit</span> <span class="o">/</span><span class="n">set</span> <span class="p">{</span><span class="n">default</span><span class="p">}</span> <span class="n">recoveryenabled</span> <span class="n">no</span>
</code></pre></div></div>

<p>Then, it passes the appropriate fields to <strong>ShellExecuteA</strong> to launch that command with <strong>cmd.exe</strong>. This command uses <strong>vssadmin</strong> and <strong>wmic</strong> to delete all shadow copies and <strong>bcdedit</strong> to disable file recovery.</p>

<p><img src="/uploads/lockbit109.PNG" alt="alt text" /></p>

<p><em>Figure 109: Launching Cmd.exe Command To Delete Backups Through ShellExecuteA.</em></p>

<p>Next, <strong>LockBit</strong> resolves the following stack strings in an array of strings.</p>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">-</span> <span class="o">/</span><span class="n">c</span> <span class="n">vssadmin</span> <span class="n">Delete</span> <span class="n">Shadows</span> <span class="o">/</span><span class="n">All</span> <span class="o">/</span><span class="n">Quiet</span>
<span class="o">-</span> <span class="o">/</span><span class="n">c</span> <span class="n">bcdedit</span> <span class="o">/</span><span class="n">set</span> <span class="p">{</span><span class="n">default</span><span class="p">}</span> <span class="n">recoveryenabled</span> <span class="n">No</span>
<span class="o">-</span> <span class="o">/</span><span class="n">c</span> <span class="n">bcdedit</span> <span class="o">/</span><span class="n">set</span> <span class="p">{</span><span class="n">default</span><span class="p">}</span> <span class="n">bootstatuspolicy</span> <span class="n">ignoreallfailures</span>
<span class="o">-</span> <span class="o">/</span><span class="n">c</span> <span class="n">wmic</span> <span class="n">SHADOWCOPY</span> <span class="o">/</span><span class="n">nointeractive</span>
<span class="o">-</span> <span class="o">/</span><span class="n">c</span> <span class="n">wevtutil</span> <span class="n">cl</span> <span class="n">security</span>
<span class="o">-</span> <span class="o">/</span><span class="n">c</span> <span class="n">wevtutil</span> <span class="n">cl</span> <span class="n">system</span>
<span class="o">-</span> <span class="o">/</span><span class="n">c</span> <span class="n">wevtutil</span> <span class="n">cl</span> <span class="n">application</span>
</code></pre></div></div>

<p>Finally, it iterates through this array and calls <strong>CreateProcessA</strong> to launch these commands from <strong>cmd.exe</strong>. Besude the commands already ran before, the <strong>wevtutil</strong> commands clear all events from the security, system, and application logs.</p>

<p><img src="/uploads/lockbit110.PNG" alt="alt text" /></p>

<p><em>Figure 110: Launching Cmd.exe Command To Delete Backups Through CreateProcessA.</em></p>

<h2 id="printing-ransom-note-to-printers">Printing Ransom Note To Printers</h2>

<p>If the configuration flag at index 8 is set, the malware attempts to print the ransom note on the printers that the machine is connected to.</p>

<p>To print the ransom note to physical printers, <strong>LockBit</strong> first calls <strong>EnumPrintersW</strong> to retrieve an enumerator for printer’s information. Using the enumerator to enumerate printer names, the malware calls a function to print the ransom note to each printer.</p>

<p><img src="/uploads/lockbit111.PNG" alt="alt text" /></p>

<p><em>Figure 111: Enumerating &amp; Printing Ransom Note On All Printers.</em></p>

<p>The internal function resolves the two strings <strong>“Microsoft Print to PDF”</strong> and <strong>“Microsoft XPS Document Writer”</strong>, calls <strong>lstrcmpiW</strong> to compare them with the printer’s name. If the printer’s name is one of those two, the function exits, and the ransom note is not printed. This is to avoid printing the ransom note to a file on the system and only print the note to physical printers that the machine is connected to.</p>

<p><img src="/uploads/lockbit112.PNG" alt="alt text" /></p>

<p><em>Figure 111: Avoiding Print-to-file Drivers.</em></p>

<p>Next, <strong>LockBit</strong> populates a <strong>DOC_INFO_1</strong> with the printer’s name and the printing data type as “RAW”. Then, it calls <strong>StartDocPrinter</strong> to notify the print spooler that a document is to be spooled for printing and <strong>StartPagePrinter</strong> to notify the spooler that a page is about to be printed.</p>

<p><img src="/uploads/lockbit113.PNG" alt="alt text" /></p>

<p><img src="/uploads/lockbit114.PNG" alt="alt text" /></p>

<p><img src="/uploads/lockbit115.PNG" alt="alt text" /></p>

<p><em>Figure 113, 114, 115: Notifying Print Spooler About The Print Job.</em></p>

<p>Finally, <strong>LockBit</strong> calls <strong>WritePrinter</strong> to print the ransom note physically on the printer.</p>

<p><img src="/uploads/lockbit116.PNG" alt="alt text" /></p>

<p><em>Figure 116: Printing Ransom Note On Printer.</em></p>

<h2 id="setup-wallpaper">Setup Wallpaper</h2>

<p>To setup the wallpaper on the victim’s machine, the malware first does some bitmap shenanigan to generate the wallpaper image with texts to notify the victim that their files have been encrypted. Because the function to generate this bitmap manually is almost as annoying as the function to set up the logging window UI, I will simply say that this is some voodoo witchcraft stuff and pretend like the wallpaper is magically generated in this analysis!</p>

<p>After creating the wallpaper image, <strong>LockBit</strong> calls <strong>GetTempPathW</strong> and <strong>GetTempFileNameW</strong> to retrieve a path to a temporary file in the <strong>%TEMP%</strong> folder.</p>

<p><img src="/uploads/lockbit117.PNG" alt="alt text" /></p>

<p><em>Figure 117: Generating A Temp Path For Storing The Wallpaper.</em></p>

<p>With the wallpaper bitmap object, the malware calls <strong>GdipSaveImageToFile</strong> to save the bitmap image to the temporary file using a Bitmap decoder.</p>

<p>Next, <strong>LockBit</strong> resolves the string <strong>“Control Panel\Desktop”</strong> and calls <strong>RegOpenKeyA</strong> to retrieve a registry key handle of that name. With the registry key handle, it calls <strong>RegSetValueExA</strong> to set the wallpaper style to <strong>“2”</strong> and the <strong>TileWallpaper</strong> property to <strong>“0”</strong>.</p>

<p><img src="/uploads/lockbit118.PNG" alt="alt text" /></p>

<p><img src="/uploads/lockbit119.PNG" alt="alt text" /></p>

<p><img src="/uploads/lockbit120.PNG" alt="alt text" /></p>

<p><em>Figure 118, 119, 120: Setting Registry For Wallpaper Properties.</em></p>

<p>Finally, the malware calls <strong>SystemParametersInfoW</strong> to set the desktop wallpaper to the wallpaper stored that the temporary path appended by <strong>“.bmp”</strong>.</p>

<p><img src="/uploads/lockbit121.PNG" alt="alt text" /></p>

<p><em>Figure 121: Setting Desktop Wallpaper.</em></p>

<p>Below is the generated Bitmap wallpaper.</p>

<p><img src="/uploads/lockbit122.bmp" alt="alt text" /></p>

<p><em>Figure 122: Setting Desktop Wallpaper.</em></p>

<h2 id="dropping-ransom-html-application-file">Dropping Ransom HTML Application File</h2>

<p>Beside dropping ransom notes and changing the desktop’s wallpaper, <strong>LockBit</strong> also drops an HTML Application (HTA) file on the system and sets up the registry keys to open the file whenever an encrypted file with the <strong>.lockbit</strong> extension is ran.</p>

<p>First, the malware generate the full path to drop the file to by calling <strong>SHGetFolderPathW</strong> to retrieve the folder’s current path and appends <strong>“\LockBit_Ransomware.hta”</strong> to the end.</p>

<p><img src="/uploads/lockbit123.PNG" alt="alt text" /></p>

<p><em>Figure 123: Retrieving Full HTA Path.</em></p>

<p>The entire content of the HTA file is resolved as a stack string, so IDA and the decompiler have trouble displaying this function. This kinda suck because I have to patch it over in order to be able to analyze the rest of the function.</p>

<p><img src="/uploads/lockbit124.PNG" alt="alt text" /></p>

<p><em>Figure 124: HTA File Encoded Content Being Pushed To The Stack.</em></p>

<p>After resolving the file’s content, <strong>LockBit</strong> calls <strong>CreateFileW</strong> to create the HTA file at the path and calls <strong>WriteFile</strong> to write to it.</p>

<p><img src="/uploads/lockbit125.PNG" alt="alt text" /></p>

<p><em>Figure 125: Dropping HTA File.</em></p>

<p>Next, the malware sets up registry keys to open the HTA file whenever an encrypted file with the <strong>.lockbit</strong> extension is ran.</p>

<p>First, <strong>LockBit</strong> resolves the following strings and calls <strong>NtCreateKey</strong> to create the registry keys corresponding to them.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>\Registry\Machine\Software\Classes\Lockbit
\Registry\Machine\Software\Classes\Lockbit\DefaultIcon
\Registry\Machine\Software\Classes\Lockbit\shell
\Registry\Machine\Software\Classes\Lockbit\shell\Open
\Registry\Machine\Software\Classes\Lockbit\shell\Open\Command
</code></pre></div></div>

<p>For the <strong>DefaultIcon</strong> registry key, the malware resolves the path to the icon file similarly to the <a href="#set-lockbit-default-icon">Set LockBit Default Icon</a> section and sets it to the value of the registry key.</p>

<p>Next, it resolves the string <strong>“C:\Windows\system32\mshta.exe” “%s”“</strong> which contains the command to execute <strong>mshta.exe</strong>, a Windows executable used to execute HTA files, and formats it with the dropped HTA file path. The malware then calls <strong>NtSetValueKey</strong> to set this string to the data of the <strong>\Registry\Machine\Software\Classes\Lockbit\shell\Open\Command</strong> registry key. With this, whenever a file with the <strong>.lockbit</strong> extension is ran, the <strong>mshta.exe</strong> will automatically open the dropped HTA file.</p>

<p><img src="/uploads/lockbit126.PNG" alt="alt text" /></p>

<p><em>Figure 126: Setting Registry Keys To Launch HTA File.</em></p>

<p>Below is the dropped HTA file.</p>

<p><img src="/uploads/lockbit127.PNG" alt="alt text" /></p>

<p><em>Figure 127: HTA File Content.</em></p>

<p><strong>LockBit</strong> also sets the persistence for the file to be ran every time the system boots up. The malware does this by resolving the registry path <strong>“SOFTWARE\Microsoft\Windows\CurrentVersion\Run”</strong> and sets its key <strong>“{2C5F9FCC-F266-43F6-BFD7-838DAE269E11}”</strong> to the HTA file path.</p>

<h2 id="file-encryption">File Encryption</h2>

<h3 id="mounting-volumes-on-drives">Mounting Volumes on Drives</h3>

<p>Prior to file encryption, <strong>LockBit</strong> calls <strong>FindFirstVolumeW</strong> and <strong>FindNextVolumeW</strong> to enumerate through volumes on the victim’s machine.</p>

<p><img src="/uploads/lockbit128.PNG" alt="alt text" /></p>

<p><em>Figure 128: Volumes Enumeration.</em></p>

<p>For each found volume name, the malware calls <strong>GetVolumePathNamesForVolumeNameW</strong> to retrieves a list of drive letters and mounted folder paths for the specified volume. It also calls <strong>GetDriveTypeW</strong> to check the volume’s type. <strong>LockBit</strong> avoids mounting the volume if its type is not <strong>DRIVE_REMOVABLE</strong> and <strong>DRIVE_FIXED</strong> or if it has more than 4 mounted folder paths.</p>

<p><img src="/uploads/lockbit129.PNG" alt="alt text" /></p>

<p><img src="/uploads/lockbit130.PNG" alt="alt text" /></p>

<p><em>Figure 129, 130: Checking Volume To Mount.</em></p>

<p>Next, <strong>LockBit</strong> resolves and formats the string <strong>“%s\bootmgr”</strong> with the volume name to retrieve the bootmgr path for the specified volume. It calls <strong>CreateFileW</strong> with the <strong>OPEN_EXISTING</strong> flag to check if the volume has a bootmgr file and skips it if it does not.</p>

<p><img src="/uploads/lockbit131.PNG" alt="alt text" /></p>

<p><em>Figure 131: Checking Volume’s Bootmgr File.</em></p>

<p>The malware then iterates through each drive path using the format string <strong>“%C:"</strong> and formats it with a drive letter from <strong>Z</strong> down to <strong>A</strong> every time. For each drive path, the malware tries calling <strong>SetVolumeMountPointW</strong> to mount the volume to a specific drive letter and stops once it successfully mounts the volume on one.</p>

<p><img src="/uploads/lockbit132.PNG" alt="alt text" /></p>

<p><em>Figure 132: Mounting Volumes To A Specific Drive.</em></p>

<h3 id="cryptography--multithreading-initialization">Cryptography &amp; Multithreading Initialization</h3>

<p>Because <strong>LockBit</strong> uses <strong>Libsodium</strong> for public-key cryptography, we don’t really need to analyze most of the crypto initialization because it’s just a mess. It’s a lot quicker to just recognize specific <strong>Libsodium’s</strong> functions once we encounter them.</p>

<p><img src="/uploads/lockbit133.PNG" alt="alt text" /></p>

<p><em>Figure 133: Libsodium Cryptography Initialization.</em></p>

<p>For the function to generate random data, <strong>LockBit</strong> tries to load <strong>bcrypt.dll</strong> in memory with <strong>LoadLibraryA</strong>, and if that suceeds, it will use <strong>BCryptGenRandom</strong> for the RNG function. If not, the malware just uses <strong>CryptGenRandom</strong> for it.</p>

<p><img src="/uploads/lockbit134.PNG" alt="alt text" /></p>

<p><em>Figure 134: Determining RNG Function.</em></p>

<p>Next, <strong>LockBit</strong> resolves and formats the string <strong>“SOFTWARE\%02X%02X%02X%02X%02X%02X%02X”</strong> with its public key. This is then uses as the registry key name to later store the victim’s cryptographic keys.</p>

<p><img src="/uploads/lockbit135.PNG" alt="alt text" /></p>

<p><img src="/uploads/lockbit136.PNG" alt="alt text" /></p>

<p><em>Figure 135, 136: Resolving LockBit Cryptographic Registry Key.</em></p>

<p>If the <strong>RegCreateKeyExW</strong> fails, <strong>LockBit</strong> skips setting the crypto registry key on the victim machine.</p>

<p>First, the malware calls <strong>Libsodium’s crypto_box_keypair</strong> to randomly generate a 32-byte private key and the corresponding 32-byte public key for the victim. Next, it encrypts the 64-byte buffer containing the victim’s public and private key using <strong>Libsodium’s crypto_box_easy</strong> function and wipes the victim’s private key from memory.</p>

<p><img src="/uploads/lockbit137.PNG" alt="alt text" /></p>

<p><em>Figure 137: Generating &amp; Encrypting Victim’s Public &amp; Private Key.</em></p>

<p>The encryption routine is shown below. For each encryption, a public-private key pair is generated using the same algorithm as above, and for the sake of simplicity, we’ll call this the encrypted box’s public-private key pair. The malware then generates the nonce for the <strong>crypto_box_easy</strong> function by hashing the box public key appended by the first 8 bytes of the given public key, and it calls the <strong>crypto_box_easy</strong> function to encrypt the given data using the box private key and the given public key.</p>

<p><img src="/uploads/lockbit138.PNG" alt="alt text" /></p>

<p><em>Figure 138: Calling Libsodium’s crypto_box_easy Authenticated Encryption Function.</em></p>

<p>The encrypted result is returned in the following format:</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span> <span class="n">encrypted_box</span> <span class="p">{</span>
   <span class="n">byte</span> <span class="n">box_public_key</span><span class="p">[</span><span class="mh">0x20</span><span class="p">];</span>
   <span class="n">byte</span> <span class="n">box_encrypted_data</span><span class="p">[</span><span class="n">input_size</span> <span class="o">+</span> <span class="mh">0x10</span><span class="p">];</span>
<span class="p">}</span>
</code></pre></div></div>

<p>In this case, the box’s encrypted data stores the encrypted victim’s public-private key pair, and we will call this the session box. For this, <strong>LockBit’s</strong> decryptor can call <strong>Libsodium’s crypto_box_open_easy</strong> function using their private key and the box public key to decrypt its encrypted data. Of course, the nonce generation during decryption is simple too because <strong>LockBit</strong> has access to both its own public key and the box public key.</p>

<p>If the registry key above is created/opened successfully, <strong>LockBit</strong> does not generate and encrypt these keys. Instead, it calls <strong>RegQueryValueExA</strong> to query them into memory. The session box is stored in the <strong>“Private”</strong> key’s data and the victim’s public key is stored in the <strong>“Public”</strong> key’s data if they exist.</p>

<p><img src="/uploads/lockbit139.PNG" alt="alt text" /></p>

<p><em>Figure 139: Retrieving Session Box &amp; Victim’s Public Key From Registry.</em></p>

<p>If querying the registry fails, the malware generates the victim’s public-private key pair, encrypts them, and calls <strong>RegSetValueExA</strong> to set the appropriate registry keys.</p>

<p><img src="/uploads/lockbit140.PNG" alt="alt text" /></p>

<p><em>Figure 140: Generating Cryptographic Keys &amp; Setting Registry.</em></p>

<p>After setting up the cryptographic keys, <strong>LockBit</strong> initializes its multithreading setup for encryption. It calls <strong>NtCreateIoCompletion</strong> to create an I/O completion port and <strong>CreateThread</strong> to spawn child threads for encryption. The number of child threads is equal to the number of processors on the system that it retrieves from the PEB.</p>

<p>For each child thread, the malware calculates its affinity mask using its index in the thread array. With the mask, <strong>LockBit</strong> calls <strong>NtSetInformationThread</strong> to set the processor affinity mask for the specific child thread. This registers a binding the child thread to one specific CPU, so that the thread will only execute on that designated processor. This provides cache affinity to the child thread to have warm cache which tremendously reduces cache misses and increases performance when the child thread is scheduled to run.</p>

<p><img src="/uploads/lockbit141.PNG" alt="alt text" /></p>

<p><em>Figure 141: Multithreading Setup.</em></p>

<p>The functionality of the child thread function is discussed in the later <a href="#child-thread">Child Thread</a> section.</p>

<h3 id="traversing-local-drive">Traversing Local Drive</h3>

<p>To traverse through all local drives, <strong>LockBit</strong> calls <strong>GetLogicalDrives</strong> to retrieves a bitmask representing the currently available disk drives. Using the bitmask, the malware checks each bit to skip processing drives that are not available.</p>

<p><img src="/uploads/lockbit142.PNG" alt="alt text" /></p>

<p><em>Figure 142: Searching For Available Disk Drives.</em></p>

<p>For each available drive, the malware calls <strong>GetDriveTypeW</strong> to check and avoid drives whose type is not <strong>DRIVE_FIXED</strong>, <strong>DRIVE_REMOVABLE</strong>, and <strong>DRIVE_RAMDISK</strong>.</p>

<p><img src="/uploads/lockbit143.PNG" alt="alt text" /></p>

<p><em>Figure 143: Checking Drive Types.</em></p>

<p>Next, after resolving each drive’s name, <strong>LockBit</strong> spawns a thread to traverse it. The thread handle is added to a global thread array structure for cleaning up afterward.</p>

<p><img src="/uploads/lockbit144.PNG" alt="alt text" /></p>

<p><em>Figure 144: Spawning Threads To Traverse Drives.</em></p>

<p>To traverse each drive, the malware first compares the drive name to <strong>“tsclient”</strong> and <strong>“Microsoft Terminal Services”</strong> to avoid processing these. Drives that have been traversed have their name added to a global array, so for each new drive to be processed, <strong>LockBit</strong> iterates through this array and checks if the drive’s name is in there to avoid traversing any drive multiple times.</p>

<p><img src="/uploads/lockbit145.PNG" alt="alt text" /></p>

<p><em>Figure 145: Avoiding Traversing Drives Multiple Times.</em></p>

<p>Before traversing a drive, the malware formats the string <strong>“%s\%02X%02X%02X%02X.lock”</strong> with its public key to generate a file name with the <strong>.lock</strong> extension in the target drive. Because this file being in a drive used as a sign that the drive is being encrypted, <strong>LockBit</strong> calls <strong>CreateFileW</strong> to try creating this file in the target drive. If the file already exists, the malware’s thread just exits immediately to avoid having multiple threads encrypting a file at once.</p>

<p><img src="/uploads/lockbit146.PNG" alt="alt text" /></p>

<p><img src="/uploads/lockbit147.PNG" alt="alt text" /></p>

<p><em>Figure 146, 167: Creating .lock File To Enforce One Encryption Thread Per Drive.</em></p>

<p>Once the drive is ready to be encrypted, the malware adds it to the global drive array so other threads can later ignore it.</p>

<p><img src="/uploads/lockbit148.PNG" alt="alt text" /></p>

<p><em>Figure 148: Adding Drive Name To Processed Drive Array.</em></p>

<p>It also calls <strong>SHEmptyRecycleBinW</strong> to remove all files in the drive’s Recycle Bin folder and <strong>GetDiskFreeSpaceW</strong> to retrieve memory information about the drive to send to the logging window. Also, the number of bytes per sector retrieved from the function is used as the block size for encrypting file.</p>

<p>To traverse the drive, <strong>LockBit</strong> calls <strong>FindFirstFileExW</strong> and  <strong>FindNextFileW</strong> to enumerate through all files/folders in the drive. It first avoids the filenames <strong>”.”</strong> and <strong>..</strong>, which corresponds to the drive’s current and parent directory.</p>

<p><img src="/uploads/lockbit149.PNG" alt="alt text" /></p>

<p><em>Figure 149: Drive Enumeration.</em></p>

<p>If the malware finds a subfolder inside with the <strong>FILE_ATTRIBUTE_DIRECTORY</strong> type, it calls <strong>CharLowerW</strong> and compares the folder’s name in lower case with the following names to avoid encrypting.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$Windows.~bt, intel, msocache, $recycle.bin, $windows.~ws, tor browser, boot, windows nt, 
msbuild, microsoft, all users, system volume information, perflog, google, application data, 
windows, windows.old, appdata, mozilla, microsoft.net, microsoft shared, internet explorer, 
common files, opera, windows journal, windows defender, windowsapp, windowspowershell, usoshared, 
windows security, windows photo viewer
</code></pre></div></div>

<p><img src="/uploads/lockbit150.PNG" alt="alt text" /></p>

<p><em>Figure 150: Blacklisting Folder Names.</em></p>

<p>If the folder name is valid, <strong>LockBit</strong> calls the traversing function on the folder to recursively traversing it.</p>

<p><img src="/uploads/lockbit151.PNG" alt="alt text" /></p>

<p><em>Figure 151: Recursive Folder Traversal.</em></p>

<p>If a file whose type is not <strong>FILE_ATTRIBUTE_SYSTEM</strong> is encountered, <strong>LockBit</strong> compares its extension with the following extensions to avoid encrypting.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>.386, .cmd, .ani, .adv, .msi, .msp, .com, .nls, .ocx, .mpa, .cpl, .mod, .hta, 
.prf, .rtp, .rpd, .bin, .hlp, .shs, .drv, .wpx, .bat, .rom, .msc, .spl, .msu, 
.ics, .key, .exe, .dll, .lnk, .ico, .hlp, .sys, .drv, .cur, .idx, .ini, .reg, 
.mp3, .mp4, .apk, .ttf, .otf, .fon, .fnt, .dmp, .tmp, .pif, .wav, .wma, .dmg, 
.iso, .app, .ipa, .xex, .wad, .msu, .icns, .lock, .lockbit, .theme, .diagcfg, 
.diagcab, .diagpkg, .msstyles, .gadget, .woff, .part, .sfcache, .winmd
</code></pre></div></div>

<p><img src="/uploads/lockbit152.PNG" alt="alt text" /></p>

<p><em>Figure 152: Blacklisting Extensions.</em></p>

<p><strong>LockBit</strong> also avoids encrypting the file if its name is in the following file list.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ntldr, ntuser.dat.log, bootsect.bak, autorun.inf, thumbs.db, iconcache.db, restore-my-files.txt
</code></pre></div></div>

<p>If the file’s attribute is <strong>FILE_ATTRIBUTE_READONLY</strong>, <strong>LockBit</strong> calls <strong>SetFileAttributesW</strong> to set it to <strong>FILE_ATTRIBUTE_NORMAL</strong> to be able to encrypt data and write to it. Finally, it calls a function to set up the file structure to be sent to child threads to encrypt via I/O completion port.</p>

<p><img src="/uploads/lockbit153.PNG" alt="alt text" /></p>

<p><em>Figure 153: Setting File’s Attribute &amp; Setting Up Shared File Structure.</em></p>

<p>Below is a rough recreation of the shared file structure, which is exactly 24656 bytes in size.</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span> <span class="kr">__declspec</span><span class="p">(</span><span class="n">align</span><span class="p">(</span><span class="mi">8</span><span class="p">))</span> <span class="n">LOCKBIT_FILE_STRUCT</span>
<span class="p">{</span>
  <span class="n">byte</span> <span class="n">AES_IV</span><span class="p">[</span><span class="mi">16</span><span class="p">];</span>
  <span class="n">byte</span> <span class="n">AES_key</span><span class="p">[</span><span class="mi">16</span><span class="p">];</span>
  <span class="kt">uint64_t</span> <span class="n">file_size</span><span class="p">;</span>
  <span class="kt">uint32_t</span> <span class="n">block_size</span><span class="p">;</span>
  <span class="kt">uint32_t</span> <span class="n">chunk_count</span><span class="p">;</span>
  <span class="n">HANDLE</span> <span class="n">file_handle</span><span class="p">;</span>
  <span class="n">UNICODE_STRING</span> <span class="n">file_NT_path_name</span><span class="p">;</span>
  <span class="n">DWORD</span> <span class="n">chunk_size</span><span class="p">;</span>
  <span class="n">LARGE_INTEGER</span> <span class="n">last_chunk_offset</span><span class="p">;</span>
  <span class="n">DWORD</span> <span class="n">number_of_chunks_allocated</span><span class="p">;</span>
  <span class="n">DWORD</span> <span class="n">unk2</span><span class="p">;</span>
  <span class="n">LOCKBIT_CHUNK_STRUCT</span> <span class="n">chunk_structs</span><span class="p">[</span><span class="mi">512</span><span class="p">];</span>
<span class="p">};</span>
</code></pre></div></div>

<p>First, because each file is encrypted in chunks, the malware calculates the size of the chunks based on the block size (which is also the number of bytes per sector). If the block size is not retrieved successfully, the default block size is set to 512 bytes.</p>

<p><img src="/uploads/lockbit154.PNG" alt="alt text" /></p>

<p><em>Figure 154: Calculating Chunk Size.</em></p>

<p>Next, <strong>LockBit</strong> appends the encrypted extension <strong>“.lockbit”</strong> to the end of the filename and calls <strong>RtlDosPathNameToNtPathName</strong> to set the path name in the file structure’s <strong>file_NT_path_name</strong> field.</p>

<p>It also calls <strong>NtCreateFile</strong> to retrieve a file handle to the target file to set the structure’s <strong>file_handle</strong> field, and if that fails, the malware attempts to terminate any processes that is using the file.</p>

<p><img src="/uploads/lockbit155.PNG" alt="alt text" /></p>

<p><em>Figure 155: Retrieving File Handle.</em></p>

<p>To terminate file owners, <strong>LockBit</strong> calls <strong>NtOpenFile</strong> to retrieve the file handle and calls <strong>NtQueryInformationFile</strong> to query the file information class <strong>FileProcessIdsUsingFileInformation</strong> to retrieve a list of IDs for processes that are accessing the file. <strong>LockBit</strong> calls <strong>NtQuerySystemInformation</strong> to query all running processes on the system and iterates through each until it finds processes that accesses the file.</p>

<p><img src="/uploads/lockbit156.PNG" alt="alt text" /></p>

<p><img src="/uploads/lockbit157.PNG" alt="alt text" /></p>

<p><em>Figure 156, 157: Enumerating To Find File Owners.</em></p>

<p>For each of those proccess, the malware retrieves its executable name, hashes it with <strong>ROR13</strong>, and compares it to a list of process hashes to avoid.</p>

<p><img src="/uploads/lockbit158.PNG" alt="alt text" /></p>

<p><em>Figure 158: Enumerating To Find File Owners.</em></p>

<p>Below is the list of hashes to avoid terminating.</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mh">0x2C99BB9E</span><span class="p">,</span> <span class="mh">0xE3040AC3</span><span class="p">,</span> <span class="mh">0xDFF94C0E</span><span class="p">,</span> <span class="mh">0x230D4C0F</span><span class="p">,</span> <span class="mh">0xEDFFA2DF</span><span class="p">,</span> <span class="mh">0x7679DAD9</span><span class="p">,</span> <span class="mh">0xDFD4E1B0</span><span class="p">,</span> <span class="mh">0x2C03BAC0</span><span class="p">,</span> <span class="mh">0xB2E7021A</span><span class="p">,</span> <span class="mh">0xA2DB72B9</span><span class="p">,</span> <span class="mh">0x2BC94C0F</span><span class="p">,</span> <span class="mh">0x6C916B9F</span><span class="p">,</span> <span class="mh">0x5FC881AB</span><span class="p">,</span> <span class="mh">0x6318437E</span><span class="p">,</span> <span class="mh">0x32FB431E</span><span class="p">,</span> <span class="mh">0xEEF7FBA3</span><span class="p">,</span> <span class="mh">0x3CE08834</span><span class="p">,</span> <span class="mh">0x4A00E40D</span><span class="p">,</span> <span class="mh">0x86059875</span><span class="p">,</span> <span class="mh">0x728CB221</span><span class="p">,</span> <span class="mh">0x5E2D07A0</span><span class="p">,</span> <span class="mh">0x2903F2AF</span><span class="p">,</span> <span class="mh">0x33FB126D</span><span class="p">,</span> <span class="mh">0x6895E8E4</span><span class="p">,</span> <span class="mh">0x39DB8E34</span>
</code></pre></div></div>

<p>Now I can sit here and bruteforce to try and guess what process each of these hashes corresponds to, but <a href="https://www.youtube.com/watch?v=6gLMSf4afzo">you know what they say</a>.</p>

<p>If the hash of the process’s name is not in the list above, <strong>LockBit</strong> retrieves its ID and calls <strong>NtTerminateProcess</strong> to terminate it.</p>

<p><img src="/uploads/lockbit159.PNG" alt="alt text" /></p>

<p><em>Figure 159: Terminating Each File Owner Process.</em></p>

<p>Next, the malware calls <strong>NtCreateFile</strong> to try and retrieving the file handle again. After doing this successfully, <strong>LockBit</strong> calls <strong>NtSetInformationFile</strong> with the information class <strong>FileCompletionInformation</strong> to associate the file’s shared structure with the I/O completion port to communicate with the child threads.</p>

<p><img src="/uploads/lockbit160.PNG" alt="alt text" /></p>

<p><em>Figure 160: Associating File Shared Structure With I/O Completion Port.</em></p>

<p>It also sets up the structure’s <strong>file_size</strong>, <strong>chunk_size</strong>, <strong>block_size</strong> fields. Because the last chunk being written will contain the <strong>LockBit’s</strong> file footer, the malware also calculates the appropriate <strong>last_chunk_offset</strong> field and the final encrypted file size. It also calls <strong>NtSetInformationFile</strong> to set the file information class <strong>FileEndOfFileInformation</strong> to the new file size.</p>

<p><img src="/uploads/lockbit161.PNG" alt="alt text" /></p>

<p><em>Figure 161: Calculating Chunking Information For The File Structure.</em></p>

<p>If the file size is too large (greater than 0x8000000000000000 bytes) or too small (less than the chunk size), the structure’s <strong>chunk_size</strong> field is set to the entire file size and the <strong>chunk_count</strong> field is set to 1. This means for these files, <strong>LockBit</strong> reads the entire file into 1 chunk and encrypts it.</p>

<p><img src="/uploads/lockbit162.PNG" alt="alt text" /></p>

<p><em>Figure 162: Checking For Full File Encryption Scenarios.</em></p>

<p>For the rest of the files, the <strong>chunk_count</strong> field is also sets to 1, which means <strong>LockBit</strong> only encrypts the first chunks for other files. However, for files that are categorized by <strong>LockBit</strong> as large files, this field is modified based on its extension and size.</p>

<p>The following extensions are categorized as large file extensions.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>.rar, .zip, .ckp, .db3, .dbf, .dbc, .dbs, .dbt, .dbv, .frm, .mdf, .mrg, 
.mwb, .myd, .ndf, .qry, .sdb, .sdf, .sql, .tmd, .wdb, .bz2, .tgz, .lzo, 
.db, .7z, .sqlite, .accdb, .sqlite3, .sqlitedb, .db-shm, .db-wal, .dacpac, .zipx, .lzma
</code></pre></div></div>

<p>For these files, if the file size is less than the chunk size, the file is ignored and only the first chunk is encrypted. If the file size is larger than the chunk size, below is the ranges of file size and their corresponding chunk count.</p>

<ul>
  <li>chunk_size -&gt; 0x100000 bytes: 2 chunks</li>
  <li>0x100000 -&gt; 0x600000 bytes: 4 chunks</li>
  <li>0x600000 -&gt; 0x3200000 bytes: 16 chunks</li>
  <li>0x3200000 -&gt; 0x6400000 bytes: 32 chunks</li>
  <li>0x6400000 -&gt; 0x1F400000 bytes: 64 chunks</li>
  <li>0x1F400000 -&gt; 0x80000000 bytes: 128 chunks</li>
  <li>0x80000000 -&gt; 0x300000000 bytes: 256 chunks</li>
  <li>0x300000000 bytes or above: 512 chunks</li>
</ul>

<p><img src="/uploads/lockbit163.PNG" alt="alt text" /></p>

<p><em>Figure 163: Calculating The Number Of Chunks For Large Files.</em></p>

<p>Next, <strong>LockBit</strong> populates the <strong>LOCKBIT_CHUNK_STRUCT</strong> structures in the file structure’s <strong>chunk_structs</strong> field. The number of chunk structures populated is equal to the number of chunk count calculated above.</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span> <span class="kr">__declspec</span><span class="p">(</span><span class="n">align</span><span class="p">(</span><span class="mi">8</span><span class="p">))</span> <span class="n">LOCKBIT_CHUNK_STRUCT</span>
<span class="p">{</span>
  <span class="n">DWORD</span> <span class="n">crypt_state</span><span class="p">;</span>
  <span class="n">PIO_STATUS_BLOCK</span> <span class="n">chunk_IoStatusBlock</span><span class="p">;</span>
  <span class="n">DWORD</span> <span class="n">unk</span><span class="p">;</span>
  <span class="n">byte</span> <span class="n">AES_IV</span><span class="p">[</span><span class="mi">20</span><span class="p">];</span>
  <span class="n">LARGE_INTEGER</span> <span class="n">byte_offset</span><span class="p">;</span>
  <span class="n">byte</span> <span class="o">*</span><span class="n">chunk_buffer</span><span class="p">;</span>
  <span class="n">DWORD</span> <span class="n">chunk_size</span><span class="p">;</span>
<span class="p">};</span>
</code></pre></div></div>

<p>First, the malware calls the RNG function to randomly generate a 16-byte AES key and 16-byte AES IV and writes them in the file structure’s <strong>AES_IV</strong> and <strong>AES_key</strong> field. For each chunk structure to be populated, <strong>LockBit</strong> copies the file structure’s AES IV into its <strong>AES_IV</strong> field. It also calls <strong>NtAllocateVirtualMemory</strong> to allocate a virtual memory buffer with the size of the chunk size and sets the <strong>chunk_buffer</strong> field to the buffer’s pointer. The malware then writes the file offset to start reading data into this particular chunk at <strong>byte_offset</strong>, and this offset is incremented by 1MB for every chunk. This means that <strong>LockBit</strong> only encrypts one chunk for every 1 MB in the file.</p>

<p><img src="/uploads/lockbit164.PNG" alt="alt text" /></p>

<p><em>Figure 164: Populating Chunk Structures.</em></p>

<p>For each chunk structure populated, <strong>LockBit</strong> calls <strong>NtReadFile</strong> to read the file data at the offset specified by the <strong>byte_offset</strong> with the size specified by the <strong>chunk_size</strong> field into the virtual buffer at the <strong>chunk_buffer</strong> field. After these calls, each chunk contains the appropriate file chunk for the child threads to encrypt and write back to the file. Also, when <strong>LockBit</strong> fires this file I/O operation by calling <strong>NtReadFile</strong>, it takes in the chunk structure as the APC context for the entry added to the main I/O completion object.</p>

<p><img src="/uploads/lockbit165.PNG" alt="alt text" /></p>

<p><em>Figure 165: I/O Operation To Read File Data Into Chunks.</em></p>

<p><strong>LockBit</strong> also renames the file before encrypting it. The malware does this by populating a <strong>FILE_RENAME_INFORMATION</strong> with the encrypted filename and calls <strong>NtSetInformationFile</strong> with the information class <strong>FileRenameInformation</strong>.</p>

<p><img src="/uploads/lockbit166.PNG" alt="alt text" /></p>

<p><em>Figure 166: Renaming File To Contain .lockbit Extension.</em></p>

<p>For congestion control among the working threads, <strong>LockBit</strong> keeps track of the number of files that are actively processed in a global variable. If there are more than 1000 files being processed at a time, the malware calls <strong>Sleep</strong> and spins until that number goes down.</p>

<p><img src="/uploads/lockbit167.PNG" alt="alt text" /></p>

<p><em>Figure 167: Encryption Congestion Control.</em></p>

<p>Finally, the file structure is delivered to the child threads through the <strong>NtSetInformationFile</strong> call with the information class <strong>FileCompletionInformation</strong>.</p>

<p><img src="/uploads/lockbit168.PNG" alt="alt text" /></p>

<p><em>Figure 168: Sending Populated File Structure To Child Threads.</em></p>

<p>Once the drive is fully traversed, <strong>LockBit</strong> calls <strong>DeleteFileW</strong> to delete the <strong>.lock</strong> file in the drive.</p>

<h3 id="child-thread">Child Thread</h3>

<p>Upon being created, each child thread spins on the <strong>NtRemoveIoCompletion</strong> calls until it can remove an entry from the I/O completion port. Once this is done successfully, <strong>LockBit’s</strong> thread receives the file shared structure as the key context and the chunk structure as the APC context that comes with the specific I/O operation.</p>

<p><img src="/uploads/lockbit169.PNG" alt="alt text" /></p>

<p><em>Figure 169: Child Thread: Waiting To Receive A Shared File Structure &amp; Chunk Structure.</em></p>

<p>Because each malware thread receives and processes one chunk at a time through the I/O completion port, the work is divided evenly among all threads. The encryption process is divided into multiple different states, and <strong>LockBit</strong> executes the encryption routine depending on the chunk structure’s <strong>crypt_state</strong> field.</p>

<h4 id="encryption-state-1">Encryption State 1</h4>

<p>If the <strong>crypt_state</strong> field is 1, <strong>LockBit</strong> encrypts the data in the chunk buffer using AES-CBC. The AES key is retrieved from the file structure’s <strong>AES_key</strong> field and the <strong>AES_IV</strong> is retrieved from the chunk structure.</p>

<p><img src="/uploads/lockbit170.PNG" alt="alt text" /></p>

<p><em>Figure 170: Child Thread State 1: Encrypting Chunk Data Using AES-CBC.</em></p>

<p>Next, if the file size is greater than the chunk size, the malware sets the chunk’s next state to 4. Else, the file size is less than the chunk size, which means all data is fully encrypted. In this case, <strong>LockBit</strong> generates a file footer and appends it to the end of the chunk. Below is my recreated structure for this file footer.</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span> <span class="n">LOCKBIT_FILE_FOOTER_STRUCT</span>
<span class="p">{</span>
    <span class="k">struct</span> <span class="n">file_box</span> <span class="p">{</span>
        <span class="n">byte</span> <span class="n">file_public_key</span><span class="p">[</span><span class="mh">0x20</span><span class="p">];</span>
        <span class="k">struct</span> <span class="n">encrypted_file_data</span> <span class="p">{</span>
            <span class="n">byte</span> <span class="n">AES_IV</span><span class="p">[</span><span class="mi">16</span><span class="p">];</span>
            <span class="n">byte</span> <span class="n">AES_key</span><span class="p">[</span><span class="mi">16</span><span class="p">];</span>
            <span class="kt">uint64_t</span> <span class="n">file_size</span><span class="p">;</span>
            <span class="kt">uint32_t</span> <span class="n">block_size</span><span class="p">;</span>
            <span class="kt">uint32_t</span> <span class="n">chunk_count</span><span class="p">;</span>
            <span class="n">byte</span> <span class="n">encryption_padding</span><span class="p">[</span><span class="mh">0x10</span><span class="p">];</span>
        <span class="p">}</span> <span class="n">encrypted_file_box</span><span class="p">;</span>
    <span class="p">}</span> <span class="n">file_box</span><span class="p">;</span>

    <span class="k">struct</span> <span class="n">session_box</span> <span class="p">{</span>
        <span class="n">byte</span> <span class="n">session_public_key</span><span class="p">[</span><span class="mh">0x20</span><span class="p">];</span>
        <span class="k">struct</span> <span class="n">encrypted_session_data</span> <span class="p">{</span>
            <span class="n">byte</span> <span class="n">victim_public_key</span><span class="p">[</span><span class="mh">0x20</span><span class="p">];</span>
            <span class="n">byte</span> <span class="n">victim_private_key</span><span class="p">[</span><span class="mh">0x20</span><span class="p">];</span>
            <span class="n">byte</span> <span class="n">encryption_padding</span><span class="p">[</span><span class="mh">0x10</span><span class="p">];</span>
        <span class="p">}</span> <span class="n">encrypted_session_data</span><span class="p">;</span>
    <span class="p">}</span> <span class="n">session_box</span><span class="p">;</span>

    <span class="n">byte</span> <span class="n">LockBit_public_key_noncegen</span><span class="p">[</span><span class="mh">0x8</span><span class="p">];</span>
    <span class="n">byte</span> <span class="n">victim_public_key_noncegen</span><span class="p">[</span><span class="mh">0x8</span><span class="p">];</span>
<span class="p">};</span>
</code></pre></div></div>

<p>First, using <strong>Libsodium’s crypto_box_easy</strong> function, <strong>LockBit</strong> encrypts the AES IV, AES key, file size, block size, and chunk count data in the file shared structure using the victim’s public key. Next, it adds the session box to the file footer, which contains the public key to decrypt the session box data and the encrypted victim’s public-private key pair. Finally, the malware adds the first 8 bytes of its own public key (for session box’s nonce generation) and the first 8 bytes of the victim’s public key (for file box’s nonce generation). It then sets the chunk’s next state to 2.</p>

<p><img src="/uploads/lockbit171.PNG" alt="alt text" /></p>

<p><em>Figure 171: Child Thread State 1: Generating File Footer.</em></p>

<p>Once the chunk data has been fully processed and written to, the malware calls <strong>NtWriteFile</strong> to fire an I/O operation to write the chunk data to the file at the chunk’s specific offset. It also passes the chunk structure back in as the APC context so other child threads can retrieve it from the I/O completion port for the next state.</p>

<p><img src="/uploads/lockbit172.PNG" alt="alt text" /></p>

<p><em>Figure 172: Child Thread State 1: Writing Encrypted Data To File.</em></p>

<p>With this file footer setup, <strong>LockBit</strong> can decrypt each file by first decrypting the session box using its own private key and the session box’s public key. It then can use the victim’s private key and the file box’s public key to decrypt the file box to get the AES key and IV to decrypt the file data.</p>

<h4 id="encryption-state-2">Encryption State 2</h4>

<p>By viewing the <strong>number_of_chunks_allocated</strong> field in the file’s shared structure, <strong>LockBit</strong> can check to see if the chunk being processed is the last chunk. If they are, the malware calls <strong>NtSetInformationFile</strong> with the information class <strong>FileRenameInformation</strong> to rename the file with the encrypted <strong>.lockbit</strong> extension.</p>

<p>Finally, the <strong>number_of_chunks_allocated</strong> field is decremented, and <strong>LockBit</strong> iterates through all chunk structures in the file shared structure and free the virtual memory buffers inside.</p>

<p><img src="/uploads/lockbit173.PNG" alt="alt text" /></p>

<p><img src="/uploads/lockbit174.PNG" alt="alt text" /></p>

<p><em>Figure 173, 174: Child Thread State 2: Renaming File &amp; Cleaning Up Chunks.</em></p>

<p>To wrap up the file encryption, the malware increments the <strong>COMPLETED_FILE_NUM</strong> global variable and decrements the <strong>ACTIVE_FILE_BEING_PROCESSED</strong> global variable. It calls <strong>NtClose</strong> to close the file handle, <strong>RtlFreeUnicodeString</strong> to free the filename buffer, and <strong>NtFreeVirtualMemory</strong> to free the file’s shared structure.</p>

<p><img src="/uploads/lockbit175.PNG" alt="alt text" /></p>

<p><em>Figure 175: Child Thread State 2: Wrapping Up Encryption.</em></p>

<h4 id="encryption-state-3">Encryption State 3</h4>

<p>This state just cleans up the chunk structures and file structure before wrapping up the encryption similar to state 2. This state is solely used for cleaning up the ransom note structure. More details is discussed in the <a href="#dropping-ransom-note">Dropping Ransom Note</a> section.</p>

<p><img src="/uploads/lockbit176.PNG" alt="alt text" /></p>

<p><em>Figure 176: Child Thread State 3: Cleaning Structures For Ransom Note.</em></p>

<h4 id="encryption-state-4">Encryption State 4</h4>

<p><strong>LockBit</strong> transitions into state 4 when the file size is greater than the chunk size, so there might be more than 1 chunk being processed in the file.</p>

<p>It performs similar tasks to state 2, where it checks if the encryption is done to rename the file. The malware thread also cleans up the structures similar to state 2 and wraps up the encryption there.</p>

<p><img src="/uploads/lockbit177.PNG" alt="alt text" /></p>

<p><em>Figure 177: Child Thread State 4: Renaming File &amp; Wrapping Up Encryption.</em></p>

<p>If the current chunk is the last chunk to process, <strong>LockBit</strong> generates the file footer, writes it to the end of the chunk buffer, and calls <strong>NtWriteFile</strong> to write the data to the file. The chunk’s next state is set to 2 to clean up the encryption.</p>

<p><img src="/uploads/lockbit178.PNG" alt="alt text" /></p>

<p><em>Figure 178: Child Thread State 4: Writing File Footer &amp; Transitioning To State 2.</em></p>

<p>If the encryption is not done and there are still more chunks to be encrypted, the child thread moves on to wait for for other chunks to come by calling <strong>NtRemoveIoCompletion</strong>.</p>

<h3 id="traversing-network-hosts">Traversing Network Hosts</h3>

<p>If the configuration flag at index 3 is set, <strong>LockBit</strong> create threads to traverse and encrypt other network hosts and network drives from the victim’s machine.</p>

<h4 id="scanning-for-live-hosts">Scanning For Live Hosts</h4>

<p><strong>LockBit</strong> first calls <strong>socket</strong> to create an IPv4 TCP socket. Using the socket handle, it calls <strong>WSAIoctl</strong> with the GUID <strong>“{0x25a207b9,0x0ddf3,0x4660,{0x8e,0xe9,0x76,0xe5,0x8c,0x74,0x06,0x3e}}”</strong> to retrieve the <strong>LPFN_CONNECTEX</strong> function’s address.</p>

<p><img src="/uploads/lockbit179.PNG" alt="alt text" /></p>

<p><img src="/uploads/lockbit180.PNG" alt="alt text" /></p>

<p><em>Figure 179, 180: Retrieving <strong>LPFN_CONNECTEX</strong> function.</em></p>

<p>Next, it calls <strong>GetAdaptersInfo</strong> to retrieve adapter information for the local computer. Using the <strong>IP_ADAPTER_INFO</strong> structure it gets, the malware calls <strong>inet_addr</strong> to convert the computer’s IP address and the IP mask into long values in IP network order. <strong>LockBit</strong> retrieves the base address of the network by performing a bitwise AND operation on these values. Also, by flipping all the bits on the mask and OR-ing it with the machine’s IP address, <strong>LockBit</strong> also retrieves the broadcast address of the network.</p>

<p><img src="/uploads/lockbit181.PNG" alt="alt text" /></p>

<p><img src="/uploads/lockbit182.PNG" alt="alt text" /></p>

<p><img src="/uploads/lockbit183.PNG" alt="alt text" /></p>

<p><img src="/uploads/lockbit184.PNG" alt="alt text" /></p>

<p><img src="/uploads/lockbit185.PNG" alt="alt text" /></p>

<p><em>Figure 181, 182, 183, 184, 185: Retrieving Network Base Address &amp; Broadcast Address.</em></p>

<p>To scan the network, <strong>LockBit</strong> iterates from the network base address up to the broadcast address by incrementing the network address value each time. For each of these addresses, the malware tries to connect to it through port 135 and 445. If the connection is successful, it tries to encrypt these network hosts.</p>

<p><img src="/uploads/lockbit186.PNG" alt="alt text" /></p>

<p><em>Figure 186: Iterating To Scan Network.</em></p>

<p>For each address, <strong>LockBit</strong> builds the following socket structure.</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span> <span class="kr">__declspec</span><span class="p">(</span><span class="n">align</span><span class="p">(</span><span class="mi">4</span><span class="p">))</span> <span class="n">SOCKET_STRUCT</span>
<span class="p">{</span>
  <span class="n">OVERLAPPED</span> <span class="n">overlapped</span><span class="p">;</span>
  <span class="n">HANDLE</span> <span class="n">socket_event</span><span class="p">;</span>
  <span class="n">HANDLE</span> <span class="n">socket_wait_object_handle</span><span class="p">;</span>
  <span class="kt">int</span> <span class="n">enable_traversal</span><span class="p">;</span>
  <span class="n">SOCKET</span> <span class="n">socket</span><span class="p">;</span>
  <span class="n">sockaddr_in</span> <span class="n">target_addr</span><span class="p">;</span>
  <span class="kt">int</span> <span class="n">cleaned_flag</span><span class="p">;</span> <span class="c1">// 1 == not cleaned</span>
<span class="p">};</span>
</code></pre></div></div>

<p>It populates this structure by calling <strong>socket</strong> to create an IPv4 TCP socket and sets that to the <strong>socket</strong> field and calling <strong>bind</strong> to bind the socket to the local machine. It then calls <strong>CreateEventW</strong> to create an event handle for the socket to set it to the <strong>socket_event</strong> field and calls <strong>NtSetInformationFile</strong> with the information class <strong>FileCompletionInformation</strong> to associate the socket structure with an I/O completion port. And finally, it populates the <strong>target_addr</strong> with the appropriate port and the target’s IP address.</p>

<p><img src="/uploads/lockbit187.PNG" alt="alt text" /></p>

<p><img src="/uploads/lockbit188.PNG" alt="alt text" /></p>

<p><img src="/uploads/lockbit189.PNG" alt="alt text" /></p>

<p><img src="/uploads/lockbit190.PNG" alt="alt text" /></p>

<p><em>Figure 187, 188, 189, 190: Populating Socket Shared Structure.</em></p>

<p>Next, the malware calls <strong>RegisterWaitForSingleObject</strong> to register an event handle for when the socket’s event is signaled. The event handler is just a wrapper for <strong>CancelIoEx</strong>, which cancels all I/O operations for the current process. Finally, it calls <strong>LPFN_CONNECTEX</strong> to perform an I/O operation to create a connection to the network host. If the network host is not alive and the function fails to execute, <strong>LockBit</strong> cleans up the structure and moves on to test another host.</p>

<p><img src="/uploads/lockbit191.PNG" alt="alt text" /></p>

<p><em>Figure 191: Connecting To Remote Host.</em></p>

<h4 id="launching-threads-to-traverse-live-hosts-network-shares">Launching Threads To Traverse Live Hosts’ Network Shares</h4>

<p>Prior to scanning the network, <strong>LockBit</strong> calls <strong>NtCreateIoCompletion</strong> to create an I/O completion object for communication on network host encryption. It also calls <strong>CreateThread</strong> to create threads that will spin on this I/O completion object to receive a specific network host to traverse and encrypt.</p>

<p><img src="/uploads/lockbit192.PNG" alt="alt text" /></p>

<p><em>Figure 192: Creating Threads To Traverse Network Hosts.</em></p>

<p>The child thread has an infinite while loop to call <strong>NtRemoveIoCompletion</strong> and wait until it receives a socket structure when the parent thread makes the call to <strong>LPFN_CONNECTEX</strong> for a specific network host.</p>

<p><img src="/uploads/lockbit193.PNG" alt="alt text" /></p>

<p><em>Figure 193: Waiting To Receive Socket Structure For Network Host.</em></p>

<p>For each network host received, it calls <strong>WSAAddressToStringW</strong> to convert the host’s address to a string and traverses through network shares on it.</p>

<p><img src="/uploads/lockbit194.PNG" alt="alt text" /></p>

<p><em>Figure 194: Traversing Network Host.</em></p>

<p>To traverse through network shares on a host, the malware first calls <strong>WNetAddConnection2W</strong> to establish a direct connection to the host and <strong>NetShareEnum</strong> to retrieve information about its shared resources. For each shared resource, the malware formats the following path <strong>”\&lt;host address&gt;\&lt;shared resource name&gt;”</strong> and calls the traversal function from the <a href="#traversing-local-drive">Traversing Local Drive</a> section to traverse and encrypt it.</p>

<p><img src="/uploads/lockbit195.PNG" alt="alt text" /></p>

<p><img src="/uploads/lockbit196.PNG" alt="alt text" /></p>

<p><em>Figure 195, 196: Traversing &amp; Encrypting Network Hosts’ Shared Resources.</em></p>

<h3 id="traversing-network-drives">Traversing Network Drives</h3>

<p>After encrypting shared resources on network hosts, <strong>LockBit</strong> also traverses and encrypts remote drives on the victim’s machine.</p>

<h4 id="impersonation-process-with-the-same-authentication-id">Impersonation Process With The Same Authentication ID</h4>

<p><strong>LockBit</strong> spawns a thread to encrypt remote drives while impersonating a process with the same authentication ID.</p>

<p>It impersonates by calling <strong>NtQueryInformationToken</strong> to query the elevation type of the current process’s token to check if it is elevated. If it is, the malware calls <strong>NtQueryInformationToken</strong> to retrieve a handle to another token that is linked to this elevated token and the linked token’s authentication ID.</p>

<p><img src="/uploads/lockbit197.PNG" alt="alt text" /></p>

<p><em>Figure 197: Retrieving Linked Token.</em></p>

<p>For the given authentication ID, the malware calls <strong>CreateToolhelp32Snapshot</strong> to get a snapshot handle of all processes on the system. It calls <strong>Process32FirstW</strong> and <strong>Process32NextW</strong> to enumerate through all processes. For each process, <strong>LockBit</strong> calls <strong>OpenProcess</strong> using the process’s ID to retrieve the process handle and <strong>NtQueryInformationToken</strong> to retrieve the process’s authentication ID. It enumerates until finding a process with the same authentication ID as the linked token above.</p>

<p><img src="/uploads/lockbit198.PNG" alt="alt text" /></p>

<p><em>Figure 198: Enumerating To Find Process With The Same Authentication ID.</em></p>

<p>Once found, <strong>LockBit</strong> calls <strong>DuplicateToken</strong> to duplicate and impersonate the target process’s token and <strong>SetThreadToken</strong> to set the duplicated token to its own process.</p>

<p><img src="/uploads/lockbit199.PNG" alt="alt text" /></p>

<p><img src="/uploads/lockbit200.PNG" alt="alt text" /></p>

<p><em>Figure 199, 200: Impersonating Process With The Same Authentication ID.</em></p>

<p>After impersonating, <strong>LockBit</strong> begins to traverse through all network drives on the system. It enumerates through drives by calling <strong>GetLogicalDrives</strong> and performs a bit test on each bit to only find drives that exists on the system. For each of these drives, the malware calls <strong>WNetGetConnectionW</strong> to retrieve the drive’s network path and creates a thread to traverse it.</p>

<p><img src="/uploads/lockbit201.PNG" alt="alt text" /></p>

<p><img src="/uploads/lockbit202.PNG" alt="alt text" /></p>

<p><img src="/uploads/lockbit203.PNG" alt="alt text" /></p>

<p><em>Figure 201, 202, 203: Enumerating Network Drives.</em></p>

<p>The function for traversing this is basically just a wrapper for the traversal function from the <a href="#traversing-local-drive">Traversing Local Drive</a> section.</p>

<p><img src="/uploads/lockbit204.PNG" alt="alt text" /></p>

<p><em>Figure 204: Traversing &amp; Encrypting Network Drives.</em></p>

<h4 id="impersonation-shell-process-window">Impersonation Shell Process Window</h4>

<p><strong>LockBit</strong> also spawns a thread to encrypt remote drives while impersonating as the shell process window.</p>

<p>First, it calls <strong>GetShellWindow</strong> to retrieves a handle to the Shell’s desktop window and <strong>GetWindowThreadProcessId</strong> to get the process’s ID. Next, it calls <strong>OpenProcess</strong> to retrieve the process’s handle using its ID and <strong>NtOpenProcessToken</strong> to retrieve the process’s token.</p>

<p><img src="/uploads/lockbit205.PNG" alt="alt text" /></p>

<p><img src="/uploads/lockbit206.PNG" alt="alt text" /></p>

<p><img src="/uploads/lockbit207.PNG" alt="alt text" /></p>

<p><em>Figure 205, 206, 207: Retrieving Shell Process’s Token.</em></p>

<p>Finally, to impersonate this process, <strong>LockBit</strong> calls <strong>DuplicateToken</strong> to duplicate the process’s token and <strong>SetThreadToken</strong> to set the duplicated token to its own process.</p>

<p><img src="/uploads/lockbit208.PNG" alt="alt text" /></p>

<p><img src="/uploads/lockbit209.PNG" alt="alt text" /></p>

<p><em>Figure 208, 209: Impersonating As Shell Process.</em></p>

<p>The rest of the network drive traversal routine is the same as documented above.</p>

<h3 id="dropping-ransom-note">Dropping Ransom Note</h3>

<p>The ransom note is dropped during the parent’s thread traversal routine in <a href="#traversing-local-drive">Traversing Local Drive</a>. <strong>LockBit</strong> first generates the ransom note path in the folder by appending <strong>”\Restore-My-Files.txt”</strong> after the folder path.</p>

<p><img src="/uploads/lockbit210.PNG" alt="alt text" /></p>

<p><em>Figure 210: Generating Ransom Note Path.</em></p>

<p>If the ransom note does not exist in the folder yet, <strong>LockBit</strong> creates a shared file structure and populates it with the ransom note path. The malware also calls <strong>NtCreateFile</strong> to create the ransom note and <strong>NtSetInformationFile</strong> to associate the file structure with the I/O completion object.</p>

<p><img src="/uploads/lockbit211.PNG" alt="alt text" /></p>

<p><img src="/uploads/lockbit212.PNG" alt="alt text" /></p>

<p><em>Figure 211, 212: Setting Up Ransom Note Shared File Structure.</em></p>

<p>After populating a chunk structure with the ransom note content and sets the chunk’s next state to 3, it calls <strong>NtWriteFile</strong> to write the content into the ransom note. This will add an entry to the I/O completion object, where one child thread will receive and cleans up the ransom note’s chunk and file structure.</p>

<p><img src="/uploads/lockbit213.PNG" alt="alt text" /></p>

<p><em>Figure 213: Dropping Ransom Note In Directory.</em></p>

<p>If the ransom note already exists in the directory, this step is skipped.</p>

<h2 id="self-deletion">Self-Deletion</h2>

<p>After finishing file encryption, <strong>LockBit</strong> deletes itself if the configuration flag at index 1 is set.</p>

<p>It first resolves the stack string <strong>” /C ping 127.0.0.7 -n 3 &gt; Nul &amp; fsutil file setZeroData offset=0 length=524288 “%s” &amp; Del /f /q “%s”“</strong> and formats this with its own executable path.</p>

<p><img src="/uploads/lockbit214.PNG" alt="alt text" /></p>

<p><em>Figure 214: Building Self-deletion Command.</em></p>

<p>This command pings localhost with 3 echo Request messages to delay and wait for the malware to finish executing, executes <strong>fsutil</strong> to empty the malware’s executable, and force-delete the file in quiet mode.</p>

<p><strong>LockBit</strong> also calls <strong>MoveFileExW</strong> to set itself to be deleted after the system reboots.</p>

<p><img src="/uploads/lockbit215.PNG" alt="alt text" /></p>

<p><em>Figure 215: Setting Self To Be Deleted After Reboot.</em></p>

<p>Finally, the malware calls <strong>ShellExecuteExW</strong> to execute the command above to delete itself.</p>

<p><img src="/uploads/lockbit216.PNG" alt="alt text" /></p>

<p><em>Figure 216: Executing Command To Delete Self.</em></p>

<h2 id="references">References</h2>

<p>https://asec.ahnlab.com/en/17147/</p>

<p>https://news.sophos.com/en-us/2020/04/24/lockbit-ransomware-borrows-tricks-to-keep-up-with-revil-and-maze/</p>

<p>https://www.trustedsec.com/blog/weaponizing-group-policy-objects-access/</p>

<p>https://www.bleepingcomputer.com/news/security/lockbit-ransomware-now-encrypts-windows-domains-using-group-policies/</p>

<p>https://devblogs.microsoft.com/oldnewthing/20080314-00/?p=23113</p>

<p>https://www.ic3.gov/Media/News/2022/220204.pdf</p>

<p>https://www.crowdstrike.com/blog/how-crowdstrike-prevents-volume-shadow-tampering-by-lockbit-ransomware/</p>

<p>https://talos-intelligence-site.s3.amazonaws.com/production/document_files/files/000/095/481/original/010421_LockBit_Interview.pdf</p>

<p>https://www.prodaft.com/m/reports/LockBit_Case_Report___TLPWHITE.pdf</p>

<p>https://www.cyber.gov.au/acsc/view-all-content/advisories/2021-006-acsc-ransomware-profile-lockbit-20</p>

<p>https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/ransomware-trends-lockbit-sodinokibi</p>

<p>https://libsodium.gitbook.io/doc/public-key_cryptography/authenticated_encryption</p>


    <div class="share">
  
    
      
      
      
      

      

      <a class="button" href="https://twitter.com/intent/tweet/?url=https://cdong1012.github.io//reverse%20engineering/2022/03/19/LockbitRansomware/&text=LockBit%20Ransomware%20v2.0&via=cPeterr" style="background: #0d94e7">Twitter&nbsp; <svg width="16" height="16" class="icon  icon--twitter" role="img" alt="twitter"><title>twitter</title><use xlink:href="#twitter" fill="CurrentColor"></use></svg>
</a>

    
  
    
      
      
      
      

      

      <a class="button" href="https://facebook.com/sharer/sharer.php?u=https://cdong1012.github.io//reverse%20engineering/2022/03/19/LockbitRansomware/" style="background: #3B5998">Facebook&nbsp; <svg width="16" height="16" class="icon  icon--facebook" role="img" alt="facebook"><title>facebook</title><use xlink:href="#facebook" fill="CurrentColor"></use></svg>
</a>

    
  
    
      
      
      
      

      

      <a class="button" href="mailto:?subject=LockBit Ransomware v2.0&body=Hey, check out this: https://cdong1012.github.io//reverse%20engineering/2022/03/19/LockbitRansomware/" style="background: true">Email&nbsp; <svg width="16" height="16" class="icon  icon--email" role="img" alt="email"><title>email</title><use xlink:href="#email" fill="CurrentColor"></use></svg>
</a>

    
  
</div>


    


  </article>

  

</main>

<footer class="footer">
  <div class="container">
    <div class="copyright  typeset">
      <small class="small">&copy; Chuong Dong 2024</small>
    </div>

    
<nav class="nav  nav--footer">
  <ul class="list list--nav">
    

      

      <li class="item  item--nav">
        <a href="https://cdong1012.github.io">Chuong's Security Blog</a>
      </li>
    
  </ul>
</nav>


  </div>
</footer>


    <script type="text/javascript">
(() => {
  const registerServiceWorker = () => {
    if (!navigator.serviceWorker) {
      return;
    }

    navigator.serviceWorker
      .register("/sw.js")
      .then(registration => {
        console.log("Service Worker: registered");
      })
      .catch(err => {
        console.log("Service Worker: registration failed ", err);
      });
  };

  registerServiceWorker();
})();
</script>


    <!-- Overwrite this file with code you want before the closing body tag -->

  </body>

</html>
