<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>Dissecting Emotet’s network communication protocol
</title>
  <script>(function(d) {var config = {kitId: 'tze3uwp',scriptTimeout: 1000,async: true},h=d.documentElement,t=setTimeout(function(){h.className=h.className.replace(/\bwf-loading\b/g,"")+" wf-inactive";},config.scriptTimeout),tk=d.createElement("script"),f=false,s=d.getElementsByTagName("script")[0],a;h.className+=" wf-loading";tk.src='https://use.typekit.net/'+config.kitId+'.js';tk.async=true;tk.onload=tk.onreadystatechange=function(){a=this.readyState;if(f||a&&a!="complete"&&a!="loaded")return;f=true;clearTimeout(t);try{Typekit.load(config)}catch(e){}};s.parentNode.insertBefore(tk,s)})(document);</script>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="shortcut icon" href="https://lightning.svbtle.com/cargo/favicon-3686f5990e669ad2a1684f0ac250c4d9ddc03e2ef6f3c980f17b7aae786833ef.ico">
  <link rel="icon" sizes="196x196" href="https://lightning.svbtle.com/cargo/apple-touch-icon-8ed2bd858a30400ead0535543ffb8ad2ab3e036a2f0adb797dc641458d00a41a.png">
  <link rel="mask-icon" href="https://lightning.svbtle.com/cargo/default-b7e7b5361ab4c50a9ceb6dc296e0f157e2ec9c2f2c6f30832d991dc361d69512.svg" color="black">
  <meta name="generator" content="Svbtle.com" />
  <meta name="description" content="Request Packet format Communication protocol for any malware lies at the core of its functionality . It is the essential way for any malware to communicate and receive further commands . Emotet has a complex communication format . Its... | Raashid  Bhat | Malware Research Blog."/>
  <link rel="canonical" href="https://int0xcc.svbtle.com/dissecting-emotet-s-network-communication-protocol" />
  <meta property="og:url" content="https://int0xcc.svbtle.com/dissecting-emotet-s-network-communication-protocol" />
  <meta property="twitter:site" content="@svbtle" />
  <meta property="twitter:title" content="Dissecting Emotet’s network communication protocol
" />
  <meta property="twitter:description" content="Request Packet format Communication protocol for any malware lies at the core of its functionality . It is the essential way for any malware to communicate and receive further commands . Emotet has a complex communication format . Its..." />
  <meta property="twitter:creator" content="@raashidbhatt" />
  <meta name="twitter:card" content="summary_large_image" />
  <meta name="twitter:image" content="https://svbtleusercontent.com/8W23UpkDJf2KpMcM2pxB5L0xspap.png" />
  <meta property="twitter:domain" content="https://int0xcc.svbtle.com" />
  <meta property="og:title" content="Dissecting Emotet’s network communication protocol
 &bull; Raashid  Bhat" />
  <meta property="og:type" content="article" />
  <meta property="og:description" content="Request Packet format Communication protocol for any malware lies at the core of its functionality . It is the essential way for any malware to communicate and receive further commands . Emotet has a complex communication format . Its... | Raashid  Bhat | Malware Research Blog." />
  <meta property="og:image" content="https://svbtleusercontent.com/8W23UpkDJf2KpMcM2pxB5L0xspap.png" />
  <meta property="og:site_name" content="Raashid  Bhat on Svbtle" />
  <meta property="fb:app_id" content="346346195413177" />
  <link rel="alternate" type="application/rss+xml" href="https://int0xcc.svbtle.com/feed" />
  <link rel="stylesheet" href="https://lightning.svbtle.com/cargo/legacy/build.blog-120c367e4cc2cdf2d031c71f795ecea0ef4033f8b24d12d8e147c86e08e2ed2a.css" media="all" data-turbolinks-track="reload" />
  <script src="https://lightning.svbtle.com/cargo/build.blog-41a284c81b4230cd8ab812d35fabef8cc99e927407ed15604d3206997ef79818.js" data-turbolinks-track="reload"></script>
  <script async src="https://www.googletagmanager.com/gtag/js?id=G-VGMRYDBB5R"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());
  gtag('set', 'linker', {
    'accept_incoming': true
  });
  gtag('config', 'G-VGMRYDBB5R');
</script>  <script src="https://lightning.svbtle.com/cargo/share_buttons-dd547cdb8c37c1c5b949d9a5f034ef854d39634831852762b3d730f59a9e47d4.js" data-turbolinks-track="true"></script>
  <script src="//platform.twitter.com/widgets.js" async></script>
</head>
<body class="overlord blog">
<style scoped>
figure.avatar a,
figure#user_logo a,
figure#user_foot a,
nav#overlord.user_top figure#logo_top a,
figure.kudo.complete div.filling {
  background-image: url('https://svbtleusercontent.com/x75cXsjA0QTd7zEA5JgXxUsrIcozqt8Iyw_medium.jpg')
}

figure.kudo.activated div.filling,
figure.kudo.complete div.filling {
  background-color: #668194;
}

figure.kudo.activated a,
figure.kudo.complete a {
  border-color: #668194;
}

blockquote,
a blockquote,
div#readnext:hover span.flank_title,
div#foot_more:hover a,
div#foot_userbar a#bottom_tagline span:hover,
article.linked h1.article_title a:hover,
a.continue_button:hover,
article p a:hover,
ul#lightning_drop,
figure#user_foot,
ul#user_links li a:hover,
ul#foot_links li a:hover,
a.buttonize:hover,
button.buttonize:hover,
a.buttonize.outline:hover,
button.buttonize.outline:hover,
nav.pagination span.next a:hover,
nav.pagination span.prev a:hover,
section#readnext:hover p span,
nav#overlord.user_top figure#logo_top {
  border-color: #668194;
}
/*figure#user_logo,*/

figure.avatar,
nav#overlord.user_top figure#logo_top a,
ul#user_links li a:hover,
ul#foot_links li a:hover,
a.buttonize:hover,
button.buttonize:hover,
a.buttonize.outline:hover,
button.buttonize.outline:hover,
nav.pagination span.next a:hover,
nav.pagination span.prev a:hover,
figure#user_logo a,
figure#user_foot a  {
	background-color: #668194;
}

h6.separator_title.read_first,
header#user_top h2 a,
footer#blog_foot h5 a,
article.post h1 a:hover,
div.preview strong,
nav#overlord h2#nav_title.user_top a,
section#readnext:hover h3,
section#readnext:hover p span {
  color: #668194;
}

@keyframes titlePulse
  {
  0% {
    color: #000000;
  }
  50% {
    color: #668194;
  }
  100% {
    color: #000000;
  }
}

@-moz-keyframes titlePulse
  {
  0% {
    color: #000000;
  }
  50% {
    color: #668194;
  }
  100% {
    color: #000000;
  }
}

@-webkit-keyframes titlePulse
  {
  0% {
    color: #000000;
  }
  50% {
    color: #668194;
  }
  100% {
    color: #000000;
  }
}


</style>

<figure id="loading">&nbsp;</figure>
<nav id="overlord" class="user_top">
  <div id="lockup" class="">
    <figure id="logo_top" class=" user_top">
      <a href="/">Svbtle</a>
    </figure>
    <h2 id="nav_title" class="user_top"><a href="https://int0xcc.svbtle.com">Raashid  Bhat</a></h2>
  </div>
  <figure id="hamburger">
    <a href="#menu" id="hamburger_button">Menu</a>
  </figure>
  <ul id="dropdown" class="onblog">
    <li class="dropdown_message">
     <a href="https://svbtle.com">Raashid  Bhat is writing on the <span class="logoize">Svbtle</span> network.</a>
    </li>
    <li><a href="https://www.linkedin.com/in/raashid-bhat/"  target="_blank">linkedin.com/in/ra...</a></li>
    <li><a href="https://x.com/raashidbhatt" class="xdotcom" target="_blank">@raashidbhatt</a></li>
    <li><a href="https://github.com/raashidbhatt" class="github" target="_blank">raashidbhatt</a></li>
    <li><a href="mailto:raashidbhatt@gmail.com?subject=hi%20from%20svbtle">say&nbsp;hello</a></li>
    <li><a href="/feed">rss feed</a></li>
    <li style="margin: 0; padding: 0;"><hr class="overlord_nav" /></li>
    <li><a href="https://svbtle.com/about">about svbtle</a></li>
    <li><a href="https://svbtle.com/signup">sign up</a></li>
  </ul>
</nav>
<div id="whiteout"></div>

<section id="container" class="blog user_post">
  <article id="5SzcRFh1MQLazwcwXiKsk4" class="post  historical">
	<time datetime="2019-04-22" class="article_time">April 22, 2019</time>
  <h1 class="article_title">
    <a href="https://int0xcc.svbtle.com/dissecting-emotet-s-network-communication-protocol">Dissecting Emotet’s network communication protocol
</a>
  </h1>
	<p><a href="https://svbtleusercontent.com/8W23UpkDJf2KpMcM2pxB5L0xspap.png"><img src="https://svbtleusercontent.com/8W23UpkDJf2KpMcM2pxB5L0xspap_small.png" alt="images.png"></a></p>

<p><strong><em>Request Packet format</em></strong></p>

<p>Communication protocol for any malware lies at the core of its functionality . It is the essential way for any malware to communicate and receive further commands . Emotet has a complex communication format . <br>
Its peculiarities are the way the protocol is built and sent across the network . Knowing internal details of its communication format is essential to keep tabs on it . In this post we are going to analyze Emotet communication format . </p>

<p> we will be skipping the unpacking and reconstruction part , as it is irrelevant to this topic of discussion .</p>

<p>In this post , we will be specifically looking for areas of interest in the binary , there will be some parts that are analyzed preemptively .</p>

<p>An unpacked emotet sample has around ~100 functions , as populated by IDA . Going through each of them to look for communication subroutines would be “A short in the dark” . The easiest way would be to look for network API calls and xrefs would sort out most of the dirty work for us </p>

<p><a href="https://svbtleusercontent.com/dEwHmD7Z3h28VjAoBMEFBh0xspap.png"><img src="https://svbtleusercontent.com/dEwHmD7Z3h28VjAoBMEFBh0xspap_small.png" alt="pasted-image-10.png"></a></p>

<p>Luckily in emotet., there is only one xref to this API call , which perhaps would be the subroutine where the communication to c2 server happens . This subroutine receives an encrypted and compressed packet with parameters like c2 server, port and sends it out . Xrefing back few subroutines would land us to the place where the packet is formulated . For comprehension , let’s name this subroutine as ConnectAndSend</p>

<p><a href="https://svbtleusercontent.com/3Qrq2uNWJp3YNGj9ahhwRp0xspap.png"><img src="https://svbtleusercontent.com/3Qrq2uNWJp3YNGj9ahhwRp0xspap_small.png" alt="pasted-image-12.png"></a></p>

<p>Tracking back xfrefs , we finally reach to the subroutine where the packet is generated . And , based on API calls and variables used , we can easily name few local variables and subroutines used , for example Botid, crc32, etc </p>

<p>Based on how stack variable are set , we get an idea that a struct is formulated . The definition of the structure would be as following </p>

<pre><code class="prettyprint">struct Emotet_BotInfo
{
    DWORD Uptime; 
    BYTE *BotID;
    DWORD BotIDLen;
    DWORD MajMinOSversion;
    DWORD TermSessID;
    DWORD Crc32HashBinary;
    BYTE *ProcList;
    DWORD ProlistLen;
    DWORD PluginsInstalled[];
    DWORD PluginsLen;

};
</code></pre>

<p>Uptime - Measure of uptime of the infection <br>
<em>BotID</em> - Botnet Identifier (unique per infection)<br>
<em>BotIDLen</em> - Length of BotID<br>
<em>MajMinOSversion *- Operating system identifier <br>
*TerminalSessID</em> - Terminal Session ID<br>
<em>Crc32HashBinary</em> - CRC32 hash of binary <br>
<em>ProcList</em> - List of running processes ( comma segregated )<br>
<em>PluginsInstalled</em> - Array of DWORD consisting of MODID’s of plugins installed </p>

<p>This structure is passed on to a function that calculates total round size based on some bit shifts  . This shifting gives us a clue about the format of the packet . Lets look at these patterns</p>

<p><a href="https://svbtleusercontent.com/8WkQbK67VQWhqemqqvuVue0xspap.png"><img src="https://svbtleusercontent.com/8WkQbK67VQWhqemqqvuVue0xspap_small.png" alt="pasted-image-14.png"></a></p>

<p>Translating it to a code snippet would roughly be equivalent to<br>
<a href="https://svbtleusercontent.com/vNzZG5i8bi15k6xiGFqf980xspap.jpg"><img src="https://svbtleusercontent.com/vNzZG5i8bi15k6xiGFqf980xspap_small.jpg" alt="pasted-image-16 copy.jpg"></a></p>

<pre><code class="prettyprint">towrite = number &amp; 0x7f
number &gt;&gt;= 7
</code></pre>

<p>This code encodes an integer to LEB128 or Little Endian Base 128 format (VARINT). And one of the serialized buffer formats that support it is the google protobuf format , this clue again makes the reversing equation easy for us . Some old emotet analysis blogs support our assumption .   <br>
Emotet has two packets one being encapsulated in the other . The inner layer lets call it base packet.   Base packet fundamentally is a group of entries with metadata information . Metadata includes type of data and an index number particular to the entry . Entries have a simple structure , but varies according to the type of entry </p>

<pre><code class="prettyprint">Struct EmotetEntry
{
    VARINT ULEB128_EntryLength ;
    BYTE Data[ULEB128_EntryLength];

}
</code></pre>

<p>Emotet’s base packet has three type of data entries, and are marked by numbers in the metadata </p>

<p>Type of element and type of data entry is specified in the metadata field </p>

<p>so, the complete definition of base packet would be something like this </p>

<pre><code class="prettyprint">struct BaseEmotetPacket 
{
    BYTE MetaData
    Struct EmotetEntry
    {
        VARINT ULEB128_EntryLength ;
        BYTE Data[ULEB128_EntryLength];

    }

}[n];
</code></pre>

<p>MetaData is a bitfield data type , which consists of <br>
<em>**  0-3 bits - Type of data field *</em>*<br>
<em>**3-7 bits - Index Number of Data field *</em>*</p>

<p>Where <em>index</em> is a incremental number and type is an enum </p>

<pre><code class="prettyprint">Enum Type
{
    Type 5 : Machine dependent endian WORD size integer 
    Type 2 : Buffer Struct { VARINT ULEN128_Size, BYTE data[ULEN128_Size];
    Type 0 : ULEN128 encoded variant 
 }
</code></pre>

<p>The code to add an entry in base packet can be defined in python as</p>

<pre><code class="prettyprint">def AppendElement(protoBuf, type, value, itemNum):
    protoBuf = protoBuf + struct.pack("B", ( (itemNum &lt;&lt; 3) | type ) &amp; 0xff)

    if type == 5: #DWORD Copy 32bit integer as it is
        return protoBuf + struct.pack("I", value)
    if type == 2: # Memory Buffer struct {VARINT ULEB128_Size, void * buf}
        return protoBuf + encode(len(value)) + value
    if type == 0: # encode DWORD in ULEB128
        return protoBuf + encode(value)
</code></pre>

<p>Later on , base packet is compressed and further more encapsulated in another packet </p>

<p>The definition of the final packet is almost the same as the base packet , but the only subtle difference is that it only has one field , which is the encapsulated base packet </p>

<pre><code class="prettyprint">struct FinalPacket
{
    BYTE MetaData;
    Struct BaseEmotetPacket BasePacket;


};

</code></pre>

<p><a href="https://svbtleusercontent.com/nioJVWuizTWKf16igYtDnD0xspap.png"><img src="https://svbtleusercontent.com/nioJVWuizTWKf16igYtDnD0xspap_small.png" alt="pasted-image-20.png"></a></p>

<p>This data is sent to c2 server immediately after encrypting the final packet . </p>

<p><strong><em>Response Packet format</em></strong></p>

<p><a href="https://svbtleusercontent.com/veTs1ZU6Rk1Dfy7ZWpjrdA0xspap.png"><img src="https://svbtleusercontent.com/veTs1ZU6Rk1Dfy7ZWpjrdA0xspap_small.png" alt="pasted-image-22.png"></a></p>

<p>Response data from c2 from received is decompressed , and the plain text data is supplied to a subroutine for deserialization  . </p>

<p>The response data field uses the same variable length integer encoding and is almost structured in the same way .</p>

<p>Response format is complex and tentative for each type of request and bot configuration .</p>

<p>Similarly like base request packet, this structure consists of a type and number bitfield , which determines which type of data field is it . In case of response , it has three of them </p>

<p><em>1 : Main module packet *<br>
*2 : Binary update data</em><br>
<em>3 : Deliverables data</em></p>

<pre><code class="prettyprint">struct EmotetResponse
{
    unsigned char Number : 4;
    unsigned char Type : 4;
    unsigned char ModID; // Each module has modid ( 0 for main module)

    unsigned char Number : 4;
    unsigned char Type : 4;
    VARINT UpdateBinLen; // Varint Type ULEB128 Encoded
    BYTE BinaryBlob[UpdateBinLen]; // Update Binary PE FILE

    unsigned char Number : 4;
    unsigned char Type : 4;
    VARINT deliverablesLen;

        struct deliverables_
        {
            unsigned char Number : 4;
            unsigned char Type : 4;
            unsigned char ModID; // PluginModid

            unsigned char ExeFlag; // "" 3 - Plugin , 2 -  WriteElevatedExecute, 1 - writeExecute"""

            VARINT PluginLen; // Varint Type ULEB128 Encoded
            BYTE PluginBinaryBlob[PluginLen]; // Update Binary PE FILE

        }

}
</code></pre>

  <figure class="postend kudo able clearfix" id="kudo_5SzcRFh1MQLazwcwXiKsk4">
    <a href="#kudo">
      <div class="filling">&nbsp;</div>
    </a>
    <div class="num">31</div>
    <div class="txt">Kudos</div>
  </figure>
  <figure class="side kudo able clearfix" id="kudo_side_5SzcRFh1MQLazwcwXiKsk4">
    <a href="#kudo">
      <div class="filling">&nbsp;</div>
    </a>
    <div class="num">31</div>
    <div class="txt">Kudos</div>
  </figure>
</article>

  <div id="share_links" data-no-turbolink>
    <a href="https://twitter.com/share" class="twitter-share-button" data-via="raashidbhatt" data-related="svbtle" data-no-turbolink>Tweet</a>
    <div style="margin-top: 4px; margin-bottom: 8px; margin-left: 0px; display: block;" class="fb-share-button" data-href="https://int0xcc.svbtle.com/dissecting-emotet-s-network-communication-protocol" data-layout="button_count" data-no-turbolink></div>
  <div>
</section>
<section id="readnext">
  <a href="https://int0xcc.svbtle.com/how-cyber-criminals-use-malware-to-mine-litecoins">
    <h4 class="readnext_header">Now read this</h4>
    <h3 class="readnext_title">How Cyber Criminals Use Malware To Mine LiteCoins</h3>
    <p class="readnext_content">Recently I came across not so well known downloader trojan . While analysing many interesting things were revealed. Download starts by enumerating a specific list of mutexes opened by all process and if found that particular process is... <span class="continue_btn">Continue&nbsp;&rarr;</span></p>
  </a>
</section>
<footer id="blog_foot" class="cf">
  <ul id="foot_links">
    <li><a href="https://x.com/raashidbhatt">@raashidbhatt</a></li>
    <li><a href="mailto:raashidbhatt@gmail.com?subject=Svbtle">say hello</a></li>
    <li><a href="https://www.linkedin.com/in/raashid-bhat/" >linkedin.com/in/ra...</a></li>
  </ul>
  <figure id="user_foot"><a href="/">Svbtle</a></figure>
  <h5><a href="https://int0xcc.svbtle.com">Raashid  Bhat</a></h5>
</footer>
<footer id="foot">
  <figure id="logo_foot"><a href="https://svbtle.com">Svbtle</a></figure>
  <a href="https://svbtle.com/terms" style="color: #ccc; margin-left: 25px;">Terms</a> <span style="color: #ccc;">•</span> <a href="https://svbtle.com/privacy" style="color: #ccc;">Privacy</a>
  <span style="color: #ccc;">•</span> <a href="https://svbtle.com/promise" style="color: #ccc; margin-right: 15px;">Promise</a>
  <br/><br/>
</footer>

<div id="lights">&nbsp;</div>
<div id="app-data" data-name="svbtle" data-version="8.5-legible" data-magicNum="2572031820.15"></div><div id="px-data" data-ax="posts" data-sx="show"></div><div id="user-data" data-here="false" data-state="logged-out"></div><div id="blog-data" data-title="Raashid  Bhat" data-blogname="int0xcc" data-extid="6UBJCix6mX26ewyuugsksk" data-color="668194" data-color-rgb="102,129,148" data-color-rgba="(102,129,148,0.5)" data-blog-tracker="false"></div></body>
</html>
