<!doctype html><html lang="en" ><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><meta name="theme-color" media="(prefers-color-scheme: light)" content="#f7f7f7"><meta name="theme-color" media="(prefers-color-scheme: dark)" content="#1b1b1e"><meta name="mobile-web-app-capable" content="yes"><meta name="apple-mobile-web-app-status-bar-style" content="black-translucent"><meta name="viewport" content="width=device-width, user-scalable=no initial-scale=1, shrink-to-fit=no, viewport-fit=cover" ><meta name="generator" content="Jekyll v4.3.4" /><meta property="og:title" content="STRRAT Attached to a MSI File" /><meta property="og:locale" content="en" /><meta name="description" content="Adversaries can get really creative with ways to hide and execute payloads. In this post I’ll cover one instance where an adversary appended STRRAT to a MSI file to make it look legitimate during analysis. If you want to follow along at home, the sample I’m working with is available in MalwareBazaar here: https://bazaar.abuse.ch/sample/0c3ff324e87c65c09f862f426d137206b5e895e70a85e6831a4aa5cc808a80be/." /><meta property="og:description" content="Adversaries can get really creative with ways to hide and execute payloads. In this post I’ll cover one instance where an adversary appended STRRAT to a MSI file to make it look legitimate during analysis. If you want to follow along at home, the sample I’m working with is available in MalwareBazaar here: https://bazaar.abuse.ch/sample/0c3ff324e87c65c09f862f426d137206b5e895e70a85e6831a4aa5cc808a80be/." /><link rel="canonical" href="https://forensicitguy.github.io/strrat-attached-to-msi/" /><meta property="og:url" content="https://forensicitguy.github.io/strrat-attached-to-msi/" /><meta property="og:site_name" content="Tony Lambert" /><meta property="og:type" content="article" /><meta property="article:published_time" content="2022-02-02T00:00:00+00:00" /><meta name="twitter:card" content="summary" /><meta property="twitter:title" content="STRRAT Attached to a MSI File" /><meta name="twitter:site" content="@ForensicITGuy" /> <script type="application/ld+json"> {"@context":"https://schema.org","@type":"BlogPosting","dateModified":"2022-03-28T23:09:20+00:00","datePublished":"2022-02-02T00:00:00+00:00","description":"Adversaries can get really creative with ways to hide and execute payloads. In this post I’ll cover one instance where an adversary appended STRRAT to a MSI file to make it look legitimate during analysis. If you want to follow along at home, the sample I’m working with is available in MalwareBazaar here: https://bazaar.abuse.ch/sample/0c3ff324e87c65c09f862f426d137206b5e895e70a85e6831a4aa5cc808a80be/.","headline":"STRRAT Attached to a MSI File","mainEntityOfPage":{"@type":"WebPage","@id":"https://forensicitguy.github.io/strrat-attached-to-msi/"},"url":"https://forensicitguy.github.io/strrat-attached-to-msi/"}</script><title>STRRAT Attached to a MSI File | Tony Lambert</title><link rel="apple-touch-icon" sizes="180x180" href="/assets/img/favicons/apple-touch-icon.png"><link rel="icon" type="image/png" sizes="32x32" href="/assets/img/favicons/favicon-32x32.png"><link rel="icon" type="image/png" sizes="16x16" href="/assets/img/favicons/favicon-16x16.png"><link rel="manifest" href="/assets/img/favicons/site.webmanifest"><link rel="shortcut icon" href="/assets/img/favicons/favicon.ico"><meta name="apple-mobile-web-app-title" content="Tony Lambert"><meta name="application-name" content="Tony Lambert"><meta name="msapplication-TileColor" content="#da532c"><meta name="msapplication-config" content="/assets/img/favicons/browserconfig.xml"><meta name="theme-color" content="#ffffff"><link rel="preconnect" href="https://fonts.googleapis.com" ><link rel="dns-prefetch" href="https://fonts.googleapis.com" ><link rel="preconnect" href="https://fonts.gstatic.com" crossorigin><link rel="dns-prefetch" href="https://fonts.gstatic.com" ><link rel="preconnect" href="https://cdn.jsdelivr.net" ><link rel="dns-prefetch" href="https://cdn.jsdelivr.net" ><link rel="stylesheet" href="/assets/css/jekyll-theme-chirpy.css"><link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Lato:wght@300;400&family=Source+Sans+Pro:wght@400;600;700;900&display=swap"><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6.6.0/css/all.min.css"><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/tocbot@4.29.0/dist/tocbot.min.css"><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/loading-attribute-polyfill@2.1.1/dist/loading-attribute-polyfill.min.css"><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/glightbox@3.3.0/dist/css/glightbox.min.css"> <script type="text/javascript"> class ModeToggle { static get MODE_KEY() { return 'mode'; } static get MODE_ATTR() { return 'data-mode'; } static get DARK_MODE() { return 'dark'; } static get LIGHT_MODE() { return 'light'; } static get ID() { return 'mode-toggle'; } constructor() { let self = this;this.sysDarkPrefers.addEventListener('change', () => { if (self.hasMode) { self.clearMode(); } self.notify(); }); if (!this.hasMode) { return; } if (this.isDarkMode) { this.setDark(); } else { this.setLight(); } } get sysDarkPrefers() { return window.matchMedia('(prefers-color-scheme: dark)'); } get isPreferDark() { return this.sysDarkPrefers.matches; } get isDarkMode() { return this.mode === ModeToggle.DARK_MODE; } get hasMode() { return this.mode != null; } get mode() { return sessionStorage.getItem(ModeToggle.MODE_KEY); }get modeStatus() { if (this.hasMode) { return this.mode; } else { return this.isPreferDark ? ModeToggle.DARK_MODE : ModeToggle.LIGHT_MODE; } } setDark() { document.documentElement.setAttribute(ModeToggle.MODE_ATTR, ModeToggle.DARK_MODE); sessionStorage.setItem(ModeToggle.MODE_KEY, ModeToggle.DARK_MODE); } setLight() { document.documentElement.setAttribute(ModeToggle.MODE_ATTR, ModeToggle.LIGHT_MODE); sessionStorage.setItem(ModeToggle.MODE_KEY, ModeToggle.LIGHT_MODE); } clearMode() { document.documentElement.removeAttribute(ModeToggle.MODE_ATTR); sessionStorage.removeItem(ModeToggle.MODE_KEY); }notify() { window.postMessage( { direction: ModeToggle.ID, message: this.modeStatus }, '*' ); } flipMode() { if (this.hasMode) { this.clearMode(); } else { if (this.isPreferDark) { this.setLight(); } else { this.setDark(); } } this.notify(); } } const modeToggle = new ModeToggle(); </script><body><aside aria-label="Sidebar" id="sidebar" class="d-flex flex-column align-items-end"><header class="profile-wrapper"> <a href="/" id="avatar" class="rounded-circle"><img src="/assets/images/avatar.jpg" width="112" height="112" alt="avatar" onerror="this.style.display='none'"></a><h1 class="site-title"> <a href="/">Tony Lambert</a></h1><p class="site-subtitle fst-italic mb-0">An educator that does security things</p></header><nav class="flex-column flex-grow-1 w-100 ps-0"><ul class="nav"><li class="nav-item"> <a href="/" class="nav-link"> <i class="fa-fw fas fa-home"></i> <span>HOME</span> </a><li class="nav-item"> <a href="/categories/" class="nav-link"> <i class="fa-fw fas fa-stream"></i> <span>CATEGORIES</span> </a><li class="nav-item"> <a href="/tags/" class="nav-link"> <i class="fa-fw fas fa-tag"></i> <span>TAGS</span> </a><li class="nav-item"> <a href="/archives/" class="nav-link"> <i class="fa-fw fas fa-archive"></i> <span>ARCHIVES</span> </a><li class="nav-item"> <a href="/about/" class="nav-link"> <i class="fa-fw fas fa-info-circle"></i> <span>ABOUT</span> </a></ul></nav><div class="sidebar-bottom d-flex flex-wrap align-items-center w-100"> <button type="button" class="btn btn-link nav-link" aria-label="Switch Mode" id="mode-toggle"> <i class="fas fa-adjust"></i> </button> <span class="icon-border"></span> <a href="https://github.com/ForensicITGuy" aria-label="github" target="_blank" rel="noopener noreferrer" > <i class="fab fa-github"></i> </a> <a href="https://twitter.com/ForensicITGuy" aria-label="twitter" target="_blank" rel="noopener noreferrer" > <i class="fa-brands fa-x-twitter"></i> </a> <a href="https://www.linkedin.com/in/tonymlambert/" aria-label="linkedin" target="_blank" rel="noopener noreferrer" > <i class="fab fa-linkedin"></i> </a> <a href="/feed.xml" aria-label="rss" > <i class="fas fa-rss"></i> </a> <a href="https://ko-fi.com/forensicitguy" aria-label="ko-fi" target="_blank" rel="noopener noreferrer" > <i class="fas fa-mug-hot"></i> </a> <a href="https://infosec.exchange/web/@ForensicITGuy" aria-label="mastodon" target="_blank" rel="noopener noreferrer me" > <i class="fab fa-mastodon"></i> </a></div></aside><div id="main-wrapper" class="d-flex justify-content-center"><div class="container d-flex flex-column px-xxl-5"><header id="topbar-wrapper" aria-label="Top Bar"><div id="topbar" class="d-flex align-items-center justify-content-between px-lg-3 h-100" ><nav id="breadcrumb" aria-label="Breadcrumb"> <span> <a href="/">Home</a> </span> <span>STRRAT Attached to a MSI File</span></nav><button type="button" id="sidebar-trigger" class="btn btn-link"> <i class="fas fa-bars fa-fw"></i> </button><div id="topbar-title"> Post</div><button type="button" id="search-trigger" class="btn btn-link"> <i class="fas fa-search fa-fw"></i> </button> <search id="search" class="align-items-center ms-3 ms-lg-0"> <i class="fas fa-search fa-fw"></i> <input class="form-control" id="search-input" type="search" aria-label="search" autocomplete="off" placeholder="Search..." > </search> <button type="button" class="btn btn-link text-decoration-none" id="search-cancel">Cancel</button></div></header><div class="row flex-grow-1"><main aria-label="Main Content" class="col-12 col-lg-11 col-xl-9 px-md-4"><article class="px-1"><header><h1 data-toc-skip>STRRAT Attached to a MSI File</h1><div class="post-meta text-muted"> <span> Posted <time data-ts="1643760000" data-df="ll" data-bs-toggle="tooltip" data-bs-placement="bottom" > Feb 2, 2022 </time> </span> <span> Updated <time data-ts="1648508960" data-df="ll" data-bs-toggle="tooltip" data-bs-placement="bottom" > Mar 28, 2022 </time> </span><div class="d-flex justify-content-between"> <span> By <em> <a href="https://twitter.com/ForensicITGuy">Tony Lambert</a> </em> </span><div> <span class="readtime" data-bs-toggle="tooltip" data-bs-placement="bottom" title="2645 words" > <em>14 min</em> read</span></div></div></div></header><div class="content"><p>Adversaries can get really creative with ways to hide and execute payloads. In this post I’ll cover one instance where an adversary appended STRRAT to a MSI file to make it look legitimate during analysis. If you want to follow along at home, the sample I’m working with is available in MalwareBazaar here: <a href="https://bazaar.abuse.ch/sample/0c3ff324e87c65c09f862f426d137206b5e895e70a85e6831a4aa5cc808a80be/">https://bazaar.abuse.ch/sample/0c3ff324e87c65c09f862f426d137206b5e895e70a85e6831a4aa5cc808a80be/</a>.</p><h2 id="triaging-the-file"><span class="me-2">Triaging the File</span><a href="#triaging-the-file" class="anchor text-muted"><i class="fas fa-hashtag"></i></a></h2><p>MalwareBazaar says the sample is a MSI file, so let’s verify that claim using <code class="language-plaintext highlighter-rouge">file</code>, <code class="language-plaintext highlighter-rouge">diec</code>, and <code class="language-plaintext highlighter-rouge">xxd</code>.</p><div class="language-console highlighter-rouge"><div class="code-header"> <span data-label-text="Console"><i class="fas fa-code fa-fw small"></i></span> <button aria-label="copy" data-title-succeed="Copied!"><i class="far fa-clipboard"></i></button></div><div class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre><td class="rouge-code"><pre><span class="gp">remnux@remnux:~/cases/unk-msi$</span><span class="w"> </span>file delivery.msi 
<span class="gp">delivery.msi: Composite Document File V2 Document, Little Endian, Os: Windows, Version 6.1, MSI Installer, Code page: 1252, Title: Installation Database, Subject: REPLACE, Author: REPLACE, Keywords: Installer, Comments: This installer database contains the logic and data required to install REPLACE., Template: Intel;</span>1033, Revision Number: <span class="o">{</span>00000000-0000-0000-0000-000000000000<span class="o">}</span>, Number of Pages: 200, Number of Words: 0, Security: 4, Create Time/Date: Wed Nov 23 16:25:04 2016, Last Saved Time/Date: Wed Nov 23 16:25:04 2016, Name of Creating Application: Windows Installer XML v2.0.3719.0 <span class="o">(</span>candle/light<span class="o">)</span>
<span class="go">
</span><span class="gp">remnux@remnux:~/cases/unk-msi$</span><span class="w"> </span>diec delivery.msi 
<span class="go">filetype: Binary
arch: NOEXEC
mode: Unknown
endianess: LE
type: Unknown
  installer: Microsoft Installer(MSI)

</span><span class="gp">remnux@remnux:~/cases/unk-msi$</span><span class="w"> </span>xxd <span class="nt">-C</span> delivery.msi | <span class="nb">head</span>
<span class="go">00000000: d0cf 11e0 a1b1 1ae1 0000 0000 0000 0000  ................
</span><span class="gp">00000010: 0000 0000 0000 0000 3e00 0400 feff 0c00  ........&gt;</span>.......
<span class="go">00000020: 0600 0000 0000 0000 0100 0000 0100 0000  ................
00000030: 0100 0000 0000 0000 0010 0000 0200 0000  ................
00000040: 0100 0000 feff ffff 0000 0000 0000 0000  ................
00000050: ffff ffff ffff ffff ffff ffff ffff ffff  ................
00000060: ffff ffff ffff ffff ffff ffff ffff ffff  ................
00000070: ffff ffff ffff ffff ffff ffff ffff ffff  ................
00000080: ffff ffff ffff ffff ffff ffff ffff ffff  ................
00000090: ffff ffff ffff ffff ffff ffff ffff ffff  ................
</span></pre></table></code></div></div><p>All of our checks conclude that the file indeed has magic bytes for a MSI installer file. We can also take a look at the file size using <code class="language-plaintext highlighter-rouge">ls</code> or <code class="language-plaintext highlighter-rouge">exiftool</code>.</p><div class="language-console highlighter-rouge"><div class="code-header"> <span data-label-text="Console"><i class="fas fa-code fa-fw small"></i></span> <button aria-label="copy" data-title-succeed="Copied!"><i class="far fa-clipboard"></i></button></div><div class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre><td class="rouge-code"><pre><span class="gp">remnux@remnux:~/cases/unk-msi$</span><span class="w"> </span><span class="nb">ls</span> <span class="nt">-lh</span> delivery.msi 
<span class="go">-rw-r--r-- 1 remnux remnux 658K Feb  3  2022 delivery.msi
</span></pre></table></code></div></div><p>So the MSI file is about 658K in size. It’s a decent enough size to have some executable content within, so let’s tear into it.</p><h2 id="analyzing-the-msi-file"><span class="me-2">Analyzing the MSI File</span><a href="#analyzing-the-msi-file" class="anchor text-muted"><i class="fas fa-hashtag"></i></a></h2><p>MSI files are structurally similar to MS Office 97-2003 documents. In fact, that’s why the <code class="language-plaintext highlighter-rouge">file</code> command returns <code class="language-plaintext highlighter-rouge">Composite Document File V2 Document</code> for MSI files as they share the same magic bytes with documents. This is good news because it means we can use <code class="language-plaintext highlighter-rouge">oledump.py</code> to view and extract content from streams within the MSI file.</p><div class="language-console highlighter-rouge"><div class="code-header"> <span data-label-text="Console"><i class="fas fa-code fa-fw small"></i></span> <button aria-label="copy" data-title-succeed="Copied!"><i class="far fa-clipboard"></i></button></div><div class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
</pre><td class="rouge-code"><pre><span class="gp">remnux@remnux:~/cases/unk-msi$</span><span class="w"> </span>oledump.py delivery.msi 
<span class="go">  1:       528 '\x05SummaryInformation'
  2:       784 '䡀㬿䏲䐸䖱'
  3:      8553 '䡀㼿䕷䑬㭪䗤䠤'
  4:      1100 '䡀㼿䕷䑬㹪䒲䠯'
  5:        36 '䡀㽿䅤䈯䠶'
  6:      2400 '䡀㿿䏤䇬䗤䒬䠱'
  7:        48 '䡀䇊䌰㮱䈻䘦䈷䈜䘴䑨䈦'
  8:        24 '䡀䇊䌰㾱㼒䔨䈸䆱䠨'
  9:        48 '䡀䇊䗹䛎䆨䗸㼨䔨䈸䆱䠨'
 10:        20 '䡀䈏䗤䕸㬨䐲䒳䈱䗱䠶'
 11:        48 '䡀䈏䗤䕸䠨'
 12:        14 '䡀䈖䌧䠤'
 13:       132 '䡀䈛䌪䗶䜵'
 14:        64 '䡀䋜䕲䆷䗸'
 15:        30 '䡀䌍䈵䗦䕲䠼'
 16:        20 '䡀䌏䈯'
 17:       132 '䡀䑒䗶䏤㮯䈻䘦䈷䈜䘴䑨䈦'
 18:        42 '䡀䑒䗶䏤㾯㼒䔨䈸䆱䠨'
 19:        12 '䡀䒌䇱䗬䒬䠱'
 20:        60 '䡀䒌䓰䑲䑨䠷'
 21:        16 '䡀䓞䕪䇤䠨'
 22:        56 '䡀䕙䓲䕨䜷'
 23:        20 '䡀䖖㯬䏬㱨䖤䠫'
</span></pre></table></code></div></div><p>Within the <code class="language-plaintext highlighter-rouge">oledump.py</code> output, you can ignore the stream names. After working with numerous MSI files in <code class="language-plaintext highlighter-rouge">oledump</code> I’ve found that having unreadable stream names is fairly common. Instead, let’s focus on the first two columns. The left column is a stream number and the middle is a size value in bytes. From here, we can inspect the individual streams using <code class="language-plaintext highlighter-rouge">oledump</code>. To do this, work from the stream with the largest size value downward until you start encountering empty-ish streams. In this sample, we want to inspect streams 3, 6, 4, and 2. Stream 1 should always contain summary information about the MSI file.</p><div class="language-console highlighter-rouge"><div class="code-header"> <span data-label-text="Console"><i class="fas fa-code fa-fw small"></i></span> <button aria-label="copy" data-title-succeed="Copied!"><i class="far fa-clipboard"></i></button></div><div class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre><td class="rouge-code"><pre><span class="gp">remnux@remnux:~/cases/unk-msi$</span><span class="w"> </span>oledump.py <span class="nt">-a</span> <span class="nt">-s</span> 3 delivery.msi | <span class="nb">head</span>
<span class="go">00000000: 4E 61 6D 65 54 61 62 6C  65 46 65 61 74 75 72 65  NameTableFeature
00000010: 46 65 61 74 75 72 65 5F  50 61 72 65 6E 74 54 69  Feature_ParentTi
00000020: 74 6C 65 44 65 73 63 72  69 70 74 69 6F 6E 44 69  tleDescriptionDi
00000030: 73 70 6C 61 79 4C 65 76  65 6C 44 69 72 65 63 74  splayLevelDirect
00000040: 6F 72 79 5F 41 74 74 72  69 62 75 74 65 73 41 70  ory_AttributesAp
00000050: 70 6C 69 63 61 74 69 6F  6E 44 65 73 6B 74 6F 70  plicationDesktop
00000060: 53 68 6F 72 74 63 75 74  50 72 6F 67 72 61 6D 53  ShortcutProgramS
00000070: 68 6F 72 74 63 75 74 55  70 67 72 61 64 65 43 6F  hortcutUpgradeCo
00000080: 64 65 55 70 67 72 61 64  65 4B 65 79 52 6F 6F 74  deUpgradeKeyRoot
00000090: 52 65 67 69 73 74 72 79  44 45 4C 45 54 45 5F 54  RegistryDELETE_T
</span></pre></table></code></div></div><p>In stream 3 we can observe string values that might be related to a configuration file or something else related to the installation process. Since this is our largest stream, this is already a bit problematic. If the installer contains EXE binary content, the binary will likely be larger than a text file. After dumping out this stream with <code class="language-plaintext highlighter-rouge">oledump.py -d</code> we can look at the contents and see that it doesn’t contain any scripting commands either. This dumping process is easier to do than show in a post, so I’ll leave that for a reader exercise :).</p><h2 id="wheres-the-malware"><span class="me-2">Where’s the Malware???</span><a href="#wheres-the-malware" class="anchor text-muted"><i class="fas fa-hashtag"></i></a></h2><p>After checking out the remaining large streams we can’t find executable content in the MSI.</p><div class="language-console highlighter-rouge"><div class="code-header"> <span data-label-text="Console"><i class="fas fa-code fa-fw small"></i></span> <button aria-label="copy" data-title-succeed="Copied!"><i class="far fa-clipboard"></i></button></div><div class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
</pre><td class="rouge-code"><pre><span class="gp">remnux@remnux:~/cases/unk-msi$</span><span class="w"> </span>oledump.py <span class="nt">-a</span> <span class="nt">-s</span> 6 delivery.msi | <span class="nb">head</span>
<span class="go">00000000: 05 00 05 00 05 00 05 00  05 00 05 00 05 00 05 00  ................
00000010: 11 00 11 00 11 00 11 00  11 00 11 00 11 00 14 00  ................
00000020: 14 00 14 00 14 00 14 00  14 00 3D 00 3D 00 3D 00  ..........=.=.=.
00000030: 3D 00 3D 00 3D 00 44 00  44 00 44 00 50 00 50 00  =.=.=.D.D.D.P.P.
00000040: 50 00 50 00 50 00 50 00  50 00 50 00 50 00 50 00  P.P.P.P.P.P.P.P.
00000050: 50 00 50 00 50 00 50 00  50 00 50 00 60 00 60 00  P.P.P.P.P.P.`.`.
00000060: 60 00 60 00 60 00 60 00  68 00 68 00 68 00 6A 00  `.`.`.`.h.h.h.j.
00000070: 6A 00 6A 00 73 00 73 00  73 00 87 00 87 00 87 00  j.j.s.s.s.......
00000080: 88 00 88 00 88 00 8A 00  8A 00 8C 00 8C 00 8C 00  ................
00000090: 8C 00 8C 00 8C 00 8C 00  8C 00 90 00 90 00 90 00  ................

</span><span class="gp">remnux@remnux:~/cases/unk-msi$</span><span class="w"> </span>oledump.py <span class="nt">-a</span> <span class="nt">-s</span> 4 delivery.msi | <span class="nb">head</span>
<span class="go">00000000: E9 FD 00 00 04 00 04 00  05 00 02 00 00 00 00 00  ................
00000010: 00 00 00 00 07 00 16 00  0E 00 02 00 05 00 02 00  ................
00000020: 0B 00 06 00 07 00 02 00  05 00 04 00 0A 00 06 00  ................
00000030: 0A 00 08 00 0B 00 04 00  0F 00 03 00 0F 00 03 00  ................
00000040: 0B 00 03 00 07 00 0F 00  03 00 02 00 04 00 02 00  ................
00000050: 08 00 0F 00 0F 00 01 00  26 00 07 00 0E 00 02 00  ........&amp;.......
00000060: 06 00 02 00 08 00 06 00  0A 00 02 00 0A 00 02 00  ................
00000070: 05 00 05 00 0A 00 08 00  0E 00 01 00 07 00 16 00  ................
00000080: 0B 00 01 00 0B 00 03 00  0C 00 0C 00 0E 00 01 00  ................
00000090: 0B 00 01 00 11 00 01 00  0E 00 01 00 0F 00 01 00  ................

</span><span class="gp">remnux@remnux:~/cases/unk-msi$</span><span class="w"> </span>oledump.py <span class="nt">-a</span> <span class="nt">-s</span> 2 delivery.msi | <span class="nb">head</span>
<span class="go">00000000: 05 00 05 00 05 00 05 00  05 00 05 00 05 00 05 00  ................
00000010: 11 00 11 00 11 00 11 00  11 00 11 00 11 00 14 00  ................
00000020: 14 00 14 00 14 00 14 00  14 00 3D 00 3D 00 3D 00  ..........=.=.=.
00000030: 3D 00 3D 00 3D 00 44 00  44 00 44 00 50 00 50 00  =.=.=.D.D.D.P.P.
00000040: 50 00 50 00 50 00 50 00  50 00 50 00 50 00 50 00  P.P.P.P.P.P.P.P.
00000050: 50 00 50 00 50 00 50 00  50 00 50 00 60 00 60 00  P.P.P.P.P.P.`.`.
00000060: 60 00 60 00 60 00 60 00  68 00 68 00 68 00 6A 00  `.`.`.`.h.h.h.j.
00000070: 6A 00 6A 00 73 00 73 00  73 00 87 00 87 00 87 00  j.j.s.s.s.......
00000080: 88 00 88 00 88 00 8A 00  8A 00 8C 00 8C 00 8C 00  ................
00000090: 8C 00 8C 00 8C 00 8C 00  8C 00 90 00 90 00 90 00  ................
</span></pre></table></code></div></div><p>Clearly there is some form of content here otherwise AV vendors wouldn’t call the file malicious. Also, if we go back and look at the <code class="language-plaintext highlighter-rouge">oledump</code> output we can see the stream sizes, when summed up, fall significantly short of 658K. In situations like this I prefer to use <code class="language-plaintext highlighter-rouge">xxd</code> and <code class="language-plaintext highlighter-rouge">less</code> combined to browse the hex and ASCII side-by-side to look for patterns.</p><div class="language-console highlighter-rouge"><div class="code-header"> <span data-label-text="Console"><i class="fas fa-code fa-fw small"></i></span> <button aria-label="copy" data-title-succeed="Copied!"><i class="far fa-clipboard"></i></button></div><div class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre><td class="rouge-code"><pre><span class="gp">remnux@remnux:~/cases/unk-msi$</span><span class="w"> </span>xxd <span class="nt">-C</span> delivery.msi | less
<span class="c">...
</span><span class="go">
00027600: 4d5a 9000 0300 0000 0400 0000 ffff 0000  MZ..............
00027610: b800 0000 0000 0000 4000 0000 0000 0000  ........@.......
00027620: 0000 0000 0000 0000 0000 0000 0000 0000  ................
00027630: 0000 0000 0000 0000 0000 0000 0001 0000  ................
00027640: 0e1f ba0e 00b4 09cd 21b8 014c cd21 5468  ........!..L.!Th
00027650: 6973 2070 726f 6772 616d 2063 616e 6e6f  is program canno
00027660: 7420 6265 2072 756e 2069 6e20 444f 5320  t be run in DOS 
</span><span class="gp">00027670: 6d6f 6465 2e0d 0d0a 2400 0000 0000 0000  mode....$</span>.......
<span class="go">00027680: 532f 81a2 174e eff1 174e eff1 174e eff1  S/...N...N...N..

</span><span class="c">...
</span></pre></table></code></div></div><p>Using the search feature of <code class="language-plaintext highlighter-rouge">less</code> and the string “MZ” we found some executable content. We can try to unpack that in a minute after we get done browsing the bytes. Once we get toward the end of the MSI file we can see some more interesting strings.</p><div class="language-console highlighter-rouge"><div class="code-header"> <span data-label-text="Console"><i class="fas fa-code fa-fw small"></i></span> <button aria-label="copy" data-title-succeed="Copied!"><i class="far fa-clipboard"></i></button></div><div class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre><td class="rouge-code"><pre><span class="go">000a4540: 6c61 7373 504b 0102 1400 1400 0808 0800  lassPK..........
000a4550: 8719 3f54 59cb 777b a40a 0000 ca11 0000  ..?TY.w{........
000a4560: 1800 0000 0000 0000 0000 0000 0000 fd40  ...............@
000a4570: 0100 6361 724c 616d 626f 2f64 6668 6466  ..carLambo/dfhdf
000a4580: 6e64 6667 2e63 6c61 7373 504b 0102 1400  ndfg.classPK....
000a4590: 1400 0808 0800 8719 3f54 3ceb b0cc 3704  ........?T&lt;...7.
000a45a0: 0000 4b07 0000 1600 0000 0000 0000 0000  ..K.............
000a45b0: 0000 0000 e74b 0100 6361 724c 616d 626f  .....K..carLambo
000a45c0: 2f78 6276 6378 6e78 2e63 6c61 7373 504b  /xbvcxnx.classPK
000a45d0: 0506 0000 0000 4100 4100 6c11 0000 6250  ......A.A.l...bP
</span></pre></table></code></div></div><p>In the strings we can see some references to “carLambo” and “.class” files. These are significant findings because “.class” files are Java bytecode files. We can hypothesize that there is likely Java executable content attached to this MSI file. This sort of thing has happened before, in fact there was a bit of a hubbub back in 2019 when VirusTotal talked about it in a blog post. I also <a href="https://forensicitguy.github.io/making-meterpreter-look-google-signed/">published one then</a>, doing a bit of tinkering.</p><p>Long story short, you can append Java Archive (JAR) files to MSI files without hindering the operation of either file type. Java reads the JAR from end to front and <code class="language-plaintext highlighter-rouge">msiexec</code> reads from front to end. In fact, we can rename the MSI file to <code class="language-plaintext highlighter-rouge">delivery.jar</code> and view the Java contents using JD-GUI in REMnux.</p><p><a href="/assets/images/strrat-attached-to-msi/jd-gui-strrat.png" class="popup img-link shimmer"><img src="/assets/images/strrat-attached-to-msi/jd-gui-strrat.png" alt="JD-GUI viewing STRRAT" loading="lazy"></a></p><h2 id="extracting-the-java-class-files"><span class="me-2">Extracting the Java Class Files</span><a href="#extracting-the-java-class-files" class="anchor text-muted"><i class="fas fa-hashtag"></i></a></h2><p>As an alternate path to extract the Java class files, you can also use <code class="language-plaintext highlighter-rouge">binwalk</code>.</p><div class="language-console highlighter-rouge"><div class="code-header"> <span data-label-text="Console"><i class="fas fa-code fa-fw small"></i></span> <button aria-label="copy" data-title-succeed="Copied!"><i class="far fa-clipboard"></i></button></div><div class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre><td class="rouge-code"><pre><span class="gp">remnux@remnux:~/cases/unk-msi$</span><span class="w"> </span>binwalk <span class="nt">-e</span> delivery.msi 
<span class="go">
DECIMAL       HEXADECIMAL     DESCRIPTION
--------------------------------------------------------------------------------
</span><span class="c">...
</span><span class="go">85504         0x14E00         Microsoft executable, portable (PE)
</span><span class="c">...
</span><span class="go">161280        0x27600         Microsoft executable, portable (PE)
</span><span class="c">...
</span><span class="go">658644        0xA0CD4         Zip archive data, at least v2.0 to extract, name: carLambo/dhgfgh.class
661635        0xA1883         Zip archive data, at least v2.0 to extract, name: carLambo/ngdnbn.class
664267        0xA22CB         Zip archive data, at least v2.0 to extract, name: carLambo/xbxcv.class
664829        0xA24FD         Zip archive data, at least v2.0 to extract, name: carLambo/dfhdfndfg.class
667623        0xA2FE7         Zip archive data, at least v2.0 to extract, name: carLambo/xbvcxnx.class
673230        0xA45CE         End of Zip archive, footer length: 22
</span></pre></table></code></div></div><p>By taking this approach the <code class="language-plaintext highlighter-rouge">binwalk</code> tool also extracts the relevant EXE files.</p><div class="language-console highlighter-rouge"><div class="code-header"> <span data-label-text="Console"><i class="fas fa-code fa-fw small"></i></span> <button aria-label="copy" data-title-succeed="Copied!"><i class="far fa-clipboard"></i></button></div><div class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre><td class="rouge-code"><pre><span class="gp">remnux@remnux:~/cases/unk-msi/_delivery.msi.extracted$</span><span class="w"> </span>ll
<span class="go">total 220
drwxrwxr-x 4 remnux remnux  4096 Feb  2 22:25 ./
drwxrwxr-x 3 remnux remnux  4096 Feb  2 22:25 ../
-rw-rw-r-- 1 remnux remnux  5120 Apr  7  2014 _75C053BA9648745475BB4EE6B8141822
-rw-rw-r-- 1 remnux remnux 96740 Feb  2 22:25 8CC00.cab
-rw-rw-r-- 1 remnux remnux 90596 Feb  2 22:25 8E400.zip
drwxrwxr-x 3 remnux remnux  4096 Feb  2 22:28 carLambo/
-rw-rw-r-- 1 remnux remnux  4662 Apr  7  2014 _CFADD94CF3B345E684381C7F3A1EEE82
drwxrwxr-x 2 remnux remnux  4096 Feb  2 22:28 META-INF/
</span></pre></table></code></div></div><p>From here we can work with the extracted files as we please! The executable content in <code class="language-plaintext highlighter-rouge">_75C053BA9648745475BB4EE6B8141822</code> isn’t malicious and seems to just be part of the MSI “background noise” here. Under the carLambo folder we can browse and decompile class files as desired using JD-GUI, <code class="language-plaintext highlighter-rouge">cfr</code>, or another tool.</p><div class="language-console highlighter-rouge"><div class="code-header"> <span data-label-text="Console"><i class="fas fa-code fa-fw small"></i></span> <button aria-label="copy" data-title-succeed="Copied!"><i class="far fa-clipboard"></i></button></div><div class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre><td class="rouge-code"><pre><span class="gp">remnux@remnux:~/cases/unk-msi/_delivery.msi.extracted/carLambo$</span><span class="w"> </span>cfr Main.class | <span class="nb">head</span>
<span class="go">/*
 * Decompiled with CFR 0.149.
 */
</span><span class="gp">package carLambo;</span><span class="w">
</span><span class="go">
</span><span class="gp">import carLambo.dhgfgh;</span><span class="w">
</span><span class="gp">import carLambo.dndghd;</span><span class="w">
</span><span class="gp">import carLambo.fgssdg;</span><span class="w">
</span><span class="gp">import carLambo.sbsbgsrg;</span><span class="w">
</span><span class="gp">import carLambo.sdfsldf;</span><span class="w">
</span></pre></table></code></div></div><h2 id="how-do-we-know-its-strrat"><span class="me-2">How do we know it’s STRRAT??</span><a href="#how-do-we-know-its-strrat" class="anchor text-muted"><i class="fas fa-hashtag"></i></a></h2><p>Alright, the first piece of evidence that this malware is STRRAT is that the entire Java package inside the JAR file is named “carLambo”. Googling <a href="https://www.google.com/search?q=%22carLambo%22+java"><code class="language-plaintext highlighter-rouge">"carLambo" java</code></a> gives you loads of sandbox reports and some analysis reports pointing to STRRAT.</p><p>The next piece of evidence is the structure of the JAR file. There is a <code class="language-plaintext highlighter-rouge">resources/config.txt</code> file. This is consistent with STRRAT. In addition, despite other classes being obfuscated, there are deobfuscated classes referring to Windows USER32, WinGDI, Kernel32, and HBrowserNativeApis keywords. These are also consistent with STRRAT based on documentation from <a href="https://www.jaiminton.com/reverse-engineering/strrat">Jai Minton</a>.</p><p>Alright, that’s where I end tonight so I can go to bed. Hopefully in the next few days I’ll put together another post on analyzing this STRRAT sample some more so we can get its C2 address and such. Thanks for reading!</p></div><div class="post-tail-wrapper text-muted"><div class="post-meta mb-3"> <i class="far fa-folder-open fa-fw me-1"></i> <a href="/categories/malware/">malware</a></div><div class="post-tags"> <i class="fa fa-tags fa-fw me-1"></i> <a href="/tags/malware/" class="post-tag no-text-decoration" >malware</a> <a href="/tags/strrat/" class="post-tag no-text-decoration" >strrat</a> <a href="/tags/msi/" class="post-tag no-text-decoration" >msi</a> <a href="/tags/oledump/" class="post-tag no-text-decoration" >oledump</a> <a href="/tags/java/" class="post-tag no-text-decoration" >java</a> <a href="/tags/jar/" class="post-tag no-text-decoration" >jar</a></div><div class=" post-tail-bottom d-flex justify-content-between align-items-center mt-5 pb-2 " ><div class="license-wrapper"> This post is licensed under <a href="https://creativecommons.org/licenses/by/4.0/"> CC BY 4.0 </a> by the author.</div><div class="share-wrapper d-flex align-items-center"> <span class="share-label text-muted">Share</span> <span class="share-icons"> <a href="https://twitter.com/intent/tweet?text=STRRAT%20Attached%20to%20a%20MSI%20File%20-%20Tony%20Lambert&url=https%3A%2F%2Fforensicitguy.github.io%2Fstrrat-attached-to-msi%2F" target="_blank" rel="noopener" data-bs-toggle="tooltip" data-bs-placement="top" title="Twitter" aria-label="Twitter"> <i class="fa-fw fa-brands fa-square-x-twitter"></i> </a> <a href="https://www.facebook.com/sharer/sharer.php?title=STRRAT%20Attached%20to%20a%20MSI%20File%20-%20Tony%20Lambert&u=https%3A%2F%2Fforensicitguy.github.io%2Fstrrat-attached-to-msi%2F" target="_blank" rel="noopener" data-bs-toggle="tooltip" data-bs-placement="top" title="Facebook" aria-label="Facebook"> <i class="fa-fw fab fa-facebook-square"></i> </a> <a href="https://t.me/share/url?url=https%3A%2F%2Fforensicitguy.github.io%2Fstrrat-attached-to-msi%2F&text=STRRAT%20Attached%20to%20a%20MSI%20File%20-%20Tony%20Lambert" target="_blank" rel="noopener" data-bs-toggle="tooltip" data-bs-placement="top" title="Telegram" aria-label="Telegram"> <i class="fa-fw fab fa-telegram"></i> </a> <a href="https://www.linkedin.com/sharing/share-offsite/?url=https%3A%2F%2Fforensicitguy.github.io%2Fstrrat-attached-to-msi%2F" target="_blank" rel="noopener" data-bs-toggle="tooltip" data-bs-placement="top" title="Linkedin" aria-label="Linkedin"> <i class="fa-fw fab fa-linkedin"></i> </a> <script defer type="module" src="https://cdn.jsdelivr.net/npm/@justinribeiro/share-to-mastodon/+esm"></script> <button class="btn text-start" data-bs-toggle="tooltip" data-bs-placement="top" title="Mastodon" aria-label="Mastodon"> <share-to-mastodon class="share-mastodon" message="STRRAT%20Attached%20to%20a%20MSI%20File%20-%20Tony%20Lambert" url="https%3A%2F%2Fforensicitguy.github.io%2Fstrrat-attached-to-msi%2F"customInstanceList="[{&quot;label&quot;:&quot;mastodon.social&quot;,&quot;link&quot;:&quot;https://mastodon.social/&quot;},{&quot;label&quot;:&quot;mastodon.online&quot;,&quot;link&quot;:&quot;https://mastodon.online/&quot;},{&quot;label&quot;:&quot;fosstodon.org&quot;,&quot;link&quot;:&quot;https://fosstodon.org/&quot;},{&quot;label&quot;:&quot;infosec.exchange&quot;,&quot;link&quot;:&quot;https://infosec.exchange/&quot;}]" > <i class="fa-fw fa-brands fa-mastodon"></i> </share-to-mastodon> </button> <a href="https://www.reddit.com/submit?url=https%3A%2F%2Fforensicitguy.github.io%2Fstrrat-attached-to-msi%2F&title=STRRAT%20Attached%20to%20a%20MSI%20File%20-%20Tony%20Lambert" target="_blank" rel="noopener" data-bs-toggle="tooltip" data-bs-placement="top" title="Reddit" aria-label="Reddit"> <i class="fa-fw fa-brands fa-square-reddit"></i> </a> <button id="copy-link" aria-label="Copy link" class="btn small" data-bs-toggle="tooltip" data-bs-placement="top" title="Copy link" data-title-succeed="Link copied successfully!" > <i class="fa-fw fas fa-link pe-none fs-6"></i> </button> </span></div></div></div></article></main><aside aria-label="Panel" id="panel-wrapper" class="col-xl-3 ps-2 mb-5 text-muted"><div class="access"><section id="access-lastmod"><h2 class="panel-heading">Recently Updated</h2><ul class="content list-unstyled ps-0 pb-1 ms-1 mt-2"><li class="text-truncate lh-lg"> <a href="/decompiling-jphp-loader-binwalk-cfr/">Decompiling a JPHP Loader with binwalk and cfr</a><li class="text-truncate lh-lg"> <a href="/dissecting-java-pikabot-dropper/">Dissecting a Java Pikabot Dropper</a><li class="text-truncate lh-lg"> <a href="/timelining-malware-vhd-intelligence/">Timelining a Malicious VHD for More Intelligence</a><li class="text-truncate lh-lg"> <a href="/vhd-malware-an-excellent-choice/">Malware via VHD Files, an Excellent Choice</a><li class="text-truncate lh-lg"> <a href="/faster-malware-triage-yara/">Faster Malware Triage with YARA</a></ul></section><section><h2 class="panel-heading">Trending Tags</h2><div class="d-flex flex-wrap mt-3 mb-1 me-3"> <a class="post-tag btn btn-outline-primary" href="/tags/malware/">malware</a> <a class="post-tag btn btn-outline-primary" href="/tags/powershell/">powershell</a> <a class="post-tag btn btn-outline-primary" href="/tags/msi/">msi</a> <a class="post-tag btn btn-outline-primary" href="/tags/windows/">windows</a> <a class="post-tag btn btn-outline-primary" href="/tags/agenttesla/">agenttesla</a> <a class="post-tag btn btn-outline-primary" href="/tags/jar/">jar</a> <a class="post-tag btn btn-outline-primary" href="/tags/java/">java</a> <a class="post-tag btn btn-outline-primary" href="/tags/ld-preload/">ld_preload</a> <a class="post-tag btn btn-outline-primary" href="/tags/mshta/">mshta</a> <a class="post-tag btn btn-outline-primary" href="/tags/net/">.net</a></div></section></div><section id="toc-wrapper" class="d-none ps-0 pe-4"><h2 class="panel-heading ps-3 mb-2">Contents</h2><nav id="toc"></nav></section></aside></div><div class="row"><div id="tail-wrapper" class="col-12 col-lg-11 col-xl-9 px-md-4"><aside id="related-posts" aria-labelledby="related-label"><h3 class="mb-4" id="related-label">Further Reading</h3><nav class="row row-cols-1 row-cols-md-2 row-cols-xl-3 g-4 mb-4"><article class="col"> <a href="/dissecting-java-pikabot-dropper/" class="post-preview card h-100"><div class="card-body"> <time data-ts="1709424000" data-df="ll" > Mar 3, 2024 </time><h4 class="pt-0 my-2">Dissecting a Java Pikabot Dropper</h4><div class="text-muted"><p>In mid-February, TA577 experimented with a Java Archive (JAR) dropper to deliver Pikabot to their victims. In this post I’ll explore some static analysis of that dropper to show how we can get info...</p></div></div></a></article><article class="col"> <a href="/njrat-installed-from-msi/" class="post-preview card h-100"><div class="card-body"> <time data-ts="1643846400" data-df="ll" > Feb 3, 2022 </time><h4 class="pt-0 my-2">njRAT Installed from a MSI</h4><div class="text-muted"><p>In my last post I walked through the analysis of an unusual MSI file that an adversary had tacked a STRRAT Java ARchive file to the end of the MSI contents. In this post, I want to walk through a m...</p></div></div></a></article><article class="col"> <a href="/analyzing-log4shell-muhstik/" class="post-preview card h-100"><div class="card-body"> <time data-ts="1639267200" data-df="ll" > Dec 12, 2021 </time><h4 class="pt-0 my-2">Analyzing a Log4Shell log4j Exploit from Muhstik</h4><div class="text-muted"><p>In this post I set out to analyze a simple chunk of Log4Shell log4j exploit code to see how it works. Finding the Exploit I wasn’t running a honeypot or anything, I just figured I could rustle ar...</p></div></div></a></article></nav></aside><nav class="post-navigation d-flex justify-content-between" aria-label="Post Navigation"> <a href="/guloader-executing-shellcode-callbacks/" class="btn btn-outline-primary" aria-label="Older" ><p>GuLoader Executing Shellcode Using Callback Functions</p></a> <a href="/njrat-installed-from-msi/" class="btn btn-outline-primary" aria-label="Newer" ><p>njRAT Installed from a MSI</p></a></nav><footer aria-label="Site Info" class=" d-flex flex-column justify-content-center text-muted flex-lg-row justify-content-lg-between align-items-lg-center pb-lg-3 " ><p>© <time>2024</time> <a href="https://twitter.com/ForensicITGuy">Tony Lambert</a>. <span data-bs-toggle="tooltip" data-bs-placement="top" title="Except where otherwise noted, the blog posts on this site are licensed under the Creative Commons Attribution 4.0 International (CC BY 4.0) License by the author." >Some rights reserved.</span></p><p>Powered by <a href="https://jekyllrb.com" target="_blank" rel="noopener">Jekyll</a> with <a data-bs-toggle="tooltip" data-bs-placement="top" title="v7.1.1" href="https://github.com/cotes2020/jekyll-theme-chirpy" target="_blank" rel="noopener" >Chirpy</a> theme.</p></footer></div></div><div id="search-result-wrapper" class="d-flex justify-content-center d-none"><div class="col-11 content"><div id="search-hints"><section><h2 class="panel-heading">Trending Tags</h2><div class="d-flex flex-wrap mt-3 mb-1 me-3"> <a class="post-tag btn btn-outline-primary" href="/tags/malware/">malware</a> <a class="post-tag btn btn-outline-primary" href="/tags/powershell/">powershell</a> <a class="post-tag btn btn-outline-primary" href="/tags/msi/">msi</a> <a class="post-tag btn btn-outline-primary" href="/tags/windows/">windows</a> <a class="post-tag btn btn-outline-primary" href="/tags/agenttesla/">agenttesla</a> <a class="post-tag btn btn-outline-primary" href="/tags/jar/">jar</a> <a class="post-tag btn btn-outline-primary" href="/tags/java/">java</a> <a class="post-tag btn btn-outline-primary" href="/tags/ld-preload/">ld_preload</a> <a class="post-tag btn btn-outline-primary" href="/tags/mshta/">mshta</a> <a class="post-tag btn btn-outline-primary" href="/tags/net/">.net</a></div></section></div><div id="search-results" class="d-flex flex-wrap justify-content-center text-muted mt-3"></div></div></div></div><aside aria-label="Scroll to Top"> <button id="back-to-top" type="button" class="btn btn-lg btn-box-shadow"> <i class="fas fa-angle-up"></i> </button></aside></div><div id="mask"></div><aside id="notification" class="toast" role="alert" aria-live="assertive" aria-atomic="true" data-bs-animation="true" data-bs-autohide="false" ><div class="toast-header"> <button type="button" class="btn-close ms-auto" data-bs-dismiss="toast" aria-label="Close" ></button></div><div class="toast-body text-center pt-0"><p class="px-2 mb-3">A new version of content is available.</p><button type="button" class="btn btn-primary" aria-label="Update"> Update </button></div></aside><script src="https://cdn.jsdelivr.net/combine/npm/simple-jekyll-search@1.10.0/dest/simple-jekyll-search.min.js,npm/loading-attribute-polyfill@2.1.1/dist/loading-attribute-polyfill.umd.min.js,npm/glightbox@3.3.0/dist/js/glightbox.min.js,npm/clipboard@2.0.11/dist/clipboard.min.js,npm/dayjs@1.11.13/dayjs.min.js,npm/dayjs@1.11.13/locale/en.js,npm/dayjs@1.11.13/plugin/relativeTime.js,npm/dayjs@1.11.13/plugin/localizedFormat.js,npm/tocbot@4.29.0/dist/tocbot.min.js"></script> <script src="/assets/js/dist/post.min.js"></script> <script defer src="/app.min.js?baseurl=&register=true" ></script> <script defer src="https://www.googletagmanager.com/gtag/js?id=G-THRVSJGH6S"></script> <script> document.addEventListener('DOMContentLoaded', function (event) { window.dataLayer = window.dataLayer || []; function gtag() { dataLayer.push(arguments); } gtag('js', new Date()); gtag('config', 'G-THRVSJGH6S'); }); </script> <script>SimpleJekyllSearch({ searchInput: document.getElementById('search-input'), resultsContainer: document.getElementById('search-results'), json: '/assets/js/data/search.json', searchResultTemplate: '<article class="px-1 px-sm-2 px-lg-4 px-xl-0"><header><h2><a href="{url}">{title}</a></h2><div class="post-meta d-flex flex-column flex-sm-row text-muted mt-1 mb-1"> {categories} {tags}</div></header><p>{snippet}</p></article>', noResultsText: '<p class="mt-5">Oops! No result founds.</p>', templateMiddleware: function(prop, value, template) { if (prop === 'categories') { if (value === '') { return `${value}`; } else { return `<div class="me-sm-4"><i class="far fa-folder fa-fw"></i>${value}</div>`; } } if (prop === 'tags') { if (value === '') { return `${value}`; } else { return `<div><i class="fa fa-tag fa-fw"></i>${value}</div>`; } } } }); </script>
